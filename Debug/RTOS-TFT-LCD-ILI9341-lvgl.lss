
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00023024  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00423024  00423024  00033024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  0042302c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00039778  204009e8  00423a14  000409e8  2**2
                  ALLOC
  4 .stack        00002000  2043a160  0045d18c  000409e8  2**0
                  ALLOC
  5 .heap         00000200  2043c160  0045f18c  000409e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000409e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00040a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   000b8f74  00000000  00000000  00040a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011978  00000000  00000000  000f99e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004bd51  00000000  00000000  0010b35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003008  00000000  00000000  001570ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051c0  00000000  00000000  0015a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000323d4  00000000  00000000  0015f274  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004abd0  00000000  00000000  00191648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1ab5  00000000  00000000  001dc218  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000096e8  00000000  00000000  0028dcd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 c1 43 20 69 7e 41 00 67 7e 41 00 67 7e 41 00     `.C i~A.g~A.g~A.
  400010:	67 7e 41 00 67 7e 41 00 67 7e 41 00 00 00 00 00     g~A.g~A.g~A.....
	...
  40002c:	f5 56 41 00 67 7e 41 00 00 00 00 00 95 57 41 00     .VA.g~A......WA.
  40003c:	fd 57 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     .WA.g~A.g~A.g~A.
  40004c:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  40005c:	67 7e 41 00 67 7e 41 00 00 00 00 00 45 7a 41 00     g~A.g~A.....EzA.
  40006c:	59 7a 41 00 6d 7a 41 00 67 7e 41 00 67 7e 41 00     YzA.mzA.g~A.g~A.
  40007c:	67 7e 41 00 81 7a 41 00 95 7a 41 00 67 7e 41 00     g~A..zA..zA.g~A.
  40008c:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  40009c:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  4000ac:	67 7e 41 00 67 7e 41 00 41 55 41 00 67 7e 41 00     g~A.g~A.AUA.g~A.
  4000bc:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  4000cc:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  4000dc:	67 7e 41 00 55 55 41 00 67 7e 41 00 67 7e 41 00     g~A.UUA.g~A.g~A.
  4000ec:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  4000fc:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  40010c:	67 7e 41 00 67 7e 41 00 00 00 00 00 00 00 00 00     g~A.g~A.........
  40011c:	00 00 00 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     ....g~A.g~A.g~A.
  40012c:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  40013c:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  40014c:	67 7e 41 00 67 7e 41 00 67 7e 41 00 67 7e 41 00     g~A.g~A.g~A.g~A.
  40015c:	67 7e 41 00 67 7e 41 00 67 7e 41 00                 g~A.g~A.g~A.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009e8 	.word	0x204009e8
  400184:	00000000 	.word	0x00000000
  400188:	0042302c 	.word	0x0042302c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0042302c 	.word	0x0042302c
  4001c8:	204009ec 	.word	0x204009ec
  4001cc:	0042302c 	.word	0x0042302c
  4001d0:	00000000 	.word	0x00000000

004001d4 <lv_disp_get_scr_act>:
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
  4001d4:	b108      	cbz	r0, 4001da <lv_disp_get_scr_act+0x6>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  4001d6:	6900      	ldr	r0, [r0, #16]
  4001d8:	4770      	bx	lr
{
  4001da:	b510      	push	{r4, lr}
  4001dc:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
  4001de:	4b08      	ldr	r3, [pc, #32]	; (400200 <lv_disp_get_scr_act+0x2c>)
  4001e0:	4798      	blx	r3
    if(!disp) {
  4001e2:	b110      	cbz	r0, 4001ea <lv_disp_get_scr_act+0x16>
    return disp->act_scr;
  4001e4:	6900      	ldr	r0, [r0, #16]
}
  4001e6:	b002      	add	sp, #8
  4001e8:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("no display registered to get its active screen");
  4001ea:	4b06      	ldr	r3, [pc, #24]	; (400204 <lv_disp_get_scr_act+0x30>)
  4001ec:	9300      	str	r3, [sp, #0]
  4001ee:	4b06      	ldr	r3, [pc, #24]	; (400208 <lv_disp_get_scr_act+0x34>)
  4001f0:	2235      	movs	r2, #53	; 0x35
  4001f2:	4906      	ldr	r1, [pc, #24]	; (40020c <lv_disp_get_scr_act+0x38>)
  4001f4:	2002      	movs	r0, #2
  4001f6:	4c06      	ldr	r4, [pc, #24]	; (400210 <lv_disp_get_scr_act+0x3c>)
  4001f8:	47a0      	blx	r4
        return NULL;
  4001fa:	2000      	movs	r0, #0
  4001fc:	e7f3      	b.n	4001e6 <lv_disp_get_scr_act+0x12>
  4001fe:	bf00      	nop
  400200:	00410131 	.word	0x00410131
  400204:	0041bf64 	.word	0x0041bf64
  400208:	0041be60 	.word	0x0041be60
  40020c:	0041bf34 	.word	0x0041bf34
  400210:	00410edd 	.word	0x00410edd

00400214 <lv_disp_get_scr_prev>:
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
  400214:	b108      	cbz	r0, 40021a <lv_disp_get_scr_prev+0x6>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  400216:	6940      	ldr	r0, [r0, #20]
  400218:	4770      	bx	lr
{
  40021a:	b510      	push	{r4, lr}
  40021c:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
  40021e:	4b08      	ldr	r3, [pc, #32]	; (400240 <lv_disp_get_scr_prev+0x2c>)
  400220:	4798      	blx	r3
    if(!disp) {
  400222:	b110      	cbz	r0, 40022a <lv_disp_get_scr_prev+0x16>
    return disp->prev_scr;
  400224:	6940      	ldr	r0, [r0, #20]
}
  400226:	b002      	add	sp, #8
  400228:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("no display registered to get its previous screen");
  40022a:	4b06      	ldr	r3, [pc, #24]	; (400244 <lv_disp_get_scr_prev+0x30>)
  40022c:	9300      	str	r3, [sp, #0]
  40022e:	4b06      	ldr	r3, [pc, #24]	; (400248 <lv_disp_get_scr_prev+0x34>)
  400230:	2246      	movs	r2, #70	; 0x46
  400232:	4906      	ldr	r1, [pc, #24]	; (40024c <lv_disp_get_scr_prev+0x38>)
  400234:	2002      	movs	r0, #2
  400236:	4c06      	ldr	r4, [pc, #24]	; (400250 <lv_disp_get_scr_prev+0x3c>)
  400238:	47a0      	blx	r4
        return NULL;
  40023a:	2000      	movs	r0, #0
  40023c:	e7f3      	b.n	400226 <lv_disp_get_scr_prev+0x12>
  40023e:	bf00      	nop
  400240:	00410131 	.word	0x00410131
  400244:	0041bf94 	.word	0x0041bf94
  400248:	0041be74 	.word	0x0041be74
  40024c:	0041bf34 	.word	0x0041bf34
  400250:	00410edd 	.word	0x00410edd

00400254 <lv_disp_get_layer_top>:
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
  400254:	b108      	cbz	r0, 40025a <lv_disp_get_layer_top+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  400256:	69c0      	ldr	r0, [r0, #28]
  400258:	4770      	bx	lr
{
  40025a:	b510      	push	{r4, lr}
  40025c:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
  40025e:	4b08      	ldr	r3, [pc, #32]	; (400280 <lv_disp_get_layer_top+0x2c>)
  400260:	4798      	blx	r3
    if(!disp) {
  400262:	b110      	cbz	r0, 40026a <lv_disp_get_layer_top+0x16>
    return disp->top_layer;
  400264:	69c0      	ldr	r0, [r0, #28]
}
  400266:	b002      	add	sp, #8
  400268:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
  40026a:	4b06      	ldr	r3, [pc, #24]	; (400284 <lv_disp_get_layer_top+0x30>)
  40026c:	9300      	str	r3, [sp, #0]
  40026e:	4b06      	ldr	r3, [pc, #24]	; (400288 <lv_disp_get_layer_top+0x34>)
  400270:	2268      	movs	r2, #104	; 0x68
  400272:	4906      	ldr	r1, [pc, #24]	; (40028c <lv_disp_get_layer_top+0x38>)
  400274:	2002      	movs	r0, #2
  400276:	4c06      	ldr	r4, [pc, #24]	; (400290 <lv_disp_get_layer_top+0x3c>)
  400278:	47a0      	blx	r4
        return NULL;
  40027a:	2000      	movs	r0, #0
  40027c:	e7f3      	b.n	400266 <lv_disp_get_layer_top+0x12>
  40027e:	bf00      	nop
  400280:	00410131 	.word	0x00410131
  400284:	0041bef8 	.word	0x0041bef8
  400288:	0041be8c 	.word	0x0041be8c
  40028c:	0041bf34 	.word	0x0041bf34
  400290:	00410edd 	.word	0x00410edd

00400294 <lv_disp_get_layer_sys>:
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
  400294:	b108      	cbz	r0, 40029a <lv_disp_get_layer_sys+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  400296:	6a00      	ldr	r0, [r0, #32]
  400298:	4770      	bx	lr
{
  40029a:	b510      	push	{r4, lr}
  40029c:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
  40029e:	4b08      	ldr	r3, [pc, #32]	; (4002c0 <lv_disp_get_layer_sys+0x2c>)
  4002a0:	4798      	blx	r3
    if(!disp) {
  4002a2:	b110      	cbz	r0, 4002aa <lv_disp_get_layer_sys+0x16>
    return disp->sys_layer;
  4002a4:	6a00      	ldr	r0, [r0, #32]
}
  4002a6:	b002      	add	sp, #8
  4002a8:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
  4002aa:	4b06      	ldr	r3, [pc, #24]	; (4002c4 <lv_disp_get_layer_sys+0x30>)
  4002ac:	9300      	str	r3, [sp, #0]
  4002ae:	4b06      	ldr	r3, [pc, #24]	; (4002c8 <lv_disp_get_layer_sys+0x34>)
  4002b0:	2279      	movs	r2, #121	; 0x79
  4002b2:	4906      	ldr	r1, [pc, #24]	; (4002cc <lv_disp_get_layer_sys+0x38>)
  4002b4:	2002      	movs	r0, #2
  4002b6:	4c06      	ldr	r4, [pc, #24]	; (4002d0 <lv_disp_get_layer_sys+0x3c>)
  4002b8:	47a0      	blx	r4
        return NULL;
  4002ba:	2000      	movs	r0, #0
  4002bc:	e7f3      	b.n	4002a6 <lv_disp_get_layer_sys+0x12>
  4002be:	bf00      	nop
  4002c0:	00410131 	.word	0x00410131
  4002c4:	0041bebc 	.word	0x0041bebc
  4002c8:	0041bea4 	.word	0x0041bea4
  4002cc:	0041bf34 	.word	0x0041bf34
  4002d0:	00410edd 	.word	0x00410edd

004002d4 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
  4002d4:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  4002d6:	4603      	mov	r3, r0
  4002d8:	b108      	cbz	r0, 4002de <lv_disp_get_theme+0xa>
    return disp->theme;
}
  4002da:	6898      	ldr	r0, [r3, #8]
  4002dc:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  4002de:	4b02      	ldr	r3, [pc, #8]	; (4002e8 <lv_disp_get_theme+0x14>)
  4002e0:	4798      	blx	r3
  4002e2:	4603      	mov	r3, r0
  4002e4:	e7f9      	b.n	4002da <lv_disp_get_theme+0x6>
  4002e6:	bf00      	nop
  4002e8:	00410131 	.word	0x00410131

004002ec <lv_obj_event_base>:


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
  4002ec:	b1a0      	cbz	r0, 400318 <lv_obj_event_base+0x2c>
    else base = class_p->base_class;
  4002ee:	6800      	ldr	r0, [r0, #0]

    /*Find a base in which Call the ancestor's event handler_cb is set*/
    while(base && base->event_cb == NULL) base = base->base_class;
  4002f0:	b1a8      	cbz	r0, 40031e <lv_obj_event_base+0x32>
  4002f2:	6903      	ldr	r3, [r0, #16]
  4002f4:	b923      	cbnz	r3, 400300 <lv_obj_event_base+0x14>
  4002f6:	6800      	ldr	r0, [r0, #0]
  4002f8:	b198      	cbz	r0, 400322 <lv_obj_event_base+0x36>
  4002fa:	6903      	ldr	r3, [r0, #16]
  4002fc:	2b00      	cmp	r3, #0
  4002fe:	d0fa      	beq.n	4002f6 <lv_obj_event_base+0xa>
{
  400300:	b510      	push	{r4, lr}
  400302:	460c      	mov	r4, r1

    if(base == NULL) return LV_RES_OK;
    if(base->event_cb == NULL) return LV_RES_OK;

    /*Call the actual event callback*/
    e->user_data = NULL;
  400304:	2300      	movs	r3, #0
  400306:	60cb      	str	r3, [r1, #12]
    base->event_cb(base, e);
  400308:	6903      	ldr	r3, [r0, #16]
  40030a:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
  40030c:	7e20      	ldrb	r0, [r4, #24]
  40030e:	f080 0001 	eor.w	r0, r0, #1
    if(base == NULL) return LV_RES_OK;
  400312:	f000 0001 	and.w	r0, r0, #1

    return res;
}
  400316:	bd10      	pop	{r4, pc}
    if(class_p == NULL) base = e->current_target->class_p;
  400318:	684b      	ldr	r3, [r1, #4]
  40031a:	6818      	ldr	r0, [r3, #0]
  40031c:	e7e8      	b.n	4002f0 <lv_obj_event_base+0x4>
    if(base == NULL) return LV_RES_OK;
  40031e:	2001      	movs	r0, #1
  400320:	4770      	bx	lr
  400322:	2001      	movs	r0, #1
  400324:	4770      	bx	lr
	...

00400328 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
  400328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40032c:	4606      	mov	r6, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
  40032e:	4b55      	ldr	r3, [pc, #340]	; (400484 <event_send_core+0x15c>)
  400330:	4798      	blx	r3
    if(indev_act) {
  400332:	b120      	cbz	r0, 40033e <event_send_core+0x16>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
  400334:	6800      	ldr	r0, [r0, #0]
  400336:	6883      	ldr	r3, [r0, #8]
  400338:	b10b      	cbz	r3, 40033e <event_send_core+0x16>
  40033a:	7a31      	ldrb	r1, [r6, #8]
  40033c:	4798      	blx	r3
    if(!obj->spec_attr) return NULL;
  40033e:	6873      	ldr	r3, [r6, #4]
  400340:	689b      	ldr	r3, [r3, #8]
  400342:	b153      	cbz	r3, 40035a <event_send_core+0x32>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
  400344:	7e9a      	ldrb	r2, [r3, #26]
  400346:	b152      	cbz	r2, 40035e <event_send_core+0x36>
    return &obj->spec_attr->event_dsc[id];
  400348:	68dc      	ldr	r4, [r3, #12]
    }

    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
    lv_res_t res = LV_RES_OK;
    res = lv_obj_event_base(NULL, e);
  40034a:	4631      	mov	r1, r6
  40034c:	2000      	movs	r0, #0
  40034e:	4b4e      	ldr	r3, [pc, #312]	; (400488 <event_send_core+0x160>)
  400350:	4798      	blx	r3
  400352:	4607      	mov	r7, r0

    uint32_t i = 0;
  400354:	2500      	movs	r5, #0
    if(!obj->spec_attr) return NULL;
  400356:	46a8      	mov	r8, r5
    while(event_dsc && res == LV_RES_OK) {
  400358:	e019      	b.n	40038e <event_send_core+0x66>
    if(!obj->spec_attr) return NULL;
  40035a:	2400      	movs	r4, #0
  40035c:	e7f5      	b.n	40034a <event_send_core+0x22>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
  40035e:	2400      	movs	r4, #0
  400360:	e7f3      	b.n	40034a <event_send_core+0x22>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
            e->user_data = event_dsc->user_data;
  400362:	6863      	ldr	r3, [r4, #4]
  400364:	60f3      	str	r3, [r6, #12]
            event_dsc->cb(e);
  400366:	6823      	ldr	r3, [r4, #0]
  400368:	4630      	mov	r0, r6
  40036a:	4798      	blx	r3

            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
  40036c:	7e33      	ldrb	r3, [r6, #24]
  40036e:	f013 0f01 	tst.w	r3, #1
  400372:	f040 8085 	bne.w	400480 <event_send_core+0x158>
        }

        i++;
  400376:	3501      	adds	r5, #1
    if(!obj->spec_attr) return NULL;
  400378:	6873      	ldr	r3, [r6, #4]
  40037a:	689b      	ldr	r3, [r3, #8]
  40037c:	b1eb      	cbz	r3, 4003ba <event_send_core+0x92>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
  40037e:	7e9a      	ldrb	r2, [r3, #26]
  400380:	4295      	cmp	r5, r2
  400382:	d21c      	bcs.n	4003be <event_send_core+0x96>
    return &obj->spec_attr->event_dsc[id];
  400384:	eb05 0445 	add.w	r4, r5, r5, lsl #1
  400388:	68db      	ldr	r3, [r3, #12]
  40038a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    while(event_dsc && res == LV_RES_OK) {
  40038e:	f114 0900 	adds.w	r9, r4, #0
  400392:	bf18      	it	ne
  400394:	f04f 0901 	movne.w	r9, #1
  400398:	2f01      	cmp	r7, #1
  40039a:	bf18      	it	ne
  40039c:	f04f 0900 	movne.w	r9, #0
  4003a0:	f1b9 0f00 	cmp.w	r9, #0
  4003a4:	d00d      	beq.n	4003c2 <event_send_core+0x9a>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
  4003a6:	6823      	ldr	r3, [r4, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d0e4      	beq.n	400376 <event_send_core+0x4e>
  4003ac:	7a23      	ldrb	r3, [r4, #8]
  4003ae:	2b00      	cmp	r3, #0
  4003b0:	d0d7      	beq.n	400362 <event_send_core+0x3a>
  4003b2:	7a32      	ldrb	r2, [r6, #8]
  4003b4:	429a      	cmp	r2, r3
  4003b6:	d1de      	bne.n	400376 <event_send_core+0x4e>
  4003b8:	e7d3      	b.n	400362 <event_send_core+0x3a>
    if(!obj->spec_attr) return NULL;
  4003ba:	4644      	mov	r4, r8
  4003bc:	e7e7      	b.n	40038e <event_send_core+0x66>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
  4003be:	4644      	mov	r4, r8
  4003c0:	e7e5      	b.n	40038e <event_send_core+0x66>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e))
  4003c2:	2f01      	cmp	r7, #1
  4003c4:	d002      	beq.n	4003cc <event_send_core+0xa4>
            if(res != LV_RES_OK) return LV_RES_INV;

    }

    return res;
}
  4003c6:	4638      	mov	r0, r7
  4003c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e))
  4003cc:	6870      	ldr	r0, [r6, #4]
  4003ce:	6843      	ldr	r3, [r0, #4]
  4003d0:	2b00      	cmp	r3, #0
  4003d2:	d0f8      	beq.n	4003c6 <event_send_core+0x9e>

static bool event_is_bubbled(lv_event_t * e)
{
    /*Event codes that always bubble*/
    switch(e->code) {
  4003d4:	7a33      	ldrb	r3, [r6, #8]
  4003d6:	3b23      	subs	r3, #35	; 0x23
  4003d8:	2b01      	cmp	r3, #1
  4003da:	d80f      	bhi.n	4003fc <event_send_core+0xd4>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
  4003dc:	f04f 0901 	mov.w	r9, #1
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e))
  4003e0:	f1b9 0f00 	cmp.w	r9, #0
  4003e4:	d0ef      	beq.n	4003c6 <event_send_core+0x9e>
            e->current_target = e->current_target->parent;
  4003e6:	6873      	ldr	r3, [r6, #4]
  4003e8:	685b      	ldr	r3, [r3, #4]
  4003ea:	6073      	str	r3, [r6, #4]
            res = event_send_core(e);
  4003ec:	4630      	mov	r0, r6
  4003ee:	f7ff ff9b 	bl	400328 <event_send_core>
            if(e->deleted) return LV_RES_INV;
  4003f2:	2801      	cmp	r0, #1
  4003f4:	bf14      	ite	ne
  4003f6:	2700      	movne	r7, #0
  4003f8:	2701      	moveq	r7, #1
  4003fa:	e7e4      	b.n	4003c6 <event_send_core+0x9e>
        default:
            break;
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
  4003fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400400:	4b22      	ldr	r3, [pc, #136]	; (40048c <event_send_core+0x164>)
  400402:	4798      	blx	r3
  400404:	2800      	cmp	r0, #0
  400406:	d0de      	beq.n	4003c6 <event_send_core+0x9e>

    switch(e->code) {
  400408:	7a33      	ldrb	r3, [r6, #8]
  40040a:	3b11      	subs	r3, #17
  40040c:	2b19      	cmp	r3, #25
  40040e:	d8ea      	bhi.n	4003e6 <event_send_core+0xbe>
  400410:	a201      	add	r2, pc, #4	; (adr r2, 400418 <event_send_core+0xf0>)
  400412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400416:	bf00      	nop
  400418:	004003e1 	.word	0x004003e1
  40041c:	004003e1 	.word	0x004003e1
  400420:	004003e1 	.word	0x004003e1
  400424:	004003e1 	.word	0x004003e1
  400428:	004003e1 	.word	0x004003e1
  40042c:	004003e1 	.word	0x004003e1
  400430:	004003e1 	.word	0x004003e1
  400434:	004003e1 	.word	0x004003e1
  400438:	004003e1 	.word	0x004003e1
  40043c:	004003e1 	.word	0x004003e1
  400440:	004003e1 	.word	0x004003e1
  400444:	004003e7 	.word	0x004003e7
  400448:	004003e7 	.word	0x004003e7
  40044c:	004003e1 	.word	0x004003e1
  400450:	004003e7 	.word	0x004003e7
  400454:	004003e7 	.word	0x004003e7
  400458:	004003e1 	.word	0x004003e1
  40045c:	004003e1 	.word	0x004003e1
  400460:	004003e1 	.word	0x004003e1
  400464:	004003e1 	.word	0x004003e1
  400468:	004003e7 	.word	0x004003e7
  40046c:	004003e7 	.word	0x004003e7
  400470:	004003e1 	.word	0x004003e1
  400474:	004003e1 	.word	0x004003e1
  400478:	004003e7 	.word	0x004003e7
  40047c:	004003e1 	.word	0x004003e1
            if(e->deleted) return LV_RES_INV;
  400480:	2700      	movs	r7, #0
  400482:	e7a0      	b.n	4003c6 <event_send_core+0x9e>
  400484:	00400a05 	.word	0x00400a05
  400488:	004002ed 	.word	0x004002ed
  40048c:	004013e5 	.word	0x004013e5

00400490 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  400490:	b1c8      	cbz	r0, 4004c6 <lv_event_send+0x36>
{
  400492:	b510      	push	{r4, lr}
  400494:	b088      	sub	sp, #32
    e.target = obj;
  400496:	9001      	str	r0, [sp, #4]
    e.current_target = obj;
  400498:	9002      	str	r0, [sp, #8]
    e.code = event_code;
  40049a:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
  40049e:	2100      	movs	r1, #0
  4004a0:	9104      	str	r1, [sp, #16]
    e.param = param;
  4004a2:	9205      	str	r2, [sp, #20]
    e.deleted = 0;
  4004a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
  4004a8:	f361 0300 	bfi	r3, r1, #0, #1
  4004ac:	f88d 301c 	strb.w	r3, [sp, #28]
    e.prev = event_head;
  4004b0:	4c06      	ldr	r4, [pc, #24]	; (4004cc <lv_event_send+0x3c>)
  4004b2:	6823      	ldr	r3, [r4, #0]
  4004b4:	9306      	str	r3, [sp, #24]
    event_head = &e;
  4004b6:	a801      	add	r0, sp, #4
  4004b8:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
  4004ba:	4b05      	ldr	r3, [pc, #20]	; (4004d0 <lv_event_send+0x40>)
  4004bc:	4798      	blx	r3
    event_head = e.prev;
  4004be:	9b06      	ldr	r3, [sp, #24]
  4004c0:	6023      	str	r3, [r4, #0]
}
  4004c2:	b008      	add	sp, #32
  4004c4:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  4004c6:	2001      	movs	r0, #1
  4004c8:	4770      	bx	lr
  4004ca:	bf00      	nop
  4004cc:	20400a04 	.word	0x20400a04
  4004d0:	00400329 	.word	0x00400329

004004d4 <lv_event_get_target>:
}
  4004d4:	6800      	ldr	r0, [r0, #0]
  4004d6:	4770      	bx	lr

004004d8 <lv_event_get_code>:
}
  4004d8:	7a00      	ldrb	r0, [r0, #8]
  4004da:	4770      	bx	lr

004004dc <lv_event_get_param>:
}
  4004dc:	6900      	ldr	r0, [r0, #16]
  4004de:	4770      	bx	lr

004004e0 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
  4004e0:	4b08      	ldr	r3, [pc, #32]	; (400504 <_lv_event_mark_deleted+0x24>)
  4004e2:	681b      	ldr	r3, [r3, #0]
    while(e) {
  4004e4:	b93b      	cbnz	r3, 4004f6 <_lv_event_mark_deleted+0x16>
  4004e6:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
  4004e8:	7e1a      	ldrb	r2, [r3, #24]
  4004ea:	f042 0201 	orr.w	r2, r2, #1
  4004ee:	761a      	strb	r2, [r3, #24]
        e = e->prev;
  4004f0:	695b      	ldr	r3, [r3, #20]
    while(e) {
  4004f2:	2b00      	cmp	r3, #0
  4004f4:	d0f7      	beq.n	4004e6 <_lv_event_mark_deleted+0x6>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
  4004f6:	685a      	ldr	r2, [r3, #4]
  4004f8:	4282      	cmp	r2, r0
  4004fa:	d0f5      	beq.n	4004e8 <_lv_event_mark_deleted+0x8>
  4004fc:	681a      	ldr	r2, [r3, #0]
  4004fe:	4290      	cmp	r0, r2
  400500:	d1f6      	bne.n	4004f0 <_lv_event_mark_deleted+0x10>
  400502:	e7f1      	b.n	4004e8 <_lv_event_mark_deleted+0x8>
  400504:	20400a04 	.word	0x20400a04

00400508 <lv_obj_add_event_cb>:
{
  400508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40050c:	b084      	sub	sp, #16
  40050e:	4604      	mov	r4, r0
  400510:	460f      	mov	r7, r1
  400512:	4616      	mov	r6, r2
  400514:	461d      	mov	r5, r3
    lv_obj_allocate_spec_attr(obj);
  400516:	4b23      	ldr	r3, [pc, #140]	; (4005a4 <lv_obj_add_event_cb+0x9c>)
  400518:	4798      	blx	r3
    obj->spec_attr->event_dsc_cnt++;
  40051a:	68a2      	ldr	r2, [r4, #8]
  40051c:	7e93      	ldrb	r3, [r2, #26]
  40051e:	3301      	adds	r3, #1
  400520:	7693      	strb	r3, [r2, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
  400522:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                               obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
  400526:	f898 101a 	ldrb.w	r1, [r8, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
  40052a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40052e:	0089      	lsls	r1, r1, #2
  400530:	f8d8 000c 	ldr.w	r0, [r8, #12]
  400534:	4b1c      	ldr	r3, [pc, #112]	; (4005a8 <lv_obj_add_event_cb+0xa0>)
  400536:	4798      	blx	r3
  400538:	f8c8 000c 	str.w	r0, [r8, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
  40053c:	68a2      	ldr	r2, [r4, #8]
  40053e:	68d3      	ldr	r3, [r2, #12]
  400540:	b31b      	cbz	r3, 40058a <lv_obj_add_event_cb+0x82>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
  400542:	7e92      	ldrb	r2, [r2, #26]
  400544:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400548:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40054c:	f843 7c0c 	str.w	r7, [r3, #-12]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
  400550:	68a2      	ldr	r2, [r4, #8]
  400552:	7e93      	ldrb	r3, [r2, #26]
  400554:	68d2      	ldr	r2, [r2, #12]
  400556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40055a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40055e:	f803 6c04 	strb.w	r6, [r3, #-4]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
  400562:	68a2      	ldr	r2, [r4, #8]
  400564:	7e93      	ldrb	r3, [r2, #26]
  400566:	68d2      	ldr	r2, [r2, #12]
  400568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40056c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  400570:	f843 5c08 	str.w	r5, [r3, #-8]
    return &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
  400574:	68a2      	ldr	r2, [r4, #8]
  400576:	7e93      	ldrb	r3, [r2, #26]
  400578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40057c:	009b      	lsls	r3, r3, #2
  40057e:	3b0c      	subs	r3, #12
  400580:	68d0      	ldr	r0, [r2, #12]
}
  400582:	4418      	add	r0, r3
  400584:	b004      	add	sp, #16
  400586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
  40058a:	4b08      	ldr	r3, [pc, #32]	; (4005ac <lv_obj_add_event_cb+0xa4>)
  40058c:	9302      	str	r3, [sp, #8]
  40058e:	4b08      	ldr	r3, [pc, #32]	; (4005b0 <lv_obj_add_event_cb+0xa8>)
  400590:	9301      	str	r3, [sp, #4]
  400592:	4b08      	ldr	r3, [pc, #32]	; (4005b4 <lv_obj_add_event_cb+0xac>)
  400594:	9300      	str	r3, [sp, #0]
  400596:	4b08      	ldr	r3, [pc, #32]	; (4005b8 <lv_obj_add_event_cb+0xb0>)
  400598:	22a0      	movs	r2, #160	; 0xa0
  40059a:	4908      	ldr	r1, [pc, #32]	; (4005bc <lv_obj_add_event_cb+0xb4>)
  40059c:	2003      	movs	r0, #3
  40059e:	4c08      	ldr	r4, [pc, #32]	; (4005c0 <lv_obj_add_event_cb+0xb8>)
  4005a0:	47a0      	blx	r4
  4005a2:	e7fe      	b.n	4005a2 <lv_obj_add_event_cb+0x9a>
  4005a4:	004018d9 	.word	0x004018d9
  4005a8:	0041153d 	.word	0x0041153d
  4005ac:	0041c064 	.word	0x0041c064
  4005b0:	0041c074 	.word	0x0041c074
  4005b4:	0041c098 	.word	0x0041c098
  4005b8:	0041bfc8 	.word	0x0041bfc8
  4005bc:	0041c034 	.word	0x0041c034
  4005c0:	00410edd 	.word	0x00410edd

004005c4 <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
  4005c4:	7a03      	ldrb	r3, [r0, #8]
  4005c6:	3b01      	subs	r3, #1
    if(e->code == LV_EVENT_PRESSED ||
  4005c8:	b2db      	uxtb	r3, r3
  4005ca:	2b0f      	cmp	r3, #15
  4005cc:	d801      	bhi.n	4005d2 <lv_event_get_indev+0xe>
    return e->param;
  4005ce:	6900      	ldr	r0, [r0, #16]
        return lv_event_get_param(e);
  4005d0:	4770      	bx	lr
{
  4005d2:	b510      	push	{r4, lr}
  4005d4:	b082      	sub	sp, #8
        LV_LOG_WARN("Not interpreted with this event code");
  4005d6:	4b06      	ldr	r3, [pc, #24]	; (4005f0 <lv_event_get_indev+0x2c>)
  4005d8:	9300      	str	r3, [sp, #0]
  4005da:	4b06      	ldr	r3, [pc, #24]	; (4005f4 <lv_event_get_indev+0x30>)
  4005dc:	f240 1209 	movw	r2, #265	; 0x109
  4005e0:	4905      	ldr	r1, [pc, #20]	; (4005f8 <lv_event_get_indev+0x34>)
  4005e2:	2002      	movs	r0, #2
  4005e4:	4c05      	ldr	r4, [pc, #20]	; (4005fc <lv_event_get_indev+0x38>)
  4005e6:	47a0      	blx	r4
        return NULL;
  4005e8:	2000      	movs	r0, #0
}
  4005ea:	b002      	add	sp, #8
  4005ec:	bd10      	pop	{r4, pc}
  4005ee:	bf00      	nop
  4005f0:	0041c00c 	.word	0x0041c00c
  4005f4:	0041bfdc 	.word	0x0041bfdc
  4005f8:	0041c034 	.word	0x0041c034
  4005fc:	00410edd 	.word	0x00410edd

00400600 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
  400600:	7a03      	ldrb	r3, [r0, #8]
  400602:	2b13      	cmp	r3, #19
  400604:	d00c      	beq.n	400620 <lv_event_set_ext_draw_size+0x20>
{
  400606:	b510      	push	{r4, lr}
  400608:	b082      	sub	sp, #8
        LV_LOG_WARN("Not interpreted with this event code");
  40060a:	4b09      	ldr	r3, [pc, #36]	; (400630 <lv_event_set_ext_draw_size+0x30>)
  40060c:	9300      	str	r3, [sp, #0]
  40060e:	4b09      	ldr	r3, [pc, #36]	; (400634 <lv_event_set_ext_draw_size+0x34>)
  400610:	f44f 72aa 	mov.w	r2, #340	; 0x154
  400614:	4908      	ldr	r1, [pc, #32]	; (400638 <lv_event_set_ext_draw_size+0x38>)
  400616:	2002      	movs	r0, #2
  400618:	4c08      	ldr	r4, [pc, #32]	; (40063c <lv_event_set_ext_draw_size+0x3c>)
  40061a:	47a0      	blx	r4
}
  40061c:	b002      	add	sp, #8
  40061e:	bd10      	pop	{r4, pc}
    return e->param;
  400620:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
  400622:	f9b2 3000 	ldrsh.w	r3, [r2]
  400626:	4299      	cmp	r1, r3
  400628:	bfb8      	it	lt
  40062a:	4619      	movlt	r1, r3
  40062c:	8011      	strh	r1, [r2, #0]
  40062e:	4770      	bx	lr
  400630:	0041c00c 	.word	0x0041c00c
  400634:	0041bff0 	.word	0x0041bff0
  400638:	0041c034 	.word	0x0041c034
  40063c:	00410edd 	.word	0x00410edd

00400640 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
  400640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400644:	4605      	mov	r5, r0
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
  400646:	2000      	movs	r0, #0
  400648:	4b15      	ldr	r3, [pc, #84]	; (4006a0 <get_indev+0x60>)
  40064a:	4798      	blx	r3
    while(indev) {
  40064c:	b310      	cbz	r0, 400694 <get_indev+0x54>
  40064e:	4604      	mov	r4, r0
  400650:	f04f 0900 	mov.w	r9, #0
  400654:	46c8      	mov	r8, r9
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  400656:	4e13      	ldr	r6, [pc, #76]	; (4006a4 <get_indev+0x64>)
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
  400658:	4f11      	ldr	r7, [pc, #68]	; (4006a0 <get_indev+0x60>)
  40065a:	e007      	b.n	40066c <get_indev+0x2c>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
  40065c:	46a1      	mov	r9, r4
  40065e:	2804      	cmp	r0, #4
  400660:	bf08      	it	eq
  400662:	46a0      	moveq	r8, r4
        indev = lv_indev_get_next(indev);
  400664:	4620      	mov	r0, r4
  400666:	47b8      	blx	r7
    while(indev) {
  400668:	4604      	mov	r4, r0
  40066a:	b140      	cbz	r0, 40067e <get_indev+0x3e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  40066c:	4620      	mov	r0, r4
  40066e:	47b0      	blx	r6
        if(indev->group == g) {
  400670:	6d23      	ldr	r3, [r4, #80]	; 0x50
  400672:	42ab      	cmp	r3, r5
  400674:	d1f6      	bne.n	400664 <get_indev+0x24>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
  400676:	2802      	cmp	r0, #2
  400678:	d1f0      	bne.n	40065c <get_indev+0x1c>
  40067a:	46a0      	mov	r8, r4
  40067c:	e002      	b.n	400684 <get_indev+0x44>
    }

    if(indev_encoder) return indev_encoder;
  40067e:	f1b8 0f00 	cmp.w	r8, #0
  400682:	d002      	beq.n	40068a <get_indev+0x4a>
    if(indev_group) return indev_group;

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
}
  400684:	4640      	mov	r0, r8
  400686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(indev_group) return indev_group;
  40068a:	f1b9 0f00 	cmp.w	r9, #0
  40068e:	d001      	beq.n	400694 <get_indev+0x54>
  400690:	46c8      	mov	r8, r9
  400692:	e7f7      	b.n	400684 <get_indev+0x44>
    return lv_indev_get_next(NULL);
  400694:	2000      	movs	r0, #0
  400696:	4b02      	ldr	r3, [pc, #8]	; (4006a0 <get_indev+0x60>)
  400698:	4798      	blx	r3
  40069a:	4680      	mov	r8, r0
  40069c:	e7f2      	b.n	400684 <get_indev+0x44>
  40069e:	bf00      	nop
  4006a0:	004101fd 	.word	0x004101fd
  4006a4:	00400a11 	.word	0x00400a11

004006a8 <focus_next_core>:
    if(group->frozen) return;
  4006a8:	7e03      	ldrb	r3, [r0, #24]
  4006aa:	f013 0f01 	tst.w	r3, #1
  4006ae:	d17e      	bne.n	4007ae <focus_next_core+0x106>
{
  4006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006b4:	b083      	sub	sp, #12
  4006b6:	4693      	mov	fp, r2
  4006b8:	9101      	str	r1, [sp, #4]
  4006ba:	4682      	mov	sl, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  4006bc:	68c5      	ldr	r5, [r0, #12]
    bool can_begin           = true;
  4006be:	2301      	movs	r3, #1
  4006c0:	9300      	str	r3, [sp, #0]
    lv_obj_t ** obj_sentinel = NULL;
  4006c2:	f04f 0800 	mov.w	r8, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
  4006c6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4007c4 <focus_next_core+0x11c>
            parent = lv_obj_get_parent(parent);
  4006ca:	4f39      	ldr	r7, [pc, #228]	; (4007b0 <focus_next_core+0x108>)
        if(obj_next == NULL) {
  4006cc:	b1ed      	cbz	r5, 40070a <focus_next_core+0x62>
  4006ce:	f1b8 0f00 	cmp.w	r8, #0
  4006d2:	bf08      	it	eq
  4006d4:	46a8      	moveq	r8, r5
            obj_next = move(&group->obj_ll, obj_next);
  4006d6:	4629      	mov	r1, r5
  4006d8:	4650      	mov	r0, sl
  4006da:	47d8      	blx	fp
  4006dc:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return;
  4006de:	4540      	cmp	r0, r8
  4006e0:	d03e      	beq.n	400760 <focus_next_core+0xb8>
        if(obj_next == NULL) continue;
  4006e2:	2d00      	cmp	r5, #0
  4006e4:	d0f2      	beq.n	4006cc <focus_next_core+0x24>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
  4006e6:	6828      	ldr	r0, [r5, #0]
  4006e8:	47c8      	blx	r9
  4006ea:	f010 0f80 	tst.w	r0, #128	; 0x80
  4006ee:	d1ed      	bne.n	4006cc <focus_next_core+0x24>
        lv_obj_t * parent = *obj_next;
  4006f0:	682c      	ldr	r4, [r5, #0]
        while(parent) {
  4006f2:	b32c      	cbz	r4, 400740 <focus_next_core+0x98>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
  4006f4:	4e2f      	ldr	r6, [pc, #188]	; (4007b4 <focus_next_core+0x10c>)
  4006f6:	2101      	movs	r1, #1
  4006f8:	4620      	mov	r0, r4
  4006fa:	47b0      	blx	r6
  4006fc:	b9c8      	cbnz	r0, 400732 <focus_next_core+0x8a>
            parent = lv_obj_get_parent(parent);
  4006fe:	4620      	mov	r0, r4
  400700:	47b8      	blx	r7
        while(parent) {
  400702:	4604      	mov	r4, r0
  400704:	2800      	cmp	r0, #0
  400706:	d1f6      	bne.n	4006f6 <focus_next_core+0x4e>
  400708:	e01a      	b.n	400740 <focus_next_core+0x98>
            if(group->wrap || obj_sentinel == NULL) {
  40070a:	f89a 3018 	ldrb.w	r3, [sl, #24]
  40070e:	f013 0f08 	tst.w	r3, #8
  400712:	d102      	bne.n	40071a <focus_next_core+0x72>
  400714:	f1b8 0f00 	cmp.w	r8, #0
  400718:	d122      	bne.n	400760 <focus_next_core+0xb8>
                if(!can_begin) return;
  40071a:	9b00      	ldr	r3, [sp, #0]
  40071c:	b303      	cbz	r3, 400760 <focus_next_core+0xb8>
                obj_next  = begin(&group->obj_ll);
  40071e:	4650      	mov	r0, sl
  400720:	9b01      	ldr	r3, [sp, #4]
  400722:	4798      	blx	r3
  400724:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
  400726:	f1b8 0f00 	cmp.w	r8, #0
  40072a:	d03a      	beq.n	4007a2 <focus_next_core+0xfa>
                can_begin = false;
  40072c:	2300      	movs	r3, #0
  40072e:	9300      	str	r3, [sp, #0]
  400730:	e7d7      	b.n	4006e2 <focus_next_core+0x3a>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
  400732:	b12c      	cbz	r4, 400740 <focus_next_core+0x98>
  400734:	2101      	movs	r1, #1
  400736:	4620      	mov	r0, r4
  400738:	4b1e      	ldr	r3, [pc, #120]	; (4007b4 <focus_next_core+0x10c>)
  40073a:	4798      	blx	r3
  40073c:	2800      	cmp	r0, #0
  40073e:	d1c5      	bne.n	4006cc <focus_next_core+0x24>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  400740:	f8da 300c 	ldr.w	r3, [sl, #12]
  400744:	42ab      	cmp	r3, r5
  400746:	d00b      	beq.n	400760 <focus_next_core+0xb8>
    if(group->obj_focus) {
  400748:	b193      	cbz	r3, 400770 <focus_next_core+0xc8>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
  40074a:	681c      	ldr	r4, [r3, #0]
  40074c:	4650      	mov	r0, sl
  40074e:	4b1a      	ldr	r3, [pc, #104]	; (4007b8 <focus_next_core+0x110>)
  400750:	4798      	blx	r3
  400752:	4602      	mov	r2, r0
  400754:	210f      	movs	r1, #15
  400756:	4620      	mov	r0, r4
  400758:	4b18      	ldr	r3, [pc, #96]	; (4007bc <focus_next_core+0x114>)
  40075a:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  40075c:	2801      	cmp	r0, #1
  40075e:	d002      	beq.n	400766 <focus_next_core+0xbe>
}
  400760:	b003      	add	sp, #12
  400762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(*group->obj_focus);
  400766:	f8da 300c 	ldr.w	r3, [sl, #12]
  40076a:	6818      	ldr	r0, [r3, #0]
  40076c:	4b14      	ldr	r3, [pc, #80]	; (4007c0 <focus_next_core+0x118>)
  40076e:	4798      	blx	r3
    group->obj_focus = obj_next;
  400770:	f8ca 500c 	str.w	r5, [sl, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
  400774:	682c      	ldr	r4, [r5, #0]
  400776:	4650      	mov	r0, sl
  400778:	4b0f      	ldr	r3, [pc, #60]	; (4007b8 <focus_next_core+0x110>)
  40077a:	4798      	blx	r3
  40077c:	4602      	mov	r2, r0
  40077e:	210e      	movs	r1, #14
  400780:	4620      	mov	r0, r4
  400782:	4b0e      	ldr	r3, [pc, #56]	; (4007bc <focus_next_core+0x114>)
  400784:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  400786:	2801      	cmp	r0, #1
  400788:	d1ea      	bne.n	400760 <focus_next_core+0xb8>
    lv_obj_invalidate(*group->obj_focus);
  40078a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40078e:	6818      	ldr	r0, [r3, #0]
  400790:	4b0b      	ldr	r3, [pc, #44]	; (4007c0 <focus_next_core+0x118>)
  400792:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  400794:	f8da 3010 	ldr.w	r3, [sl, #16]
  400798:	2b00      	cmp	r3, #0
  40079a:	d0e1      	beq.n	400760 <focus_next_core+0xb8>
  40079c:	4650      	mov	r0, sl
  40079e:	4798      	blx	r3
  4007a0:	e7de      	b.n	400760 <focus_next_core+0xb8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  4007a2:	2800      	cmp	r0, #0
  4007a4:	d0dc      	beq.n	400760 <focus_next_core+0xb8>
                obj_next  = begin(&group->obj_ll);
  4007a6:	4680      	mov	r8, r0
                can_begin = false;
  4007a8:	2300      	movs	r3, #0
  4007aa:	9300      	str	r3, [sp, #0]
  4007ac:	e79b      	b.n	4006e6 <focus_next_core+0x3e>
  4007ae:	4770      	bx	lr
  4007b0:	00405ded 	.word	0x00405ded
  4007b4:	004013e5 	.word	0x004013e5
  4007b8:	00400641 	.word	0x00400641
  4007bc:	00400491 	.word	0x00400491
  4007c0:	0040262d 	.word	0x0040262d
  4007c4:	004013ff 	.word	0x004013ff

004007c8 <_lv_group_init>:
{
  4007c8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  4007ca:	211c      	movs	r1, #28
  4007cc:	4801      	ldr	r0, [pc, #4]	; (4007d4 <_lv_group_init+0xc>)
  4007ce:	4b02      	ldr	r3, [pc, #8]	; (4007d8 <_lv_group_init+0x10>)
  4007d0:	4798      	blx	r3
  4007d2:	bd08      	pop	{r3, pc}
  4007d4:	20439f68 	.word	0x20439f68
  4007d8:	00410d8f 	.word	0x00410d8f

004007dc <lv_group_get_default>:
}
  4007dc:	4b01      	ldr	r3, [pc, #4]	; (4007e4 <lv_group_get_default+0x8>)
  4007de:	6818      	ldr	r0, [r3, #0]
  4007e0:	4770      	bx	lr
  4007e2:	bf00      	nop
  4007e4:	20400a08 	.word	0x20400a08

004007e8 <lv_group_focus_next>:
{
  4007e8:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  4007ea:	4a02      	ldr	r2, [pc, #8]	; (4007f4 <lv_group_focus_next+0xc>)
  4007ec:	4902      	ldr	r1, [pc, #8]	; (4007f8 <lv_group_focus_next+0x10>)
  4007ee:	4b03      	ldr	r3, [pc, #12]	; (4007fc <lv_group_focus_next+0x14>)
  4007f0:	4798      	blx	r3
  4007f2:	bd08      	pop	{r3, pc}
  4007f4:	00410eb5 	.word	0x00410eb5
  4007f8:	00410ea1 	.word	0x00410ea1
  4007fc:	004006a9 	.word	0x004006a9

00400800 <lv_group_focus_prev>:
{
  400800:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  400802:	4a02      	ldr	r2, [pc, #8]	; (40080c <lv_group_focus_prev+0xc>)
  400804:	4902      	ldr	r1, [pc, #8]	; (400810 <lv_group_focus_prev+0x10>)
  400806:	4b03      	ldr	r3, [pc, #12]	; (400814 <lv_group_focus_prev+0x14>)
  400808:	4798      	blx	r3
  40080a:	bd08      	pop	{r3, pc}
  40080c:	00410ebd 	.word	0x00410ebd
  400810:	00410eab 	.word	0x00410eab
  400814:	004006a9 	.word	0x004006a9

00400818 <lv_group_refocus>:
{
  400818:	b538      	push	{r3, r4, r5, lr}
  40081a:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  40081c:	7e03      	ldrb	r3, [r0, #24]
  40081e:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
  400822:	f043 0308 	orr.w	r3, r3, #8
  400826:	7603      	strb	r3, [r0, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  400828:	f013 0f04 	tst.w	r3, #4
        lv_group_focus_next(g);
  40082c:	bf0c      	ite	eq
  40082e:	4b04      	ldreq	r3, [pc, #16]	; (400840 <lv_group_refocus+0x28>)
        lv_group_focus_prev(g);
  400830:	4b04      	ldrne	r3, [pc, #16]	; (400844 <lv_group_refocus+0x2c>)
  400832:	4798      	blx	r3
    g->wrap = temp_wrap;
  400834:	7e23      	ldrb	r3, [r4, #24]
  400836:	f365 03c3 	bfi	r3, r5, #3, #1
  40083a:	7623      	strb	r3, [r4, #24]
  40083c:	bd38      	pop	{r3, r4, r5, pc}
  40083e:	bf00      	nop
  400840:	004007e9 	.word	0x004007e9
  400844:	00400801 	.word	0x00400801

00400848 <lv_group_add_obj>:
    if(group == NULL) return;
  400848:	2800      	cmp	r0, #0
  40084a:	d047      	beq.n	4008dc <lv_group_add_obj+0x94>
{
  40084c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40084e:	b085      	sub	sp, #20
  400850:	4607      	mov	r7, r0
  400852:	460c      	mov	r4, r1
    _LV_LL_READ(&group->obj_ll, obj_i) {
  400854:	4606      	mov	r6, r0
  400856:	4b22      	ldr	r3, [pc, #136]	; (4008e0 <lv_group_add_obj+0x98>)
  400858:	4798      	blx	r3
  40085a:	4601      	mov	r1, r0
  40085c:	b160      	cbz	r0, 400878 <lv_group_add_obj+0x30>
        if((*obj_i) == obj) {
  40085e:	6803      	ldr	r3, [r0, #0]
  400860:	429c      	cmp	r4, r3
  400862:	d007      	beq.n	400874 <lv_group_add_obj+0x2c>
    _LV_LL_READ(&group->obj_ll, obj_i) {
  400864:	4d1f      	ldr	r5, [pc, #124]	; (4008e4 <lv_group_add_obj+0x9c>)
  400866:	4630      	mov	r0, r6
  400868:	47a8      	blx	r5
  40086a:	4601      	mov	r1, r0
  40086c:	b120      	cbz	r0, 400878 <lv_group_add_obj+0x30>
        if((*obj_i) == obj) {
  40086e:	680b      	ldr	r3, [r1, #0]
  400870:	42a3      	cmp	r3, r4
  400872:	d1f8      	bne.n	400866 <lv_group_add_obj+0x1e>
}
  400874:	b005      	add	sp, #20
  400876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_group_t * group_cur = lv_obj_get_group(obj);
  400878:	4620      	mov	r0, r4
  40087a:	4b1b      	ldr	r3, [pc, #108]	; (4008e8 <lv_group_add_obj+0xa0>)
  40087c:	4798      	blx	r3
    if(group_cur) {
  40087e:	b130      	cbz	r0, 40088e <lv_group_add_obj+0x46>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
  400880:	68a3      	ldr	r3, [r4, #8]
  400882:	689b      	ldr	r3, [r3, #8]
  400884:	b11b      	cbz	r3, 40088e <lv_group_add_obj+0x46>
  400886:	68db      	ldr	r3, [r3, #12]
  400888:	681b      	ldr	r3, [r3, #0]
  40088a:	429c      	cmp	r4, r3
  40088c:	d012      	beq.n	4008b4 <lv_group_add_obj+0x6c>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
  40088e:	68a3      	ldr	r3, [r4, #8]
  400890:	b19b      	cbz	r3, 4008ba <lv_group_add_obj+0x72>
    obj->spec_attr->group_p = group;
  400892:	68a3      	ldr	r3, [r4, #8]
  400894:	609f      	str	r7, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  400896:	4638      	mov	r0, r7
  400898:	4b14      	ldr	r3, [pc, #80]	; (4008ec <lv_group_add_obj+0xa4>)
  40089a:	4798      	blx	r3
    LV_ASSERT_MALLOC(next);
  40089c:	4605      	mov	r5, r0
  40089e:	b180      	cbz	r0, 4008c2 <lv_group_add_obj+0x7a>
    *next = obj;
  4008a0:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  4008a2:	4638      	mov	r0, r7
  4008a4:	4b0e      	ldr	r3, [pc, #56]	; (4008e0 <lv_group_add_obj+0x98>)
  4008a6:	4798      	blx	r3
  4008a8:	4285      	cmp	r5, r0
  4008aa:	d1e3      	bne.n	400874 <lv_group_add_obj+0x2c>
        lv_group_refocus(group);
  4008ac:	4638      	mov	r0, r7
  4008ae:	4b10      	ldr	r3, [pc, #64]	; (4008f0 <lv_group_add_obj+0xa8>)
  4008b0:	4798      	blx	r3
  4008b2:	e7df      	b.n	400874 <lv_group_add_obj+0x2c>
            lv_group_refocus(group_cur);
  4008b4:	4b0e      	ldr	r3, [pc, #56]	; (4008f0 <lv_group_add_obj+0xa8>)
  4008b6:	4798      	blx	r3
  4008b8:	e7e9      	b.n	40088e <lv_group_add_obj+0x46>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
  4008ba:	4620      	mov	r0, r4
  4008bc:	4b0d      	ldr	r3, [pc, #52]	; (4008f4 <lv_group_add_obj+0xac>)
  4008be:	4798      	blx	r3
  4008c0:	e7e7      	b.n	400892 <lv_group_add_obj+0x4a>
    LV_ASSERT_MALLOC(next);
  4008c2:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <lv_group_add_obj+0xb0>)
  4008c4:	9302      	str	r3, [sp, #8]
  4008c6:	4b0d      	ldr	r3, [pc, #52]	; (4008fc <lv_group_add_obj+0xb4>)
  4008c8:	9301      	str	r3, [sp, #4]
  4008ca:	4b0d      	ldr	r3, [pc, #52]	; (400900 <lv_group_add_obj+0xb8>)
  4008cc:	9300      	str	r3, [sp, #0]
  4008ce:	4b0d      	ldr	r3, [pc, #52]	; (400904 <lv_group_add_obj+0xbc>)
  4008d0:	2281      	movs	r2, #129	; 0x81
  4008d2:	490d      	ldr	r1, [pc, #52]	; (400908 <lv_group_add_obj+0xc0>)
  4008d4:	2003      	movs	r0, #3
  4008d6:	4c0d      	ldr	r4, [pc, #52]	; (40090c <lv_group_add_obj+0xc4>)
  4008d8:	47a0      	blx	r4
  4008da:	e7fe      	b.n	4008da <lv_group_add_obj+0x92>
  4008dc:	4770      	bx	lr
  4008de:	bf00      	nop
  4008e0:	00410ea1 	.word	0x00410ea1
  4008e4:	00410eb5 	.word	0x00410eb5
  4008e8:	00401403 	.word	0x00401403
  4008ec:	00410ded 	.word	0x00410ded
  4008f0:	00400819 	.word	0x00400819
  4008f4:	004018d9 	.word	0x004018d9
  4008f8:	0041c064 	.word	0x0041c064
  4008fc:	0041c0cc 	.word	0x0041c0cc
  400900:	0041c098 	.word	0x0041c098
  400904:	0041c0b8 	.word	0x0041c0b8
  400908:	0041c0dc 	.word	0x0041c0dc
  40090c:	00410edd 	.word	0x00410edd

00400910 <lv_group_remove_obj>:
{
  400910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400914:	4605      	mov	r5, r0
    lv_group_t * g = lv_obj_get_group(obj);
  400916:	4b2e      	ldr	r3, [pc, #184]	; (4009d0 <lv_group_remove_obj+0xc0>)
  400918:	4798      	blx	r3
    if(g == NULL) return;
  40091a:	2800      	cmp	r0, #0
  40091c:	d055      	beq.n	4009ca <lv_group_remove_obj+0xba>
  40091e:	4680      	mov	r8, r0
    if(g->obj_focus && *g->obj_focus == obj) {
  400920:	68c3      	ldr	r3, [r0, #12]
  400922:	b113      	cbz	r3, 40092a <lv_group_remove_obj+0x1a>
  400924:	681b      	ldr	r3, [r3, #0]
  400926:	429d      	cmp	r5, r3
  400928:	d021      	beq.n	40096e <lv_group_remove_obj+0x5e>
    _LV_LL_READ(&g->obj_ll, i) {
  40092a:	4646      	mov	r6, r8
  40092c:	4640      	mov	r0, r8
  40092e:	4b29      	ldr	r3, [pc, #164]	; (4009d4 <lv_group_remove_obj+0xc4>)
  400930:	4798      	blx	r3
  400932:	4604      	mov	r4, r0
  400934:	2800      	cmp	r0, #0
  400936:	d048      	beq.n	4009ca <lv_group_remove_obj+0xba>
        if(*i == obj) {
  400938:	6803      	ldr	r3, [r0, #0]
  40093a:	429d      	cmp	r5, r3
  40093c:	d009      	beq.n	400952 <lv_group_remove_obj+0x42>
    _LV_LL_READ(&g->obj_ll, i) {
  40093e:	4f26      	ldr	r7, [pc, #152]	; (4009d8 <lv_group_remove_obj+0xc8>)
  400940:	4621      	mov	r1, r4
  400942:	4630      	mov	r0, r6
  400944:	47b8      	blx	r7
  400946:	4604      	mov	r4, r0
  400948:	2800      	cmp	r0, #0
  40094a:	d03e      	beq.n	4009ca <lv_group_remove_obj+0xba>
        if(*i == obj) {
  40094c:	6823      	ldr	r3, [r4, #0]
  40094e:	429d      	cmp	r5, r3
  400950:	d1f6      	bne.n	400940 <lv_group_remove_obj+0x30>
            _lv_ll_remove(&g->obj_ll, i);
  400952:	4621      	mov	r1, r4
  400954:	4640      	mov	r0, r8
  400956:	4b21      	ldr	r3, [pc, #132]	; (4009dc <lv_group_remove_obj+0xcc>)
  400958:	4798      	blx	r3
            lv_mem_free(i);
  40095a:	4620      	mov	r0, r4
  40095c:	4b20      	ldr	r3, [pc, #128]	; (4009e0 <lv_group_remove_obj+0xd0>)
  40095e:	4798      	blx	r3
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
  400960:	68ab      	ldr	r3, [r5, #8]
  400962:	2b00      	cmp	r3, #0
  400964:	d031      	beq.n	4009ca <lv_group_remove_obj+0xba>
  400966:	2200      	movs	r2, #0
  400968:	609a      	str	r2, [r3, #8]
  40096a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(g->frozen) g->frozen = 0;
  40096e:	7e03      	ldrb	r3, [r0, #24]
  400970:	f013 0f01 	tst.w	r3, #1
  400974:	d003      	beq.n	40097e <lv_group_remove_obj+0x6e>
  400976:	7e03      	ldrb	r3, [r0, #24]
  400978:	f36f 0300 	bfc	r3, #0, #1
  40097c:	7603      	strb	r3, [r0, #24]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  40097e:	4640      	mov	r0, r8
  400980:	4b14      	ldr	r3, [pc, #80]	; (4009d4 <lv_group_remove_obj+0xc4>)
  400982:	4798      	blx	r3
  400984:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400988:	4283      	cmp	r3, r0
  40098a:	d00d      	beq.n	4009a8 <lv_group_remove_obj+0x98>
            lv_group_refocus(g);
  40098c:	4640      	mov	r0, r8
  40098e:	4b15      	ldr	r3, [pc, #84]	; (4009e4 <lv_group_remove_obj+0xd4>)
  400990:	4798      	blx	r3
    if(g->obj_focus && *g->obj_focus == obj) {
  400992:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400996:	2b00      	cmp	r3, #0
  400998:	d0c7      	beq.n	40092a <lv_group_remove_obj+0x1a>
  40099a:	681b      	ldr	r3, [r3, #0]
  40099c:	429d      	cmp	r5, r3
  40099e:	d1c4      	bne.n	40092a <lv_group_remove_obj+0x1a>
        g->obj_focus = NULL;
  4009a0:	2300      	movs	r3, #0
  4009a2:	f8c8 300c 	str.w	r3, [r8, #12]
  4009a6:	e7c0      	b.n	40092a <lv_group_remove_obj+0x1a>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4009a8:	4640      	mov	r0, r8
  4009aa:	4b0f      	ldr	r3, [pc, #60]	; (4009e8 <lv_group_remove_obj+0xd8>)
  4009ac:	4798      	blx	r3
  4009ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4009b2:	4298      	cmp	r0, r3
  4009b4:	d1ea      	bne.n	40098c <lv_group_remove_obj+0x7c>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
  4009b6:	6804      	ldr	r4, [r0, #0]
  4009b8:	4640      	mov	r0, r8
  4009ba:	4b0c      	ldr	r3, [pc, #48]	; (4009ec <lv_group_remove_obj+0xdc>)
  4009bc:	4798      	blx	r3
  4009be:	4602      	mov	r2, r0
  4009c0:	210f      	movs	r1, #15
  4009c2:	4620      	mov	r0, r4
  4009c4:	4b0a      	ldr	r3, [pc, #40]	; (4009f0 <lv_group_remove_obj+0xe0>)
  4009c6:	4798      	blx	r3
  4009c8:	e7e3      	b.n	400992 <lv_group_remove_obj+0x82>
  4009ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009ce:	bf00      	nop
  4009d0:	00401403 	.word	0x00401403
  4009d4:	00410ea1 	.word	0x00410ea1
  4009d8:	00410eb5 	.word	0x00410eb5
  4009dc:	00410e39 	.word	0x00410e39
  4009e0:	004110e1 	.word	0x004110e1
  4009e4:	00400819 	.word	0x00400819
  4009e8:	00410eab 	.word	0x00410eab
  4009ec:	00400641 	.word	0x00400641
  4009f0:	00400491 	.word	0x00400491

004009f4 <lv_group_get_editing>:
    if(!group) return false;
  4009f4:	b118      	cbz	r0, 4009fe <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  4009f6:	7e00      	ldrb	r0, [r0, #24]
  4009f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4009fc:	4770      	bx	lr
    if(!group) return false;
  4009fe:	2000      	movs	r0, #0
}
  400a00:	4770      	bx	lr
	...

00400a04 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
  400a04:	4b01      	ldr	r3, [pc, #4]	; (400a0c <lv_indev_get_act+0x8>)
  400a06:	6818      	ldr	r0, [r3, #0]
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	20400a0c 	.word	0x20400a0c

00400a10 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  400a10:	b110      	cbz	r0, 400a18 <lv_indev_get_type+0x8>

    return indev->driver->type;
  400a12:	6803      	ldr	r3, [r0, #0]
  400a14:	7818      	ldrb	r0, [r3, #0]
  400a16:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  400a18:	2000      	movs	r0, #0
}
  400a1a:	4770      	bx	lr

00400a1c <lv_indev_get_scroll_dir>:
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
  400a1c:	b150      	cbz	r0, 400a34 <lv_indev_get_scroll_dir+0x18>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
  400a1e:	6803      	ldr	r3, [r0, #0]
  400a20:	781b      	ldrb	r3, [r3, #0]
  400a22:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400a26:	2b01      	cmp	r3, #1
  400a28:	d106      	bne.n	400a38 <lv_indev_get_scroll_dir+0x1c>
    return indev->proc.types.pointer.scroll_dir;
  400a2a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
  400a2e:	f000 000f 	and.w	r0, r0, #15
  400a32:	4770      	bx	lr
    if(indev == NULL) return false;
  400a34:	2000      	movs	r0, #0
  400a36:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
  400a38:	2000      	movs	r0, #0
}
  400a3a:	4770      	bx	lr

00400a3c <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
    if(indev == NULL) return NULL;
  400a3c:	b138      	cbz	r0, 400a4e <lv_indev_get_scroll_obj+0x12>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
  400a3e:	6803      	ldr	r3, [r0, #0]
  400a40:	781b      	ldrb	r3, [r3, #0]
  400a42:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400a46:	2b01      	cmp	r3, #1
  400a48:	d103      	bne.n	400a52 <lv_indev_get_scroll_obj+0x16>
    return indev->proc.types.pointer.scroll_obj;
  400a4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  400a4c:	4770      	bx	lr
    if(indev == NULL) return NULL;
  400a4e:	2000      	movs	r0, #0
  400a50:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
  400a52:	2000      	movs	r0, #0
}
  400a54:	4770      	bx	lr
	...

00400a58 <lv_obj_draw>:
        obj->spec_attr = NULL;
    }
}

static void lv_obj_draw(lv_event_t * e)
{
  400a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400a5c:	b0a4      	sub	sp, #144	; 0x90
  400a5e:	4606      	mov	r6, r0
    lv_event_code_t code = lv_event_get_code(e);
  400a60:	4b74      	ldr	r3, [pc, #464]	; (400c34 <lv_obj_draw+0x1dc>)
  400a62:	4798      	blx	r3
  400a64:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
  400a66:	4630      	mov	r0, r6
  400a68:	4b73      	ldr	r3, [pc, #460]	; (400c38 <lv_obj_draw+0x1e0>)
  400a6a:	4798      	blx	r3
  400a6c:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
  400a6e:	2d12      	cmp	r5, #18
  400a70:	d007      	beq.n	400a82 <lv_obj_draw+0x2a>
        }

        info->res = LV_COVER_RES_COVER;

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
  400a72:	2d15      	cmp	r5, #21
  400a74:	d067      	beq.n	400b46 <lv_obj_draw+0xee>
                lv_draw_mask_add(mp, obj + 8);
            }
        }
#endif
    }
    else if(code == LV_EVENT_DRAW_POST) {
  400a76:	2d18      	cmp	r5, #24
  400a78:	f000 80f8 	beq.w	400c6c <lv_obj_draw+0x214>

            lv_draw_rect(&coords, clip_area, &draw_dsc);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
        }
    }
}
  400a7c:	b024      	add	sp, #144	; 0x90
  400a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
  400a82:	4630      	mov	r0, r6
  400a84:	4b6d      	ldr	r3, [pc, #436]	; (400c3c <lv_obj_draw+0x1e4>)
  400a86:	4798      	blx	r3
  400a88:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
  400a8a:	7803      	ldrb	r3, [r0, #0]
  400a8c:	2b02      	cmp	r3, #2
  400a8e:	d0f5      	beq.n	400a7c <lv_obj_draw+0x24>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
  400a90:	2261      	movs	r2, #97	; 0x61
  400a92:	2100      	movs	r1, #0
  400a94:	4620      	mov	r0, r4
  400a96:	4b6a      	ldr	r3, [pc, #424]	; (400c40 <lv_obj_draw+0x1e8>)
  400a98:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
  400a9a:	b110      	cbz	r0, 400aa2 <lv_obj_draw+0x4a>
            info->res = LV_COVER_RES_MASKED;
  400a9c:	2302      	movs	r3, #2
  400a9e:	702b      	strb	r3, [r5, #0]
            return;
  400aa0:	e7ec      	b.n	400a7c <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
  400aa2:	2260      	movs	r2, #96	; 0x60
  400aa4:	2100      	movs	r1, #0
  400aa6:	4620      	mov	r0, r4
  400aa8:	4e65      	ldr	r6, [pc, #404]	; (400c40 <lv_obj_draw+0x1e8>)
  400aaa:	47b0      	blx	r6
    return (lv_coord_t)v.num;
  400aac:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
  400aae:	f640 020a 	movw	r2, #2058	; 0x80a
  400ab2:	2100      	movs	r1, #0
  400ab4:	4620      	mov	r0, r4
  400ab6:	47b0      	blx	r6
  400ab8:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
  400aba:	f640 020b 	movw	r2, #2059	; 0x80b
  400abe:	2100      	movs	r1, #0
  400ac0:	4620      	mov	r0, r4
  400ac2:	47b0      	blx	r6
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
  400ac4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
  400ac8:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
    dest->y2 = src->y2;
  400acc:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
        coords.x1 -= w;
  400ad0:	fa1f f388 	uxth.w	r3, r8
  400ad4:	8aa1      	ldrh	r1, [r4, #20]
  400ad6:	1ac9      	subs	r1, r1, r3
  400ad8:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
        coords.x2 += w;
  400adc:	4463      	add	r3, ip
  400ade:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        coords.y1 -= h;
  400ae2:	b280      	uxth	r0, r0
  400ae4:	1a12      	subs	r2, r2, r0
  400ae6:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        coords.y2 += h;
  400aea:	4470      	add	r0, lr
  400aec:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
        if(_lv_area_is_in(info->area, &coords, r) == false) {
  400af0:	463a      	mov	r2, r7
  400af2:	a912      	add	r1, sp, #72	; 0x48
  400af4:	6868      	ldr	r0, [r5, #4]
  400af6:	4b53      	ldr	r3, [pc, #332]	; (400c44 <lv_obj_draw+0x1ec>)
  400af8:	4798      	blx	r3
  400afa:	b910      	cbnz	r0, 400b02 <lv_obj_draw+0xaa>
            info->res = LV_COVER_RES_NOT_COVER;
  400afc:	2301      	movs	r3, #1
  400afe:	702b      	strb	r3, [r5, #0]
            return;
  400b00:	e7bc      	b.n	400a7c <lv_obj_draw+0x24>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
  400b02:	2221      	movs	r2, #33	; 0x21
  400b04:	2100      	movs	r1, #0
  400b06:	4620      	mov	r0, r4
  400b08:	4b4d      	ldr	r3, [pc, #308]	; (400c40 <lv_obj_draw+0x1e8>)
  400b0a:	4798      	blx	r3
    return (lv_opa_t)v.num;
  400b0c:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
  400b0e:	28fc      	cmp	r0, #252	; 0xfc
  400b10:	d802      	bhi.n	400b18 <lv_obj_draw+0xc0>
            info->res = LV_COVER_RES_NOT_COVER;
  400b12:	2301      	movs	r3, #1
  400b14:	702b      	strb	r3, [r5, #0]
            return;
  400b16:	e7b1      	b.n	400a7c <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
  400b18:	2268      	movs	r2, #104	; 0x68
  400b1a:	2100      	movs	r1, #0
  400b1c:	4620      	mov	r0, r4
  400b1e:	4b48      	ldr	r3, [pc, #288]	; (400c40 <lv_obj_draw+0x1e8>)
  400b20:	4798      	blx	r3
    return (lv_blend_mode_t)v.num;
  400b22:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_blend_mode(obj, LV_PART_MAIN) != LV_BLEND_MODE_NORMAL) {
  400b24:	b110      	cbz	r0, 400b2c <lv_obj_draw+0xd4>
            info->res = LV_COVER_RES_NOT_COVER;
  400b26:	2301      	movs	r3, #1
  400b28:	702b      	strb	r3, [r5, #0]
            return;
  400b2a:	e7a7      	b.n	400a7c <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
  400b2c:	f240 4262 	movw	r2, #1122	; 0x462
  400b30:	2100      	movs	r1, #0
  400b32:	4620      	mov	r0, r4
  400b34:	4b42      	ldr	r3, [pc, #264]	; (400c40 <lv_obj_draw+0x1e8>)
  400b36:	4798      	blx	r3
    return (lv_opa_t)v.num;
  400b38:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
  400b3a:	28fc      	cmp	r0, #252	; 0xfc
            info->res = LV_COVER_RES_NOT_COVER;
  400b3c:	bf94      	ite	ls
  400b3e:	2301      	movls	r3, #1
        info->res = LV_COVER_RES_COVER;
  400b40:	2300      	movhi	r3, #0
  400b42:	702b      	strb	r3, [r5, #0]
  400b44:	e79a      	b.n	400a7c <lv_obj_draw+0x24>
        const lv_area_t * clip_area = lv_event_get_param(e);
  400b46:	4630      	mov	r0, r6
  400b48:	4b3c      	ldr	r3, [pc, #240]	; (400c3c <lv_obj_draw+0x1e4>)
  400b4a:	4798      	blx	r3
  400b4c:	4680      	mov	r8, r0
        lv_draw_rect_dsc_init(&draw_dsc);
  400b4e:	a805      	add	r0, sp, #20
  400b50:	4b3d      	ldr	r3, [pc, #244]	; (400c48 <lv_obj_draw+0x1f0>)
  400b52:	4798      	blx	r3
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
  400b54:	2234      	movs	r2, #52	; 0x34
  400b56:	2100      	movs	r1, #0
  400b58:	4620      	mov	r0, r4
  400b5a:	4b39      	ldr	r3, [pc, #228]	; (400c40 <lv_obj_draw+0x1e8>)
  400b5c:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
  400b5e:	b128      	cbz	r0, 400b6c <lv_obj_draw+0x114>
            draw_dsc.border_post = 1;
  400b60:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  400b64:	f043 0301 	orr.w	r3, r3, #1
  400b68:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
  400b6c:	af05      	add	r7, sp, #20
  400b6e:	463a      	mov	r2, r7
  400b70:	2100      	movs	r1, #0
  400b72:	4620      	mov	r0, r4
  400b74:	4b35      	ldr	r3, [pc, #212]	; (400c4c <lv_obj_draw+0x1f4>)
  400b76:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
  400b78:	f640 020a 	movw	r2, #2058	; 0x80a
  400b7c:	2100      	movs	r1, #0
  400b7e:	4620      	mov	r0, r4
  400b80:	4e2f      	ldr	r6, [pc, #188]	; (400c40 <lv_obj_draw+0x1e8>)
  400b82:	47b0      	blx	r6
  400b84:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
  400b86:	f640 020b 	movw	r2, #2059	; 0x80b
  400b8a:	2100      	movs	r1, #0
  400b8c:	4620      	mov	r0, r4
  400b8e:	47b0      	blx	r6
    dest->y1 = src->y1;
  400b90:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
  400b94:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
    dest->y2 = src->y2;
  400b98:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
        coords.x1 -= w;
  400b9c:	b2ab      	uxth	r3, r5
  400b9e:	8aa1      	ldrh	r1, [r4, #20]
  400ba0:	1ac9      	subs	r1, r1, r3
  400ba2:	f8ad 100c 	strh.w	r1, [sp, #12]
        coords.x2 += w;
  400ba6:	4463      	add	r3, ip
  400ba8:	f8ad 3010 	strh.w	r3, [sp, #16]
        coords.y1 -= h;
  400bac:	b280      	uxth	r0, r0
  400bae:	1a12      	subs	r2, r2, r0
  400bb0:	f8ad 200e 	strh.w	r2, [sp, #14]
        coords.y2 += h;
  400bb4:	4470      	add	r0, lr
  400bb6:	f8ad 0012 	strh.w	r0, [sp, #18]
        lv_obj_draw_dsc_init(&part_dsc, clip_area);
  400bba:	4641      	mov	r1, r8
  400bbc:	a812      	add	r0, sp, #72	; 0x48
  400bbe:	4b24      	ldr	r3, [pc, #144]	; (400c50 <lv_obj_draw+0x1f8>)
  400bc0:	4798      	blx	r3
        part_dsc.class_p = MY_CLASS;
  400bc2:	4b24      	ldr	r3, [pc, #144]	; (400c54 <lv_obj_draw+0x1fc>)
  400bc4:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
  400bc6:	2500      	movs	r5, #0
  400bc8:	9514      	str	r5, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
  400bca:	9716      	str	r7, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
  400bcc:	f10d 0a0c 	add.w	sl, sp, #12
  400bd0:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
  400bd4:	951f      	str	r5, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
  400bd6:	aa12      	add	r2, sp, #72	; 0x48
  400bd8:	211a      	movs	r1, #26
  400bda:	4620      	mov	r0, r4
  400bdc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 400c68 <lv_obj_draw+0x210>
  400be0:	47c8      	blx	r9
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  400be2:	463a      	mov	r2, r7
  400be4:	4641      	mov	r1, r8
  400be6:	4650      	mov	r0, sl
  400be8:	4b1b      	ldr	r3, [pc, #108]	; (400c58 <lv_obj_draw+0x200>)
  400bea:	4798      	blx	r3
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
  400bec:	aa12      	add	r2, sp, #72	; 0x48
  400bee:	211b      	movs	r1, #27
  400bf0:	4620      	mov	r0, r4
  400bf2:	47c8      	blx	r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
  400bf4:	2261      	movs	r2, #97	; 0x61
  400bf6:	4629      	mov	r1, r5
  400bf8:	4620      	mov	r0, r4
  400bfa:	47b0      	blx	r6
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
  400bfc:	2800      	cmp	r0, #0
  400bfe:	f43f af3d 	beq.w	400a7c <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
  400c02:	2260      	movs	r2, #96	; 0x60
  400c04:	4629      	mov	r1, r5
  400c06:	4620      	mov	r0, r4
  400c08:	47b0      	blx	r6
    return (lv_coord_t)v.num;
  400c0a:	b205      	sxth	r5, r0
            if(r != 0) {
  400c0c:	2d00      	cmp	r5, #0
  400c0e:	f43f af35 	beq.w	400a7c <lv_obj_draw+0x24>
                lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  400c12:	2018      	movs	r0, #24
  400c14:	4b11      	ldr	r3, [pc, #68]	; (400c5c <lv_obj_draw+0x204>)
  400c16:	4798      	blx	r3
  400c18:	4606      	mov	r6, r0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  400c1a:	2300      	movs	r3, #0
  400c1c:	462a      	mov	r2, r5
  400c1e:	f104 0114 	add.w	r1, r4, #20
  400c22:	4d0f      	ldr	r5, [pc, #60]	; (400c60 <lv_obj_draw+0x208>)
  400c24:	47a8      	blx	r5
                lv_draw_mask_add(mp, obj + 8);
  400c26:	f504 7190 	add.w	r1, r4, #288	; 0x120
  400c2a:	4630      	mov	r0, r6
  400c2c:	4b0d      	ldr	r3, [pc, #52]	; (400c64 <lv_obj_draw+0x20c>)
  400c2e:	4798      	blx	r3
  400c30:	e724      	b.n	400a7c <lv_obj_draw+0x24>
  400c32:	bf00      	nop
  400c34:	004004d9 	.word	0x004004d9
  400c38:	004004d5 	.word	0x004004d5
  400c3c:	004004dd 	.word	0x004004dd
  400c40:	00404f1d 	.word	0x00404f1d
  400c44:	00410991 	.word	0x00410991
  400c48:	0040a941 	.word	0x0040a941
  400c4c:	00401bb5 	.word	0x00401bb5
  400c50:	0040200d 	.word	0x0040200d
  400c54:	0041c1a0 	.word	0x0041c1a0
  400c58:	0040b101 	.word	0x0040b101
  400c5c:	004115a9 	.word	0x004115a9
  400c60:	0040a2a1 	.word	0x0040a2a1
  400c64:	00409f91 	.word	0x00409f91
  400c68:	00400491 	.word	0x00400491
        const lv_area_t * clip_area = lv_event_get_param(e);
  400c6c:	4630      	mov	r0, r6
  400c6e:	4ba8      	ldr	r3, [pc, #672]	; (400f10 <lv_obj_draw+0x4b8>)
  400c70:	4798      	blx	r3
  400c72:	4605      	mov	r5, r0
static void draw_scrollbar(lv_obj_t * obj, const lv_area_t * clip_area)
{

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
  400c74:	aa03      	add	r2, sp, #12
  400c76:	a901      	add	r1, sp, #4
  400c78:	4620      	mov	r0, r4
  400c7a:	4ba6      	ldr	r3, [pc, #664]	; (400f14 <lv_obj_draw+0x4bc>)
  400c7c:	4798      	blx	r3

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
  400c7e:	a801      	add	r0, sp, #4
  400c80:	4ba5      	ldr	r3, [pc, #660]	; (400f18 <lv_obj_draw+0x4c0>)
  400c82:	4798      	blx	r3
  400c84:	b920      	cbnz	r0, 400c90 <lv_obj_draw+0x238>
  400c86:	a803      	add	r0, sp, #12
  400c88:	4ba3      	ldr	r3, [pc, #652]	; (400f18 <lv_obj_draw+0x4c0>)
  400c8a:	4798      	blx	r3
  400c8c:	2800      	cmp	r0, #0
  400c8e:	d06c      	beq.n	400d6a <lv_obj_draw+0x312>
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
    lv_draw_rect_dsc_init(dsc);
  400c90:	a805      	add	r0, sp, #20
  400c92:	4ba2      	ldr	r3, [pc, #648]	; (400f1c <lv_obj_draw+0x4c4>)
  400c94:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
  400c96:	2221      	movs	r2, #33	; 0x21
  400c98:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400c9c:	4620      	mov	r0, r4
  400c9e:	4ba0      	ldr	r3, [pc, #640]	; (400f20 <lv_obj_draw+0x4c8>)
  400ca0:	4798      	blx	r3
    return (lv_opa_t)v.num;
  400ca2:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
  400ca4:	f88d 001e 	strb.w	r0, [sp, #30]
    if(dsc->bg_opa > LV_OPA_MIN) {
  400ca8:	2802      	cmp	r0, #2
  400caa:	f200 80bd 	bhi.w	400e28 <lv_obj_draw+0x3d0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
  400cae:	2231      	movs	r2, #49	; 0x31
  400cb0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400cb4:	4620      	mov	r0, r4
  400cb6:	4b9a      	ldr	r3, [pc, #616]	; (400f20 <lv_obj_draw+0x4c8>)
  400cb8:	4798      	blx	r3
    return (lv_opa_t)v.num;
  400cba:	b2c0      	uxtb	r0, r0
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
  400cbc:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
  400cc0:	2802      	cmp	r0, #2
  400cc2:	f200 80ba 	bhi.w	400e3a <lv_obj_draw+0x3e2>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
  400cc6:	f640 0245 	movw	r2, #2117	; 0x845
  400cca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400cce:	4620      	mov	r0, r4
  400cd0:	4b93      	ldr	r3, [pc, #588]	; (400f20 <lv_obj_draw+0x4c8>)
  400cd2:	4798      	blx	r3
    return (lv_opa_t)v.num;
  400cd4:	b2c0      	uxtb	r0, r0
            dsc->border_opa = LV_OPA_TRANSP;
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
  400cd6:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
  400cda:	2802      	cmp	r0, #2
  400cdc:	f200 80c6 	bhi.w	400e6c <lv_obj_draw+0x414>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
  400ce0:	f240 4262 	movw	r2, #1122	; 0x462
  400ce4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400ce8:	4620      	mov	r0, r4
  400cea:	4b8d      	ldr	r3, [pc, #564]	; (400f20 <lv_obj_draw+0x4c8>)
  400cec:	4798      	blx	r3
            dsc->shadow_opa = LV_OPA_TRANSP;
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
    if(opa < LV_OPA_MAX) {
  400cee:	b2c3      	uxtb	r3, r0
  400cf0:	2bfc      	cmp	r3, #252	; 0xfc
  400cf2:	d810      	bhi.n	400d16 <lv_obj_draw+0x2be>
  400cf4:	4618      	mov	r0, r3
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
  400cf6:	f89d 301e 	ldrb.w	r3, [sp, #30]
  400cfa:	fb00 f303 	mul.w	r3, r0, r3
  400cfe:	121b      	asrs	r3, r3, #8
  400d00:	f88d 301e 	strb.w	r3, [sp, #30]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
  400d04:	b2db      	uxtb	r3, r3
  400d06:	fb00 f003 	mul.w	r0, r0, r3
  400d0a:	f3c0 2307 	ubfx	r3, r0, #8, #8
  400d0e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
  400d12:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
  400d16:	f89d 301e 	ldrb.w	r3, [sp, #30]
  400d1a:	b92b      	cbnz	r3, 400d28 <lv_obj_draw+0x2d0>
  400d1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
  400d20:	b913      	cbnz	r3, 400d28 <lv_obj_draw+0x2d0>
  400d22:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
  400d26:	b303      	cbz	r3, 400d6a <lv_obj_draw+0x312>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
  400d28:	2260      	movs	r2, #96	; 0x60
  400d2a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400d2e:	4620      	mov	r0, r4
  400d30:	4b7b      	ldr	r3, [pc, #492]	; (400f20 <lv_obj_draw+0x4c8>)
  400d32:	4798      	blx	r3
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
  400d34:	f8ad 0014 	strh.w	r0, [sp, #20]
    lv_obj_draw_dsc_init(&part_dsc, clip_area);
  400d38:	4629      	mov	r1, r5
  400d3a:	a812      	add	r0, sp, #72	; 0x48
  400d3c:	4b79      	ldr	r3, [pc, #484]	; (400f24 <lv_obj_draw+0x4cc>)
  400d3e:	4798      	blx	r3
    part_dsc.class_p = MY_CLASS;
  400d40:	4b79      	ldr	r3, [pc, #484]	; (400f28 <lv_obj_draw+0x4d0>)
  400d42:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
  400d44:	2302      	movs	r3, #2
  400d46:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.rect_dsc = &draw_dsc;
  400d48:	ab05      	add	r3, sp, #20
  400d4a:	9316      	str	r3, [sp, #88]	; 0x58
    part_dsc.part = LV_PART_SCROLLBAR;
  400d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  400d50:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
  400d52:	a801      	add	r0, sp, #4
  400d54:	4b70      	ldr	r3, [pc, #448]	; (400f18 <lv_obj_draw+0x4c0>)
  400d56:	4798      	blx	r3
  400d58:	2800      	cmp	r0, #0
  400d5a:	f040 80a8 	bne.w	400eae <lv_obj_draw+0x456>
    if(lv_area_get_size(&ver_area) > 0) {
  400d5e:	a803      	add	r0, sp, #12
  400d60:	4b6d      	ldr	r3, [pc, #436]	; (400f18 <lv_obj_draw+0x4c0>)
  400d62:	4798      	blx	r3
  400d64:	2800      	cmp	r0, #0
  400d66:	f040 80b3 	bne.w	400ed0 <lv_obj_draw+0x478>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
  400d6a:	2261      	movs	r2, #97	; 0x61
  400d6c:	2100      	movs	r1, #0
  400d6e:	4620      	mov	r0, r4
  400d70:	4b6b      	ldr	r3, [pc, #428]	; (400f20 <lv_obj_draw+0x4c8>)
  400d72:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
  400d74:	2800      	cmp	r0, #0
  400d76:	f040 80bc 	bne.w	400ef2 <lv_obj_draw+0x49a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
  400d7a:	2234      	movs	r2, #52	; 0x34
  400d7c:	2100      	movs	r1, #0
  400d7e:	4620      	mov	r0, r4
  400d80:	4b67      	ldr	r3, [pc, #412]	; (400f20 <lv_obj_draw+0x4c8>)
  400d82:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
  400d84:	2800      	cmp	r0, #0
  400d86:	f43f ae79 	beq.w	400a7c <lv_obj_draw+0x24>
            lv_draw_rect_dsc_init(&draw_dsc);
  400d8a:	f10d 0814 	add.w	r8, sp, #20
  400d8e:	4640      	mov	r0, r8
  400d90:	4b62      	ldr	r3, [pc, #392]	; (400f1c <lv_obj_draw+0x4c4>)
  400d92:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  400d94:	2600      	movs	r6, #0
  400d96:	f88d 601e 	strb.w	r6, [sp, #30]
            draw_dsc.outline_opa = LV_OPA_TRANSP;
  400d9a:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  400d9e:	f88d 6046 	strb.w	r6, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
  400da2:	4642      	mov	r2, r8
  400da4:	4631      	mov	r1, r6
  400da6:	4620      	mov	r0, r4
  400da8:	4b60      	ldr	r3, [pc, #384]	; (400f2c <lv_obj_draw+0x4d4>)
  400daa:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
  400dac:	f640 020a 	movw	r2, #2058	; 0x80a
  400db0:	4631      	mov	r1, r6
  400db2:	4620      	mov	r0, r4
  400db4:	4f5a      	ldr	r7, [pc, #360]	; (400f20 <lv_obj_draw+0x4c8>)
  400db6:	47b8      	blx	r7
  400db8:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
  400dba:	f640 020b 	movw	r2, #2059	; 0x80b
  400dbe:	4631      	mov	r1, r6
  400dc0:	4620      	mov	r0, r4
  400dc2:	47b8      	blx	r7
    dest->y1 = src->y1;
  400dc4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
  400dc8:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
    dest->y2 = src->y2;
  400dcc:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
            coords.x1 -= w;
  400dd0:	fa1f f389 	uxth.w	r3, r9
  400dd4:	8aa1      	ldrh	r1, [r4, #20]
  400dd6:	1ac9      	subs	r1, r1, r3
  400dd8:	f8ad 100c 	strh.w	r1, [sp, #12]
            coords.x2 += w;
  400ddc:	4463      	add	r3, ip
  400dde:	f8ad 3010 	strh.w	r3, [sp, #16]
            coords.y1 -= h;
  400de2:	b280      	uxth	r0, r0
  400de4:	1a12      	subs	r2, r2, r0
  400de6:	f8ad 200e 	strh.w	r2, [sp, #14]
            coords.y2 += h;
  400dea:	4470      	add	r0, lr
  400dec:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_obj_draw_dsc_init(&part_dsc, clip_area);
  400df0:	4629      	mov	r1, r5
  400df2:	a812      	add	r0, sp, #72	; 0x48
  400df4:	4b4b      	ldr	r3, [pc, #300]	; (400f24 <lv_obj_draw+0x4cc>)
  400df6:	4798      	blx	r3
            part_dsc.class_p = MY_CLASS;
  400df8:	4b4b      	ldr	r3, [pc, #300]	; (400f28 <lv_obj_draw+0x4d0>)
  400dfa:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
  400dfc:	2301      	movs	r3, #1
  400dfe:	9314      	str	r3, [sp, #80]	; 0x50
            part_dsc.rect_dsc = &draw_dsc;
  400e00:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
            part_dsc.draw_area = &coords;
  400e04:	af03      	add	r7, sp, #12
  400e06:	9715      	str	r7, [sp, #84]	; 0x54
            part_dsc.part = LV_PART_MAIN;
  400e08:	961f      	str	r6, [sp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
  400e0a:	aa12      	add	r2, sp, #72	; 0x48
  400e0c:	211a      	movs	r1, #26
  400e0e:	4620      	mov	r0, r4
  400e10:	4e47      	ldr	r6, [pc, #284]	; (400f30 <lv_obj_draw+0x4d8>)
  400e12:	47b0      	blx	r6
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  400e14:	4642      	mov	r2, r8
  400e16:	4629      	mov	r1, r5
  400e18:	4638      	mov	r0, r7
  400e1a:	4b46      	ldr	r3, [pc, #280]	; (400f34 <lv_obj_draw+0x4dc>)
  400e1c:	4798      	blx	r3
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
  400e1e:	aa12      	add	r2, sp, #72	; 0x48
  400e20:	211b      	movs	r1, #27
  400e22:	4620      	mov	r0, r4
  400e24:	47b0      	blx	r6
  400e26:	e629      	b.n	400a7c <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
  400e28:	2220      	movs	r2, #32
  400e2a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400e2e:	4620      	mov	r0, r4
  400e30:	4b3b      	ldr	r3, [pc, #236]	; (400f20 <lv_obj_draw+0x4c8>)
  400e32:	4798      	blx	r3
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
  400e34:	f8ad 0018 	strh.w	r0, [sp, #24]
  400e38:	e739      	b.n	400cae <lv_obj_draw+0x256>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  400e3a:	f241 0232 	movw	r2, #4146	; 0x1032
  400e3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400e42:	4620      	mov	r0, r4
  400e44:	4b36      	ldr	r3, [pc, #216]	; (400f20 <lv_obj_draw+0x4c8>)
  400e46:	4798      	blx	r3
    return (lv_coord_t)v.num;
  400e48:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
  400e4a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
  400e4e:	2800      	cmp	r0, #0
  400e50:	dd08      	ble.n	400e64 <lv_obj_draw+0x40c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
  400e52:	2230      	movs	r2, #48	; 0x30
  400e54:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400e58:	4620      	mov	r0, r4
  400e5a:	4b31      	ldr	r3, [pc, #196]	; (400f20 <lv_obj_draw+0x4c8>)
  400e5c:	4798      	blx	r3
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
  400e5e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
  400e62:	e730      	b.n	400cc6 <lv_obj_draw+0x26e>
            dsc->border_opa = LV_OPA_TRANSP;
  400e64:	2300      	movs	r3, #0
  400e66:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  400e6a:	e72c      	b.n	400cc6 <lv_obj_draw+0x26e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
  400e6c:	f44f 6204 	mov.w	r2, #2112	; 0x840
  400e70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400e74:	4620      	mov	r0, r4
  400e76:	4b2a      	ldr	r3, [pc, #168]	; (400f20 <lv_obj_draw+0x4c8>)
  400e78:	4798      	blx	r3
    return (lv_coord_t)v.num;
  400e7a:	b200      	sxth	r0, r0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
  400e7c:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
  400e80:	2800      	cmp	r0, #0
  400e82:	dd10      	ble.n	400ea6 <lv_obj_draw+0x44e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
  400e84:	f640 0243 	movw	r2, #2115	; 0x843
  400e88:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400e8c:	4620      	mov	r0, r4
  400e8e:	4e24      	ldr	r6, [pc, #144]	; (400f20 <lv_obj_draw+0x4c8>)
  400e90:	47b0      	blx	r6
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
  400e92:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
  400e96:	2244      	movs	r2, #68	; 0x44
  400e98:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400e9c:	4620      	mov	r0, r4
  400e9e:	47b0      	blx	r6
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
  400ea0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
  400ea4:	e71c      	b.n	400ce0 <lv_obj_draw+0x288>
            dsc->shadow_opa = LV_OPA_TRANSP;
  400ea6:	2300      	movs	r3, #0
  400ea8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  400eac:	e718      	b.n	400ce0 <lv_obj_draw+0x288>
        part_dsc.draw_area = &hor_area;
  400eae:	af01      	add	r7, sp, #4
  400eb0:	9715      	str	r7, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
  400eb2:	aa12      	add	r2, sp, #72	; 0x48
  400eb4:	211a      	movs	r1, #26
  400eb6:	4620      	mov	r0, r4
  400eb8:	4e1d      	ldr	r6, [pc, #116]	; (400f30 <lv_obj_draw+0x4d8>)
  400eba:	47b0      	blx	r6
        lv_draw_rect(&hor_area, clip_area, &draw_dsc);
  400ebc:	aa05      	add	r2, sp, #20
  400ebe:	4629      	mov	r1, r5
  400ec0:	4638      	mov	r0, r7
  400ec2:	4b1c      	ldr	r3, [pc, #112]	; (400f34 <lv_obj_draw+0x4dc>)
  400ec4:	4798      	blx	r3
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
  400ec6:	aa12      	add	r2, sp, #72	; 0x48
  400ec8:	211b      	movs	r1, #27
  400eca:	4620      	mov	r0, r4
  400ecc:	47b0      	blx	r6
  400ece:	e746      	b.n	400d5e <lv_obj_draw+0x306>
        part_dsc.draw_area = &ver_area;
  400ed0:	af03      	add	r7, sp, #12
  400ed2:	9715      	str	r7, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
  400ed4:	aa12      	add	r2, sp, #72	; 0x48
  400ed6:	211a      	movs	r1, #26
  400ed8:	4620      	mov	r0, r4
  400eda:	4e15      	ldr	r6, [pc, #84]	; (400f30 <lv_obj_draw+0x4d8>)
  400edc:	47b0      	blx	r6
        lv_draw_rect(&ver_area, clip_area, &draw_dsc);
  400ede:	aa05      	add	r2, sp, #20
  400ee0:	4629      	mov	r1, r5
  400ee2:	4638      	mov	r0, r7
  400ee4:	4b13      	ldr	r3, [pc, #76]	; (400f34 <lv_obj_draw+0x4dc>)
  400ee6:	4798      	blx	r3
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
  400ee8:	aa12      	add	r2, sp, #72	; 0x48
  400eea:	211b      	movs	r1, #27
  400eec:	4620      	mov	r0, r4
  400eee:	47b0      	blx	r6
  400ef0:	e73b      	b.n	400d6a <lv_obj_draw+0x312>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  400ef2:	f504 7090 	add.w	r0, r4, #288	; 0x120
  400ef6:	4b10      	ldr	r3, [pc, #64]	; (400f38 <lv_obj_draw+0x4e0>)
  400ef8:	4798      	blx	r3
            if(param) {
  400efa:	4606      	mov	r6, r0
  400efc:	2800      	cmp	r0, #0
  400efe:	f43f af3c 	beq.w	400d7a <lv_obj_draw+0x322>
                lv_draw_mask_free_param(param);
  400f02:	4b0e      	ldr	r3, [pc, #56]	; (400f3c <lv_obj_draw+0x4e4>)
  400f04:	4798      	blx	r3
                lv_mem_buf_release(param);
  400f06:	4630      	mov	r0, r6
  400f08:	4b0d      	ldr	r3, [pc, #52]	; (400f40 <lv_obj_draw+0x4e8>)
  400f0a:	4798      	blx	r3
  400f0c:	e735      	b.n	400d7a <lv_obj_draw+0x322>
  400f0e:	bf00      	nop
  400f10:	004004dd 	.word	0x004004dd
  400f14:	00404361 	.word	0x00404361
  400f18:	00410775 	.word	0x00410775
  400f1c:	0040a941 	.word	0x0040a941
  400f20:	00404f1d 	.word	0x00404f1d
  400f24:	0040200d 	.word	0x0040200d
  400f28:	0041c1a0 	.word	0x0041c1a0
  400f2c:	00401bb5 	.word	0x00401bb5
  400f30:	00400491 	.word	0x00400491
  400f34:	0040b101 	.word	0x0040b101
  400f38:	0040a061 	.word	0x0040a061
  400f3c:	0040a09d 	.word	0x0040a09d
  400f40:	00411105 	.word	0x00411105

00400f44 <lv_obj_constructor>:
{
  400f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_obj_t * parent = obj->parent;
  400f48:	684f      	ldr	r7, [r1, #4]
    if(parent) {
  400f4a:	b347      	cbz	r7, 400f9e <lv_obj_constructor+0x5a>
  400f4c:	460e      	mov	r6, r1
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
  400f4e:	4638      	mov	r0, r7
  400f50:	4b15      	ldr	r3, [pc, #84]	; (400fa8 <lv_obj_constructor+0x64>)
  400f52:	4798      	blx	r3
  400f54:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
  400f56:	4638      	mov	r0, r7
  400f58:	4b14      	ldr	r3, [pc, #80]	; (400fac <lv_obj_constructor+0x68>)
  400f5a:	4798      	blx	r3
  400f5c:	4604      	mov	r4, r0
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
  400f5e:	8afd      	ldrh	r5, [r7, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  400f60:	f641 0210 	movw	r2, #6160	; 0x1810
  400f64:	2100      	movs	r1, #0
  400f66:	4638      	mov	r0, r7
  400f68:	f8df 9044 	ldr.w	r9, [pc, #68]	; 400fb0 <lv_obj_constructor+0x6c>
  400f6c:	47c8      	blx	r9
  400f6e:	4428      	add	r0, r5
  400f70:	1b00      	subs	r0, r0, r4
  400f72:	b280      	uxth	r0, r0
  400f74:	82f0      	strh	r0, [r6, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
  400f76:	3801      	subs	r0, #1
  400f78:	8370      	strh	r0, [r6, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
  400f7a:	8abc      	ldrh	r4, [r7, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  400f7c:	f641 0212 	movw	r2, #6162	; 0x1812
  400f80:	2100      	movs	r1, #0
  400f82:	4638      	mov	r0, r7
  400f84:	47c8      	blx	r9
  400f86:	4420      	add	r0, r4
  400f88:	eba0 0008 	sub.w	r0, r0, r8
  400f8c:	b280      	uxth	r0, r0
  400f8e:	82b0      	strh	r0, [r6, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
  400f90:	3801      	subs	r0, #1
  400f92:	8330      	strh	r0, [r6, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
  400f94:	f642 5376 	movw	r3, #11638	; 0x2d76
  400f98:	61f3      	str	r3, [r6, #28]
}
  400f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
  400f9e:	f240 4376 	movw	r3, #1142	; 0x476
  400fa2:	61cb      	str	r3, [r1, #28]
  400fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400fa8:	00403b41 	.word	0x00403b41
  400fac:	00403a41 	.word	0x00403a41
  400fb0:	00404f1d 	.word	0x00404f1d

00400fb4 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
  400fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400fb8:	b08d      	sub	sp, #52	; 0x34
    if(obj->state == new_state) return;
  400fba:	8c03      	ldrh	r3, [r0, #32]
  400fbc:	930b      	str	r3, [sp, #44]	; 0x2c
  400fbe:	428b      	cmp	r3, r1
  400fc0:	d008      	beq.n	400fd4 <lv_obj_set_state+0x20>
  400fc2:	9107      	str	r1, [sp, #28]
  400fc4:	9004      	str	r0, [sp, #16]

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
  400fc6:	460a      	mov	r2, r1
  400fc8:	8401      	strh	r1, [r0, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
  400fca:	4619      	mov	r1, r3
  400fcc:	4b83      	ldr	r3, [pc, #524]	; (4011dc <lv_obj_set_state+0x228>)
  400fce:	4798      	blx	r3
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
  400fd0:	900a      	str	r0, [sp, #40]	; 0x28
  400fd2:	b910      	cbnz	r0, 400fda <lv_obj_set_state+0x26>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
  400fd4:	b00d      	add	sp, #52	; 0x34
  400fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
  400fda:	f44f 7020 	mov.w	r0, #640	; 0x280
  400fde:	4b80      	ldr	r3, [pc, #512]	; (4011e0 <lv_obj_set_state+0x22c>)
  400fe0:	4798      	blx	r3
  400fe2:	9009      	str	r0, [sp, #36]	; 0x24
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
  400fe4:	f44f 7120 	mov.w	r1, #640	; 0x280
  400fe8:	4b7e      	ldr	r3, [pc, #504]	; (4011e4 <lv_obj_set_state+0x230>)
  400fea:	4798      	blx	r3
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
  400fec:	9b04      	ldr	r3, [sp, #16]
  400fee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  400ff0:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
  400ff4:	f000 80d0 	beq.w	401198 <lv_obj_set_state+0x1e4>
  400ff8:	2300      	movs	r3, #0
  400ffa:	9305      	str	r3, [sp, #20]
  400ffc:	469a      	mov	sl, r3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
  400ffe:	f8df 9200 	ldr.w	r9, [pc, #512]	; 401200 <lv_obj_set_state+0x24c>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
  401002:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 4011e8 <lv_obj_set_state+0x234>
  401006:	e022      	b.n	40104e <lv_obj_set_state+0x9a>
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
        const lv_style_const_prop_t * const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
  401008:	681a      	ldr	r2, [r3, #0]
  40100a:	8813      	ldrh	r3, [r2, #0]
  40100c:	b183      	cbz	r3, 401030 <lv_obj_set_state+0x7c>
            if(const_prop->prop == prop) {
  40100e:	2b67      	cmp	r3, #103	; 0x67
  401010:	d004      	beq.n	40101c <lv_obj_set_state+0x68>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
  401012:	f832 3f08 	ldrh.w	r3, [r2, #8]!
  401016:	b15b      	cbz	r3, 401030 <lv_obj_set_state+0x7c>
            if(const_prop->prop == prop) {
  401018:	2b67      	cmp	r3, #103	; 0x67
  40101a:	d1fa      	bne.n	401012 <lv_obj_set_state+0x5e>
                *value = const_prop->value;
  40101c:	f8d2 8004 	ldr.w	r8, [r2, #4]
  401020:	e04f      	b.n	4010c2 <lv_obj_set_state+0x10e>

    if(style->prop_cnt > 1) {
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
  401022:	2300      	movs	r3, #0
  401024:	e04b      	b.n	4010be <lv_obj_set_state+0x10a>
                *value = values[i];
                return LV_RES_OK;
            }
        }
    }
    else if(style->prop1 == prop) {
  401026:	889a      	ldrh	r2, [r3, #4]
  401028:	f3c2 020e 	ubfx	r2, r2, #0, #15
  40102c:	2a67      	cmp	r2, #103	; 0x67
  40102e:	d052      	beq.n	4010d6 <lv_obj_set_state+0x122>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
  401030:	9b05      	ldr	r3, [sp, #20]
  401032:	3301      	adds	r3, #1
  401034:	461a      	mov	r2, r3
  401036:	9305      	str	r3, [sp, #20]
  401038:	9b04      	ldr	r3, [sp, #16]
  40103a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  40103c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  401040:	4293      	cmp	r3, r2
  401042:	f240 8092 	bls.w	40116a <lv_obj_set_state+0x1b6>
  401046:	f1ba 0f1f 	cmp.w	sl, #31
  40104a:	f200 808e 	bhi.w	40116a <lv_obj_set_state+0x1b6>
  40104e:	9b05      	ldr	r3, [sp, #20]
  401050:	00dc      	lsls	r4, r3, #3
        _lv_obj_style_t * obj_style = &obj->styles[i];
  401052:	9f04      	ldr	r7, [sp, #16]
  401054:	68fd      	ldr	r5, [r7, #12]
  401056:	192b      	adds	r3, r5, r4
  401058:	461e      	mov	r6, r3
  40105a:	9308      	str	r3, [sp, #32]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
  40105c:	6858      	ldr	r0, [r3, #4]
  40105e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  401062:	47c8      	blx	r9
  401064:	4680      	mov	r8, r0
  401066:	9006      	str	r0, [sp, #24]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
  401068:	68fb      	ldr	r3, [r7, #12]
  40106a:	4423      	add	r3, r4
  40106c:	6858      	ldr	r0, [r3, #4]
  40106e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  401072:	47d8      	blx	fp
  401074:	9003      	str	r0, [sp, #12]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
  401076:	4643      	mov	r3, r8
  401078:	9a07      	ldr	r2, [sp, #28]
  40107a:	4393      	bics	r3, r2
  40107c:	d1d8      	bne.n	401030 <lv_obj_set_state+0x7c>
        if(obj_style->is_trans) continue;
  40107e:	79f3      	ldrb	r3, [r6, #7]
  401080:	f013 0f02 	tst.w	r3, #2
  401084:	d1d4      	bne.n	401030 <lv_obj_set_state+0x7c>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) == false) continue;
  401086:	592b      	ldr	r3, [r5, r4]
    if(style->is_const) {
  401088:	f993 2005 	ldrsb.w	r2, [r3, #5]
  40108c:	2a00      	cmp	r2, #0
  40108e:	dbbb      	blt.n	401008 <lv_obj_set_state+0x54>
    if(style->prop_cnt == 0) return LV_RES_INV;
  401090:	79dc      	ldrb	r4, [r3, #7]
  401092:	2c00      	cmp	r4, #0
  401094:	d0cc      	beq.n	401030 <lv_obj_set_state+0x7c>
    if(style->prop_cnt > 1) {
  401096:	2c01      	cmp	r4, #1
  401098:	d9c5      	bls.n	401026 <lv_obj_set_state+0x72>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
  40109a:	6818      	ldr	r0, [r3, #0]
  40109c:	4621      	mov	r1, r4
  40109e:	00a2      	lsls	r2, r4, #2
        for(i = 0; i < style->prop_cnt; i++) {
  4010a0:	2c00      	cmp	r4, #0
  4010a2:	d0c5      	beq.n	401030 <lv_obj_set_state+0x7c>
            if(props[i] == prop) {
  4010a4:	4402      	add	r2, r0
  4010a6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
  4010aa:	2b67      	cmp	r3, #103	; 0x67
  4010ac:	d0b9      	beq.n	401022 <lv_obj_set_state+0x6e>
  4010ae:	2300      	movs	r3, #0
        for(i = 0; i < style->prop_cnt; i++) {
  4010b0:	3301      	adds	r3, #1
  4010b2:	4299      	cmp	r1, r3
  4010b4:	d0bc      	beq.n	401030 <lv_obj_set_state+0x7c>
            if(props[i] == prop) {
  4010b6:	f832 4f02 	ldrh.w	r4, [r2, #2]!
  4010ba:	2c67      	cmp	r4, #103	; 0x67
  4010bc:	d1f8      	bne.n	4010b0 <lv_obj_set_state+0xfc>
                *value = values[i];
  4010be:	f850 8023 	ldr.w	r8, [r0, r3, lsl #2]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
  4010c2:	f8d8 3000 	ldr.w	r3, [r8]
  4010c6:	881b      	ldrh	r3, [r3, #0]
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d0b1      	beq.n	401030 <lv_obj_set_state+0x7c>
  4010cc:	f1ba 0f1f 	cmp.w	sl, #31
  4010d0:	d8ae      	bhi.n	401030 <lv_obj_set_state+0x7c>
  4010d2:	2700      	movs	r7, #0
  4010d4:	e043      	b.n	40115e <lv_obj_set_state+0x1aa>
        *value = style->v_p.value1;
  4010d6:	f8d3 8000 	ldr.w	r8, [r3]
  4010da:	e7f2      	b.n	4010c2 <lv_obj_set_state+0x10e>
            for(t = 0; t < tsi; t++) {
  4010dc:	3501      	adds	r5, #1
  4010de:	3414      	adds	r4, #20
  4010e0:	4555      	cmp	r5, sl
  4010e2:	d014      	beq.n	40110e <lv_obj_set_state+0x15a>
                lv_style_selector_t selector = ts[t].selector;
  4010e4:	6866      	ldr	r6, [r4, #4]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
  4010e6:	4630      	mov	r0, r6
  4010e8:	47c8      	blx	r9
  4010ea:	9002      	str	r0, [sp, #8]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
  4010ec:	4630      	mov	r0, r6
  4010ee:	47d8      	blx	fp
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
  4010f0:	f8d8 3000 	ldr.w	r3, [r8]
  4010f4:	8922      	ldrh	r2, [r4, #8]
  4010f6:	5bdb      	ldrh	r3, [r3, r7]
  4010f8:	429a      	cmp	r2, r3
  4010fa:	d1ef      	bne.n	4010dc <lv_obj_set_state+0x128>
  4010fc:	9b03      	ldr	r3, [sp, #12]
  4010fe:	4283      	cmp	r3, r0
  401100:	d1ec      	bne.n	4010dc <lv_obj_set_state+0x128>
  401102:	9b06      	ldr	r3, [sp, #24]
  401104:	9a02      	ldr	r2, [sp, #8]
  401106:	4293      	cmp	r3, r2
  401108:	d8e8      	bhi.n	4010dc <lv_obj_set_state+0x128>
            if(t == tsi) {
  40110a:	45aa      	cmp	sl, r5
  40110c:	d11c      	bne.n	401148 <lv_obj_set_state+0x194>
                ts[tsi].time = tr->time;
  40110e:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
  401112:	9809      	ldr	r0, [sp, #36]	; 0x24
  401114:	eb00 0382 	add.w	r3, r0, r2, lsl #2
  401118:	f8d8 100c 	ldr.w	r1, [r8, #12]
  40111c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
                ts[tsi].delay = tr->delay;
  401120:	f8d8 2010 	ldr.w	r2, [r8, #16]
  401124:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
  401126:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40112a:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
  40112c:	f8d8 2000 	ldr.w	r2, [r8]
  401130:	5bd2      	ldrh	r2, [r2, r7]
  401132:	811a      	strh	r2, [r3, #8]
                ts[tsi].user_data = tr->user_data;
  401134:	f8d8 2004 	ldr.w	r2, [r8, #4]
  401138:	611a      	str	r2, [r3, #16]
                ts[tsi].selector = obj_style->selector;
  40113a:	9a08      	ldr	r2, [sp, #32]
  40113c:	6852      	ldr	r2, [r2, #4]
  40113e:	f3c2 0217 	ubfx	r2, r2, #0, #24
  401142:	605a      	str	r2, [r3, #4]
                tsi++;
  401144:	f10a 0a01 	add.w	sl, sl, #1
  401148:	3702      	adds	r7, #2
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
  40114a:	f8d8 3000 	ldr.w	r3, [r8]
  40114e:	5bdb      	ldrh	r3, [r3, r7]
  401150:	2b00      	cmp	r3, #0
  401152:	f43f af6d 	beq.w	401030 <lv_obj_set_state+0x7c>
  401156:	f1ba 0f1f 	cmp.w	sl, #31
  40115a:	f63f af69 	bhi.w	401030 <lv_obj_set_state+0x7c>
            for(t = 0; t < tsi; t++) {
  40115e:	f1ba 0f00 	cmp.w	sl, #0
  401162:	d0d4      	beq.n	40110e <lv_obj_set_state+0x15a>
  401164:	9c09      	ldr	r4, [sp, #36]	; 0x24
  401166:	2500      	movs	r5, #0
  401168:	e7bc      	b.n	4010e4 <lv_obj_set_state+0x130>
    for(i = 0; i < tsi; i++) {
  40116a:	f1ba 0f00 	cmp.w	sl, #0
  40116e:	d013      	beq.n	401198 <lv_obj_set_state+0x1e4>
  401170:	9c09      	ldr	r4, [sp, #36]	; 0x24
  401172:	2500      	movs	r5, #0
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
  401174:	4f1c      	ldr	r7, [pc, #112]	; (4011e8 <lv_obj_set_state+0x234>)
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
  401176:	4e1d      	ldr	r6, [pc, #116]	; (4011ec <lv_obj_set_state+0x238>)
  401178:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  40117c:	f8dd 901c 	ldr.w	r9, [sp, #28]
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
  401180:	6860      	ldr	r0, [r4, #4]
  401182:	47b8      	blx	r7
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
  401184:	9400      	str	r4, [sp, #0]
  401186:	464b      	mov	r3, r9
  401188:	4642      	mov	r2, r8
  40118a:	4601      	mov	r1, r0
  40118c:	9804      	ldr	r0, [sp, #16]
  40118e:	47b0      	blx	r6
    for(i = 0; i < tsi; i++) {
  401190:	3501      	adds	r5, #1
  401192:	3414      	adds	r4, #20
  401194:	45aa      	cmp	sl, r5
  401196:	d1f3      	bne.n	401180 <lv_obj_set_state+0x1cc>
    lv_mem_buf_release(ts);
  401198:	9809      	ldr	r0, [sp, #36]	; 0x24
  40119a:	4b15      	ldr	r3, [pc, #84]	; (4011f0 <lv_obj_set_state+0x23c>)
  40119c:	4798      	blx	r3
    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
  40119e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4011a0:	2b01      	cmp	r3, #1
  4011a2:	d00e      	beq.n	4011c2 <lv_obj_set_state+0x20e>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
  4011a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4011a6:	2b03      	cmp	r3, #3
  4011a8:	d00f      	beq.n	4011ca <lv_obj_set_state+0x216>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
  4011aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4011ac:	2b02      	cmp	r3, #2
  4011ae:	f47f af11 	bne.w	400fd4 <lv_obj_set_state+0x20>
        lv_obj_invalidate(obj);
  4011b2:	9c04      	ldr	r4, [sp, #16]
  4011b4:	4620      	mov	r0, r4
  4011b6:	4b0f      	ldr	r3, [pc, #60]	; (4011f4 <lv_obj_set_state+0x240>)
  4011b8:	4798      	blx	r3
        lv_obj_refresh_ext_draw_size(obj);
  4011ba:	4620      	mov	r0, r4
  4011bc:	4b0e      	ldr	r3, [pc, #56]	; (4011f8 <lv_obj_set_state+0x244>)
  4011be:	4798      	blx	r3
  4011c0:	e708      	b.n	400fd4 <lv_obj_set_state+0x20>
        lv_obj_invalidate(obj);
  4011c2:	9804      	ldr	r0, [sp, #16]
  4011c4:	4b0b      	ldr	r3, [pc, #44]	; (4011f4 <lv_obj_set_state+0x240>)
  4011c6:	4798      	blx	r3
  4011c8:	e704      	b.n	400fd4 <lv_obj_set_state+0x20>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
  4011ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4011ce:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
  4011d2:	9804      	ldr	r0, [sp, #16]
  4011d4:	4b09      	ldr	r3, [pc, #36]	; (4011fc <lv_obj_set_state+0x248>)
  4011d6:	4798      	blx	r3
  4011d8:	e6fc      	b.n	400fd4 <lv_obj_set_state+0x20>
  4011da:	bf00      	nop
  4011dc:	00405a41 	.word	0x00405a41
  4011e0:	004115a9 	.word	0x004115a9
  4011e4:	004116ed 	.word	0x004116ed
  4011e8:	00405ca1 	.word	0x00405ca1
  4011ec:	00405895 	.word	0x00405895
  4011f0:	00411105 	.word	0x00411105
  4011f4:	0040262d 	.word	0x0040262d
  4011f8:	00402031 	.word	0x00402031
  4011fc:	00405101 	.word	0x00405101
  401200:	00405c9d 	.word	0x00405c9d

00401204 <lv_init>:
{
  401204:	b510      	push	{r4, lr}
  401206:	b082      	sub	sp, #8
    if(lv_initialized) {
  401208:	4b15      	ldr	r3, [pc, #84]	; (401260 <lv_init+0x5c>)
  40120a:	781b      	ldrb	r3, [r3, #0]
  40120c:	b9f3      	cbnz	r3, 40124c <lv_init+0x48>
    lv_mem_init();
  40120e:	4b15      	ldr	r3, [pc, #84]	; (401264 <lv_init+0x60>)
  401210:	4798      	blx	r3
    _lv_timer_core_init();
  401212:	4b15      	ldr	r3, [pc, #84]	; (401268 <lv_init+0x64>)
  401214:	4798      	blx	r3
    _lv_fs_init();
  401216:	4b15      	ldr	r3, [pc, #84]	; (40126c <lv_init+0x68>)
  401218:	4798      	blx	r3
    _lv_anim_core_init();
  40121a:	4b15      	ldr	r3, [pc, #84]	; (401270 <lv_init+0x6c>)
  40121c:	4798      	blx	r3
    _lv_group_init();
  40121e:	4b15      	ldr	r3, [pc, #84]	; (401274 <lv_init+0x70>)
  401220:	4798      	blx	r3
    _lv_obj_style_init();
  401222:	4b15      	ldr	r3, [pc, #84]	; (401278 <lv_init+0x74>)
  401224:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  401226:	f44f 71ae 	mov.w	r1, #348	; 0x15c
  40122a:	4814      	ldr	r0, [pc, #80]	; (40127c <lv_init+0x78>)
  40122c:	4c14      	ldr	r4, [pc, #80]	; (401280 <lv_init+0x7c>)
  40122e:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  401230:	2158      	movs	r1, #88	; 0x58
  401232:	4814      	ldr	r0, [pc, #80]	; (401284 <lv_init+0x80>)
  401234:	47a0      	blx	r4
    _lv_refr_init();
  401236:	4b14      	ldr	r3, [pc, #80]	; (401288 <lv_init+0x84>)
  401238:	4798      	blx	r3
    _lv_img_decoder_init();
  40123a:	4b14      	ldr	r3, [pc, #80]	; (40128c <lv_init+0x88>)
  40123c:	4798      	blx	r3
    lv_extra_init();
  40123e:	4b14      	ldr	r3, [pc, #80]	; (401290 <lv_init+0x8c>)
  401240:	4798      	blx	r3
    lv_initialized = true;
  401242:	2201      	movs	r2, #1
  401244:	4b06      	ldr	r3, [pc, #24]	; (401260 <lv_init+0x5c>)
  401246:	701a      	strb	r2, [r3, #0]
}
  401248:	b002      	add	sp, #8
  40124a:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_init: already inited");
  40124c:	4b11      	ldr	r3, [pc, #68]	; (401294 <lv_init+0x90>)
  40124e:	9300      	str	r3, [sp, #0]
  401250:	4b11      	ldr	r3, [pc, #68]	; (401298 <lv_init+0x94>)
  401252:	2264      	movs	r2, #100	; 0x64
  401254:	4911      	ldr	r1, [pc, #68]	; (40129c <lv_init+0x98>)
  401256:	2002      	movs	r0, #2
  401258:	4c11      	ldr	r4, [pc, #68]	; (4012a0 <lv_init+0x9c>)
  40125a:	47a0      	blx	r4
  40125c:	e7f4      	b.n	401248 <lv_init+0x44>
  40125e:	bf00      	nop
  401260:	20400a10 	.word	0x20400a10
  401264:	004110c1 	.word	0x004110c1
  401268:	00412635 	.word	0x00412635
  40126c:	00410b95 	.word	0x00410b95
  401270:	00410499 	.word	0x00410499
  401274:	004007c9 	.word	0x004007c9
  401278:	00404efd 	.word	0x00404efd
  40127c:	20439e78 	.word	0x20439e78
  401280:	00410d8f 	.word	0x00410d8f
  401284:	20439e60 	.word	0x20439e60
  401288:	00405e31 	.word	0x00405e31
  40128c:	0040e405 	.word	0x0040e405
  401290:	0040fcdd 	.word	0x0040fcdd
  401294:	0041c170 	.word	0x0041c170
  401298:	0041c11c 	.word	0x0041c11c
  40129c:	0041c140 	.word	0x0041c140
  4012a0:	00410edd 	.word	0x00410edd

004012a4 <lv_obj_add_flag>:
{
  4012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4012a6:	b085      	sub	sp, #20
  4012a8:	4604      	mov	r4, r0
  4012aa:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
  4012ac:	4b18      	ldr	r3, [pc, #96]	; (401310 <lv_obj_add_flag+0x6c>)
  4012ae:	4798      	blx	r3
  4012b0:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
  4012b2:	f015 0f01 	tst.w	r5, #1
  4012b6:	d111      	bne.n	4012dc <lv_obj_add_flag+0x38>
    obj->flags |= f;
  4012b8:	69e3      	ldr	r3, [r4, #28]
  4012ba:	432b      	orrs	r3, r5
  4012bc:	61e3      	str	r3, [r4, #28]
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
  4012be:	4620      	mov	r0, r4
  4012c0:	4b13      	ldr	r3, [pc, #76]	; (401310 <lv_obj_add_flag+0x6c>)
  4012c2:	4798      	blx	r3
  4012c4:	4286      	cmp	r6, r0
  4012c6:	d012      	beq.n	4012ee <lv_obj_add_flag+0x4a>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
  4012c8:	4620      	mov	r0, r4
  4012ca:	4b12      	ldr	r3, [pc, #72]	; (401314 <lv_obj_add_flag+0x70>)
  4012cc:	4798      	blx	r3
  4012ce:	4b12      	ldr	r3, [pc, #72]	; (401318 <lv_obj_add_flag+0x74>)
  4012d0:	4798      	blx	r3
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
  4012d2:	f015 0f10 	tst.w	r5, #16
  4012d6:	d10e      	bne.n	4012f6 <lv_obj_add_flag+0x52>
}
  4012d8:	b005      	add	sp, #20
  4012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
  4012dc:	4620      	mov	r0, r4
  4012de:	4f0f      	ldr	r7, [pc, #60]	; (40131c <lv_obj_add_flag+0x78>)
  4012e0:	47b8      	blx	r7
    obj->flags |= f;
  4012e2:	69e3      	ldr	r3, [r4, #28]
  4012e4:	432b      	orrs	r3, r5
  4012e6:	61e3      	str	r3, [r4, #28]
        lv_obj_invalidate(obj);
  4012e8:	4620      	mov	r0, r4
  4012ea:	47b8      	blx	r7
  4012ec:	e7e7      	b.n	4012be <lv_obj_add_flag+0x1a>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
  4012ee:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
  4012f2:	d0ee      	beq.n	4012d2 <lv_obj_add_flag+0x2e>
  4012f4:	e7e8      	b.n	4012c8 <lv_obj_add_flag+0x24>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
  4012f6:	aa02      	add	r2, sp, #8
  4012f8:	4669      	mov	r1, sp
  4012fa:	4620      	mov	r0, r4
  4012fc:	4b08      	ldr	r3, [pc, #32]	; (401320 <lv_obj_add_flag+0x7c>)
  4012fe:	4798      	blx	r3
        lv_obj_invalidate_area(obj, &hor_area);
  401300:	4669      	mov	r1, sp
  401302:	4620      	mov	r0, r4
  401304:	4d07      	ldr	r5, [pc, #28]	; (401324 <lv_obj_add_flag+0x80>)
  401306:	47a8      	blx	r5
        lv_obj_invalidate_area(obj, &ver_area);
  401308:	a902      	add	r1, sp, #8
  40130a:	4620      	mov	r0, r4
  40130c:	47a8      	blx	r5
}
  40130e:	e7e3      	b.n	4012d8 <lv_obj_add_flag+0x34>
  401310:	0040219d 	.word	0x0040219d
  401314:	00405ded 	.word	0x00405ded
  401318:	004021e1 	.word	0x004021e1
  40131c:	0040262d 	.word	0x0040262d
  401320:	00404361 	.word	0x00404361
  401324:	004025e9 	.word	0x004025e9

00401328 <lv_obj_clear_flag>:
{
  401328:	b5f0      	push	{r4, r5, r6, r7, lr}
  40132a:	b085      	sub	sp, #20
  40132c:	4604      	mov	r4, r0
  40132e:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
  401330:	4b1b      	ldr	r3, [pc, #108]	; (4013a0 <lv_obj_clear_flag+0x78>)
  401332:	4798      	blx	r3
  401334:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
  401336:	f015 0f10 	tst.w	r5, #16
  40133a:	d112      	bne.n	401362 <lv_obj_clear_flag+0x3a>
    obj->flags &= (~f);
  40133c:	69e3      	ldr	r3, [r4, #28]
  40133e:	ea23 0305 	bic.w	r3, r3, r5
  401342:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
  401344:	f015 0f01 	tst.w	r5, #1
  401348:	d118      	bne.n	40137c <lv_obj_clear_flag+0x54>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
  40134a:	4620      	mov	r0, r4
  40134c:	4b14      	ldr	r3, [pc, #80]	; (4013a0 <lv_obj_clear_flag+0x78>)
  40134e:	4798      	blx	r3
  401350:	4286      	cmp	r6, r0
  401352:	d021      	beq.n	401398 <lv_obj_clear_flag+0x70>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
  401354:	4620      	mov	r0, r4
  401356:	4b13      	ldr	r3, [pc, #76]	; (4013a4 <lv_obj_clear_flag+0x7c>)
  401358:	4798      	blx	r3
  40135a:	4b13      	ldr	r3, [pc, #76]	; (4013a8 <lv_obj_clear_flag+0x80>)
  40135c:	4798      	blx	r3
}
  40135e:	b005      	add	sp, #20
  401360:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
  401362:	aa02      	add	r2, sp, #8
  401364:	4669      	mov	r1, sp
  401366:	4620      	mov	r0, r4
  401368:	4b10      	ldr	r3, [pc, #64]	; (4013ac <lv_obj_clear_flag+0x84>)
  40136a:	4798      	blx	r3
        lv_obj_invalidate_area(obj, &hor_area);
  40136c:	4669      	mov	r1, sp
  40136e:	4620      	mov	r0, r4
  401370:	4f0f      	ldr	r7, [pc, #60]	; (4013b0 <lv_obj_clear_flag+0x88>)
  401372:	47b8      	blx	r7
        lv_obj_invalidate_area(obj, &ver_area);
  401374:	a902      	add	r1, sp, #8
  401376:	4620      	mov	r0, r4
  401378:	47b8      	blx	r7
  40137a:	e7df      	b.n	40133c <lv_obj_clear_flag+0x14>
        lv_obj_invalidate(obj);
  40137c:	4620      	mov	r0, r4
  40137e:	4b0d      	ldr	r3, [pc, #52]	; (4013b4 <lv_obj_clear_flag+0x8c>)
  401380:	4798      	blx	r3
        if(lv_obj_is_layout_positioned(obj)) {
  401382:	4620      	mov	r0, r4
  401384:	4b06      	ldr	r3, [pc, #24]	; (4013a0 <lv_obj_clear_flag+0x78>)
  401386:	4798      	blx	r3
  401388:	2800      	cmp	r0, #0
  40138a:	d0de      	beq.n	40134a <lv_obj_clear_flag+0x22>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
  40138c:	4620      	mov	r0, r4
  40138e:	4b05      	ldr	r3, [pc, #20]	; (4013a4 <lv_obj_clear_flag+0x7c>)
  401390:	4798      	blx	r3
  401392:	4b05      	ldr	r3, [pc, #20]	; (4013a8 <lv_obj_clear_flag+0x80>)
  401394:	4798      	blx	r3
  401396:	e7d8      	b.n	40134a <lv_obj_clear_flag+0x22>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
  401398:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
  40139c:	d1da      	bne.n	401354 <lv_obj_clear_flag+0x2c>
  40139e:	e7de      	b.n	40135e <lv_obj_clear_flag+0x36>
  4013a0:	0040219d 	.word	0x0040219d
  4013a4:	00405ded 	.word	0x00405ded
  4013a8:	004021e1 	.word	0x004021e1
  4013ac:	00404361 	.word	0x00404361
  4013b0:	004025e9 	.word	0x004025e9
  4013b4:	0040262d 	.word	0x0040262d

004013b8 <lv_obj_add_state>:
{
  4013b8:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state | state;
  4013ba:	8c03      	ldrh	r3, [r0, #32]
  4013bc:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
  4013be:	428b      	cmp	r3, r1
  4013c0:	d001      	beq.n	4013c6 <lv_obj_add_state+0xe>
        lv_obj_set_state(obj, new_state);
  4013c2:	4b01      	ldr	r3, [pc, #4]	; (4013c8 <lv_obj_add_state+0x10>)
  4013c4:	4798      	blx	r3
  4013c6:	bd08      	pop	{r3, pc}
  4013c8:	00400fb5 	.word	0x00400fb5

004013cc <lv_obj_clear_state>:
{
  4013cc:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state & (~state);
  4013ce:	8c03      	ldrh	r3, [r0, #32]
  4013d0:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
  4013d4:	428b      	cmp	r3, r1
  4013d6:	d001      	beq.n	4013dc <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
  4013d8:	4b01      	ldr	r3, [pc, #4]	; (4013e0 <lv_obj_clear_state+0x14>)
  4013da:	4798      	blx	r3
  4013dc:	bd08      	pop	{r3, pc}
  4013de:	bf00      	nop
  4013e0:	00400fb5 	.word	0x00400fb5

004013e4 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
  4013e4:	69c3      	ldr	r3, [r0, #28]
  4013e6:	ea31 0303 	bics.w	r3, r1, r3
}
  4013ea:	bf0c      	ite	eq
  4013ec:	2001      	moveq	r0, #1
  4013ee:	2000      	movne	r0, #0
  4013f0:	4770      	bx	lr

004013f2 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
  4013f2:	69c3      	ldr	r3, [r0, #28]
  4013f4:	4219      	tst	r1, r3
}
  4013f6:	bf14      	ite	ne
  4013f8:	2001      	movne	r0, #1
  4013fa:	2000      	moveq	r0, #0
  4013fc:	4770      	bx	lr

004013fe <lv_obj_get_state>:
}
  4013fe:	8c00      	ldrh	r0, [r0, #32]
  401400:	4770      	bx	lr

00401402 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
  401402:	6883      	ldr	r3, [r0, #8]
  401404:	b10b      	cbz	r3, 40140a <lv_obj_get_group+0x8>
  401406:	6898      	ldr	r0, [r3, #8]
  401408:	4770      	bx	lr
    else return NULL;
  40140a:	2000      	movs	r0, #0
}
  40140c:	4770      	bx	lr
	...

00401410 <lv_obj_event>:
{
  401410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401414:	b084      	sub	sp, #16
  401416:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
  401418:	4608      	mov	r0, r1
  40141a:	4ba6      	ldr	r3, [pc, #664]	; (4016b4 <lv_obj_event+0x2a4>)
  40141c:	4798      	blx	r3
  40141e:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
  401420:	4630      	mov	r0, r6
  401422:	4ba5      	ldr	r3, [pc, #660]	; (4016b8 <lv_obj_event+0x2a8>)
  401424:	4798      	blx	r3
  401426:	4605      	mov	r5, r0
    if(code == LV_EVENT_PRESSED) {
  401428:	2c01      	cmp	r4, #1
  40142a:	d029      	beq.n	401480 <lv_obj_event+0x70>
    else if(code == LV_EVENT_RELEASED) {
  40142c:	2c08      	cmp	r4, #8
  40142e:	d02b      	beq.n	401488 <lv_obj_event+0x78>
    else if(code == LV_EVENT_PRESS_LOST) {
  401430:	2c03      	cmp	r4, #3
  401432:	d049      	beq.n	4014c8 <lv_obj_event+0xb8>
    else if(code == LV_EVENT_STYLE_CHANGED) {
  401434:	2c28      	cmp	r4, #40	; 0x28
  401436:	d04b      	beq.n	4014d0 <lv_obj_event+0xc0>
    else if(code == LV_EVENT_KEY) {
  401438:	2c0d      	cmp	r4, #13
  40143a:	d059      	beq.n	4014f0 <lv_obj_event+0xe0>
    else if(code == LV_EVENT_FOCUSED) {
  40143c:	2c0e      	cmp	r4, #14
  40143e:	f000 8118 	beq.w	401672 <lv_obj_event+0x262>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
  401442:	2c09      	cmp	r4, #9
  401444:	f000 817a 	beq.w	40173c <lv_obj_event+0x32c>
    else if(code == LV_EVENT_SCROLL_END) {
  401448:	2c0a      	cmp	r4, #10
  40144a:	f000 817b 	beq.w	401744 <lv_obj_event+0x334>
    else if(code == LV_EVENT_DEFOCUSED) {
  40144e:	2c0f      	cmp	r4, #15
  401450:	f000 818e 	beq.w	401770 <lv_obj_event+0x360>
    else if(code == LV_EVENT_SIZE_CHANGED) {
  401454:	2c27      	cmp	r4, #39	; 0x27
  401456:	f000 818f 	beq.w	401778 <lv_obj_event+0x368>
    else if(code == LV_EVENT_CHILD_CHANGED) {
  40145a:	2c22      	cmp	r4, #34	; 0x22
  40145c:	f000 81b0 	beq.w	4017c0 <lv_obj_event+0x3b0>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
  401460:	2c13      	cmp	r4, #19
  401462:	f000 81d3 	beq.w	40180c <lv_obj_event+0x3fc>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
  401466:	2c18      	cmp	r4, #24
  401468:	d817      	bhi.n	40149a <lv_obj_event+0x8a>
  40146a:	f04f 7392 	mov.w	r3, #19136512	; 0x1240000
  40146e:	fa23 f404 	lsr.w	r4, r3, r4
  401472:	f014 0f01 	tst.w	r4, #1
  401476:	d010      	beq.n	40149a <lv_obj_event+0x8a>
        lv_obj_draw(e);
  401478:	4630      	mov	r0, r6
  40147a:	4b90      	ldr	r3, [pc, #576]	; (4016bc <lv_obj_event+0x2ac>)
  40147c:	4798      	blx	r3
  40147e:	e00c      	b.n	40149a <lv_obj_event+0x8a>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  401480:	2120      	movs	r1, #32
  401482:	4b8f      	ldr	r3, [pc, #572]	; (4016c0 <lv_obj_event+0x2b0>)
  401484:	4798      	blx	r3
  401486:	e008      	b.n	40149a <lv_obj_event+0x8a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  401488:	2120      	movs	r1, #32
  40148a:	4b8e      	ldr	r3, [pc, #568]	; (4016c4 <lv_obj_event+0x2b4>)
  40148c:	4798      	blx	r3
        void * param = lv_event_get_param(e);
  40148e:	4630      	mov	r0, r6
  401490:	4b8d      	ldr	r3, [pc, #564]	; (4016c8 <lv_obj_event+0x2b8>)
  401492:	4798      	blx	r3
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
  401494:	4b8d      	ldr	r3, [pc, #564]	; (4016cc <lv_obj_event+0x2bc>)
  401496:	4798      	blx	r3
  401498:	b110      	cbz	r0, 4014a0 <lv_obj_event+0x90>
}
  40149a:	b004      	add	sp, #16
  40149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (obj->flags & f)  == f ? true : false;
  4014a0:	69eb      	ldr	r3, [r5, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
  4014a2:	f013 0f08 	tst.w	r3, #8
  4014a6:	d0f8      	beq.n	40149a <lv_obj_event+0x8a>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
  4014a8:	8c2b      	ldrh	r3, [r5, #32]
  4014aa:	f013 0f01 	tst.w	r3, #1
  4014ae:	f04f 0101 	mov.w	r1, #1
  4014b2:	4628      	mov	r0, r5
  4014b4:	bf0c      	ite	eq
  4014b6:	4b82      	ldreq	r3, [pc, #520]	; (4016c0 <lv_obj_event+0x2b0>)
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
  4014b8:	4b82      	ldrne	r3, [pc, #520]	; (4016c4 <lv_obj_event+0x2b4>)
  4014ba:	4798      	blx	r3
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
  4014bc:	2200      	movs	r2, #0
  4014be:	211c      	movs	r1, #28
  4014c0:	4628      	mov	r0, r5
  4014c2:	4b83      	ldr	r3, [pc, #524]	; (4016d0 <lv_obj_event+0x2c0>)
  4014c4:	4798      	blx	r3
  4014c6:	e7e8      	b.n	40149a <lv_obj_event+0x8a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  4014c8:	2120      	movs	r1, #32
  4014ca:	4b7e      	ldr	r3, [pc, #504]	; (4016c4 <lv_obj_event+0x2b4>)
  4014cc:	4798      	blx	r3
  4014ce:	e7e4      	b.n	40149a <lv_obj_event+0x8a>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  4014d0:	4b80      	ldr	r3, [pc, #512]	; (4016d4 <lv_obj_event+0x2c4>)
  4014d2:	4798      	blx	r3
        for(uint32_t i = 0; i < child_cnt; i++) {
  4014d4:	4606      	mov	r6, r0
  4014d6:	2800      	cmp	r0, #0
  4014d8:	d0df      	beq.n	40149a <lv_obj_event+0x8a>
  4014da:	2400      	movs	r4, #0
            lv_obj_mark_layout_as_dirty(child);
  4014dc:	4f7e      	ldr	r7, [pc, #504]	; (4016d8 <lv_obj_event+0x2c8>)
            lv_obj_t * child = obj->spec_attr->children[i];
  4014de:	68ab      	ldr	r3, [r5, #8]
  4014e0:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
  4014e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4014e6:	47b8      	blx	r7
        for(uint32_t i = 0; i < child_cnt; i++) {
  4014e8:	3401      	adds	r4, #1
  4014ea:	42a6      	cmp	r6, r4
  4014ec:	d1f7      	bne.n	4014de <lv_obj_event+0xce>
  4014ee:	e7d4      	b.n	40149a <lv_obj_event+0x8a>
    return (obj->flags & f)  == f ? true : false;
  4014f0:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
  4014f2:	f013 0f08 	tst.w	r3, #8
  4014f6:	d139      	bne.n	40156c <lv_obj_event+0x15c>
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) && !lv_obj_is_editable(obj)) {
  4014f8:	f013 0f10 	tst.w	r3, #16
  4014fc:	d0cd      	beq.n	40149a <lv_obj_event+0x8a>
  4014fe:	4b77      	ldr	r3, [pc, #476]	; (4016dc <lv_obj_event+0x2cc>)
  401500:	4798      	blx	r3
  401502:	2800      	cmp	r0, #0
  401504:	d1c9      	bne.n	40149a <lv_obj_event+0x8a>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
  401506:	4628      	mov	r0, r5
  401508:	4b75      	ldr	r3, [pc, #468]	; (4016e0 <lv_obj_event+0x2d0>)
  40150a:	4798      	blx	r3
  40150c:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
  40150e:	4628      	mov	r0, r5
  401510:	4b74      	ldr	r3, [pc, #464]	; (4016e4 <lv_obj_event+0x2d4>)
  401512:	4798      	blx	r3
  401514:	4604      	mov	r4, r0
            char c = *((char *)lv_event_get_param(e));
  401516:	4630      	mov	r0, r6
  401518:	4b6b      	ldr	r3, [pc, #428]	; (4016c8 <lv_obj_event+0x2b8>)
  40151a:	4798      	blx	r3
  40151c:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
  40151e:	2b12      	cmp	r3, #18
  401520:	d042      	beq.n	4015a8 <lv_obj_event+0x198>
            else if(c == LV_KEY_UP) {
  401522:	2b11      	cmp	r3, #17
  401524:	d053      	beq.n	4015ce <lv_obj_event+0x1be>
            else if(c == LV_KEY_RIGHT) {
  401526:	2b13      	cmp	r3, #19
  401528:	d064      	beq.n	4015f4 <lv_obj_event+0x1e4>
            else if(c == LV_KEY_LEFT) {
  40152a:	2b14      	cmp	r3, #20
  40152c:	d1b5      	bne.n	40149a <lv_obj_event+0x8a>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
  40152e:	4628      	mov	r0, r5
  401530:	4b6d      	ldr	r3, [pc, #436]	; (4016e8 <lv_obj_event+0x2d8>)
  401532:	4798      	blx	r3
  401534:	f010 0f03 	tst.w	r0, #3
  401538:	d005      	beq.n	401546 <lv_obj_event+0x136>
  40153a:	2f00      	cmp	r7, #0
  40153c:	f300 8088 	bgt.w	401650 <lv_obj_event+0x240>
  401540:	2c00      	cmp	r4, #0
  401542:	f300 8085 	bgt.w	401650 <lv_obj_event+0x240>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
  401546:	4628      	mov	r0, r5
  401548:	4b68      	ldr	r3, [pc, #416]	; (4016ec <lv_obj_event+0x2dc>)
  40154a:	4798      	blx	r3
  40154c:	4604      	mov	r4, r0
  40154e:	4628      	mov	r0, r5
  401550:	4b67      	ldr	r3, [pc, #412]	; (4016f0 <lv_obj_event+0x2e0>)
  401552:	4798      	blx	r3
  401554:	4601      	mov	r1, r0
  401556:	2800      	cmp	r0, #0
  401558:	bfb8      	it	lt
  40155a:	1cc1      	addlt	r1, r0, #3
  40155c:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
  401560:	2200      	movs	r2, #0
  401562:	b209      	sxth	r1, r1
  401564:	4628      	mov	r0, r5
  401566:	4b63      	ldr	r3, [pc, #396]	; (4016f4 <lv_obj_event+0x2e4>)
  401568:	4798      	blx	r3
  40156a:	e796      	b.n	40149a <lv_obj_event+0x8a>
            char c = *((char *)lv_event_get_param(e));
  40156c:	4630      	mov	r0, r6
  40156e:	4b56      	ldr	r3, [pc, #344]	; (4016c8 <lv_obj_event+0x2b8>)
  401570:	4798      	blx	r3
  401572:	7804      	ldrb	r4, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
  401574:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
  401578:	2b11      	cmp	r3, #17
  40157a:	d00b      	beq.n	401594 <lv_obj_event+0x184>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
  40157c:	2c14      	cmp	r4, #20
  40157e:	d00e      	beq.n	40159e <lv_obj_event+0x18e>
  401580:	2c12      	cmp	r4, #18
  401582:	d00c      	beq.n	40159e <lv_obj_event+0x18e>
            if(c != LV_KEY_ENTER) {
  401584:	2c0a      	cmp	r4, #10
  401586:	d088      	beq.n	40149a <lv_obj_event+0x8a>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
  401588:	2200      	movs	r2, #0
  40158a:	211c      	movs	r1, #28
  40158c:	4628      	mov	r0, r5
  40158e:	4b50      	ldr	r3, [pc, #320]	; (4016d0 <lv_obj_event+0x2c0>)
  401590:	4798      	blx	r3
  401592:	e782      	b.n	40149a <lv_obj_event+0x8a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
  401594:	2101      	movs	r1, #1
  401596:	4628      	mov	r0, r5
  401598:	4b49      	ldr	r3, [pc, #292]	; (4016c0 <lv_obj_event+0x2b0>)
  40159a:	4798      	blx	r3
  40159c:	e7f2      	b.n	401584 <lv_obj_event+0x174>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
  40159e:	2101      	movs	r1, #1
  4015a0:	4628      	mov	r0, r5
  4015a2:	4b48      	ldr	r3, [pc, #288]	; (4016c4 <lv_obj_event+0x2b4>)
  4015a4:	4798      	blx	r3
  4015a6:	e7ed      	b.n	401584 <lv_obj_event+0x174>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
  4015a8:	4628      	mov	r0, r5
  4015aa:	4b50      	ldr	r3, [pc, #320]	; (4016ec <lv_obj_event+0x2dc>)
  4015ac:	4798      	blx	r3
  4015ae:	4604      	mov	r4, r0
  4015b0:	4628      	mov	r0, r5
  4015b2:	4b4f      	ldr	r3, [pc, #316]	; (4016f0 <lv_obj_event+0x2e0>)
  4015b4:	4798      	blx	r3
  4015b6:	4601      	mov	r1, r0
  4015b8:	2800      	cmp	r0, #0
  4015ba:	bfb8      	it	lt
  4015bc:	1cc1      	addlt	r1, r0, #3
  4015be:	eb04 01a1 	add.w	r1, r4, r1, asr #2
  4015c2:	2200      	movs	r2, #0
  4015c4:	b209      	sxth	r1, r1
  4015c6:	4628      	mov	r0, r5
  4015c8:	4b4a      	ldr	r3, [pc, #296]	; (4016f4 <lv_obj_event+0x2e4>)
  4015ca:	4798      	blx	r3
  4015cc:	e765      	b.n	40149a <lv_obj_event+0x8a>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
  4015ce:	4628      	mov	r0, r5
  4015d0:	4b46      	ldr	r3, [pc, #280]	; (4016ec <lv_obj_event+0x2dc>)
  4015d2:	4798      	blx	r3
  4015d4:	4604      	mov	r4, r0
  4015d6:	4628      	mov	r0, r5
  4015d8:	4b45      	ldr	r3, [pc, #276]	; (4016f0 <lv_obj_event+0x2e0>)
  4015da:	4798      	blx	r3
  4015dc:	4601      	mov	r1, r0
  4015de:	2800      	cmp	r0, #0
  4015e0:	bfb8      	it	lt
  4015e2:	1cc1      	addlt	r1, r0, #3
  4015e4:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
  4015e8:	2200      	movs	r2, #0
  4015ea:	b209      	sxth	r1, r1
  4015ec:	4628      	mov	r0, r5
  4015ee:	4b41      	ldr	r3, [pc, #260]	; (4016f4 <lv_obj_event+0x2e4>)
  4015f0:	4798      	blx	r3
  4015f2:	e752      	b.n	40149a <lv_obj_event+0x8a>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
  4015f4:	4628      	mov	r0, r5
  4015f6:	4b3c      	ldr	r3, [pc, #240]	; (4016e8 <lv_obj_event+0x2d8>)
  4015f8:	4798      	blx	r3
  4015fa:	f010 0f03 	tst.w	r0, #3
  4015fe:	d003      	beq.n	401608 <lv_obj_event+0x1f8>
  401600:	2f00      	cmp	r7, #0
  401602:	dc14      	bgt.n	40162e <lv_obj_event+0x21e>
  401604:	2c00      	cmp	r4, #0
  401606:	dc12      	bgt.n	40162e <lv_obj_event+0x21e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
  401608:	4628      	mov	r0, r5
  40160a:	4b38      	ldr	r3, [pc, #224]	; (4016ec <lv_obj_event+0x2dc>)
  40160c:	4798      	blx	r3
  40160e:	4604      	mov	r4, r0
  401610:	4628      	mov	r0, r5
  401612:	4b37      	ldr	r3, [pc, #220]	; (4016f0 <lv_obj_event+0x2e0>)
  401614:	4798      	blx	r3
  401616:	4601      	mov	r1, r0
  401618:	2800      	cmp	r0, #0
  40161a:	bfb8      	it	lt
  40161c:	1cc1      	addlt	r1, r0, #3
  40161e:	eb04 01a1 	add.w	r1, r4, r1, asr #2
  401622:	2200      	movs	r2, #0
  401624:	b209      	sxth	r1, r1
  401626:	4628      	mov	r0, r5
  401628:	4b32      	ldr	r3, [pc, #200]	; (4016f4 <lv_obj_event+0x2e4>)
  40162a:	4798      	blx	r3
  40162c:	e735      	b.n	40149a <lv_obj_event+0x8a>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
  40162e:	4628      	mov	r0, r5
  401630:	4b31      	ldr	r3, [pc, #196]	; (4016f8 <lv_obj_event+0x2e8>)
  401632:	4798      	blx	r3
  401634:	4604      	mov	r4, r0
  401636:	4628      	mov	r0, r5
  401638:	4b30      	ldr	r3, [pc, #192]	; (4016fc <lv_obj_event+0x2ec>)
  40163a:	4798      	blx	r3
  40163c:	2304      	movs	r3, #4
  40163e:	fb90 f3f3 	sdiv	r3, r0, r3
  401642:	1919      	adds	r1, r3, r4
  401644:	2200      	movs	r2, #0
  401646:	b209      	sxth	r1, r1
  401648:	4628      	mov	r0, r5
  40164a:	4b2d      	ldr	r3, [pc, #180]	; (401700 <lv_obj_event+0x2f0>)
  40164c:	4798      	blx	r3
  40164e:	e724      	b.n	40149a <lv_obj_event+0x8a>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
  401650:	4628      	mov	r0, r5
  401652:	4b29      	ldr	r3, [pc, #164]	; (4016f8 <lv_obj_event+0x2e8>)
  401654:	4798      	blx	r3
  401656:	4604      	mov	r4, r0
  401658:	4628      	mov	r0, r5
  40165a:	4b28      	ldr	r3, [pc, #160]	; (4016fc <lv_obj_event+0x2ec>)
  40165c:	4798      	blx	r3
  40165e:	2304      	movs	r3, #4
  401660:	fb90 f3f3 	sdiv	r3, r0, r3
  401664:	1ae1      	subs	r1, r4, r3
  401666:	2200      	movs	r2, #0
  401668:	b209      	sxth	r1, r1
  40166a:	4628      	mov	r0, r5
  40166c:	4b24      	ldr	r3, [pc, #144]	; (401700 <lv_obj_event+0x2f0>)
  40166e:	4798      	blx	r3
  401670:	e713      	b.n	40149a <lv_obj_event+0x8a>
    return (obj->flags & f)  == f ? true : false;
  401672:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
  401674:	f413 7f00 	tst.w	r3, #512	; 0x200
  401678:	d112      	bne.n	4016a0 <lv_obj_event+0x290>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  40167a:	4628      	mov	r0, r5
  40167c:	4b21      	ldr	r3, [pc, #132]	; (401704 <lv_obj_event+0x2f4>)
  40167e:	4798      	blx	r3
  401680:	4b21      	ldr	r3, [pc, #132]	; (401708 <lv_obj_event+0x2f8>)
  401682:	4798      	blx	r3
  401684:	4604      	mov	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
  401686:	4b21      	ldr	r3, [pc, #132]	; (40170c <lv_obj_event+0x2fc>)
  401688:	4798      	blx	r3
        if(indev == NULL) indev = lv_event_get_indev(e);
  40168a:	4603      	mov	r3, r0
  40168c:	b160      	cbz	r0, 4016a8 <lv_obj_event+0x298>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  40168e:	4618      	mov	r0, r3
  401690:	4b1f      	ldr	r3, [pc, #124]	; (401710 <lv_obj_event+0x300>)
  401692:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
  401694:	2802      	cmp	r0, #2
  401696:	d041      	beq.n	40171c <lv_obj_event+0x30c>
  401698:	2804      	cmp	r0, #4
  40169a:	d03f      	beq.n	40171c <lv_obj_event+0x30c>
        lv_state_t state = LV_STATE_FOCUSED;
  40169c:	2102      	movs	r1, #2
  40169e:	e03e      	b.n	40171e <lv_obj_event+0x30e>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
  4016a0:	2101      	movs	r1, #1
  4016a2:	4b1c      	ldr	r3, [pc, #112]	; (401714 <lv_obj_event+0x304>)
  4016a4:	4798      	blx	r3
  4016a6:	e7e8      	b.n	40167a <lv_obj_event+0x26a>
        if(indev == NULL) indev = lv_event_get_indev(e);
  4016a8:	4630      	mov	r0, r6
  4016aa:	4b1b      	ldr	r3, [pc, #108]	; (401718 <lv_obj_event+0x308>)
  4016ac:	4798      	blx	r3
  4016ae:	4603      	mov	r3, r0
  4016b0:	e7ed      	b.n	40168e <lv_obj_event+0x27e>
  4016b2:	bf00      	nop
  4016b4:	004004d9 	.word	0x004004d9
  4016b8:	004004d5 	.word	0x004004d5
  4016bc:	00400a59 	.word	0x00400a59
  4016c0:	004013b9 	.word	0x004013b9
  4016c4:	004013cd 	.word	0x004013cd
  4016c8:	004004dd 	.word	0x004004dd
  4016cc:	00400a3d 	.word	0x00400a3d
  4016d0:	00400491 	.word	0x00400491
  4016d4:	00405e25 	.word	0x00405e25
  4016d8:	004021e1 	.word	0x004021e1
  4016dc:	00401ab5 	.word	0x00401ab5
  4016e0:	00403b41 	.word	0x00403b41
  4016e4:	00403c3d 	.word	0x00403c3d
  4016e8:	004039a9 	.word	0x004039a9
  4016ec:	00403a0d 	.word	0x00403a0d
  4016f0:	004022df 	.word	0x004022df
  4016f4:	00404289 	.word	0x00404289
  4016f8:	004039d9 	.word	0x004039d9
  4016fc:	004022d3 	.word	0x004022d3
  401700:	004041e9 	.word	0x004041e9
  401704:	00401403 	.word	0x00401403
  401708:	004009f5 	.word	0x004009f5
  40170c:	00400a05 	.word	0x00400a05
  401710:	00400a11 	.word	0x00400a11
  401714:	0040430d 	.word	0x0040430d
  401718:	004005c5 	.word	0x004005c5
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
  40171c:	2106      	movs	r1, #6
        if(editing) {
  40171e:	b12c      	cbz	r4, 40172c <lv_obj_event+0x31c>
            lv_obj_add_state(obj, state);
  401720:	f041 0108 	orr.w	r1, r1, #8
  401724:	4628      	mov	r0, r5
  401726:	4b41      	ldr	r3, [pc, #260]	; (40182c <lv_obj_event+0x41c>)
  401728:	4798      	blx	r3
  40172a:	e6b6      	b.n	40149a <lv_obj_event+0x8a>
            lv_obj_add_state(obj, state);
  40172c:	4628      	mov	r0, r5
  40172e:	4b3f      	ldr	r3, [pc, #252]	; (40182c <lv_obj_event+0x41c>)
  401730:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  401732:	2108      	movs	r1, #8
  401734:	4628      	mov	r0, r5
  401736:	4b3e      	ldr	r3, [pc, #248]	; (401830 <lv_obj_event+0x420>)
  401738:	4798      	blx	r3
  40173a:	e6ae      	b.n	40149a <lv_obj_event+0x8a>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
  40173c:	2140      	movs	r1, #64	; 0x40
  40173e:	4b3b      	ldr	r3, [pc, #236]	; (40182c <lv_obj_event+0x41c>)
  401740:	4798      	blx	r3
  401742:	e6aa      	b.n	40149a <lv_obj_event+0x8a>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
  401744:	2140      	movs	r1, #64	; 0x40
  401746:	4b3a      	ldr	r3, [pc, #232]	; (401830 <lv_obj_event+0x420>)
  401748:	4798      	blx	r3
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
  40174a:	4628      	mov	r0, r5
  40174c:	4b39      	ldr	r3, [pc, #228]	; (401834 <lv_obj_event+0x424>)
  40174e:	4798      	blx	r3
  401750:	2802      	cmp	r0, #2
  401752:	f47f aea2 	bne.w	40149a <lv_obj_event+0x8a>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
  401756:	aa02      	add	r2, sp, #8
  401758:	4669      	mov	r1, sp
  40175a:	4628      	mov	r0, r5
  40175c:	4b36      	ldr	r3, [pc, #216]	; (401838 <lv_obj_event+0x428>)
  40175e:	4798      	blx	r3
            lv_obj_invalidate_area(obj, &hor_area);
  401760:	4669      	mov	r1, sp
  401762:	4628      	mov	r0, r5
  401764:	4c35      	ldr	r4, [pc, #212]	; (40183c <lv_obj_event+0x42c>)
  401766:	47a0      	blx	r4
            lv_obj_invalidate_area(obj, &ver_area);
  401768:	a902      	add	r1, sp, #8
  40176a:	4628      	mov	r0, r5
  40176c:	47a0      	blx	r4
  40176e:	e694      	b.n	40149a <lv_obj_event+0x8a>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
  401770:	210e      	movs	r1, #14
  401772:	4b2f      	ldr	r3, [pc, #188]	; (401830 <lv_obj_event+0x420>)
  401774:	4798      	blx	r3
  401776:	e690      	b.n	40149a <lv_obj_event+0x8a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  401778:	f241 0209 	movw	r2, #4105	; 0x1009
  40177c:	2100      	movs	r1, #0
  40177e:	4c30      	ldr	r4, [pc, #192]	; (401840 <lv_obj_event+0x430>)
  401780:	47a0      	blx	r4
    return (lv_align_t)v.num;
  401782:	b2c6      	uxtb	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
  401784:	f241 0269 	movw	r2, #4201	; 0x1069
  401788:	2100      	movs	r1, #0
  40178a:	4628      	mov	r0, r5
  40178c:	47a0      	blx	r4
    return (uint16_t)v.num;
  40178e:	b280      	uxth	r0, r0
        if(layout || align) {
  401790:	b990      	cbnz	r0, 4017b8 <lv_obj_event+0x3a8>
  401792:	b98e      	cbnz	r6, 4017b8 <lv_obj_event+0x3a8>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  401794:	4628      	mov	r0, r5
  401796:	4b2b      	ldr	r3, [pc, #172]	; (401844 <lv_obj_event+0x434>)
  401798:	4798      	blx	r3
        for(i = 0; i < child_cnt; i++) {
  40179a:	4606      	mov	r6, r0
  40179c:	2800      	cmp	r0, #0
  40179e:	f43f ae7c 	beq.w	40149a <lv_obj_event+0x8a>
  4017a2:	2400      	movs	r4, #0
            lv_obj_mark_layout_as_dirty(child);
  4017a4:	4f28      	ldr	r7, [pc, #160]	; (401848 <lv_obj_event+0x438>)
            lv_obj_t * child = obj->spec_attr->children[i];
  4017a6:	68ab      	ldr	r3, [r5, #8]
  4017a8:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
  4017aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4017ae:	47b8      	blx	r7
        for(i = 0; i < child_cnt; i++) {
  4017b0:	3401      	adds	r4, #1
  4017b2:	42a6      	cmp	r6, r4
  4017b4:	d1f7      	bne.n	4017a6 <lv_obj_event+0x396>
  4017b6:	e670      	b.n	40149a <lv_obj_event+0x8a>
            lv_obj_mark_layout_as_dirty(obj);
  4017b8:	4628      	mov	r0, r5
  4017ba:	4b23      	ldr	r3, [pc, #140]	; (401848 <lv_obj_event+0x438>)
  4017bc:	4798      	blx	r3
  4017be:	e7e9      	b.n	401794 <lv_obj_event+0x384>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  4017c0:	f241 0201 	movw	r2, #4097	; 0x1001
  4017c4:	2100      	movs	r1, #0
  4017c6:	4c1e      	ldr	r4, [pc, #120]	; (401840 <lv_obj_event+0x430>)
  4017c8:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  4017ca:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  4017cc:	f241 0204 	movw	r2, #4100	; 0x1004
  4017d0:	2100      	movs	r1, #0
  4017d2:	4628      	mov	r0, r5
  4017d4:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  4017d6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  4017da:	f241 0209 	movw	r2, #4105	; 0x1009
  4017de:	2100      	movs	r1, #0
  4017e0:	4628      	mov	r0, r5
  4017e2:	47a0      	blx	r4
    return (lv_align_t)v.num;
  4017e4:	b2c6      	uxtb	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
  4017e6:	f241 0269 	movw	r2, #4201	; 0x1069
  4017ea:	2100      	movs	r1, #0
  4017ec:	4628      	mov	r0, r5
  4017ee:	47a0      	blx	r4
    return (uint16_t)v.num;
  4017f0:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
  4017f2:	b938      	cbnz	r0, 401804 <lv_obj_event+0x3f4>
  4017f4:	b936      	cbnz	r6, 401804 <lv_obj_event+0x3f4>
  4017f6:	f242 73d1 	movw	r3, #10193	; 0x27d1
  4017fa:	429f      	cmp	r7, r3
  4017fc:	d002      	beq.n	401804 <lv_obj_event+0x3f4>
  4017fe:	4598      	cmp	r8, r3
  401800:	f47f ae4b 	bne.w	40149a <lv_obj_event+0x8a>
            lv_obj_mark_layout_as_dirty(obj);
  401804:	4628      	mov	r0, r5
  401806:	4b10      	ldr	r3, [pc, #64]	; (401848 <lv_obj_event+0x438>)
  401808:	4798      	blx	r3
  40180a:	e646      	b.n	40149a <lv_obj_event+0x8a>
        lv_coord_t * s = lv_event_get_param(e);
  40180c:	4630      	mov	r0, r6
  40180e:	4b0f      	ldr	r3, [pc, #60]	; (40184c <lv_obj_event+0x43c>)
  401810:	4798      	blx	r3
  401812:	4604      	mov	r4, r0
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
  401814:	2100      	movs	r1, #0
  401816:	4628      	mov	r0, r5
  401818:	4b0d      	ldr	r3, [pc, #52]	; (401850 <lv_obj_event+0x440>)
  40181a:	4798      	blx	r3
        *s = LV_MAX(*s, d);
  40181c:	f9b4 3000 	ldrsh.w	r3, [r4]
  401820:	4298      	cmp	r0, r3
  401822:	bfb8      	it	lt
  401824:	4618      	movlt	r0, r3
  401826:	8020      	strh	r0, [r4, #0]
  401828:	e637      	b.n	40149a <lv_obj_event+0x8a>
  40182a:	bf00      	nop
  40182c:	004013b9 	.word	0x004013b9
  401830:	004013cd 	.word	0x004013cd
  401834:	00403999 	.word	0x00403999
  401838:	00404361 	.word	0x00404361
  40183c:	004025e9 	.word	0x004025e9
  401840:	00404f1d 	.word	0x00404f1d
  401844:	00405e25 	.word	0x00405e25
  401848:	004021e1 	.word	0x004021e1
  40184c:	004004dd 	.word	0x004004dd
  401850:	00401f19 	.word	0x00401f19

00401854 <lv_obj_destructor>:
{
  401854:	b538      	push	{r3, r4, r5, lr}
  401856:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
  401858:	4608      	mov	r0, r1
  40185a:	4b17      	ldr	r3, [pc, #92]	; (4018b8 <lv_obj_destructor+0x64>)
  40185c:	4798      	blx	r3
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
  40185e:	2000      	movs	r0, #0
  401860:	4d16      	ldr	r5, [pc, #88]	; (4018bc <lv_obj_destructor+0x68>)
  401862:	47a8      	blx	r5
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
  401864:	4a16      	ldr	r2, [pc, #88]	; (4018c0 <lv_obj_destructor+0x6c>)
  401866:	2100      	movs	r1, #0
  401868:	4620      	mov	r0, r4
  40186a:	4b16      	ldr	r3, [pc, #88]	; (4018c4 <lv_obj_destructor+0x70>)
  40186c:	4798      	blx	r3
    lv_obj_enable_style_refresh(true);
  40186e:	2001      	movs	r0, #1
  401870:	47a8      	blx	r5
    lv_anim_del(obj, NULL);
  401872:	2100      	movs	r1, #0
  401874:	4620      	mov	r0, r4
  401876:	4b14      	ldr	r3, [pc, #80]	; (4018c8 <lv_obj_destructor+0x74>)
  401878:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  40187a:	4620      	mov	r0, r4
  40187c:	4b13      	ldr	r3, [pc, #76]	; (4018cc <lv_obj_destructor+0x78>)
  40187e:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  401880:	b110      	cbz	r0, 401888 <lv_obj_destructor+0x34>
  401882:	4620      	mov	r0, r4
  401884:	4b12      	ldr	r3, [pc, #72]	; (4018d0 <lv_obj_destructor+0x7c>)
  401886:	4798      	blx	r3
    if(obj->spec_attr) {
  401888:	68a3      	ldr	r3, [r4, #8]
  40188a:	b19b      	cbz	r3, 4018b4 <lv_obj_destructor+0x60>
        if(obj->spec_attr->children) {
  40188c:	6818      	ldr	r0, [r3, #0]
  40188e:	b120      	cbz	r0, 40189a <lv_obj_destructor+0x46>
            lv_mem_free(obj->spec_attr->children);
  401890:	4b10      	ldr	r3, [pc, #64]	; (4018d4 <lv_obj_destructor+0x80>)
  401892:	4798      	blx	r3
            obj->spec_attr->children = NULL;
  401894:	68a3      	ldr	r3, [r4, #8]
  401896:	2200      	movs	r2, #0
  401898:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
  40189a:	68a3      	ldr	r3, [r4, #8]
  40189c:	68d8      	ldr	r0, [r3, #12]
  40189e:	b120      	cbz	r0, 4018aa <lv_obj_destructor+0x56>
            lv_mem_free(obj->spec_attr->event_dsc);
  4018a0:	4b0c      	ldr	r3, [pc, #48]	; (4018d4 <lv_obj_destructor+0x80>)
  4018a2:	4798      	blx	r3
            obj->spec_attr->event_dsc = NULL;
  4018a4:	68a3      	ldr	r3, [r4, #8]
  4018a6:	2200      	movs	r2, #0
  4018a8:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
  4018aa:	68a0      	ldr	r0, [r4, #8]
  4018ac:	4b09      	ldr	r3, [pc, #36]	; (4018d4 <lv_obj_destructor+0x80>)
  4018ae:	4798      	blx	r3
        obj->spec_attr = NULL;
  4018b0:	2300      	movs	r3, #0
  4018b2:	60a3      	str	r3, [r4, #8]
  4018b4:	bd38      	pop	{r3, r4, r5, pc}
  4018b6:	bf00      	nop
  4018b8:	004004e1 	.word	0x004004e1
  4018bc:	00404f11 	.word	0x00404f11
  4018c0:	000fffff 	.word	0x000fffff
  4018c4:	004052c5 	.word	0x004052c5
  4018c8:	00410511 	.word	0x00410511
  4018cc:	00401403 	.word	0x00401403
  4018d0:	00400911 	.word	0x00400911
  4018d4:	004110e1 	.word	0x004110e1

004018d8 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
  4018d8:	6883      	ldr	r3, [r0, #8]
  4018da:	b103      	cbz	r3, 4018de <lv_obj_allocate_spec_attr+0x6>
  4018dc:	4770      	bx	lr
{
  4018de:	b510      	push	{r4, lr}
  4018e0:	b084      	sub	sp, #16
  4018e2:	4604      	mov	r4, r0
        x++;
  4018e4:	4a12      	ldr	r2, [pc, #72]	; (401930 <lv_obj_allocate_spec_attr+0x58>)
  4018e6:	6813      	ldr	r3, [r2, #0]
  4018e8:	3301      	adds	r3, #1
  4018ea:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
  4018ec:	201c      	movs	r0, #28
  4018ee:	4b11      	ldr	r3, [pc, #68]	; (401934 <lv_obj_allocate_spec_attr+0x5c>)
  4018f0:	4798      	blx	r3
  4018f2:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
  4018f4:	b170      	cbz	r0, 401914 <lv_obj_allocate_spec_attr+0x3c>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
  4018f6:	211c      	movs	r1, #28
  4018f8:	4b0f      	ldr	r3, [pc, #60]	; (401938 <lv_obj_allocate_spec_attr+0x60>)
  4018fa:	4798      	blx	r3
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
  4018fc:	68a2      	ldr	r2, [r4, #8]
  4018fe:	7e53      	ldrb	r3, [r2, #25]
  401900:	f043 030f 	orr.w	r3, r3, #15
  401904:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
  401906:	68a2      	ldr	r2, [r4, #8]
  401908:	7e13      	ldrb	r3, [r2, #24]
  40190a:	f043 0303 	orr.w	r3, r3, #3
  40190e:	7613      	strb	r3, [r2, #24]
}
  401910:	b004      	add	sp, #16
  401912:	bd10      	pop	{r4, pc}
        LV_ASSERT_MALLOC(obj->spec_attr);
  401914:	4b09      	ldr	r3, [pc, #36]	; (40193c <lv_obj_allocate_spec_attr+0x64>)
  401916:	9302      	str	r3, [sp, #8]
  401918:	4b09      	ldr	r3, [pc, #36]	; (401940 <lv_obj_allocate_spec_attr+0x68>)
  40191a:	9301      	str	r3, [sp, #4]
  40191c:	4b09      	ldr	r3, [pc, #36]	; (401944 <lv_obj_allocate_spec_attr+0x6c>)
  40191e:	9300      	str	r3, [sp, #0]
  401920:	4b09      	ldr	r3, [pc, #36]	; (401948 <lv_obj_allocate_spec_attr+0x70>)
  401922:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  401926:	4909      	ldr	r1, [pc, #36]	; (40194c <lv_obj_allocate_spec_attr+0x74>)
  401928:	2003      	movs	r0, #3
  40192a:	4c09      	ldr	r4, [pc, #36]	; (401950 <lv_obj_allocate_spec_attr+0x78>)
  40192c:	47a0      	blx	r4
  40192e:	e7fe      	b.n	40192e <lv_obj_allocate_spec_attr+0x56>
  401930:	20400a14 	.word	0x20400a14
  401934:	004114b5 	.word	0x004114b5
  401938:	004116ed 	.word	0x004116ed
  40193c:	0041c064 	.word	0x0041c064
  401940:	0041c188 	.word	0x0041c188
  401944:	0041c098 	.word	0x0041c098
  401948:	0041c124 	.word	0x0041c124
  40194c:	0041c140 	.word	0x0041c140
  401950:	00410edd 	.word	0x00410edd

00401954 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
  401954:	b538      	push	{r3, r4, r5, lr}
  401956:	4604      	mov	r4, r0
    const lv_obj_class_t * original_class_p = obj->class_p;
  401958:	6805      	ldr	r5, [r0, #0]

    if(obj->class_p->base_class) {
  40195a:	682b      	ldr	r3, [r5, #0]
  40195c:	b113      	cbz	r3, 401964 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
  40195e:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
  401960:	f7ff fff8 	bl	401954 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
  401964:	6025      	str	r5, [r4, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
  401966:	686b      	ldr	r3, [r5, #4]
  401968:	b113      	cbz	r3, 401970 <lv_obj_construct+0x1c>
  40196a:	4621      	mov	r1, r4
  40196c:	4628      	mov	r0, r5
  40196e:	4798      	blx	r3
  401970:	bd38      	pop	{r3, r4, r5, pc}
	...

00401974 <lv_obj_class_create_obj>:
{
  401974:	b5f0      	push	{r4, r5, r6, r7, lr}
  401976:	b083      	sub	sp, #12
  401978:	460c      	mov	r4, r1

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
  40197a:	4607      	mov	r7, r0
  40197c:	2800      	cmp	r0, #0
  40197e:	d037      	beq.n	4019f0 <lv_obj_class_create_obj+0x7c>
  401980:	6982      	ldr	r2, [r0, #24]
  401982:	4b40      	ldr	r3, [pc, #256]	; (401a84 <lv_obj_class_create_obj+0x110>)
  401984:	4013      	ands	r3, r2
  401986:	2b00      	cmp	r3, #0
  401988:	d17a      	bne.n	401a80 <lv_obj_class_create_obj+0x10c>
  40198a:	4603      	mov	r3, r0
  40198c:	493d      	ldr	r1, [pc, #244]	; (401a84 <lv_obj_class_create_obj+0x110>)
  40198e:	681b      	ldr	r3, [r3, #0]
  401990:	2b00      	cmp	r3, #0
  401992:	d02f      	beq.n	4019f4 <lv_obj_class_create_obj+0x80>
  401994:	699a      	ldr	r2, [r3, #24]
  401996:	4211      	tst	r1, r2
  401998:	d0f9      	beq.n	40198e <lv_obj_class_create_obj+0x1a>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
  40199a:	699e      	ldr	r6, [r3, #24]
  40199c:	f3c6 160f 	ubfx	r6, r6, #4, #16
    lv_obj_t * obj = lv_mem_alloc(s);
  4019a0:	4630      	mov	r0, r6
  4019a2:	4b39      	ldr	r3, [pc, #228]	; (401a88 <lv_obj_class_create_obj+0x114>)
  4019a4:	4798      	blx	r3
    if(obj == NULL) return NULL;
  4019a6:	4605      	mov	r5, r0
  4019a8:	2800      	cmp	r0, #0
  4019aa:	d067      	beq.n	401a7c <lv_obj_class_create_obj+0x108>
    lv_memset_00(obj, s);
  4019ac:	4631      	mov	r1, r6
  4019ae:	4b37      	ldr	r3, [pc, #220]	; (401a8c <lv_obj_class_create_obj+0x118>)
  4019b0:	4798      	blx	r3
    obj->class_p = class_p;
  4019b2:	602f      	str	r7, [r5, #0]
    obj->parent = parent;
  4019b4:	606c      	str	r4, [r5, #4]
    if(parent == NULL) {
  4019b6:	b1fc      	cbz	r4, 4019f8 <lv_obj_class_create_obj+0x84>
        if(parent->spec_attr == NULL) {
  4019b8:	68a3      	ldr	r3, [r4, #8]
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	d04f      	beq.n	401a5e <lv_obj_class_create_obj+0xea>
        if(parent->spec_attr->children == NULL) {
  4019be:	68a6      	ldr	r6, [r4, #8]
  4019c0:	6833      	ldr	r3, [r6, #0]
  4019c2:	2b00      	cmp	r3, #0
  4019c4:	d04f      	beq.n	401a66 <lv_obj_class_create_obj+0xf2>
            parent->spec_attr->child_cnt++;
  4019c6:	6873      	ldr	r3, [r6, #4]
  4019c8:	3301      	adds	r3, #1
  4019ca:	6073      	str	r3, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
  4019cc:	68a6      	ldr	r6, [r4, #8]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
  4019ce:	6871      	ldr	r1, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
  4019d0:	0089      	lsls	r1, r1, #2
  4019d2:	6830      	ldr	r0, [r6, #0]
  4019d4:	4b2e      	ldr	r3, [pc, #184]	; (401a90 <lv_obj_class_create_obj+0x11c>)
  4019d6:	4798      	blx	r3
  4019d8:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
  4019da:	68a2      	ldr	r2, [r4, #8]
  4019dc:	6851      	ldr	r1, [r2, #4]
  4019de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  4019e2:	440b      	add	r3, r1
  4019e4:	6812      	ldr	r2, [r2, #0]
  4019e6:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
  4019ea:	4628      	mov	r0, r5
  4019ec:	b003      	add	sp, #12
  4019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(base && base->instance_size == 0) base = base->base_class;
  4019f0:	2600      	movs	r6, #0
  4019f2:	e7d5      	b.n	4019a0 <lv_obj_class_create_obj+0x2c>
  4019f4:	2600      	movs	r6, #0
  4019f6:	e7d3      	b.n	4019a0 <lv_obj_class_create_obj+0x2c>
        lv_disp_t * disp = lv_disp_get_default();
  4019f8:	4b26      	ldr	r3, [pc, #152]	; (401a94 <lv_obj_class_create_obj+0x120>)
  4019fa:	4798      	blx	r3
        if(!disp) {
  4019fc:	4604      	mov	r4, r0
  4019fe:	b1e0      	cbz	r0, 401a3a <lv_obj_class_create_obj+0xc6>
        if(disp->screens == NULL) {
  401a00:	68c0      	ldr	r0, [r0, #12]
  401a02:	b320      	cbz	r0, 401a4e <lv_obj_class_create_obj+0xda>
            disp->screen_cnt++;
  401a04:	6a61      	ldr	r1, [r4, #36]	; 0x24
  401a06:	3101      	adds	r1, #1
  401a08:	6261      	str	r1, [r4, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
  401a0a:	0089      	lsls	r1, r1, #2
  401a0c:	4b20      	ldr	r3, [pc, #128]	; (401a90 <lv_obj_class_create_obj+0x11c>)
  401a0e:	4798      	blx	r3
  401a10:	60e0      	str	r0, [r4, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
  401a12:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401a14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  401a18:	4413      	add	r3, r2
  401a1a:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        obj->coords.x1 = 0;
  401a1e:	2400      	movs	r4, #0
  401a20:	82ac      	strh	r4, [r5, #20]
        obj->coords.y1 = 0;
  401a22:	82ec      	strh	r4, [r5, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
  401a24:	4620      	mov	r0, r4
  401a26:	4b1c      	ldr	r3, [pc, #112]	; (401a98 <lv_obj_class_create_obj+0x124>)
  401a28:	4798      	blx	r3
  401a2a:	3801      	subs	r0, #1
  401a2c:	8328      	strh	r0, [r5, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
  401a2e:	4620      	mov	r0, r4
  401a30:	4b1a      	ldr	r3, [pc, #104]	; (401a9c <lv_obj_class_create_obj+0x128>)
  401a32:	4798      	blx	r3
  401a34:	3801      	subs	r0, #1
  401a36:	8368      	strh	r0, [r5, #26]
  401a38:	e7d7      	b.n	4019ea <lv_obj_class_create_obj+0x76>
            LV_LOG_WARN("No display created to so far. No place to assign the new screen");
  401a3a:	4b19      	ldr	r3, [pc, #100]	; (401aa0 <lv_obj_class_create_obj+0x12c>)
  401a3c:	9300      	str	r3, [sp, #0]
  401a3e:	4b19      	ldr	r3, [pc, #100]	; (401aa4 <lv_obj_class_create_obj+0x130>)
  401a40:	223a      	movs	r2, #58	; 0x3a
  401a42:	4919      	ldr	r1, [pc, #100]	; (401aa8 <lv_obj_class_create_obj+0x134>)
  401a44:	2002      	movs	r0, #2
  401a46:	4c19      	ldr	r4, [pc, #100]	; (401aac <lv_obj_class_create_obj+0x138>)
  401a48:	47a0      	blx	r4
            return NULL;
  401a4a:	2500      	movs	r5, #0
  401a4c:	e7cd      	b.n	4019ea <lv_obj_class_create_obj+0x76>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
  401a4e:	2004      	movs	r0, #4
  401a50:	4b0d      	ldr	r3, [pc, #52]	; (401a88 <lv_obj_class_create_obj+0x114>)
  401a52:	4798      	blx	r3
  401a54:	60e0      	str	r0, [r4, #12]
            disp->screens[0] = obj;
  401a56:	6005      	str	r5, [r0, #0]
            disp->screen_cnt = 1;
  401a58:	2301      	movs	r3, #1
  401a5a:	6263      	str	r3, [r4, #36]	; 0x24
  401a5c:	e7df      	b.n	401a1e <lv_obj_class_create_obj+0xaa>
            lv_obj_allocate_spec_attr(parent);
  401a5e:	4620      	mov	r0, r4
  401a60:	4b13      	ldr	r3, [pc, #76]	; (401ab0 <lv_obj_class_create_obj+0x13c>)
  401a62:	4798      	blx	r3
  401a64:	e7ab      	b.n	4019be <lv_obj_class_create_obj+0x4a>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
  401a66:	2004      	movs	r0, #4
  401a68:	4b07      	ldr	r3, [pc, #28]	; (401a88 <lv_obj_class_create_obj+0x114>)
  401a6a:	4798      	blx	r3
  401a6c:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[0] = obj;
  401a6e:	68a3      	ldr	r3, [r4, #8]
  401a70:	681b      	ldr	r3, [r3, #0]
  401a72:	601d      	str	r5, [r3, #0]
            parent->spec_attr->child_cnt = 1;
  401a74:	68a3      	ldr	r3, [r4, #8]
  401a76:	2201      	movs	r2, #1
  401a78:	605a      	str	r2, [r3, #4]
  401a7a:	e7b6      	b.n	4019ea <lv_obj_class_create_obj+0x76>
    if(obj == NULL) return NULL;
  401a7c:	2500      	movs	r5, #0
  401a7e:	e7b4      	b.n	4019ea <lv_obj_class_create_obj+0x76>
    const lv_obj_class_t * base = class_p;
  401a80:	4603      	mov	r3, r0
  401a82:	e78a      	b.n	40199a <lv_obj_class_create_obj+0x26>
  401a84:	000ffff0 	.word	0x000ffff0
  401a88:	004114b5 	.word	0x004114b5
  401a8c:	004116ed 	.word	0x004116ed
  401a90:	0041153d 	.word	0x0041153d
  401a94:	00410131 	.word	0x00410131
  401a98:	0041013d 	.word	0x0041013d
  401a9c:	0041016d 	.word	0x0041016d
  401aa0:	0041c208 	.word	0x0041c208
  401aa4:	0041c1bc 	.word	0x0041c1bc
  401aa8:	0041c1d4 	.word	0x0041c1d4
  401aac:	00410edd 	.word	0x00410edd
  401ab0:	004018d9 	.word	0x004018d9

00401ab4 <lv_obj_is_editable>:
    const lv_obj_class_t * class_p = obj->class_p;
  401ab4:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
  401ab6:	b18b      	cbz	r3, 401adc <lv_obj_is_editable+0x28>
  401ab8:	7e1a      	ldrb	r2, [r3, #24]
  401aba:	f012 0f03 	tst.w	r2, #3
  401abe:	d105      	bne.n	401acc <lv_obj_is_editable+0x18>
  401ac0:	681b      	ldr	r3, [r3, #0]
  401ac2:	b16b      	cbz	r3, 401ae0 <lv_obj_is_editable+0x2c>
  401ac4:	7e1a      	ldrb	r2, [r3, #24]
  401ac6:	f012 0f03 	tst.w	r2, #3
  401aca:	d0f9      	beq.n	401ac0 <lv_obj_is_editable+0xc>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
  401acc:	7e18      	ldrb	r0, [r3, #24]
  401ace:	f000 0003 	and.w	r0, r0, #3
  401ad2:	2801      	cmp	r0, #1
  401ad4:	bf14      	ite	ne
  401ad6:	2000      	movne	r0, #0
  401ad8:	2001      	moveq	r0, #1
}
  401ada:	4770      	bx	lr
    if(class_p == NULL) return false;
  401adc:	2000      	movs	r0, #0
  401ade:	4770      	bx	lr
  401ae0:	2000      	movs	r0, #0
  401ae2:	4770      	bx	lr

00401ae4 <lv_obj_is_group_def>:
    const lv_obj_class_t * class_p = obj->class_p;
  401ae4:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
  401ae6:	b18b      	cbz	r3, 401b0c <lv_obj_is_group_def+0x28>
  401ae8:	7e1a      	ldrb	r2, [r3, #24]
  401aea:	f012 0f0c 	tst.w	r2, #12
  401aee:	d105      	bne.n	401afc <lv_obj_is_group_def+0x18>
  401af0:	681b      	ldr	r3, [r3, #0]
  401af2:	b16b      	cbz	r3, 401b10 <lv_obj_is_group_def+0x2c>
  401af4:	7e1a      	ldrb	r2, [r3, #24]
  401af6:	f012 0f0c 	tst.w	r2, #12
  401afa:	d0f9      	beq.n	401af0 <lv_obj_is_group_def+0xc>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
  401afc:	7e18      	ldrb	r0, [r3, #24]
  401afe:	f000 000c 	and.w	r0, r0, #12
  401b02:	2804      	cmp	r0, #4
  401b04:	bf14      	ite	ne
  401b06:	2000      	movne	r0, #0
  401b08:	2001      	moveq	r0, #1
}
  401b0a:	4770      	bx	lr
    if(class_p == NULL) return false;
  401b0c:	2000      	movs	r0, #0
  401b0e:	4770      	bx	lr
  401b10:	2000      	movs	r0, #0
  401b12:	4770      	bx	lr

00401b14 <lv_obj_class_init_obj>:
{
  401b14:	b570      	push	{r4, r5, r6, lr}
  401b16:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
  401b18:	4b1a      	ldr	r3, [pc, #104]	; (401b84 <lv_obj_class_init_obj+0x70>)
  401b1a:	4798      	blx	r3
    lv_obj_enable_style_refresh(false);
  401b1c:	2000      	movs	r0, #0
  401b1e:	4d1a      	ldr	r5, [pc, #104]	; (401b88 <lv_obj_class_init_obj+0x74>)
  401b20:	47a8      	blx	r5
    lv_theme_apply(obj);
  401b22:	4620      	mov	r0, r4
  401b24:	4b19      	ldr	r3, [pc, #100]	; (401b8c <lv_obj_class_init_obj+0x78>)
  401b26:	4798      	blx	r3
    lv_obj_construct(obj);
  401b28:	4620      	mov	r0, r4
  401b2a:	4b19      	ldr	r3, [pc, #100]	; (401b90 <lv_obj_class_init_obj+0x7c>)
  401b2c:	4798      	blx	r3
    lv_obj_enable_style_refresh(true);
  401b2e:	2001      	movs	r0, #1
  401b30:	47a8      	blx	r5
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
  401b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401b36:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
  401b3a:	4620      	mov	r0, r4
  401b3c:	4b15      	ldr	r3, [pc, #84]	; (401b94 <lv_obj_class_init_obj+0x80>)
  401b3e:	4798      	blx	r3
    lv_obj_refresh_self_size(obj);
  401b40:	4620      	mov	r0, r4
  401b42:	4b15      	ldr	r3, [pc, #84]	; (401b98 <lv_obj_class_init_obj+0x84>)
  401b44:	4798      	blx	r3
    lv_group_t * def_group = lv_group_get_default();
  401b46:	4b15      	ldr	r3, [pc, #84]	; (401b9c <lv_obj_class_init_obj+0x88>)
  401b48:	4798      	blx	r3
    if(def_group && lv_obj_is_group_def(obj)) {
  401b4a:	b120      	cbz	r0, 401b56 <lv_obj_class_init_obj+0x42>
  401b4c:	4605      	mov	r5, r0
  401b4e:	4620      	mov	r0, r4
  401b50:	4b13      	ldr	r3, [pc, #76]	; (401ba0 <lv_obj_class_init_obj+0x8c>)
  401b52:	4798      	blx	r3
  401b54:	b980      	cbnz	r0, 401b78 <lv_obj_class_init_obj+0x64>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  401b56:	4620      	mov	r0, r4
  401b58:	4b12      	ldr	r3, [pc, #72]	; (401ba4 <lv_obj_class_init_obj+0x90>)
  401b5a:	4798      	blx	r3
    if(parent) {
  401b5c:	4605      	mov	r5, r0
  401b5e:	b150      	cbz	r0, 401b76 <lv_obj_class_init_obj+0x62>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
  401b60:	4622      	mov	r2, r4
  401b62:	2122      	movs	r1, #34	; 0x22
  401b64:	4e10      	ldr	r6, [pc, #64]	; (401ba8 <lv_obj_class_init_obj+0x94>)
  401b66:	47b0      	blx	r6
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
  401b68:	4622      	mov	r2, r4
  401b6a:	2123      	movs	r1, #35	; 0x23
  401b6c:	4628      	mov	r0, r5
  401b6e:	47b0      	blx	r6
        lv_obj_invalidate(obj);
  401b70:	4620      	mov	r0, r4
  401b72:	4b0e      	ldr	r3, [pc, #56]	; (401bac <lv_obj_class_init_obj+0x98>)
  401b74:	4798      	blx	r3
  401b76:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_add_obj(def_group, obj);
  401b78:	4621      	mov	r1, r4
  401b7a:	4628      	mov	r0, r5
  401b7c:	4b0c      	ldr	r3, [pc, #48]	; (401bb0 <lv_obj_class_init_obj+0x9c>)
  401b7e:	4798      	blx	r3
  401b80:	e7e9      	b.n	401b56 <lv_obj_class_init_obj+0x42>
  401b82:	bf00      	nop
  401b84:	004021e1 	.word	0x004021e1
  401b88:	00404f11 	.word	0x00404f11
  401b8c:	00405f91 	.word	0x00405f91
  401b90:	00401955 	.word	0x00401955
  401b94:	00405101 	.word	0x00405101
  401b98:	00402431 	.word	0x00402431
  401b9c:	004007dd 	.word	0x004007dd
  401ba0:	00401ae5 	.word	0x00401ae5
  401ba4:	00405ded 	.word	0x00405ded
  401ba8:	00400491 	.word	0x00400491
  401bac:	0040262d 	.word	0x0040262d
  401bb0:	00400849 	.word	0x00400849

00401bb4 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
  401bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401bb8:	4606      	mov	r6, r0
  401bba:	460d      	mov	r5, r1
  401bbc:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
  401bbe:	2260      	movs	r2, #96	; 0x60
  401bc0:	4ba9      	ldr	r3, [pc, #676]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401bc2:	4798      	blx	r3

#if LV_DRAW_COMPLEX
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  401bc4:	8020      	strh	r0, [r4, #0]

    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
  401bc6:	2d00      	cmp	r5, #0
  401bc8:	d161      	bne.n	401c8e <lv_obj_init_draw_rect_dsc+0xda>
  401bca:	f04f 08ff 	mov.w	r8, #255	; 0xff
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
  401bce:	f240 4262 	movw	r2, #1122	; 0x462
  401bd2:	4629      	mov	r1, r5
  401bd4:	4630      	mov	r0, r6
  401bd6:	4ba4      	ldr	r3, [pc, #656]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401bd8:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401bda:	b2c7      	uxtb	r7, r0
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
  401bdc:	2f02      	cmp	r7, #2
  401bde:	d95f      	bls.n	401ca0 <lv_obj_init_draw_rect_dsc+0xec>
  401be0:	f1b8 0f02 	cmp.w	r8, #2
  401be4:	d95c      	bls.n	401ca0 <lv_obj_init_draw_rect_dsc+0xec>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
  401be6:	2268      	movs	r2, #104	; 0x68
  401be8:	4629      	mov	r1, r5
  401bea:	4630      	mov	r0, r6
  401bec:	4b9e      	ldr	r3, [pc, #632]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401bee:	4798      	blx	r3
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
        draw_dsc->outline_opa = LV_OPA_TRANSP;
        return;
    }

    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
  401bf0:	70a0      	strb	r0, [r4, #2]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  401bf2:	7aa3      	ldrb	r3, [r4, #10]
  401bf4:	2b00      	cmp	r3, #0
  401bf6:	d15c      	bne.n	401cb2 <lv_obj_init_draw_rect_dsc+0xfe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  401bf8:	f241 0232 	movw	r2, #4146	; 0x1032
  401bfc:	4629      	mov	r1, r5
  401bfe:	4630      	mov	r0, r6
  401c00:	4b99      	ldr	r3, [pc, #612]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401c02:	4798      	blx	r3
    return (lv_coord_t)v.num;
  401c04:	b200      	sxth	r0, r0
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  401c06:	83a0      	strh	r0, [r4, #28]
    if(draw_dsc->border_width) {
  401c08:	b110      	cbz	r0, 401c10 <lv_obj_init_draw_rect_dsc+0x5c>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  401c0a:	7fa3      	ldrb	r3, [r4, #30]
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	d17e      	bne.n	401d0e <lv_obj_init_draw_rect_dsc+0x15a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
  401c10:	f640 023a 	movw	r2, #2106	; 0x83a
  401c14:	4629      	mov	r1, r5
  401c16:	4630      	mov	r0, r6
  401c18:	4b93      	ldr	r3, [pc, #588]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401c1a:	4798      	blx	r3
    return (lv_coord_t)v.num;
  401c1c:	b200      	sxth	r0, r0
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  401c1e:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->outline_width) {
  401c20:	b120      	cbz	r0, 401c2c <lv_obj_init_draw_rect_dsc+0x78>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  401c22:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
  401c26:	2b00      	cmp	r3, #0
  401c28:	f040 808d 	bne.w	401d46 <lv_obj_init_draw_rect_dsc+0x192>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
  401c2c:	7da3      	ldrb	r3, [r4, #22]
  401c2e:	2b00      	cmp	r3, #0
  401c30:	f040 80a4 	bne.w	401d7c <lv_obj_init_draw_rect_dsc+0x1c8>
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
  401c34:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  401c38:	2b00      	cmp	r3, #0
  401c3a:	f040 80dd 	bne.w	401df8 <lv_obj_init_draw_rect_dsc+0x244>
                }
            }
        }
    }

    if(main_opa < LV_OPA_MAX) {
  401c3e:	f1b8 0ffc 	cmp.w	r8, #252	; 0xfc
  401c42:	d803      	bhi.n	401c4c <lv_obj_init_draw_rect_dsc+0x98>
        opa = (uint16_t)((uint16_t) main_opa * opa) >> 8;
  401c44:	fb08 f707 	mul.w	r7, r8, r7
  401c48:	f3c7 2707 	ubfx	r7, r7, #8, #8
    }

    if(opa < LV_OPA_MAX) {
  401c4c:	2ffc      	cmp	r7, #252	; 0xfc
  401c4e:	d81c      	bhi.n	401c8a <lv_obj_init_draw_rect_dsc+0xd6>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
  401c50:	b2bf      	uxth	r7, r7
  401c52:	7aa3      	ldrb	r3, [r4, #10]
  401c54:	fb13 f307 	smulbb	r3, r3, r7
  401c58:	f3c3 2307 	ubfx	r3, r3, #8, #8
  401c5c:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa) >> 8;
  401c5e:	7fa3      	ldrb	r3, [r4, #30]
  401c60:	fb13 f307 	smulbb	r3, r3, r7
  401c64:	f3c3 2307 	ubfx	r3, r3, #8, #8
  401c68:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
  401c6a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  401c6e:	fb13 f307 	smulbb	r3, r3, r7
  401c72:	f3c3 2307 	ubfx	r3, r3, #8, #8
  401c76:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
  401c7a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
  401c7e:	fb13 f707 	smulbb	r7, r3, r7
  401c82:	f3c7 2707 	ubfx	r7, r7, #8, #8
  401c86:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
  401c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
  401c8e:	f240 4262 	movw	r2, #1122	; 0x462
  401c92:	4629      	mov	r1, r5
  401c94:	4630      	mov	r0, r6
  401c96:	4b74      	ldr	r3, [pc, #464]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401c98:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401c9a:	fa5f f880 	uxtb.w	r8, r0
  401c9e:	e796      	b.n	401bce <lv_obj_init_draw_rect_dsc+0x1a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  401ca0:	2300      	movs	r3, #0
  401ca2:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  401ca4:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  401ca6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = LV_OPA_TRANSP;
  401caa:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        return;
  401cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
  401cb2:	2221      	movs	r2, #33	; 0x21
  401cb4:	4629      	mov	r1, r5
  401cb6:	4630      	mov	r0, r6
  401cb8:	4b6b      	ldr	r3, [pc, #428]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401cba:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401cbc:	b2c0      	uxtb	r0, r0
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  401cbe:	72a0      	strb	r0, [r4, #10]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  401cc0:	2802      	cmp	r0, #2
  401cc2:	d999      	bls.n	401bf8 <lv_obj_init_draw_rect_dsc+0x44>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR_FILTERED);
  401cc4:	f244 0220 	movw	r2, #16416	; 0x4020
  401cc8:	4629      	mov	r1, r5
  401cca:	4630      	mov	r0, r6
  401ccc:	f8df 9198 	ldr.w	r9, [pc, #408]	; 401e68 <lv_obj_init_draw_rect_dsc+0x2b4>
  401cd0:	47c8      	blx	r9
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
  401cd2:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
  401cd4:	2223      	movs	r2, #35	; 0x23
  401cd6:	4629      	mov	r1, r5
  401cd8:	4630      	mov	r0, r6
  401cda:	47c8      	blx	r9
    return (lv_grad_dir_t)v.num;
  401cdc:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  401cde:	7ae3      	ldrb	r3, [r4, #11]
  401ce0:	f360 0302 	bfi	r3, r0, #0, #3
  401ce4:	72e3      	strb	r3, [r4, #11]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  401ce6:	f013 0f07 	tst.w	r3, #7
  401cea:	d085      	beq.n	401bf8 <lv_obj_init_draw_rect_dsc+0x44>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR_FILTERED);
  401cec:	f244 0222 	movw	r2, #16418	; 0x4022
  401cf0:	4629      	mov	r1, r5
  401cf2:	4630      	mov	r0, r6
  401cf4:	47c8      	blx	r9
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
  401cf6:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
  401cf8:	2224      	movs	r2, #36	; 0x24
  401cfa:	4629      	mov	r1, r5
  401cfc:	4630      	mov	r0, r6
  401cfe:	47c8      	blx	r9
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  401d00:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
  401d02:	2225      	movs	r2, #37	; 0x25
  401d04:	4629      	mov	r1, r5
  401d06:	4630      	mov	r0, r6
  401d08:	47c8      	blx	r9
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  401d0a:	7260      	strb	r0, [r4, #9]
  401d0c:	e774      	b.n	401bf8 <lv_obj_init_draw_rect_dsc+0x44>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
  401d0e:	2231      	movs	r2, #49	; 0x31
  401d10:	4629      	mov	r1, r5
  401d12:	4630      	mov	r0, r6
  401d14:	4b54      	ldr	r3, [pc, #336]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401d16:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401d18:	b2c0      	uxtb	r0, r0
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  401d1a:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  401d1c:	2802      	cmp	r0, #2
  401d1e:	f67f af77 	bls.w	401c10 <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
  401d22:	2233      	movs	r2, #51	; 0x33
  401d24:	4629      	mov	r1, r5
  401d26:	4630      	mov	r0, r6
  401d28:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401e68 <lv_obj_init_draw_rect_dsc+0x2b4>
  401d2c:	47c8      	blx	r9
    return (lv_border_side_t)v.num;
  401d2e:	b2c0      	uxtb	r0, r0
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  401d30:	7fe3      	ldrb	r3, [r4, #31]
  401d32:	f360 0345 	bfi	r3, r0, #1, #5
  401d36:	77e3      	strb	r3, [r4, #31]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR_FILTERED);
  401d38:	f244 0230 	movw	r2, #16432	; 0x4030
  401d3c:	4629      	mov	r1, r5
  401d3e:	4630      	mov	r0, r6
  401d40:	47c8      	blx	r9
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
  401d42:	8360      	strh	r0, [r4, #26]
  401d44:	e764      	b.n	401c10 <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
  401d46:	f640 023c 	movw	r2, #2108	; 0x83c
  401d4a:	4629      	mov	r1, r5
  401d4c:	4630      	mov	r0, r6
  401d4e:	4b46      	ldr	r3, [pc, #280]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401d50:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401d52:	b2c0      	uxtb	r0, r0
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  401d54:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  401d58:	2802      	cmp	r0, #2
  401d5a:	f67f af67 	bls.w	401c2c <lv_obj_init_draw_rect_dsc+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
  401d5e:	f640 023d 	movw	r2, #2109	; 0x83d
  401d62:	4629      	mov	r1, r5
  401d64:	4630      	mov	r0, r6
  401d66:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401e68 <lv_obj_init_draw_rect_dsc+0x2b4>
  401d6a:	47c8      	blx	r9
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  401d6c:	84a0      	strh	r0, [r4, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR_FILTERED);
  401d6e:	f244 023b 	movw	r2, #16443	; 0x403b
  401d72:	4629      	mov	r1, r5
  401d74:	4630      	mov	r0, r6
  401d76:	47c8      	blx	r9
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
  401d78:	8420      	strh	r0, [r4, #32]
  401d7a:	e757      	b.n	401c2c <lv_obj_init_draw_rect_dsc+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
  401d7c:	f640 0226 	movw	r2, #2086	; 0x826
  401d80:	4629      	mov	r1, r5
  401d82:	4630      	mov	r0, r6
  401d84:	4b38      	ldr	r3, [pc, #224]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401d86:	4798      	blx	r3
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
  401d88:	60e0      	str	r0, [r4, #12]
        if(draw_dsc->bg_img_src) {
  401d8a:	2800      	cmp	r0, #0
  401d8c:	f43f af52 	beq.w	401c34 <lv_obj_init_draw_rect_dsc+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
  401d90:	2227      	movs	r2, #39	; 0x27
  401d92:	4629      	mov	r1, r5
  401d94:	4630      	mov	r0, r6
  401d96:	4b34      	ldr	r3, [pc, #208]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401d98:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401d9a:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
  401d9c:	75a0      	strb	r0, [r4, #22]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
  401d9e:	2802      	cmp	r0, #2
  401da0:	f67f af48 	bls.w	401c34 <lv_obj_init_draw_rect_dsc+0x80>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
  401da4:	68e0      	ldr	r0, [r4, #12]
  401da6:	4b31      	ldr	r3, [pc, #196]	; (401e6c <lv_obj_init_draw_rect_dsc+0x2b8>)
  401da8:	4798      	blx	r3
  401daa:	2802      	cmp	r0, #2
  401dac:	d015      	beq.n	401dda <lv_obj_init_draw_rect_dsc+0x226>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_FILTERED);
  401dae:	f244 0228 	movw	r2, #16424	; 0x4028
  401db2:	4629      	mov	r1, r5
  401db4:	4630      	mov	r0, r6
  401db6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 401e68 <lv_obj_init_draw_rect_dsc+0x2b4>
  401dba:	47c8      	blx	r9
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
  401dbc:	82a0      	strh	r0, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
  401dbe:	2229      	movs	r2, #41	; 0x29
  401dc0:	4629      	mov	r1, r5
  401dc2:	4630      	mov	r0, r6
  401dc4:	47c8      	blx	r9
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
  401dc6:	75e0      	strb	r0, [r4, #23]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
  401dc8:	222a      	movs	r2, #42	; 0x2a
  401dca:	4629      	mov	r1, r5
  401dcc:	4630      	mov	r0, r6
  401dce:	47c8      	blx	r9
    return (bool)v.num;
  401dd0:	3000      	adds	r0, #0
  401dd2:	bf18      	it	ne
  401dd4:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
  401dd6:	7620      	strb	r0, [r4, #24]
  401dd8:	e72c      	b.n	401c34 <lv_obj_init_draw_rect_dsc+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
  401dda:	f241 4259 	movw	r2, #5209	; 0x1459
  401dde:	4629      	mov	r1, r5
  401de0:	4630      	mov	r0, r6
  401de2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401e68 <lv_obj_init_draw_rect_dsc+0x2b4>
  401de6:	47c8      	blx	r9
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
  401de8:	6120      	str	r0, [r4, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
  401dea:	f244 4257 	movw	r2, #17495	; 0x4457
  401dee:	4629      	mov	r1, r5
  401df0:	4630      	mov	r0, r6
  401df2:	47c8      	blx	r9
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
  401df4:	82a0      	strh	r0, [r4, #20]
  401df6:	e71d      	b.n	401c34 <lv_obj_init_draw_rect_dsc+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
  401df8:	f44f 6204 	mov.w	r2, #2112	; 0x840
  401dfc:	4629      	mov	r1, r5
  401dfe:	4630      	mov	r0, r6
  401e00:	4b19      	ldr	r3, [pc, #100]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401e02:	4798      	blx	r3
    return (lv_coord_t)v.num;
  401e04:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  401e06:	8560      	strh	r0, [r4, #42]	; 0x2a
        if(draw_dsc->shadow_width) {
  401e08:	2800      	cmp	r0, #0
  401e0a:	f43f af18 	beq.w	401c3e <lv_obj_init_draw_rect_dsc+0x8a>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  401e0e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  401e12:	2b02      	cmp	r3, #2
  401e14:	f67f af13 	bls.w	401c3e <lv_obj_init_draw_rect_dsc+0x8a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
  401e18:	f640 0245 	movw	r2, #2117	; 0x845
  401e1c:	4629      	mov	r1, r5
  401e1e:	4630      	mov	r0, r6
  401e20:	4b11      	ldr	r3, [pc, #68]	; (401e68 <lv_obj_init_draw_rect_dsc+0x2b4>)
  401e22:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401e24:	b2c0      	uxtb	r0, r0
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  401e26:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  401e2a:	2802      	cmp	r0, #2
  401e2c:	f67f af07 	bls.w	401c3e <lv_obj_init_draw_rect_dsc+0x8a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
  401e30:	f640 0241 	movw	r2, #2113	; 0x841
  401e34:	4629      	mov	r1, r5
  401e36:	4630      	mov	r0, r6
  401e38:	f8df 902c 	ldr.w	r9, [pc, #44]	; 401e68 <lv_obj_init_draw_rect_dsc+0x2b4>
  401e3c:	47c8      	blx	r9
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  401e3e:	85a0      	strh	r0, [r4, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
  401e40:	f640 0242 	movw	r2, #2114	; 0x842
  401e44:	4629      	mov	r1, r5
  401e46:	4630      	mov	r0, r6
  401e48:	47c8      	blx	r9
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  401e4a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
  401e4c:	f640 0243 	movw	r2, #2115	; 0x843
  401e50:	4629      	mov	r1, r5
  401e52:	4630      	mov	r0, r6
  401e54:	47c8      	blx	r9
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  401e56:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR_FILTERED);
  401e58:	f244 0244 	movw	r2, #16452	; 0x4044
  401e5c:	4629      	mov	r1, r5
  401e5e:	4630      	mov	r0, r6
  401e60:	47c8      	blx	r9
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
  401e62:	8520      	strh	r0, [r4, #40]	; 0x28
  401e64:	e6eb      	b.n	401c3e <lv_obj_init_draw_rect_dsc+0x8a>
  401e66:	bf00      	nop
  401e68:	00404f1d 	.word	0x00404f1d
  401e6c:	004082ad 	.word	0x004082ad

00401e70 <lv_obj_init_draw_label_dsc>:
    }
#endif
}

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
  401e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e72:	4605      	mov	r5, r0
  401e74:	460e      	mov	r6, r1
  401e76:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
  401e78:	f44f 628b 	mov.w	r2, #1112	; 0x458
  401e7c:	4b25      	ldr	r3, [pc, #148]	; (401f14 <lv_obj_init_draw_label_dsc+0xa4>)
  401e7e:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401e80:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  401e82:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  401e84:	2802      	cmp	r0, #2
  401e86:	d800      	bhi.n	401e8a <lv_obj_init_draw_label_dsc+0x1a>
  401e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
  401e8a:	f240 4262 	movw	r2, #1122	; 0x462
  401e8e:	4631      	mov	r1, r6
  401e90:	4628      	mov	r0, r5
  401e92:	4b20      	ldr	r3, [pc, #128]	; (401f14 <lv_obj_init_draw_label_dsc+0xa4>)
  401e94:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401e96:	b2c0      	uxtb	r0, r0

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
    if(opa < LV_OPA_MAX) {
  401e98:	28fc      	cmp	r0, #252	; 0xfc
  401e9a:	d804      	bhi.n	401ea6 <lv_obj_init_draw_label_dsc+0x36>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
  401e9c:	7ea3      	ldrb	r3, [r4, #26]
  401e9e:	fb03 f000 	mul.w	r0, r3, r0
  401ea2:	0a00      	lsrs	r0, r0, #8
  401ea4:	76a0      	strb	r0, [r4, #26]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  401ea6:	7ea3      	ldrb	r3, [r4, #26]
  401ea8:	2b02      	cmp	r3, #2
  401eaa:	d9ed      	bls.n	401e88 <lv_obj_init_draw_label_dsc+0x18>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
  401eac:	f244 4257 	movw	r2, #17495	; 0x4457
  401eb0:	4631      	mov	r1, r6
  401eb2:	4628      	mov	r0, r5
  401eb4:	4f17      	ldr	r7, [pc, #92]	; (401f14 <lv_obj_init_draw_label_dsc+0xa4>)
  401eb6:	47b8      	blx	r7

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
  401eb8:	81a0      	strh	r0, [r4, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
  401eba:	f241 425a 	movw	r2, #5210	; 0x145a
  401ebe:	4631      	mov	r1, r6
  401ec0:	4628      	mov	r0, r5
  401ec2:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  401ec4:	82a0      	strh	r0, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
  401ec6:	f241 425b 	movw	r2, #5211	; 0x145b
  401eca:	4631      	mov	r1, r6
  401ecc:	4628      	mov	r0, r5
  401ece:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  401ed0:	8260      	strh	r0, [r4, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
  401ed2:	f240 425c 	movw	r2, #1116	; 0x45c
  401ed6:	4631      	mov	r1, r6
  401ed8:	4628      	mov	r0, r5
  401eda:	47b8      	blx	r7
    return (lv_text_decor_t)v.num;
  401edc:	b2c0      	uxtb	r0, r0
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  401ede:	7fa3      	ldrb	r3, [r4, #30]
  401ee0:	f360 0302 	bfi	r3, r0, #0, #3
  401ee4:	77a3      	strb	r3, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
  401ee6:	2268      	movs	r2, #104	; 0x68
  401ee8:	4631      	mov	r1, r6
  401eea:	4628      	mov	r0, r5
  401eec:	47b8      	blx	r7
    return (lv_blend_mode_t)v.num;
  401eee:	b2c0      	uxtb	r0, r0
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
  401ef0:	7fa3      	ldrb	r3, [r4, #30]
  401ef2:	f360 03c5 	bfi	r3, r0, #3, #3
  401ef6:	77a3      	strb	r3, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
  401ef8:	f241 4259 	movw	r2, #5209	; 0x1459
  401efc:	4631      	mov	r1, r6
  401efe:	4628      	mov	r0, r5
  401f00:	47b8      	blx	r7
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  401f02:	6020      	str	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
  401f04:	f241 425d 	movw	r2, #5213	; 0x145d
  401f08:	4631      	mov	r1, r6
  401f0a:	4628      	mov	r0, r5
  401f0c:	47b8      	blx	r7

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
  401f0e:	7720      	strb	r0, [r4, #28]
  401f10:	e7ba      	b.n	401e88 <lv_obj_init_draw_label_dsc+0x18>
  401f12:	bf00      	nop
  401f14:	00404f1d 	.word	0x00404f1d

00401f18 <lv_obj_calculate_ext_draw_size>:
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
  401f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f1c:	4605      	mov	r5, r0
  401f1e:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
  401f20:	f44f 6204 	mov.w	r2, #2112	; 0x840
  401f24:	4b38      	ldr	r3, [pc, #224]	; (402008 <lv_obj_calculate_ext_draw_size+0xf0>)
  401f26:	4798      	blx	r3
    return (lv_coord_t)v.num;
  401f28:	b204      	sxth	r4, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
  401f2a:	bb04      	cbnz	r4, 401f6e <lv_obj_calculate_ext_draw_size+0x56>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
  401f2c:	f640 023a 	movw	r2, #2106	; 0x83a
  401f30:	4631      	mov	r1, r6
  401f32:	4628      	mov	r0, r5
  401f34:	4b34      	ldr	r3, [pc, #208]	; (402008 <lv_obj_calculate_ext_draw_size+0xf0>)
  401f36:	4798      	blx	r3
    return (lv_coord_t)v.num;
  401f38:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
  401f3a:	2f00      	cmp	r7, #0
  401f3c:	d14e      	bne.n	401fdc <lv_obj_calculate_ext_draw_size+0xc4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
  401f3e:	f640 020a 	movw	r2, #2058	; 0x80a
  401f42:	4631      	mov	r1, r6
  401f44:	4628      	mov	r0, r5
  401f46:	4f30      	ldr	r7, [pc, #192]	; (402008 <lv_obj_calculate_ext_draw_size+0xf0>)
  401f48:	47b8      	blx	r7
    return (lv_coord_t)v.num;
  401f4a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
  401f4e:	f640 020b 	movw	r2, #2059	; 0x80b
  401f52:	4631      	mov	r1, r6
  401f54:	4628      	mov	r0, r5
  401f56:	47b8      	blx	r7
    return (lv_coord_t)v.num;
  401f58:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
  401f5a:	4540      	cmp	r0, r8
  401f5c:	bfb8      	it	lt
  401f5e:	4640      	movlt	r0, r8
    if(wh > 0) s += wh;
  401f60:	2800      	cmp	r0, #0
  401f62:	dd01      	ble.n	401f68 <lv_obj_calculate_ext_draw_size+0x50>
  401f64:	4420      	add	r0, r4
  401f66:	b204      	sxth	r4, r0

    return s;
}
  401f68:	4620      	mov	r0, r4
  401f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
  401f6e:	f640 0245 	movw	r2, #2117	; 0x845
  401f72:	4631      	mov	r1, r6
  401f74:	4628      	mov	r0, r5
  401f76:	4b24      	ldr	r3, [pc, #144]	; (402008 <lv_obj_calculate_ext_draw_size+0xf0>)
  401f78:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401f7a:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
  401f7c:	2802      	cmp	r0, #2
  401f7e:	d801      	bhi.n	401f84 <lv_obj_calculate_ext_draw_size+0x6c>
    lv_coord_t s = 0;
  401f80:	2400      	movs	r4, #0
  401f82:	e7d3      	b.n	401f2c <lv_obj_calculate_ext_draw_size+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
  401f84:	f640 0243 	movw	r2, #2115	; 0x843
  401f88:	4631      	mov	r1, r6
  401f8a:	4628      	mov	r0, r5
  401f8c:	4b1e      	ldr	r3, [pc, #120]	; (402008 <lv_obj_calculate_ext_draw_size+0xf0>)
  401f8e:	4798      	blx	r3
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
  401f90:	4623      	mov	r3, r4
  401f92:	2c00      	cmp	r4, #0
  401f94:	bfb8      	it	lt
  401f96:	1c63      	addlt	r3, r4, #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  401f98:	1c44      	adds	r4, r0, #1
  401f9a:	eb04 0463 	add.w	r4, r4, r3, asr #1
  401f9e:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
  401fa0:	f640 0241 	movw	r2, #2113	; 0x841
  401fa4:	4631      	mov	r1, r6
  401fa6:	4628      	mov	r0, r5
  401fa8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402008 <lv_obj_calculate_ext_draw_size+0xf0>
  401fac:	47c0      	blx	r8
    return (lv_coord_t)v.num;
  401fae:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
  401fb0:	f640 0242 	movw	r2, #2114	; 0x842
  401fb4:	4631      	mov	r1, r6
  401fb6:	4628      	mov	r0, r5
  401fb8:	47c0      	blx	r8
    return (lv_coord_t)v.num;
  401fba:	b200      	sxth	r0, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
  401fbc:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  401fc0:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  401fc4:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
  401fc8:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
  401fcc:	4283      	cmp	r3, r0
  401fce:	bfac      	ite	ge
  401fd0:	18e4      	addge	r4, r4, r3
  401fd2:	1824      	addlt	r4, r4, r0
            s = LV_MAX(s, sh_width);
  401fd4:	b220      	sxth	r0, r4
  401fd6:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
  401fda:	e7a7      	b.n	401f2c <lv_obj_calculate_ext_draw_size+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
  401fdc:	f640 023c 	movw	r2, #2108	; 0x83c
  401fe0:	4631      	mov	r1, r6
  401fe2:	4628      	mov	r0, r5
  401fe4:	4b08      	ldr	r3, [pc, #32]	; (402008 <lv_obj_calculate_ext_draw_size+0xf0>)
  401fe6:	4798      	blx	r3
    return (lv_opa_t)v.num;
  401fe8:	b2c0      	uxtb	r0, r0
        if(outline_opa > LV_OPA_MIN) {
  401fea:	2802      	cmp	r0, #2
  401fec:	d9a7      	bls.n	401f3e <lv_obj_calculate_ext_draw_size+0x26>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
  401fee:	f640 023d 	movw	r2, #2109	; 0x83d
  401ff2:	4631      	mov	r1, r6
  401ff4:	4628      	mov	r0, r5
  401ff6:	4b04      	ldr	r3, [pc, #16]	; (402008 <lv_obj_calculate_ext_draw_size+0xf0>)
  401ff8:	4798      	blx	r3
            s = LV_MAX(s, outline_pad + outline_width);
  401ffa:	fa07 f080 	sxtah	r0, r7, r0
  401ffe:	42a0      	cmp	r0, r4
  402000:	bfb8      	it	lt
  402002:	4620      	movlt	r0, r4
  402004:	b204      	sxth	r4, r0
  402006:	e79a      	b.n	401f3e <lv_obj_calculate_ext_draw_size+0x26>
  402008:	00404f1d 	.word	0x00404f1d

0040200c <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, const lv_area_t * clip_area)
{
  40200c:	b538      	push	{r3, r4, r5, lr}
  40200e:	4604      	mov	r4, r0
  402010:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
  402012:	2148      	movs	r1, #72	; 0x48
  402014:	4b01      	ldr	r3, [pc, #4]	; (40201c <lv_obj_draw_dsc_init+0x10>)
  402016:	4798      	blx	r3
    dsc->clip_area = clip_area;
  402018:	6025      	str	r5, [r4, #0]
  40201a:	bd38      	pop	{r3, r4, r5, pc}
  40201c:	004116ed 	.word	0x004116ed

00402020 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
  402020:	6883      	ldr	r3, [r0, #8]
  402022:	b113      	cbz	r3, 40202a <_lv_obj_get_ext_draw_size+0xa>
  402024:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
  402028:	4770      	bx	lr
    else return 0;
  40202a:	2000      	movs	r0, #0
}
  40202c:	4770      	bx	lr
	...

00402030 <lv_obj_refresh_ext_draw_size>:
{
  402030:	b530      	push	{r4, r5, lr}
  402032:	b083      	sub	sp, #12
  402034:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
  402036:	4b16      	ldr	r3, [pc, #88]	; (402090 <lv_obj_refresh_ext_draw_size+0x60>)
  402038:	4798      	blx	r3
  40203a:	4605      	mov	r5, r0
    lv_coord_t s_new = 0;
  40203c:	aa02      	add	r2, sp, #8
  40203e:	2300      	movs	r3, #0
  402040:	f822 3d02 	strh.w	r3, [r2, #-2]!
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
  402044:	2113      	movs	r1, #19
  402046:	4620      	mov	r0, r4
  402048:	4b12      	ldr	r3, [pc, #72]	; (402094 <lv_obj_refresh_ext_draw_size+0x64>)
  40204a:	4798      	blx	r3
    if(s_new != s_old) lv_obj_invalidate(obj);
  40204c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  402050:	42ab      	cmp	r3, r5
  402052:	d002      	beq.n	40205a <lv_obj_refresh_ext_draw_size+0x2a>
  402054:	4620      	mov	r0, r4
  402056:	4b10      	ldr	r3, [pc, #64]	; (402098 <lv_obj_refresh_ext_draw_size+0x68>)
  402058:	4798      	blx	r3
    if(obj->spec_attr) {
  40205a:	68a3      	ldr	r3, [r4, #8]
  40205c:	b15b      	cbz	r3, 402076 <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
  40205e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  402062:	82da      	strh	r2, [r3, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
  402064:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  402068:	42ab      	cmp	r3, r5
  40206a:	d002      	beq.n	402072 <lv_obj_refresh_ext_draw_size+0x42>
  40206c:	4620      	mov	r0, r4
  40206e:	4b0a      	ldr	r3, [pc, #40]	; (402098 <lv_obj_refresh_ext_draw_size+0x68>)
  402070:	4798      	blx	r3
}
  402072:	b003      	add	sp, #12
  402074:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
  402076:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40207a:	2b00      	cmp	r3, #0
  40207c:	d0f2      	beq.n	402064 <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
  40207e:	4620      	mov	r0, r4
  402080:	4b06      	ldr	r3, [pc, #24]	; (40209c <lv_obj_refresh_ext_draw_size+0x6c>)
  402082:	4798      	blx	r3
        obj->spec_attr->ext_draw_size = s_new;
  402084:	68a3      	ldr	r3, [r4, #8]
  402086:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  40208a:	82da      	strh	r2, [r3, #22]
  40208c:	e7ea      	b.n	402064 <lv_obj_refresh_ext_draw_size+0x34>
  40208e:	bf00      	nop
  402090:	00402021 	.word	0x00402021
  402094:	00400491 	.word	0x00400491
  402098:	0040262d 	.word	0x0040262d
  40209c:	004018d9 	.word	0x004018d9

004020a0 <lv_obj_set_x>:
    lv_obj_set_x(obj, x);
    lv_obj_set_y(obj, y);
}

void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
  4020a0:	b570      	push	{r4, r5, r6, lr}
  4020a2:	b082      	sub	sp, #8
  4020a4:	4606      	mov	r6, r0
  4020a6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_x;
    lv_style_value_t v_x;

    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
  4020a8:	2300      	movs	r3, #0
  4020aa:	aa01      	add	r2, sp, #4
  4020ac:	f241 0107 	movw	r1, #4103	; 0x1007
  4020b0:	4c07      	ldr	r4, [pc, #28]	; (4020d0 <lv_obj_set_x+0x30>)
  4020b2:	47a0      	blx	r4

    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
  4020b4:	2801      	cmp	r0, #1
  4020b6:	d007      	beq.n	4020c8 <lv_obj_set_x+0x28>
  4020b8:	b920      	cbnz	r0, 4020c4 <lv_obj_set_x+0x24>
        lv_obj_set_style_x(obj, x, 0);
  4020ba:	2200      	movs	r2, #0
  4020bc:	4629      	mov	r1, r5
  4020be:	4630      	mov	r0, r6
  4020c0:	4b04      	ldr	r3, [pc, #16]	; (4020d4 <lv_obj_set_x+0x34>)
  4020c2:	4798      	blx	r3
    }
}
  4020c4:	b002      	add	sp, #8
  4020c6:	bd70      	pop	{r4, r5, r6, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
  4020c8:	9b01      	ldr	r3, [sp, #4]
  4020ca:	42ab      	cmp	r3, r5
  4020cc:	d1f5      	bne.n	4020ba <lv_obj_set_x+0x1a>
  4020ce:	e7f9      	b.n	4020c4 <lv_obj_set_x+0x24>
  4020d0:	00405855 	.word	0x00405855
  4020d4:	00405cf9 	.word	0x00405cf9

004020d8 <lv_obj_set_y>:

void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
  4020d8:	b570      	push	{r4, r5, r6, lr}
  4020da:	b082      	sub	sp, #8
  4020dc:	4606      	mov	r6, r0
  4020de:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_y;
    lv_style_value_t v_y;

    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
  4020e0:	2300      	movs	r3, #0
  4020e2:	aa01      	add	r2, sp, #4
  4020e4:	f241 0108 	movw	r1, #4104	; 0x1008
  4020e8:	4c07      	ldr	r4, [pc, #28]	; (402108 <lv_obj_set_y+0x30>)
  4020ea:	47a0      	blx	r4

    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
  4020ec:	2801      	cmp	r0, #1
  4020ee:	d007      	beq.n	402100 <lv_obj_set_y+0x28>
  4020f0:	b920      	cbnz	r0, 4020fc <lv_obj_set_y+0x24>
        lv_obj_set_style_y(obj, y, 0);
  4020f2:	2200      	movs	r2, #0
  4020f4:	4629      	mov	r1, r5
  4020f6:	4630      	mov	r0, r6
  4020f8:	4b04      	ldr	r3, [pc, #16]	; (40210c <lv_obj_set_y+0x34>)
  4020fa:	4798      	blx	r3
    }
}
  4020fc:	b002      	add	sp, #8
  4020fe:	bd70      	pop	{r4, r5, r6, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
  402100:	9b01      	ldr	r3, [sp, #4]
  402102:	42ab      	cmp	r3, r5
  402104:	d1f5      	bne.n	4020f2 <lv_obj_set_y+0x1a>
  402106:	e7f9      	b.n	4020fc <lv_obj_set_y+0x24>
  402108:	00405855 	.word	0x00405855
  40210c:	00405d0d 	.word	0x00405d0d

00402110 <lv_obj_set_pos>:
{
  402110:	b538      	push	{r3, r4, r5, lr}
  402112:	4604      	mov	r4, r0
  402114:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
  402116:	4b03      	ldr	r3, [pc, #12]	; (402124 <lv_obj_set_pos+0x14>)
  402118:	4798      	blx	r3
    lv_obj_set_y(obj, y);
  40211a:	4629      	mov	r1, r5
  40211c:	4620      	mov	r0, r4
  40211e:	4b02      	ldr	r3, [pc, #8]	; (402128 <lv_obj_set_pos+0x18>)
  402120:	4798      	blx	r3
  402122:	bd38      	pop	{r3, r4, r5, pc}
  402124:	004020a1 	.word	0x004020a1
  402128:	004020d9 	.word	0x004020d9

0040212c <lv_obj_set_width>:
    lv_obj_set_width(obj, w);
    lv_obj_set_height(obj, h);
}

void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
  40212c:	b570      	push	{r4, r5, r6, lr}
  40212e:	b082      	sub	sp, #8
  402130:	4606      	mov	r6, r0
  402132:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_w;
    lv_style_value_t v_w;

    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
  402134:	2300      	movs	r3, #0
  402136:	aa01      	add	r2, sp, #4
  402138:	f241 0101 	movw	r1, #4097	; 0x1001
  40213c:	4c07      	ldr	r4, [pc, #28]	; (40215c <lv_obj_set_width+0x30>)
  40213e:	47a0      	blx	r4

    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
  402140:	2801      	cmp	r0, #1
  402142:	d007      	beq.n	402154 <lv_obj_set_width+0x28>
  402144:	b920      	cbnz	r0, 402150 <lv_obj_set_width+0x24>
        lv_obj_set_style_width(obj, w, 0);
  402146:	2200      	movs	r2, #0
  402148:	4629      	mov	r1, r5
  40214a:	4630      	mov	r0, r6
  40214c:	4b04      	ldr	r3, [pc, #16]	; (402160 <lv_obj_set_width+0x34>)
  40214e:	4798      	blx	r3
    }
}
  402150:	b002      	add	sp, #8
  402152:	bd70      	pop	{r4, r5, r6, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
  402154:	9b01      	ldr	r3, [sp, #4]
  402156:	42ab      	cmp	r3, r5
  402158:	d1f5      	bne.n	402146 <lv_obj_set_width+0x1a>
  40215a:	e7f9      	b.n	402150 <lv_obj_set_width+0x24>
  40215c:	00405855 	.word	0x00405855
  402160:	00405cd1 	.word	0x00405cd1

00402164 <lv_obj_set_height>:

void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
  402164:	b570      	push	{r4, r5, r6, lr}
  402166:	b082      	sub	sp, #8
  402168:	4606      	mov	r6, r0
  40216a:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_h;
    lv_style_value_t v_h;

    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
  40216c:	2300      	movs	r3, #0
  40216e:	aa01      	add	r2, sp, #4
  402170:	f241 0104 	movw	r1, #4100	; 0x1004
  402174:	4c07      	ldr	r4, [pc, #28]	; (402194 <lv_obj_set_height+0x30>)
  402176:	47a0      	blx	r4

    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
  402178:	2801      	cmp	r0, #1
  40217a:	d007      	beq.n	40218c <lv_obj_set_height+0x28>
  40217c:	b920      	cbnz	r0, 402188 <lv_obj_set_height+0x24>
        lv_obj_set_style_height(obj, h, 0);
  40217e:	2200      	movs	r2, #0
  402180:	4629      	mov	r1, r5
  402182:	4630      	mov	r0, r6
  402184:	4b04      	ldr	r3, [pc, #16]	; (402198 <lv_obj_set_height+0x34>)
  402186:	4798      	blx	r3
    }
}
  402188:	b002      	add	sp, #8
  40218a:	bd70      	pop	{r4, r5, r6, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
  40218c:	9b01      	ldr	r3, [sp, #4]
  40218e:	42ab      	cmp	r3, r5
  402190:	d1f5      	bne.n	40217e <lv_obj_set_height+0x1a>
  402192:	e7f9      	b.n	402188 <lv_obj_set_height+0x24>
  402194:	00405855 	.word	0x00405855
  402198:	00405ce5 	.word	0x00405ce5

0040219c <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
  40219c:	b538      	push	{r3, r4, r5, lr}
  40219e:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
  4021a0:	490b      	ldr	r1, [pc, #44]	; (4021d0 <lv_obj_is_layout_positioned+0x34>)
  4021a2:	4b0c      	ldr	r3, [pc, #48]	; (4021d4 <lv_obj_is_layout_positioned+0x38>)
  4021a4:	4798      	blx	r3
  4021a6:	b110      	cbz	r0, 4021ae <lv_obj_is_layout_positioned+0x12>
  4021a8:	2400      	movs	r4, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
  4021aa:	4620      	mov	r0, r4
  4021ac:	bd38      	pop	{r3, r4, r5, pc}
  4021ae:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
  4021b0:	4628      	mov	r0, r5
  4021b2:	4b09      	ldr	r3, [pc, #36]	; (4021d8 <lv_obj_is_layout_positioned+0x3c>)
  4021b4:	4798      	blx	r3
    if(parent == NULL) return false;
  4021b6:	2800      	cmp	r0, #0
  4021b8:	d0f7      	beq.n	4021aa <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
  4021ba:	f241 0269 	movw	r2, #4201	; 0x1069
  4021be:	2100      	movs	r1, #0
  4021c0:	4b06      	ldr	r3, [pc, #24]	; (4021dc <lv_obj_is_layout_positioned+0x40>)
  4021c2:	4798      	blx	r3
    if(layout) return true;
  4021c4:	b280      	uxth	r0, r0
  4021c6:	1c04      	adds	r4, r0, #0
  4021c8:	bf18      	it	ne
  4021ca:	2401      	movne	r4, #1
  4021cc:	e7ed      	b.n	4021aa <lv_obj_is_layout_positioned+0xe>
  4021ce:	bf00      	nop
  4021d0:	00018001 	.word	0x00018001
  4021d4:	004013f3 	.word	0x004013f3
  4021d8:	00405ded 	.word	0x00405ded
  4021dc:	00404f1d 	.word	0x00404f1d

004021e0 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
  4021e0:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
  4021e2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  4021e6:	f043 0301 	orr.w	r3, r3, #1
  4021ea:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
  4021ee:	4b07      	ldr	r3, [pc, #28]	; (40220c <lv_obj_mark_layout_as_dirty+0x2c>)
  4021f0:	4798      	blx	r3
    scr->scr_layout_inv = 1;
  4021f2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  4021f6:	f043 0302 	orr.w	r3, r3, #2
  4021fa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
  4021fe:	4b04      	ldr	r3, [pc, #16]	; (402210 <lv_obj_mark_layout_as_dirty+0x30>)
  402200:	4798      	blx	r3
    lv_timer_resume(disp->refr_timer);
  402202:	6840      	ldr	r0, [r0, #4]
  402204:	4b03      	ldr	r3, [pc, #12]	; (402214 <lv_obj_mark_layout_as_dirty+0x34>)
  402206:	4798      	blx	r3
  402208:	bd08      	pop	{r3, pc}
  40220a:	bf00      	nop
  40220c:	00405d5d 	.word	0x00405d5d
  402210:	00405d6d 	.word	0x00405d6d
  402214:	004128fb 	.word	0x004128fb

00402218 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
  402218:	b570      	push	{r4, r5, r6, lr}
  40221a:	b084      	sub	sp, #16
  40221c:	4606      	mov	r6, r0
  40221e:	460c      	mov	r4, r1
    layout_cnt++;
  402220:	4b13      	ldr	r3, [pc, #76]	; (402270 <lv_layout_register+0x58>)
  402222:	6819      	ldr	r1, [r3, #0]
  402224:	3101      	adds	r1, #1
  402226:	6019      	str	r1, [r3, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
  402228:	4d12      	ldr	r5, [pc, #72]	; (402274 <lv_layout_register+0x5c>)
  40222a:	00c9      	lsls	r1, r1, #3
  40222c:	6828      	ldr	r0, [r5, #0]
  40222e:	4b12      	ldr	r3, [pc, #72]	; (402278 <lv_layout_register+0x60>)
  402230:	4798      	blx	r3
  402232:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
  402234:	b170      	cbz	r0, 402254 <lv_layout_register+0x3c>
  402236:	4602      	mov	r2, r0

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
  402238:	4b0d      	ldr	r3, [pc, #52]	; (402270 <lv_layout_register+0x58>)
  40223a:	6818      	ldr	r0, [r3, #0]
  40223c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  402240:	4403      	add	r3, r0
  402242:	f842 6033 	str.w	r6, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
  402246:	4a0b      	ldr	r2, [pc, #44]	; (402274 <lv_layout_register+0x5c>)
  402248:	6812      	ldr	r2, [r2, #0]
  40224a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40224e:	605c      	str	r4, [r3, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
  402250:	b004      	add	sp, #16
  402252:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
  402254:	4b09      	ldr	r3, [pc, #36]	; (40227c <lv_layout_register+0x64>)
  402256:	9302      	str	r3, [sp, #8]
  402258:	4b09      	ldr	r3, [pc, #36]	; (402280 <lv_layout_register+0x68>)
  40225a:	9301      	str	r3, [sp, #4]
  40225c:	4b09      	ldr	r3, [pc, #36]	; (402284 <lv_layout_register+0x6c>)
  40225e:	9300      	str	r3, [sp, #0]
  402260:	4b09      	ldr	r3, [pc, #36]	; (402288 <lv_layout_register+0x70>)
  402262:	f44f 72a2 	mov.w	r2, #324	; 0x144
  402266:	4909      	ldr	r1, [pc, #36]	; (40228c <lv_layout_register+0x74>)
  402268:	2003      	movs	r0, #3
  40226a:	4c09      	ldr	r4, [pc, #36]	; (402290 <lv_layout_register+0x78>)
  40226c:	47a0      	blx	r4
  40226e:	e7fe      	b.n	40226e <lv_layout_register+0x56>
  402270:	20400a18 	.word	0x20400a18
  402274:	20439ecc 	.word	0x20439ecc
  402278:	0041153d 	.word	0x0041153d
  40227c:	0041c064 	.word	0x0041c064
  402280:	0041c290 	.word	0x0041c290
  402284:	0041c098 	.word	0x0041c098
  402288:	0041c248 	.word	0x0041c248
  40228c:	0041c25c 	.word	0x0041c25c
  402290:	00410edd 	.word	0x00410edd

00402294 <lv_obj_align>:
{
    lv_obj_set_style_align(obj, align, 0);
}

void lv_obj_align(lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
  402294:	b570      	push	{r4, r5, r6, lr}
  402296:	4604      	mov	r4, r0
  402298:	4615      	mov	r5, r2
  40229a:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
  40229c:	2200      	movs	r2, #0
  40229e:	4b04      	ldr	r3, [pc, #16]	; (4022b0 <lv_obj_align+0x1c>)
  4022a0:	4798      	blx	r3
    lv_obj_set_pos(obj, x_ofs, y_ofs);
  4022a2:	4632      	mov	r2, r6
  4022a4:	4629      	mov	r1, r5
  4022a6:	4620      	mov	r0, r4
  4022a8:	4b02      	ldr	r3, [pc, #8]	; (4022b4 <lv_obj_align+0x20>)
  4022aa:	4798      	blx	r3
  4022ac:	bd70      	pop	{r4, r5, r6, pc}
  4022ae:	bf00      	nop
  4022b0:	00405d21 	.word	0x00405d21
  4022b4:	00402111 	.word	0x00402111

004022b8 <lv_obj_get_coords>:
    dest->x1 = src->x1;
  4022b8:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
  4022bc:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
  4022be:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
  4022c2:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
  4022c4:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
  4022c8:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
  4022ca:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
  4022ce:	80cb      	strh	r3, [r1, #6]
  4022d0:	4770      	bx	lr

004022d2 <lv_obj_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4022d2:	8b03      	ldrh	r3, [r0, #24]
  4022d4:	3301      	adds	r3, #1
  4022d6:	8a80      	ldrh	r0, [r0, #20]
  4022d8:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
}
  4022da:	b200      	sxth	r0, r0
  4022dc:	4770      	bx	lr

004022de <lv_obj_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4022de:	8b43      	ldrh	r3, [r0, #26]
  4022e0:	3301      	adds	r3, #1
  4022e2:	8ac0      	ldrh	r0, [r0, #22]
  4022e4:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
}
  4022e6:	b200      	sxth	r0, r0
  4022e8:	4770      	bx	lr
	...

004022ec <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
  4022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022ee:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  4022f0:	f641 0212 	movw	r2, #6162	; 0x1812
  4022f4:	2100      	movs	r1, #0
  4022f6:	4e0c      	ldr	r6, [pc, #48]	; (402328 <lv_obj_get_content_width+0x3c>)
  4022f8:	47b0      	blx	r6
  4022fa:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  4022fc:	f641 0213 	movw	r2, #6163	; 0x1813
  402300:	2100      	movs	r1, #0
  402302:	4628      	mov	r0, r5
  402304:	47b0      	blx	r6
  402306:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  402308:	f241 0232 	movw	r2, #4146	; 0x1032
  40230c:	2100      	movs	r1, #0
  40230e:	4628      	mov	r0, r5
  402310:	47b0      	blx	r6

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
  402312:	443c      	add	r4, r7
  402314:	f1c4 0401 	rsb	r4, r4, #1
  402318:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
  40231c:	8b2c      	ldrh	r4, [r5, #24]
  40231e:	4420      	add	r0, r4
  402320:	8aac      	ldrh	r4, [r5, #20]
  402322:	1b00      	subs	r0, r0, r4
}
  402324:	b200      	sxth	r0, r0
  402326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402328:	00404f1d 	.word	0x00404f1d

0040232c <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
  40232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40232e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  402330:	f641 0210 	movw	r2, #6160	; 0x1810
  402334:	2100      	movs	r1, #0
  402336:	4e0c      	ldr	r6, [pc, #48]	; (402368 <lv_obj_get_content_height+0x3c>)
  402338:	47b0      	blx	r6
  40233a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
  40233c:	f641 0211 	movw	r2, #6161	; 0x1811
  402340:	2100      	movs	r1, #0
  402342:	4628      	mov	r0, r5
  402344:	47b0      	blx	r6
  402346:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  402348:	f241 0232 	movw	r2, #4146	; 0x1032
  40234c:	2100      	movs	r1, #0
  40234e:	4628      	mov	r0, r5
  402350:	47b0      	blx	r6

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
    lv_coord_t bottom =  lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
  402352:	443c      	add	r4, r7
  402354:	f1c4 0401 	rsb	r4, r4, #1
  402358:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
  40235c:	8b6c      	ldrh	r4, [r5, #26]
  40235e:	4420      	add	r0, r4
  402360:	8aec      	ldrh	r4, [r5, #22]
  402362:	1b00      	subs	r0, r0, r4
}
  402364:	b200      	sxth	r0, r0
  402366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402368:	00404f1d 	.word	0x00404f1d

0040236c <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
  40236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40236e:	4607      	mov	r7, r0
  402370:	460c      	mov	r4, r1
  402372:	f241 0232 	movw	r2, #4146	; 0x1032
  402376:	2100      	movs	r1, #0
  402378:	4e16      	ldr	r6, [pc, #88]	; (4023d4 <lv_obj_get_content_coords+0x68>)
  40237a:	47b0      	blx	r6
  40237c:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);

    lv_obj_get_coords(obj, area);
  40237e:	4621      	mov	r1, r4
  402380:	4638      	mov	r0, r7
  402382:	4b15      	ldr	r3, [pc, #84]	; (4023d8 <lv_obj_get_content_coords+0x6c>)
  402384:	4798      	blx	r3
    lv_area_increase(area, -border_width, -border_width);
  402386:	4269      	negs	r1, r5
  402388:	b209      	sxth	r1, r1
  40238a:	460a      	mov	r2, r1
  40238c:	4620      	mov	r0, r4
  40238e:	4b13      	ldr	r3, [pc, #76]	; (4023dc <lv_obj_get_content_coords+0x70>)
  402390:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  402392:	f641 0212 	movw	r2, #6162	; 0x1812
  402396:	2100      	movs	r1, #0
  402398:	4638      	mov	r0, r7
  40239a:	47b0      	blx	r6
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
  40239c:	8823      	ldrh	r3, [r4, #0]
  40239e:	4418      	add	r0, r3
  4023a0:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  4023a2:	f641 0213 	movw	r2, #6163	; 0x1813
  4023a6:	2100      	movs	r1, #0
  4023a8:	4638      	mov	r0, r7
  4023aa:	47b0      	blx	r6
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
  4023ac:	88a3      	ldrh	r3, [r4, #4]
  4023ae:	1a18      	subs	r0, r3, r0
  4023b0:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  4023b2:	f641 0210 	movw	r2, #6160	; 0x1810
  4023b6:	2100      	movs	r1, #0
  4023b8:	4638      	mov	r0, r7
  4023ba:	47b0      	blx	r6
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
  4023bc:	8863      	ldrh	r3, [r4, #2]
  4023be:	4418      	add	r0, r3
  4023c0:	8060      	strh	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
  4023c2:	f641 0211 	movw	r2, #6161	; 0x1811
  4023c6:	2100      	movs	r1, #0
  4023c8:	4638      	mov	r0, r7
  4023ca:	47b0      	blx	r6
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
  4023cc:	88e3      	ldrh	r3, [r4, #6]
  4023ce:	1a18      	subs	r0, r3, r0
  4023d0:	80e0      	strh	r0, [r4, #6]
  4023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023d4:	00404f1d 	.word	0x00404f1d
  4023d8:	004022b9 	.word	0x004022b9
  4023dc:	00410791 	.word	0x00410791

004023e0 <lv_obj_get_self_width>:

}

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
  4023e0:	b500      	push	{lr}
  4023e2:	b083      	sub	sp, #12
    lv_point_t p = {0, LV_COORD_MIN};
  4023e4:	2300      	movs	r3, #0
  4023e6:	f8ad 3004 	strh.w	r3, [sp, #4]
  4023ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  4023ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
  4023f2:	aa01      	add	r2, sp, #4
  4023f4:	212a      	movs	r1, #42	; 0x2a
  4023f6:	4b03      	ldr	r3, [pc, #12]	; (402404 <lv_obj_get_self_width+0x24>)
  4023f8:	4798      	blx	r3
    return p.x;
}
  4023fa:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
  4023fe:	b003      	add	sp, #12
  402400:	f85d fb04 	ldr.w	pc, [sp], #4
  402404:	00400491 	.word	0x00400491

00402408 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
  402408:	b500      	push	{lr}
  40240a:	b083      	sub	sp, #12
    lv_point_t p = {LV_COORD_MIN, 0};
  40240c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  402410:	f8ad 3004 	strh.w	r3, [sp, #4]
  402414:	2300      	movs	r3, #0
  402416:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
  40241a:	aa01      	add	r2, sp, #4
  40241c:	212a      	movs	r1, #42	; 0x2a
  40241e:	4b03      	ldr	r3, [pc, #12]	; (40242c <lv_obj_get_self_height+0x24>)
  402420:	4798      	blx	r3
    return p.y;
}
  402422:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
  402426:	b003      	add	sp, #12
  402428:	f85d fb04 	ldr.w	pc, [sp], #4
  40242c:	00400491 	.word	0x00400491

00402430 <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
  402430:	b570      	push	{r4, r5, r6, lr}
  402432:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  402434:	f241 0201 	movw	r2, #4097	; 0x1001
  402438:	2100      	movs	r1, #0
  40243a:	4c0b      	ldr	r4, [pc, #44]	; (402468 <lv_obj_refresh_self_size+0x38>)
  40243c:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  40243e:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  402440:	f241 0204 	movw	r2, #4100	; 0x1004
  402444:	2100      	movs	r1, #0
  402446:	4628      	mov	r0, r5
  402448:	47a0      	blx	r4
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
  40244a:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40244e:	429e      	cmp	r6, r3
  402450:	d004      	beq.n	40245c <lv_obj_refresh_self_size+0x2c>
  402452:	b200      	sxth	r0, r0
  402454:	4298      	cmp	r0, r3
  402456:	d001      	beq.n	40245c <lv_obj_refresh_self_size+0x2c>
  402458:	2000      	movs	r0, #0

    lv_obj_mark_layout_as_dirty(obj);
    return true;
}
  40245a:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_mark_layout_as_dirty(obj);
  40245c:	4628      	mov	r0, r5
  40245e:	4b03      	ldr	r3, [pc, #12]	; (40246c <lv_obj_refresh_self_size+0x3c>)
  402460:	4798      	blx	r3
    return true;
  402462:	2001      	movs	r0, #1
  402464:	bd70      	pop	{r4, r5, r6, pc}
  402466:	bf00      	nop
  402468:	00404f1d 	.word	0x00404f1d
  40246c:	004021e1 	.word	0x004021e1

00402470 <lv_obj_move_children_by>:
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
    }
}

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
  402470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402474:	b083      	sub	sp, #12
  402476:	4681      	mov	r9, r0
  402478:	460e      	mov	r6, r1
  40247a:	9100      	str	r1, [sp, #0]
  40247c:	4614      	mov	r4, r2
  40247e:	9201      	str	r2, [sp, #4]
  402480:	469a      	mov	sl, r3
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  402482:	4b18      	ldr	r3, [pc, #96]	; (4024e4 <lv_obj_move_children_by+0x74>)
  402484:	4798      	blx	r3
    for(i = 0; i < child_cnt; i++) {
  402486:	b350      	cbz	r0, 4024de <lv_obj_move_children_by+0x6e>
  402488:	4680      	mov	r8, r0
  40248a:	2500      	movs	r5, #0
        lv_obj_t * child = obj->spec_attr->children[i];
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
        child->coords.x1 += x_diff;
  40248c:	b2b7      	uxth	r7, r6
        child->coords.y1 += y_diff;
  40248e:	b2a6      	uxth	r6, r4
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
  402490:	f8df b054 	ldr.w	fp, [pc, #84]	; 4024e8 <lv_obj_move_children_by+0x78>
  402494:	e014      	b.n	4024c0 <lv_obj_move_children_by+0x50>
        child->coords.x1 += x_diff;
  402496:	8aa3      	ldrh	r3, [r4, #20]
  402498:	443b      	add	r3, r7
  40249a:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
  40249c:	8ae3      	ldrh	r3, [r4, #22]
  40249e:	4433      	add	r3, r6
  4024a0:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
  4024a2:	8b23      	ldrh	r3, [r4, #24]
  4024a4:	443b      	add	r3, r7
  4024a6:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
  4024a8:	8b63      	ldrh	r3, [r4, #26]
  4024aa:	4433      	add	r3, r6
  4024ac:	8363      	strh	r3, [r4, #26]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
  4024ae:	2300      	movs	r3, #0
  4024b0:	9a01      	ldr	r2, [sp, #4]
  4024b2:	9900      	ldr	r1, [sp, #0]
  4024b4:	4620      	mov	r0, r4
  4024b6:	f7ff ffdb 	bl	402470 <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
  4024ba:	3501      	adds	r5, #1
  4024bc:	45a8      	cmp	r8, r5
  4024be:	d00e      	beq.n	4024de <lv_obj_move_children_by+0x6e>
        lv_obj_t * child = obj->spec_attr->children[i];
  4024c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4024c4:	681b      	ldr	r3, [r3, #0]
  4024c6:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
  4024ca:	f1ba 0f00 	cmp.w	sl, #0
  4024ce:	d0e2      	beq.n	402496 <lv_obj_move_children_by+0x26>
  4024d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4024d4:	4620      	mov	r0, r4
  4024d6:	47d8      	blx	fp
  4024d8:	2800      	cmp	r0, #0
  4024da:	d1ee      	bne.n	4024ba <lv_obj_move_children_by+0x4a>
  4024dc:	e7db      	b.n	402496 <lv_obj_move_children_by+0x26>
    }
}
  4024de:	b003      	add	sp, #12
  4024e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024e4:	00405e25 	.word	0x00405e25
  4024e8:	004013e5 	.word	0x004013e5

004024ec <lv_obj_area_is_visible>:
    lv_obj_invalidate_area(obj, &obj_coords);

}

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
  4024ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024f0:	b082      	sub	sp, #8
  4024f2:	4604      	mov	r4, r0
  4024f4:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
  4024f6:	2101      	movs	r1, #1
  4024f8:	4b31      	ldr	r3, [pc, #196]	; (4025c0 <lv_obj_area_is_visible+0xd4>)
  4024fa:	4798      	blx	r3
  4024fc:	b120      	cbz	r0, 402508 <lv_obj_area_is_visible+0x1c>
  4024fe:	2600      	movs	r6, #0

        par = lv_obj_get_parent(par);
    }

    return true;
}
  402500:	4630      	mov	r0, r6
  402502:	b002      	add	sp, #8
  402504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402508:	4682      	mov	sl, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  40250a:	4620      	mov	r0, r4
  40250c:	4b2d      	ldr	r3, [pc, #180]	; (4025c4 <lv_obj_area_is_visible+0xd8>)
  40250e:	4798      	blx	r3
  402510:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  402512:	4b2d      	ldr	r3, [pc, #180]	; (4025c8 <lv_obj_area_is_visible+0xdc>)
  402514:	4798      	blx	r3
  402516:	4680      	mov	r8, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
  402518:	4b2c      	ldr	r3, [pc, #176]	; (4025cc <lv_obj_area_is_visible+0xe0>)
  40251a:	4798      	blx	r3
  40251c:	4286      	cmp	r6, r0
  40251e:	d010      	beq.n	402542 <lv_obj_area_is_visible+0x56>
       obj_scr != lv_disp_get_scr_prev(disp) &&
  402520:	4640      	mov	r0, r8
  402522:	4b2b      	ldr	r3, [pc, #172]	; (4025d0 <lv_obj_area_is_visible+0xe4>)
  402524:	4798      	blx	r3
    if(obj_scr != lv_disp_get_scr_act(disp) &&
  402526:	4286      	cmp	r6, r0
  402528:	d00b      	beq.n	402542 <lv_obj_area_is_visible+0x56>
       obj_scr != lv_disp_get_layer_top(disp) &&
  40252a:	4640      	mov	r0, r8
  40252c:	4b29      	ldr	r3, [pc, #164]	; (4025d4 <lv_obj_area_is_visible+0xe8>)
  40252e:	4798      	blx	r3
       obj_scr != lv_disp_get_scr_prev(disp) &&
  402530:	4286      	cmp	r6, r0
  402532:	d006      	beq.n	402542 <lv_obj_area_is_visible+0x56>
       obj_scr != lv_disp_get_layer_sys(disp)) {
  402534:	4640      	mov	r0, r8
  402536:	4b28      	ldr	r3, [pc, #160]	; (4025d8 <lv_obj_area_is_visible+0xec>)
  402538:	4798      	blx	r3
       obj_scr != lv_disp_get_layer_top(disp) &&
  40253a:	4286      	cmp	r6, r0
  40253c:	d001      	beq.n	402542 <lv_obj_area_is_visible+0x56>
        return false;
  40253e:	4656      	mov	r6, sl
  402540:	e7de      	b.n	402500 <lv_obj_area_is_visible+0x14>
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
  402542:	4620      	mov	r0, r4
  402544:	4b25      	ldr	r3, [pc, #148]	; (4025dc <lv_obj_area_is_visible+0xf0>)
  402546:	4798      	blx	r3
    dest->y1 = src->y1;
  402548:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
  40254c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    dest->y2 = src->y2;
  402550:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.x1 -= ext_size;
  402554:	b280      	uxth	r0, r0
  402556:	8aa1      	ldrh	r1, [r4, #20]
  402558:	1a09      	subs	r1, r1, r0
  40255a:	f8ad 1000 	strh.w	r1, [sp]
    obj_coords.y1 -= ext_size;
  40255e:	1a12      	subs	r2, r2, r0
  402560:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  402564:	4403      	add	r3, r0
  402566:	f8ad 3004 	strh.w	r3, [sp, #4]
    obj_coords.y2 += ext_size;
  40256a:	4430      	add	r0, r6
  40256c:	f8ad 0006 	strh.w	r0, [sp, #6]
    is_common = _lv_area_intersect(area, area, &obj_coords);
  402570:	466a      	mov	r2, sp
  402572:	4629      	mov	r1, r5
  402574:	4628      	mov	r0, r5
  402576:	4b1a      	ldr	r3, [pc, #104]	; (4025e0 <lv_obj_area_is_visible+0xf4>)
  402578:	4798      	blx	r3
    if(is_common == false) return false;  /*The area is not on the object*/
  40257a:	4606      	mov	r6, r0
  40257c:	2800      	cmp	r0, #0
  40257e:	d0bf      	beq.n	402500 <lv_obj_area_is_visible+0x14>
    lv_obj_t * par = lv_obj_get_parent(obj);
  402580:	4620      	mov	r0, r4
  402582:	4b18      	ldr	r3, [pc, #96]	; (4025e4 <lv_obj_area_is_visible+0xf8>)
  402584:	4798      	blx	r3
    while(par != NULL) {
  402586:	4604      	mov	r4, r0
  402588:	2800      	cmp	r0, #0
  40258a:	d0b9      	beq.n	402500 <lv_obj_area_is_visible+0x14>
        is_common = _lv_area_intersect(area, area, &par->coords);
  40258c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4025e0 <lv_obj_area_is_visible+0xf4>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return
  402590:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4025c0 <lv_obj_area_is_visible+0xd4>
        par = lv_obj_get_parent(par);
  402594:	4f13      	ldr	r7, [pc, #76]	; (4025e4 <lv_obj_area_is_visible+0xf8>)
        is_common = _lv_area_intersect(area, area, &par->coords);
  402596:	f104 0214 	add.w	r2, r4, #20
  40259a:	4629      	mov	r1, r5
  40259c:	4628      	mov	r0, r5
  40259e:	47c0      	blx	r8
        if(is_common == false) return false;       /*If no common parts with parent break;*/
  4025a0:	4606      	mov	r6, r0
  4025a2:	2800      	cmp	r0, #0
  4025a4:	d0ac      	beq.n	402500 <lv_obj_area_is_visible+0x14>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return
  4025a6:	2101      	movs	r1, #1
  4025a8:	4620      	mov	r0, r4
  4025aa:	47c8      	blx	r9
  4025ac:	b928      	cbnz	r0, 4025ba <lv_obj_area_is_visible+0xce>
        par = lv_obj_get_parent(par);
  4025ae:	4620      	mov	r0, r4
  4025b0:	47b8      	blx	r7
    while(par != NULL) {
  4025b2:	4604      	mov	r4, r0
  4025b4:	2800      	cmp	r0, #0
  4025b6:	d1ee      	bne.n	402596 <lv_obj_area_is_visible+0xaa>
  4025b8:	e7a2      	b.n	402500 <lv_obj_area_is_visible+0x14>
                false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  4025ba:	4656      	mov	r6, sl
  4025bc:	e7a0      	b.n	402500 <lv_obj_area_is_visible+0x14>
  4025be:	bf00      	nop
  4025c0:	004013e5 	.word	0x004013e5
  4025c4:	00405d5d 	.word	0x00405d5d
  4025c8:	00405d6d 	.word	0x00405d6d
  4025cc:	004001d5 	.word	0x004001d5
  4025d0:	00400215 	.word	0x00400215
  4025d4:	00400255 	.word	0x00400255
  4025d8:	00400295 	.word	0x00400295
  4025dc:	00402021 	.word	0x00402021
  4025e0:	004107cd 	.word	0x004107cd
  4025e4:	00405ded 	.word	0x00405ded

004025e8 <lv_obj_invalidate_area>:
{
  4025e8:	b510      	push	{r4, lr}
  4025ea:	b082      	sub	sp, #8
  4025ec:	4604      	mov	r4, r0
    dest->x1 = src->x1;
  4025ee:	880b      	ldrh	r3, [r1, #0]
  4025f0:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
  4025f4:	884b      	ldrh	r3, [r1, #2]
  4025f6:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
  4025fa:	888b      	ldrh	r3, [r1, #4]
  4025fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
  402600:	88cb      	ldrh	r3, [r1, #6]
  402602:	f8ad 3006 	strh.w	r3, [sp, #6]
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  402606:	4669      	mov	r1, sp
  402608:	4b05      	ldr	r3, [pc, #20]	; (402620 <lv_obj_invalidate_area+0x38>)
  40260a:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  40260c:	b908      	cbnz	r0, 402612 <lv_obj_invalidate_area+0x2a>
}
  40260e:	b002      	add	sp, #8
  402610:	bd10      	pop	{r4, pc}
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  402612:	4620      	mov	r0, r4
  402614:	4b03      	ldr	r3, [pc, #12]	; (402624 <lv_obj_invalidate_area+0x3c>)
  402616:	4798      	blx	r3
  402618:	4669      	mov	r1, sp
  40261a:	4b03      	ldr	r3, [pc, #12]	; (402628 <lv_obj_invalidate_area+0x40>)
  40261c:	4798      	blx	r3
}
  40261e:	e7f6      	b.n	40260e <lv_obj_invalidate_area+0x26>
  402620:	004024ed 	.word	0x004024ed
  402624:	00405d6d 	.word	0x00405d6d
  402628:	00405e35 	.word	0x00405e35

0040262c <lv_obj_invalidate>:
{
  40262c:	b530      	push	{r4, r5, lr}
  40262e:	b083      	sub	sp, #12
  402630:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
  402632:	4b0e      	ldr	r3, [pc, #56]	; (40266c <lv_obj_invalidate+0x40>)
  402634:	4798      	blx	r3
    dest->y1 = src->y1;
  402636:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
  40263a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    dest->y2 = src->y2;
  40263e:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
    obj_coords.x1 -= ext_size;
  402642:	b280      	uxth	r0, r0
  402644:	8aa1      	ldrh	r1, [r4, #20]
  402646:	1a09      	subs	r1, r1, r0
  402648:	f8ad 1000 	strh.w	r1, [sp]
    obj_coords.y1 -= ext_size;
  40264c:	1a12      	subs	r2, r2, r0
  40264e:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  402652:	4403      	add	r3, r0
  402654:	f8ad 3004 	strh.w	r3, [sp, #4]
    obj_coords.y2 += ext_size;
  402658:	4428      	add	r0, r5
  40265a:	f8ad 0006 	strh.w	r0, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  40265e:	4669      	mov	r1, sp
  402660:	4620      	mov	r0, r4
  402662:	4b03      	ldr	r3, [pc, #12]	; (402670 <lv_obj_invalidate+0x44>)
  402664:	4798      	blx	r3
}
  402666:	b003      	add	sp, #12
  402668:	bd30      	pop	{r4, r5, pc}
  40266a:	bf00      	nop
  40266c:	00402021 	.word	0x00402021
  402670:	004025e9 	.word	0x004025e9

00402674 <lv_obj_move_to>:
{
  402674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402678:	b084      	sub	sp, #16
  40267a:	4604      	mov	r4, r0
  40267c:	460e      	mov	r6, r1
  40267e:	4615      	mov	r5, r2
    lv_obj_t * parent = obj->parent;
  402680:	6847      	ldr	r7, [r0, #4]
    if(parent) {
  402682:	b347      	cbz	r7, 4026d6 <lv_obj_move_to+0x62>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  402684:	f641 0212 	movw	r2, #6162	; 0x1812
  402688:	2100      	movs	r1, #0
  40268a:	4638      	mov	r0, r7
  40268c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 4027c4 <lv_obj_move_to+0x150>
  402690:	47c0      	blx	r8
  402692:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  402694:	f641 0210 	movw	r2, #6160	; 0x1810
  402698:	2100      	movs	r1, #0
  40269a:	4638      	mov	r0, r7
  40269c:	47c0      	blx	r8
  40269e:	4680      	mov	r8, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
  4026a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4026a4:	4620      	mov	r0, r4
  4026a6:	4b46      	ldr	r3, [pc, #280]	; (4027c0 <lv_obj_move_to+0x14c>)
  4026a8:	4798      	blx	r3
  4026aa:	2800      	cmp	r0, #0
  4026ac:	d068      	beq.n	402780 <lv_obj_move_to+0x10c>
            x += pad_left + parent->coords.x1;
  4026ae:	444e      	add	r6, r9
  4026b0:	f8b7 9014 	ldrh.w	r9, [r7, #20]
  4026b4:	444e      	add	r6, r9
  4026b6:	b236      	sxth	r6, r6
            y += pad_top + parent->coords.y1;
  4026b8:	4445      	add	r5, r8
  4026ba:	8af8      	ldrh	r0, [r7, #22]
  4026bc:	4405      	add	r5, r0
  4026be:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  4026c0:	f241 0232 	movw	r2, #4146	; 0x1032
  4026c4:	2100      	movs	r1, #0
  4026c6:	4638      	mov	r0, r7
  4026c8:	4b3e      	ldr	r3, [pc, #248]	; (4027c4 <lv_obj_move_to+0x150>)
  4026ca:	4798      	blx	r3
        x += border_width;
  4026cc:	b280      	uxth	r0, r0
  4026ce:	4406      	add	r6, r0
  4026d0:	b236      	sxth	r6, r6
        y += border_width;
  4026d2:	4405      	add	r5, r0
  4026d4:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  4026d6:	8aa1      	ldrh	r1, [r4, #20]
  4026d8:	1a71      	subs	r1, r6, r1
  4026da:	b28e      	uxth	r6, r1
  4026dc:	fa0f f886 	sxth.w	r8, r6
    diff.y = y - obj->coords.y1;
  4026e0:	8ae0      	ldrh	r0, [r4, #22]
  4026e2:	1a2d      	subs	r5, r5, r0
  4026e4:	b2ad      	uxth	r5, r5
  4026e6:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  4026ea:	f1b9 0f00 	cmp.w	r9, #0
  4026ee:	bf08      	it	eq
  4026f0:	f1b8 0f00 	cmpeq.w	r8, #0
  4026f4:	bf0c      	ite	eq
  4026f6:	f04f 0a01 	moveq.w	sl, #1
  4026fa:	f04f 0a00 	movne.w	sl, #0
  4026fe:	d03c      	beq.n	40277a <lv_obj_move_to+0x106>
    lv_obj_invalidate(obj);
  402700:	4620      	mov	r0, r4
  402702:	4b31      	ldr	r3, [pc, #196]	; (4027c8 <lv_obj_move_to+0x154>)
  402704:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  402706:	a902      	add	r1, sp, #8
  402708:	4620      	mov	r0, r4
  40270a:	4b30      	ldr	r3, [pc, #192]	; (4027cc <lv_obj_move_to+0x158>)
  40270c:	4798      	blx	r3
    if(parent) {
  40270e:	b15f      	cbz	r7, 402728 <lv_obj_move_to+0xb4>
        lv_obj_get_content_coords(parent, &parent_fit_area);
  402710:	4669      	mov	r1, sp
  402712:	4638      	mov	r0, r7
  402714:	4b2e      	ldr	r3, [pc, #184]	; (4027d0 <lv_obj_move_to+0x15c>)
  402716:	4798      	blx	r3
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
  402718:	2200      	movs	r2, #0
  40271a:	4669      	mov	r1, sp
  40271c:	a802      	add	r0, sp, #8
  40271e:	4b2d      	ldr	r3, [pc, #180]	; (4027d4 <lv_obj_move_to+0x160>)
  402720:	4798      	blx	r3
        if(!on1) lv_obj_scrollbar_invalidate(parent);
  402722:	4682      	mov	sl, r0
  402724:	2800      	cmp	r0, #0
  402726:	d042      	beq.n	4027ae <lv_obj_move_to+0x13a>
    obj->coords.x1 += diff.x;
  402728:	8aa3      	ldrh	r3, [r4, #20]
  40272a:	4433      	add	r3, r6
  40272c:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
  40272e:	8ae3      	ldrh	r3, [r4, #22]
  402730:	442b      	add	r3, r5
  402732:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
  402734:	8b21      	ldrh	r1, [r4, #24]
  402736:	4431      	add	r1, r6
  402738:	8321      	strh	r1, [r4, #24]
    obj->coords.y2 += diff.y;
  40273a:	8b63      	ldrh	r3, [r4, #26]
  40273c:	441d      	add	r5, r3
  40273e:	8365      	strh	r5, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
  402740:	2300      	movs	r3, #0
  402742:	464a      	mov	r2, r9
  402744:	4641      	mov	r1, r8
  402746:	4620      	mov	r0, r4
  402748:	4d23      	ldr	r5, [pc, #140]	; (4027d8 <lv_obj_move_to+0x164>)
  40274a:	47a8      	blx	r5
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
  40274c:	2f00      	cmp	r7, #0
  40274e:	d032      	beq.n	4027b6 <lv_obj_move_to+0x142>
  402750:	4622      	mov	r2, r4
  402752:	2122      	movs	r1, #34	; 0x22
  402754:	4638      	mov	r0, r7
  402756:	4b21      	ldr	r3, [pc, #132]	; (4027dc <lv_obj_move_to+0x168>)
  402758:	4798      	blx	r3
    lv_obj_invalidate(obj);
  40275a:	4620      	mov	r0, r4
  40275c:	4b1a      	ldr	r3, [pc, #104]	; (4027c8 <lv_obj_move_to+0x154>)
  40275e:	4798      	blx	r3
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
  402760:	2200      	movs	r2, #0
  402762:	4669      	mov	r1, sp
  402764:	f104 0014 	add.w	r0, r4, #20
  402768:	4b1a      	ldr	r3, [pc, #104]	; (4027d4 <lv_obj_move_to+0x160>)
  40276a:	4798      	blx	r3
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
  40276c:	f1ba 0f00 	cmp.w	sl, #0
  402770:	d100      	bne.n	402774 <lv_obj_move_to+0x100>
  402772:	b110      	cbz	r0, 40277a <lv_obj_move_to+0x106>
  402774:	4638      	mov	r0, r7
  402776:	4b1a      	ldr	r3, [pc, #104]	; (4027e0 <lv_obj_move_to+0x16c>)
  402778:	4798      	blx	r3
}
  40277a:	b004      	add	sp, #16
  40277c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
  402780:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
  402784:	fa00 f989 	sxtah	r9, r0, r9
  402788:	4638      	mov	r0, r7
  40278a:	4b16      	ldr	r3, [pc, #88]	; (4027e4 <lv_obj_move_to+0x170>)
  40278c:	4798      	blx	r3
  40278e:	eba9 0900 	sub.w	r9, r9, r0
  402792:	444e      	add	r6, r9
  402794:	b236      	sxth	r6, r6
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
  402796:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
  40279a:	fa00 f888 	sxtah	r8, r0, r8
  40279e:	4638      	mov	r0, r7
  4027a0:	4b11      	ldr	r3, [pc, #68]	; (4027e8 <lv_obj_move_to+0x174>)
  4027a2:	4798      	blx	r3
  4027a4:	eba8 0000 	sub.w	r0, r8, r0
  4027a8:	4405      	add	r5, r0
  4027aa:	b22d      	sxth	r5, r5
  4027ac:	e788      	b.n	4026c0 <lv_obj_move_to+0x4c>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
  4027ae:	4638      	mov	r0, r7
  4027b0:	4b0b      	ldr	r3, [pc, #44]	; (4027e0 <lv_obj_move_to+0x16c>)
  4027b2:	4798      	blx	r3
  4027b4:	e7b8      	b.n	402728 <lv_obj_move_to+0xb4>
    lv_obj_invalidate(obj);
  4027b6:	4620      	mov	r0, r4
  4027b8:	4b03      	ldr	r3, [pc, #12]	; (4027c8 <lv_obj_move_to+0x154>)
  4027ba:	4798      	blx	r3
  4027bc:	e7dd      	b.n	40277a <lv_obj_move_to+0x106>
  4027be:	bf00      	nop
  4027c0:	004013e5 	.word	0x004013e5
  4027c4:	00404f1d 	.word	0x00404f1d
  4027c8:	0040262d 	.word	0x0040262d
  4027cc:	004022b9 	.word	0x004022b9
  4027d0:	0040236d 	.word	0x0040236d
  4027d4:	00410991 	.word	0x00410991
  4027d8:	00402471 	.word	0x00402471
  4027dc:	00400491 	.word	0x00400491
  4027e0:	00404c05 	.word	0x00404c05
  4027e4:	004039d9 	.word	0x004039d9
  4027e8:	00403a0d 	.word	0x00403a0d

004027ec <lv_obj_refr_pos>:
{
  4027ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027f0:	b085      	sub	sp, #20
  4027f2:	4604      	mov	r4, r0
    if(lv_obj_is_layout_positioned(obj)) return;
  4027f4:	4bbb      	ldr	r3, [pc, #748]	; (402ae4 <lv_obj_refr_pos+0x2f8>)
  4027f6:	4798      	blx	r3
  4027f8:	b110      	cbz	r0, 402800 <lv_obj_refr_pos+0x14>
}
  4027fa:	b005      	add	sp, #20
  4027fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
  402800:	4620      	mov	r0, r4
  402802:	4bb9      	ldr	r3, [pc, #740]	; (402ae8 <lv_obj_refr_pos+0x2fc>)
  402804:	4798      	blx	r3
  402806:	4680      	mov	r8, r0
  402808:	9000      	str	r0, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
  40280a:	f241 0207 	movw	r2, #4103	; 0x1007
  40280e:	2100      	movs	r1, #0
  402810:	4620      	mov	r0, r4
  402812:	4db6      	ldr	r5, [pc, #728]	; (402aec <lv_obj_refr_pos+0x300>)
  402814:	47a8      	blx	r5
  402816:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
  402818:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
  40281a:	f241 0208 	movw	r2, #4104	; 0x1008
  40281e:	2100      	movs	r1, #0
  402820:	4620      	mov	r0, r4
  402822:	47a8      	blx	r5
  402824:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
  402826:	b205      	sxth	r5, r0
    if(parent == NULL) {
  402828:	4643      	mov	r3, r8
  40282a:	2b00      	cmp	r3, #0
  40282c:	d05d      	beq.n	4028ea <lv_obj_refr_pos+0xfe>
    lv_coord_t pw = lv_obj_get_content_width(parent);
  40282e:	f8dd 8000 	ldr.w	r8, [sp]
  402832:	4640      	mov	r0, r8
  402834:	4bae      	ldr	r3, [pc, #696]	; (402af0 <lv_obj_refr_pos+0x304>)
  402836:	4798      	blx	r3
  402838:	9001      	str	r0, [sp, #4]
    lv_coord_t ph = lv_obj_get_content_height(parent);
  40283a:	4640      	mov	r0, r8
  40283c:	4bad      	ldr	r3, [pc, #692]	; (402af4 <lv_obj_refr_pos+0x308>)
  40283e:	4798      	blx	r3
  402840:	9002      	str	r0, [sp, #8]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
  402842:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
  402846:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
  40284a:	d054      	beq.n	4028f6 <lv_obj_refr_pos+0x10a>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
  40284c:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
  402850:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
  402854:	d064      	beq.n	402920 <lv_obj_refr_pos+0x134>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
  402856:	f243 020c 	movw	r2, #12300	; 0x300c
  40285a:	2100      	movs	r1, #0
  40285c:	4620      	mov	r0, r4
  40285e:	f8df 928c 	ldr.w	r9, [pc, #652]	; 402aec <lv_obj_refr_pos+0x300>
  402862:	47c8      	blx	r9
  402864:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
  402866:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
  40286a:	f243 020d 	movw	r2, #12301	; 0x300d
  40286e:	2100      	movs	r1, #0
  402870:	4620      	mov	r0, r4
  402872:	47c8      	blx	r9
    return (lv_coord_t)v.num;
  402874:	b202      	sxth	r2, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  402876:	8b23      	ldrh	r3, [r4, #24]
  402878:	3301      	adds	r3, #1
  40287a:	8aa1      	ldrh	r1, [r4, #20]
  40287c:	1a5b      	subs	r3, r3, r1
  40287e:	fa1f f883 	uxth.w	r8, r3
  402882:	fa0f fa88 	sxth.w	sl, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  402886:	8b63      	ldrh	r3, [r4, #26]
  402888:	3301      	adds	r3, #1
  40288a:	8ae1      	ldrh	r1, [r4, #22]
  40288c:	1a5b      	subs	r3, r3, r1
  40288e:	b29b      	uxth	r3, r3
  402890:	9303      	str	r3, [sp, #12]
  402892:	fa0f f983 	sxth.w	r9, r3
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
  402896:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
  40289a:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
  40289e:	d054      	beq.n	40294a <lv_obj_refr_pos+0x15e>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
  4028a0:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
  4028a4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  4028a8:	d065      	beq.n	402976 <lv_obj_refr_pos+0x18a>
    x += tr_x;
  4028aa:	445e      	add	r6, fp
  4028ac:	b2b6      	uxth	r6, r6
  4028ae:	b237      	sxth	r7, r6
    y += tr_y;
  4028b0:	4415      	add	r5, r2
  4028b2:	b2ad      	uxth	r5, r5
  4028b4:	fa0f fb85 	sxth.w	fp, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  4028b8:	f241 0209 	movw	r2, #4105	; 0x1009
  4028bc:	2100      	movs	r1, #0
  4028be:	4620      	mov	r0, r4
  4028c0:	4b8a      	ldr	r3, [pc, #552]	; (402aec <lv_obj_refr_pos+0x300>)
  4028c2:	4798      	blx	r3
    return (lv_align_t)v.num;
  4028c4:	b2c0      	uxtb	r0, r0
    if(align == LV_ALIGN_DEFAULT) {
  4028c6:	2800      	cmp	r0, #0
  4028c8:	d069      	beq.n	40299e <lv_obj_refr_pos+0x1b2>
    if(align == LV_ALIGN_TOP_LEFT) {
  4028ca:	2801      	cmp	r0, #1
  4028cc:	d070      	beq.n	4029b0 <lv_obj_refr_pos+0x1c4>
        switch(align) {
  4028ce:	3802      	subs	r0, #2
  4028d0:	2807      	cmp	r0, #7
  4028d2:	f200 8083 	bhi.w	4029dc <lv_obj_refr_pos+0x1f0>
  4028d6:	e8df f010 	tbh	[pc, r0, lsl #1]
  4028da:	0071      	.short	0x0071
  4028dc:	009f0087 	.word	0x009f0087
  4028e0:	00bf00a7 	.word	0x00bf00a7
  4028e4:	00cc008d 	.word	0x00cc008d
  4028e8:	00e3      	.short	0x00e3
        lv_obj_move_to(obj, x, y);
  4028ea:	462a      	mov	r2, r5
  4028ec:	4631      	mov	r1, r6
  4028ee:	4620      	mov	r0, r4
  4028f0:	4b81      	ldr	r3, [pc, #516]	; (402af8 <lv_obj_refr_pos+0x30c>)
  4028f2:	4798      	blx	r3
        return;
  4028f4:	e781      	b.n	4027fa <lv_obj_refr_pos+0xe>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
  4028f6:	f426 43c0 	bic.w	r3, r6, #24576	; 0x6000
  4028fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  4028fe:	dca5      	bgt.n	40284c <lv_obj_refr_pos+0x60>
  402900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402904:	bfc8      	it	gt
  402906:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  40290a:	9a01      	ldr	r2, [sp, #4]
  40290c:	fb02 f303 	mul.w	r3, r2, r3
  402910:	4a7a      	ldr	r2, [pc, #488]	; (402afc <lv_obj_refr_pos+0x310>)
  402912:	fb82 1203 	smull	r1, r2, r2, r3
  402916:	17de      	asrs	r6, r3, #31
  402918:	ebc6 1662 	rsb	r6, r6, r2, asr #5
  40291c:	b236      	sxth	r6, r6
  40291e:	e795      	b.n	40284c <lv_obj_refr_pos+0x60>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
  402920:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
  402924:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  402928:	dc95      	bgt.n	402856 <lv_obj_refr_pos+0x6a>
  40292a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40292e:	bfc8      	it	gt
  402930:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  402934:	9a02      	ldr	r2, [sp, #8]
  402936:	fb02 f303 	mul.w	r3, r2, r3
  40293a:	4a70      	ldr	r2, [pc, #448]	; (402afc <lv_obj_refr_pos+0x310>)
  40293c:	fb82 1203 	smull	r1, r2, r2, r3
  402940:	17dd      	asrs	r5, r3, #31
  402942:	ebc5 1562 	rsb	r5, r5, r2, asr #5
  402946:	b22d      	sxth	r5, r5
  402948:	e785      	b.n	402856 <lv_obj_refr_pos+0x6a>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
  40294a:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
  40294e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  402952:	dca5      	bgt.n	4028a0 <lv_obj_refr_pos+0xb4>
  402954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402958:	bfc8      	it	gt
  40295a:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  40295e:	fb0a f303 	mul.w	r3, sl, r3
  402962:	4966      	ldr	r1, [pc, #408]	; (402afc <lv_obj_refr_pos+0x310>)
  402964:	fb81 7103 	smull	r7, r1, r1, r3
  402968:	ea4f 7be3 	mov.w	fp, r3, asr #31
  40296c:	ebcb 1b61 	rsb	fp, fp, r1, asr #5
  402970:	fa0f fb8b 	sxth.w	fp, fp
  402974:	e794      	b.n	4028a0 <lv_obj_refr_pos+0xb4>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
  402976:	f422 43c0 	bic.w	r3, r2, #24576	; 0x6000
  40297a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40297e:	dc94      	bgt.n	4028aa <lv_obj_refr_pos+0xbe>
  402980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402984:	bfc8      	it	gt
  402986:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  40298a:	fb09 f303 	mul.w	r3, r9, r3
  40298e:	495b      	ldr	r1, [pc, #364]	; (402afc <lv_obj_refr_pos+0x310>)
  402990:	fb81 2103 	smull	r2, r1, r1, r3
  402994:	17da      	asrs	r2, r3, #31
  402996:	ebc2 1261 	rsb	r2, r2, r1, asr #5
  40299a:	b212      	sxth	r2, r2
  40299c:	e785      	b.n	4028aa <lv_obj_refr_pos+0xbe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  40299e:	f241 426a 	movw	r2, #5226	; 0x146a
  4029a2:	2100      	movs	r1, #0
  4029a4:	9800      	ldr	r0, [sp, #0]
  4029a6:	4b51      	ldr	r3, [pc, #324]	; (402aec <lv_obj_refr_pos+0x300>)
  4029a8:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  4029aa:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
  4029ac:	2801      	cmp	r0, #1
  4029ae:	d01b      	beq.n	4029e8 <lv_obj_refr_pos+0x1fc>
        lv_obj_move_to(obj, x, y);
  4029b0:	465a      	mov	r2, fp
  4029b2:	4639      	mov	r1, r7
  4029b4:	4620      	mov	r0, r4
  4029b6:	4b50      	ldr	r3, [pc, #320]	; (402af8 <lv_obj_refr_pos+0x30c>)
  4029b8:	4798      	blx	r3
  4029ba:	e71e      	b.n	4027fa <lv_obj_refr_pos+0xe>
                x += pw / 2 - w / 2;
  4029bc:	9a01      	ldr	r2, [sp, #4]
  4029be:	4613      	mov	r3, r2
  4029c0:	2a00      	cmp	r2, #0
  4029c2:	bfb8      	it	lt
  4029c4:	3301      	addlt	r3, #1
  4029c6:	105b      	asrs	r3, r3, #1
  4029c8:	4657      	mov	r7, sl
  4029ca:	f1ba 0f00 	cmp.w	sl, #0
  4029ce:	bfb8      	it	lt
  4029d0:	f10a 0701 	addlt.w	r7, sl, #1
  4029d4:	eba3 0767 	sub.w	r7, r3, r7, asr #1
  4029d8:	443e      	add	r6, r7
  4029da:	b237      	sxth	r7, r6
        lv_obj_move_to(obj, x, y);
  4029dc:	465a      	mov	r2, fp
  4029de:	4639      	mov	r1, r7
  4029e0:	4620      	mov	r0, r4
  4029e2:	4b45      	ldr	r3, [pc, #276]	; (402af8 <lv_obj_refr_pos+0x30c>)
  4029e4:	4798      	blx	r3
  4029e6:	e708      	b.n	4027fa <lv_obj_refr_pos+0xe>
                x += pw - w;
  4029e8:	9b01      	ldr	r3, [sp, #4]
  4029ea:	eba3 0708 	sub.w	r7, r3, r8
  4029ee:	443e      	add	r6, r7
  4029f0:	b237      	sxth	r7, r6
                break;
  4029f2:	e7f3      	b.n	4029dc <lv_obj_refr_pos+0x1f0>
                y += ph / 2 - h / 2;
  4029f4:	9a02      	ldr	r2, [sp, #8]
  4029f6:	4613      	mov	r3, r2
  4029f8:	2a00      	cmp	r2, #0
  4029fa:	bfb8      	it	lt
  4029fc:	3301      	addlt	r3, #1
  4029fe:	105b      	asrs	r3, r3, #1
  402a00:	46cb      	mov	fp, r9
  402a02:	f1b9 0f00 	cmp.w	r9, #0
  402a06:	bfb8      	it	lt
  402a08:	f109 0b01 	addlt.w	fp, r9, #1
  402a0c:	eba3 0b6b 	sub.w	fp, r3, fp, asr #1
  402a10:	445d      	add	r5, fp
  402a12:	fa0f fb85 	sxth.w	fp, r5
                break;
  402a16:	e7e1      	b.n	4029dc <lv_obj_refr_pos+0x1f0>
                y += ph - h;
  402a18:	9b02      	ldr	r3, [sp, #8]
  402a1a:	9a03      	ldr	r2, [sp, #12]
  402a1c:	eba3 0b02 	sub.w	fp, r3, r2
  402a20:	445d      	add	r5, fp
  402a22:	fa0f fb85 	sxth.w	fp, r5
                break;
  402a26:	e7d9      	b.n	4029dc <lv_obj_refr_pos+0x1f0>
                x += pw / 2 - w / 2;
  402a28:	9a01      	ldr	r2, [sp, #4]
  402a2a:	4613      	mov	r3, r2
  402a2c:	2a00      	cmp	r2, #0
  402a2e:	bfb8      	it	lt
  402a30:	3301      	addlt	r3, #1
  402a32:	105b      	asrs	r3, r3, #1
  402a34:	4657      	mov	r7, sl
  402a36:	f1ba 0f00 	cmp.w	sl, #0
  402a3a:	bfb8      	it	lt
  402a3c:	f10a 0701 	addlt.w	r7, sl, #1
  402a40:	eba3 0767 	sub.w	r7, r3, r7, asr #1
  402a44:	443e      	add	r6, r7
  402a46:	b237      	sxth	r7, r6
                y += ph - h;
  402a48:	9b02      	ldr	r3, [sp, #8]
  402a4a:	9a03      	ldr	r2, [sp, #12]
  402a4c:	eba3 0b02 	sub.w	fp, r3, r2
  402a50:	445d      	add	r5, fp
  402a52:	fa0f fb85 	sxth.w	fp, r5
                break;
  402a56:	e7c1      	b.n	4029dc <lv_obj_refr_pos+0x1f0>
                x += pw - w;
  402a58:	9b01      	ldr	r3, [sp, #4]
  402a5a:	eba3 0708 	sub.w	r7, r3, r8
  402a5e:	443e      	add	r6, r7
  402a60:	b237      	sxth	r7, r6
                y += ph - h;
  402a62:	9b02      	ldr	r3, [sp, #8]
  402a64:	9a03      	ldr	r2, [sp, #12]
  402a66:	eba3 0b02 	sub.w	fp, r3, r2
  402a6a:	445d      	add	r5, fp
  402a6c:	fa0f fb85 	sxth.w	fp, r5
                break;
  402a70:	e7b4      	b.n	4029dc <lv_obj_refr_pos+0x1f0>
                x += pw - w;
  402a72:	9b01      	ldr	r3, [sp, #4]
  402a74:	eba3 0708 	sub.w	r7, r3, r8
  402a78:	443e      	add	r6, r7
  402a7a:	b237      	sxth	r7, r6
                y += ph / 2 - h / 2;
  402a7c:	9a02      	ldr	r2, [sp, #8]
  402a7e:	4613      	mov	r3, r2
  402a80:	2a00      	cmp	r2, #0
  402a82:	bfb8      	it	lt
  402a84:	3301      	addlt	r3, #1
  402a86:	105b      	asrs	r3, r3, #1
  402a88:	46cb      	mov	fp, r9
  402a8a:	f1b9 0f00 	cmp.w	r9, #0
  402a8e:	bfb8      	it	lt
  402a90:	f109 0b01 	addlt.w	fp, r9, #1
  402a94:	eba3 0b6b 	sub.w	fp, r3, fp, asr #1
  402a98:	445d      	add	r5, fp
  402a9a:	fa0f fb85 	sxth.w	fp, r5
                break;
  402a9e:	e79d      	b.n	4029dc <lv_obj_refr_pos+0x1f0>
                x += pw / 2 - w / 2;
  402aa0:	9a01      	ldr	r2, [sp, #4]
  402aa2:	4613      	mov	r3, r2
  402aa4:	2a00      	cmp	r2, #0
  402aa6:	bfb8      	it	lt
  402aa8:	3301      	addlt	r3, #1
  402aaa:	105b      	asrs	r3, r3, #1
  402aac:	4657      	mov	r7, sl
  402aae:	f1ba 0f00 	cmp.w	sl, #0
  402ab2:	bfb8      	it	lt
  402ab4:	f10a 0701 	addlt.w	r7, sl, #1
  402ab8:	eba3 0767 	sub.w	r7, r3, r7, asr #1
  402abc:	443e      	add	r6, r7
  402abe:	b237      	sxth	r7, r6
                y += ph / 2 - h / 2;
  402ac0:	9a02      	ldr	r2, [sp, #8]
  402ac2:	4613      	mov	r3, r2
  402ac4:	2a00      	cmp	r2, #0
  402ac6:	bfb8      	it	lt
  402ac8:	3301      	addlt	r3, #1
  402aca:	105b      	asrs	r3, r3, #1
  402acc:	46cb      	mov	fp, r9
  402ace:	f1b9 0f00 	cmp.w	r9, #0
  402ad2:	bfb8      	it	lt
  402ad4:	f109 0b01 	addlt.w	fp, r9, #1
  402ad8:	eba3 0b6b 	sub.w	fp, r3, fp, asr #1
  402adc:	445d      	add	r5, fp
  402ade:	fa0f fb85 	sxth.w	fp, r5
                break;
  402ae2:	e77b      	b.n	4029dc <lv_obj_refr_pos+0x1f0>
  402ae4:	0040219d 	.word	0x0040219d
  402ae8:	00405ded 	.word	0x00405ded
  402aec:	00404f1d 	.word	0x00404f1d
  402af0:	004022ed 	.word	0x004022ed
  402af4:	0040232d 	.word	0x0040232d
  402af8:	00402675 	.word	0x00402675
  402afc:	51eb851f 	.word	0x51eb851f

00402b00 <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
  402b00:	b430      	push	{r4, r5}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
  402b02:	f401 44c0 	and.w	r4, r1, #24576	; 0x6000
  402b06:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  402b0a:	d00c      	beq.n	402b26 <lv_clamp_width+0x26>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
  402b0c:	f402 44c0 	and.w	r4, r2, #24576	; 0x6000
  402b10:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  402b14:	d01b      	beq.n	402b4e <lv_clamp_width+0x4e>
    return LV_CLAMP(min_width, width, max_width);
  402b16:	4290      	cmp	r0, r2
  402b18:	bfa8      	it	ge
  402b1a:	4610      	movge	r0, r2
}
  402b1c:	4288      	cmp	r0, r1
  402b1e:	bfb8      	it	lt
  402b20:	4608      	movlt	r0, r1
  402b22:	bc30      	pop	{r4, r5}
  402b24:	4770      	bx	lr
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
  402b26:	f421 44c0 	bic.w	r4, r1, #24576	; 0x6000
  402b2a:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
  402b2e:	dced      	bgt.n	402b0c <lv_clamp_width+0xc>
  402b30:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
  402b34:	bfc8      	it	gt
  402b36:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
  402b3a:	fb03 f404 	mul.w	r4, r3, r4
  402b3e:	4d0e      	ldr	r5, [pc, #56]	; (402b78 <lv_clamp_width+0x78>)
  402b40:	fb85 1504 	smull	r1, r5, r5, r4
  402b44:	17e1      	asrs	r1, r4, #31
  402b46:	ebc1 1165 	rsb	r1, r1, r5, asr #5
  402b4a:	b209      	sxth	r1, r1
  402b4c:	e7de      	b.n	402b0c <lv_clamp_width+0xc>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
  402b4e:	f422 44c0 	bic.w	r4, r2, #24576	; 0x6000
  402b52:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
  402b56:	dcde      	bgt.n	402b16 <lv_clamp_width+0x16>
  402b58:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
  402b5c:	bfc8      	it	gt
  402b5e:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
  402b62:	fb03 f304 	mul.w	r3, r3, r4
  402b66:	4a04      	ldr	r2, [pc, #16]	; (402b78 <lv_clamp_width+0x78>)
  402b68:	fb82 4203 	smull	r4, r2, r2, r3
  402b6c:	17db      	asrs	r3, r3, #31
  402b6e:	ebc3 1262 	rsb	r2, r3, r2, asr #5
  402b72:	b212      	sxth	r2, r2
  402b74:	e7cf      	b.n	402b16 <lv_clamp_width+0x16>
  402b76:	bf00      	nop
  402b78:	51eb851f 	.word	0x51eb851f

00402b7c <lv_clamp_height>:

lv_coord_t lv_clamp_height(lv_coord_t height, lv_coord_t min_height, lv_coord_t max_height, lv_coord_t ref_height)
{
  402b7c:	b430      	push	{r4, r5}
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
  402b7e:	f401 44c0 	and.w	r4, r1, #24576	; 0x6000
  402b82:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  402b86:	d00c      	beq.n	402ba2 <lv_clamp_height+0x26>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
  402b88:	f402 44c0 	and.w	r4, r2, #24576	; 0x6000
  402b8c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  402b90:	d01b      	beq.n	402bca <lv_clamp_height+0x4e>
    return LV_CLAMP(min_height, height, max_height);
  402b92:	4290      	cmp	r0, r2
  402b94:	bfa8      	it	ge
  402b96:	4610      	movge	r0, r2
}
  402b98:	4288      	cmp	r0, r1
  402b9a:	bfb8      	it	lt
  402b9c:	4608      	movlt	r0, r1
  402b9e:	bc30      	pop	{r4, r5}
  402ba0:	4770      	bx	lr
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
  402ba2:	f421 44c0 	bic.w	r4, r1, #24576	; 0x6000
  402ba6:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
  402baa:	dced      	bgt.n	402b88 <lv_clamp_height+0xc>
  402bac:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
  402bb0:	bfc8      	it	gt
  402bb2:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
  402bb6:	fb03 f404 	mul.w	r4, r3, r4
  402bba:	4d0e      	ldr	r5, [pc, #56]	; (402bf4 <lv_clamp_height+0x78>)
  402bbc:	fb85 1504 	smull	r1, r5, r5, r4
  402bc0:	17e1      	asrs	r1, r4, #31
  402bc2:	ebc1 1165 	rsb	r1, r1, r5, asr #5
  402bc6:	b209      	sxth	r1, r1
  402bc8:	e7de      	b.n	402b88 <lv_clamp_height+0xc>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
  402bca:	f422 44c0 	bic.w	r4, r2, #24576	; 0x6000
  402bce:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
  402bd2:	dcde      	bgt.n	402b92 <lv_clamp_height+0x16>
  402bd4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
  402bd8:	bfc8      	it	gt
  402bda:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
  402bde:	fb03 f304 	mul.w	r3, r3, r4
  402be2:	4a04      	ldr	r2, [pc, #16]	; (402bf4 <lv_clamp_height+0x78>)
  402be4:	fb82 4203 	smull	r4, r2, r2, r3
  402be8:	17db      	asrs	r3, r3, #31
  402bea:	ebc3 1262 	rsb	r2, r3, r2, asr #5
  402bee:	b212      	sxth	r2, r2
  402bf0:	e7cf      	b.n	402b92 <lv_clamp_height+0x16>
  402bf2:	bf00      	nop
  402bf4:	51eb851f 	.word	0x51eb851f

00402bf8 <lv_obj_refr_size>:
    if(obj->w_layout && obj->h_layout) return false;
  402bf8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
  402bfc:	f003 0306 	and.w	r3, r3, #6
  402c00:	2b06      	cmp	r3, #6
  402c02:	f000 835c 	beq.w	4032be <lv_obj_refr_size+0x6c6>
{
  402c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c0a:	b08b      	sub	sp, #44	; 0x2c
  402c0c:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
  402c0e:	4bac      	ldr	r3, [pc, #688]	; (402ec0 <lv_obj_refr_size+0x2c8>)
  402c10:	4798      	blx	r3
    if(parent == NULL) return false;
  402c12:	4605      	mov	r5, r0
  402c14:	2800      	cmp	r0, #0
  402c16:	f000 8354 	beq.w	4032c2 <lv_obj_refr_size+0x6ca>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
  402c1a:	4620      	mov	r0, r4
  402c1c:	4ba9      	ldr	r3, [pc, #676]	; (402ec4 <lv_obj_refr_size+0x2cc>)
  402c1e:	4798      	blx	r3
  402c20:	9000      	str	r0, [sp, #0]
    if(obj->w_layout) {
  402c22:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  402c26:	f013 0f04 	tst.w	r3, #4
  402c2a:	d071      	beq.n	402d10 <lv_obj_refr_size+0x118>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  402c2c:	8b27      	ldrh	r7, [r4, #24]
  402c2e:	3701      	adds	r7, #1
  402c30:	8aa3      	ldrh	r3, [r4, #20]
  402c32:	1aff      	subs	r7, r7, r3
  402c34:	b23f      	sxth	r7, r7
    bool w_is_content = false;
  402c36:	2600      	movs	r6, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
  402c38:	4620      	mov	r0, r4
  402c3a:	4ba3      	ldr	r3, [pc, #652]	; (402ec8 <lv_obj_refr_size+0x2d0>)
  402c3c:	4798      	blx	r3
  402c3e:	9001      	str	r0, [sp, #4]
    if(obj->h_layout) {
  402c40:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  402c44:	f013 0f02 	tst.w	r3, #2
  402c48:	f000 8202 	beq.w	403050 <lv_obj_refr_size+0x458>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  402c4c:	f8b4 901a 	ldrh.w	r9, [r4, #26]
  402c50:	f109 0901 	add.w	r9, r9, #1
  402c54:	8ae3      	ldrh	r3, [r4, #22]
  402c56:	eba9 0903 	sub.w	r9, r9, r3
  402c5a:	fa0f f989 	sxth.w	r9, r9
    bool h_is_content = false;
  402c5e:	f04f 0800 	mov.w	r8, #0
    if(w_is_content || h_is_content) {
  402c62:	2e00      	cmp	r6, #0
  402c64:	f040 8311 	bne.w	40328a <lv_obj_refr_size+0x692>
  402c68:	f1b8 0f00 	cmp.w	r8, #0
  402c6c:	f040 830d 	bne.w	40328a <lv_obj_refr_size+0x692>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  402c70:	8b23      	ldrh	r3, [r4, #24]
  402c72:	3301      	adds	r3, #1
  402c74:	8aa2      	ldrh	r2, [r4, #20]
  402c76:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
  402c78:	b21b      	sxth	r3, r3
  402c7a:	429f      	cmp	r7, r3
  402c7c:	f000 830c 	beq.w	403298 <lv_obj_refr_size+0x6a0>
    lv_obj_invalidate(obj);
  402c80:	4620      	mov	r0, r4
  402c82:	4b92      	ldr	r3, [pc, #584]	; (402ecc <lv_obj_refr_size+0x2d4>)
  402c84:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  402c86:	a908      	add	r1, sp, #32
  402c88:	4620      	mov	r0, r4
  402c8a:	4b91      	ldr	r3, [pc, #580]	; (402ed0 <lv_obj_refr_size+0x2d8>)
  402c8c:	4798      	blx	r3
    lv_obj_get_content_coords(parent, &parent_fit_area);
  402c8e:	a906      	add	r1, sp, #24
  402c90:	4628      	mov	r0, r5
  402c92:	4b90      	ldr	r3, [pc, #576]	; (402ed4 <lv_obj_refr_size+0x2dc>)
  402c94:	4798      	blx	r3
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
  402c96:	2200      	movs	r2, #0
  402c98:	a906      	add	r1, sp, #24
  402c9a:	a808      	add	r0, sp, #32
  402c9c:	4b8e      	ldr	r3, [pc, #568]	; (402ed8 <lv_obj_refr_size+0x2e0>)
  402c9e:	4798      	blx	r3
    if(!on1) lv_obj_scrollbar_invalidate(parent);
  402ca0:	4606      	mov	r6, r0
  402ca2:	2800      	cmp	r0, #0
  402ca4:	f000 8302 	beq.w	4032ac <lv_obj_refr_size+0x6b4>
    obj->coords.y2 = obj->coords.y1 + h - 1;
  402ca8:	8ae3      	ldrh	r3, [r4, #22]
  402caa:	3b01      	subs	r3, #1
  402cac:	4499      	add	r9, r3
  402cae:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  402cb2:	f241 426a 	movw	r2, #5226	; 0x146a
  402cb6:	2100      	movs	r1, #0
  402cb8:	4620      	mov	r0, r4
  402cba:	4b88      	ldr	r3, [pc, #544]	; (402edc <lv_obj_refr_size+0x2e4>)
  402cbc:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  402cbe:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
  402cc0:	2801      	cmp	r0, #1
  402cc2:	f000 82f7 	beq.w	4032b4 <lv_obj_refr_size+0x6bc>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  402cc6:	8aa3      	ldrh	r3, [r4, #20]
  402cc8:	3b01      	subs	r3, #1
  402cca:	441f      	add	r7, r3
  402ccc:	8327      	strh	r7, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
  402cce:	aa08      	add	r2, sp, #32
  402cd0:	2127      	movs	r1, #39	; 0x27
  402cd2:	4620      	mov	r0, r4
  402cd4:	4f82      	ldr	r7, [pc, #520]	; (402ee0 <lv_obj_refr_size+0x2e8>)
  402cd6:	47b8      	blx	r7
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
  402cd8:	4622      	mov	r2, r4
  402cda:	2122      	movs	r1, #34	; 0x22
  402cdc:	4628      	mov	r0, r5
  402cde:	47b8      	blx	r7
    lv_obj_invalidate(obj);
  402ce0:	4620      	mov	r0, r4
  402ce2:	4b7a      	ldr	r3, [pc, #488]	; (402ecc <lv_obj_refr_size+0x2d4>)
  402ce4:	4798      	blx	r3
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
  402ce6:	2100      	movs	r1, #0
  402ce8:	4620      	mov	r0, r4
  402cea:	4b7e      	ldr	r3, [pc, #504]	; (402ee4 <lv_obj_refr_size+0x2ec>)
  402cec:	4798      	blx	r3
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
  402cee:	2200      	movs	r2, #0
  402cf0:	a906      	add	r1, sp, #24
  402cf2:	f104 0014 	add.w	r0, r4, #20
  402cf6:	4b78      	ldr	r3, [pc, #480]	; (402ed8 <lv_obj_refr_size+0x2e0>)
  402cf8:	4798      	blx	r3
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
  402cfa:	b916      	cbnz	r6, 402d02 <lv_obj_refr_size+0x10a>
  402cfc:	2800      	cmp	r0, #0
  402cfe:	f000 82e2 	beq.w	4032c6 <lv_obj_refr_size+0x6ce>
  402d02:	4628      	mov	r0, r5
  402d04:	4b78      	ldr	r3, [pc, #480]	; (402ee8 <lv_obj_refr_size+0x2f0>)
  402d06:	4798      	blx	r3
    return true;
  402d08:	2001      	movs	r0, #1
}
  402d0a:	b00b      	add	sp, #44	; 0x2c
  402d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  402d10:	f241 0201 	movw	r2, #4097	; 0x1001
  402d14:	2100      	movs	r1, #0
  402d16:	4620      	mov	r0, r4
  402d18:	4b70      	ldr	r3, [pc, #448]	; (402edc <lv_obj_refr_size+0x2e4>)
  402d1a:	4798      	blx	r3
    return (lv_coord_t)v.num;
  402d1c:	b207      	sxth	r7, r0
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
  402d1e:	f242 76d1 	movw	r6, #10193	; 0x27d1
  402d22:	42b7      	cmp	r7, r6
  402d24:	bf14      	ite	ne
  402d26:	2600      	movne	r6, #0
  402d28:	2601      	moveq	r6, #1
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
  402d2a:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
  402d2e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  402d32:	d01d      	beq.n	402d70 <lv_obj_refr_size+0x178>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
  402d34:	4628      	mov	r0, r5
  402d36:	4b6d      	ldr	r3, [pc, #436]	; (402eec <lv_obj_refr_size+0x2f4>)
  402d38:	4798      	blx	r3
  402d3a:	9001      	str	r0, [sp, #4]
        if(w_is_content) {
  402d3c:	f242 73d1 	movw	r3, #10193	; 0x27d1
  402d40:	429f      	cmp	r7, r3
  402d42:	d039      	beq.n	402db8 <lv_obj_refr_size+0x1c0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
  402d44:	f241 0202 	movw	r2, #4098	; 0x1002
  402d48:	2100      	movs	r1, #0
  402d4a:	4620      	mov	r0, r4
  402d4c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 402edc <lv_obj_refr_size+0x2e4>
  402d50:	47c0      	blx	r8
    return (lv_coord_t)v.num;
  402d52:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
  402d56:	f241 0203 	movw	r2, #4099	; 0x1003
  402d5a:	2100      	movs	r1, #0
  402d5c:	4620      	mov	r0, r4
  402d5e:	47c0      	blx	r8
        w = lv_clamp_width(w, minw, maxw, parent_w);
  402d60:	9b01      	ldr	r3, [sp, #4]
  402d62:	b202      	sxth	r2, r0
  402d64:	4649      	mov	r1, r9
  402d66:	4638      	mov	r0, r7
  402d68:	4f61      	ldr	r7, [pc, #388]	; (402ef0 <lv_obj_refr_size+0x2f8>)
  402d6a:	47b8      	blx	r7
  402d6c:	4607      	mov	r7, r0
  402d6e:	e763      	b.n	402c38 <lv_obj_refr_size+0x40>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
  402d70:	f427 48c0 	bic.w	r8, r7, #24576	; 0x6000
  402d74:	f5b8 6ffa 	cmp.w	r8, #2000	; 0x7d0
  402d78:	dcdc      	bgt.n	402d34 <lv_obj_refr_size+0x13c>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
  402d7a:	4628      	mov	r0, r5
  402d7c:	4b5b      	ldr	r3, [pc, #364]	; (402eec <lv_obj_refr_size+0x2f4>)
  402d7e:	4798      	blx	r3
  402d80:	9001      	str	r0, [sp, #4]
        if(w_is_content) {
  402d82:	f242 73d1 	movw	r3, #10193	; 0x27d1
  402d86:	429f      	cmp	r7, r3
  402d88:	d016      	beq.n	402db8 <lv_obj_refr_size+0x1c0>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
  402d8a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  402d8e:	f013 0f04 	tst.w	r3, #4
  402d92:	f000 8136 	beq.w	403002 <lv_obj_refr_size+0x40a>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
  402d96:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
  402d9a:	bfc8      	it	gt
  402d9c:	f5c8 787a 	rsbgt	r8, r8, #1000	; 0x3e8
  402da0:	9b01      	ldr	r3, [sp, #4]
  402da2:	fb08 f803 	mul.w	r8, r8, r3
  402da6:	4b53      	ldr	r3, [pc, #332]	; (402ef4 <lv_obj_refr_size+0x2fc>)
  402da8:	fb83 2308 	smull	r2, r3, r3, r8
  402dac:	ea4f 77e8 	mov.w	r7, r8, asr #31
  402db0:	ebc7 1763 	rsb	r7, r7, r3, asr #5
  402db4:	b23f      	sxth	r7, r7
  402db6:	e7c5      	b.n	402d44 <lv_obj_refr_size+0x14c>
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
  402db8:	2200      	movs	r2, #0
  402dba:	4611      	mov	r1, r2
  402dbc:	4620      	mov	r0, r4
  402dbe:	4b4e      	ldr	r3, [pc, #312]	; (402ef8 <lv_obj_refr_size+0x300>)
  402dc0:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  402dc2:	f241 0232 	movw	r2, #4146	; 0x1032
  402dc6:	2100      	movs	r1, #0
  402dc8:	4620      	mov	r0, r4
  402dca:	f8df 8110 	ldr.w	r8, [pc, #272]	; 402edc <lv_obj_refr_size+0x2e4>
  402dce:	47c0      	blx	r8
  402dd0:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  402dd2:	f641 0213 	movw	r2, #6163	; 0x1813
  402dd6:	2100      	movs	r1, #0
  402dd8:	4620      	mov	r0, r4
  402dda:	47c0      	blx	r8

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
  402ddc:	b2bf      	uxth	r7, r7
  402dde:	4438      	add	r0, r7
  402de0:	b283      	uxth	r3, r0
  402de2:	9302      	str	r3, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  402de4:	f641 0212 	movw	r2, #6162	; 0x1812
  402de8:	2100      	movs	r1, #0
  402dea:	4620      	mov	r0, r4
  402dec:	47c0      	blx	r8
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
  402dee:	4438      	add	r0, r7
  402df0:	b282      	uxth	r2, r0
  402df2:	4617      	mov	r7, r2
  402df4:	9203      	str	r2, [sp, #12]

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
  402df6:	4620      	mov	r0, r4
  402df8:	4b40      	ldr	r3, [pc, #256]	; (402efc <lv_obj_refr_size+0x304>)
  402dfa:	4798      	blx	r3
  402dfc:	9b02      	ldr	r3, [sp, #8]
  402dfe:	19df      	adds	r7, r3, r7
  402e00:	4407      	add	r7, r0
  402e02:	b23f      	sxth	r7, r7

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  402e04:	4620      	mov	r0, r4
  402e06:	4b3e      	ldr	r3, [pc, #248]	; (402f00 <lv_obj_refr_size+0x308>)
  402e08:	4798      	blx	r3
  402e0a:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  402e0c:	f241 426a 	movw	r2, #5226	; 0x146a
  402e10:	2100      	movs	r1, #0
  402e12:	4620      	mov	r0, r4
  402e14:	47c0      	blx	r8
    return (lv_base_dir_t)v.num;
  402e16:	b2c0      	uxtb	r0, r0
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
  402e18:	2801      	cmp	r0, #1
  402e1a:	d00b      	beq.n	402e34 <lv_obj_refr_size+0x23c>
            child_res += pad_left;
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
  402e1c:	f1ba 0f00 	cmp.w	sl, #0
  402e20:	d090      	beq.n	402d44 <lv_obj_refr_size+0x14c>
  402e22:	4b38      	ldr	r3, [pc, #224]	; (402f04 <lv_obj_refr_size+0x30c>)
  402e24:	f04f 0800 	mov.w	r8, #0
            lv_obj_t * child = obj->spec_attr->children[i];
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  402e28:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 402f0c <lv_obj_refr_size+0x314>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  402e2c:	9503      	str	r5, [sp, #12]
  402e2e:	461d      	mov	r5, r3
  402e30:	46a1      	mov	r9, r4
  402e32:	e0a7      	b.n	402f84 <lv_obj_refr_size+0x38c>
        for(i = 0; i < child_cnt; i++) {
  402e34:	f1ba 0f00 	cmp.w	sl, #0
  402e38:	d084      	beq.n	402d44 <lv_obj_refr_size+0x14c>
  402e3a:	4b32      	ldr	r3, [pc, #200]	; (402f04 <lv_obj_refr_size+0x30c>)
  402e3c:	f04f 0800 	mov.w	r8, #0
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  402e40:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 402f0c <lv_obj_refr_size+0x314>
  402e44:	9502      	str	r5, [sp, #8]
  402e46:	461d      	mov	r5, r3
  402e48:	46a1      	mov	r9, r4
  402e4a:	e01d      	b.n	402e88 <lv_obj_refr_size+0x290>
  402e4c:	f241 0209 	movw	r2, #4105	; 0x1009
  402e50:	2100      	movs	r1, #0
  402e52:	4620      	mov	r0, r4
  402e54:	4b21      	ldr	r3, [pc, #132]	; (402edc <lv_obj_refr_size+0x2e4>)
  402e56:	4798      	blx	r3
                switch(align) {
  402e58:	b2c0      	uxtb	r0, r0
  402e5a:	2808      	cmp	r0, #8
  402e5c:	d858      	bhi.n	402f10 <lv_obj_refr_size+0x318>
  402e5e:	e8df f000 	tbb	[pc, r0]
  402e62:	5705      	.short	0x5705
  402e64:	57570557 	.word	0x57570557
  402e68:	5705      	.short	0x5705
  402e6a:	05          	.byte	0x05
  402e6b:	00          	.byte	0x00
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
  402e6c:	f9b9 3018 	ldrsh.w	r3, [r9, #24]
  402e70:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  402e74:	1a9b      	subs	r3, r3, r2
  402e76:	3301      	adds	r3, #1
  402e78:	42ab      	cmp	r3, r5
  402e7a:	bfb8      	it	lt
  402e7c:	462b      	movlt	r3, r5
  402e7e:	b21d      	sxth	r5, r3
        for(i = 0; i < child_cnt; i++) {
  402e80:	f108 0801 	add.w	r8, r8, #1
  402e84:	45c2      	cmp	sl, r8
  402e86:	d055      	beq.n	402f34 <lv_obj_refr_size+0x33c>
            lv_obj_t * child = obj->spec_attr->children[i];
  402e88:	f8d9 3008 	ldr.w	r3, [r9, #8]
  402e8c:	681b      	ldr	r3, [r3, #0]
  402e8e:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  402e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  402e96:	4620      	mov	r0, r4
  402e98:	47d8      	blx	fp
  402e9a:	2800      	cmp	r0, #0
  402e9c:	d1f0      	bne.n	402e80 <lv_obj_refr_size+0x288>
            if(!lv_obj_is_layout_positioned(child)) {
  402e9e:	4620      	mov	r0, r4
  402ea0:	4b19      	ldr	r3, [pc, #100]	; (402f08 <lv_obj_refr_size+0x310>)
  402ea2:	4798      	blx	r3
  402ea4:	2800      	cmp	r0, #0
  402ea6:	d0d1      	beq.n	402e4c <lv_obj_refr_size+0x254>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
  402ea8:	f9b9 3018 	ldrsh.w	r3, [r9, #24]
  402eac:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  402eb0:	1a9b      	subs	r3, r3, r2
  402eb2:	3301      	adds	r3, #1
  402eb4:	42ab      	cmp	r3, r5
  402eb6:	bfb8      	it	lt
  402eb8:	462b      	movlt	r3, r5
  402eba:	b21d      	sxth	r5, r3
  402ebc:	e7e0      	b.n	402e80 <lv_obj_refr_size+0x288>
  402ebe:	bf00      	nop
  402ec0:	00405ded 	.word	0x00405ded
  402ec4:	00403b41 	.word	0x00403b41
  402ec8:	00403a41 	.word	0x00403a41
  402ecc:	0040262d 	.word	0x0040262d
  402ed0:	004022b9 	.word	0x004022b9
  402ed4:	0040236d 	.word	0x0040236d
  402ed8:	00410991 	.word	0x00410991
  402edc:	00404f1d 	.word	0x00404f1d
  402ee0:	00400491 	.word	0x00400491
  402ee4:	00404c59 	.word	0x00404c59
  402ee8:	00404c05 	.word	0x00404c05
  402eec:	004022ed 	.word	0x004022ed
  402ef0:	00402b01 	.word	0x00402b01
  402ef4:	51eb851f 	.word	0x51eb851f
  402ef8:	004041e9 	.word	0x004041e9
  402efc:	004023e1 	.word	0x004023e1
  402f00:	00405e25 	.word	0x00405e25
  402f04:	ffffa000 	.word	0xffffa000
  402f08:	0040219d 	.word	0x0040219d
  402f0c:	004013f3 	.word	0x004013f3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
  402f10:	f241 0208 	movw	r2, #4104	; 0x1008
  402f14:	2100      	movs	r1, #0
  402f16:	4620      	mov	r0, r4
  402f18:	4bb6      	ldr	r3, [pc, #728]	; (4031f4 <lv_obj_refr_size+0x5fc>)
  402f1a:	4798      	blx	r3
    return (lv_coord_t)v.num;
  402f1c:	b200      	sxth	r0, r0
                    	if(lv_obj_get_style_y(child, 0) == 0) {
  402f1e:	2800      	cmp	r0, #0
  402f20:	d1ae      	bne.n	402e80 <lv_obj_refr_size+0x288>
  402f22:	8b23      	ldrh	r3, [r4, #24]
  402f24:	3301      	adds	r3, #1
  402f26:	8aa2      	ldrh	r2, [r4, #20]
  402f28:	1a9b      	subs	r3, r3, r2
  402f2a:	b21b      	sxth	r3, r3
  402f2c:	429d      	cmp	r5, r3
  402f2e:	bfb8      	it	lt
  402f30:	461d      	movlt	r5, r3
  402f32:	e7a5      	b.n	402e80 <lv_obj_refr_size+0x288>
  402f34:	462a      	mov	r2, r5
  402f36:	9d02      	ldr	r5, [sp, #8]
  402f38:	464c      	mov	r4, r9
        if(child_res != LV_COORD_MIN) {
  402f3a:	f512 4fc0 	cmn.w	r2, #24576	; 0x6000
  402f3e:	f43f af01 	beq.w	402d44 <lv_obj_refr_size+0x14c>
            child_res += pad_left;
  402f42:	9b03      	ldr	r3, [sp, #12]
  402f44:	4413      	add	r3, r2
  402f46:	b21b      	sxth	r3, r3
  402f48:	e053      	b.n	402ff2 <lv_obj_refr_size+0x3fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  402f4a:	f241 0209 	movw	r2, #4105	; 0x1009
  402f4e:	2100      	movs	r1, #0
  402f50:	4620      	mov	r0, r4
  402f52:	4ba8      	ldr	r3, [pc, #672]	; (4031f4 <lv_obj_refr_size+0x5fc>)
  402f54:	4798      	blx	r3

            if(!lv_obj_is_layout_positioned(child)) {
                lv_align_t align = lv_obj_get_style_align(child, 0);
                switch(align) {
  402f56:	b2c0      	uxtb	r0, r0
  402f58:	2807      	cmp	r0, #7
  402f5a:	d82e      	bhi.n	402fba <lv_obj_refr_size+0x3c2>
  402f5c:	e8df f000 	tbb	[pc, r0]
  402f60:	2d2d0404 	.word	0x2d2d0404
  402f64:	042d2d04 	.word	0x042d2d04
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
  402f68:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
  402f6c:	f9b9 2014 	ldrsh.w	r2, [r9, #20]
  402f70:	1a9b      	subs	r3, r3, r2
  402f72:	3301      	adds	r3, #1
  402f74:	42ab      	cmp	r3, r5
  402f76:	bfb8      	it	lt
  402f78:	462b      	movlt	r3, r5
  402f7a:	b21d      	sxth	r5, r3
        for(i = 0; i < child_cnt; i++) {
  402f7c:	f108 0801 	add.w	r8, r8, #1
  402f80:	45c2      	cmp	sl, r8
  402f82:	d02c      	beq.n	402fde <lv_obj_refr_size+0x3e6>
            lv_obj_t * child = obj->spec_attr->children[i];
  402f84:	f8d9 3008 	ldr.w	r3, [r9, #8]
  402f88:	681b      	ldr	r3, [r3, #0]
  402f8a:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  402f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  402f92:	4620      	mov	r0, r4
  402f94:	47d8      	blx	fp
  402f96:	2800      	cmp	r0, #0
  402f98:	d1f0      	bne.n	402f7c <lv_obj_refr_size+0x384>
            if(!lv_obj_is_layout_positioned(child)) {
  402f9a:	4620      	mov	r0, r4
  402f9c:	4b96      	ldr	r3, [pc, #600]	; (4031f8 <lv_obj_refr_size+0x600>)
  402f9e:	4798      	blx	r3
  402fa0:	2800      	cmp	r0, #0
  402fa2:	d0d2      	beq.n	402f4a <lv_obj_refr_size+0x352>
                    	if(lv_obj_get_style_y(child, 0) == 0) {
                    		child_res = LV_MAX(child_res, lv_area_get_width(&child->coords));
                    	}
                }
            } else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
  402fa4:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
  402fa8:	f9b9 2014 	ldrsh.w	r2, [r9, #20]
  402fac:	1a9b      	subs	r3, r3, r2
  402fae:	3301      	adds	r3, #1
  402fb0:	42ab      	cmp	r3, r5
  402fb2:	bfb8      	it	lt
  402fb4:	462b      	movlt	r3, r5
  402fb6:	b21d      	sxth	r5, r3
  402fb8:	e7e0      	b.n	402f7c <lv_obj_refr_size+0x384>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
  402fba:	f241 0208 	movw	r2, #4104	; 0x1008
  402fbe:	2100      	movs	r1, #0
  402fc0:	4620      	mov	r0, r4
  402fc2:	4b8c      	ldr	r3, [pc, #560]	; (4031f4 <lv_obj_refr_size+0x5fc>)
  402fc4:	4798      	blx	r3
    return (lv_coord_t)v.num;
  402fc6:	b200      	sxth	r0, r0
                    	if(lv_obj_get_style_y(child, 0) == 0) {
  402fc8:	2800      	cmp	r0, #0
  402fca:	d1d7      	bne.n	402f7c <lv_obj_refr_size+0x384>
  402fcc:	8b23      	ldrh	r3, [r4, #24]
  402fce:	3301      	adds	r3, #1
  402fd0:	8aa2      	ldrh	r2, [r4, #20]
  402fd2:	1a9b      	subs	r3, r3, r2
  402fd4:	b21b      	sxth	r3, r3
  402fd6:	429d      	cmp	r5, r3
  402fd8:	bfb8      	it	lt
  402fda:	461d      	movlt	r5, r3
  402fdc:	e7ce      	b.n	402f7c <lv_obj_refr_size+0x384>
  402fde:	462a      	mov	r2, r5
  402fe0:	9d03      	ldr	r5, [sp, #12]
  402fe2:	464c      	mov	r4, r9
            }
        }

        if(child_res != LV_COORD_MIN) {
  402fe4:	f512 4fc0 	cmn.w	r2, #24576	; 0x6000
  402fe8:	f43f aeac 	beq.w	402d44 <lv_obj_refr_size+0x14c>
            child_res += pad_right;
  402fec:	9b02      	ldr	r3, [sp, #8]
  402fee:	4413      	add	r3, r2
  402ff0:	b21b      	sxth	r3, r3
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
  402ff2:	f513 4fc0 	cmn.w	r3, #24576	; 0x6000
  402ff6:	f43f aea5 	beq.w	402d44 <lv_obj_refr_size+0x14c>
    else return LV_MAX(child_res, self_w);
  402ffa:	429f      	cmp	r7, r3
  402ffc:	bfb8      	it	lt
  402ffe:	461f      	movlt	r7, r3
  403000:	e6a0      	b.n	402d44 <lv_obj_refr_size+0x14c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  403002:	f241 0201 	movw	r2, #4097	; 0x1001
  403006:	2100      	movs	r1, #0
  403008:	4628      	mov	r0, r5
  40300a:	4b7a      	ldr	r3, [pc, #488]	; (4031f4 <lv_obj_refr_size+0x5fc>)
  40300c:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40300e:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
  403010:	f242 73d1 	movw	r3, #10193	; 0x27d1
  403014:	4298      	cmp	r0, r3
  403016:	f47f aebe 	bne.w	402d96 <lv_obj_refr_size+0x19e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  40301a:	f241 0232 	movw	r2, #4146	; 0x1032
  40301e:	2100      	movs	r1, #0
  403020:	4620      	mov	r0, r4
  403022:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 4031f4 <lv_obj_refr_size+0x5fc>
  403026:	47c8      	blx	r9
  403028:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  40302a:	f641 0212 	movw	r2, #6162	; 0x1812
  40302e:	2100      	movs	r1, #0
  403030:	4620      	mov	r0, r4
  403032:	47c8      	blx	r9
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
  403034:	4438      	add	r0, r7
  403036:	fa1f f880 	uxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  40303a:	f641 0213 	movw	r2, #6163	; 0x1813
  40303e:	2100      	movs	r1, #0
  403040:	4620      	mov	r0, r4
  403042:	47c8      	blx	r9
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
  403044:	b23f      	sxth	r7, r7
  403046:	fa07 f780 	sxtah	r7, r7, r0
  40304a:	4447      	add	r7, r8
  40304c:	b23f      	sxth	r7, r7
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
  40304e:	e679      	b.n	402d44 <lv_obj_refr_size+0x14c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  403050:	f241 0204 	movw	r2, #4100	; 0x1004
  403054:	2100      	movs	r1, #0
  403056:	4620      	mov	r0, r4
  403058:	4b66      	ldr	r3, [pc, #408]	; (4031f4 <lv_obj_refr_size+0x5fc>)
  40305a:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40305c:	fa0f f980 	sxth.w	r9, r0
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
  403060:	f242 78d1 	movw	r8, #10193	; 0x27d1
  403064:	45c1      	cmp	r9, r8
  403066:	bf14      	ite	ne
  403068:	f04f 0800 	movne.w	r8, #0
  40306c:	f04f 0801 	moveq.w	r8, #1
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
  403070:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
  403074:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  403078:	d01e      	beq.n	4030b8 <lv_obj_refr_size+0x4c0>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
  40307a:	4628      	mov	r0, r5
  40307c:	4b5f      	ldr	r3, [pc, #380]	; (4031fc <lv_obj_refr_size+0x604>)
  40307e:	4798      	blx	r3
  403080:	9002      	str	r0, [sp, #8]
        if(h_is_content) {
  403082:	f242 73d1 	movw	r3, #10193	; 0x27d1
  403086:	4599      	cmp	r9, r3
  403088:	d03b      	beq.n	403102 <lv_obj_refr_size+0x50a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
  40308a:	f241 0205 	movw	r2, #4101	; 0x1005
  40308e:	2100      	movs	r1, #0
  403090:	4620      	mov	r0, r4
  403092:	f8df a160 	ldr.w	sl, [pc, #352]	; 4031f4 <lv_obj_refr_size+0x5fc>
  403096:	47d0      	blx	sl
    return (lv_coord_t)v.num;
  403098:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
  40309c:	f241 0206 	movw	r2, #4102	; 0x1006
  4030a0:	2100      	movs	r1, #0
  4030a2:	4620      	mov	r0, r4
  4030a4:	47d0      	blx	sl
        h = lv_clamp_height(h, minh, maxh, parent_h);
  4030a6:	9b02      	ldr	r3, [sp, #8]
  4030a8:	b202      	sxth	r2, r0
  4030aa:	4659      	mov	r1, fp
  4030ac:	4648      	mov	r0, r9
  4030ae:	f8df 9168 	ldr.w	r9, [pc, #360]	; 403218 <lv_obj_refr_size+0x620>
  4030b2:	47c8      	blx	r9
  4030b4:	4681      	mov	r9, r0
  4030b6:	e5d4      	b.n	402c62 <lv_obj_refr_size+0x6a>
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
  4030b8:	f429 4ac0 	bic.w	sl, r9, #24576	; 0x6000
  4030bc:	f5ba 6ffa 	cmp.w	sl, #2000	; 0x7d0
  4030c0:	dcdb      	bgt.n	40307a <lv_obj_refr_size+0x482>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
  4030c2:	4628      	mov	r0, r5
  4030c4:	4b4d      	ldr	r3, [pc, #308]	; (4031fc <lv_obj_refr_size+0x604>)
  4030c6:	4798      	blx	r3
  4030c8:	9002      	str	r0, [sp, #8]
        if(h_is_content) {
  4030ca:	f242 73d1 	movw	r3, #10193	; 0x27d1
  4030ce:	4599      	cmp	r9, r3
  4030d0:	d017      	beq.n	403102 <lv_obj_refr_size+0x50a>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
  4030d2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  4030d6:	f013 0f02 	tst.w	r3, #2
  4030da:	f000 80ad 	beq.w	403238 <lv_obj_refr_size+0x640>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
  4030de:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
  4030e2:	bfc8      	it	gt
  4030e4:	f5ca 7a7a 	rsbgt	sl, sl, #1000	; 0x3e8
  4030e8:	9b02      	ldr	r3, [sp, #8]
  4030ea:	fb0a fa03 	mul.w	sl, sl, r3
  4030ee:	4b44      	ldr	r3, [pc, #272]	; (403200 <lv_obj_refr_size+0x608>)
  4030f0:	fb83 230a 	smull	r2, r3, r3, sl
  4030f4:	ea4f 79ea 	mov.w	r9, sl, asr #31
  4030f8:	ebc9 1963 	rsb	r9, r9, r3, asr #5
  4030fc:	fa0f f989 	sxth.w	r9, r9
  403100:	e7c3      	b.n	40308a <lv_obj_refr_size+0x492>
}

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
  403102:	2200      	movs	r2, #0
  403104:	4611      	mov	r1, r2
  403106:	4620      	mov	r0, r4
  403108:	4b3e      	ldr	r3, [pc, #248]	; (403204 <lv_obj_refr_size+0x60c>)
  40310a:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  40310c:	f241 0232 	movw	r2, #4146	; 0x1032
  403110:	2100      	movs	r1, #0
  403112:	4620      	mov	r0, r4
  403114:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 4031f4 <lv_obj_refr_size+0x5fc>
  403118:	47d8      	blx	fp
  40311a:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  40311c:	f641 0210 	movw	r2, #6160	; 0x1810
  403120:	2100      	movs	r1, #0
  403122:	4620      	mov	r0, r4
  403124:	47d8      	blx	fp

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
  403126:	fa1f fa8a 	uxth.w	sl, sl
  40312a:	4450      	add	r0, sl
  40312c:	fa1f f980 	uxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
  403130:	f641 0211 	movw	r2, #6161	; 0x1811
  403134:	2100      	movs	r1, #0
  403136:	4620      	mov	r0, r4
  403138:	47d8      	blx	fp
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
  40313a:	4450      	add	r0, sl
  40313c:	b283      	uxth	r3, r0
  40313e:	9303      	str	r3, [sp, #12]

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
  403140:	4620      	mov	r0, r4
  403142:	4b31      	ldr	r3, [pc, #196]	; (403208 <lv_obj_refr_size+0x610>)
  403144:	4798      	blx	r3
  403146:	9b03      	ldr	r3, [sp, #12]
  403148:	4499      	add	r9, r3
  40314a:	4481      	add	r9, r0
  40314c:	fa0f f989 	sxth.w	r9, r9

    lv_coord_t child_res = LV_COORD_MIN;
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  403150:	4620      	mov	r0, r4
  403152:	4b2e      	ldr	r3, [pc, #184]	; (40320c <lv_obj_refr_size+0x614>)
  403154:	4798      	blx	r3
    for(i = 0; i < child_cnt; i++) {
  403156:	4683      	mov	fp, r0
  403158:	2800      	cmp	r0, #0
  40315a:	d096      	beq.n	40308a <lv_obj_refr_size+0x492>
  40315c:	4b2c      	ldr	r3, [pc, #176]	; (403210 <lv_obj_refr_size+0x618>)
  40315e:	f04f 0a00 	mov.w	sl, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
  403162:	9604      	str	r6, [sp, #16]
  403164:	9505      	str	r5, [sp, #20]
  403166:	461d      	mov	r5, r3
  403168:	e016      	b.n	403198 <lv_obj_refr_size+0x5a0>
  40316a:	f241 0209 	movw	r2, #4105	; 0x1009
  40316e:	2100      	movs	r1, #0
  403170:	4630      	mov	r0, r6
  403172:	4b20      	ldr	r3, [pc, #128]	; (4031f4 <lv_obj_refr_size+0x5fc>)
  403174:	4798      	blx	r3
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;


        if(!lv_obj_is_layout_positioned(child)) {
            lv_align_t align = lv_obj_get_style_align(child, 0);
            switch(align) {
  403176:	b2c0      	uxtb	r0, r0
  403178:	2803      	cmp	r0, #3
  40317a:	d828      	bhi.n	4031ce <lv_obj_refr_size+0x5d6>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
  40317c:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
  403180:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  403184:	1a9b      	subs	r3, r3, r2
  403186:	3301      	adds	r3, #1
  403188:	42ab      	cmp	r3, r5
  40318a:	bfb8      	it	lt
  40318c:	462b      	movlt	r3, r5
  40318e:	b21d      	sxth	r5, r3
    for(i = 0; i < child_cnt; i++) {
  403190:	f10a 0a01 	add.w	sl, sl, #1
  403194:	45d3      	cmp	fp, sl
  403196:	d041      	beq.n	40321c <lv_obj_refr_size+0x624>
        lv_obj_t * child = obj->spec_attr->children[i];
  403198:	68a3      	ldr	r3, [r4, #8]
  40319a:	681b      	ldr	r3, [r3, #0]
  40319c:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  4031a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  4031a4:	4630      	mov	r0, r6
  4031a6:	4b1b      	ldr	r3, [pc, #108]	; (403214 <lv_obj_refr_size+0x61c>)
  4031a8:	4798      	blx	r3
  4031aa:	2800      	cmp	r0, #0
  4031ac:	d1f0      	bne.n	403190 <lv_obj_refr_size+0x598>
        if(!lv_obj_is_layout_positioned(child)) {
  4031ae:	4630      	mov	r0, r6
  4031b0:	4b11      	ldr	r3, [pc, #68]	; (4031f8 <lv_obj_refr_size+0x600>)
  4031b2:	4798      	blx	r3
  4031b4:	2800      	cmp	r0, #0
  4031b6:	d0d8      	beq.n	40316a <lv_obj_refr_size+0x572>
                		child_res = LV_MAX(child_res, lv_area_get_height(&child->coords));
                	}
                	break;
            }
        } else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
  4031b8:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
  4031bc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  4031c0:	1a9b      	subs	r3, r3, r2
  4031c2:	3301      	adds	r3, #1
  4031c4:	42ab      	cmp	r3, r5
  4031c6:	bfb8      	it	lt
  4031c8:	462b      	movlt	r3, r5
  4031ca:	b21d      	sxth	r5, r3
  4031cc:	e7e0      	b.n	403190 <lv_obj_refr_size+0x598>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
  4031ce:	f241 0208 	movw	r2, #4104	; 0x1008
  4031d2:	2100      	movs	r1, #0
  4031d4:	4630      	mov	r0, r6
  4031d6:	4b07      	ldr	r3, [pc, #28]	; (4031f4 <lv_obj_refr_size+0x5fc>)
  4031d8:	4798      	blx	r3
    return (lv_coord_t)v.num;
  4031da:	b200      	sxth	r0, r0
                	if(lv_obj_get_style_y(child, 0) == 0) {
  4031dc:	2800      	cmp	r0, #0
  4031de:	d1d7      	bne.n	403190 <lv_obj_refr_size+0x598>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4031e0:	8b73      	ldrh	r3, [r6, #26]
  4031e2:	3301      	adds	r3, #1
  4031e4:	8af2      	ldrh	r2, [r6, #22]
  4031e6:	1a9b      	subs	r3, r3, r2
  4031e8:	b21b      	sxth	r3, r3
  4031ea:	429d      	cmp	r5, r3
  4031ec:	bfb8      	it	lt
  4031ee:	461d      	movlt	r5, r3
  4031f0:	e7ce      	b.n	403190 <lv_obj_refr_size+0x598>
  4031f2:	bf00      	nop
  4031f4:	00404f1d 	.word	0x00404f1d
  4031f8:	0040219d 	.word	0x0040219d
  4031fc:	0040232d 	.word	0x0040232d
  403200:	51eb851f 	.word	0x51eb851f
  403204:	00404289 	.word	0x00404289
  403208:	00402409 	.word	0x00402409
  40320c:	00405e25 	.word	0x00405e25
  403210:	ffffa000 	.word	0xffffa000
  403214:	004013f3 	.word	0x004013f3
  403218:	00402b7d 	.word	0x00402b7d
  40321c:	9e04      	ldr	r6, [sp, #16]
  40321e:	462a      	mov	r2, r5
  403220:	9d05      	ldr	r5, [sp, #20]
        }
    }

    if(child_res != LV_COORD_MIN) {
  403222:	f512 4fc0 	cmn.w	r2, #24576	; 0x6000
  403226:	f43f af30 	beq.w	40308a <lv_obj_refr_size+0x492>
        child_res += pad_bottom;
  40322a:	9b03      	ldr	r3, [sp, #12]
  40322c:	4413      	add	r3, r2
        return LV_MAX(child_res, self_h);
  40322e:	b21b      	sxth	r3, r3
  403230:	4599      	cmp	r9, r3
  403232:	bfb8      	it	lt
  403234:	4699      	movlt	r9, r3
  403236:	e728      	b.n	40308a <lv_obj_refr_size+0x492>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  403238:	f241 0204 	movw	r2, #4100	; 0x1004
  40323c:	2100      	movs	r1, #0
  40323e:	4628      	mov	r0, r5
  403240:	4b22      	ldr	r3, [pc, #136]	; (4032cc <lv_obj_refr_size+0x6d4>)
  403242:	4798      	blx	r3
    return (lv_coord_t)v.num;
  403244:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
  403246:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40324a:	4298      	cmp	r0, r3
  40324c:	f47f af47 	bne.w	4030de <lv_obj_refr_size+0x4e6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  403250:	f241 0232 	movw	r2, #4146	; 0x1032
  403254:	2100      	movs	r1, #0
  403256:	4620      	mov	r0, r4
  403258:	f8df a070 	ldr.w	sl, [pc, #112]	; 4032cc <lv_obj_refr_size+0x6d4>
  40325c:	47d0      	blx	sl
  40325e:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  403260:	f641 0210 	movw	r2, #6160	; 0x1810
  403264:	2100      	movs	r1, #0
  403266:	4620      	mov	r0, r4
  403268:	47d0      	blx	sl
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
  40326a:	4458      	add	r0, fp
  40326c:	fa1f f980 	uxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
  403270:	f641 0211 	movw	r2, #6161	; 0x1811
  403274:	2100      	movs	r1, #0
  403276:	4620      	mov	r0, r4
  403278:	47d0      	blx	sl
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
  40327a:	fa0f fb8b 	sxth.w	fp, fp
  40327e:	fa0b fb80 	sxtah	fp, fp, r0
  403282:	44d9      	add	r9, fp
  403284:	fa0f f989 	sxth.w	r9, r9
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
  403288:	e6ff      	b.n	40308a <lv_obj_refr_size+0x492>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
  40328a:	2300      	movs	r3, #0
  40328c:	9a01      	ldr	r2, [sp, #4]
  40328e:	9900      	ldr	r1, [sp, #0]
  403290:	4620      	mov	r0, r4
  403292:	4e0f      	ldr	r6, [pc, #60]	; (4032d0 <lv_obj_refr_size+0x6d8>)
  403294:	47b0      	blx	r6
  403296:	e4eb      	b.n	402c70 <lv_obj_refr_size+0x78>
  403298:	8b63      	ldrh	r3, [r4, #26]
  40329a:	3301      	adds	r3, #1
  40329c:	8ae2      	ldrh	r2, [r4, #22]
  40329e:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
  4032a0:	b21b      	sxth	r3, r3
  4032a2:	4599      	cmp	r9, r3
  4032a4:	f47f acec 	bne.w	402c80 <lv_obj_refr_size+0x88>
  4032a8:	2000      	movs	r0, #0
  4032aa:	e52e      	b.n	402d0a <lv_obj_refr_size+0x112>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
  4032ac:	4628      	mov	r0, r5
  4032ae:	4b09      	ldr	r3, [pc, #36]	; (4032d4 <lv_obj_refr_size+0x6dc>)
  4032b0:	4798      	blx	r3
  4032b2:	e4f9      	b.n	402ca8 <lv_obj_refr_size+0xb0>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  4032b4:	8b23      	ldrh	r3, [r4, #24]
  4032b6:	3301      	adds	r3, #1
  4032b8:	1bdf      	subs	r7, r3, r7
  4032ba:	82a7      	strh	r7, [r4, #20]
  4032bc:	e507      	b.n	402cce <lv_obj_refr_size+0xd6>
    if(obj->w_layout && obj->h_layout) return false;
  4032be:	2000      	movs	r0, #0
  4032c0:	4770      	bx	lr
    if(parent == NULL) return false;
  4032c2:	2000      	movs	r0, #0
  4032c4:	e521      	b.n	402d0a <lv_obj_refr_size+0x112>
    return true;
  4032c6:	2001      	movs	r0, #1
  4032c8:	e51f      	b.n	402d0a <lv_obj_refr_size+0x112>
  4032ca:	bf00      	nop
  4032cc:	00404f1d 	.word	0x00404f1d
  4032d0:	004042e9 	.word	0x004042e9
  4032d4:	00404c05 	.word	0x00404c05

004032d8 <layout_update_core>:
    }

}

static void layout_update_core(lv_obj_t * obj)
{
  4032d8:	b570      	push	{r4, r5, r6, lr}
  4032da:	4605      	mov	r5, r0
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  4032dc:	4b25      	ldr	r3, [pc, #148]	; (403374 <layout_update_core+0x9c>)
  4032de:	4798      	blx	r3
    for(i = 0; i < child_cnt; i++) {
  4032e0:	b180      	cbz	r0, 403304 <layout_update_core+0x2c>
  4032e2:	4606      	mov	r6, r0
  4032e4:	2400      	movs	r4, #0
        lv_obj_t * child = obj->spec_attr->children[i];
  4032e6:	68ab      	ldr	r3, [r5, #8]
  4032e8:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
  4032ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4032ee:	f7ff fff3 	bl	4032d8 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
  4032f2:	3401      	adds	r4, #1
  4032f4:	42a6      	cmp	r6, r4
  4032f6:	d1f6      	bne.n	4032e6 <layout_update_core+0xe>
    }

    if(obj->layout_inv == 0) return;
  4032f8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  4032fc:	f013 0f01 	tst.w	r3, #1
  403300:	d112      	bne.n	403328 <layout_update_core+0x50>
  403302:	bd70      	pop	{r4, r5, r6, pc}
  403304:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  403308:	f013 0f01 	tst.w	r3, #1
  40330c:	d0f9      	beq.n	403302 <layout_update_core+0x2a>

    obj->layout_inv = 0;
  40330e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  403312:	f36f 0300 	bfc	r3, #0, #1
  403316:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22

    lv_obj_refr_size(obj);
  40331a:	4628      	mov	r0, r5
  40331c:	4b16      	ldr	r3, [pc, #88]	; (403378 <layout_update_core+0xa0>)
  40331e:	4798      	blx	r3
    lv_obj_refr_pos(obj);
  403320:	4628      	mov	r0, r5
  403322:	4b16      	ldr	r3, [pc, #88]	; (40337c <layout_update_core+0xa4>)
  403324:	4798      	blx	r3
  403326:	bd70      	pop	{r4, r5, r6, pc}
    obj->layout_inv = 0;
  403328:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  40332c:	f36f 0300 	bfc	r3, #0, #1
  403330:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_refr_size(obj);
  403334:	4628      	mov	r0, r5
  403336:	4b10      	ldr	r3, [pc, #64]	; (403378 <layout_update_core+0xa0>)
  403338:	4798      	blx	r3
    lv_obj_refr_pos(obj);
  40333a:	4628      	mov	r0, r5
  40333c:	4b0f      	ldr	r3, [pc, #60]	; (40337c <layout_update_core+0xa4>)
  40333e:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
  403340:	f241 0269 	movw	r2, #4201	; 0x1069
  403344:	2100      	movs	r1, #0
  403346:	4628      	mov	r0, r5
  403348:	4b0d      	ldr	r3, [pc, #52]	; (403380 <layout_update_core+0xa8>)
  40334a:	4798      	blx	r3

    if(child_cnt > 0) {
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
  40334c:	b280      	uxth	r0, r0
        if(layout_id > 0 && layout_id <= layout_cnt) {
  40334e:	b180      	cbz	r0, 403372 <layout_update_core+0x9a>
  403350:	4b0c      	ldr	r3, [pc, #48]	; (403384 <layout_update_core+0xac>)
  403352:	681b      	ldr	r3, [r3, #0]
  403354:	4298      	cmp	r0, r3
  403356:	d8d4      	bhi.n	403302 <layout_update_core+0x2a>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
  403358:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  40335c:	4403      	add	r3, r0
  40335e:	4a0a      	ldr	r2, [pc, #40]	; (403388 <layout_update_core+0xb0>)
  403360:	6812      	ldr	r2, [r2, #0]
  403362:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
  403366:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40336a:	6849      	ldr	r1, [r1, #4]
  40336c:	4628      	mov	r0, r5
  40336e:	4798      	blx	r3
  403370:	bd70      	pop	{r4, r5, r6, pc}
  403372:	bd70      	pop	{r4, r5, r6, pc}
  403374:	00405e25 	.word	0x00405e25
  403378:	00402bf9 	.word	0x00402bf9
  40337c:	004027ed 	.word	0x004027ed
  403380:	00404f1d 	.word	0x00404f1d
  403384:	20400a18 	.word	0x20400a18
  403388:	20439ecc 	.word	0x20439ecc

0040338c <lv_obj_update_layout>:
{
  40338c:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
  40338e:	4b10      	ldr	r3, [pc, #64]	; (4033d0 <lv_obj_update_layout+0x44>)
  403390:	781b      	ldrb	r3, [r3, #0]
  403392:	b103      	cbz	r3, 403396 <lv_obj_update_layout+0xa>
  403394:	bd38      	pop	{r3, r4, r5, pc}
    mutex = true;
  403396:	2201      	movs	r2, #1
  403398:	4b0d      	ldr	r3, [pc, #52]	; (4033d0 <lv_obj_update_layout+0x44>)
  40339a:	701a      	strb	r2, [r3, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
  40339c:	4b0d      	ldr	r3, [pc, #52]	; (4033d4 <lv_obj_update_layout+0x48>)
  40339e:	4798      	blx	r3
  4033a0:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
  4033a2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  4033a6:	f013 0f02 	tst.w	r3, #2
  4033aa:	d00d      	beq.n	4033c8 <lv_obj_update_layout+0x3c>
        layout_update_core(scr);
  4033ac:	4d0a      	ldr	r5, [pc, #40]	; (4033d8 <lv_obj_update_layout+0x4c>)
        scr->scr_layout_inv = 0;
  4033ae:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  4033b2:	f36f 0341 	bfc	r3, #1, #1
  4033b6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
  4033ba:	4620      	mov	r0, r4
  4033bc:	47a8      	blx	r5
    while(scr->scr_layout_inv) {
  4033be:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  4033c2:	f013 0f02 	tst.w	r3, #2
  4033c6:	d1f2      	bne.n	4033ae <lv_obj_update_layout+0x22>
    mutex = false;
  4033c8:	2200      	movs	r2, #0
  4033ca:	4b01      	ldr	r3, [pc, #4]	; (4033d0 <lv_obj_update_layout+0x44>)
  4033cc:	701a      	strb	r2, [r3, #0]
  4033ce:	e7e1      	b.n	403394 <lv_obj_update_layout+0x8>
  4033d0:	20400a1c 	.word	0x20400a1c
  4033d4:	00405d5d 	.word	0x00405d5d
  4033d8:	004032d9 	.word	0x004032d9

004033dc <lv_obj_align_to>:
{
  4033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033e0:	b085      	sub	sp, #20
  4033e2:	4681      	mov	r9, r0
  4033e4:	460d      	mov	r5, r1
  4033e6:	4692      	mov	sl, r2
  4033e8:	9302      	str	r3, [sp, #8]
    lv_obj_update_layout(obj);
  4033ea:	4baf      	ldr	r3, [pc, #700]	; (4036a8 <lv_obj_align_to+0x2cc>)
  4033ec:	4798      	blx	r3
    if(base == NULL) base = lv_obj_get_parent(obj);
  4033ee:	2d00      	cmp	r5, #0
  4033f0:	d053      	beq.n	40349a <lv_obj_align_to+0xbe>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  4033f2:	4648      	mov	r0, r9
  4033f4:	4bad      	ldr	r3, [pc, #692]	; (4036ac <lv_obj_align_to+0x2d0>)
  4033f6:	4798      	blx	r3
  4033f8:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  4033fa:	f241 0232 	movw	r2, #4146	; 0x1032
  4033fe:	2100      	movs	r1, #0
  403400:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 4036b0 <lv_obj_align_to+0x2d4>
  403404:	47d8      	blx	fp
  403406:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  403408:	f641 0212 	movw	r2, #6162	; 0x1812
  40340c:	2100      	movs	r1, #0
  40340e:	4640      	mov	r0, r8
  403410:	47d8      	blx	fp
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
  403412:	b2b6      	uxth	r6, r6
  403414:	4430      	add	r0, r6
  403416:	b203      	sxth	r3, r0
  403418:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  40341a:	f641 0210 	movw	r2, #6160	; 0x1810
  40341e:	2100      	movs	r1, #0
  403420:	4640      	mov	r0, r8
  403422:	47d8      	blx	fp
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
  403424:	4406      	add	r6, r0
  403426:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  403428:	f241 0232 	movw	r2, #4146	; 0x1032
  40342c:	2100      	movs	r1, #0
  40342e:	4628      	mov	r0, r5
  403430:	47d8      	blx	fp
  403432:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  403434:	f641 0212 	movw	r2, #6162	; 0x1812
  403438:	2100      	movs	r1, #0
  40343a:	4628      	mov	r0, r5
  40343c:	47d8      	blx	fp
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
  40343e:	b2a4      	uxth	r4, r4
  403440:	4420      	add	r0, r4
  403442:	b283      	uxth	r3, r0
  403444:	9303      	str	r3, [sp, #12]
  403446:	b21f      	sxth	r7, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  403448:	f641 0210 	movw	r2, #6160	; 0x1810
  40344c:	2100      	movs	r1, #0
  40344e:	4628      	mov	r0, r5
  403450:	47d8      	blx	fp
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
  403452:	4404      	add	r4, r0
  403454:	b2a4      	uxth	r4, r4
  403456:	fa0f fb84 	sxth.w	fp, r4
    if(align == LV_ALIGN_DEFAULT) {
  40345a:	f1ba 0f00 	cmp.w	sl, #0
  40345e:	d021      	beq.n	4034a4 <lv_obj_align_to+0xc8>
    switch(align) {
  403460:	f10a 3aff 	add.w	sl, sl, #4294967295
  403464:	f1ba 0f14 	cmp.w	sl, #20
  403468:	f200 8259 	bhi.w	40391e <lv_obj_align_to+0x542>
  40346c:	e8df f01a 	tbh	[pc, sl, lsl #1]
  403470:	008a0023 	.word	0x008a0023
  403474:	00b000a2 	.word	0x00b000a2
  403478:	00e700c0 	.word	0x00e700c0
  40347c:	01300104 	.word	0x01300104
  403480:	015a005b 	.word	0x015a005b
  403484:	01870166 	.word	0x01870166
  403488:	01a7019c 	.word	0x01a7019c
  40348c:	01db01c7 	.word	0x01db01c7
  403490:	020501e5 	.word	0x020501e5
  403494:	0224021c 	.word	0x0224021c
  403498:	0242      	.short	0x0242
    if(base == NULL) base = lv_obj_get_parent(obj);
  40349a:	4648      	mov	r0, r9
  40349c:	4b83      	ldr	r3, [pc, #524]	; (4036ac <lv_obj_align_to+0x2d0>)
  40349e:	4798      	blx	r3
  4034a0:	4605      	mov	r5, r0
  4034a2:	e7a6      	b.n	4033f2 <lv_obj_align_to+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  4034a4:	f241 426a 	movw	r2, #5226	; 0x146a
  4034a8:	2100      	movs	r1, #0
  4034aa:	4628      	mov	r0, r5
  4034ac:	4b80      	ldr	r3, [pc, #512]	; (4036b0 <lv_obj_align_to+0x2d4>)
  4034ae:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  4034b0:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
  4034b2:	2801      	cmp	r0, #1
  4034b4:	d07e      	beq.n	4035b4 <lv_obj_align_to+0x1d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  4034b6:	f241 426a 	movw	r2, #5226	; 0x146a
  4034ba:	2100      	movs	r1, #0
  4034bc:	4640      	mov	r0, r8
  4034be:	4b7c      	ldr	r3, [pc, #496]	; (4036b0 <lv_obj_align_to+0x2d4>)
  4034c0:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  4034c2:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
  4034c4:	2801      	cmp	r0, #1
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
  4034c6:	f9b5 4014 	ldrsh.w	r4, [r5, #20]
  4034ca:	9b02      	ldr	r3, [sp, #8]
  4034cc:	441c      	add	r4, r3
  4034ce:	f9b8 0014 	ldrsh.w	r0, [r8, #20]
  4034d2:	eba4 0400 	sub.w	r4, r4, r0
  4034d6:	4640      	mov	r0, r8
  4034d8:	bf0c      	ite	eq
  4034da:	4b76      	ldreq	r3, [pc, #472]	; (4036b4 <lv_obj_align_to+0x2d8>)
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
  4034dc:	4b76      	ldrne	r3, [pc, #472]	; (4036b8 <lv_obj_align_to+0x2dc>)
  4034de:	4798      	blx	r3
  4034e0:	4420      	add	r0, r4
  4034e2:	9b01      	ldr	r3, [sp, #4]
  4034e4:	1ac0      	subs	r0, r0, r3
  4034e6:	4407      	add	r7, r0
  4034e8:	b23f      	sxth	r7, r7
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
  4034ea:	f9b5 4016 	ldrsh.w	r4, [r5, #22]
  4034ee:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
  4034f2:	4404      	add	r4, r0
  4034f4:	f9b8 0016 	ldrsh.w	r0, [r8, #22]
  4034f8:	1a24      	subs	r4, r4, r0
  4034fa:	4640      	mov	r0, r8
  4034fc:	4b6f      	ldr	r3, [pc, #444]	; (4036bc <lv_obj_align_to+0x2e0>)
  4034fe:	4798      	blx	r3
  403500:	4420      	add	r0, r4
  403502:	1b86      	subs	r6, r0, r6
  403504:	44b3      	add	fp, r6
  403506:	fa1f fb8b 	uxth.w	fp, fp
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
  40350a:	2200      	movs	r2, #0
  40350c:	2101      	movs	r1, #1
  40350e:	4648      	mov	r0, r9
  403510:	4b6b      	ldr	r3, [pc, #428]	; (4036c0 <lv_obj_align_to+0x2e4>)
  403512:	4798      	blx	r3
    lv_obj_set_pos(obj, x, y);
  403514:	fa0f f28b 	sxth.w	r2, fp
  403518:	4639      	mov	r1, r7
  40351a:	4648      	mov	r0, r9
  40351c:	4b69      	ldr	r3, [pc, #420]	; (4036c4 <lv_obj_align_to+0x2e8>)
  40351e:	4798      	blx	r3
}
  403520:	b005      	add	sp, #20
  403522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
  403526:	4628      	mov	r0, r5
  403528:	4b67      	ldr	r3, [pc, #412]	; (4036c8 <lv_obj_align_to+0x2ec>)
  40352a:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40352c:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  403530:	3301      	adds	r3, #1
  403532:	f8b9 2014 	ldrh.w	r2, [r9, #20]
  403536:	1a9b      	subs	r3, r3, r2
  403538:	b21b      	sxth	r3, r3
  40353a:	2b00      	cmp	r3, #0
  40353c:	bfb8      	it	lt
  40353e:	3301      	addlt	r3, #1
  403540:	9a03      	ldr	r2, [sp, #12]
  403542:	eba2 0763 	sub.w	r7, r2, r3, asr #1
  403546:	4603      	mov	r3, r0
  403548:	2800      	cmp	r0, #0
  40354a:	bfb8      	it	lt
  40354c:	1c43      	addlt	r3, r0, #1
  40354e:	eb07 0763 	add.w	r7, r7, r3, asr #1
  403552:	b23f      	sxth	r7, r7
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
  403554:	4628      	mov	r0, r5
  403556:	4b5d      	ldr	r3, [pc, #372]	; (4036cc <lv_obj_align_to+0x2f0>)
  403558:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40355a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  40355e:	3301      	adds	r3, #1
  403560:	f8b9 2016 	ldrh.w	r2, [r9, #22]
  403564:	1a9b      	subs	r3, r3, r2
  403566:	b21b      	sxth	r3, r3
  403568:	2b00      	cmp	r3, #0
  40356a:	bfb8      	it	lt
  40356c:	3301      	addlt	r3, #1
  40356e:	eba4 0b63 	sub.w	fp, r4, r3, asr #1
  403572:	4603      	mov	r3, r0
  403574:	2800      	cmp	r0, #0
  403576:	bfb8      	it	lt
  403578:	1c43      	addlt	r3, r0, #1
  40357a:	eb0b 0b63 	add.w	fp, fp, r3, asr #1
  40357e:	fa0f fb8b 	sxth.w	fp, fp
            break;
  403582:	e798      	b.n	4034b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
  403584:	4628      	mov	r0, r5
  403586:	4b50      	ldr	r3, [pc, #320]	; (4036c8 <lv_obj_align_to+0x2ec>)
  403588:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40358a:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  40358e:	3301      	adds	r3, #1
  403590:	f8b9 2014 	ldrh.w	r2, [r9, #20]
  403594:	1a9b      	subs	r3, r3, r2
  403596:	b21b      	sxth	r3, r3
  403598:	2b00      	cmp	r3, #0
  40359a:	bfb8      	it	lt
  40359c:	3301      	addlt	r3, #1
  40359e:	9a03      	ldr	r2, [sp, #12]
  4035a0:	eba2 0763 	sub.w	r7, r2, r3, asr #1
  4035a4:	4603      	mov	r3, r0
  4035a6:	2800      	cmp	r0, #0
  4035a8:	bfb8      	it	lt
  4035aa:	1c43      	addlt	r3, r0, #1
  4035ac:	eb07 0763 	add.w	r7, r7, r3, asr #1
  4035b0:	b23f      	sxth	r7, r7
            break;
  4035b2:	e780      	b.n	4034b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
  4035b4:	4628      	mov	r0, r5
  4035b6:	4b44      	ldr	r3, [pc, #272]	; (4036c8 <lv_obj_align_to+0x2ec>)
  4035b8:	4798      	blx	r3
  4035ba:	9b03      	ldr	r3, [sp, #12]
  4035bc:	1e5f      	subs	r7, r3, #1
  4035be:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  4035c2:	441f      	add	r7, r3
  4035c4:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  4035c8:	1aff      	subs	r7, r7, r3
  4035ca:	4407      	add	r7, r0
  4035cc:	b23f      	sxth	r7, r7
            break;
  4035ce:	e772      	b.n	4034b6 <lv_obj_align_to+0xda>
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
  4035d0:	4628      	mov	r0, r5
  4035d2:	4b3e      	ldr	r3, [pc, #248]	; (4036cc <lv_obj_align_to+0x2f0>)
  4035d4:	4798      	blx	r3
  4035d6:	f104 3bff 	add.w	fp, r4, #4294967295
  4035da:	f8b9 4016 	ldrh.w	r4, [r9, #22]
  4035de:	44a3      	add	fp, r4
  4035e0:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  4035e4:	ebab 0b03 	sub.w	fp, fp, r3
  4035e8:	4483      	add	fp, r0
  4035ea:	fa0f fb8b 	sxth.w	fp, fp
            break;
  4035ee:	e762      	b.n	4034b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
  4035f0:	4628      	mov	r0, r5
  4035f2:	4b35      	ldr	r3, [pc, #212]	; (4036c8 <lv_obj_align_to+0x2ec>)
  4035f4:	4798      	blx	r3
  4035f6:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  4035fa:	3301      	adds	r3, #1
  4035fc:	f8b9 2014 	ldrh.w	r2, [r9, #20]
  403600:	1a9b      	subs	r3, r3, r2
  403602:	b21b      	sxth	r3, r3
  403604:	2b00      	cmp	r3, #0
  403606:	bfb8      	it	lt
  403608:	3301      	addlt	r3, #1
  40360a:	9a03      	ldr	r2, [sp, #12]
  40360c:	eba2 0763 	sub.w	r7, r2, r3, asr #1
  403610:	4603      	mov	r3, r0
  403612:	2800      	cmp	r0, #0
  403614:	bfb8      	it	lt
  403616:	1c43      	addlt	r3, r0, #1
  403618:	eb07 0763 	add.w	r7, r7, r3, asr #1
  40361c:	b23f      	sxth	r7, r7
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
  40361e:	4628      	mov	r0, r5
  403620:	4b2a      	ldr	r3, [pc, #168]	; (4036cc <lv_obj_align_to+0x2f0>)
  403622:	4798      	blx	r3
  403624:	f104 3bff 	add.w	fp, r4, #4294967295
  403628:	f8b9 4016 	ldrh.w	r4, [r9, #22]
  40362c:	44a3      	add	fp, r4
  40362e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  403632:	ebab 0b03 	sub.w	fp, fp, r3
  403636:	4483      	add	fp, r0
  403638:	fa0f fb8b 	sxth.w	fp, fp
            break;
  40363c:	e73b      	b.n	4034b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
  40363e:	4628      	mov	r0, r5
  403640:	4b21      	ldr	r3, [pc, #132]	; (4036c8 <lv_obj_align_to+0x2ec>)
  403642:	4798      	blx	r3
  403644:	9b03      	ldr	r3, [sp, #12]
  403646:	1e5f      	subs	r7, r3, #1
  403648:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  40364c:	441f      	add	r7, r3
  40364e:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  403652:	1aff      	subs	r7, r7, r3
  403654:	4407      	add	r7, r0
  403656:	b23f      	sxth	r7, r7
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
  403658:	4628      	mov	r0, r5
  40365a:	4b1c      	ldr	r3, [pc, #112]	; (4036cc <lv_obj_align_to+0x2f0>)
  40365c:	4798      	blx	r3
  40365e:	f104 3bff 	add.w	fp, r4, #4294967295
  403662:	f8b9 4016 	ldrh.w	r4, [r9, #22]
  403666:	44a3      	add	fp, r4
  403668:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  40366c:	ebab 0b03 	sub.w	fp, fp, r3
  403670:	4483      	add	fp, r0
  403672:	fa0f fb8b 	sxth.w	fp, fp
            break;
  403676:	e71e      	b.n	4034b6 <lv_obj_align_to+0xda>
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
  403678:	4628      	mov	r0, r5
  40367a:	4b14      	ldr	r3, [pc, #80]	; (4036cc <lv_obj_align_to+0x2f0>)
  40367c:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40367e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  403682:	3301      	adds	r3, #1
  403684:	f8b9 2016 	ldrh.w	r2, [r9, #22]
  403688:	1a9b      	subs	r3, r3, r2
  40368a:	b21b      	sxth	r3, r3
  40368c:	2b00      	cmp	r3, #0
  40368e:	bfb8      	it	lt
  403690:	3301      	addlt	r3, #1
  403692:	eba4 0b63 	sub.w	fp, r4, r3, asr #1
  403696:	4603      	mov	r3, r0
  403698:	2800      	cmp	r0, #0
  40369a:	bfb8      	it	lt
  40369c:	1c43      	addlt	r3, r0, #1
  40369e:	eb0b 0b63 	add.w	fp, fp, r3, asr #1
  4036a2:	fa0f fb8b 	sxth.w	fp, fp
            break;
  4036a6:	e706      	b.n	4034b6 <lv_obj_align_to+0xda>
  4036a8:	0040338d 	.word	0x0040338d
  4036ac:	00405ded 	.word	0x00405ded
  4036b0:	00404f1d 	.word	0x00404f1d
  4036b4:	00403c3d 	.word	0x00403c3d
  4036b8:	00403b41 	.word	0x00403b41
  4036bc:	00403a41 	.word	0x00403a41
  4036c0:	00405d21 	.word	0x00405d21
  4036c4:	00402111 	.word	0x00402111
  4036c8:	004022ed 	.word	0x004022ed
  4036cc:	0040232d 	.word	0x0040232d
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
  4036d0:	4628      	mov	r0, r5
  4036d2:	4b95      	ldr	r3, [pc, #596]	; (403928 <lv_obj_align_to+0x54c>)
  4036d4:	4798      	blx	r3
  4036d6:	9b03      	ldr	r3, [sp, #12]
  4036d8:	1e5f      	subs	r7, r3, #1
  4036da:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  4036de:	441f      	add	r7, r3
  4036e0:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  4036e4:	1aff      	subs	r7, r7, r3
  4036e6:	4407      	add	r7, r0
  4036e8:	b23f      	sxth	r7, r7
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
  4036ea:	4628      	mov	r0, r5
  4036ec:	4b8f      	ldr	r3, [pc, #572]	; (40392c <lv_obj_align_to+0x550>)
  4036ee:	4798      	blx	r3
  4036f0:	f8b9 b01a 	ldrh.w	fp, [r9, #26]
  4036f4:	f10b 0b01 	add.w	fp, fp, #1
  4036f8:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  4036fc:	ebab 0b03 	sub.w	fp, fp, r3
  403700:	fa0f fb8b 	sxth.w	fp, fp
  403704:	f1bb 0f00 	cmp.w	fp, #0
  403708:	bfb8      	it	lt
  40370a:	f10b 0b01 	addlt.w	fp, fp, #1
  40370e:	eba4 0b6b 	sub.w	fp, r4, fp, asr #1
  403712:	4604      	mov	r4, r0
  403714:	2800      	cmp	r0, #0
  403716:	bfb8      	it	lt
  403718:	1c44      	addlt	r4, r0, #1
  40371a:	eb0b 0b64 	add.w	fp, fp, r4, asr #1
  40371e:	fa0f fb8b 	sxth.w	fp, fp
            break;
  403722:	e6c8      	b.n	4034b6 <lv_obj_align_to+0xda>
  403724:	f8b9 b01a 	ldrh.w	fp, [r9, #26]
  403728:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  40372c:	ebab 0b03 	sub.w	fp, fp, r3
            y = -lv_obj_get_height(obj);
  403730:	ea6f 0b0b 	mvn.w	fp, fp
  403734:	fa0f fb8b 	sxth.w	fp, fp
            x = 0;
  403738:	2700      	movs	r7, #0
            break;
  40373a:	e6bc      	b.n	4034b6 <lv_obj_align_to+0xda>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40373c:	8b2b      	ldrh	r3, [r5, #24]
  40373e:	3301      	adds	r3, #1
  403740:	8aaa      	ldrh	r2, [r5, #20]
  403742:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
  403744:	b21b      	sxth	r3, r3
  403746:	2b00      	cmp	r3, #0
  403748:	bfb8      	it	lt
  40374a:	3301      	addlt	r3, #1
  40374c:	105f      	asrs	r7, r3, #1
  40374e:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  403752:	3301      	adds	r3, #1
  403754:	f8b9 2014 	ldrh.w	r2, [r9, #20]
  403758:	1a9b      	subs	r3, r3, r2
  40375a:	b21b      	sxth	r3, r3
  40375c:	2b00      	cmp	r3, #0
  40375e:	bfb8      	it	lt
  403760:	3301      	addlt	r3, #1
  403762:	eba7 0763 	sub.w	r7, r7, r3, asr #1
  403766:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  403768:	f8b9 b01a 	ldrh.w	fp, [r9, #26]
  40376c:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  403770:	ebab 0b03 	sub.w	fp, fp, r3
            y = -lv_obj_get_height(obj);
  403774:	ea6f 0b0b 	mvn.w	fp, fp
  403778:	fa0f fb8b 	sxth.w	fp, fp
            break;
  40377c:	e69b      	b.n	4034b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
  40377e:	f8b9 7018 	ldrh.w	r7, [r9, #24]
  403782:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  403786:	1afb      	subs	r3, r7, r3
  403788:	8b2f      	ldrh	r7, [r5, #24]
  40378a:	1aff      	subs	r7, r7, r3
  40378c:	8aab      	ldrh	r3, [r5, #20]
  40378e:	1aff      	subs	r7, r7, r3
  403790:	b23f      	sxth	r7, r7
  403792:	f8b9 b01a 	ldrh.w	fp, [r9, #26]
  403796:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  40379a:	ebab 0b03 	sub.w	fp, fp, r3
            y = -lv_obj_get_height(obj);
  40379e:	ea6f 0b0b 	mvn.w	fp, fp
  4037a2:	fa0f fb8b 	sxth.w	fp, fp
            break;
  4037a6:	e686      	b.n	4034b6 <lv_obj_align_to+0xda>
  4037a8:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
  4037ac:	f10b 0b01 	add.w	fp, fp, #1
  4037b0:	8aeb      	ldrh	r3, [r5, #22]
  4037b2:	ebab 0b03 	sub.w	fp, fp, r3
  4037b6:	fa0f fb8b 	sxth.w	fp, fp
            x = 0;
  4037ba:	2700      	movs	r7, #0
            break;
  4037bc:	e67b      	b.n	4034b6 <lv_obj_align_to+0xda>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4037be:	8b2b      	ldrh	r3, [r5, #24]
  4037c0:	3301      	adds	r3, #1
  4037c2:	8aaa      	ldrh	r2, [r5, #20]
  4037c4:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
  4037c6:	b21b      	sxth	r3, r3
  4037c8:	2b00      	cmp	r3, #0
  4037ca:	bfb8      	it	lt
  4037cc:	3301      	addlt	r3, #1
  4037ce:	105f      	asrs	r7, r3, #1
  4037d0:	f8b9 3018 	ldrh.w	r3, [r9, #24]
  4037d4:	3301      	adds	r3, #1
  4037d6:	f8b9 2014 	ldrh.w	r2, [r9, #20]
  4037da:	1a9b      	subs	r3, r3, r2
  4037dc:	b21b      	sxth	r3, r3
  4037de:	2b00      	cmp	r3, #0
  4037e0:	bfb8      	it	lt
  4037e2:	3301      	addlt	r3, #1
  4037e4:	eba7 0763 	sub.w	r7, r7, r3, asr #1
  4037e8:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4037ea:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
  4037ee:	f10b 0b01 	add.w	fp, fp, #1
  4037f2:	8aeb      	ldrh	r3, [r5, #22]
  4037f4:	ebab 0b03 	sub.w	fp, fp, r3
  4037f8:	fa0f fb8b 	sxth.w	fp, fp
            break;
  4037fc:	e65b      	b.n	4034b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
  4037fe:	f8b9 7018 	ldrh.w	r7, [r9, #24]
  403802:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  403806:	1afb      	subs	r3, r7, r3
  403808:	8b2f      	ldrh	r7, [r5, #24]
  40380a:	1aff      	subs	r7, r7, r3
  40380c:	8aab      	ldrh	r3, [r5, #20]
  40380e:	1aff      	subs	r7, r7, r3
  403810:	b23f      	sxth	r7, r7
  403812:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
  403816:	f10b 0b01 	add.w	fp, fp, #1
  40381a:	8aeb      	ldrh	r3, [r5, #22]
  40381c:	ebab 0b03 	sub.w	fp, fp, r3
  403820:	fa0f fb8b 	sxth.w	fp, fp
            break;
  403824:	e647      	b.n	4034b6 <lv_obj_align_to+0xda>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  403826:	f8b9 7018 	ldrh.w	r7, [r9, #24]
  40382a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  40382e:	1aff      	subs	r7, r7, r3
            x = -lv_obj_get_width(obj);
  403830:	43ff      	mvns	r7, r7
  403832:	b23f      	sxth	r7, r7
            y = 0;
  403834:	f04f 0b00 	mov.w	fp, #0
            break;
  403838:	e63d      	b.n	4034b6 <lv_obj_align_to+0xda>
  40383a:	f8b9 7018 	ldrh.w	r7, [r9, #24]
  40383e:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  403842:	1aff      	subs	r7, r7, r3
            x = -lv_obj_get_width(obj);
  403844:	43ff      	mvns	r7, r7
  403846:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  403848:	8b6b      	ldrh	r3, [r5, #26]
  40384a:	3301      	adds	r3, #1
  40384c:	8aea      	ldrh	r2, [r5, #22]
  40384e:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
  403850:	b21b      	sxth	r3, r3
  403852:	2b00      	cmp	r3, #0
  403854:	bfb8      	it	lt
  403856:	3301      	addlt	r3, #1
  403858:	ea4f 0b63 	mov.w	fp, r3, asr #1
  40385c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  403860:	3301      	adds	r3, #1
  403862:	f8b9 2016 	ldrh.w	r2, [r9, #22]
  403866:	1a9b      	subs	r3, r3, r2
  403868:	b21b      	sxth	r3, r3
  40386a:	2b00      	cmp	r3, #0
  40386c:	bfb8      	it	lt
  40386e:	3301      	addlt	r3, #1
  403870:	ebab 0b63 	sub.w	fp, fp, r3, asr #1
  403874:	fa0f fb8b 	sxth.w	fp, fp
            break;
  403878:	e61d      	b.n	4034b6 <lv_obj_align_to+0xda>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40387a:	f8b9 7018 	ldrh.w	r7, [r9, #24]
  40387e:	f8b9 3014 	ldrh.w	r3, [r9, #20]
  403882:	1aff      	subs	r7, r7, r3
            x = -lv_obj_get_width(obj);
  403884:	43ff      	mvns	r7, r7
  403886:	b23f      	sxth	r7, r7
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
  403888:	f8b9 b01a 	ldrh.w	fp, [r9, #26]
  40388c:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  403890:	ebab 0303 	sub.w	r3, fp, r3
  403894:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
  403898:	ebab 0b03 	sub.w	fp, fp, r3
  40389c:	8aeb      	ldrh	r3, [r5, #22]
  40389e:	ebab 0b03 	sub.w	fp, fp, r3
  4038a2:	fa0f fb8b 	sxth.w	fp, fp
            break;
  4038a6:	e606      	b.n	4034b6 <lv_obj_align_to+0xda>
  4038a8:	8b2f      	ldrh	r7, [r5, #24]
  4038aa:	3701      	adds	r7, #1
  4038ac:	8aab      	ldrh	r3, [r5, #20]
  4038ae:	1aff      	subs	r7, r7, r3
  4038b0:	b23f      	sxth	r7, r7
            y = 0;
  4038b2:	f04f 0b00 	mov.w	fp, #0
            break;
  4038b6:	e5fe      	b.n	4034b6 <lv_obj_align_to+0xda>
  4038b8:	8b2f      	ldrh	r7, [r5, #24]
  4038ba:	3701      	adds	r7, #1
  4038bc:	8aab      	ldrh	r3, [r5, #20]
  4038be:	1aff      	subs	r7, r7, r3
  4038c0:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4038c2:	8b6b      	ldrh	r3, [r5, #26]
  4038c4:	3301      	adds	r3, #1
  4038c6:	8aea      	ldrh	r2, [r5, #22]
  4038c8:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
  4038ca:	b21b      	sxth	r3, r3
  4038cc:	2b00      	cmp	r3, #0
  4038ce:	bfb8      	it	lt
  4038d0:	3301      	addlt	r3, #1
  4038d2:	ea4f 0b63 	mov.w	fp, r3, asr #1
  4038d6:	f8b9 301a 	ldrh.w	r3, [r9, #26]
  4038da:	3301      	adds	r3, #1
  4038dc:	f8b9 2016 	ldrh.w	r2, [r9, #22]
  4038e0:	1a9b      	subs	r3, r3, r2
  4038e2:	b21b      	sxth	r3, r3
  4038e4:	2b00      	cmp	r3, #0
  4038e6:	bfb8      	it	lt
  4038e8:	3301      	addlt	r3, #1
  4038ea:	ebab 0b63 	sub.w	fp, fp, r3, asr #1
  4038ee:	fa0f fb8b 	sxth.w	fp, fp
            break;
  4038f2:	e5e0      	b.n	4034b6 <lv_obj_align_to+0xda>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4038f4:	8b2f      	ldrh	r7, [r5, #24]
  4038f6:	3701      	adds	r7, #1
  4038f8:	8aab      	ldrh	r3, [r5, #20]
  4038fa:	1aff      	subs	r7, r7, r3
  4038fc:	b23f      	sxth	r7, r7
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
  4038fe:	f8b9 b01a 	ldrh.w	fp, [r9, #26]
  403902:	f8b9 3016 	ldrh.w	r3, [r9, #22]
  403906:	ebab 0303 	sub.w	r3, fp, r3
  40390a:	f8b5 b01a 	ldrh.w	fp, [r5, #26]
  40390e:	ebab 0b03 	sub.w	fp, fp, r3
  403912:	8aeb      	ldrh	r3, [r5, #22]
  403914:	ebab 0b03 	sub.w	fp, fp, r3
  403918:	fa0f fb8b 	sxth.w	fp, fp
            break;
  40391c:	e5cb      	b.n	4034b6 <lv_obj_align_to+0xda>
    lv_coord_t y = 0;
  40391e:	f04f 0b00 	mov.w	fp, #0
    lv_coord_t x = 0;
  403922:	465f      	mov	r7, fp
  403924:	e5c7      	b.n	4034b6 <lv_obj_align_to+0xda>
  403926:	bf00      	nop
  403928:	004022ed 	.word	0x004022ed
  40392c:	0040232d 	.word	0x0040232d

00403930 <scroll_by_raw>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
  403930:	b570      	push	{r4, r5, r6, lr}
    if(x == 0 && y == 0) return;
  403932:	460d      	mov	r5, r1
  403934:	b909      	cbnz	r1, 40393a <scroll_by_raw+0xa>
  403936:	b902      	cbnz	r2, 40393a <scroll_by_raw+0xa>
  403938:	bd70      	pop	{r4, r5, r6, pc}
  40393a:	4616      	mov	r6, r2
  40393c:	4604      	mov	r4, r0

    lv_obj_allocate_spec_attr(obj);
  40393e:	4b0d      	ldr	r3, [pc, #52]	; (403974 <scroll_by_raw+0x44>)
  403940:	4798      	blx	r3

    obj->spec_attr->scroll.x += x;
  403942:	68a2      	ldr	r2, [r4, #8]
  403944:	8a13      	ldrh	r3, [r2, #16]
  403946:	442b      	add	r3, r5
  403948:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
  40394a:	68a2      	ldr	r2, [r4, #8]
  40394c:	8a53      	ldrh	r3, [r2, #18]
  40394e:	4433      	add	r3, r6
  403950:	8253      	strh	r3, [r2, #18]

    lv_obj_move_children_by(obj, x, y, true);
  403952:	2301      	movs	r3, #1
  403954:	4632      	mov	r2, r6
  403956:	4629      	mov	r1, r5
  403958:	4620      	mov	r0, r4
  40395a:	4d07      	ldr	r5, [pc, #28]	; (403978 <scroll_by_raw+0x48>)
  40395c:	47a8      	blx	r5
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
  40395e:	2200      	movs	r2, #0
  403960:	210b      	movs	r1, #11
  403962:	4620      	mov	r0, r4
  403964:	4b05      	ldr	r3, [pc, #20]	; (40397c <scroll_by_raw+0x4c>)
  403966:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  403968:	2801      	cmp	r0, #1
  40396a:	d1e5      	bne.n	403938 <scroll_by_raw+0x8>
    lv_obj_invalidate(obj);
  40396c:	4620      	mov	r0, r4
  40396e:	4b04      	ldr	r3, [pc, #16]	; (403980 <scroll_by_raw+0x50>)
  403970:	4798      	blx	r3
  403972:	e7e1      	b.n	403938 <scroll_by_raw+0x8>
  403974:	004018d9 	.word	0x004018d9
  403978:	00402471 	.word	0x00402471
  40397c:	00400491 	.word	0x00400491
  403980:	0040262d 	.word	0x0040262d

00403984 <scroll_anim_ready_cb>:
{
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
  403984:	b508      	push	{r3, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
  403986:	2200      	movs	r2, #0
  403988:	210a      	movs	r1, #10
  40398a:	6800      	ldr	r0, [r0, #0]
  40398c:	4b01      	ldr	r3, [pc, #4]	; (403994 <scroll_anim_ready_cb+0x10>)
  40398e:	4798      	blx	r3
  403990:	bd08      	pop	{r3, pc}
  403992:	bf00      	nop
  403994:	00400491 	.word	0x00400491

00403998 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
  403998:	6883      	ldr	r3, [r0, #8]
  40399a:	b11b      	cbz	r3, 4039a4 <lv_obj_get_scrollbar_mode+0xc>
  40399c:	7e18      	ldrb	r0, [r3, #24]
  40399e:	f000 0003 	and.w	r0, r0, #3
  4039a2:	4770      	bx	lr
  4039a4:	2003      	movs	r0, #3
}
  4039a6:	4770      	bx	lr

004039a8 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
  4039a8:	6883      	ldr	r3, [r0, #8]
  4039aa:	b11b      	cbz	r3, 4039b4 <lv_obj_get_scroll_dir+0xc>
  4039ac:	7e58      	ldrb	r0, [r3, #25]
  4039ae:	f000 000f 	and.w	r0, r0, #15
  4039b2:	4770      	bx	lr
  4039b4:	200f      	movs	r0, #15
}
  4039b6:	4770      	bx	lr

004039b8 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
  4039b8:	6883      	ldr	r3, [r0, #8]
  4039ba:	b11b      	cbz	r3, 4039c4 <lv_obj_get_scroll_snap_x+0xc>
  4039bc:	7e18      	ldrb	r0, [r3, #24]
  4039be:	f3c0 0081 	ubfx	r0, r0, #2, #2
  4039c2:	4770      	bx	lr
  4039c4:	2000      	movs	r0, #0
}
  4039c6:	4770      	bx	lr

004039c8 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
  4039c8:	6883      	ldr	r3, [r0, #8]
  4039ca:	b11b      	cbz	r3, 4039d4 <lv_obj_get_scroll_snap_y+0xc>
  4039cc:	7e18      	ldrb	r0, [r3, #24]
  4039ce:	f3c0 1001 	ubfx	r0, r0, #4, #2
  4039d2:	4770      	bx	lr
  4039d4:	2000      	movs	r0, #0
}
  4039d6:	4770      	bx	lr

004039d8 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
  4039d8:	6883      	ldr	r3, [r0, #8]
  4039da:	b123      	cbz	r3, 4039e6 <lv_obj_get_scroll_x+0xe>
    return -obj->spec_attr->scroll.x;
  4039dc:	8a18      	ldrh	r0, [r3, #16]
  4039de:	4240      	negs	r0, r0
  4039e0:	b280      	uxth	r0, r0
}
  4039e2:	b200      	sxth	r0, r0
  4039e4:	4770      	bx	lr
  4039e6:	2000      	movs	r0, #0
  4039e8:	e7fb      	b.n	4039e2 <lv_obj_get_scroll_x+0xa>
	...

004039ec <scroll_x_anim>:
{
  4039ec:	b538      	push	{r3, r4, r5, lr}
  4039ee:	4605      	mov	r5, r0
  4039f0:	460c      	mov	r4, r1
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
  4039f2:	4b04      	ldr	r3, [pc, #16]	; (403a04 <scroll_x_anim+0x18>)
  4039f4:	4798      	blx	r3
  4039f6:	1901      	adds	r1, r0, r4
  4039f8:	2200      	movs	r2, #0
  4039fa:	b209      	sxth	r1, r1
  4039fc:	4628      	mov	r0, r5
  4039fe:	4b02      	ldr	r3, [pc, #8]	; (403a08 <scroll_x_anim+0x1c>)
  403a00:	4798      	blx	r3
  403a02:	bd38      	pop	{r3, r4, r5, pc}
  403a04:	004039d9 	.word	0x004039d9
  403a08:	00403931 	.word	0x00403931

00403a0c <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
  403a0c:	6883      	ldr	r3, [r0, #8]
  403a0e:	b123      	cbz	r3, 403a1a <lv_obj_get_scroll_y+0xe>
    return -obj->spec_attr->scroll.y;
  403a10:	8a58      	ldrh	r0, [r3, #18]
  403a12:	4240      	negs	r0, r0
  403a14:	b280      	uxth	r0, r0
}
  403a16:	b200      	sxth	r0, r0
  403a18:	4770      	bx	lr
  403a1a:	2000      	movs	r0, #0
  403a1c:	e7fb      	b.n	403a16 <lv_obj_get_scroll_y+0xa>
	...

00403a20 <scroll_y_anim>:
{
  403a20:	b538      	push	{r3, r4, r5, lr}
  403a22:	4605      	mov	r5, r0
  403a24:	460c      	mov	r4, r1
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
  403a26:	4b04      	ldr	r3, [pc, #16]	; (403a38 <scroll_y_anim+0x18>)
  403a28:	4798      	blx	r3
  403a2a:	1902      	adds	r2, r0, r4
  403a2c:	b212      	sxth	r2, r2
  403a2e:	2100      	movs	r1, #0
  403a30:	4628      	mov	r0, r5
  403a32:	4b02      	ldr	r3, [pc, #8]	; (403a3c <scroll_y_anim+0x1c>)
  403a34:	4798      	blx	r3
  403a36:	bd38      	pop	{r3, r4, r5, pc}
  403a38:	00403a0d 	.word	0x00403a0d
  403a3c:	00403931 	.word	0x00403931

00403a40 <lv_obj_get_scroll_top>:
    if(obj->spec_attr == NULL) return 0;
  403a40:	6883      	ldr	r3, [r0, #8]
  403a42:	b123      	cbz	r3, 403a4e <lv_obj_get_scroll_top+0xe>
    return -obj->spec_attr->scroll.y;
  403a44:	8a58      	ldrh	r0, [r3, #18]
  403a46:	4240      	negs	r0, r0
  403a48:	b280      	uxth	r0, r0
}
  403a4a:	b200      	sxth	r0, r0
  403a4c:	4770      	bx	lr
  403a4e:	2000      	movs	r0, #0
  403a50:	e7fb      	b.n	403a4a <lv_obj_get_scroll_top+0xa>
	...

00403a54 <lv_obj_get_scroll_bottom>:
{
  403a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a58:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  403a5a:	4b32      	ldr	r3, [pc, #200]	; (403b24 <lv_obj_get_scroll_bottom+0xd0>)
  403a5c:	4798      	blx	r3
    for(i = 0; i < child_cnt; i++) {
  403a5e:	2800      	cmp	r0, #0
  403a60:	d04b      	beq.n	403afa <lv_obj_get_scroll_bottom+0xa6>
  403a62:	4680      	mov	r8, r0
  403a64:	2400      	movs	r4, #0
  403a66:	4f30      	ldr	r7, [pc, #192]	; (403b28 <lv_obj_get_scroll_bottom+0xd4>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  403a68:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
  403a6c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 403b3c <lv_obj_get_scroll_bottom+0xe8>
  403a70:	e002      	b.n	403a78 <lv_obj_get_scroll_bottom+0x24>
    for(i = 0; i < child_cnt; i++) {
  403a72:	3401      	adds	r4, #1
  403a74:	45a0      	cmp	r8, r4
  403a76:	d00e      	beq.n	403a96 <lv_obj_get_scroll_bottom+0x42>
        lv_obj_t * child = obj->spec_attr->children[i];
  403a78:	68b3      	ldr	r3, [r6, #8]
  403a7a:	681b      	ldr	r3, [r3, #0]
  403a7c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  403a80:	4651      	mov	r1, sl
  403a82:	4628      	mov	r0, r5
  403a84:	47c8      	blx	r9
  403a86:	2800      	cmp	r0, #0
  403a88:	d1f3      	bne.n	403a72 <lv_obj_get_scroll_bottom+0x1e>
        child_res = LV_MAX(child_res, child->coords.y2);
  403a8a:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  403a8e:	429f      	cmp	r7, r3
  403a90:	bfb8      	it	lt
  403a92:	461f      	movlt	r7, r3
  403a94:	e7ed      	b.n	403a72 <lv_obj_get_scroll_bottom+0x1e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  403a96:	f641 0210 	movw	r2, #6160	; 0x1810
  403a9a:	2100      	movs	r1, #0
  403a9c:	4630      	mov	r0, r6
  403a9e:	4d23      	ldr	r5, [pc, #140]	; (403b2c <lv_obj_get_scroll_bottom+0xd8>)
  403aa0:	47a8      	blx	r5
  403aa2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
  403aa4:	f641 0211 	movw	r2, #6161	; 0x1811
  403aa8:	2100      	movs	r1, #0
  403aaa:	4630      	mov	r0, r6
  403aac:	47a8      	blx	r5
  403aae:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  403ab0:	f241 0232 	movw	r2, #4146	; 0x1032
  403ab4:	2100      	movs	r1, #0
  403ab6:	4630      	mov	r0, r6
  403ab8:	47a8      	blx	r5
  403aba:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
  403abc:	f517 4fc0 	cmn.w	r7, #24576	; 0x6000
  403ac0:	d004      	beq.n	403acc <lv_obj_get_scroll_bottom+0x78>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
  403ac2:	1820      	adds	r0, r4, r0
  403ac4:	8b73      	ldrh	r3, [r6, #26]
  403ac6:	1ac0      	subs	r0, r0, r3
  403ac8:	4407      	add	r7, r0
  403aca:	b23f      	sxth	r7, r7
    lv_coord_t self_h = lv_obj_get_self_height(obj);
  403acc:	4630      	mov	r0, r6
  403ace:	4b18      	ldr	r3, [pc, #96]	; (403b30 <lv_obj_get_scroll_bottom+0xdc>)
  403ad0:	4798      	blx	r3
  403ad2:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
  403ad4:	4630      	mov	r0, r6
  403ad6:	4b17      	ldr	r3, [pc, #92]	; (403b34 <lv_obj_get_scroll_bottom+0xe0>)
  403ad8:	4798      	blx	r3
  403ada:	4444      	add	r4, r8
  403adc:	444c      	add	r4, r9
  403ade:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  403ae2:	1a24      	subs	r4, r4, r0
  403ae4:	b2a4      	uxth	r4, r4
    self_h -= lv_obj_get_scroll_y(obj);
  403ae6:	4630      	mov	r0, r6
  403ae8:	4b13      	ldr	r3, [pc, #76]	; (403b38 <lv_obj_get_scroll_bottom+0xe4>)
  403aea:	4798      	blx	r3
  403aec:	1a20      	subs	r0, r4, r0
    return LV_MAX(child_res, self_h);
  403aee:	b200      	sxth	r0, r0
  403af0:	42b8      	cmp	r0, r7
  403af2:	bfb8      	it	lt
  403af4:	4638      	movlt	r0, r7
}
  403af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  403afa:	f641 0210 	movw	r2, #6160	; 0x1810
  403afe:	2100      	movs	r1, #0
  403b00:	4630      	mov	r0, r6
  403b02:	4d0a      	ldr	r5, [pc, #40]	; (403b2c <lv_obj_get_scroll_bottom+0xd8>)
  403b04:	47a8      	blx	r5
  403b06:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
  403b08:	f641 0211 	movw	r2, #6161	; 0x1811
  403b0c:	2100      	movs	r1, #0
  403b0e:	4630      	mov	r0, r6
  403b10:	47a8      	blx	r5
  403b12:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  403b14:	f241 0232 	movw	r2, #4146	; 0x1032
  403b18:	2100      	movs	r1, #0
  403b1a:	4630      	mov	r0, r6
  403b1c:	47a8      	blx	r5
  403b1e:	4605      	mov	r5, r0
  403b20:	4f01      	ldr	r7, [pc, #4]	; (403b28 <lv_obj_get_scroll_bottom+0xd4>)
  403b22:	e7d3      	b.n	403acc <lv_obj_get_scroll_bottom+0x78>
  403b24:	00405e25 	.word	0x00405e25
  403b28:	ffffa000 	.word	0xffffa000
  403b2c:	00404f1d 	.word	0x00404f1d
  403b30:	00402409 	.word	0x00402409
  403b34:	004022df 	.word	0x004022df
  403b38:	00403a0d 	.word	0x00403a0d
  403b3c:	004013f3 	.word	0x004013f3

00403b40 <lv_obj_get_scroll_left>:
{
  403b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b44:	b083      	sub	sp, #12
  403b46:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  403b48:	f241 426a 	movw	r2, #5226	; 0x146a
  403b4c:	2100      	movs	r1, #0
  403b4e:	4b34      	ldr	r3, [pc, #208]	; (403c20 <lv_obj_get_scroll_left+0xe0>)
  403b50:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  403b52:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
  403b54:	2801      	cmp	r0, #1
  403b56:	d008      	beq.n	403b6a <lv_obj_get_scroll_left+0x2a>
        if(obj->spec_attr == NULL) return 0;
  403b58:	68ab      	ldr	r3, [r5, #8]
  403b5a:	2b00      	cmp	r3, #0
  403b5c:	d05d      	beq.n	403c1a <lv_obj_get_scroll_left+0xda>
        return -obj->spec_attr->scroll.x;
  403b5e:	8a18      	ldrh	r0, [r3, #16]
  403b60:	4240      	negs	r0, r0
  403b62:	b200      	sxth	r0, r0
}
  403b64:	b003      	add	sp, #12
  403b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  403b6a:	f641 0213 	movw	r2, #6163	; 0x1813
  403b6e:	2100      	movs	r1, #0
  403b70:	4628      	mov	r0, r5
  403b72:	4c2b      	ldr	r4, [pc, #172]	; (403c20 <lv_obj_get_scroll_left+0xe0>)
  403b74:	47a0      	blx	r4
  403b76:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  403b78:	f641 0212 	movw	r2, #6162	; 0x1812
  403b7c:	2100      	movs	r1, #0
  403b7e:	4628      	mov	r0, r5
  403b80:	47a0      	blx	r4
  403b82:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  403b84:	f241 0232 	movw	r2, #4146	; 0x1032
  403b88:	2100      	movs	r1, #0
  403b8a:	4628      	mov	r0, r5
  403b8c:	47a0      	blx	r4
  403b8e:	4682      	mov	sl, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  403b90:	4628      	mov	r0, r5
  403b92:	4b24      	ldr	r3, [pc, #144]	; (403c24 <lv_obj_get_scroll_left+0xe4>)
  403b94:	4798      	blx	r3
    for(i = 0; i < child_cnt; i++) {
  403b96:	4680      	mov	r8, r0
  403b98:	2800      	cmp	r0, #0
  403b9a:	d03a      	beq.n	403c12 <lv_obj_get_scroll_left+0xd2>
  403b9c:	f44f 47c0 	mov.w	r7, #24576	; 0x6000
  403ba0:	2400      	movs	r4, #0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  403ba2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 403c38 <lv_obj_get_scroll_left+0xf8>
  403ba6:	e002      	b.n	403bae <lv_obj_get_scroll_left+0x6e>
    for(i = 0; i < child_cnt; i++) {
  403ba8:	3401      	adds	r4, #1
  403baa:	45a0      	cmp	r8, r4
  403bac:	d00f      	beq.n	403bce <lv_obj_get_scroll_left+0x8e>
        lv_obj_t * child = obj->spec_attr->children[i];
  403bae:	68ab      	ldr	r3, [r5, #8]
  403bb0:	681b      	ldr	r3, [r3, #0]
  403bb2:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  403bb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  403bba:	4630      	mov	r0, r6
  403bbc:	47c8      	blx	r9
  403bbe:	2800      	cmp	r0, #0
  403bc0:	d1f2      	bne.n	403ba8 <lv_obj_get_scroll_left+0x68>
        x1 = LV_MIN(x1, child->coords.x1);
  403bc2:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  403bc6:	429f      	cmp	r7, r3
  403bc8:	bfa8      	it	ge
  403bca:	461f      	movge	r7, r3
  403bcc:	e7ec      	b.n	403ba8 <lv_obj_get_scroll_left+0x68>
    if(x1 != LV_COORD_MAX) {
  403bce:	f5b7 4fc0 	cmp.w	r7, #24576	; 0x6000
  403bd2:	d020      	beq.n	403c16 <lv_obj_get_scroll_left+0xd6>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
  403bd4:	eb0b 000a 	add.w	r0, fp, sl
  403bd8:	8aab      	ldrh	r3, [r5, #20]
  403bda:	4418      	add	r0, r3
  403bdc:	1bc7      	subs	r7, r0, r7
  403bde:	b23f      	sxth	r7, r7
    lv_coord_t self_w = lv_obj_get_self_width(obj);
  403be0:	4628      	mov	r0, r5
  403be2:	4b11      	ldr	r3, [pc, #68]	; (403c28 <lv_obj_get_scroll_left+0xe8>)
  403be4:	4798      	blx	r3
  403be6:	4606      	mov	r6, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
  403be8:	4628      	mov	r0, r5
  403bea:	4b10      	ldr	r3, [pc, #64]	; (403c2c <lv_obj_get_scroll_left+0xec>)
  403bec:	4798      	blx	r3
  403bee:	4604      	mov	r4, r0
  403bf0:	9b01      	ldr	r3, [sp, #4]
  403bf2:	445b      	add	r3, fp
  403bf4:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
  403bf8:	44b2      	add	sl, r6
  403bfa:	fa1f fa8a 	uxth.w	sl, sl
    self_w += lv_obj_get_scroll_x(obj);
  403bfe:	4628      	mov	r0, r5
  403c00:	4b0b      	ldr	r3, [pc, #44]	; (403c30 <lv_obj_get_scroll_left+0xf0>)
  403c02:	4798      	blx	r3
  403c04:	4450      	add	r0, sl
  403c06:	1b00      	subs	r0, r0, r4
    return LV_MAX(child_res, self_w);
  403c08:	b200      	sxth	r0, r0
  403c0a:	42b8      	cmp	r0, r7
  403c0c:	bfb8      	it	lt
  403c0e:	4638      	movlt	r0, r7
  403c10:	e7a8      	b.n	403b64 <lv_obj_get_scroll_left+0x24>
        child_res = LV_COORD_MIN;
  403c12:	4f08      	ldr	r7, [pc, #32]	; (403c34 <lv_obj_get_scroll_left+0xf4>)
  403c14:	e7e4      	b.n	403be0 <lv_obj_get_scroll_left+0xa0>
  403c16:	4f07      	ldr	r7, [pc, #28]	; (403c34 <lv_obj_get_scroll_left+0xf4>)
  403c18:	e7e2      	b.n	403be0 <lv_obj_get_scroll_left+0xa0>
        if(obj->spec_attr == NULL) return 0;
  403c1a:	2000      	movs	r0, #0
  403c1c:	e7a2      	b.n	403b64 <lv_obj_get_scroll_left+0x24>
  403c1e:	bf00      	nop
  403c20:	00404f1d 	.word	0x00404f1d
  403c24:	00405e25 	.word	0x00405e25
  403c28:	004023e1 	.word	0x004023e1
  403c2c:	004022d3 	.word	0x004022d3
  403c30:	004039d9 	.word	0x004039d9
  403c34:	ffffa000 	.word	0xffffa000
  403c38:	004013f3 	.word	0x004013f3

00403c3c <lv_obj_get_scroll_right>:
{
  403c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c40:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  403c42:	f241 426a 	movw	r2, #5226	; 0x146a
  403c46:	2100      	movs	r1, #0
  403c48:	4b3a      	ldr	r3, [pc, #232]	; (403d34 <lv_obj_get_scroll_right+0xf8>)
  403c4a:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  403c4c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
  403c4e:	2801      	cmp	r0, #1
  403c50:	d00c      	beq.n	403c6c <lv_obj_get_scroll_right+0x30>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  403c52:	4630      	mov	r0, r6
  403c54:	4b38      	ldr	r3, [pc, #224]	; (403d38 <lv_obj_get_scroll_right+0xfc>)
  403c56:	4798      	blx	r3
    for(i = 0; i < child_cnt; i++) {
  403c58:	4680      	mov	r8, r0
  403c5a:	2800      	cmp	r0, #0
  403c5c:	d054      	beq.n	403d08 <lv_obj_get_scroll_right+0xcc>
  403c5e:	2400      	movs	r4, #0
  403c60:	4f36      	ldr	r7, [pc, #216]	; (403d3c <lv_obj_get_scroll_right+0x100>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  403c62:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
  403c66:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 403d4c <lv_obj_get_scroll_right+0x110>
  403c6a:	e009      	b.n	403c80 <lv_obj_get_scroll_right+0x44>
        if(obj->spec_attr == NULL) return 0;
  403c6c:	68b3      	ldr	r3, [r6, #8]
  403c6e:	2b00      	cmp	r3, #0
  403c70:	d047      	beq.n	403d02 <lv_obj_get_scroll_right+0xc6>
        return obj->spec_attr->scroll.x;
  403c72:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
  403c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for(i = 0; i < child_cnt; i++) {
  403c7a:	3401      	adds	r4, #1
  403c7c:	45a0      	cmp	r8, r4
  403c7e:	d00e      	beq.n	403c9e <lv_obj_get_scroll_right+0x62>
        lv_obj_t * child = obj->spec_attr->children[i];
  403c80:	68b3      	ldr	r3, [r6, #8]
  403c82:	681b      	ldr	r3, [r3, #0]
  403c84:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  403c88:	4651      	mov	r1, sl
  403c8a:	4628      	mov	r0, r5
  403c8c:	47c8      	blx	r9
  403c8e:	2800      	cmp	r0, #0
  403c90:	d1f3      	bne.n	403c7a <lv_obj_get_scroll_right+0x3e>
        child_res = LV_MAX(child_res, child->coords.x2);
  403c92:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
  403c96:	429f      	cmp	r7, r3
  403c98:	bfb8      	it	lt
  403c9a:	461f      	movlt	r7, r3
  403c9c:	e7ed      	b.n	403c7a <lv_obj_get_scroll_right+0x3e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  403c9e:	f641 0213 	movw	r2, #6163	; 0x1813
  403ca2:	2100      	movs	r1, #0
  403ca4:	4630      	mov	r0, r6
  403ca6:	4d23      	ldr	r5, [pc, #140]	; (403d34 <lv_obj_get_scroll_right+0xf8>)
  403ca8:	47a8      	blx	r5
  403caa:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  403cac:	f641 0212 	movw	r2, #6162	; 0x1812
  403cb0:	2100      	movs	r1, #0
  403cb2:	4630      	mov	r0, r6
  403cb4:	47a8      	blx	r5
  403cb6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  403cb8:	f241 0232 	movw	r2, #4146	; 0x1032
  403cbc:	2100      	movs	r1, #0
  403cbe:	4630      	mov	r0, r6
  403cc0:	47a8      	blx	r5
  403cc2:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
  403cc4:	f517 4fc0 	cmn.w	r7, #24576	; 0x6000
  403cc8:	d004      	beq.n	403cd4 <lv_obj_get_scroll_right+0x98>
        child_res -= (obj->coords.x2 - pad_right - border_width);
  403cca:	4440      	add	r0, r8
  403ccc:	8b33      	ldrh	r3, [r6, #24]
  403cce:	1ac0      	subs	r0, r0, r3
  403cd0:	4407      	add	r7, r0
  403cd2:	b23f      	sxth	r7, r7
    self_w = lv_obj_get_self_width(obj);
  403cd4:	4630      	mov	r0, r6
  403cd6:	4b1a      	ldr	r3, [pc, #104]	; (403d40 <lv_obj_get_scroll_right+0x104>)
  403cd8:	4798      	blx	r3
  403cda:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
  403cdc:	4630      	mov	r0, r6
  403cde:	4b19      	ldr	r3, [pc, #100]	; (403d44 <lv_obj_get_scroll_right+0x108>)
  403ce0:	4798      	blx	r3
  403ce2:	4444      	add	r4, r8
  403ce4:	444c      	add	r4, r9
  403ce6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  403cea:	1a24      	subs	r4, r4, r0
  403cec:	b2a4      	uxth	r4, r4
    self_w -= lv_obj_get_scroll_x(obj);
  403cee:	4630      	mov	r0, r6
  403cf0:	4b15      	ldr	r3, [pc, #84]	; (403d48 <lv_obj_get_scroll_right+0x10c>)
  403cf2:	4798      	blx	r3
  403cf4:	1a20      	subs	r0, r4, r0
    return LV_MAX(child_res, self_w);
  403cf6:	b200      	sxth	r0, r0
  403cf8:	42b8      	cmp	r0, r7
  403cfa:	bfb8      	it	lt
  403cfc:	4638      	movlt	r0, r7
  403cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(obj->spec_attr == NULL) return 0;
  403d02:	2000      	movs	r0, #0
  403d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  403d08:	f641 0213 	movw	r2, #6163	; 0x1813
  403d0c:	2100      	movs	r1, #0
  403d0e:	4630      	mov	r0, r6
  403d10:	4d08      	ldr	r5, [pc, #32]	; (403d34 <lv_obj_get_scroll_right+0xf8>)
  403d12:	47a8      	blx	r5
  403d14:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  403d16:	f641 0212 	movw	r2, #6162	; 0x1812
  403d1a:	2100      	movs	r1, #0
  403d1c:	4630      	mov	r0, r6
  403d1e:	47a8      	blx	r5
  403d20:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  403d22:	f241 0232 	movw	r2, #4146	; 0x1032
  403d26:	2100      	movs	r1, #0
  403d28:	4630      	mov	r0, r6
  403d2a:	47a8      	blx	r5
  403d2c:	4605      	mov	r5, r0
  403d2e:	4f03      	ldr	r7, [pc, #12]	; (403d3c <lv_obj_get_scroll_right+0x100>)
  403d30:	e7d0      	b.n	403cd4 <lv_obj_get_scroll_right+0x98>
  403d32:	bf00      	nop
  403d34:	00404f1d 	.word	0x00404f1d
  403d38:	00405e25 	.word	0x00405e25
  403d3c:	ffffa000 	.word	0xffffa000
  403d40:	004023e1 	.word	0x004023e1
  403d44:	004022d3 	.word	0x004022d3
  403d48:	004039d9 	.word	0x004039d9
  403d4c:	004013f3 	.word	0x004013f3

00403d50 <lv_obj_scroll_by>:
{
  403d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d54:	b092      	sub	sp, #72	; 0x48
    if(x == 0 && y == 0) return;
  403d56:	460e      	mov	r6, r1
  403d58:	b919      	cbnz	r1, 403d62 <lv_obj_scroll_by+0x12>
  403d5a:	b912      	cbnz	r2, 403d62 <lv_obj_scroll_by+0x12>
}
  403d5c:	b012      	add	sp, #72	; 0x48
  403d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403d62:	4615      	mov	r5, r2
  403d64:	4604      	mov	r4, r0
    if(anim_en == LV_ANIM_ON) {
  403d66:	2b01      	cmp	r3, #1
  403d68:	d017      	beq.n	403d9a <lv_obj_scroll_by+0x4a>
        bool y_del = lv_anim_del(obj, scroll_y_anim);
  403d6a:	493b      	ldr	r1, [pc, #236]	; (403e58 <lv_obj_scroll_by+0x108>)
  403d6c:	4f3b      	ldr	r7, [pc, #236]	; (403e5c <lv_obj_scroll_by+0x10c>)
  403d6e:	47b8      	blx	r7
  403d70:	4680      	mov	r8, r0
        bool x_del = lv_anim_del(obj, scroll_x_anim);
  403d72:	493b      	ldr	r1, [pc, #236]	; (403e60 <lv_obj_scroll_by+0x110>)
  403d74:	4620      	mov	r0, r4
  403d76:	47b8      	blx	r7
  403d78:	4607      	mov	r7, r0
        scroll_by_raw(obj, x, y);
  403d7a:	462a      	mov	r2, r5
  403d7c:	4631      	mov	r1, r6
  403d7e:	4620      	mov	r0, r4
  403d80:	4b38      	ldr	r3, [pc, #224]	; (403e64 <lv_obj_scroll_by+0x114>)
  403d82:	4798      	blx	r3
        if(y_del || x_del) {
  403d84:	f1b8 0f00 	cmp.w	r8, #0
  403d88:	d101      	bne.n	403d8e <lv_obj_scroll_by+0x3e>
  403d8a:	2f00      	cmp	r7, #0
  403d8c:	d0e6      	beq.n	403d5c <lv_obj_scroll_by+0xc>
            res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
  403d8e:	2200      	movs	r2, #0
  403d90:	210a      	movs	r1, #10
  403d92:	4620      	mov	r0, r4
  403d94:	4b34      	ldr	r3, [pc, #208]	; (403e68 <lv_obj_scroll_by+0x118>)
  403d96:	4798      	blx	r3
  403d98:	e7e0      	b.n	403d5c <lv_obj_scroll_by+0xc>
        lv_disp_t * d = lv_obj_get_disp(obj);
  403d9a:	4b34      	ldr	r3, [pc, #208]	; (403e6c <lv_obj_scroll_by+0x11c>)
  403d9c:	4798      	blx	r3
  403d9e:	4607      	mov	r7, r0
        lv_anim_init(&a);
  403da0:	a801      	add	r0, sp, #4
  403da2:	4b33      	ldr	r3, [pc, #204]	; (403e70 <lv_obj_scroll_by+0x120>)
  403da4:	4798      	blx	r3
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
  403da6:	9401      	str	r4, [sp, #4]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  403da8:	4b32      	ldr	r3, [pc, #200]	; (403e74 <lv_obj_scroll_by+0x124>)
  403daa:	9304      	str	r3, [sp, #16]
        if(x) {
  403dac:	2e00      	cmp	r6, #0
  403dae:	d12a      	bne.n	403e06 <lv_obj_scroll_by+0xb6>
        if(y) {
  403db0:	2d00      	cmp	r5, #0
  403db2:	d0d3      	beq.n	403d5c <lv_obj_scroll_by+0xc>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, y);
  403db4:	4638      	mov	r0, r7
  403db6:	4b30      	ldr	r3, [pc, #192]	; (403e78 <lv_obj_scroll_by+0x128>)
  403db8:	4798      	blx	r3
  403dba:	462a      	mov	r2, r5
  403dbc:	2100      	movs	r1, #0
  403dbe:	f340 005d 	sbfx	r0, r0, #1, #30
  403dc2:	4b2e      	ldr	r3, [pc, #184]	; (403e7c <lv_obj_scroll_by+0x12c>)
  403dc4:	4798      	blx	r3
  403dc6:	28c8      	cmp	r0, #200	; 0xc8
  403dc8:	bf38      	it	cc
  403dca:	20c8      	movcc	r0, #200	; 0xc8
    a->time = duration;
  403dcc:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  403dd0:	bf28      	it	cs
  403dd2:	f44f 70c8 	movcs.w	r0, #400	; 0x190
  403dd6:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
  403dd8:	4620      	mov	r0, r4
  403dda:	4b29      	ldr	r3, [pc, #164]	; (403e80 <lv_obj_scroll_by+0x130>)
  403ddc:	4798      	blx	r3
            lv_anim_set_values(&a, -sy, -sy + y);
  403dde:	4243      	negs	r3, r0
    a->start_value = start;
  403de0:	9308      	str	r3, [sp, #32]
    a->current_value = start;
  403de2:	9309      	str	r3, [sp, #36]	; 0x24
  403de4:	1a28      	subs	r0, r5, r0
    a->end_value = end;
  403de6:	900a      	str	r0, [sp, #40]	; 0x28
    a->exec_cb = exec_cb;
  403de8:	4b1b      	ldr	r3, [pc, #108]	; (403e58 <lv_obj_scroll_by+0x108>)
  403dea:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
  403dec:	4b25      	ldr	r3, [pc, #148]	; (403e84 <lv_obj_scroll_by+0x134>)
  403dee:	9307      	str	r3, [sp, #28]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
  403df0:	aa01      	add	r2, sp, #4
  403df2:	2109      	movs	r1, #9
  403df4:	4620      	mov	r0, r4
  403df6:	4b1c      	ldr	r3, [pc, #112]	; (403e68 <lv_obj_scroll_by+0x118>)
  403df8:	4798      	blx	r3
            if(res != LV_RES_OK) return;
  403dfa:	2801      	cmp	r0, #1
  403dfc:	d1ae      	bne.n	403d5c <lv_obj_scroll_by+0xc>
            lv_anim_start(&a);
  403dfe:	a801      	add	r0, sp, #4
  403e00:	4b21      	ldr	r3, [pc, #132]	; (403e88 <lv_obj_scroll_by+0x138>)
  403e02:	4798      	blx	r3
  403e04:	e7aa      	b.n	403d5c <lv_obj_scroll_by+0xc>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, x);
  403e06:	4638      	mov	r0, r7
  403e08:	4b20      	ldr	r3, [pc, #128]	; (403e8c <lv_obj_scroll_by+0x13c>)
  403e0a:	4798      	blx	r3
  403e0c:	4632      	mov	r2, r6
  403e0e:	2100      	movs	r1, #0
  403e10:	f340 005d 	sbfx	r0, r0, #1, #30
  403e14:	4b19      	ldr	r3, [pc, #100]	; (403e7c <lv_obj_scroll_by+0x12c>)
  403e16:	4798      	blx	r3
  403e18:	28c8      	cmp	r0, #200	; 0xc8
  403e1a:	bf38      	it	cc
  403e1c:	20c8      	movcc	r0, #200	; 0xc8
    a->time = duration;
  403e1e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
  403e22:	bf28      	it	cs
  403e24:	f44f 70c8 	movcs.w	r0, #400	; 0x190
  403e28:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
  403e2a:	4620      	mov	r0, r4
  403e2c:	4b18      	ldr	r3, [pc, #96]	; (403e90 <lv_obj_scroll_by+0x140>)
  403e2e:	4798      	blx	r3
            lv_anim_set_values(&a, -sx, -sx + x);
  403e30:	4243      	negs	r3, r0
    a->start_value = start;
  403e32:	9308      	str	r3, [sp, #32]
    a->current_value = start;
  403e34:	9309      	str	r3, [sp, #36]	; 0x24
  403e36:	1a30      	subs	r0, r6, r0
    a->end_value = end;
  403e38:	900a      	str	r0, [sp, #40]	; 0x28
    a->exec_cb = exec_cb;
  403e3a:	4b09      	ldr	r3, [pc, #36]	; (403e60 <lv_obj_scroll_by+0x110>)
  403e3c:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
  403e3e:	4b11      	ldr	r3, [pc, #68]	; (403e84 <lv_obj_scroll_by+0x134>)
  403e40:	9307      	str	r3, [sp, #28]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
  403e42:	aa01      	add	r2, sp, #4
  403e44:	2109      	movs	r1, #9
  403e46:	4620      	mov	r0, r4
  403e48:	4b07      	ldr	r3, [pc, #28]	; (403e68 <lv_obj_scroll_by+0x118>)
  403e4a:	4798      	blx	r3
            if(res != LV_RES_OK) return;
  403e4c:	2801      	cmp	r0, #1
  403e4e:	d185      	bne.n	403d5c <lv_obj_scroll_by+0xc>
            lv_anim_start(&a);
  403e50:	a801      	add	r0, sp, #4
  403e52:	4b0d      	ldr	r3, [pc, #52]	; (403e88 <lv_obj_scroll_by+0x138>)
  403e54:	4798      	blx	r3
  403e56:	e7ab      	b.n	403db0 <lv_obj_scroll_by+0x60>
  403e58:	00403a21 	.word	0x00403a21
  403e5c:	00410511 	.word	0x00410511
  403e60:	004039ed 	.word	0x004039ed
  403e64:	00403931 	.word	0x00403931
  403e68:	00400491 	.word	0x00400491
  403e6c:	00405d6d 	.word	0x00405d6d
  403e70:	004104d9 	.word	0x004104d9
  403e74:	00403985 	.word	0x00403985
  403e78:	0041016d 	.word	0x0041016d
  403e7c:	004106b9 	.word	0x004106b9
  403e80:	00403a0d 	.word	0x00403a0d
  403e84:	004106d5 	.word	0x004106d5
  403e88:	0041059d 	.word	0x0041059d
  403e8c:	0041013d 	.word	0x0041013d
  403e90:	004039d9 	.word	0x004039d9

00403e94 <scroll_area_into_view>:
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
  403e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e98:	b089      	sub	sp, #36	; 0x24
  403e9a:	4681      	mov	r9, r0
  403e9c:	460d      	mov	r5, r1
  403e9e:	9103      	str	r1, [sp, #12]
  403ea0:	4690      	mov	r8, r2
  403ea2:	9302      	str	r3, [sp, #8]
    lv_obj_t * parent = lv_obj_get_parent(child);
  403ea4:	4608      	mov	r0, r1
  403ea6:	4bb6      	ldr	r3, [pc, #728]	; (404180 <scroll_area_into_view+0x2ec>)
  403ea8:	4798      	blx	r3
  403eaa:	4604      	mov	r4, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
  403eac:	2110      	movs	r1, #16
  403eae:	4bb5      	ldr	r3, [pc, #724]	; (404184 <scroll_area_into_view+0x2f0>)
  403eb0:	4798      	blx	r3
  403eb2:	2800      	cmp	r0, #0
  403eb4:	f000 8193 	beq.w	4041de <scroll_area_into_view+0x34a>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
  403eb8:	4620      	mov	r0, r4
  403eba:	4bb3      	ldr	r3, [pc, #716]	; (404188 <scroll_area_into_view+0x2f4>)
  403ebc:	4798      	blx	r3
  403ebe:	9001      	str	r0, [sp, #4]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
  403ec0:	4620      	mov	r0, r4
  403ec2:	4bb2      	ldr	r3, [pc, #712]	; (40418c <scroll_area_into_view+0x2f8>)
  403ec4:	4798      	blx	r3
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
  403ec6:	9004      	str	r0, [sp, #16]
  403ec8:	2800      	cmp	r0, #0
  403eca:	f000 80c1 	beq.w	404050 <scroll_area_into_view+0x1bc>
  403ece:	f105 0a14 	add.w	sl, r5, #20
  403ed2:	f241 0232 	movw	r2, #4146	; 0x1032
  403ed6:	2100      	movs	r1, #0
  403ed8:	4620      	mov	r0, r4
  403eda:	4ead      	ldr	r6, [pc, #692]	; (404190 <scroll_area_into_view+0x2fc>)
  403edc:	47b0      	blx	r6
  403ede:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  403ee0:	f641 0210 	movw	r2, #6160	; 0x1810
  403ee4:	2100      	movs	r1, #0
  403ee6:	4620      	mov	r0, r4
  403ee8:	47b0      	blx	r6
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
  403eea:	b2bf      	uxth	r7, r7
  403eec:	4438      	add	r0, r7
  403eee:	b285      	uxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
  403ef0:	f641 0211 	movw	r2, #6161	; 0x1811
  403ef4:	2100      	movs	r1, #0
  403ef6:	4620      	mov	r0, r4
  403ef8:	47b0      	blx	r6
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
  403efa:	4438      	add	r0, r7
  403efc:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
  403f00:	f8b8 3002 	ldrh.w	r3, [r8, #2]
  403f04:	1aee      	subs	r6, r5, r3
  403f06:	8ae2      	ldrh	r2, [r4, #22]
  403f08:	4416      	add	r6, r2
  403f0a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  403f0e:	1ab6      	subs	r6, r6, r2
  403f10:	b236      	sxth	r6, r6
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
  403f12:	445b      	add	r3, fp
  403f14:	8b62      	ldrh	r2, [r4, #26]
  403f16:	1a9b      	subs	r3, r3, r2
  403f18:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  403f1c:	4413      	add	r3, r2
  403f1e:	b29b      	uxth	r3, r3
  403f20:	9307      	str	r3, [sp, #28]
  403f22:	b21b      	sxth	r3, r3
  403f24:	9305      	str	r3, [sp, #20]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
  403f26:	4620      	mov	r0, r4
  403f28:	4b9a      	ldr	r3, [pc, #616]	; (404194 <scroll_area_into_view+0x300>)
  403f2a:	4798      	blx	r3
  403f2c:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
  403f2e:	2e00      	cmp	r6, #0
  403f30:	f2c0 8090 	blt.w	404054 <scroll_area_into_view+0x1c0>
  403f34:	9b05      	ldr	r3, [sp, #20]
  403f36:	2b00      	cmp	r3, #0
  403f38:	f2c0 808c 	blt.w	404054 <scroll_area_into_view+0x1c0>
  403f3c:	2600      	movs	r6, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
  403f3e:	9b04      	ldr	r3, [sp, #16]
  403f40:	2b02      	cmp	r3, #2
  403f42:	f000 80a8 	beq.w	404096 <scroll_area_into_view+0x202>
  403f46:	2b03      	cmp	r3, #3
  403f48:	f000 80ae 	beq.w	4040a8 <scroll_area_into_view+0x214>
  403f4c:	2b01      	cmp	r3, #1
  403f4e:	f000 809b 	beq.w	404088 <scroll_area_into_view+0x1f4>
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
  403f52:	4620      	mov	r0, r4
  403f54:	4b90      	ldr	r3, [pc, #576]	; (404198 <scroll_area_into_view+0x304>)
  403f56:	4798      	blx	r3
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
  403f58:	4683      	mov	fp, r0
  403f5a:	b110      	cbz	r0, 403f62 <scroll_area_into_view+0xce>
  403f5c:	9b03      	ldr	r3, [sp, #12]
  403f5e:	f103 0914 	add.w	r9, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  403f62:	f641 0212 	movw	r2, #6162	; 0x1812
  403f66:	2100      	movs	r1, #0
  403f68:	4620      	mov	r0, r4
  403f6a:	4d89      	ldr	r5, [pc, #548]	; (404190 <scroll_area_into_view+0x2fc>)
  403f6c:	47a8      	blx	r5
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
  403f6e:	4438      	add	r0, r7
  403f70:	fa1f fa80 	uxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  403f74:	f641 0213 	movw	r2, #6163	; 0x1813
  403f78:	2100      	movs	r1, #0
  403f7a:	4620      	mov	r0, r4
  403f7c:	47a8      	blx	r5
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
  403f7e:	4407      	add	r7, r0
  403f80:	b2bf      	uxth	r7, r7
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
  403f82:	f8b8 3000 	ldrh.w	r3, [r8]
  403f86:	ebaa 0503 	sub.w	r5, sl, r3
  403f8a:	8aa2      	ldrh	r2, [r4, #20]
  403f8c:	4415      	add	r5, r2
  403f8e:	f8b9 2000 	ldrh.w	r2, [r9]
  403f92:	1aad      	subs	r5, r5, r2
  403f94:	b22d      	sxth	r5, r5
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
  403f96:	443b      	add	r3, r7
  403f98:	8b22      	ldrh	r2, [r4, #24]
  403f9a:	1a9b      	subs	r3, r3, r2
  403f9c:	f8b9 2004 	ldrh.w	r2, [r9, #4]
  403fa0:	4413      	add	r3, r2
  403fa2:	b29b      	uxth	r3, r3
  403fa4:	b21a      	sxth	r2, r3
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
  403fa6:	2d00      	cmp	r5, #0
  403fa8:	f2c0 809c 	blt.w	4040e4 <scroll_area_into_view+0x250>
  403fac:	2a00      	cmp	r2, #0
  403fae:	f2c0 8099 	blt.w	4040e4 <scroll_area_into_view+0x250>
  403fb2:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
  403fb4:	4620      	mov	r0, r4
  403fb6:	4b79      	ldr	r3, [pc, #484]	; (40419c <scroll_area_into_view+0x308>)
  403fb8:	4798      	blx	r3
    switch(snap_x) {
  403fba:	f1bb 0f02 	cmp.w	fp, #2
  403fbe:	f000 80b1 	beq.w	404124 <scroll_area_into_view+0x290>
  403fc2:	f1bb 0f03 	cmp.w	fp, #3
  403fc6:	f000 80b4 	beq.w	404132 <scroll_area_into_view+0x29e>
  403fca:	f1bb 0f01 	cmp.w	fp, #1
  403fce:	f000 80a1 	beq.w	404114 <scroll_area_into_view+0x280>
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
  403fd2:	4973      	ldr	r1, [pc, #460]	; (4041a0 <scroll_area_into_view+0x30c>)
  403fd4:	4620      	mov	r0, r4
  403fd6:	4f73      	ldr	r7, [pc, #460]	; (4041a4 <scroll_area_into_view+0x310>)
  403fd8:	47b8      	blx	r7
  403fda:	4681      	mov	r9, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
  403fdc:	4972      	ldr	r1, [pc, #456]	; (4041a8 <scroll_area_into_view+0x314>)
  403fde:	4620      	mov	r0, r4
  403fe0:	47b8      	blx	r7
    if(y_del || x_del) {
  403fe2:	f1b9 0f00 	cmp.w	r9, #0
  403fe6:	f040 80be 	bne.w	404166 <scroll_area_into_view+0x2d2>
  403fea:	2800      	cmp	r0, #0
  403fec:	f040 80bb 	bne.w	404166 <scroll_area_into_view+0x2d2>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
  403ff0:	9b01      	ldr	r3, [sp, #4]
  403ff2:	f013 0f01 	tst.w	r3, #1
  403ff6:	d103      	bne.n	404000 <scroll_area_into_view+0x16c>
  403ff8:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  403ffc:	f040 80bb 	bne.w	404176 <scroll_area_into_view+0x2e2>
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
  404000:	9b01      	ldr	r3, [sp, #4]
  404002:	f013 0f02 	tst.w	r3, #2
  404006:	d106      	bne.n	404016 <scroll_area_into_view+0x182>
  404008:	2d00      	cmp	r5, #0
  40400a:	bfd4      	ite	le
  40400c:	2300      	movle	r3, #0
  40400e:	2301      	movgt	r3, #1
  404010:	2b00      	cmp	r3, #0
  404012:	bf18      	it	ne
  404014:	2500      	movne	r5, #0
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
  404016:	9b01      	ldr	r3, [sp, #4]
  404018:	f013 0f04 	tst.w	r3, #4
  40401c:	d103      	bne.n	404026 <scroll_area_into_view+0x192>
  40401e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  404022:	f040 80aa 	bne.w	40417a <scroll_area_into_view+0x2e6>
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
  404026:	9b01      	ldr	r3, [sp, #4]
  404028:	f013 0f08 	tst.w	r3, #8
  40402c:	d106      	bne.n	40403c <scroll_area_into_view+0x1a8>
  40402e:	2e00      	cmp	r6, #0
  404030:	bfd4      	ite	le
  404032:	2300      	movle	r3, #0
  404034:	2301      	movgt	r3, #1
  404036:	2b00      	cmp	r3, #0
  404038:	bf18      	it	ne
  40403a:	2600      	movne	r6, #0

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
  40403c:	f9b8 3000 	ldrsh.w	r3, [r8]
  404040:	9a02      	ldr	r2, [sp, #8]
  404042:	2a00      	cmp	r2, #0
  404044:	f040 80bc 	bne.w	4041c0 <scroll_area_into_view+0x32c>
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
  404048:	f8b8 3002 	ldrh.w	r3, [r8, #2]
  40404c:	2200      	movs	r2, #0
  40404e:	e0bd      	b.n	4041cc <scroll_area_into_view+0x338>
    else area_tmp = area;
  404050:	46ca      	mov	sl, r9
  404052:	e73e      	b.n	403ed2 <scroll_area_into_view+0x3e>
    else if(top_diff > 0) {
  404054:	2e00      	cmp	r6, #0
  404056:	dd07      	ble.n	404068 <scroll_area_into_view+0x1d4>
        lv_coord_t st = lv_obj_get_scroll_top(parent);
  404058:	4620      	mov	r0, r4
  40405a:	4b54      	ldr	r3, [pc, #336]	; (4041ac <scroll_area_into_view+0x318>)
  40405c:	4798      	blx	r3
        if(st - y_scroll < 0) y_scroll = 0;
  40405e:	1b80      	subs	r0, r0, r6
  404060:	2800      	cmp	r0, #0
  404062:	bfb8      	it	lt
  404064:	2600      	movlt	r6, #0
  404066:	e76a      	b.n	403f3e <scroll_area_into_view+0xaa>
    else if(bottom_diff > 0) {
  404068:	9b05      	ldr	r3, [sp, #20]
  40406a:	2b00      	cmp	r3, #0
  40406c:	dd0a      	ble.n	404084 <scroll_area_into_view+0x1f0>
        y_scroll = -bottom_diff;
  40406e:	9b07      	ldr	r3, [sp, #28]
  404070:	425e      	negs	r6, r3
  404072:	b236      	sxth	r6, r6
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
  404074:	4620      	mov	r0, r4
  404076:	4b4e      	ldr	r3, [pc, #312]	; (4041b0 <scroll_area_into_view+0x31c>)
  404078:	4798      	blx	r3
        if(sb + y_scroll < 0) y_scroll = 0;
  40407a:	4430      	add	r0, r6
  40407c:	2800      	cmp	r0, #0
  40407e:	bfb8      	it	lt
  404080:	2600      	movlt	r6, #0
  404082:	e75c      	b.n	403f3e <scroll_area_into_view+0xaa>
    lv_coord_t y_scroll = 0;
  404084:	2600      	movs	r6, #0
  404086:	e75a      	b.n	403f3e <scroll_area_into_view+0xaa>
            y_scroll += snap_goal - act;
  404088:	8ae6      	ldrh	r6, [r4, #22]
  40408a:	442e      	add	r6, r5
  40408c:	f8ba 5002 	ldrh.w	r5, [sl, #2]
  404090:	1b76      	subs	r6, r6, r5
  404092:	b236      	sxth	r6, r6
            break;
  404094:	e75d      	b.n	403f52 <scroll_area_into_view+0xbe>
            snap_goal = parent->coords.y2 - pbottom;
  404096:	8b66      	ldrh	r6, [r4, #26]
  404098:	eba6 060b 	sub.w	r6, r6, fp
            y_scroll += snap_goal - act;
  40409c:	f8ba b006 	ldrh.w	fp, [sl, #6]
  4040a0:	eba6 060b 	sub.w	r6, r6, fp
  4040a4:	b236      	sxth	r6, r6
            break;
  4040a6:	e754      	b.n	403f52 <scroll_area_into_view+0xbe>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4040a8:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
  4040ac:	9a06      	ldr	r2, [sp, #24]
  4040ae:	1b56      	subs	r6, r2, r5
  4040b0:	eba6 0b0b 	sub.w	fp, r6, fp
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
  4040b4:	fa0f fb8b 	sxth.w	fp, fp
  4040b8:	f1bb 0f00 	cmp.w	fp, #0
  4040bc:	bfb8      	it	lt
  4040be:	f10b 0b01 	addlt.w	fp, fp, #1
            y_scroll += snap_goal - act;
  4040c2:	8ae6      	ldrh	r6, [r4, #22]
  4040c4:	442e      	add	r6, r5
  4040c6:	1af6      	subs	r6, r6, r3
  4040c8:	eb06 066b 	add.w	r6, r6, fp, asr #1
  4040cc:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  4040d0:	3201      	adds	r2, #1
  4040d2:	1ad3      	subs	r3, r2, r3
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
  4040d4:	b21b      	sxth	r3, r3
  4040d6:	2b00      	cmp	r3, #0
  4040d8:	bfb8      	it	lt
  4040da:	3301      	addlt	r3, #1
            y_scroll += snap_goal - act;
  4040dc:	eba6 0663 	sub.w	r6, r6, r3, asr #1
  4040e0:	b236      	sxth	r6, r6
            break;
  4040e2:	e736      	b.n	403f52 <scroll_area_into_view+0xbe>
    else if(left_diff > 0) {
  4040e4:	2d00      	cmp	r5, #0
  4040e6:	dd07      	ble.n	4040f8 <scroll_area_into_view+0x264>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
  4040e8:	4620      	mov	r0, r4
  4040ea:	4b32      	ldr	r3, [pc, #200]	; (4041b4 <scroll_area_into_view+0x320>)
  4040ec:	4798      	blx	r3
        if(sl + x_scroll > 0) x_scroll = 0;
  4040ee:	4428      	add	r0, r5
  4040f0:	2800      	cmp	r0, #0
  4040f2:	bfc8      	it	gt
  4040f4:	2500      	movgt	r5, #0
  4040f6:	e75d      	b.n	403fb4 <scroll_area_into_view+0x120>
    else if(right_diff > 0) {
  4040f8:	2a00      	cmp	r2, #0
  4040fa:	dd09      	ble.n	404110 <scroll_area_into_view+0x27c>
        x_scroll = -right_diff;
  4040fc:	425d      	negs	r5, r3
  4040fe:	b22d      	sxth	r5, r5
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
  404100:	4620      	mov	r0, r4
  404102:	4b2d      	ldr	r3, [pc, #180]	; (4041b8 <scroll_area_into_view+0x324>)
  404104:	4798      	blx	r3
        if(sr + x_scroll < 0) x_scroll = 0;
  404106:	4428      	add	r0, r5
  404108:	2800      	cmp	r0, #0
  40410a:	bfb8      	it	lt
  40410c:	2500      	movlt	r5, #0
  40410e:	e751      	b.n	403fb4 <scroll_area_into_view+0x120>
    lv_coord_t x_scroll = 0;
  404110:	2500      	movs	r5, #0
  404112:	e74f      	b.n	403fb4 <scroll_area_into_view+0x120>
            x_scroll += snap_goal - act;
  404114:	8aa5      	ldrh	r5, [r4, #20]
  404116:	4455      	add	r5, sl
  404118:	f8b9 a000 	ldrh.w	sl, [r9]
  40411c:	eba5 050a 	sub.w	r5, r5, sl
  404120:	b22d      	sxth	r5, r5
            break;
  404122:	e756      	b.n	403fd2 <scroll_area_into_view+0x13e>
            snap_goal = parent->coords.x2 - pright;
  404124:	8b25      	ldrh	r5, [r4, #24]
  404126:	1bed      	subs	r5, r5, r7
            x_scroll += snap_goal - act;
  404128:	f8b9 7004 	ldrh.w	r7, [r9, #4]
  40412c:	1bed      	subs	r5, r5, r7
  40412e:	b22d      	sxth	r5, r5
            break;
  404130:	e74f      	b.n	403fd2 <scroll_area_into_view+0x13e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  404132:	f8b9 2000 	ldrh.w	r2, [r9]
            x_scroll += snap_goal - act;
  404136:	8aa5      	ldrh	r5, [r4, #20]
  404138:	4455      	add	r5, sl
  40413a:	1aad      	subs	r5, r5, r2
  40413c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  404140:	3301      	adds	r3, #1
  404142:	1a9b      	subs	r3, r3, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
  404144:	b21b      	sxth	r3, r3
  404146:	2b00      	cmp	r3, #0
  404148:	bfb8      	it	lt
  40414a:	3301      	addlt	r3, #1
            x_scroll += snap_goal - act;
  40414c:	eba5 0563 	sub.w	r5, r5, r3, asr #1
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
  404150:	eba0 000a 	sub.w	r0, r0, sl
  404154:	1bc7      	subs	r7, r0, r7
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
  404156:	b23f      	sxth	r7, r7
  404158:	2f00      	cmp	r7, #0
  40415a:	bfb8      	it	lt
  40415c:	3701      	addlt	r7, #1
            x_scroll += snap_goal - act;
  40415e:	eb05 0767 	add.w	r7, r5, r7, asr #1
  404162:	b23d      	sxth	r5, r7
            break;
  404164:	e735      	b.n	403fd2 <scroll_area_into_view+0x13e>
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
  404166:	2200      	movs	r2, #0
  404168:	210a      	movs	r1, #10
  40416a:	4620      	mov	r0, r4
  40416c:	4b13      	ldr	r3, [pc, #76]	; (4041bc <scroll_area_into_view+0x328>)
  40416e:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  404170:	2801      	cmp	r0, #1
  404172:	d134      	bne.n	4041de <scroll_area_into_view+0x34a>
  404174:	e73c      	b.n	403ff0 <scroll_area_into_view+0x15c>
    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
  404176:	2500      	movs	r5, #0
  404178:	e74d      	b.n	404016 <scroll_area_into_view+0x182>
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
  40417a:	2600      	movs	r6, #0
  40417c:	e75e      	b.n	40403c <scroll_area_into_view+0x1a8>
  40417e:	bf00      	nop
  404180:	00405ded 	.word	0x00405ded
  404184:	004013e5 	.word	0x004013e5
  404188:	004039a9 	.word	0x004039a9
  40418c:	004039c9 	.word	0x004039c9
  404190:	00404f1d 	.word	0x00404f1d
  404194:	004022df 	.word	0x004022df
  404198:	004039b9 	.word	0x004039b9
  40419c:	004022d3 	.word	0x004022d3
  4041a0:	00403a21 	.word	0x00403a21
  4041a4:	00410511 	.word	0x00410511
  4041a8:	004039ed 	.word	0x004039ed
  4041ac:	00403a41 	.word	0x00403a41
  4041b0:	00403a55 	.word	0x00403a55
  4041b4:	00403b41 	.word	0x00403b41
  4041b8:	00403c3d 	.word	0x00403c3d
  4041bc:	00400491 	.word	0x00400491
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
  4041c0:	442b      	add	r3, r5
  4041c2:	f8a8 3000 	strh.w	r3, [r8]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
  4041c6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
  4041ca:	4632      	mov	r2, r6
  4041cc:	4413      	add	r3, r2
  4041ce:	f8a8 3002 	strh.w	r3, [r8, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
  4041d2:	9b02      	ldr	r3, [sp, #8]
  4041d4:	4632      	mov	r2, r6
  4041d6:	4629      	mov	r1, r5
  4041d8:	4620      	mov	r0, r4
  4041da:	4c02      	ldr	r4, [pc, #8]	; (4041e4 <scroll_area_into_view+0x350>)
  4041dc:	47a0      	blx	r4
}
  4041de:	b009      	add	sp, #36	; 0x24
  4041e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041e4:	00403d51 	.word	0x00403d51

004041e8 <lv_obj_scroll_to_x>:
{
  4041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4041ea:	4605      	mov	r5, r0
  4041ec:	460c      	mov	r4, r1
  4041ee:	4617      	mov	r7, r2
    lv_anim_del(obj, scroll_x_anim);
  4041f0:	491e      	ldr	r1, [pc, #120]	; (40426c <lv_obj_scroll_to_x+0x84>)
  4041f2:	4b1f      	ldr	r3, [pc, #124]	; (404270 <lv_obj_scroll_to_x+0x88>)
  4041f4:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  4041f6:	f241 426a 	movw	r2, #5226	; 0x146a
  4041fa:	2100      	movs	r1, #0
  4041fc:	4628      	mov	r0, r5
  4041fe:	4b1d      	ldr	r3, [pc, #116]	; (404274 <lv_obj_scroll_to_x+0x8c>)
  404200:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  404202:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
  404204:	2801      	cmp	r0, #1
  404206:	d01c      	beq.n	404242 <lv_obj_scroll_to_x+0x5a>
  404208:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(x > 0) {
  40420c:	2c00      	cmp	r4, #0
  40420e:	dd0d      	ble.n	40422c <lv_obj_scroll_to_x+0x44>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
  404210:	4628      	mov	r0, r5
  404212:	4b19      	ldr	r3, [pc, #100]	; (404278 <lv_obj_scroll_to_x+0x90>)
  404214:	4798      	blx	r3
  404216:	4606      	mov	r6, r0
  404218:	4628      	mov	r0, r5
  40421a:	4b18      	ldr	r3, [pc, #96]	; (40427c <lv_obj_scroll_to_x+0x94>)
  40421c:	4798      	blx	r3
  40421e:	4430      	add	r0, r6
  404220:	b200      	sxth	r0, r0
  404222:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  404226:	4284      	cmp	r4, r0
  404228:	bfa8      	it	ge
  40422a:	4604      	movge	r4, r0
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
  40422c:	4628      	mov	r0, r5
  40422e:	4b14      	ldr	r3, [pc, #80]	; (404280 <lv_obj_scroll_to_x+0x98>)
  404230:	4798      	blx	r3
    lv_coord_t diff = -x + scroll_x;
  404232:	1b01      	subs	r1, r0, r4
    lv_obj_scroll_by(obj, diff, 0, anim_en);
  404234:	463b      	mov	r3, r7
  404236:	2200      	movs	r2, #0
  404238:	b209      	sxth	r1, r1
  40423a:	4628      	mov	r0, r5
  40423c:	4c11      	ldr	r4, [pc, #68]	; (404284 <lv_obj_scroll_to_x+0x9c>)
  40423e:	47a0      	blx	r4
  404240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404242:	ea04 74e4 	and.w	r4, r4, r4, asr #31
        if(x < 0) {
  404246:	2c00      	cmp	r4, #0
  404248:	daf0      	bge.n	40422c <lv_obj_scroll_to_x+0x44>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
  40424a:	4628      	mov	r0, r5
  40424c:	4b0a      	ldr	r3, [pc, #40]	; (404278 <lv_obj_scroll_to_x+0x90>)
  40424e:	4798      	blx	r3
  404250:	4606      	mov	r6, r0
  404252:	4628      	mov	r0, r5
  404254:	4b09      	ldr	r3, [pc, #36]	; (40427c <lv_obj_scroll_to_x+0x94>)
  404256:	4798      	blx	r3
  404258:	1833      	adds	r3, r6, r0
  40425a:	b21b      	sxth	r3, r3
  40425c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(x < -scroll_max) x = -scroll_max;
  404260:	425a      	negs	r2, r3
  404262:	4294      	cmp	r4, r2
  404264:	dae2      	bge.n	40422c <lv_obj_scroll_to_x+0x44>
  404266:	b214      	sxth	r4, r2
  404268:	e7e0      	b.n	40422c <lv_obj_scroll_to_x+0x44>
  40426a:	bf00      	nop
  40426c:	004039ed 	.word	0x004039ed
  404270:	00410511 	.word	0x00410511
  404274:	00404f1d 	.word	0x00404f1d
  404278:	00403b41 	.word	0x00403b41
  40427c:	00403c3d 	.word	0x00403c3d
  404280:	004039d9 	.word	0x004039d9
  404284:	00403d51 	.word	0x00403d51

00404288 <lv_obj_scroll_to_y>:
{
  404288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40428a:	4606      	mov	r6, r0
  40428c:	460c      	mov	r4, r1
  40428e:	4617      	mov	r7, r2
    lv_anim_del(obj, scroll_y_anim);
  404290:	490f      	ldr	r1, [pc, #60]	; (4042d0 <lv_obj_scroll_to_y+0x48>)
  404292:	4b10      	ldr	r3, [pc, #64]	; (4042d4 <lv_obj_scroll_to_y+0x4c>)
  404294:	4798      	blx	r3
  404296:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    if(y > 0) {
  40429a:	2c00      	cmp	r4, #0
  40429c:	dd0d      	ble.n	4042ba <lv_obj_scroll_to_y+0x32>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
  40429e:	4630      	mov	r0, r6
  4042a0:	4b0d      	ldr	r3, [pc, #52]	; (4042d8 <lv_obj_scroll_to_y+0x50>)
  4042a2:	4798      	blx	r3
  4042a4:	4605      	mov	r5, r0
  4042a6:	4630      	mov	r0, r6
  4042a8:	4b0c      	ldr	r3, [pc, #48]	; (4042dc <lv_obj_scroll_to_y+0x54>)
  4042aa:	4798      	blx	r3
  4042ac:	4428      	add	r0, r5
  4042ae:	b200      	sxth	r0, r0
  4042b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  4042b4:	4284      	cmp	r4, r0
  4042b6:	bfa8      	it	ge
  4042b8:	4604      	movge	r4, r0
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
  4042ba:	4630      	mov	r0, r6
  4042bc:	4b08      	ldr	r3, [pc, #32]	; (4042e0 <lv_obj_scroll_to_y+0x58>)
  4042be:	4798      	blx	r3
    lv_coord_t diff = -y + scroll_y;
  4042c0:	1b02      	subs	r2, r0, r4
    lv_obj_scroll_by(obj, 0, diff, anim_en);
  4042c2:	463b      	mov	r3, r7
  4042c4:	b212      	sxth	r2, r2
  4042c6:	2100      	movs	r1, #0
  4042c8:	4630      	mov	r0, r6
  4042ca:	4c06      	ldr	r4, [pc, #24]	; (4042e4 <lv_obj_scroll_to_y+0x5c>)
  4042cc:	47a0      	blx	r4
  4042ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042d0:	00403a21 	.word	0x00403a21
  4042d4:	00410511 	.word	0x00410511
  4042d8:	00403a41 	.word	0x00403a41
  4042dc:	00403a55 	.word	0x00403a55
  4042e0:	00403a0d 	.word	0x00403a0d
  4042e4:	00403d51 	.word	0x00403d51

004042e8 <lv_obj_scroll_to>:
{
  4042e8:	b570      	push	{r4, r5, r6, lr}
  4042ea:	4605      	mov	r5, r0
  4042ec:	4616      	mov	r6, r2
  4042ee:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
  4042f0:	461a      	mov	r2, r3
  4042f2:	4b04      	ldr	r3, [pc, #16]	; (404304 <lv_obj_scroll_to+0x1c>)
  4042f4:	4798      	blx	r3
    lv_obj_scroll_to_y(obj, y, anim_en);
  4042f6:	4622      	mov	r2, r4
  4042f8:	4631      	mov	r1, r6
  4042fa:	4628      	mov	r0, r5
  4042fc:	4b02      	ldr	r3, [pc, #8]	; (404308 <lv_obj_scroll_to+0x20>)
  4042fe:	4798      	blx	r3
  404300:	bd70      	pop	{r4, r5, r6, pc}
  404302:	bf00      	nop
  404304:	004041e9 	.word	0x004041e9
  404308:	00404289 	.word	0x00404289

0040430c <lv_obj_scroll_to_view_recursive>:
{
  40430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404310:	b082      	sub	sp, #8
  404312:	4605      	mov	r5, r0
  404314:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
  404316:	4b0f      	ldr	r3, [pc, #60]	; (404354 <lv_obj_scroll_to_view_recursive+0x48>)
  404318:	4798      	blx	r3
    lv_point_t p = {0, 0};
  40431a:	2300      	movs	r3, #0
  40431c:	f8ad 3004 	strh.w	r3, [sp, #4]
  404320:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_t * parent = lv_obj_get_parent(child);
  404324:	4628      	mov	r0, r5
  404326:	4b0c      	ldr	r3, [pc, #48]	; (404358 <lv_obj_scroll_to_view_recursive+0x4c>)
  404328:	4798      	blx	r3
    while(parent) {
  40432a:	b178      	cbz	r0, 40434c <lv_obj_scroll_to_view_recursive+0x40>
  40432c:	4604      	mov	r4, r0
  40432e:	4629      	mov	r1, r5
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
  404330:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40435c <lv_obj_scroll_to_view_recursive+0x50>
        parent = lv_obj_get_parent(parent);
  404334:	4f08      	ldr	r7, [pc, #32]	; (404358 <lv_obj_scroll_to_view_recursive+0x4c>)
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
  404336:	4633      	mov	r3, r6
  404338:	aa01      	add	r2, sp, #4
  40433a:	f105 0014 	add.w	r0, r5, #20
  40433e:	47c0      	blx	r8
        parent = lv_obj_get_parent(parent);
  404340:	4620      	mov	r0, r4
  404342:	47b8      	blx	r7
  404344:	4621      	mov	r1, r4
  404346:	4604      	mov	r4, r0
    while(parent) {
  404348:	2800      	cmp	r0, #0
  40434a:	d1f4      	bne.n	404336 <lv_obj_scroll_to_view_recursive+0x2a>
}
  40434c:	b002      	add	sp, #8
  40434e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404352:	bf00      	nop
  404354:	0040338d 	.word	0x0040338d
  404358:	00405ded 	.word	0x00405ded
  40435c:	00403e95 	.word	0x00403e95

00404360 <lv_obj_get_scrollbar_area>:
{
  404360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404364:	b08f      	sub	sp, #60	; 0x3c
  404366:	4604      	mov	r4, r0
  404368:	460f      	mov	r7, r1
  40436a:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
  40436c:	f04f 35ff 	mov.w	r5, #4294967295
  404370:	9500      	str	r5, [sp, #0]
  404372:	462b      	mov	r3, r5
  404374:	2200      	movs	r2, #0
  404376:	4611      	mov	r1, r2
  404378:	4638      	mov	r0, r7
  40437a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 40458c <lv_obj_get_scrollbar_area+0x22c>
  40437e:	47c0      	blx	r8
    lv_area_set(ver_area, 0, 0, -1, -1);
  404380:	9500      	str	r5, [sp, #0]
  404382:	462b      	mov	r3, r5
  404384:	2200      	movs	r2, #0
  404386:	4611      	mov	r1, r2
  404388:	4630      	mov	r0, r6
  40438a:	47c0      	blx	r8
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
  40438c:	2110      	movs	r1, #16
  40438e:	4620      	mov	r0, r4
  404390:	4b72      	ldr	r3, [pc, #456]	; (40455c <lv_obj_get_scrollbar_area+0x1fc>)
  404392:	4798      	blx	r3
  404394:	9002      	str	r0, [sp, #8]
  404396:	b120      	cbz	r0, 4043a2 <lv_obj_get_scrollbar_area+0x42>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
  404398:	4620      	mov	r0, r4
  40439a:	4b71      	ldr	r3, [pc, #452]	; (404560 <lv_obj_get_scrollbar_area+0x200>)
  40439c:	4798      	blx	r3
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
  40439e:	4680      	mov	r8, r0
  4043a0:	b910      	cbnz	r0, 4043a8 <lv_obj_get_scrollbar_area+0x48>
}
  4043a2:	b00f      	add	sp, #60	; 0x3c
  4043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev = lv_indev_get_next(NULL);
  4043a8:	2000      	movs	r0, #0
  4043aa:	4b6e      	ldr	r3, [pc, #440]	; (404564 <lv_obj_get_scrollbar_area+0x204>)
  4043ac:	4798      	blx	r3
  4043ae:	4605      	mov	r5, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
  4043b0:	f1b8 0f02 	cmp.w	r8, #2
  4043b4:	d025      	beq.n	404402 <lv_obj_get_scrollbar_area+0xa2>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
  4043b6:	4620      	mov	r0, r4
  4043b8:	4b6b      	ldr	r3, [pc, #428]	; (404568 <lv_obj_get_scrollbar_area+0x208>)
  4043ba:	4798      	blx	r3
  4043bc:	4681      	mov	r9, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
  4043be:	4620      	mov	r0, r4
  4043c0:	4b6a      	ldr	r3, [pc, #424]	; (40456c <lv_obj_get_scrollbar_area+0x20c>)
  4043c2:	4798      	blx	r3
  4043c4:	9003      	str	r0, [sp, #12]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
  4043c6:	4620      	mov	r0, r4
  4043c8:	4b69      	ldr	r3, [pc, #420]	; (404570 <lv_obj_get_scrollbar_area+0x210>)
  4043ca:	4798      	blx	r3
  4043cc:	9005      	str	r0, [sp, #20]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
  4043ce:	4620      	mov	r0, r4
  4043d0:	4b68      	ldr	r3, [pc, #416]	; (404574 <lv_obj_get_scrollbar_area+0x214>)
  4043d2:	4798      	blx	r3
  4043d4:	9004      	str	r0, [sp, #16]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
  4043d6:	4620      	mov	r0, r4
  4043d8:	4b67      	ldr	r3, [pc, #412]	; (404578 <lv_obj_get_scrollbar_area+0x218>)
  4043da:	4798      	blx	r3
  4043dc:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
  4043de:	f010 0f0c 	tst.w	r0, #12
  4043e2:	f000 8403 	beq.w	404bec <lv_obj_get_scrollbar_area+0x88c>
  4043e6:	f1b8 0f01 	cmp.w	r8, #1
  4043ea:	d076      	beq.n	4044da <lv_obj_get_scrollbar_area+0x17a>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
  4043ec:	f1b8 0f03 	cmp.w	r8, #3
  4043f0:	d041      	beq.n	404476 <lv_obj_get_scrollbar_area+0x116>
    if((dir & LV_DIR_HOR) &&
  4043f2:	f010 0f03 	tst.w	r0, #3
  4043f6:	d0d4      	beq.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
    bool ver_draw = false;
  4043f8:	f04f 0b00 	mov.w	fp, #0
    bool hor_draw = false;
  4043fc:	f8cd b008 	str.w	fp, [sp, #8]
  404400:	e070      	b.n	4044e4 <lv_obj_get_scrollbar_area+0x184>
        while(indev) {
  404402:	2800      	cmp	r0, #0
  404404:	d0cd      	beq.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
  404406:	f8df 9188 	ldr.w	r9, [pc, #392]	; 404590 <lv_obj_get_scrollbar_area+0x230>
            indev = lv_indev_get_next(indev);
  40440a:	f8df a158 	ldr.w	sl, [pc, #344]	; 404564 <lv_obj_get_scrollbar_area+0x204>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
  40440e:	4628      	mov	r0, r5
  404410:	47c8      	blx	r9
  404412:	4284      	cmp	r4, r0
  404414:	d005      	beq.n	404422 <lv_obj_get_scrollbar_area+0xc2>
            indev = lv_indev_get_next(indev);
  404416:	4628      	mov	r0, r5
  404418:	47d0      	blx	sl
        while(indev) {
  40441a:	4605      	mov	r5, r0
  40441c:	2800      	cmp	r0, #0
  40441e:	d1f6      	bne.n	40440e <lv_obj_get_scrollbar_area+0xae>
  404420:	e7bf      	b.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
        if(indev == NULL)  return;
  404422:	2d00      	cmp	r5, #0
  404424:	d0bd      	beq.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
  404426:	4620      	mov	r0, r4
  404428:	4b4f      	ldr	r3, [pc, #316]	; (404568 <lv_obj_get_scrollbar_area+0x208>)
  40442a:	4798      	blx	r3
  40442c:	4681      	mov	r9, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
  40442e:	4620      	mov	r0, r4
  404430:	4b4e      	ldr	r3, [pc, #312]	; (40456c <lv_obj_get_scrollbar_area+0x20c>)
  404432:	4798      	blx	r3
  404434:	9003      	str	r0, [sp, #12]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
  404436:	4620      	mov	r0, r4
  404438:	4b4d      	ldr	r3, [pc, #308]	; (404570 <lv_obj_get_scrollbar_area+0x210>)
  40443a:	4798      	blx	r3
  40443c:	9005      	str	r0, [sp, #20]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
  40443e:	4620      	mov	r0, r4
  404440:	4b4c      	ldr	r3, [pc, #304]	; (404574 <lv_obj_get_scrollbar_area+0x214>)
  404442:	4798      	blx	r3
  404444:	9004      	str	r0, [sp, #16]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
  404446:	4620      	mov	r0, r4
  404448:	4b4b      	ldr	r3, [pc, #300]	; (404578 <lv_obj_get_scrollbar_area+0x218>)
  40444a:	4798      	blx	r3
  40444c:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
  40444e:	f010 0f0c 	tst.w	r0, #12
  404452:	d12a      	bne.n	4044aa <lv_obj_get_scrollbar_area+0x14a>
    bool ver_draw = false;
  404454:	f04f 0b00 	mov.w	fp, #0
    if((dir & LV_DIR_HOR) &&
  404458:	f01a 0f03 	tst.w	sl, #3
  40445c:	d040      	beq.n	4044e0 <lv_obj_get_scrollbar_area+0x180>
  40445e:	f1b8 0f01 	cmp.w	r8, #1
  404462:	d045      	beq.n	4044f0 <lv_obj_get_scrollbar_area+0x190>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
  404464:	f1b8 0f03 	cmp.w	r8, #3
  404468:	d014      	beq.n	404494 <lv_obj_get_scrollbar_area+0x134>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
  40446a:	f1b8 0f02 	cmp.w	r8, #2
  40446e:	d028      	beq.n	4044c2 <lv_obj_get_scrollbar_area+0x162>
    bool hor_draw = false;
  404470:	2300      	movs	r3, #0
  404472:	9302      	str	r3, [sp, #8]
  404474:	e036      	b.n	4044e4 <lv_obj_get_scrollbar_area+0x184>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
  404476:	9b03      	ldr	r3, [sp, #12]
  404478:	2b00      	cmp	r3, #0
  40447a:	bfd8      	it	le
  40447c:	f1b9 0f00 	cmple.w	r9, #0
  404480:	bfcc      	ite	gt
  404482:	f04f 0b01 	movgt.w	fp, #1
  404486:	f04f 0b00 	movle.w	fp, #0
  40448a:	dde5      	ble.n	404458 <lv_obj_get_scrollbar_area+0xf8>
    if((dir & LV_DIR_HOR) &&
  40448c:	f010 0f03 	tst.w	r0, #3
  404490:	f000 83b3 	beq.w	404bfa <lv_obj_get_scrollbar_area+0x89a>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
  404494:	9b05      	ldr	r3, [sp, #20]
  404496:	9a04      	ldr	r2, [sp, #16]
  404498:	2a00      	cmp	r2, #0
  40449a:	bfd8      	it	le
  40449c:	2b00      	cmple	r3, #0
  40449e:	bfcc      	ite	gt
  4044a0:	2301      	movgt	r3, #1
  4044a2:	2300      	movle	r3, #0
  4044a4:	dc24      	bgt.n	4044f0 <lv_obj_get_scrollbar_area+0x190>
    bool hor_draw = false;
  4044a6:	9302      	str	r3, [sp, #8]
  4044a8:	e01c      	b.n	4044e4 <lv_obj_get_scrollbar_area+0x184>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
  4044aa:	4628      	mov	r0, r5
  4044ac:	4b33      	ldr	r3, [pc, #204]	; (40457c <lv_obj_get_scrollbar_area+0x21c>)
  4044ae:	4798      	blx	r3
  4044b0:	280c      	cmp	r0, #12
  4044b2:	bf14      	ite	ne
  4044b4:	f04f 0b00 	movne.w	fp, #0
  4044b8:	f04f 0b01 	moveq.w	fp, #1
    if((dir & LV_DIR_HOR) &&
  4044bc:	f01a 0f03 	tst.w	sl, #3
  4044c0:	d008      	beq.n	4044d4 <lv_obj_get_scrollbar_area+0x174>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
  4044c2:	4628      	mov	r0, r5
  4044c4:	4b2d      	ldr	r3, [pc, #180]	; (40457c <lv_obj_get_scrollbar_area+0x21c>)
  4044c6:	4798      	blx	r3
  4044c8:	2803      	cmp	r0, #3
  4044ca:	bf14      	ite	ne
  4044cc:	2300      	movne	r3, #0
  4044ce:	2301      	moveq	r3, #1
  4044d0:	9302      	str	r3, [sp, #8]
  4044d2:	e007      	b.n	4044e4 <lv_obj_get_scrollbar_area+0x184>
    bool hor_draw = false;
  4044d4:	2300      	movs	r3, #0
  4044d6:	9302      	str	r3, [sp, #8]
  4044d8:	e004      	b.n	4044e4 <lv_obj_get_scrollbar_area+0x184>
        ver_draw = true;
  4044da:	f8dd b008 	ldr.w	fp, [sp, #8]
  4044de:	e7bb      	b.n	404458 <lv_obj_get_scrollbar_area+0xf8>
    bool hor_draw = false;
  4044e0:	2300      	movs	r3, #0
  4044e2:	9302      	str	r3, [sp, #8]
    if(!hor_draw && !ver_draw) return;
  4044e4:	9b02      	ldr	r3, [sp, #8]
  4044e6:	b91b      	cbnz	r3, 4044f0 <lv_obj_get_scrollbar_area+0x190>
  4044e8:	f1bb 0f00 	cmp.w	fp, #0
  4044ec:	f43f af59 	beq.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  4044f0:	f241 426a 	movw	r2, #5226	; 0x146a
  4044f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4044f8:	4620      	mov	r0, r4
  4044fa:	4d21      	ldr	r5, [pc, #132]	; (404580 <lv_obj_get_scrollbar_area+0x220>)
  4044fc:	47a8      	blx	r5
    return (lv_base_dir_t)v.num;
  4044fe:	b2c3      	uxtb	r3, r0
  404500:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  404502:	f641 0210 	movw	r2, #6160	; 0x1810
  404506:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40450a:	4620      	mov	r0, r4
  40450c:	47a8      	blx	r5
  40450e:	900b      	str	r0, [sp, #44]	; 0x2c
    return (lv_coord_t)v.num;
  404510:	b203      	sxth	r3, r0
  404512:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
  404514:	f641 0213 	movw	r2, #6163	; 0x1813
  404518:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40451c:	4620      	mov	r0, r4
  40451e:	47a8      	blx	r5
  404520:	4682      	mov	sl, r0
  404522:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  404524:	f241 0201 	movw	r2, #4097	; 0x1001
  404528:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40452c:	4620      	mov	r0, r4
  40452e:	47a8      	blx	r5
  404530:	4605      	mov	r5, r0
  404532:	9008      	str	r0, [sp, #32]
    lv_coord_t obj_h = lv_obj_get_height(obj);
  404534:	4620      	mov	r0, r4
  404536:	4b13      	ldr	r3, [pc, #76]	; (404584 <lv_obj_get_scrollbar_area+0x224>)
  404538:	4798      	blx	r3
  40453a:	4680      	mov	r8, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
  40453c:	4620      	mov	r0, r4
  40453e:	4b12      	ldr	r3, [pc, #72]	; (404588 <lv_obj_get_scrollbar_area+0x228>)
  404540:	4798      	blx	r3
  404542:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
  404544:	f1bb 0f00 	cmp.w	fp, #0
  404548:	d024      	beq.n	404594 <lv_obj_get_scrollbar_area+0x234>
  40454a:	44aa      	add	sl, r5
  40454c:	fa0f f38a 	sxth.w	r3, sl
  404550:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
  404552:	9b02      	ldr	r3, [sp, #8]
  404554:	bb03      	cbnz	r3, 404598 <lv_obj_get_scrollbar_area+0x238>
  404556:	2300      	movs	r3, #0
  404558:	9309      	str	r3, [sp, #36]	; 0x24
  40455a:	e022      	b.n	4045a2 <lv_obj_get_scrollbar_area+0x242>
  40455c:	004013e5 	.word	0x004013e5
  404560:	00403999 	.word	0x00403999
  404564:	004101fd 	.word	0x004101fd
  404568:	00403a41 	.word	0x00403a41
  40456c:	00403a55 	.word	0x00403a55
  404570:	00403b41 	.word	0x00403b41
  404574:	00403c3d 	.word	0x00403c3d
  404578:	004039a9 	.word	0x004039a9
  40457c:	00400a1d 	.word	0x00400a1d
  404580:	00404f1d 	.word	0x00404f1d
  404584:	004022df 	.word	0x004022df
  404588:	004022d3 	.word	0x004022d3
  40458c:	00410753 	.word	0x00410753
  404590:	00400a3d 	.word	0x00400a3d
  404594:	2300      	movs	r3, #0
  404596:	930d      	str	r3, [sp, #52]	; 0x34
  404598:	9b08      	ldr	r3, [sp, #32]
  40459a:	9a07      	ldr	r2, [sp, #28]
  40459c:	4413      	add	r3, r2
  40459e:	b29b      	uxth	r3, r3
  4045a0:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
  4045a2:	2221      	movs	r2, #33	; 0x21
  4045a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4045a8:	4620      	mov	r0, r4
  4045aa:	4bc6      	ldr	r3, [pc, #792]	; (4048c4 <lv_obj_get_scrollbar_area+0x564>)
  4045ac:	4798      	blx	r3
    return (lv_opa_t)v.num;
  4045ae:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
  4045b0:	2801      	cmp	r0, #1
  4045b2:	f240 8118 	bls.w	4047e6 <lv_obj_get_scrollbar_area+0x486>
    lv_coord_t content_h = obj_h + st + sb;
  4045b6:	fa1f f588 	uxth.w	r5, r8
  4045ba:	44a9      	add	r9, r5
  4045bc:	9b03      	ldr	r3, [sp, #12]
  4045be:	4499      	add	r9, r3
  4045c0:	fa1f f989 	uxth.w	r9, r9
  4045c4:	fa0f f289 	sxth.w	r2, r9
    if(ver_draw && content_h) {
  4045c8:	2a00      	cmp	r2, #0
  4045ca:	d06a      	beq.n	4046a2 <lv_obj_get_scrollbar_area+0x342>
  4045cc:	f1bb 0f00 	cmp.w	fp, #0
  4045d0:	d067      	beq.n	4046a2 <lv_obj_get_scrollbar_area+0x342>
        ver_area->y1 = obj->coords.y1;
  4045d2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  4045d6:	8073      	strh	r3, [r6, #2]
        ver_area->y2 = obj->coords.y2;
  4045d8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
  4045dc:	80f3      	strh	r3, [r6, #6]
        if(rtl) {
  4045de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4045e0:	2b01      	cmp	r3, #1
  4045e2:	f000 810b 	beq.w	4047fc <lv_obj_get_scrollbar_area+0x49c>
            ver_area->x2 = obj->coords.x2 - side_space;
  4045e6:	8b23      	ldrh	r3, [r4, #24]
  4045e8:	9907      	ldr	r1, [sp, #28]
  4045ea:	1a5b      	subs	r3, r3, r1
  4045ec:	b29b      	uxth	r3, r3
  4045ee:	80b3      	strh	r3, [r6, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
  4045f0:	9908      	ldr	r1, [sp, #32]
  4045f2:	f1c1 0101 	rsb	r1, r1, #1
  4045f6:	440b      	add	r3, r1
  4045f8:	8033      	strh	r3, [r6, #0]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
  4045fa:	f9bd b024 	ldrsh.w	fp, [sp, #36]	; 0x24
  4045fe:	9b06      	ldr	r3, [sp, #24]
  404600:	eba8 0a43 	sub.w	sl, r8, r3, lsl #1
  404604:	ebaa 0a0b 	sub.w	sl, sl, fp
  404608:	fb08 fa0a 	mul.w	sl, r8, sl
  40460c:	fb9a faf2 	sdiv	sl, sl, r2
  404610:	fa0f fa8a 	sxth.w	sl, sl
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
  404614:	46d0      	mov	r8, sl
  404616:	2000      	movs	r0, #0
  404618:	4bab      	ldr	r3, [pc, #684]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  40461a:	4798      	blx	r3
  40461c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404620:	0043      	lsls	r3, r0, #1
  404622:	3350      	adds	r3, #80	; 0x50
  404624:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404628:	f280 80f2 	bge.w	404810 <lv_obj_get_scrollbar_area+0x4b0>
  40462c:	2301      	movs	r3, #1
  40462e:	4543      	cmp	r3, r8
  404630:	f280 80fc 	bge.w	40482c <lv_obj_get_scrollbar_area+0x4cc>
        rem = (obj_h - end_space * 2 - hor_req_space) -
  404634:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
  404638:	eba9 0905 	sub.w	r9, r9, r5
  40463c:	fa0f f989 	sxth.w	r9, r9
        if(scroll_h <= 0) {
  404640:	f1b9 0f00 	cmp.w	r9, #0
  404644:	f340 8110 	ble.w	404868 <lv_obj_get_scrollbar_area+0x508>
        rem = (obj_h - end_space * 2 - hor_req_space) -
  404648:	fa1f fa8a 	uxth.w	sl, sl
  40464c:	eba5 0348 	sub.w	r3, r5, r8, lsl #1
  404650:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404652:	1a9b      	subs	r3, r3, r2
  404654:	eba3 030a 	sub.w	r3, r3, sl
  404658:	b29b      	uxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + end_space;
  40465a:	8ae2      	ldrh	r2, [r4, #22]
  40465c:	4442      	add	r2, r8
  40465e:	441a      	add	r2, r3
            lv_coord_t sb_y = (rem * sb) / scroll_h;
  404660:	b21b      	sxth	r3, r3
  404662:	9903      	ldr	r1, [sp, #12]
  404664:	fb01 f103 	mul.w	r1, r1, r3
  404668:	fb91 f3f9 	sdiv	r3, r1, r9
            ver_area->y1 = obj->coords.y1 + sb_y + end_space;
  40466c:	1ad3      	subs	r3, r2, r3
  40466e:	b29b      	uxth	r3, r3
  404670:	b21a      	sxth	r2, r3
  404672:	8072      	strh	r2, [r6, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
  404674:	f10a 3aff 	add.w	sl, sl, #4294967295
  404678:	4453      	add	r3, sl
  40467a:	80f3      	strh	r3, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
  40467c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  404680:	9906      	ldr	r1, [sp, #24]
  404682:	1859      	adds	r1, r3, r1
  404684:	428a      	cmp	r2, r1
  404686:	f2c0 80fa 	blt.w	40487e <lv_obj_get_scrollbar_area+0x51e>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - end_space) {
  40468a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
  40468e:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
  404692:	eba3 0b0b 	sub.w	fp, r3, fp
  404696:	9906      	ldr	r1, [sp, #24]
  404698:	ebab 0b01 	sub.w	fp, fp, r1
  40469c:	455a      	cmp	r2, fp
  40469e:	f300 8131 	bgt.w	404904 <lv_obj_get_scrollbar_area+0x5a4>
    lv_coord_t content_w = obj_w + sl + sr;
  4046a2:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  4046a6:	fa1f f58e 	uxth.w	r5, lr
  4046aa:	9b05      	ldr	r3, [sp, #20]
  4046ac:	461e      	mov	r6, r3
  4046ae:	442e      	add	r6, r5
  4046b0:	9b04      	ldr	r3, [sp, #16]
  4046b2:	441e      	add	r6, r3
  4046b4:	b2b6      	uxth	r6, r6
  4046b6:	b231      	sxth	r1, r6
    if(hor_draw && content_w) {
  4046b8:	2900      	cmp	r1, #0
  4046ba:	f43f ae72 	beq.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
  4046be:	9b02      	ldr	r3, [sp, #8]
  4046c0:	2b00      	cmp	r3, #0
  4046c2:	f43f ae6e 	beq.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
        hor_area->y2 = obj->coords.y2 - side_space;
  4046c6:	8b62      	ldrh	r2, [r4, #26]
  4046c8:	9807      	ldr	r0, [sp, #28]
  4046ca:	1a12      	subs	r2, r2, r0
  4046cc:	b292      	uxth	r2, r2
  4046ce:	80fa      	strh	r2, [r7, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
  4046d0:	9808      	ldr	r0, [sp, #32]
  4046d2:	f1c0 0301 	rsb	r3, r0, #1
  4046d6:	4413      	add	r3, r2
  4046d8:	807b      	strh	r3, [r7, #2]
        hor_area->x1 = obj->coords.x1;
  4046da:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  4046de:	803b      	strh	r3, [r7, #0]
        hor_area->x2 = obj->coords.x2;
  4046e0:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
  4046e4:	80bb      	strh	r3, [r7, #4]
        lv_coord_t sb_w = ((obj_w - end_space * 2 - ver_reg_space) * obj_w) / content_w;
  4046e6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  4046ea:	46e3      	mov	fp, ip
  4046ec:	9806      	ldr	r0, [sp, #24]
  4046ee:	ebae 0840 	sub.w	r8, lr, r0, lsl #1
  4046f2:	eba8 080c 	sub.w	r8, r8, ip
  4046f6:	fb0e f808 	mul.w	r8, lr, r8
  4046fa:	fb98 f8f1 	sdiv	r8, r8, r1
  4046fe:	fa0f f888 	sxth.w	r8, r8
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
  404702:	46c1      	mov	r9, r8
  404704:	2000      	movs	r0, #0
  404706:	4b70      	ldr	r3, [pc, #448]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  404708:	4798      	blx	r3
  40470a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40470e:	0043      	lsls	r3, r0, #1
  404710:	3350      	adds	r3, #80	; 0x50
  404712:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404716:	f280 8135 	bge.w	404984 <lv_obj_get_scrollbar_area+0x624>
  40471a:	2301      	movs	r3, #1
  40471c:	454b      	cmp	r3, r9
  40471e:	f280 813f 	bge.w	4049a0 <lv_obj_get_scrollbar_area+0x640>
        rem = (obj_w - end_space * 2 - ver_reg_space) -
  404722:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  404726:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
  40472a:	1b76      	subs	r6, r6, r5
  40472c:	b236      	sxth	r6, r6
        if(scroll_w <= 0) {
  40472e:	2e00      	cmp	r6, #0
  404730:	f340 8154 	ble.w	4049dc <lv_obj_get_scrollbar_area+0x67c>
        rem = (obj_w - end_space * 2 - ver_reg_space) -
  404734:	fa1f f888 	uxth.w	r8, r8
  404738:	eba5 0349 	sub.w	r3, r5, r9, lsl #1
  40473c:	eba3 030a 	sub.w	r3, r3, sl
  404740:	eba3 0308 	sub.w	r3, r3, r8
  404744:	b29b      	uxth	r3, r3
            lv_coord_t sb_x = (rem * sr) / scroll_w;
  404746:	b21a      	sxth	r2, r3
  404748:	9904      	ldr	r1, [sp, #16]
  40474a:	fb01 f102 	mul.w	r1, r1, r2
  40474e:	fb91 f6f6 	sdiv	r6, r1, r6
            sb_x = rem - sb_x;
  404752:	1b9b      	subs	r3, r3, r6
  404754:	b29b      	uxth	r3, r3
            if(rtl) {
  404756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404758:	2a01      	cmp	r2, #1
  40475a:	f000 815b 	beq.w	404a14 <lv_obj_get_scrollbar_area+0x6b4>
                hor_area->x1 = obj->coords.x1 + sb_x + end_space;
  40475e:	8aa2      	ldrh	r2, [r4, #20]
  404760:	444a      	add	r2, r9
  404762:	4413      	add	r3, r2
  404764:	b29b      	uxth	r3, r3
  404766:	b21a      	sxth	r2, r3
  404768:	803a      	strh	r2, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
  40476a:	f108 38ff 	add.w	r8, r8, #4294967295
  40476e:	4443      	add	r3, r8
  404770:	80bb      	strh	r3, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + end_space) {
  404772:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  404776:	9906      	ldr	r1, [sp, #24]
  404778:	1859      	adds	r1, r3, r1
  40477a:	428a      	cmp	r2, r1
  40477c:	f2c0 81db 	blt.w	404b36 <lv_obj_get_scrollbar_area+0x7d6>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - end_space) {
  404780:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
  404784:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
  404788:	eba2 030b 	sub.w	r3, r2, fp
  40478c:	9806      	ldr	r0, [sp, #24]
  40478e:	1a1b      	subs	r3, r3, r0
  404790:	4299      	cmp	r1, r3
  404792:	f77f ae06 	ble.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
  404796:	eba2 040a 	sub.w	r4, r2, sl
  40479a:	eba4 0409 	sub.w	r4, r4, r9
  40479e:	b224      	sxth	r4, r4
  4047a0:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
  4047a2:	2000      	movs	r0, #0
  4047a4:	4b48      	ldr	r3, [pc, #288]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  4047a6:	4798      	blx	r3
  4047a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4047ac:	0043      	lsls	r3, r0, #1
  4047ae:	3350      	adds	r3, #80	; 0x50
  4047b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4047b4:	f280 81fc 	bge.w	404bb0 <lv_obj_get_scrollbar_area+0x850>
  4047b8:	2301      	movs	r3, #1
  4047ba:	1ae4      	subs	r4, r4, r3
  4047bc:	f9b7 3000 	ldrsh.w	r3, [r7]
  4047c0:	429c      	cmp	r4, r3
  4047c2:	f6bf adee 	bge.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
  4047c6:	88bc      	ldrh	r4, [r7, #4]
  4047c8:	2000      	movs	r0, #0
  4047ca:	4b3f      	ldr	r3, [pc, #252]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  4047cc:	4798      	blx	r3
  4047ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4047d2:	0043      	lsls	r3, r0, #1
  4047d4:	3350      	adds	r3, #80	; 0x50
  4047d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4047da:	f280 81fb 	bge.w	404bd4 <lv_obj_get_scrollbar_area+0x874>
  4047de:	2301      	movs	r3, #1
  4047e0:	1ae3      	subs	r3, r4, r3
  4047e2:	803b      	strh	r3, [r7, #0]
  4047e4:	e5dd      	b.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
  4047e6:	2231      	movs	r2, #49	; 0x31
  4047e8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4047ec:	4620      	mov	r0, r4
  4047ee:	4b35      	ldr	r3, [pc, #212]	; (4048c4 <lv_obj_get_scrollbar_area+0x564>)
  4047f0:	4798      	blx	r3
    return (lv_opa_t)v.num;
  4047f2:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
  4047f4:	2801      	cmp	r0, #1
  4047f6:	f63f aede 	bhi.w	4045b6 <lv_obj_get_scrollbar_area+0x256>
  4047fa:	e5d2      	b.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
            ver_area->x1 = obj->coords.x1 + side_space;
  4047fc:	8aa3      	ldrh	r3, [r4, #20]
  4047fe:	9907      	ldr	r1, [sp, #28]
  404800:	440b      	add	r3, r1
  404802:	b29b      	uxth	r3, r3
  404804:	8033      	strh	r3, [r6, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
  404806:	9908      	ldr	r1, [sp, #32]
  404808:	3901      	subs	r1, #1
  40480a:	440b      	add	r3, r1
  40480c:	80b3      	strh	r3, [r6, #4]
  40480e:	e6f4      	b.n	4045fa <lv_obj_get_scrollbar_area+0x29a>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
  404810:	2000      	movs	r0, #0
  404812:	4b2d      	ldr	r3, [pc, #180]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  404814:	4798      	blx	r3
  404816:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40481a:	0043      	lsls	r3, r0, #1
  40481c:	3350      	adds	r3, #80	; 0x50
  40481e:	4a2b      	ldr	r2, [pc, #172]	; (4048cc <lv_obj_get_scrollbar_area+0x56c>)
  404820:	fb82 1203 	smull	r1, r2, r2, r3
  404824:	17db      	asrs	r3, r3, #31
  404826:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40482a:	e700      	b.n	40462e <lv_obj_get_scrollbar_area+0x2ce>
  40482c:	2000      	movs	r0, #0
  40482e:	4b26      	ldr	r3, [pc, #152]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  404830:	4798      	blx	r3
  404832:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404836:	0043      	lsls	r3, r0, #1
  404838:	3350      	adds	r3, #80	; 0x50
  40483a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40483e:	da02      	bge.n	404846 <lv_obj_get_scrollbar_area+0x4e6>
  404840:	f04f 0a01 	mov.w	sl, #1
  404844:	e6f6      	b.n	404634 <lv_obj_get_scrollbar_area+0x2d4>
  404846:	2000      	movs	r0, #0
  404848:	4b1f      	ldr	r3, [pc, #124]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  40484a:	4798      	blx	r3
  40484c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404850:	0043      	lsls	r3, r0, #1
  404852:	3350      	adds	r3, #80	; 0x50
  404854:	4a1d      	ldr	r2, [pc, #116]	; (4048cc <lv_obj_get_scrollbar_area+0x56c>)
  404856:	fb82 1203 	smull	r1, r2, r2, r3
  40485a:	ea4f 7ae3 	mov.w	sl, r3, asr #31
  40485e:	ebca 1aa2 	rsb	sl, sl, r2, asr #6
  404862:	fa0f fa8a 	sxth.w	sl, sl
  404866:	e6e5      	b.n	404634 <lv_obj_get_scrollbar_area+0x2d4>
            ver_area->y1 = obj->coords.y1 + end_space;
  404868:	8ae3      	ldrh	r3, [r4, #22]
  40486a:	4443      	add	r3, r8
  40486c:	8073      	strh	r3, [r6, #2]
            ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
  40486e:	ea6f 0308 	mvn.w	r3, r8
  404872:	8b62      	ldrh	r2, [r4, #26]
  404874:	4413      	add	r3, r2
  404876:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404878:	1a9b      	subs	r3, r3, r2
  40487a:	80f3      	strh	r3, [r6, #6]
  40487c:	e711      	b.n	4046a2 <lv_obj_get_scrollbar_area+0x342>
                ver_area->y1 = obj->coords.y1 + end_space;
  40487e:	4443      	add	r3, r8
  404880:	b21d      	sxth	r5, r3
  404882:	8075      	strh	r5, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2)ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
  404884:	2000      	movs	r0, #0
  404886:	4b10      	ldr	r3, [pc, #64]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  404888:	4798      	blx	r3
  40488a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40488e:	0043      	lsls	r3, r0, #1
  404890:	3350      	adds	r3, #80	; 0x50
  404892:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404896:	da1b      	bge.n	4048d0 <lv_obj_get_scrollbar_area+0x570>
  404898:	2301      	movs	r3, #1
  40489a:	441d      	add	r5, r3
  40489c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  4048a0:	429d      	cmp	r5, r3
  4048a2:	f77f aef2 	ble.w	40468a <lv_obj_get_scrollbar_area+0x32a>
  4048a6:	8875      	ldrh	r5, [r6, #2]
  4048a8:	2000      	movs	r0, #0
  4048aa:	4b07      	ldr	r3, [pc, #28]	; (4048c8 <lv_obj_get_scrollbar_area+0x568>)
  4048ac:	4798      	blx	r3
  4048ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4048b2:	0043      	lsls	r3, r0, #1
  4048b4:	3350      	adds	r3, #80	; 0x50
  4048b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4048ba:	da17      	bge.n	4048ec <lv_obj_get_scrollbar_area+0x58c>
  4048bc:	2301      	movs	r3, #1
  4048be:	441d      	add	r5, r3
  4048c0:	80f5      	strh	r5, [r6, #6]
  4048c2:	e6e2      	b.n	40468a <lv_obj_get_scrollbar_area+0x32a>
  4048c4:	00404f1d 	.word	0x00404f1d
  4048c8:	0041019d 	.word	0x0041019d
  4048cc:	66666667 	.word	0x66666667
  4048d0:	2000      	movs	r0, #0
  4048d2:	4bbe      	ldr	r3, [pc, #760]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  4048d4:	4798      	blx	r3
  4048d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4048da:	0043      	lsls	r3, r0, #1
  4048dc:	3350      	adds	r3, #80	; 0x50
  4048de:	4abc      	ldr	r2, [pc, #752]	; (404bd0 <lv_obj_get_scrollbar_area+0x870>)
  4048e0:	fb82 1203 	smull	r1, r2, r2, r3
  4048e4:	17db      	asrs	r3, r3, #31
  4048e6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4048ea:	e7d6      	b.n	40489a <lv_obj_get_scrollbar_area+0x53a>
  4048ec:	2000      	movs	r0, #0
  4048ee:	4bb7      	ldr	r3, [pc, #732]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  4048f0:	4798      	blx	r3
  4048f2:	230a      	movs	r3, #10
  4048f4:	fb03 f300 	mul.w	r3, r3, r0
  4048f8:	3350      	adds	r3, #80	; 0x50
  4048fa:	22a0      	movs	r2, #160	; 0xa0
  4048fc:	fb93 f3f2 	sdiv	r3, r3, r2
  404900:	b29b      	uxth	r3, r3
  404902:	e7dc      	b.n	4048be <lv_obj_get_scrollbar_area+0x55e>
                ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
  404904:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404906:	1a9d      	subs	r5, r3, r2
  404908:	eba5 0508 	sub.w	r5, r5, r8
  40490c:	b22d      	sxth	r5, r5
  40490e:	80f5      	strh	r5, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1)ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
  404910:	2000      	movs	r0, #0
  404912:	4bae      	ldr	r3, [pc, #696]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404914:	4798      	blx	r3
  404916:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40491a:	0043      	lsls	r3, r0, #1
  40491c:	3350      	adds	r3, #80	; 0x50
  40491e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404922:	da15      	bge.n	404950 <lv_obj_get_scrollbar_area+0x5f0>
  404924:	2301      	movs	r3, #1
  404926:	1aed      	subs	r5, r5, r3
  404928:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40492c:	429d      	cmp	r5, r3
  40492e:	f6bf aeb8 	bge.w	4046a2 <lv_obj_get_scrollbar_area+0x342>
  404932:	88f5      	ldrh	r5, [r6, #6]
  404934:	2000      	movs	r0, #0
  404936:	4ba5      	ldr	r3, [pc, #660]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404938:	4798      	blx	r3
  40493a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40493e:	0043      	lsls	r3, r0, #1
  404940:	3350      	adds	r3, #80	; 0x50
  404942:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404946:	da11      	bge.n	40496c <lv_obj_get_scrollbar_area+0x60c>
  404948:	2301      	movs	r3, #1
  40494a:	1aeb      	subs	r3, r5, r3
  40494c:	8073      	strh	r3, [r6, #2]
  40494e:	e6a8      	b.n	4046a2 <lv_obj_get_scrollbar_area+0x342>
  404950:	2000      	movs	r0, #0
  404952:	4b9e      	ldr	r3, [pc, #632]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404954:	4798      	blx	r3
  404956:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40495a:	0043      	lsls	r3, r0, #1
  40495c:	3350      	adds	r3, #80	; 0x50
  40495e:	4a9c      	ldr	r2, [pc, #624]	; (404bd0 <lv_obj_get_scrollbar_area+0x870>)
  404960:	fb82 1203 	smull	r1, r2, r2, r3
  404964:	17db      	asrs	r3, r3, #31
  404966:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40496a:	e7dc      	b.n	404926 <lv_obj_get_scrollbar_area+0x5c6>
  40496c:	2000      	movs	r0, #0
  40496e:	4b97      	ldr	r3, [pc, #604]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404970:	4798      	blx	r3
  404972:	230a      	movs	r3, #10
  404974:	fb03 f300 	mul.w	r3, r3, r0
  404978:	3350      	adds	r3, #80	; 0x50
  40497a:	22a0      	movs	r2, #160	; 0xa0
  40497c:	fb93 f3f2 	sdiv	r3, r3, r2
  404980:	b29b      	uxth	r3, r3
  404982:	e7e2      	b.n	40494a <lv_obj_get_scrollbar_area+0x5ea>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
  404984:	2000      	movs	r0, #0
  404986:	4b91      	ldr	r3, [pc, #580]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404988:	4798      	blx	r3
  40498a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40498e:	0043      	lsls	r3, r0, #1
  404990:	3350      	adds	r3, #80	; 0x50
  404992:	4a8f      	ldr	r2, [pc, #572]	; (404bd0 <lv_obj_get_scrollbar_area+0x870>)
  404994:	fb82 1203 	smull	r1, r2, r2, r3
  404998:	17db      	asrs	r3, r3, #31
  40499a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40499e:	e6bd      	b.n	40471c <lv_obj_get_scrollbar_area+0x3bc>
  4049a0:	2000      	movs	r0, #0
  4049a2:	4b8a      	ldr	r3, [pc, #552]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  4049a4:	4798      	blx	r3
  4049a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4049aa:	0043      	lsls	r3, r0, #1
  4049ac:	3350      	adds	r3, #80	; 0x50
  4049ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4049b2:	da02      	bge.n	4049ba <lv_obj_get_scrollbar_area+0x65a>
  4049b4:	f04f 0801 	mov.w	r8, #1
  4049b8:	e6b3      	b.n	404722 <lv_obj_get_scrollbar_area+0x3c2>
  4049ba:	2000      	movs	r0, #0
  4049bc:	4b83      	ldr	r3, [pc, #524]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  4049be:	4798      	blx	r3
  4049c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4049c4:	0043      	lsls	r3, r0, #1
  4049c6:	3350      	adds	r3, #80	; 0x50
  4049c8:	4a81      	ldr	r2, [pc, #516]	; (404bd0 <lv_obj_get_scrollbar_area+0x870>)
  4049ca:	fb82 1203 	smull	r1, r2, r2, r3
  4049ce:	ea4f 78e3 	mov.w	r8, r3, asr #31
  4049d2:	ebc8 18a2 	rsb	r8, r8, r2, asr #6
  4049d6:	fa0f f888 	sxth.w	r8, r8
  4049da:	e6a2      	b.n	404722 <lv_obj_get_scrollbar_area+0x3c2>
            if(rtl) {
  4049dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4049de:	2b01      	cmp	r3, #1
  4049e0:	d00b      	beq.n	4049fa <lv_obj_get_scrollbar_area+0x69a>
                hor_area->x1 = obj->coords.x1 + end_space;
  4049e2:	8aa3      	ldrh	r3, [r4, #20]
  4049e4:	444b      	add	r3, r9
  4049e6:	803b      	strh	r3, [r7, #0]
                hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
  4049e8:	ea6f 0309 	mvn.w	r3, r9
  4049ec:	8b22      	ldrh	r2, [r4, #24]
  4049ee:	4413      	add	r3, r2
  4049f0:	eba3 0a0a 	sub.w	sl, r3, sl
  4049f4:	f8a7 a004 	strh.w	sl, [r7, #4]
  4049f8:	e4d3      	b.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
                hor_area->x1 = obj->coords.x1 + end_space + ver_reg_space - 1;
  4049fa:	f109 33ff 	add.w	r3, r9, #4294967295
  4049fe:	8aa2      	ldrh	r2, [r4, #20]
  404a00:	4413      	add	r3, r2
  404a02:	449a      	add	sl, r3
  404a04:	f8a7 a000 	strh.w	sl, [r7]
                hor_area->x2 = obj->coords.x2 - end_space;
  404a08:	8b23      	ldrh	r3, [r4, #24]
  404a0a:	eba3 0909 	sub.w	r9, r3, r9
  404a0e:	f8a7 9004 	strh.w	r9, [r7, #4]
  404a12:	e4c6      	b.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
                hor_area->x1 = obj->coords.x1 + sb_x + end_space + ver_reg_space;
  404a14:	8aa2      	ldrh	r2, [r4, #20]
  404a16:	444a      	add	r2, r9
  404a18:	4452      	add	r2, sl
  404a1a:	4413      	add	r3, r2
  404a1c:	b29b      	uxth	r3, r3
  404a1e:	b219      	sxth	r1, r3
  404a20:	8039      	strh	r1, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
  404a22:	f108 38ff 	add.w	r8, r8, #4294967295
  404a26:	4443      	add	r3, r8
  404a28:	80bb      	strh	r3, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + end_space + ver_reg_space) {
  404a2a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  404a2e:	9b06      	ldr	r3, [sp, #24]
  404a30:	18d3      	adds	r3, r2, r3
  404a32:	449b      	add	fp, r3
  404a34:	4559      	cmp	r1, fp
  404a36:	db2c      	blt.n	404a92 <lv_obj_get_scrollbar_area+0x732>
                if(hor_area->x2 > obj->coords.x2 - end_space) {
  404a38:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
  404a3c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
  404a40:	9a06      	ldr	r2, [sp, #24]
  404a42:	1a9a      	subs	r2, r3, r2
  404a44:	4291      	cmp	r1, r2
  404a46:	f77f acac 	ble.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - end_space;
  404a4a:	eba3 0309 	sub.w	r3, r3, r9
  404a4e:	b21c      	sxth	r4, r3
  404a50:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
  404a52:	2000      	movs	r0, #0
  404a54:	4b5d      	ldr	r3, [pc, #372]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404a56:	4798      	blx	r3
  404a58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404a5c:	0043      	lsls	r3, r0, #1
  404a5e:	3350      	adds	r3, #80	; 0x50
  404a60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404a64:	da50      	bge.n	404b08 <lv_obj_get_scrollbar_area+0x7a8>
  404a66:	2301      	movs	r3, #1
  404a68:	1ae4      	subs	r4, r4, r3
  404a6a:	f9b7 3000 	ldrsh.w	r3, [r7]
  404a6e:	429c      	cmp	r4, r3
  404a70:	f6bf ac97 	bge.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
  404a74:	88bc      	ldrh	r4, [r7, #4]
  404a76:	2000      	movs	r0, #0
  404a78:	4b54      	ldr	r3, [pc, #336]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404a7a:	4798      	blx	r3
  404a7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404a80:	0043      	lsls	r3, r0, #1
  404a82:	3350      	adds	r3, #80	; 0x50
  404a84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404a88:	da49      	bge.n	404b1e <lv_obj_get_scrollbar_area+0x7be>
  404a8a:	2301      	movs	r3, #1
  404a8c:	1ae3      	subs	r3, r4, r3
  404a8e:	803b      	strh	r3, [r7, #0]
  404a90:	e487      	b.n	4043a2 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x1 = obj->coords.x1 + end_space + ver_reg_space;
  404a92:	eb09 0502 	add.w	r5, r9, r2
  404a96:	4455      	add	r5, sl
  404a98:	b22d      	sxth	r5, r5
  404a9a:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
  404a9c:	2000      	movs	r0, #0
  404a9e:	4b4b      	ldr	r3, [pc, #300]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404aa0:	4798      	blx	r3
  404aa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404aa6:	0043      	lsls	r3, r0, #1
  404aa8:	3350      	adds	r3, #80	; 0x50
  404aaa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404aae:	da14      	bge.n	404ada <lv_obj_get_scrollbar_area+0x77a>
  404ab0:	2301      	movs	r3, #1
  404ab2:	442b      	add	r3, r5
  404ab4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  404ab8:	4293      	cmp	r3, r2
  404aba:	ddbd      	ble.n	404a38 <lv_obj_get_scrollbar_area+0x6d8>
  404abc:	883d      	ldrh	r5, [r7, #0]
  404abe:	2000      	movs	r0, #0
  404ac0:	4b42      	ldr	r3, [pc, #264]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404ac2:	4798      	blx	r3
  404ac4:	230a      	movs	r3, #10
  404ac6:	fb03 f300 	mul.w	r3, r3, r0
  404aca:	3350      	adds	r3, #80	; 0x50
  404acc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404ad0:	da0e      	bge.n	404af0 <lv_obj_get_scrollbar_area+0x790>
  404ad2:	2301      	movs	r3, #1
  404ad4:	442b      	add	r3, r5
  404ad6:	80bb      	strh	r3, [r7, #4]
  404ad8:	e7ae      	b.n	404a38 <lv_obj_get_scrollbar_area+0x6d8>
  404ada:	2000      	movs	r0, #0
  404adc:	4b3b      	ldr	r3, [pc, #236]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404ade:	4798      	blx	r3
  404ae0:	230a      	movs	r3, #10
  404ae2:	fb03 f300 	mul.w	r3, r3, r0
  404ae6:	3350      	adds	r3, #80	; 0x50
  404ae8:	22a0      	movs	r2, #160	; 0xa0
  404aea:	fb93 f3f2 	sdiv	r3, r3, r2
  404aee:	e7e0      	b.n	404ab2 <lv_obj_get_scrollbar_area+0x752>
  404af0:	2000      	movs	r0, #0
  404af2:	4b36      	ldr	r3, [pc, #216]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404af4:	4798      	blx	r3
  404af6:	230a      	movs	r3, #10
  404af8:	fb03 f300 	mul.w	r3, r3, r0
  404afc:	3350      	adds	r3, #80	; 0x50
  404afe:	22a0      	movs	r2, #160	; 0xa0
  404b00:	fb93 f3f2 	sdiv	r3, r3, r2
  404b04:	b29b      	uxth	r3, r3
  404b06:	e7e5      	b.n	404ad4 <lv_obj_get_scrollbar_area+0x774>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
  404b08:	2000      	movs	r0, #0
  404b0a:	4b30      	ldr	r3, [pc, #192]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404b0c:	4798      	blx	r3
  404b0e:	230a      	movs	r3, #10
  404b10:	fb03 f300 	mul.w	r3, r3, r0
  404b14:	3350      	adds	r3, #80	; 0x50
  404b16:	22a0      	movs	r2, #160	; 0xa0
  404b18:	fb93 f3f2 	sdiv	r3, r3, r2
  404b1c:	e7a4      	b.n	404a68 <lv_obj_get_scrollbar_area+0x708>
  404b1e:	2000      	movs	r0, #0
  404b20:	4b2a      	ldr	r3, [pc, #168]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404b22:	4798      	blx	r3
  404b24:	230a      	movs	r3, #10
  404b26:	fb03 f300 	mul.w	r3, r3, r0
  404b2a:	3350      	adds	r3, #80	; 0x50
  404b2c:	22a0      	movs	r2, #160	; 0xa0
  404b2e:	fb93 f3f2 	sdiv	r3, r3, r2
  404b32:	b29b      	uxth	r3, r3
  404b34:	e7aa      	b.n	404a8c <lv_obj_get_scrollbar_area+0x72c>
                    hor_area->x1 = obj->coords.x1 + end_space;
  404b36:	444b      	add	r3, r9
  404b38:	b21d      	sxth	r5, r3
  404b3a:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
  404b3c:	2000      	movs	r0, #0
  404b3e:	4b23      	ldr	r3, [pc, #140]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404b40:	4798      	blx	r3
  404b42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404b46:	0043      	lsls	r3, r0, #1
  404b48:	3350      	adds	r3, #80	; 0x50
  404b4a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404b4e:	da15      	bge.n	404b7c <lv_obj_get_scrollbar_area+0x81c>
  404b50:	2301      	movs	r3, #1
  404b52:	442b      	add	r3, r5
  404b54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  404b58:	4293      	cmp	r3, r2
  404b5a:	f77f ae11 	ble.w	404780 <lv_obj_get_scrollbar_area+0x420>
  404b5e:	883d      	ldrh	r5, [r7, #0]
  404b60:	2000      	movs	r0, #0
  404b62:	4b1a      	ldr	r3, [pc, #104]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404b64:	4798      	blx	r3
  404b66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404b6a:	0043      	lsls	r3, r0, #1
  404b6c:	3350      	adds	r3, #80	; 0x50
  404b6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  404b72:	da11      	bge.n	404b98 <lv_obj_get_scrollbar_area+0x838>
  404b74:	2301      	movs	r3, #1
  404b76:	442b      	add	r3, r5
  404b78:	80bb      	strh	r3, [r7, #4]
  404b7a:	e601      	b.n	404780 <lv_obj_get_scrollbar_area+0x420>
  404b7c:	2000      	movs	r0, #0
  404b7e:	4b13      	ldr	r3, [pc, #76]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404b80:	4798      	blx	r3
  404b82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404b86:	0043      	lsls	r3, r0, #1
  404b88:	3350      	adds	r3, #80	; 0x50
  404b8a:	4a11      	ldr	r2, [pc, #68]	; (404bd0 <lv_obj_get_scrollbar_area+0x870>)
  404b8c:	fb82 1203 	smull	r1, r2, r2, r3
  404b90:	17db      	asrs	r3, r3, #31
  404b92:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  404b96:	e7dc      	b.n	404b52 <lv_obj_get_scrollbar_area+0x7f2>
  404b98:	2000      	movs	r0, #0
  404b9a:	4b0c      	ldr	r3, [pc, #48]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404b9c:	4798      	blx	r3
  404b9e:	230a      	movs	r3, #10
  404ba0:	fb03 f300 	mul.w	r3, r3, r0
  404ba4:	3350      	adds	r3, #80	; 0x50
  404ba6:	22a0      	movs	r2, #160	; 0xa0
  404ba8:	fb93 f3f2 	sdiv	r3, r3, r2
  404bac:	b29b      	uxth	r3, r3
  404bae:	e7e2      	b.n	404b76 <lv_obj_get_scrollbar_area+0x816>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
  404bb0:	2000      	movs	r0, #0
  404bb2:	4b06      	ldr	r3, [pc, #24]	; (404bcc <lv_obj_get_scrollbar_area+0x86c>)
  404bb4:	4798      	blx	r3
  404bb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404bba:	0043      	lsls	r3, r0, #1
  404bbc:	3350      	adds	r3, #80	; 0x50
  404bbe:	4a04      	ldr	r2, [pc, #16]	; (404bd0 <lv_obj_get_scrollbar_area+0x870>)
  404bc0:	fb82 1203 	smull	r1, r2, r2, r3
  404bc4:	17db      	asrs	r3, r3, #31
  404bc6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  404bca:	e5f6      	b.n	4047ba <lv_obj_get_scrollbar_area+0x45a>
  404bcc:	0041019d 	.word	0x0041019d
  404bd0:	66666667 	.word	0x66666667
  404bd4:	2000      	movs	r0, #0
  404bd6:	4b0a      	ldr	r3, [pc, #40]	; (404c00 <lv_obj_get_scrollbar_area+0x8a0>)
  404bd8:	4798      	blx	r3
  404bda:	230a      	movs	r3, #10
  404bdc:	fb03 f300 	mul.w	r3, r3, r0
  404be0:	3350      	adds	r3, #80	; 0x50
  404be2:	22a0      	movs	r2, #160	; 0xa0
  404be4:	fb93 f3f2 	sdiv	r3, r3, r2
  404be8:	b29b      	uxth	r3, r3
  404bea:	e5f9      	b.n	4047e0 <lv_obj_get_scrollbar_area+0x480>
    if((dir & LV_DIR_HOR) &&
  404bec:	f010 0f03 	tst.w	r0, #3
  404bf0:	f43f abd7 	beq.w	4043a2 <lv_obj_get_scrollbar_area+0x42>
    bool ver_draw = false;
  404bf4:	f04f 0b00 	mov.w	fp, #0
  404bf8:	e431      	b.n	40445e <lv_obj_get_scrollbar_area+0xfe>
    bool hor_draw = false;
  404bfa:	2300      	movs	r3, #0
  404bfc:	9302      	str	r3, [sp, #8]
  404bfe:	e477      	b.n	4044f0 <lv_obj_get_scrollbar_area+0x190>
  404c00:	0041019d 	.word	0x0041019d

00404c04 <lv_obj_scrollbar_invalidate>:
{
  404c04:	b510      	push	{r4, lr}
  404c06:	b084      	sub	sp, #16
  404c08:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
  404c0a:	466a      	mov	r2, sp
  404c0c:	a902      	add	r1, sp, #8
  404c0e:	4b0f      	ldr	r3, [pc, #60]	; (404c4c <lv_obj_scrollbar_invalidate+0x48>)
  404c10:	4798      	blx	r3
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
  404c12:	a802      	add	r0, sp, #8
  404c14:	4b0e      	ldr	r3, [pc, #56]	; (404c50 <lv_obj_scrollbar_invalidate+0x4c>)
  404c16:	4798      	blx	r3
  404c18:	b918      	cbnz	r0, 404c22 <lv_obj_scrollbar_invalidate+0x1e>
  404c1a:	4668      	mov	r0, sp
  404c1c:	4b0c      	ldr	r3, [pc, #48]	; (404c50 <lv_obj_scrollbar_invalidate+0x4c>)
  404c1e:	4798      	blx	r3
  404c20:	b138      	cbz	r0, 404c32 <lv_obj_scrollbar_invalidate+0x2e>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
  404c22:	a802      	add	r0, sp, #8
  404c24:	4b0a      	ldr	r3, [pc, #40]	; (404c50 <lv_obj_scrollbar_invalidate+0x4c>)
  404c26:	4798      	blx	r3
  404c28:	b928      	cbnz	r0, 404c36 <lv_obj_scrollbar_invalidate+0x32>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
  404c2a:	4668      	mov	r0, sp
  404c2c:	4b08      	ldr	r3, [pc, #32]	; (404c50 <lv_obj_scrollbar_invalidate+0x4c>)
  404c2e:	4798      	blx	r3
  404c30:	b930      	cbnz	r0, 404c40 <lv_obj_scrollbar_invalidate+0x3c>
}
  404c32:	b004      	add	sp, #16
  404c34:	bd10      	pop	{r4, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
  404c36:	a902      	add	r1, sp, #8
  404c38:	4620      	mov	r0, r4
  404c3a:	4b06      	ldr	r3, [pc, #24]	; (404c54 <lv_obj_scrollbar_invalidate+0x50>)
  404c3c:	4798      	blx	r3
  404c3e:	e7f4      	b.n	404c2a <lv_obj_scrollbar_invalidate+0x26>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
  404c40:	4669      	mov	r1, sp
  404c42:	4620      	mov	r0, r4
  404c44:	4b03      	ldr	r3, [pc, #12]	; (404c54 <lv_obj_scrollbar_invalidate+0x50>)
  404c46:	4798      	blx	r3
  404c48:	e7f3      	b.n	404c32 <lv_obj_scrollbar_invalidate+0x2e>
  404c4a:	bf00      	nop
  404c4c:	00404361 	.word	0x00404361
  404c50:	00410775 	.word	0x00410775
  404c54:	004025e9 	.word	0x004025e9

00404c58 <lv_obj_readjust_scroll>:
{
  404c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404c5a:	4604      	mov	r4, r0
  404c5c:	460d      	mov	r5, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
  404c5e:	4b26      	ldr	r3, [pc, #152]	; (404cf8 <lv_obj_readjust_scroll+0xa0>)
  404c60:	4798      	blx	r3
  404c62:	b120      	cbz	r0, 404c6e <lv_obj_readjust_scroll+0x16>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
  404c64:	4620      	mov	r0, r4
  404c66:	4b25      	ldr	r3, [pc, #148]	; (404cfc <lv_obj_readjust_scroll+0xa4>)
  404c68:	4798      	blx	r3
  404c6a:	b1b8      	cbz	r0, 404c9c <lv_obj_readjust_scroll+0x44>
  404c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_coord_t st = lv_obj_get_scroll_top(obj);
  404c6e:	4620      	mov	r0, r4
  404c70:	4b23      	ldr	r3, [pc, #140]	; (404d00 <lv_obj_readjust_scroll+0xa8>)
  404c72:	4798      	blx	r3
  404c74:	4606      	mov	r6, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
  404c76:	4620      	mov	r0, r4
  404c78:	4b22      	ldr	r3, [pc, #136]	; (404d04 <lv_obj_readjust_scroll+0xac>)
  404c7a:	4798      	blx	r3
        if(sb < 0 && st > 0) {
  404c7c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  404c80:	d0f0      	beq.n	404c64 <lv_obj_readjust_scroll+0xc>
  404c82:	2e00      	cmp	r6, #0
  404c84:	ddee      	ble.n	404c64 <lv_obj_readjust_scroll+0xc>
            sb = LV_MIN(st, -sb);
  404c86:	4240      	negs	r0, r0
  404c88:	42b0      	cmp	r0, r6
  404c8a:	bfa8      	it	ge
  404c8c:	4630      	movge	r0, r6
            lv_obj_scroll_by(obj, 0, sb, anim_en);
  404c8e:	462b      	mov	r3, r5
  404c90:	b202      	sxth	r2, r0
  404c92:	2100      	movs	r1, #0
  404c94:	4620      	mov	r0, r4
  404c96:	4e1c      	ldr	r6, [pc, #112]	; (404d08 <lv_obj_readjust_scroll+0xb0>)
  404c98:	47b0      	blx	r6
  404c9a:	e7e3      	b.n	404c64 <lv_obj_readjust_scroll+0xc>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
  404c9c:	4620      	mov	r0, r4
  404c9e:	4b1b      	ldr	r3, [pc, #108]	; (404d0c <lv_obj_readjust_scroll+0xb4>)
  404ca0:	4798      	blx	r3
  404ca2:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
  404ca4:	4620      	mov	r0, r4
  404ca6:	4b1a      	ldr	r3, [pc, #104]	; (404d10 <lv_obj_readjust_scroll+0xb8>)
  404ca8:	4798      	blx	r3
  404caa:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  404cac:	f241 426a 	movw	r2, #5226	; 0x146a
  404cb0:	2100      	movs	r1, #0
  404cb2:	4620      	mov	r0, r4
  404cb4:	4b17      	ldr	r3, [pc, #92]	; (404d14 <lv_obj_readjust_scroll+0xbc>)
  404cb6:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  404cb8:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
  404cba:	2801      	cmp	r0, #1
  404cbc:	d00f      	beq.n	404cde <lv_obj_readjust_scroll+0x86>
            if(sr < 0 && sl > 0) {
  404cbe:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  404cc2:	d0d3      	beq.n	404c6c <lv_obj_readjust_scroll+0x14>
  404cc4:	2f00      	cmp	r7, #0
  404cc6:	ddd1      	ble.n	404c6c <lv_obj_readjust_scroll+0x14>
                sr = LV_MIN(sl, -sr);
  404cc8:	4276      	negs	r6, r6
  404cca:	42be      	cmp	r6, r7
  404ccc:	bfa8      	it	ge
  404cce:	463e      	movge	r6, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
  404cd0:	462b      	mov	r3, r5
  404cd2:	2200      	movs	r2, #0
  404cd4:	b231      	sxth	r1, r6
  404cd6:	4620      	mov	r0, r4
  404cd8:	4c0b      	ldr	r4, [pc, #44]	; (404d08 <lv_obj_readjust_scroll+0xb0>)
  404cda:	47a0      	blx	r4
  404cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(sl < 0 && sr > 0) {
  404cde:	f417 4f00 	tst.w	r7, #32768	; 0x8000
  404ce2:	d0c3      	beq.n	404c6c <lv_obj_readjust_scroll+0x14>
  404ce4:	2e00      	cmp	r6, #0
  404ce6:	ddc1      	ble.n	404c6c <lv_obj_readjust_scroll+0x14>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
  404ce8:	462b      	mov	r3, r5
  404cea:	2200      	movs	r2, #0
  404cec:	4639      	mov	r1, r7
  404cee:	4620      	mov	r0, r4
  404cf0:	4c05      	ldr	r4, [pc, #20]	; (404d08 <lv_obj_readjust_scroll+0xb0>)
  404cf2:	47a0      	blx	r4
}
  404cf4:	e7ba      	b.n	404c6c <lv_obj_readjust_scroll+0x14>
  404cf6:	bf00      	nop
  404cf8:	004039c9 	.word	0x004039c9
  404cfc:	004039b9 	.word	0x004039b9
  404d00:	00403a41 	.word	0x00403a41
  404d04:	00403a55 	.word	0x00403a55
  404d08:	00403d51 	.word	0x00403d51
  404d0c:	00403b41 	.word	0x00403b41
  404d10:	00403c3d 	.word	0x00403c3d
  404d14:	00404f1d 	.word	0x00404f1d

00404d18 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
  404d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d1c:	b085      	sub	sp, #20
  404d1e:	4682      	mov	sl, r0
  404d20:	4689      	mov	r9, r1
  404d22:	9202      	str	r2, [sp, #8]
  404d24:	4698      	mov	r8, r3
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  404d26:	482d      	ldr	r0, [pc, #180]	; (404ddc <trans_del+0xc4>)
  404d28:	4b2d      	ldr	r3, [pc, #180]	; (404de0 <trans_del+0xc8>)
  404d2a:	4798      	blx	r3
  404d2c:	4604      	mov	r4, r0
    bool removed = false;
  404d2e:	2300      	movs	r3, #0
  404d30:	9301      	str	r3, [sp, #4]
    while(tr != NULL) {
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  404d32:	4e2c      	ldr	r6, [pc, #176]	; (404de4 <trans_del+0xcc>)
    while(tr != NULL) {
  404d34:	e00c      	b.n	404d50 <trans_del+0x38>

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
  404d36:	88a2      	ldrh	r2, [r4, #4]
  404d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404d3c:	9902      	ldr	r1, [sp, #8]
  404d3e:	4299      	cmp	r1, r3
  404d40:	bf18      	it	ne
  404d42:	428a      	cmpne	r2, r1
  404d44:	bf0c      	ite	eq
  404d46:	2301      	moveq	r3, #1
  404d48:	2300      	movne	r3, #0
  404d4a:	9303      	str	r3, [sp, #12]
  404d4c:	d012      	beq.n	404d74 <trans_del+0x5c>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
                    lv_anim_del(tr, NULL);
                    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
                    lv_mem_free(tr);
                    removed = true;
  404d4e:	463c      	mov	r4, r7
        if(tr == tr_limit) break;
  404d50:	4544      	cmp	r4, r8
  404d52:	d03f      	beq.n	404dd4 <trans_del+0xbc>
  404d54:	2c00      	cmp	r4, #0
  404d56:	d03d      	beq.n	404dd4 <trans_del+0xbc>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  404d58:	4621      	mov	r1, r4
  404d5a:	4820      	ldr	r0, [pc, #128]	; (404ddc <trans_del+0xc4>)
  404d5c:	47b0      	blx	r6
  404d5e:	4607      	mov	r7, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
  404d60:	6825      	ldr	r5, [r4, #0]
  404d62:	4555      	cmp	r5, sl
  404d64:	d1f3      	bne.n	404d4e <trans_del+0x36>
  404d66:	68a3      	ldr	r3, [r4, #8]
  404d68:	454b      	cmp	r3, r9
  404d6a:	d0e4      	beq.n	404d36 <trans_del+0x1e>
  404d6c:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
  404d70:	d1ed      	bne.n	404d4e <trans_del+0x36>
  404d72:	e7e0      	b.n	404d36 <trans_del+0x1e>
            for(i = 0; i < obj->style_cnt; i++) {
  404d74:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
  404d76:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
  404d7a:	d0e8      	beq.n	404d4e <trans_del+0x36>
  404d7c:	f04f 0b00 	mov.w	fp, #0
  404d80:	e017      	b.n	404db2 <trans_del+0x9a>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
  404d82:	88a1      	ldrh	r1, [r4, #4]
  404d84:	5880      	ldr	r0, [r0, r2]
  404d86:	4b18      	ldr	r3, [pc, #96]	; (404de8 <trans_del+0xd0>)
  404d88:	4798      	blx	r3
                    lv_anim_del(tr, NULL);
  404d8a:	2100      	movs	r1, #0
  404d8c:	4620      	mov	r0, r4
  404d8e:	4b17      	ldr	r3, [pc, #92]	; (404dec <trans_del+0xd4>)
  404d90:	4798      	blx	r3
                    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  404d92:	4621      	mov	r1, r4
  404d94:	4811      	ldr	r0, [pc, #68]	; (404ddc <trans_del+0xc4>)
  404d96:	4b16      	ldr	r3, [pc, #88]	; (404df0 <trans_del+0xd8>)
  404d98:	4798      	blx	r3
                    lv_mem_free(tr);
  404d9a:	4620      	mov	r0, r4
  404d9c:	4b15      	ldr	r3, [pc, #84]	; (404df4 <trans_del+0xdc>)
  404d9e:	4798      	blx	r3
                    removed = true;
  404da0:	9b03      	ldr	r3, [sp, #12]
  404da2:	9301      	str	r3, [sp, #4]
            for(i = 0; i < obj->style_cnt; i++) {
  404da4:	f10b 0b01 	add.w	fp, fp, #1
  404da8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
  404daa:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  404dae:	455b      	cmp	r3, fp
  404db0:	d9cd      	bls.n	404d4e <trans_del+0x36>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
  404db2:	ea4f 02cb 	mov.w	r2, fp, lsl #3
  404db6:	68e8      	ldr	r0, [r5, #12]
  404db8:	1883      	adds	r3, r0, r2
  404dba:	79d9      	ldrb	r1, [r3, #7]
  404dbc:	f011 0f02 	tst.w	r1, #2
  404dc0:	d0f0      	beq.n	404da4 <trans_del+0x8c>
  404dc2:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
  404dc6:	d0dc      	beq.n	404d82 <trans_del+0x6a>
  404dc8:	685b      	ldr	r3, [r3, #4]
  404dca:	f3c3 0317 	ubfx	r3, r3, #0, #24
  404dce:	4599      	cmp	r9, r3
  404dd0:	d1e8      	bne.n	404da4 <trans_del+0x8c>
  404dd2:	e7d6      	b.n	404d82 <trans_del+0x6a>

        }
        tr = tr_prev;
    }
    return removed;
}
  404dd4:	9801      	ldr	r0, [sp, #4]
  404dd6:	b005      	add	sp, #20
  404dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ddc:	20439e84 	.word	0x20439e84
  404de0:	00410eab 	.word	0x00410eab
  404de4:	00410ebd 	.word	0x00410ebd
  404de8:	00412241 	.word	0x00412241
  404dec:	00410511 	.word	0x00410511
  404df0:	00410e39 	.word	0x00410e39
  404df4:	004110e1 	.word	0x004110e1

00404df8 <refresh_children_style>:
{
  404df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404dfc:	4680      	mov	r8, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
  404dfe:	4b0f      	ldr	r3, [pc, #60]	; (404e3c <refresh_children_style+0x44>)
  404e00:	4798      	blx	r3
    for(i = 0; i < child_cnt; i++) {
  404e02:	b1c0      	cbz	r0, 404e36 <refresh_children_style+0x3e>
  404e04:	4607      	mov	r7, r0
  404e06:	2500      	movs	r5, #0
        lv_obj_invalidate(child);
  404e08:	4e0d      	ldr	r6, [pc, #52]	; (404e40 <refresh_children_style+0x48>)
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
  404e0a:	46aa      	mov	sl, r5
  404e0c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 404e44 <refresh_children_style+0x4c>
        lv_obj_t * child = obj->spec_attr->children[i];
  404e10:	f8d8 3008 	ldr.w	r3, [r8, #8]
  404e14:	681b      	ldr	r3, [r3, #0]
  404e16:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        lv_obj_invalidate(child);
  404e1a:	4620      	mov	r0, r4
  404e1c:	47b0      	blx	r6
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
  404e1e:	4652      	mov	r2, sl
  404e20:	2128      	movs	r1, #40	; 0x28
  404e22:	4620      	mov	r0, r4
  404e24:	47c8      	blx	r9
        lv_obj_invalidate(child);
  404e26:	4620      	mov	r0, r4
  404e28:	47b0      	blx	r6
        refresh_children_style(child); /*Check children too*/
  404e2a:	4620      	mov	r0, r4
  404e2c:	f7ff ffe4 	bl	404df8 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
  404e30:	3501      	adds	r5, #1
  404e32:	42af      	cmp	r7, r5
  404e34:	d1ec      	bne.n	404e10 <refresh_children_style+0x18>
  404e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e3a:	bf00      	nop
  404e3c:	00405e25 	.word	0x00405e25
  404e40:	0040262d 	.word	0x0040262d
  404e44:	00400491 	.word	0x00400491

00404e48 <get_trans_style>:
{
  404e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
  404e4a:	8c46      	ldrh	r6, [r0, #34]	; 0x22
  404e4c:	f3c6 06c5 	ubfx	r6, r6, #3, #6
  404e50:	b1b6      	cbz	r6, 404e80 <get_trans_style+0x38>
  404e52:	4635      	mov	r5, r6
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
  404e54:	68c7      	ldr	r7, [r0, #12]
  404e56:	463b      	mov	r3, r7
  404e58:	2200      	movs	r2, #0
  404e5a:	e003      	b.n	404e64 <get_trans_style+0x1c>
    for(i = 0; i < obj->style_cnt; i++) {
  404e5c:	3201      	adds	r2, #1
  404e5e:	3308      	adds	r3, #8
  404e60:	42aa      	cmp	r2, r5
  404e62:	d00d      	beq.n	404e80 <get_trans_style+0x38>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
  404e64:	79dc      	ldrb	r4, [r3, #7]
  404e66:	f014 0f02 	tst.w	r4, #2
  404e6a:	d0f7      	beq.n	404e5c <get_trans_style+0x14>
  404e6c:	685c      	ldr	r4, [r3, #4]
  404e6e:	f3c4 0417 	ubfx	r4, r4, #0, #24
  404e72:	428c      	cmp	r4, r1
  404e74:	d1f2      	bne.n	404e5c <get_trans_style+0x14>
    if(i != obj->style_cnt) return &obj->styles[i];
  404e76:	4296      	cmp	r6, r2
  404e78:	d002      	beq.n	404e80 <get_trans_style+0x38>
  404e7a:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
  404e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404e80:	460c      	mov	r4, r1
  404e82:	4605      	mov	r5, r0
    obj->style_cnt++;
  404e84:	1c71      	adds	r1, r6, #1
  404e86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  404e8a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  404e8c:	f361 03c8 	bfi	r3, r1, #3, #6
  404e90:	8443      	strh	r3, [r0, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
  404e92:	00c9      	lsls	r1, r1, #3
  404e94:	68c0      	ldr	r0, [r0, #12]
  404e96:	4b15      	ldr	r3, [pc, #84]	; (404eec <get_trans_style+0xa4>)
  404e98:	4798      	blx	r3
  404e9a:	60e8      	str	r0, [r5, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
  404e9c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  404e9e:	f3c2 02c5 	ubfx	r2, r2, #3, #6
  404ea2:	3a01      	subs	r2, #1
  404ea4:	d009      	beq.n	404eba <get_trans_style+0x72>
  404ea6:	00d6      	lsls	r6, r2, #3
        obj->styles[i] = obj->styles[i - 1];
  404ea8:	68eb      	ldr	r3, [r5, #12]
  404eaa:	4433      	add	r3, r6
  404eac:	e913 0003 	ldmdb	r3, {r0, r1}
  404eb0:	e883 0003 	stmia.w	r3, {r0, r1}
  404eb4:	3e08      	subs	r6, #8
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
  404eb6:	3a01      	subs	r2, #1
  404eb8:	d1f6      	bne.n	404ea8 <get_trans_style+0x60>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
  404eba:	2108      	movs	r1, #8
  404ebc:	68e8      	ldr	r0, [r5, #12]
  404ebe:	4b0c      	ldr	r3, [pc, #48]	; (404ef0 <get_trans_style+0xa8>)
  404ec0:	4798      	blx	r3
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
  404ec2:	68ee      	ldr	r6, [r5, #12]
  404ec4:	2008      	movs	r0, #8
  404ec6:	4b0b      	ldr	r3, [pc, #44]	; (404ef4 <get_trans_style+0xac>)
  404ec8:	4798      	blx	r3
  404eca:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
  404ecc:	68eb      	ldr	r3, [r5, #12]
  404ece:	6818      	ldr	r0, [r3, #0]
  404ed0:	4b09      	ldr	r3, [pc, #36]	; (404ef8 <get_trans_style+0xb0>)
  404ed2:	4798      	blx	r3
    obj->styles[0].is_trans = 1;
  404ed4:	68ea      	ldr	r2, [r5, #12]
  404ed6:	79d3      	ldrb	r3, [r2, #7]
  404ed8:	f043 0302 	orr.w	r3, r3, #2
  404edc:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
  404ede:	68eb      	ldr	r3, [r5, #12]
  404ee0:	685a      	ldr	r2, [r3, #4]
  404ee2:	f364 0217 	bfi	r2, r4, #0, #24
  404ee6:	605a      	str	r2, [r3, #4]
    return &obj->styles[0];
  404ee8:	68e8      	ldr	r0, [r5, #12]
}
  404eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404eec:	0041153d 	.word	0x0041153d
  404ef0:	004116ed 	.word	0x004116ed
  404ef4:	004114b5 	.word	0x004114b5
  404ef8:	004121d1 	.word	0x004121d1

00404efc <_lv_obj_style_init>:
{
  404efc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
  404efe:	2114      	movs	r1, #20
  404f00:	4801      	ldr	r0, [pc, #4]	; (404f08 <_lv_obj_style_init+0xc>)
  404f02:	4b02      	ldr	r3, [pc, #8]	; (404f0c <_lv_obj_style_init+0x10>)
  404f04:	4798      	blx	r3
  404f06:	bd08      	pop	{r3, pc}
  404f08:	20439e84 	.word	0x20439e84
  404f0c:	00410d8f 	.word	0x00410d8f

00404f10 <lv_obj_enable_style_refresh>:
    style_refr = en;
  404f10:	4b01      	ldr	r3, [pc, #4]	; (404f18 <lv_obj_enable_style_refresh+0x8>)
  404f12:	7018      	strb	r0, [r3, #0]
  404f14:	4770      	bx	lr
  404f16:	bf00      	nop
  404f18:	2040000a 	.word	0x2040000a

00404f1c <lv_obj_get_style_prop>:
{
  404f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f20:	b087      	sub	sp, #28
  404f22:	4606      	mov	r6, r0
  404f24:	468b      	mov	fp, r1
  404f26:	9200      	str	r2, [sp, #0]
  404f28:	f402 6380 	and.w	r3, r2, #1024	; 0x400
  404f2c:	9302      	str	r3, [sp, #8]
    if(filter) {
  404f2e:	4613      	mov	r3, r2
  404f30:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
  404f34:	9203      	str	r2, [sp, #12]
  404f36:	d003      	beq.n	404f40 <lv_obj_get_style_prop+0x24>
        prop &= ~LV_STYLE_PROP_FILTER;
  404f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  404f3c:	b29b      	uxth	r3, r3
  404f3e:	9300      	str	r3, [sp, #0]
    while(obj) {
  404f40:	2e00      	cmp	r6, #0
  404f42:	d175      	bne.n	405030 <lv_obj_get_style_prop+0x114>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
  404f44:	f1bb 0f00 	cmp.w	fp, #0
  404f48:	d10c      	bne.n	404f64 <lv_obj_get_style_prop+0x48>
  404f4a:	f241 0301 	movw	r3, #4097	; 0x1001
  404f4e:	9900      	ldr	r1, [sp, #0]
  404f50:	4299      	cmp	r1, r3
  404f52:	f000 8090 	beq.w	405076 <lv_obj_get_style_prop+0x15a>
  404f56:	f241 0304 	movw	r3, #4100	; 0x1004
  404f5a:	4299      	cmp	r1, r3
  404f5c:	f000 808b 	beq.w	405076 <lv_obj_get_style_prop+0x15a>
  404f60:	f04f 0b00 	mov.w	fp, #0
            value_act = lv_style_prop_get_default(prop);
  404f64:	9800      	ldr	r0, [sp, #0]
  404f66:	4b62      	ldr	r3, [pc, #392]	; (4050f0 <lv_obj_get_style_prop+0x1d4>)
  404f68:	4798      	blx	r3
  404f6a:	e051      	b.n	405010 <lv_obj_get_style_prop+0xf4>
    for(i = 0; i < obj->style_cnt; i++) {
  404f6c:	3401      	adds	r4, #1
  404f6e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  404f70:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  404f74:	429c      	cmp	r4, r3
  404f76:	d251      	bcs.n	40501c <lv_obj_get_style_prop+0x100>
        _lv_obj_style_t * obj_style = &obj->styles[i];
  404f78:	68f3      	ldr	r3, [r6, #12]
  404f7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
        if(obj_style->is_trans == false) break;
  404f7e:	79da      	ldrb	r2, [r3, #7]
  404f80:	f012 0f02 	tst.w	r2, #2
  404f84:	d014      	beq.n	404fb0 <lv_obj_get_style_prop+0x94>
        if(skip_trans) continue;
  404f86:	2d00      	cmp	r5, #0
  404f88:	d1f0      	bne.n	404f6c <lv_obj_get_style_prop+0x50>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
  404f8a:	685a      	ldr	r2, [r3, #4]
    return selector & 0xFF0000;
  404f8c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
        if(part_act != part) continue;
  404f90:	455a      	cmp	r2, fp
  404f92:	d1eb      	bne.n	404f6c <lv_obj_get_style_prop+0x50>
        if((obj_style->style->has_group & group) == 0) continue;
  404f94:	6818      	ldr	r0, [r3, #0]
  404f96:	7983      	ldrb	r3, [r0, #6]
  404f98:	ea18 0f03 	tst.w	r8, r3
  404f9c:	d0e6      	beq.n	404f6c <lv_obj_get_style_prop+0x50>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
  404f9e:	aa05      	add	r2, sp, #20
  404fa0:	9900      	ldr	r1, [sp, #0]
  404fa2:	4b54      	ldr	r3, [pc, #336]	; (4050f4 <lv_obj_get_style_prop+0x1d8>)
  404fa4:	4798      	blx	r3
        if(found) {
  404fa6:	2800      	cmp	r0, #0
  404fa8:	d0e0      	beq.n	404f6c <lv_obj_get_style_prop+0x50>
            *v = value_tmp;
  404faa:	9805      	ldr	r0, [sp, #20]
  404fac:	e030      	b.n	405010 <lv_obj_get_style_prop+0xf4>
    for(i = 0; i < obj->style_cnt; i++) {
  404fae:	2400      	movs	r4, #0
  404fb0:	00e7      	lsls	r7, r4, #3
  404fb2:	f04f 3aff 	mov.w	sl, #4294967295
  404fb6:	e008      	b.n	404fca <lv_obj_get_style_prop+0xae>
                *v = value_tmp;
  404fb8:	9805      	ldr	r0, [sp, #20]
  404fba:	e029      	b.n	405010 <lv_obj_get_style_prop+0xf4>
    for(; i < obj->style_cnt; i++) {
  404fbc:	3401      	adds	r4, #1
  404fbe:	3708      	adds	r7, #8
  404fc0:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  404fc2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  404fc6:	429c      	cmp	r4, r3
  404fc8:	d21e      	bcs.n	405008 <lv_obj_get_style_prop+0xec>
        _lv_obj_style_t * obj_style = &obj->styles[i];
  404fca:	68f2      	ldr	r2, [r6, #12]
  404fcc:	19d3      	adds	r3, r2, r7
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
  404fce:	685b      	ldr	r3, [r3, #4]
  404fd0:	f3c3 0317 	ubfx	r3, r3, #0, #24
    return selector & 0xFF0000;
  404fd4:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
  404fd8:	4559      	cmp	r1, fp
  404fda:	d1ef      	bne.n	404fbc <lv_obj_get_style_prop+0xa0>
        if((obj_style->style->has_group & group) == 0) continue;
  404fdc:	59d0      	ldr	r0, [r2, r7]
  404fde:	7982      	ldrb	r2, [r0, #6]
  404fe0:	ea18 0f02 	tst.w	r8, r2
  404fe4:	d0ea      	beq.n	404fbc <lv_obj_get_style_prop+0xa0>
    return selector & 0xFFFF;
  404fe6:	b29d      	uxth	r5, r3
        if((state_act & state_inv)) continue;
  404fe8:	ea19 0f05 	tst.w	r9, r5
  404fec:	d1e6      	bne.n	404fbc <lv_obj_get_style_prop+0xa0>
        if(state_act <= weight) continue;
  404fee:	4555      	cmp	r5, sl
  404ff0:	dde4      	ble.n	404fbc <lv_obj_get_style_prop+0xa0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
  404ff2:	aa05      	add	r2, sp, #20
  404ff4:	9900      	ldr	r1, [sp, #0]
  404ff6:	4b3f      	ldr	r3, [pc, #252]	; (4050f4 <lv_obj_get_style_prop+0x1d8>)
  404ff8:	4798      	blx	r3
        if(found) {
  404ffa:	2800      	cmp	r0, #0
  404ffc:	d0de      	beq.n	404fbc <lv_obj_get_style_prop+0xa0>
            if(state_act == state) {
  404ffe:	9b01      	ldr	r3, [sp, #4]
  405000:	42ab      	cmp	r3, r5
  405002:	d0d9      	beq.n	404fb8 <lv_obj_get_style_prop+0x9c>
                weight = state_act;
  405004:	46aa      	mov	sl, r5
  405006:	e7d9      	b.n	404fbc <lv_obj_get_style_prop+0xa0>
    if(weight >= 0) {
  405008:	f1ba 0f00 	cmp.w	sl, #0
  40500c:	db06      	blt.n	40501c <lv_obj_get_style_prop+0x100>
        *v = value_tmp;
  40500e:	9805      	ldr	r0, [sp, #20]
    if(filter) value_act = apply_color_filter(obj, part, value_act);
  405010:	9b03      	ldr	r3, [sp, #12]
  405012:	2b00      	cmp	r3, #0
  405014:	d150      	bne.n	4050b8 <lv_obj_get_style_prop+0x19c>
}
  405016:	b007      	add	sp, #28
  405018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(!inherit) break;
  40501c:	9b02      	ldr	r3, [sp, #8]
  40501e:	2b00      	cmp	r3, #0
  405020:	d090      	beq.n	404f44 <lv_obj_get_style_prop+0x28>
        if(part != LV_PART_MAIN) {
  405022:	f1bb 0f00 	cmp.w	fp, #0
  405026:	d021      	beq.n	40506c <lv_obj_get_style_prop+0x150>
  405028:	f04f 0b00 	mov.w	fp, #0
    while(obj) {
  40502c:	2e00      	cmp	r6, #0
  40502e:	d08c      	beq.n	404f4a <lv_obj_get_style_prop+0x2e>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
  405030:	9800      	ldr	r0, [sp, #0]
  405032:	4b31      	ldr	r3, [pc, #196]	; (4050f8 <lv_obj_get_style_prop+0x1dc>)
  405034:	4798      	blx	r3
  405036:	f04f 0801 	mov.w	r8, #1
  40503a:	fa08 f800 	lsl.w	r8, r8, r0
  40503e:	fa5f f888 	uxtb.w	r8, r8
    lv_state_t state = obj->state;
  405042:	8c33      	ldrh	r3, [r6, #32]
  405044:	9301      	str	r3, [sp, #4]
    lv_state_t state_inv = ~state;
  405046:	ea6f 0903 	mvn.w	r9, r3
  40504a:	fa1f f989 	uxth.w	r9, r9
    bool skip_trans = obj->skip_trans;
  40504e:	f896 5022 	ldrb.w	r5, [r6, #34]	; 0x22
  405052:	f3c5 0580 	ubfx	r5, r5, #2, #1
    for(i = 0; i < obj->style_cnt; i++) {
  405056:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  405058:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
  40505c:	d0de      	beq.n	40501c <lv_obj_get_style_prop+0x100>
        _lv_obj_style_t * obj_style = &obj->styles[i];
  40505e:	68f3      	ldr	r3, [r6, #12]
        if(obj_style->is_trans == false) break;
  405060:	79da      	ldrb	r2, [r3, #7]
  405062:	f012 0f02 	tst.w	r2, #2
  405066:	d0a2      	beq.n	404fae <lv_obj_get_style_prop+0x92>
  405068:	2400      	movs	r4, #0
  40506a:	e78c      	b.n	404f86 <lv_obj_get_style_prop+0x6a>
        obj = lv_obj_get_parent(obj);
  40506c:	4630      	mov	r0, r6
  40506e:	4b23      	ldr	r3, [pc, #140]	; (4050fc <lv_obj_get_style_prop+0x1e0>)
  405070:	4798      	blx	r3
  405072:	4606      	mov	r6, r0
  405074:	e7d8      	b.n	405028 <lv_obj_get_style_prop+0x10c>
            const lv_obj_class_t * cls = obj->class_p;
  405076:	6833      	ldr	r3, [r6, #0]
            while(cls) {
  405078:	b19b      	cbz	r3, 4050a2 <lv_obj_get_style_prop+0x186>
                if(prop == LV_STYLE_WIDTH) {
  40507a:	f241 0101 	movw	r1, #4097	; 0x1001
  40507e:	9800      	ldr	r0, [sp, #0]
  405080:	e004      	b.n	40508c <lv_obj_get_style_prop+0x170>
                    if(cls->width_def != 0) break;
  405082:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
  405086:	b9a2      	cbnz	r2, 4050b2 <lv_obj_get_style_prop+0x196>
                cls = cls->base_class;
  405088:	681b      	ldr	r3, [r3, #0]
            while(cls) {
  40508a:	b153      	cbz	r3, 4050a2 <lv_obj_get_style_prop+0x186>
                if(prop == LV_STYLE_WIDTH) {
  40508c:	4288      	cmp	r0, r1
  40508e:	d0f8      	beq.n	405082 <lv_obj_get_style_prop+0x166>
                    if(cls->height_def != 0) break;
  405090:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
  405094:	2a00      	cmp	r2, #0
  405096:	d0f7      	beq.n	405088 <lv_obj_get_style_prop+0x16c>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
  405098:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
  40509c:	f04f 0b00 	mov.w	fp, #0
  4050a0:	e7b6      	b.n	405010 <lv_obj_get_style_prop+0xf4>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
  4050a2:	f241 0301 	movw	r3, #4097	; 0x1001
  4050a6:	9a00      	ldr	r2, [sp, #0]
  4050a8:	429a      	cmp	r2, r3
  4050aa:	d001      	beq.n	4050b0 <lv_obj_get_style_prop+0x194>
  4050ac:	2300      	movs	r3, #0
  4050ae:	e7f3      	b.n	405098 <lv_obj_get_style_prop+0x17c>
  4050b0:	2300      	movs	r3, #0
  4050b2:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
  4050b6:	e7f1      	b.n	40509c <lv_obj_get_style_prop+0x180>
  4050b8:	4604      	mov	r4, r0
    if(obj == NULL) return v;
  4050ba:	2e00      	cmp	r6, #0
  4050bc:	d0ab      	beq.n	405016 <lv_obj_get_style_prop+0xfa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
  4050be:	2263      	movs	r2, #99	; 0x63
  4050c0:	4659      	mov	r1, fp
  4050c2:	4630      	mov	r0, r6
  4050c4:	f7ff ff2a 	bl	404f1c <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
  4050c8:	4605      	mov	r5, r0
  4050ca:	b140      	cbz	r0, 4050de <lv_obj_get_style_prop+0x1c2>
  4050cc:	6803      	ldr	r3, [r0, #0]
  4050ce:	b133      	cbz	r3, 4050de <lv_obj_get_style_prop+0x1c2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
  4050d0:	2264      	movs	r2, #100	; 0x64
  4050d2:	4659      	mov	r1, fp
  4050d4:	4630      	mov	r0, r6
  4050d6:	f7ff ff21 	bl	404f1c <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
  4050da:	b2c2      	uxtb	r2, r0
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
  4050dc:	b90a      	cbnz	r2, 4050e2 <lv_obj_get_style_prop+0x1c6>
    return v;
  4050de:	4620      	mov	r0, r4
  4050e0:	e799      	b.n	405016 <lv_obj_get_style_prop+0xfa>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
  4050e2:	682b      	ldr	r3, [r5, #0]
  4050e4:	4621      	mov	r1, r4
  4050e6:	4628      	mov	r0, r5
  4050e8:	4798      	blx	r3
  4050ea:	f360 040f 	bfi	r4, r0, #0, #16
  4050ee:	e7f6      	b.n	4050de <lv_obj_get_style_prop+0x1c2>
  4050f0:	004123f5 	.word	0x004123f5
  4050f4:	00412365 	.word	0x00412365
  4050f8:	004124d7 	.word	0x004124d7
  4050fc:	00405ded 	.word	0x00405ded

00405100 <lv_obj_refresh_style>:
    if(!style_refr) return;
  405100:	4b38      	ldr	r3, [pc, #224]	; (4051e4 <lv_obj_refresh_style+0xe4>)
  405102:	781b      	ldrb	r3, [r3, #0]
  405104:	b903      	cbnz	r3, 405108 <lv_obj_refresh_style+0x8>
  405106:	4770      	bx	lr
{
  405108:	b570      	push	{r4, r5, r6, lr}
  40510a:	4615      	mov	r5, r2
  40510c:	460c      	mov	r4, r1
  40510e:	4606      	mov	r6, r0
    lv_obj_invalidate(obj);
  405110:	4b35      	ldr	r3, [pc, #212]	; (4051e8 <lv_obj_refresh_style+0xe8>)
  405112:	4798      	blx	r3
    return selector & 0xFF0000;
  405114:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    if(prop & LV_STYLE_PROP_LAYOUT_REFR) {
  405118:	f415 5f80 	tst.w	r5, #4096	; 0x1000
  40511c:	d021      	beq.n	405162 <lv_obj_refresh_style+0x62>
        if(part == LV_PART_ANY ||
  40511e:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
  405122:	d016      	beq.n	405152 <lv_obj_refresh_style+0x52>
  405124:	b1ac      	cbz	r4, 405152 <lv_obj_refresh_style+0x52>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  405126:	f241 0204 	movw	r2, #4100	; 0x1004
  40512a:	2100      	movs	r1, #0
  40512c:	4630      	mov	r0, r6
  40512e:	4b2f      	ldr	r3, [pc, #188]	; (4051ec <lv_obj_refresh_style+0xec>)
  405130:	4798      	blx	r3
    return (lv_coord_t)v.num;
  405132:	b200      	sxth	r0, r0
           part == LV_PART_MAIN ||
  405134:	f242 73d1 	movw	r3, #10193	; 0x27d1
  405138:	4298      	cmp	r0, r3
  40513a:	d00a      	beq.n	405152 <lv_obj_refresh_style+0x52>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  40513c:	f241 0201 	movw	r2, #4097	; 0x1001
  405140:	2100      	movs	r1, #0
  405142:	4630      	mov	r0, r6
  405144:	4b29      	ldr	r3, [pc, #164]	; (4051ec <lv_obj_refresh_style+0xec>)
  405146:	4798      	blx	r3
    return (lv_coord_t)v.num;
  405148:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
  40514a:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40514e:	4298      	cmp	r0, r3
  405150:	d10b      	bne.n	40516a <lv_obj_refresh_style+0x6a>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
  405152:	2200      	movs	r2, #0
  405154:	2128      	movs	r1, #40	; 0x28
  405156:	4630      	mov	r0, r6
  405158:	4b25      	ldr	r3, [pc, #148]	; (4051f0 <lv_obj_refresh_style+0xf0>)
  40515a:	4798      	blx	r3
            lv_obj_mark_layout_as_dirty(obj);
  40515c:	4630      	mov	r0, r6
  40515e:	4b25      	ldr	r3, [pc, #148]	; (4051f4 <lv_obj_refresh_style+0xf4>)
  405160:	4798      	blx	r3
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY ||
  405162:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
  405166:	d017      	beq.n	405198 <lv_obj_refresh_style+0x98>
  405168:	b1b4      	cbz	r4, 405198 <lv_obj_refresh_style+0x98>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
  40516a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40516e:	429d      	cmp	r5, r3
  405170:	d029      	beq.n	4051c6 <lv_obj_refresh_style+0xc6>
  405172:	f415 6f00 	tst.w	r5, #2048	; 0x800
  405176:	d12d      	bne.n	4051d4 <lv_obj_refresh_style+0xd4>
    lv_obj_invalidate(obj);
  405178:	4630      	mov	r0, r6
  40517a:	4b1b      	ldr	r3, [pc, #108]	; (4051e8 <lv_obj_refresh_style+0xe8>)
  40517c:	4798      	blx	r3
    if(prop == LV_STYLE_PROP_ANY ||
  40517e:	f415 6f80 	tst.w	r5, #1024	; 0x400
  405182:	d02e      	beq.n	4051e2 <lv_obj_refresh_style+0xe2>
       ((prop & LV_STYLE_PROP_INHERIT) && ((prop & LV_STYLE_PROP_EXT_DRAW) || (prop & LV_STYLE_PROP_LAYOUT_REFR)))) {
  405184:	f415 5fc0 	tst.w	r5, #6144	; 0x1800
  405188:	d02b      	beq.n	4051e2 <lv_obj_refresh_style+0xe2>
        if(part != LV_PART_SCROLLBAR) {
  40518a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  40518e:	d028      	beq.n	4051e2 <lv_obj_refresh_style+0xe2>
            refresh_children_style(obj);
  405190:	4630      	mov	r0, r6
  405192:	4b19      	ldr	r3, [pc, #100]	; (4051f8 <lv_obj_refresh_style+0xf8>)
  405194:	4798      	blx	r3
  405196:	bd70      	pop	{r4, r5, r6, pc}
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY ||
  405198:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40519c:	429d      	cmp	r5, r3
  40519e:	d00c      	beq.n	4051ba <lv_obj_refresh_style+0xba>
  4051a0:	f415 5f00 	tst.w	r5, #8192	; 0x2000
  4051a4:	d0e5      	beq.n	405172 <lv_obj_refresh_style+0x72>
        lv_obj_t * parent = lv_obj_get_parent(obj);
  4051a6:	4630      	mov	r0, r6
  4051a8:	4b14      	ldr	r3, [pc, #80]	; (4051fc <lv_obj_refresh_style+0xfc>)
  4051aa:	4798      	blx	r3
        if(parent) lv_obj_mark_layout_as_dirty(parent);
  4051ac:	4603      	mov	r3, r0
  4051ae:	2800      	cmp	r0, #0
  4051b0:	d0df      	beq.n	405172 <lv_obj_refresh_style+0x72>
  4051b2:	4618      	mov	r0, r3
  4051b4:	4b0f      	ldr	r3, [pc, #60]	; (4051f4 <lv_obj_refresh_style+0xf4>)
  4051b6:	4798      	blx	r3
  4051b8:	e7d7      	b.n	40516a <lv_obj_refresh_style+0x6a>
        lv_obj_t * parent = lv_obj_get_parent(obj);
  4051ba:	4630      	mov	r0, r6
  4051bc:	4b0f      	ldr	r3, [pc, #60]	; (4051fc <lv_obj_refresh_style+0xfc>)
  4051be:	4798      	blx	r3
        if(parent) lv_obj_mark_layout_as_dirty(parent);
  4051c0:	4603      	mov	r3, r0
  4051c2:	2800      	cmp	r0, #0
  4051c4:	d1f5      	bne.n	4051b2 <lv_obj_refresh_style+0xb2>
        lv_obj_refresh_ext_draw_size(obj);
  4051c6:	4630      	mov	r0, r6
  4051c8:	4b0d      	ldr	r3, [pc, #52]	; (405200 <lv_obj_refresh_style+0x100>)
  4051ca:	4798      	blx	r3
    lv_obj_invalidate(obj);
  4051cc:	4630      	mov	r0, r6
  4051ce:	4b06      	ldr	r3, [pc, #24]	; (4051e8 <lv_obj_refresh_style+0xe8>)
  4051d0:	4798      	blx	r3
  4051d2:	e7da      	b.n	40518a <lv_obj_refresh_style+0x8a>
        lv_obj_refresh_ext_draw_size(obj);
  4051d4:	4630      	mov	r0, r6
  4051d6:	4b0a      	ldr	r3, [pc, #40]	; (405200 <lv_obj_refresh_style+0x100>)
  4051d8:	4798      	blx	r3
    lv_obj_invalidate(obj);
  4051da:	4630      	mov	r0, r6
  4051dc:	4b02      	ldr	r3, [pc, #8]	; (4051e8 <lv_obj_refresh_style+0xe8>)
  4051de:	4798      	blx	r3
  4051e0:	e7cd      	b.n	40517e <lv_obj_refresh_style+0x7e>
  4051e2:	bd70      	pop	{r4, r5, r6, pc}
  4051e4:	2040000a 	.word	0x2040000a
  4051e8:	0040262d 	.word	0x0040262d
  4051ec:	00404f1d 	.word	0x00404f1d
  4051f0:	00400491 	.word	0x00400491
  4051f4:	004021e1 	.word	0x004021e1
  4051f8:	00404df9 	.word	0x00404df9
  4051fc:	00405ded 	.word	0x00405ded
  405200:	00402031 	.word	0x00402031

00405204 <lv_obj_add_style>:
{
  405204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405208:	4604      	mov	r4, r0
  40520a:	460f      	mov	r7, r1
  40520c:	4616      	mov	r6, r2
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
  40520e:	2300      	movs	r3, #0
  405210:	f64f 72ff 	movw	r2, #65535	; 0xffff
  405214:	4631      	mov	r1, r6
  405216:	4d27      	ldr	r5, [pc, #156]	; (4052b4 <lv_obj_add_style+0xb0>)
  405218:	47a8      	blx	r5
    for(i = 0; i < obj->style_cnt; i++) {
  40521a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
  40521c:	f3c1 01c5 	ubfx	r1, r1, #3, #6
  405220:	2900      	cmp	r1, #0
  405222:	d045      	beq.n	4052b0 <lv_obj_add_style+0xac>
  405224:	4608      	mov	r0, r1
  405226:	68e3      	ldr	r3, [r4, #12]
        if(obj->styles[i].is_trans) continue;
  405228:	2500      	movs	r5, #0
  40522a:	e003      	b.n	405234 <lv_obj_add_style+0x30>
    for(i = 0; i < obj->style_cnt; i++) {
  40522c:	3501      	adds	r5, #1
  40522e:	3308      	adds	r3, #8
  405230:	4285      	cmp	r5, r0
  405232:	d006      	beq.n	405242 <lv_obj_add_style+0x3e>
        if(obj->styles[i].is_trans) continue;
  405234:	79da      	ldrb	r2, [r3, #7]
  405236:	f012 0f02 	tst.w	r2, #2
  40523a:	d1f7      	bne.n	40522c <lv_obj_add_style+0x28>
        if(obj->styles[i].is_local) continue;
  40523c:	f012 0f01 	tst.w	r2, #1
  405240:	d1f4      	bne.n	40522c <lv_obj_add_style+0x28>
    obj->style_cnt++;
  405242:	3101      	adds	r1, #1
  405244:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  405248:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  40524a:	f361 03c8 	bfi	r3, r1, #3, #6
  40524e:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
  405250:	00c9      	lsls	r1, r1, #3
  405252:	68e0      	ldr	r0, [r4, #12]
  405254:	4b18      	ldr	r3, [pc, #96]	; (4052b8 <lv_obj_add_style+0xb4>)
  405256:	4798      	blx	r3
  405258:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
  40525a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
  40525c:	f3c2 02c5 	ubfx	r2, r2, #3, #6
  405260:	3a01      	subs	r2, #1
  405262:	42aa      	cmp	r2, r5
  405264:	d90c      	bls.n	405280 <lv_obj_add_style+0x7c>
  405266:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
        obj->styles[j] = obj->styles[j - 1];
  40526a:	68e3      	ldr	r3, [r4, #12]
  40526c:	4473      	add	r3, lr
  40526e:	e913 0003 	ldmdb	r3, {r0, r1}
  405272:	e883 0003 	stmia.w	r3, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
  405276:	3a01      	subs	r2, #1
  405278:	f1ae 0e08 	sub.w	lr, lr, #8
  40527c:	42aa      	cmp	r2, r5
  40527e:	d8f4      	bhi.n	40526a <lv_obj_add_style+0x66>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
  405280:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  405284:	68e0      	ldr	r0, [r4, #12]
  405286:	2108      	movs	r1, #8
  405288:	4440      	add	r0, r8
  40528a:	4b0c      	ldr	r3, [pc, #48]	; (4052bc <lv_obj_add_style+0xb8>)
  40528c:	4798      	blx	r3
    obj->styles[i].style = style;
  40528e:	68e3      	ldr	r3, [r4, #12]
  405290:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    obj->styles[i].selector = selector;
  405294:	68e3      	ldr	r3, [r4, #12]
  405296:	4443      	add	r3, r8
  405298:	685a      	ldr	r2, [r3, #4]
  40529a:	f366 0217 	bfi	r2, r6, #0, #24
  40529e:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
  4052a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4052a4:	4631      	mov	r1, r6
  4052a6:	4620      	mov	r0, r4
  4052a8:	4b05      	ldr	r3, [pc, #20]	; (4052c0 <lv_obj_add_style+0xbc>)
  4052aa:	4798      	blx	r3
  4052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < obj->style_cnt; i++) {
  4052b0:	460d      	mov	r5, r1
  4052b2:	e7c6      	b.n	405242 <lv_obj_add_style+0x3e>
  4052b4:	00404d19 	.word	0x00404d19
  4052b8:	0041153d 	.word	0x0041153d
  4052bc:	004116ed 	.word	0x004116ed
  4052c0:	00405101 	.word	0x00405101

004052c4 <lv_obj_remove_style>:
{
  4052c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052c8:	b083      	sub	sp, #12
  4052ca:	4606      	mov	r6, r0
    return selector & 0xFFFF;
  4052cc:	b297      	uxth	r7, r2
    return selector & 0xFF0000;
  4052ce:	f402 087f 	and.w	r8, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
  4052d2:	468a      	mov	sl, r1
  4052d4:	b181      	cbz	r1, 4052f8 <lv_obj_remove_style+0x34>
  4052d6:	f891 9007 	ldrb.w	r9, [r1, #7]
  4052da:	f119 0900 	adds.w	r9, r9, #0
  4052de:	bf18      	it	ne
  4052e0:	f04f 0901 	movne.w	r9, #1
  4052e4:	f1c9 0900 	rsb	r9, r9, #0
  4052e8:	fa1f f989 	uxth.w	r9, r9
    bool deleted = false;
  4052ec:	2200      	movs	r2, #0
    uint32_t i = 0;
  4052ee:	4615      	mov	r5, r2
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
  4052f0:	f8df b100 	ldr.w	fp, [pc, #256]	; 4053f4 <lv_obj_remove_style+0x130>
  4052f4:	9701      	str	r7, [sp, #4]
    while(i <  obj->style_cnt) {
  4052f6:	e009      	b.n	40530c <lv_obj_remove_style+0x48>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
  4052f8:	f64f 79ff 	movw	r9, #65535	; 0xffff
  4052fc:	e7f6      	b.n	4052ec <lv_obj_remove_style+0x28>
           (part != LV_PART_ANY && part_act != part) ||
  4052fe:	f1ba 0f00 	cmp.w	sl, #0
  405302:	d01e      	beq.n	405342 <lv_obj_remove_style+0x7e>
           (style != NULL && style != obj->styles[i].style)) {
  405304:	680b      	ldr	r3, [r1, #0]
  405306:	459a      	cmp	sl, r3
  405308:	d01b      	beq.n	405342 <lv_obj_remove_style+0x7e>
            i++;
  40530a:	3501      	adds	r5, #1
    while(i <  obj->style_cnt) {
  40530c:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  40530e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  405312:	429d      	cmp	r5, r3
  405314:	d25a      	bcs.n	4053cc <lv_obj_remove_style+0x108>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
  405316:	00ec      	lsls	r4, r5, #3
  405318:	68f1      	ldr	r1, [r6, #12]
  40531a:	4421      	add	r1, r4
  40531c:	684b      	ldr	r3, [r1, #4]
  40531e:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
  405322:	f64f 70ff 	movw	r0, #65535	; 0xffff
  405326:	9f01      	ldr	r7, [sp, #4]
  405328:	4287      	cmp	r7, r0
  40532a:	d002      	beq.n	405332 <lv_obj_remove_style+0x6e>
  40532c:	b298      	uxth	r0, r3
  40532e:	42b8      	cmp	r0, r7
  405330:	d1eb      	bne.n	40530a <lv_obj_remove_style+0x46>
    return selector & 0xFF0000;
  405332:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if((state != LV_STATE_ANY && state_act != state) ||
  405336:	4543      	cmp	r3, r8
  405338:	d0e1      	beq.n	4052fe <lv_obj_remove_style+0x3a>
  40533a:	f5b8 2f70 	cmp.w	r8, #983040	; 0xf0000
  40533e:	d1e4      	bne.n	40530a <lv_obj_remove_style+0x46>
  405340:	e7dd      	b.n	4052fe <lv_obj_remove_style+0x3a>
        if(obj->styles[i].is_trans) {
  405342:	79cb      	ldrb	r3, [r1, #7]
  405344:	f013 0f02 	tst.w	r3, #2
  405348:	d12d      	bne.n	4053a6 <lv_obj_remove_style+0xe2>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
  40534a:	68f3      	ldr	r3, [r6, #12]
  40534c:	191a      	adds	r2, r3, r4
  40534e:	79d2      	ldrb	r2, [r2, #7]
  405350:	f012 0f03 	tst.w	r2, #3
  405354:	d12f      	bne.n	4053b6 <lv_obj_remove_style+0xf2>
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
  405356:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  405358:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  40535c:	1e5a      	subs	r2, r3, #1
  40535e:	4295      	cmp	r5, r2
  405360:	d214      	bcs.n	40538c <lv_obj_remove_style+0xc8>
  405362:	4629      	mov	r1, r5
  405364:	9f01      	ldr	r7, [sp, #4]
            obj->styles[j] = obj->styles[j + 1];
  405366:	68f3      	ldr	r3, [r6, #12]
  405368:	1c4a      	adds	r2, r1, #1
  40536a:	f104 0e08 	add.w	lr, r4, #8
  40536e:	441c      	add	r4, r3
  405370:	4473      	add	r3, lr
  405372:	e893 0003 	ldmia.w	r3, {r0, r1}
  405376:	e884 0003 	stmia.w	r4, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
  40537a:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  40537c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  405380:	4611      	mov	r1, r2
  405382:	4674      	mov	r4, lr
  405384:	1e58      	subs	r0, r3, #1
  405386:	4290      	cmp	r0, r2
  405388:	d8ed      	bhi.n	405366 <lv_obj_remove_style+0xa2>
  40538a:	9701      	str	r7, [sp, #4]
        obj->style_cnt--;
  40538c:	333f      	adds	r3, #63	; 0x3f
  40538e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
  405392:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  405394:	f361 03c8 	bfi	r3, r1, #3, #6
  405398:	8473      	strh	r3, [r6, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
  40539a:	00c9      	lsls	r1, r1, #3
  40539c:	68f0      	ldr	r0, [r6, #12]
  40539e:	47d8      	blx	fp
  4053a0:	60f0      	str	r0, [r6, #12]
        deleted = true;
  4053a2:	2201      	movs	r2, #1
  4053a4:	e7b2      	b.n	40530c <lv_obj_remove_style+0x48>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
  4053a6:	2300      	movs	r3, #0
  4053a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4053ac:	4641      	mov	r1, r8
  4053ae:	4630      	mov	r0, r6
  4053b0:	4f0c      	ldr	r7, [pc, #48]	; (4053e4 <lv_obj_remove_style+0x120>)
  4053b2:	47b8      	blx	r7
  4053b4:	e7c9      	b.n	40534a <lv_obj_remove_style+0x86>
            lv_style_reset(obj->styles[i].style);
  4053b6:	5918      	ldr	r0, [r3, r4]
  4053b8:	4b0b      	ldr	r3, [pc, #44]	; (4053e8 <lv_obj_remove_style+0x124>)
  4053ba:	4798      	blx	r3
            lv_mem_free(obj->styles[i].style);
  4053bc:	68f3      	ldr	r3, [r6, #12]
  4053be:	5918      	ldr	r0, [r3, r4]
  4053c0:	4b0a      	ldr	r3, [pc, #40]	; (4053ec <lv_obj_remove_style+0x128>)
  4053c2:	4798      	blx	r3
            obj->styles[i].style = NULL;
  4053c4:	68f3      	ldr	r3, [r6, #12]
  4053c6:	2200      	movs	r2, #0
  4053c8:	511a      	str	r2, [r3, r4]
  4053ca:	e7c4      	b.n	405356 <lv_obj_remove_style+0x92>
    if(deleted && prop != LV_STYLE_PROP_INV) {
  4053cc:	f1b9 0f00 	cmp.w	r9, #0
  4053d0:	d005      	beq.n	4053de <lv_obj_remove_style+0x11a>
  4053d2:	b122      	cbz	r2, 4053de <lv_obj_remove_style+0x11a>
        lv_obj_refresh_style(obj, part, prop);
  4053d4:	464a      	mov	r2, r9
  4053d6:	4641      	mov	r1, r8
  4053d8:	4630      	mov	r0, r6
  4053da:	4b05      	ldr	r3, [pc, #20]	; (4053f0 <lv_obj_remove_style+0x12c>)
  4053dc:	4798      	blx	r3
}
  4053de:	b003      	add	sp, #12
  4053e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053e4:	00404d19 	.word	0x00404d19
  4053e8:	004121e1 	.word	0x004121e1
  4053ec:	004110e1 	.word	0x004110e1
  4053f0:	00405101 	.word	0x00405101
  4053f4:	0041153d 	.word	0x0041153d

004053f8 <trans_anim_ready_cb>:
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
  4053f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    trans_t * tr = a->var;
  4053fc:	6804      	ldr	r4, [r0, #0]
    lv_obj_t * obj = tr->obj;
  4053fe:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
  405400:	f8b4 9004 	ldrh.w	r9, [r4, #4]
    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405404:	482b      	ldr	r0, [pc, #172]	; (4054b4 <trans_anim_ready_cb+0xbc>)
  405406:	4b2c      	ldr	r3, [pc, #176]	; (4054b8 <trans_anim_ready_cb+0xc0>)
  405408:	4798      	blx	r3
  40540a:	2800      	cmp	r0, #0
  40540c:	d049      	beq.n	4054a2 <trans_anim_ready_cb+0xaa>
  40540e:	4601      	mov	r1, r0
  405410:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4054b4 <trans_anim_ready_cb+0xbc>
  405414:	4f29      	ldr	r7, [pc, #164]	; (4054bc <trans_anim_ready_cb+0xc4>)
  405416:	e004      	b.n	405422 <trans_anim_ready_cb+0x2a>
  405418:	4640      	mov	r0, r8
  40541a:	47b8      	blx	r7
  40541c:	4601      	mov	r1, r0
  40541e:	2800      	cmp	r0, #0
  405420:	d03f      	beq.n	4054a2 <trans_anim_ready_cb+0xaa>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
  405422:	428c      	cmp	r4, r1
  405424:	d0f8      	beq.n	405418 <trans_anim_ready_cb+0x20>
  405426:	680a      	ldr	r2, [r1, #0]
  405428:	6823      	ldr	r3, [r4, #0]
  40542a:	429a      	cmp	r2, r3
  40542c:	d1f4      	bne.n	405418 <trans_anim_ready_cb+0x20>
  40542e:	688a      	ldr	r2, [r1, #8]
  405430:	68a3      	ldr	r3, [r4, #8]
  405432:	429a      	cmp	r2, r3
  405434:	d1f0      	bne.n	405418 <trans_anim_ready_cb+0x20>
  405436:	888a      	ldrh	r2, [r1, #4]
  405438:	88a3      	ldrh	r3, [r4, #4]
  40543a:	429a      	cmp	r2, r3
  40543c:	d1ec      	bne.n	405418 <trans_anim_ready_cb+0x20>
  40543e:	e02c      	b.n	40549a <trans_anim_ready_cb+0xa2>

                _lv_obj_style_t * obj_style = &obj->styles[i];
                lv_style_remove_prop(obj_style->style, prop);

                if(lv_style_is_empty(obj->styles[i].style)) {
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
  405440:	f8d8 2004 	ldr.w	r2, [r8, #4]
  405444:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  405448:	59e1      	ldr	r1, [r4, r7]
  40544a:	4628      	mov	r0, r5
  40544c:	4b1c      	ldr	r3, [pc, #112]	; (4054c0 <trans_anim_ready_cb+0xc8>)
  40544e:	4798      	blx	r3
  405450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < obj->style_cnt; i++) {
  405454:	3301      	adds	r3, #1
  405456:	3208      	adds	r2, #8
  405458:	4283      	cmp	r3, r0
  40545a:	d020      	beq.n	40549e <trans_anim_ready_cb+0xa6>
  40545c:	00df      	lsls	r7, r3, #3
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
  40545e:	79d1      	ldrb	r1, [r2, #7]
  405460:	f011 0f02 	tst.w	r1, #2
  405464:	d0f6      	beq.n	405454 <trans_anim_ready_cb+0x5c>
  405466:	6851      	ldr	r1, [r2, #4]
  405468:	f3c1 0117 	ubfx	r1, r1, #0, #24
  40546c:	68a6      	ldr	r6, [r4, #8]
  40546e:	42b1      	cmp	r1, r6
  405470:	d1f0      	bne.n	405454 <trans_anim_ready_cb+0x5c>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405472:	4621      	mov	r1, r4
  405474:	480f      	ldr	r0, [pc, #60]	; (4054b4 <trans_anim_ready_cb+0xbc>)
  405476:	4b13      	ldr	r3, [pc, #76]	; (4054c4 <trans_anim_ready_cb+0xcc>)
  405478:	4798      	blx	r3
                lv_mem_free(tr);
  40547a:	4620      	mov	r0, r4
  40547c:	4b12      	ldr	r3, [pc, #72]	; (4054c8 <trans_anim_ready_cb+0xd0>)
  40547e:	4798      	blx	r3
                _lv_obj_style_t * obj_style = &obj->styles[i];
  405480:	68ec      	ldr	r4, [r5, #12]
  405482:	eb04 0807 	add.w	r8, r4, r7
                lv_style_remove_prop(obj_style->style, prop);
  405486:	4649      	mov	r1, r9
  405488:	59e0      	ldr	r0, [r4, r7]
  40548a:	4b10      	ldr	r3, [pc, #64]	; (4054cc <trans_anim_ready_cb+0xd4>)
  40548c:	4798      	blx	r3
                if(lv_style_is_empty(obj->styles[i].style)) {
  40548e:	68eb      	ldr	r3, [r5, #12]
  405490:	59d8      	ldr	r0, [r3, r7]
  405492:	4b0f      	ldr	r3, [pc, #60]	; (4054d0 <trans_anim_ready_cb+0xd8>)
  405494:	4798      	blx	r3
  405496:	2800      	cmp	r0, #0
  405498:	d1d2      	bne.n	405440 <trans_anim_ready_cb+0x48>
  40549a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40549e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < obj->style_cnt; i++) {
  4054a2:	f8b5 e022 	ldrh.w	lr, [r5, #34]	; 0x22
  4054a6:	f3ce 00c5 	ubfx	r0, lr, #3, #6
  4054aa:	2800      	cmp	r0, #0
  4054ac:	d0f5      	beq.n	40549a <trans_anim_ready_cb+0xa2>
  4054ae:	68ea      	ldr	r2, [r5, #12]
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
  4054b0:	2300      	movs	r3, #0
  4054b2:	e7d3      	b.n	40545c <trans_anim_ready_cb+0x64>
  4054b4:	20439e84 	.word	0x20439e84
  4054b8:	00410ea1 	.word	0x00410ea1
  4054bc:	00410eb5 	.word	0x00410eb5
  4054c0:	004052c5 	.word	0x004052c5
  4054c4:	00410e39 	.word	0x00410e39
  4054c8:	004110e1 	.word	0x004110e1
  4054cc:	00412241 	.word	0x00412241
  4054d0:	004124cd 	.word	0x004124cd

004054d4 <trans_anim_cb>:
{
  4054d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4054d8:	b082      	sub	sp, #8
    lv_obj_t * obj = tr->obj;
  4054da:	6806      	ldr	r6, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
  4054dc:	8c77      	ldrh	r7, [r6, #34]	; 0x22
  4054de:	f3c7 07c5 	ubfx	r7, r7, #3, #6
  4054e2:	2f00      	cmp	r7, #0
  4054e4:	d06a      	beq.n	4055bc <trans_anim_cb+0xe8>
  4054e6:	468e      	mov	lr, r1
  4054e8:	2200      	movs	r2, #0
  4054ea:	e002      	b.n	4054f2 <trans_anim_cb+0x1e>
  4054ec:	3201      	adds	r2, #1
  4054ee:	42ba      	cmp	r2, r7
  4054f0:	d064      	beq.n	4055bc <trans_anim_cb+0xe8>
  4054f2:	00d5      	lsls	r5, r2, #3
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
  4054f4:	68f3      	ldr	r3, [r6, #12]
  4054f6:	442b      	add	r3, r5
  4054f8:	79dc      	ldrb	r4, [r3, #7]
  4054fa:	f014 0f02 	tst.w	r4, #2
  4054fe:	d0f5      	beq.n	4054ec <trans_anim_cb+0x18>
  405500:	685c      	ldr	r4, [r3, #4]
  405502:	f3c4 0417 	ubfx	r4, r4, #0, #24
  405506:	6881      	ldr	r1, [r0, #8]
  405508:	428c      	cmp	r4, r1
  40550a:	d1ef      	bne.n	4054ec <trans_anim_cb+0x18>
        switch(tr->prop) {
  40550c:	8884      	ldrh	r4, [r0, #4]
  40550e:	2c44      	cmp	r4, #68	; 0x44
  405510:	d019      	beq.n	405546 <trans_anim_cb+0x72>
  405512:	d910      	bls.n	405536 <trans_anim_cb+0x62>
  405514:	2c67      	cmp	r4, #103	; 0x67
  405516:	d054      	beq.n	4055c2 <trans_anim_cb+0xee>
  405518:	d823      	bhi.n	405562 <trans_anim_cb+0x8e>
  40551a:	2c47      	cmp	r4, #71	; 0x47
  40551c:	d013      	beq.n	405546 <trans_anim_cb+0x72>
  40551e:	2c63      	cmp	r4, #99	; 0x63
  405520:	d129      	bne.n	405576 <trans_anim_cb+0xa2>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
  405522:	68c7      	ldr	r7, [r0, #12]
  405524:	2f00      	cmp	r7, #0
  405526:	d052      	beq.n	4055ce <trans_anim_cb+0xfa>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
  405528:	6902      	ldr	r2, [r0, #16]
  40552a:	b372      	cbz	r2, 40558a <trans_anim_cb+0xb6>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
  40552c:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
  405530:	bfc8      	it	gt
  405532:	4617      	movgt	r7, r2
  405534:	e029      	b.n	40558a <trans_anim_cb+0xb6>
        switch(tr->prop) {
  405536:	2c34      	cmp	r4, #52	; 0x34
  405538:	d810      	bhi.n	40555c <trans_anim_cb+0x88>
  40553a:	2c33      	cmp	r4, #51	; 0x33
  40553c:	d220      	bcs.n	405580 <trans_anim_cb+0xac>
  40553e:	2c20      	cmp	r4, #32
  405540:	d001      	beq.n	405546 <trans_anim_cb+0x72>
  405542:	2c30      	cmp	r4, #48	; 0x30
  405544:	d117      	bne.n	405576 <trans_anim_cb+0xa2>
                if(v <= 0) value_final.color = tr->start_value.color;
  405546:	f1be 0f00 	cmp.w	lr, #0
  40554a:	dd42      	ble.n	4055d2 <trans_anim_cb+0xfe>
                else if(v >= 255) value_final.color = tr->end_value.color;
  40554c:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
  405550:	dd44      	ble.n	4055dc <trans_anim_cb+0x108>
  405552:	8a02      	ldrh	r2, [r0, #16]
  405554:	2700      	movs	r7, #0
  405556:	f362 070f 	bfi	r7, r2, #0, #16
  40555a:	e016      	b.n	40558a <trans_anim_cb+0xb6>
        switch(tr->prop) {
  40555c:	2c3b      	cmp	r4, #59	; 0x3b
  40555e:	d10a      	bne.n	405576 <trans_anim_cb+0xa2>
  405560:	e7f1      	b.n	405546 <trans_anim_cb+0x72>
  405562:	f240 4257 	movw	r2, #1111	; 0x457
  405566:	4294      	cmp	r4, r2
  405568:	d0ed      	beq.n	405546 <trans_anim_cb+0x72>
  40556a:	f241 4259 	movw	r2, #5209	; 0x1459
  40556e:	4294      	cmp	r4, r2
  405570:	d027      	beq.n	4055c2 <trans_anim_cb+0xee>
  405572:	2c68      	cmp	r4, #104	; 0x68
  405574:	d004      	beq.n	405580 <trans_anim_cb+0xac>
                if(v == 0) value_final.num = tr->start_value.num;
  405576:	f1be 0f00 	cmp.w	lr, #0
  40557a:	d17a      	bne.n	405672 <trans_anim_cb+0x19e>
  40557c:	68c7      	ldr	r7, [r0, #12]
  40557e:	e004      	b.n	40558a <trans_anim_cb+0xb6>
                if(v < 255) value_final.num = tr->start_value.num;
  405580:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
  405584:	bfd4      	ite	le
  405586:	68c7      	ldrle	r7, [r0, #12]
                else value_final.num = tr->end_value.num;
  405588:	6907      	ldrgt	r7, [r0, #16]
  40558a:	4680      	mov	r8, r0
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
  40558c:	aa01      	add	r2, sp, #4
  40558e:	4621      	mov	r1, r4
  405590:	6818      	ldr	r0, [r3, #0]
  405592:	4b43      	ldr	r3, [pc, #268]	; (4056a0 <trans_anim_cb+0x1cc>)
  405594:	4798      	blx	r3
  405596:	b110      	cbz	r0, 40559e <trans_anim_cb+0xca>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
  405598:	9c01      	ldr	r4, [sp, #4]
  40559a:	42a7      	cmp	r7, r4
  40559c:	d076      	beq.n	40568c <trans_anim_cb+0x1b8>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
  40559e:	68f3      	ldr	r3, [r6, #12]
  4055a0:	463a      	mov	r2, r7
  4055a2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  4055a6:	5958      	ldr	r0, [r3, r5]
  4055a8:	4b3e      	ldr	r3, [pc, #248]	; (4056a4 <trans_anim_cb+0x1d0>)
  4055aa:	4798      	blx	r3
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
  4055ac:	f8b8 2004 	ldrh.w	r2, [r8, #4]
  4055b0:	f8d8 1008 	ldr.w	r1, [r8, #8]
  4055b4:	f8d8 0000 	ldr.w	r0, [r8]
  4055b8:	4b3b      	ldr	r3, [pc, #236]	; (4056a8 <trans_anim_cb+0x1d4>)
  4055ba:	4798      	blx	r3
}
  4055bc:	b002      	add	sp, #8
  4055be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if(v < 255) value_final.ptr = tr->start_value.ptr;
  4055c2:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
  4055c6:	bfd4      	ite	le
  4055c8:	68c7      	ldrle	r7, [r0, #12]
                else value_final.ptr = tr->end_value.ptr;
  4055ca:	6907      	ldrgt	r7, [r0, #16]
  4055cc:	e7dd      	b.n	40558a <trans_anim_cb+0xb6>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
  4055ce:	6907      	ldr	r7, [r0, #16]
  4055d0:	e7db      	b.n	40558a <trans_anim_cb+0xb6>
                if(v <= 0) value_final.color = tr->start_value.color;
  4055d2:	8982      	ldrh	r2, [r0, #12]
  4055d4:	2700      	movs	r7, #0
  4055d6:	f362 070f 	bfi	r7, r2, #0, #16
  4055da:	e7d6      	b.n	40558a <trans_anim_cb+0xb6>
  4055dc:	fa5f f78e 	uxtb.w	r7, lr
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
    ret.full = (uint16_t)((result >> 16) | result);
#elif LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4055e0:	f1c7 08ff 	rsb	r8, r7, #255	; 0xff
  4055e4:	f890 e010 	ldrb.w	lr, [r0, #16]
  4055e8:	ea4f 02de 	mov.w	r2, lr, lsr #3
  4055ec:	7b01      	ldrb	r1, [r0, #12]
  4055ee:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
  4055f2:	fb08 fc0c 	mul.w	ip, r8, ip
  4055f6:	fb07 c202 	mla	r2, r7, r2, ip
  4055fa:	3280      	adds	r2, #128	; 0x80
  4055fc:	eb02 2c02 	add.w	ip, r2, r2, lsl #8
  405600:	eb02 12cc 	add.w	r2, r2, ip, lsl #7
  405604:	f3c2 5cc4 	ubfx	ip, r2, #23, #5
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  405608:	f00e 0207 	and.w	r2, lr, #7
  40560c:	f890 e011 	ldrb.w	lr, [r0, #17]
  405610:	ea4f 195e 	mov.w	r9, lr, lsr #5
  405614:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
  405618:	f001 0a07 	and.w	sl, r1, #7
  40561c:	f890 900d 	ldrb.w	r9, [r0, #13]
  405620:	ea4f 1159 	mov.w	r1, r9, lsr #5
  405624:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  405628:	fb08 f101 	mul.w	r1, r8, r1
  40562c:	fb07 1202 	mla	r2, r7, r2, r1
  405630:	3280      	adds	r2, #128	; 0x80
  405632:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  405636:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40563a:	f00e 011f 	and.w	r1, lr, #31
  40563e:	f009 091f 	and.w	r9, r9, #31
  405642:	fb08 f809 	mul.w	r8, r8, r9
  405646:	fb07 8101 	mla	r1, r7, r1, r8
  40564a:	3180      	adds	r1, #128	; 0x80
  40564c:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  405650:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  405654:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  405658:	ea4f 6e92 	mov.w	lr, r2, lsr #26
  40565c:	2700      	movs	r7, #0
  40565e:	f36e 0702 	bfi	r7, lr, #0, #3
  405662:	f36c 07c7 	bfi	r7, ip, #3, #5
  405666:	f361 270c 	bfi	r7, r1, #8, #5
  40566a:	0dd2      	lsrs	r2, r2, #23
  40566c:	f362 374f 	bfi	r7, r2, #13, #3
  405670:	e78b      	b.n	40558a <trans_anim_cb+0xb6>
                else if(v == 255) value_final.num = tr->end_value.num;
  405672:	f1be 0fff 	cmp.w	lr, #255	; 0xff
  405676:	d007      	beq.n	405688 <trans_anim_cb+0x1b4>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
  405678:	68c7      	ldr	r7, [r0, #12]
  40567a:	6902      	ldr	r2, [r0, #16]
  40567c:	1bd2      	subs	r2, r2, r7
  40567e:	fb0e f102 	mul.w	r1, lr, r2
  405682:	eb07 2721 	add.w	r7, r7, r1, asr #8
  405686:	e780      	b.n	40558a <trans_anim_cb+0xb6>
                else if(v == 255) value_final.num = tr->end_value.num;
  405688:	6907      	ldr	r7, [r0, #16]
  40568a:	e77e      	b.n	40558a <trans_anim_cb+0xb6>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
  40568c:	68f3      	ldr	r3, [r6, #12]
  40568e:	463a      	mov	r2, r7
  405690:	f8b8 1004 	ldrh.w	r1, [r8, #4]
  405694:	5958      	ldr	r0, [r3, r5]
  405696:	4b03      	ldr	r3, [pc, #12]	; (4056a4 <trans_anim_cb+0x1d0>)
  405698:	4798      	blx	r3
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
  40569a:	42a7      	cmp	r7, r4
  40569c:	d08e      	beq.n	4055bc <trans_anim_cb+0xe8>
  40569e:	e785      	b.n	4055ac <trans_anim_cb+0xd8>
  4056a0:	00412365 	.word	0x00412365
  4056a4:	004124e5 	.word	0x004124e5
  4056a8:	00405101 	.word	0x00405101

004056ac <trans_anim_start_cb>:
{
  4056ac:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
  4056ae:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
  4056b0:	68a5      	ldr	r5, [r4, #8]
  4056b2:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
  4056b6:	88a2      	ldrh	r2, [r4, #4]
  4056b8:	4629      	mov	r1, r5
  4056ba:	6820      	ldr	r0, [r4, #0]
  4056bc:	4b0b      	ldr	r3, [pc, #44]	; (4056ec <trans_anim_start_cb+0x40>)
  4056be:	4798      	blx	r3
  4056c0:	60e0      	str	r0, [r4, #12]
    lv_style_prop_t prop_tmp = tr->prop;
  4056c2:	88a6      	ldrh	r6, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
  4056c4:	2300      	movs	r3, #0
  4056c6:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
  4056c8:	4623      	mov	r3, r4
  4056ca:	4632      	mov	r2, r6
  4056cc:	4629      	mov	r1, r5
  4056ce:	6820      	ldr	r0, [r4, #0]
  4056d0:	4d07      	ldr	r5, [pc, #28]	; (4056f0 <trans_anim_start_cb+0x44>)
  4056d2:	47a8      	blx	r5
    tr->prop = prop_tmp;
  4056d4:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
  4056d6:	68a1      	ldr	r1, [r4, #8]
  4056d8:	6820      	ldr	r0, [r4, #0]
  4056da:	4b06      	ldr	r3, [pc, #24]	; (4056f4 <trans_anim_start_cb+0x48>)
  4056dc:	4798      	blx	r3
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
  4056de:	68e2      	ldr	r2, [r4, #12]
  4056e0:	88a1      	ldrh	r1, [r4, #4]
  4056e2:	6800      	ldr	r0, [r0, #0]
  4056e4:	4b04      	ldr	r3, [pc, #16]	; (4056f8 <trans_anim_start_cb+0x4c>)
  4056e6:	4798      	blx	r3
  4056e8:	bd70      	pop	{r4, r5, r6, pc}
  4056ea:	bf00      	nop
  4056ec:	00404f1d 	.word	0x00404f1d
  4056f0:	00404d19 	.word	0x00404d19
  4056f4:	00404e49 	.word	0x00404e49
  4056f8:	004124e5 	.word	0x004124e5

004056fc <lv_obj_set_local_style_prop>:
{
  4056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405700:	b085      	sub	sp, #20
  405702:	4604      	mov	r4, r0
  405704:	460e      	mov	r6, r1
  405706:	4693      	mov	fp, r2
  405708:	461d      	mov	r5, r3
    for(i = 0; i < obj->style_cnt; i++) {
  40570a:	f8b0 c022 	ldrh.w	ip, [r0, #34]	; 0x22
  40570e:	f3cc 07c5 	ubfx	r7, ip, #3, #6
  405712:	b197      	cbz	r7, 40573a <lv_obj_set_local_style_prop+0x3e>
  405714:	46be      	mov	lr, r7
  405716:	68c3      	ldr	r3, [r0, #12]
        if(obj->styles[i].is_local &&
  405718:	2200      	movs	r2, #0
  40571a:	e003      	b.n	405724 <lv_obj_set_local_style_prop+0x28>
    for(i = 0; i < obj->style_cnt; i++) {
  40571c:	3201      	adds	r2, #1
  40571e:	3308      	adds	r3, #8
  405720:	4572      	cmp	r2, lr
  405722:	d00a      	beq.n	40573a <lv_obj_set_local_style_prop+0x3e>
        if(obj->styles[i].is_local &&
  405724:	79d9      	ldrb	r1, [r3, #7]
  405726:	f011 0f01 	tst.w	r1, #1
  40572a:	d0f7      	beq.n	40571c <lv_obj_set_local_style_prop+0x20>
           obj->styles[i].selector == selector) {
  40572c:	6859      	ldr	r1, [r3, #4]
  40572e:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
  405732:	428d      	cmp	r5, r1
  405734:	d1f2      	bne.n	40571c <lv_obj_set_local_style_prop+0x20>
            return obj->styles[i].style;
  405736:	6818      	ldr	r0, [r3, #0]
  405738:	e065      	b.n	405806 <lv_obj_set_local_style_prop+0x10a>
    obj->style_cnt++;
  40573a:	1c79      	adds	r1, r7, #1
  40573c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  405740:	8c63      	ldrh	r3, [r4, #34]	; 0x22
  405742:	f361 03c8 	bfi	r3, r1, #3, #6
  405746:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
  405748:	00c9      	lsls	r1, r1, #3
  40574a:	68e0      	ldr	r0, [r4, #12]
  40574c:	4b35      	ldr	r3, [pc, #212]	; (405824 <lv_obj_set_local_style_prop+0x128>)
  40574e:	4798      	blx	r3
  405750:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->styles);
  405752:	b338      	cbz	r0, 4057a4 <lv_obj_set_local_style_prop+0xa8>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
  405754:	f8b4 8022 	ldrh.w	r8, [r4, #34]	; 0x22
  405758:	f3c8 08c5 	ubfx	r8, r8, #3, #6
  40575c:	f1b8 0e01 	subs.w	lr, r8, #1
  405760:	d02e      	beq.n	4057c0 <lv_obj_set_local_style_prop+0xc4>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
  405762:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
  405766:	4472      	add	r2, lr
  405768:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  40576c:	79d1      	ldrb	r1, [r2, #7]
  40576e:	f011 0f03 	tst.w	r1, #3
  405772:	d154      	bne.n	40581e <lv_obj_set_local_style_prop+0x122>
  405774:	f1a8 0702 	sub.w	r7, r8, #2
  405778:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  40577c:	4603      	mov	r3, r0
        obj->styles[i] = obj->styles[i - 1];
  40577e:	4473      	add	r3, lr
  405780:	e892 0003 	ldmia.w	r2, {r0, r1}
  405784:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
  405788:	b1df      	cbz	r7, 4057c2 <lv_obj_set_local_style_prop+0xc6>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
  40578a:	68e3      	ldr	r3, [r4, #12]
  40578c:	f1ae 0210 	sub.w	r2, lr, #16
  405790:	441a      	add	r2, r3
  405792:	1e79      	subs	r1, r7, #1
  405794:	f1ae 0e08 	sub.w	lr, lr, #8
  405798:	79d0      	ldrb	r0, [r2, #7]
  40579a:	f010 0f03 	tst.w	r0, #3
  40579e:	d110      	bne.n	4057c2 <lv_obj_set_local_style_prop+0xc6>
  4057a0:	460f      	mov	r7, r1
  4057a2:	e7ec      	b.n	40577e <lv_obj_set_local_style_prop+0x82>
    LV_ASSERT_MALLOC(obj->styles);
  4057a4:	4b20      	ldr	r3, [pc, #128]	; (405828 <lv_obj_set_local_style_prop+0x12c>)
  4057a6:	9302      	str	r3, [sp, #8]
  4057a8:	4b20      	ldr	r3, [pc, #128]	; (40582c <lv_obj_set_local_style_prop+0x130>)
  4057aa:	9301      	str	r3, [sp, #4]
  4057ac:	4b20      	ldr	r3, [pc, #128]	; (405830 <lv_obj_set_local_style_prop+0x134>)
  4057ae:	9300      	str	r3, [sp, #0]
  4057b0:	4b20      	ldr	r3, [pc, #128]	; (405834 <lv_obj_set_local_style_prop+0x138>)
  4057b2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
  4057b6:	4920      	ldr	r1, [pc, #128]	; (405838 <lv_obj_set_local_style_prop+0x13c>)
  4057b8:	2003      	movs	r0, #3
  4057ba:	4c20      	ldr	r4, [pc, #128]	; (40583c <lv_obj_set_local_style_prop+0x140>)
  4057bc:	47a0      	blx	r4
  4057be:	e7fe      	b.n	4057be <lv_obj_set_local_style_prop+0xc2>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
  4057c0:	4677      	mov	r7, lr
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
  4057c2:	ea4f 09c7 	mov.w	r9, r7, lsl #3
  4057c6:	68e0      	ldr	r0, [r4, #12]
  4057c8:	2108      	movs	r1, #8
  4057ca:	4448      	add	r0, r9
  4057cc:	4b1c      	ldr	r3, [pc, #112]	; (405840 <lv_obj_set_local_style_prop+0x144>)
  4057ce:	4798      	blx	r3
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
  4057d0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  4057d4:	2008      	movs	r0, #8
  4057d6:	4b1b      	ldr	r3, [pc, #108]	; (405844 <lv_obj_set_local_style_prop+0x148>)
  4057d8:	4798      	blx	r3
  4057da:	f84a 0037 	str.w	r0, [sl, r7, lsl #3]
    lv_style_init(obj->styles[i].style);
  4057de:	68e3      	ldr	r3, [r4, #12]
  4057e0:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
  4057e4:	4b18      	ldr	r3, [pc, #96]	; (405848 <lv_obj_set_local_style_prop+0x14c>)
  4057e6:	4798      	blx	r3
    obj->styles[i].is_local = 1;
  4057e8:	68e3      	ldr	r3, [r4, #12]
  4057ea:	444b      	add	r3, r9
  4057ec:	79da      	ldrb	r2, [r3, #7]
  4057ee:	f042 0201 	orr.w	r2, r2, #1
  4057f2:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
  4057f4:	68e3      	ldr	r3, [r4, #12]
  4057f6:	444b      	add	r3, r9
  4057f8:	685a      	ldr	r2, [r3, #4]
  4057fa:	f365 0217 	bfi	r2, r5, #0, #24
  4057fe:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
  405800:	68e3      	ldr	r3, [r4, #12]
  405802:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    lv_style_set_prop(style, prop, value);
  405806:	465a      	mov	r2, fp
  405808:	4631      	mov	r1, r6
  40580a:	4b10      	ldr	r3, [pc, #64]	; (40584c <lv_obj_set_local_style_prop+0x150>)
  40580c:	4798      	blx	r3
    lv_obj_refresh_style(obj, selector, prop);
  40580e:	4632      	mov	r2, r6
  405810:	4629      	mov	r1, r5
  405812:	4620      	mov	r0, r4
  405814:	4b0e      	ldr	r3, [pc, #56]	; (405850 <lv_obj_set_local_style_prop+0x154>)
  405816:	4798      	blx	r3
}
  405818:	b005      	add	sp, #20
  40581a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
  40581e:	4677      	mov	r7, lr
  405820:	e7cf      	b.n	4057c2 <lv_obj_set_local_style_prop+0xc6>
  405822:	bf00      	nop
  405824:	0041153d 	.word	0x0041153d
  405828:	0041c064 	.word	0x0041c064
  40582c:	0041c30c 	.word	0x0041c30c
  405830:	0041c098 	.word	0x0041c098
  405834:	0041c2c8 	.word	0x0041c2c8
  405838:	0041c2d8 	.word	0x0041c2d8
  40583c:	00410edd 	.word	0x00410edd
  405840:	004116ed 	.word	0x004116ed
  405844:	004114b5 	.word	0x004114b5
  405848:	004121d1 	.word	0x004121d1
  40584c:	004124e5 	.word	0x004124e5
  405850:	00405101 	.word	0x00405101

00405854 <lv_obj_get_local_style_prop>:
{
  405854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
  405856:	8c46      	ldrh	r6, [r0, #34]	; 0x22
  405858:	f3c6 06c5 	ubfx	r6, r6, #3, #6
  40585c:	b1ae      	cbz	r6, 40588a <lv_obj_get_local_style_prop+0x36>
  40585e:	68c0      	ldr	r0, [r0, #12]
        if(obj->styles[i].is_local &&
  405860:	2400      	movs	r4, #0
  405862:	e003      	b.n	40586c <lv_obj_get_local_style_prop+0x18>
    for(i = 0; i < obj->style_cnt; i++) {
  405864:	3401      	adds	r4, #1
  405866:	3008      	adds	r0, #8
  405868:	42b4      	cmp	r4, r6
  40586a:	d00c      	beq.n	405886 <lv_obj_get_local_style_prop+0x32>
        if(obj->styles[i].is_local &&
  40586c:	79c5      	ldrb	r5, [r0, #7]
  40586e:	f015 0f01 	tst.w	r5, #1
  405872:	d0f7      	beq.n	405864 <lv_obj_get_local_style_prop+0x10>
           obj->styles[i].selector ==  selector) {
  405874:	6845      	ldr	r5, [r0, #4]
  405876:	f3c5 0517 	ubfx	r5, r5, #0, #24
        if(obj->styles[i].is_local &&
  40587a:	429d      	cmp	r5, r3
  40587c:	d1f2      	bne.n	405864 <lv_obj_get_local_style_prop+0x10>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
  40587e:	6800      	ldr	r0, [r0, #0]
  405880:	4b03      	ldr	r3, [pc, #12]	; (405890 <lv_obj_get_local_style_prop+0x3c>)
  405882:	4798      	blx	r3
  405884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_RES_INV;
  405886:	2000      	movs	r0, #0
  405888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40588a:	2000      	movs	r0, #0
}
  40588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40588e:	bf00      	nop
  405890:	00412365 	.word	0x00412365

00405894 <_lv_obj_style_create_transition>:
{
  405894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405898:	b096      	sub	sp, #88	; 0x58
  40589a:	4604      	mov	r4, r0
  40589c:	460f      	mov	r7, r1
  40589e:	4690      	mov	r8, r2
  4058a0:	461e      	mov	r6, r3
  4058a2:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    obj->skip_trans = 1;
  4058a4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  4058a8:	f043 0304 	orr.w	r3, r3, #4
  4058ac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    obj->state = prev_state;
  4058b0:	8402      	strh	r2, [r0, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
  4058b2:	892a      	ldrh	r2, [r5, #8]
  4058b4:	f8df 9144 	ldr.w	r9, [pc, #324]	; 4059fc <_lv_obj_style_create_transition+0x168>
  4058b8:	47c8      	blx	r9
  4058ba:	4682      	mov	sl, r0
    obj->state = new_state;
  4058bc:	8426      	strh	r6, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
  4058be:	892a      	ldrh	r2, [r5, #8]
  4058c0:	4639      	mov	r1, r7
  4058c2:	4620      	mov	r0, r4
  4058c4:	47c8      	blx	r9
    obj->skip_trans = 0;
  4058c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  4058ca:	f36f 0382 	bfc	r3, #2, #1
  4058ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
  4058d2:	4550      	cmp	r0, sl
  4058d4:	d044      	beq.n	405960 <_lv_obj_style_create_transition+0xcc>
  4058d6:	4681      	mov	r9, r0
    obj->state = prev_state;
  4058d8:	f8a4 8020 	strh.w	r8, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
  4058dc:	892a      	ldrh	r2, [r5, #8]
  4058de:	4639      	mov	r1, r7
  4058e0:	4620      	mov	r0, r4
  4058e2:	4b46      	ldr	r3, [pc, #280]	; (4059fc <_lv_obj_style_create_transition+0x168>)
  4058e4:	4798      	blx	r3
  4058e6:	4680      	mov	r8, r0
    obj->state = new_state;
  4058e8:	8426      	strh	r6, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
  4058ea:	4639      	mov	r1, r7
  4058ec:	4620      	mov	r0, r4
  4058ee:	4b44      	ldr	r3, [pc, #272]	; (405a00 <_lv_obj_style_create_transition+0x16c>)
  4058f0:	4798      	blx	r3
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
  4058f2:	4642      	mov	r2, r8
  4058f4:	8929      	ldrh	r1, [r5, #8]
  4058f6:	6800      	ldr	r0, [r0, #0]
  4058f8:	4b42      	ldr	r3, [pc, #264]	; (405a04 <_lv_obj_style_create_transition+0x170>)
  4058fa:	4798      	blx	r3
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
  4058fc:	892b      	ldrh	r3, [r5, #8]
  4058fe:	2b60      	cmp	r3, #96	; 0x60
  405900:	d031      	beq.n	405966 <_lv_obj_style_create_transition+0xd2>
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  405902:	4841      	ldr	r0, [pc, #260]	; (405a08 <_lv_obj_style_create_transition+0x174>)
  405904:	4b41      	ldr	r3, [pc, #260]	; (405a0c <_lv_obj_style_create_transition+0x178>)
  405906:	4798      	blx	r3
    LV_ASSERT_MALLOC(tr);
  405908:	4606      	mov	r6, r0
  40590a:	2800      	cmp	r0, #0
  40590c:	d04a      	beq.n	4059a4 <_lv_obj_style_create_transition+0x110>
    tr->start_value = v1;
  40590e:	f8c0 800c 	str.w	r8, [r0, #12]
    tr->end_value = v2;
  405912:	f8c0 9010 	str.w	r9, [r0, #16]
        tr->obj = obj;
  405916:	6004      	str	r4, [r0, #0]
        tr->prop = tr_dsc->prop;
  405918:	892b      	ldrh	r3, [r5, #8]
  40591a:	8083      	strh	r3, [r0, #4]
        tr->selector = part;
  40591c:	6087      	str	r7, [r0, #8]
        lv_anim_init(&a);
  40591e:	a805      	add	r0, sp, #20
  405920:	4b3b      	ldr	r3, [pc, #236]	; (405a10 <_lv_obj_style_create_transition+0x17c>)
  405922:	4798      	blx	r3
    a->var = var;
  405924:	9605      	str	r6, [sp, #20]
    a->exec_cb = exec_cb;
  405926:	4b3b      	ldr	r3, [pc, #236]	; (405a14 <_lv_obj_style_create_transition+0x180>)
  405928:	9306      	str	r3, [sp, #24]
    a->start_cb = start_cb;
  40592a:	4b3b      	ldr	r3, [pc, #236]	; (405a18 <_lv_obj_style_create_transition+0x184>)
  40592c:	9307      	str	r3, [sp, #28]
    a->ready_cb = ready_cb;
  40592e:	4b3b      	ldr	r3, [pc, #236]	; (405a1c <_lv_obj_style_create_transition+0x188>)
  405930:	9308      	str	r3, [sp, #32]
    a->start_value = start;
  405932:	2300      	movs	r3, #0
  405934:	930c      	str	r3, [sp, #48]	; 0x30
    a->current_value = start;
  405936:	930d      	str	r3, [sp, #52]	; 0x34
    a->end_value = end;
  405938:	22ff      	movs	r2, #255	; 0xff
  40593a:	920e      	str	r2, [sp, #56]	; 0x38
    a->time = duration;
  40593c:	882a      	ldrh	r2, [r5, #0]
  40593e:	920f      	str	r2, [sp, #60]	; 0x3c
    a->act_time = -(int32_t)(delay);
  405940:	886a      	ldrh	r2, [r5, #2]
  405942:	4252      	negs	r2, r2
  405944:	9210      	str	r2, [sp, #64]	; 0x40
    a->path_cb = path_cb;
  405946:	68ea      	ldr	r2, [r5, #12]
  405948:	920b      	str	r2, [sp, #44]	; 0x2c
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
  40594a:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  40594e:	f363 0200 	bfi	r2, r3, #0, #1
  405952:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
        a.user_data = tr_dsc->user_data;
  405956:	692b      	ldr	r3, [r5, #16]
  405958:	930a      	str	r3, [sp, #40]	; 0x28
        lv_anim_start(&a);
  40595a:	a805      	add	r0, sp, #20
  40595c:	4b30      	ldr	r3, [pc, #192]	; (405a20 <_lv_obj_style_create_transition+0x18c>)
  40595e:	4798      	blx	r3
}
  405960:	b016      	add	sp, #88	; 0x58
  405962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
  405966:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40596a:	4598      	cmp	r8, r3
  40596c:	d028      	beq.n	4059c0 <_lv_obj_style_create_transition+0x12c>
  40596e:	4599      	cmp	r9, r3
  405970:	d1c7      	bne.n	405902 <_lv_obj_style_create_transition+0x6e>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  405972:	4620      	mov	r0, r4
  405974:	4b2b      	ldr	r3, [pc, #172]	; (405a24 <_lv_obj_style_create_transition+0x190>)
  405976:	4798      	blx	r3
  405978:	4606      	mov	r6, r0
  40597a:	2800      	cmp	r0, #0
  40597c:	bfb8      	it	lt
  40597e:	1c46      	addlt	r6, r0, #1
  405980:	f346 064f 	sbfx	r6, r6, #1, #16
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  405984:	4620      	mov	r0, r4
  405986:	4b27      	ldr	r3, [pc, #156]	; (405a24 <_lv_obj_style_create_transition+0x190>)
  405988:	4798      	blx	r3
  40598a:	4603      	mov	r3, r0
  40598c:	2800      	cmp	r0, #0
  40598e:	bfb8      	it	lt
  405990:	1c43      	addlt	r3, r0, #1
  405992:	f343 034f 	sbfx	r3, r3, #1, #16
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
  405996:	3301      	adds	r3, #1
  405998:	3601      	adds	r6, #1
  40599a:	42b3      	cmp	r3, r6
  40599c:	bfa8      	it	ge
  40599e:	4633      	movge	r3, r6
  4059a0:	4699      	mov	r9, r3
  4059a2:	e7ae      	b.n	405902 <_lv_obj_style_create_transition+0x6e>
    LV_ASSERT_MALLOC(tr);
  4059a4:	4b20      	ldr	r3, [pc, #128]	; (405a28 <_lv_obj_style_create_transition+0x194>)
  4059a6:	9302      	str	r3, [sp, #8]
  4059a8:	4b20      	ldr	r3, [pc, #128]	; (405a2c <_lv_obj_style_create_transition+0x198>)
  4059aa:	9301      	str	r3, [sp, #4]
  4059ac:	4b20      	ldr	r3, [pc, #128]	; (405a30 <_lv_obj_style_create_transition+0x19c>)
  4059ae:	9300      	str	r3, [sp, #0]
  4059b0:	4b20      	ldr	r3, [pc, #128]	; (405a34 <_lv_obj_style_create_transition+0x1a0>)
  4059b2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
  4059b6:	4920      	ldr	r1, [pc, #128]	; (405a38 <_lv_obj_style_create_transition+0x1a4>)
  4059b8:	2003      	movs	r0, #3
  4059ba:	4c20      	ldr	r4, [pc, #128]	; (405a3c <_lv_obj_style_create_transition+0x1a8>)
  4059bc:	47a0      	blx	r4
  4059be:	e7fe      	b.n	4059be <_lv_obj_style_create_transition+0x12a>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  4059c0:	4620      	mov	r0, r4
  4059c2:	4b18      	ldr	r3, [pc, #96]	; (405a24 <_lv_obj_style_create_transition+0x190>)
  4059c4:	4798      	blx	r3
  4059c6:	4606      	mov	r6, r0
  4059c8:	2800      	cmp	r0, #0
  4059ca:	bfb8      	it	lt
  4059cc:	1c46      	addlt	r6, r0, #1
  4059ce:	f346 064f 	sbfx	r6, r6, #1, #16
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  4059d2:	4620      	mov	r0, r4
  4059d4:	4b13      	ldr	r3, [pc, #76]	; (405a24 <_lv_obj_style_create_transition+0x190>)
  4059d6:	4798      	blx	r3
  4059d8:	4603      	mov	r3, r0
  4059da:	2800      	cmp	r0, #0
  4059dc:	bfb8      	it	lt
  4059de:	1c43      	addlt	r3, r0, #1
  4059e0:	f343 034f 	sbfx	r3, r3, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
  4059e4:	f103 0801 	add.w	r8, r3, #1
  4059e8:	1c72      	adds	r2, r6, #1
  4059ea:	4590      	cmp	r8, r2
  4059ec:	bfa8      	it	ge
  4059ee:	4690      	movge	r8, r2
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
  4059f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4059f4:	4591      	cmp	r9, r2
  4059f6:	d184      	bne.n	405902 <_lv_obj_style_create_transition+0x6e>
  4059f8:	e7cd      	b.n	405996 <_lv_obj_style_create_transition+0x102>
  4059fa:	bf00      	nop
  4059fc:	00404f1d 	.word	0x00404f1d
  405a00:	00404e49 	.word	0x00404e49
  405a04:	004124e5 	.word	0x004124e5
  405a08:	20439e84 	.word	0x20439e84
  405a0c:	00410da1 	.word	0x00410da1
  405a10:	004104d9 	.word	0x004104d9
  405a14:	004054d5 	.word	0x004054d5
  405a18:	004056ad 	.word	0x004056ad
  405a1c:	004053f9 	.word	0x004053f9
  405a20:	0041059d 	.word	0x0041059d
  405a24:	004022d3 	.word	0x004022d3
  405a28:	0041c064 	.word	0x0041c064
  405a2c:	0041c194 	.word	0x0041c194
  405a30:	0041c098 	.word	0x0041c098
  405a34:	0041c2a8 	.word	0x0041c2a8
  405a38:	0041c2d8 	.word	0x0041c2d8
  405a3c:	00410edd 	.word	0x00410edd

00405a40 <_lv_obj_style_state_compare>:
{
  405a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405a44:	b082      	sub	sp, #8
    for(i = 0; i < obj->style_cnt; i++) {
  405a46:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  405a48:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
  405a4c:	f000 8120 	beq.w	405c90 <_lv_obj_style_state_compare+0x250>
  405a50:	4606      	mov	r6, r0
  405a52:	2400      	movs	r4, #0
  405a54:	46a1      	mov	r9, r4
        bool valid1 = state_act & (~state1) ? false : true;
  405a56:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
  405a5a:	43d7      	mvns	r7, r2
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
  405a5c:	4d8e      	ldr	r5, [pc, #568]	; (405c98 <_lv_obj_style_state_compare+0x258>)
  405a5e:	e018      	b.n	405a92 <_lv_obj_style_state_compare+0x52>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
  405a60:	aa01      	add	r2, sp, #4
  405a62:	f643 010e 	movw	r1, #14350	; 0x380e
  405a66:	4650      	mov	r0, sl
  405a68:	47a8      	blx	r5
            if(layout_diff) {
  405a6a:	2800      	cmp	r0, #0
  405a6c:	f040 8098 	bne.w	405ba0 <_lv_obj_style_state_compare+0x160>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405a70:	aa01      	add	r2, sp, #4
  405a72:	f640 010a 	movw	r1, #2058	; 0x80a
  405a76:	4650      	mov	r0, sl
  405a78:	47a8      	blx	r5
  405a7a:	2800      	cmp	r0, #0
  405a7c:	f000 8096 	beq.w	405bac <_lv_obj_style_state_compare+0x16c>
  405a80:	f04f 0902 	mov.w	r9, #2
    for(i = 0; i < obj->style_cnt; i++) {
  405a84:	3401      	adds	r4, #1
  405a86:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  405a88:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  405a8c:	42a3      	cmp	r3, r4
  405a8e:	f240 8089 	bls.w	405ba4 <_lv_obj_style_state_compare+0x164>
        if(obj->styles[i].is_trans) continue;
  405a92:	00e2      	lsls	r2, r4, #3
  405a94:	68f1      	ldr	r1, [r6, #12]
  405a96:	188b      	adds	r3, r1, r2
  405a98:	79d8      	ldrb	r0, [r3, #7]
  405a9a:	f010 0f02 	tst.w	r0, #2
  405a9e:	d1f1      	bne.n	405a84 <_lv_obj_style_state_compare+0x44>
        bool valid1 = state_act & (~state1) ? false : true;
  405aa0:	8898      	ldrh	r0, [r3, #4]
  405aa2:	ea18 0f00 	tst.w	r8, r0
  405aa6:	bf0c      	ite	eq
  405aa8:	2301      	moveq	r3, #1
  405aaa:	2300      	movne	r3, #0
        bool valid2 = state_act & (~state2) ? false : true;
  405aac:	4207      	tst	r7, r0
        if(valid1 != valid2) {
  405aae:	b2db      	uxtb	r3, r3
  405ab0:	bf0c      	ite	eq
  405ab2:	2001      	moveq	r0, #1
  405ab4:	2000      	movne	r0, #0
  405ab6:	4283      	cmp	r3, r0
  405ab8:	d0e4      	beq.n	405a84 <_lv_obj_style_state_compare+0x44>
            lv_style_t * style = obj->styles[i].style;
  405aba:	f851 a002 	ldr.w	sl, [r1, r2]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
  405abe:	aa01      	add	r2, sp, #4
  405ac0:	f641 0110 	movw	r1, #6160	; 0x1810
  405ac4:	4650      	mov	r0, sl
  405ac6:	47a8      	blx	r5
  405ac8:	2800      	cmp	r0, #0
  405aca:	d169      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
  405acc:	aa01      	add	r2, sp, #4
  405ace:	f641 0111 	movw	r1, #6161	; 0x1811
  405ad2:	4650      	mov	r0, sl
  405ad4:	47a8      	blx	r5
  405ad6:	2800      	cmp	r0, #0
  405ad8:	d162      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
  405ada:	aa01      	add	r2, sp, #4
  405adc:	f641 0112 	movw	r1, #6162	; 0x1812
  405ae0:	4650      	mov	r0, sl
  405ae2:	47a8      	blx	r5
  405ae4:	2800      	cmp	r0, #0
  405ae6:	d15b      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
  405ae8:	aa01      	add	r2, sp, #4
  405aea:	f641 0113 	movw	r1, #6163	; 0x1813
  405aee:	4650      	mov	r0, sl
  405af0:	47a8      	blx	r5
  405af2:	2800      	cmp	r0, #0
  405af4:	d154      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
  405af6:	aa01      	add	r2, sp, #4
  405af8:	f641 0115 	movw	r1, #6165	; 0x1815
  405afc:	4650      	mov	r0, sl
  405afe:	47a8      	blx	r5
  405b00:	2800      	cmp	r0, #0
  405b02:	d14d      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
  405b04:	aa01      	add	r2, sp, #4
  405b06:	f641 0114 	movw	r1, #6164	; 0x1814
  405b0a:	4650      	mov	r0, sl
  405b0c:	47a8      	blx	r5
  405b0e:	2800      	cmp	r0, #0
  405b10:	d146      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
  405b12:	aa01      	add	r2, sp, #4
  405b14:	f241 0169 	movw	r1, #4201	; 0x1069
  405b18:	4650      	mov	r0, sl
  405b1a:	47a8      	blx	r5
  405b1c:	2800      	cmp	r0, #0
  405b1e:	d13f      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
  405b20:	aa01      	add	r2, sp, #4
  405b22:	f243 010c 	movw	r1, #12300	; 0x300c
  405b26:	4650      	mov	r0, sl
  405b28:	47a8      	blx	r5
  405b2a:	2800      	cmp	r0, #0
  405b2c:	d138      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
  405b2e:	aa01      	add	r2, sp, #4
  405b30:	f243 010d 	movw	r1, #12301	; 0x300d
  405b34:	4650      	mov	r0, sl
  405b36:	47a8      	blx	r5
  405b38:	2800      	cmp	r0, #0
  405b3a:	d131      	bne.n	405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
  405b3c:	aa01      	add	r2, sp, #4
  405b3e:	f241 0101 	movw	r1, #4097	; 0x1001
  405b42:	4650      	mov	r0, sl
  405b44:	47a8      	blx	r5
  405b46:	bb58      	cbnz	r0, 405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
  405b48:	aa01      	add	r2, sp, #4
  405b4a:	f241 0104 	movw	r1, #4100	; 0x1004
  405b4e:	4650      	mov	r0, sl
  405b50:	47a8      	blx	r5
  405b52:	bb28      	cbnz	r0, 405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
  405b54:	aa01      	add	r2, sp, #4
  405b56:	f241 0102 	movw	r1, #4098	; 0x1002
  405b5a:	4650      	mov	r0, sl
  405b5c:	47a8      	blx	r5
  405b5e:	b9f8      	cbnz	r0, 405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
  405b60:	aa01      	add	r2, sp, #4
  405b62:	f241 0103 	movw	r1, #4099	; 0x1003
  405b66:	4650      	mov	r0, sl
  405b68:	47a8      	blx	r5
  405b6a:	b9c8      	cbnz	r0, 405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
  405b6c:	aa01      	add	r2, sp, #4
  405b6e:	f241 0105 	movw	r1, #4101	; 0x1005
  405b72:	4650      	mov	r0, sl
  405b74:	47a8      	blx	r5
  405b76:	b998      	cbnz	r0, 405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
  405b78:	aa01      	add	r2, sp, #4
  405b7a:	f241 0106 	movw	r1, #4102	; 0x1006
  405b7e:	4650      	mov	r0, sl
  405b80:	47a8      	blx	r5
  405b82:	b968      	cbnz	r0, 405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
  405b84:	aa01      	add	r2, sp, #4
  405b86:	f241 0132 	movw	r1, #4146	; 0x1032
  405b8a:	4650      	mov	r0, sl
  405b8c:	47a8      	blx	r5
  405b8e:	b938      	cbnz	r0, 405ba0 <_lv_obj_style_state_compare+0x160>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
  405b90:	aa01      	add	r2, sp, #4
  405b92:	f643 010f 	movw	r1, #14351	; 0x380f
  405b96:	4650      	mov	r0, sl
  405b98:	47a8      	blx	r5
  405b9a:	2800      	cmp	r0, #0
  405b9c:	f43f af60 	beq.w	405a60 <_lv_obj_style_state_compare+0x20>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
  405ba0:	f04f 0903 	mov.w	r9, #3
}
  405ba4:	4648      	mov	r0, r9
  405ba6:	b002      	add	sp, #8
  405ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405bac:	aa01      	add	r2, sp, #4
  405bae:	f640 010b 	movw	r1, #2059	; 0x80b
  405bb2:	4650      	mov	r0, sl
  405bb4:	47a8      	blx	r5
  405bb6:	b110      	cbz	r0, 405bbe <_lv_obj_style_state_compare+0x17e>
  405bb8:	f04f 0902 	mov.w	r9, #2
  405bbc:	e762      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405bbe:	aa01      	add	r2, sp, #4
  405bc0:	f643 010f 	movw	r1, #14351	; 0x380f
  405bc4:	4650      	mov	r0, sl
  405bc6:	47a8      	blx	r5
  405bc8:	b110      	cbz	r0, 405bd0 <_lv_obj_style_state_compare+0x190>
  405bca:	f04f 0902 	mov.w	r9, #2
  405bce:	e759      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405bd0:	aa01      	add	r2, sp, #4
  405bd2:	f643 010e 	movw	r1, #14350	; 0x380e
  405bd6:	4650      	mov	r0, sl
  405bd8:	47a8      	blx	r5
  405bda:	b110      	cbz	r0, 405be2 <_lv_obj_style_state_compare+0x1a2>
  405bdc:	f04f 0902 	mov.w	r9, #2
  405be0:	e750      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405be2:	aa01      	add	r2, sp, #4
  405be4:	f640 013c 	movw	r1, #2108	; 0x83c
  405be8:	4650      	mov	r0, sl
  405bea:	47a8      	blx	r5
  405bec:	b110      	cbz	r0, 405bf4 <_lv_obj_style_state_compare+0x1b4>
  405bee:	f04f 0902 	mov.w	r9, #2
  405bf2:	e747      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405bf4:	aa01      	add	r2, sp, #4
  405bf6:	f640 013d 	movw	r1, #2109	; 0x83d
  405bfa:	4650      	mov	r0, sl
  405bfc:	47a8      	blx	r5
  405bfe:	b110      	cbz	r0, 405c06 <_lv_obj_style_state_compare+0x1c6>
  405c00:	f04f 0902 	mov.w	r9, #2
  405c04:	e73e      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c06:	aa01      	add	r2, sp, #4
  405c08:	f640 013a 	movw	r1, #2106	; 0x83a
  405c0c:	4650      	mov	r0, sl
  405c0e:	47a8      	blx	r5
  405c10:	b110      	cbz	r0, 405c18 <_lv_obj_style_state_compare+0x1d8>
  405c12:	f04f 0902 	mov.w	r9, #2
  405c16:	e735      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c18:	aa01      	add	r2, sp, #4
  405c1a:	f44f 6104 	mov.w	r1, #2112	; 0x840
  405c1e:	4650      	mov	r0, sl
  405c20:	47a8      	blx	r5
  405c22:	bb18      	cbnz	r0, 405c6c <_lv_obj_style_state_compare+0x22c>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c24:	aa01      	add	r2, sp, #4
  405c26:	f640 0145 	movw	r1, #2117	; 0x845
  405c2a:	4650      	mov	r0, sl
  405c2c:	47a8      	blx	r5
  405c2e:	bb00      	cbnz	r0, 405c72 <_lv_obj_style_state_compare+0x232>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c30:	aa01      	add	r2, sp, #4
  405c32:	f640 0141 	movw	r1, #2113	; 0x841
  405c36:	4650      	mov	r0, sl
  405c38:	47a8      	blx	r5
  405c3a:	b9e8      	cbnz	r0, 405c78 <_lv_obj_style_state_compare+0x238>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c3c:	aa01      	add	r2, sp, #4
  405c3e:	f640 0142 	movw	r1, #2114	; 0x842
  405c42:	4650      	mov	r0, sl
  405c44:	47a8      	blx	r5
  405c46:	b9d0      	cbnz	r0, 405c7e <_lv_obj_style_state_compare+0x23e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c48:	aa01      	add	r2, sp, #4
  405c4a:	f640 0143 	movw	r1, #2115	; 0x843
  405c4e:	4650      	mov	r0, sl
  405c50:	47a8      	blx	r5
  405c52:	b9b8      	cbnz	r0, 405c84 <_lv_obj_style_state_compare+0x244>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c54:	aa01      	add	r2, sp, #4
  405c56:	f640 0149 	movw	r1, #2121	; 0x849
  405c5a:	4650      	mov	r0, sl
  405c5c:	47a8      	blx	r5
  405c5e:	b9a0      	cbnz	r0, 405c8a <_lv_obj_style_state_compare+0x24a>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
  405c60:	f1b9 0f00 	cmp.w	r9, #0
  405c64:	bf08      	it	eq
  405c66:	f04f 0901 	moveq.w	r9, #1
  405c6a:	e70b      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c6c:	f04f 0902 	mov.w	r9, #2
  405c70:	e708      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c72:	f04f 0902 	mov.w	r9, #2
  405c76:	e705      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c78:	f04f 0902 	mov.w	r9, #2
  405c7c:	e702      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c7e:	f04f 0902 	mov.w	r9, #2
  405c82:	e6ff      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c84:	f04f 0902 	mov.w	r9, #2
  405c88:	e6fc      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
  405c8a:	f04f 0902 	mov.w	r9, #2
  405c8e:	e6f9      	b.n	405a84 <_lv_obj_style_state_compare+0x44>
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
  405c90:	f04f 0900 	mov.w	r9, #0
  405c94:	e786      	b.n	405ba4 <_lv_obj_style_state_compare+0x164>
  405c96:	bf00      	nop
  405c98:	00412365 	.word	0x00412365

00405c9c <lv_obj_style_get_selector_state>:
}
  405c9c:	b280      	uxth	r0, r0
  405c9e:	4770      	bx	lr

00405ca0 <lv_obj_style_get_selector_part>:
}
  405ca0:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
  405ca4:	4770      	bx	lr
	...

00405ca8 <lv_obj_calculate_style_text_align>:
{
  405ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405caa:	4606      	mov	r6, r0
  405cac:	460f      	mov	r7, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
  405cae:	f241 425d 	movw	r2, #5213	; 0x145d
  405cb2:	4d06      	ldr	r5, [pc, #24]	; (405ccc <lv_obj_calculate_style_text_align+0x24>)
  405cb4:	47a8      	blx	r5
    return (lv_text_align_t)v.num;
  405cb6:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  405cb8:	f241 426a 	movw	r2, #5226	; 0x146a
  405cbc:	4639      	mov	r1, r7
  405cbe:	4630      	mov	r0, r6
  405cc0:	47a8      	blx	r5
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
  405cc2:	2c00      	cmp	r4, #0
}
  405cc4:	bf14      	ite	ne
  405cc6:	4620      	movne	r0, r4
  405cc8:	2001      	moveq	r0, #1
  405cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405ccc:	00404f1d 	.word	0x00404f1d

00405cd0 <lv_obj_set_style_width>:
#include "lv_obj.h"
void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
  405cd0:	b510      	push	{r4, lr}
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
  405cd2:	4613      	mov	r3, r2
  405cd4:	460a      	mov	r2, r1
  405cd6:	f241 0101 	movw	r1, #4097	; 0x1001
  405cda:	4c01      	ldr	r4, [pc, #4]	; (405ce0 <lv_obj_set_style_width+0x10>)
  405cdc:	47a0      	blx	r4
  405cde:	bd10      	pop	{r4, pc}
  405ce0:	004056fd 	.word	0x004056fd

00405ce4 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
  405ce4:	b510      	push	{r4, lr}
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
  405ce6:	4613      	mov	r3, r2
  405ce8:	460a      	mov	r2, r1
  405cea:	f241 0104 	movw	r1, #4100	; 0x1004
  405cee:	4c01      	ldr	r4, [pc, #4]	; (405cf4 <lv_obj_set_style_height+0x10>)
  405cf0:	47a0      	blx	r4
  405cf2:	bd10      	pop	{r4, pc}
  405cf4:	004056fd 	.word	0x004056fd

00405cf8 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
  405cf8:	b510      	push	{r4, lr}
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
  405cfa:	4613      	mov	r3, r2
  405cfc:	460a      	mov	r2, r1
  405cfe:	f241 0107 	movw	r1, #4103	; 0x1007
  405d02:	4c01      	ldr	r4, [pc, #4]	; (405d08 <lv_obj_set_style_x+0x10>)
  405d04:	47a0      	blx	r4
  405d06:	bd10      	pop	{r4, pc}
  405d08:	004056fd 	.word	0x004056fd

00405d0c <lv_obj_set_style_y>:
}

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
  405d0c:	b510      	push	{r4, lr}
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
  405d0e:	4613      	mov	r3, r2
  405d10:	460a      	mov	r2, r1
  405d12:	f241 0108 	movw	r1, #4104	; 0x1008
  405d16:	4c01      	ldr	r4, [pc, #4]	; (405d1c <lv_obj_set_style_y+0x10>)
  405d18:	47a0      	blx	r4
  405d1a:	bd10      	pop	{r4, pc}
  405d1c:	004056fd 	.word	0x004056fd

00405d20 <lv_obj_set_style_align>:
}

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
  405d20:	b510      	push	{r4, lr}
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
  405d22:	4613      	mov	r3, r2
  405d24:	460a      	mov	r2, r1
  405d26:	f241 0109 	movw	r1, #4105	; 0x1009
  405d2a:	4c01      	ldr	r4, [pc, #4]	; (405d30 <lv_obj_set_style_align+0x10>)
  405d2c:	47a0      	blx	r4
  405d2e:	bd10      	pop	{r4, pc}
  405d30:	004056fd 	.word	0x004056fd

00405d34 <lv_obj_set_style_text_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_POST, v, selector);
}

void lv_obj_set_style_text_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
  405d34:	b510      	push	{r4, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_COLOR, v, selector);
  405d36:	4613      	mov	r3, r2
  405d38:	b28a      	uxth	r2, r1
  405d3a:	f240 4157 	movw	r1, #1111	; 0x457
  405d3e:	4c01      	ldr	r4, [pc, #4]	; (405d44 <lv_obj_set_style_text_color+0x10>)
  405d40:	47a0      	blx	r4
  405d42:	bd10      	pop	{r4, pc}
  405d44:	004056fd 	.word	0x004056fd

00405d48 <lv_obj_set_style_text_font>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_OPA, v, selector);
}

void lv_obj_set_style_text_font(struct _lv_obj_t * obj, const lv_font_t * value, lv_style_selector_t selector)
{
  405d48:	b510      	push	{r4, lr}
    lv_style_value_t v = {
        .ptr = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_FONT, v, selector);
  405d4a:	4613      	mov	r3, r2
  405d4c:	460a      	mov	r2, r1
  405d4e:	f241 4159 	movw	r1, #5209	; 0x1459
  405d52:	4c01      	ldr	r4, [pc, #4]	; (405d58 <lv_obj_set_style_text_font+0x10>)
  405d54:	47a0      	blx	r4
  405d56:	bd10      	pop	{r4, pc}
  405d58:	004056fd 	.word	0x004056fd

00405d5c <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
  405d5c:	e000      	b.n	405d60 <lv_obj_get_screen+0x4>
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
  405d5e:	4618      	mov	r0, r3
    if(obj == NULL) return NULL;
  405d60:	b110      	cbz	r0, 405d68 <lv_obj_get_screen+0xc>
    return obj->parent;
  405d62:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
  405d64:	2b00      	cmp	r3, #0
  405d66:	d1fa      	bne.n	405d5e <lv_obj_get_screen+0x2>
}
  405d68:	4770      	bx	lr
	...

00405d6c <lv_obj_get_disp>:
{
  405d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  405d6e:	b083      	sub	sp, #12
  405d70:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
  405d72:	6843      	ldr	r3, [r0, #4]
  405d74:	b113      	cbz	r3, 405d7c <lv_obj_get_disp+0x10>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
  405d76:	4b15      	ldr	r3, [pc, #84]	; (405dcc <lv_obj_get_disp+0x60>)
  405d78:	4798      	blx	r3
  405d7a:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
  405d7c:	4814      	ldr	r0, [pc, #80]	; (405dd0 <lv_obj_get_disp+0x64>)
  405d7e:	4b15      	ldr	r3, [pc, #84]	; (405dd4 <lv_obj_get_disp+0x68>)
  405d80:	4798      	blx	r3
  405d82:	4601      	mov	r1, r0
  405d84:	b1b8      	cbz	r0, 405db6 <lv_obj_get_disp+0x4a>
  405d86:	4f12      	ldr	r7, [pc, #72]	; (405dd0 <lv_obj_get_disp+0x64>)
  405d88:	4e13      	ldr	r6, [pc, #76]	; (405dd8 <lv_obj_get_disp+0x6c>)
        for(i = 0; i < d->screen_cnt; i++) {
  405d8a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  405d8c:	b175      	cbz	r5, 405dac <lv_obj_get_disp+0x40>
            if(d->screens[i] == scr) return d;
  405d8e:	68ca      	ldr	r2, [r1, #12]
  405d90:	6813      	ldr	r3, [r2, #0]
  405d92:	429c      	cmp	r4, r3
  405d94:	d007      	beq.n	405da6 <lv_obj_get_disp+0x3a>
  405d96:	2300      	movs	r3, #0
        for(i = 0; i < d->screen_cnt; i++) {
  405d98:	3301      	adds	r3, #1
  405d9a:	42ab      	cmp	r3, r5
  405d9c:	d006      	beq.n	405dac <lv_obj_get_disp+0x40>
            if(d->screens[i] == scr) return d;
  405d9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
  405da2:	4284      	cmp	r4, r0
  405da4:	d1f8      	bne.n	405d98 <lv_obj_get_disp+0x2c>
}
  405da6:	4608      	mov	r0, r1
  405da8:	b003      	add	sp, #12
  405daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
  405dac:	4638      	mov	r0, r7
  405dae:	47b0      	blx	r6
  405db0:	4601      	mov	r1, r0
  405db2:	2800      	cmp	r0, #0
  405db4:	d1e9      	bne.n	405d8a <lv_obj_get_disp+0x1e>
    LV_LOG_WARN("No screen found");
  405db6:	4b09      	ldr	r3, [pc, #36]	; (405ddc <lv_obj_get_disp+0x70>)
  405db8:	9300      	str	r3, [sp, #0]
  405dba:	4b09      	ldr	r3, [pc, #36]	; (405de0 <lv_obj_get_disp+0x74>)
  405dbc:	f240 1227 	movw	r2, #295	; 0x127
  405dc0:	4908      	ldr	r1, [pc, #32]	; (405de4 <lv_obj_get_disp+0x78>)
  405dc2:	2002      	movs	r0, #2
  405dc4:	4c08      	ldr	r4, [pc, #32]	; (405de8 <lv_obj_get_disp+0x7c>)
  405dc6:	47a0      	blx	r4
    return NULL;
  405dc8:	2100      	movs	r1, #0
  405dca:	e7ec      	b.n	405da6 <lv_obj_get_disp+0x3a>
  405dcc:	00405d5d 	.word	0x00405d5d
  405dd0:	20439e78 	.word	0x20439e78
  405dd4:	00410ea1 	.word	0x00410ea1
  405dd8:	00410eb5 	.word	0x00410eb5
  405ddc:	0041c364 	.word	0x0041c364
  405de0:	0041c320 	.word	0x0041c320
  405de4:	0041c330 	.word	0x0041c330
  405de8:	00410edd 	.word	0x00410edd

00405dec <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
  405dec:	b108      	cbz	r0, 405df2 <lv_obj_get_parent+0x6>
    return obj->parent;
  405dee:	6840      	ldr	r0, [r0, #4]
  405df0:	4770      	bx	lr
    if(obj == NULL) return NULL;
  405df2:	2000      	movs	r0, #0
}
  405df4:	4770      	bx	lr

00405df6 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
  405df6:	6883      	ldr	r3, [r0, #8]
  405df8:	b183      	cbz	r3, 405e1c <lv_obj_get_child+0x26>

    uint32_t idu;
    if(id < 0) {
  405dfa:	2900      	cmp	r1, #0
  405dfc:	db07      	blt.n	405e0e <lv_obj_get_child+0x18>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
        idu = (uint32_t) id;
    }
    else {
        idu = id;
  405dfe:	460a      	mov	r2, r1
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
  405e00:	6858      	ldr	r0, [r3, #4]
  405e02:	4282      	cmp	r2, r0
  405e04:	d20c      	bcs.n	405e20 <lv_obj_get_child+0x2a>
    else return obj->spec_attr->children[id];
  405e06:	681b      	ldr	r3, [r3, #0]
  405e08:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  405e0c:	4770      	bx	lr
        id = obj->spec_attr->child_cnt + id;
  405e0e:	685a      	ldr	r2, [r3, #4]
  405e10:	4411      	add	r1, r2
  405e12:	460a      	mov	r2, r1
        if(id < 0) return NULL;
  405e14:	2900      	cmp	r1, #0
  405e16:	daf3      	bge.n	405e00 <lv_obj_get_child+0xa>
  405e18:	2000      	movs	r0, #0
  405e1a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
  405e1c:	2000      	movs	r0, #0
  405e1e:	4770      	bx	lr
    if(idu >= obj->spec_attr->child_cnt) return NULL;
  405e20:	2000      	movs	r0, #0
}
  405e22:	4770      	bx	lr

00405e24 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
  405e24:	6883      	ldr	r3, [r0, #8]
  405e26:	b10b      	cbz	r3, 405e2c <lv_obj_get_child_cnt+0x8>
    return obj->spec_attr->child_cnt;
  405e28:	6858      	ldr	r0, [r3, #4]
  405e2a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
  405e2c:	2000      	movs	r0, #0
}
  405e2e:	4770      	bx	lr

00405e30 <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
  405e30:	4770      	bx	lr
	...

00405e34 <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
  405e34:	b5f0      	push	{r4, r5, r6, r7, lr}
  405e36:	b085      	sub	sp, #20
  405e38:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  405e3a:	4605      	mov	r5, r0
  405e3c:	2800      	cmp	r0, #0
  405e3e:	d048      	beq.n	405ed2 <_lv_inv_area+0x9e>
    if(!disp) return;

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
  405e40:	2c00      	cmp	r4, #0
  405e42:	d04b      	beq.n	405edc <_lv_inv_area+0xa8>
        disp->inv_p = 0;
        return;
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
  405e44:	2300      	movs	r3, #0
  405e46:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  405e4a:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  405e4e:	4628      	mov	r0, r5
  405e50:	4b37      	ldr	r3, [pc, #220]	; (405f30 <_lv_inv_area+0xfc>)
  405e52:	4798      	blx	r3
  405e54:	3801      	subs	r0, #1
  405e56:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  405e5a:	4628      	mov	r0, r5
  405e5c:	4b35      	ldr	r3, [pc, #212]	; (405f34 <_lv_inv_area+0x100>)
  405e5e:	4798      	blx	r3
  405e60:	3801      	subs	r0, #1
  405e62:	f8ad 000e 	strh.w	r0, [sp, #14]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  405e66:	aa02      	add	r2, sp, #8
  405e68:	4621      	mov	r1, r4
  405e6a:	4668      	mov	r0, sp
  405e6c:	4b32      	ldr	r3, [pc, #200]	; (405f38 <_lv_inv_area+0x104>)
  405e6e:	4798      	blx	r3
    if(suc == false)  return; /*Out of the screen*/
  405e70:	2800      	cmp	r0, #0
  405e72:	d036      	beq.n	405ee2 <_lv_inv_area+0xae>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
  405e74:	6828      	ldr	r0, [r5, #0]
  405e76:	7c03      	ldrb	r3, [r0, #16]
  405e78:	f013 0f01 	tst.w	r3, #1
  405e7c:	d133      	bne.n	405ee6 <_lv_inv_area+0xb2>
        disp->inv_p = 1;
        lv_timer_resume(disp->refr_timer);
        return;
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
  405e7e:	6983      	ldr	r3, [r0, #24]
  405e80:	b10b      	cbz	r3, 405e86 <_lv_inv_area+0x52>
  405e82:	4669      	mov	r1, sp
  405e84:	4798      	blx	r3

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
  405e86:	f8b5 3154 	ldrh.w	r3, [r5, #340]	; 0x154
  405e8a:	2b00      	cmp	r3, #0
  405e8c:	d039      	beq.n	405f02 <_lv_inv_area+0xce>
  405e8e:	2400      	movs	r4, #0
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  405e90:	4627      	mov	r7, r4
  405e92:	4e2a      	ldr	r6, [pc, #168]	; (405f3c <_lv_inv_area+0x108>)
  405e94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
  405e98:	463a      	mov	r2, r7
  405e9a:	3134      	adds	r1, #52	; 0x34
  405e9c:	4668      	mov	r0, sp
  405e9e:	47b0      	blx	r6
  405ea0:	b9f8      	cbnz	r0, 405ee2 <_lv_inv_area+0xae>
    for(i = 0; i < disp->inv_p; i++) {
  405ea2:	3401      	adds	r4, #1
  405ea4:	b2a4      	uxth	r4, r4
  405ea6:	f8b5 3154 	ldrh.w	r3, [r5, #340]	; 0x154
  405eaa:	42a3      	cmp	r3, r4
  405eac:	d8f2      	bhi.n	405e94 <_lv_inv_area+0x60>
    }

    /*Save the area*/
    if(disp->inv_p < LV_INV_BUF_SIZE) {
  405eae:	2b1f      	cmp	r3, #31
  405eb0:	d927      	bls.n	405f02 <_lv_inv_area+0xce>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
    }
    else {   /*If no place for the area add the screen*/
        disp->inv_p = 0;
  405eb2:	2300      	movs	r3, #0
  405eb4:	f8a5 3154 	strh.w	r3, [r5, #340]	; 0x154
    dest->x1 = src->x1;
  405eb8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  405ebc:	86ab      	strh	r3, [r5, #52]	; 0x34
    dest->y1 = src->y1;
  405ebe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  405ec2:	86eb      	strh	r3, [r5, #54]	; 0x36
    dest->x2 = src->x2;
  405ec4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405ec8:	872b      	strh	r3, [r5, #56]	; 0x38
    dest->y2 = src->y2;
  405eca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  405ece:	876b      	strh	r3, [r5, #58]	; 0x3a
  405ed0:	e025      	b.n	405f1e <_lv_inv_area+0xea>
    if(!disp) disp = lv_disp_get_default();
  405ed2:	4b1b      	ldr	r3, [pc, #108]	; (405f40 <_lv_inv_area+0x10c>)
  405ed4:	4798      	blx	r3
    if(!disp) return;
  405ed6:	4605      	mov	r5, r0
  405ed8:	b118      	cbz	r0, 405ee2 <_lv_inv_area+0xae>
  405eda:	e7b1      	b.n	405e40 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  405edc:	2300      	movs	r3, #0
  405ede:	f8a5 3154 	strh.w	r3, [r5, #340]	; 0x154
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
    }
    disp->inv_p++;
    lv_timer_resume(disp->refr_timer);
}
  405ee2:	b005      	add	sp, #20
  405ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        disp->inv_areas[0] = scr_area;
  405ee6:	f105 0334 	add.w	r3, r5, #52	; 0x34
  405eea:	aa04      	add	r2, sp, #16
  405eec:	e912 0003 	ldmdb	r2, {r0, r1}
  405ef0:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
  405ef4:	2301      	movs	r3, #1
  405ef6:	f8a5 3154 	strh.w	r3, [r5, #340]	; 0x154
        lv_timer_resume(disp->refr_timer);
  405efa:	6868      	ldr	r0, [r5, #4]
  405efc:	4b11      	ldr	r3, [pc, #68]	; (405f44 <_lv_inv_area+0x110>)
  405efe:	4798      	blx	r3
        return;
  405f00:	e7ef      	b.n	405ee2 <_lv_inv_area+0xae>
  405f02:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    dest->x1 = src->x1;
  405f06:	f8bd 2000 	ldrh.w	r2, [sp]
  405f0a:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y1 = src->y1;
  405f0c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405f10:	86da      	strh	r2, [r3, #54]	; 0x36
    dest->x2 = src->x2;
  405f12:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405f16:	871a      	strh	r2, [r3, #56]	; 0x38
    dest->y2 = src->y2;
  405f18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405f1c:	875a      	strh	r2, [r3, #58]	; 0x3a
    disp->inv_p++;
  405f1e:	f8b5 3154 	ldrh.w	r3, [r5, #340]	; 0x154
  405f22:	3301      	adds	r3, #1
  405f24:	f8a5 3154 	strh.w	r3, [r5, #340]	; 0x154
    lv_timer_resume(disp->refr_timer);
  405f28:	6868      	ldr	r0, [r5, #4]
  405f2a:	4b06      	ldr	r3, [pc, #24]	; (405f44 <_lv_inv_area+0x110>)
  405f2c:	4798      	blx	r3
  405f2e:	e7d8      	b.n	405ee2 <_lv_inv_area+0xae>
  405f30:	0041013d 	.word	0x0041013d
  405f34:	0041016d 	.word	0x0041016d
  405f38:	004107cd 	.word	0x004107cd
  405f3c:	00410991 	.word	0x00410991
  405f40:	00410131 	.word	0x00410131
  405f44:	004128fb 	.word	0x004128fb

00405f48 <_lv_refr_get_disp_refreshing>:
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
    return disp_refr;
}
  405f48:	4b01      	ldr	r3, [pc, #4]	; (405f50 <_lv_refr_get_disp_refreshing+0x8>)
  405f4a:	6818      	ldr	r0, [r3, #0]
  405f4c:	4770      	bx	lr
  405f4e:	bf00      	nop
  405f50:	20400a20 	.word	0x20400a20

00405f54 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
  405f54:	b538      	push	{r3, r4, r5, lr}
  405f56:	4604      	mov	r4, r0
  405f58:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
  405f5a:	6840      	ldr	r0, [r0, #4]
  405f5c:	b108      	cbz	r0, 405f62 <apply_theme+0xe>
  405f5e:	f7ff fff9 	bl	405f54 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
  405f62:	6823      	ldr	r3, [r4, #0]
  405f64:	b113      	cbz	r3, 405f6c <apply_theme+0x18>
  405f66:	4629      	mov	r1, r5
  405f68:	4620      	mov	r0, r4
  405f6a:	4798      	blx	r3
  405f6c:	bd38      	pop	{r3, r4, r5, pc}
	...

00405f70 <lv_theme_get_from_obj>:
{
  405f70:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
  405f72:	b120      	cbz	r0, 405f7e <lv_theme_get_from_obj+0xe>
  405f74:	4b03      	ldr	r3, [pc, #12]	; (405f84 <lv_theme_get_from_obj+0x14>)
  405f76:	4798      	blx	r3
    return lv_disp_get_theme(disp);
  405f78:	4b03      	ldr	r3, [pc, #12]	; (405f88 <lv_theme_get_from_obj+0x18>)
  405f7a:	4798      	blx	r3
}
  405f7c:	bd08      	pop	{r3, pc}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
  405f7e:	4b03      	ldr	r3, [pc, #12]	; (405f8c <lv_theme_get_from_obj+0x1c>)
  405f80:	4798      	blx	r3
  405f82:	e7f9      	b.n	405f78 <lv_theme_get_from_obj+0x8>
  405f84:	00405d6d 	.word	0x00405d6d
  405f88:	004002d5 	.word	0x004002d5
  405f8c:	00410131 	.word	0x00410131

00405f90 <lv_theme_apply>:
{
  405f90:	b538      	push	{r3, r4, r5, lr}
  405f92:	4604      	mov	r4, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
  405f94:	4b06      	ldr	r3, [pc, #24]	; (405fb0 <lv_theme_apply+0x20>)
  405f96:	4798      	blx	r3
    if(th == NULL) return;
  405f98:	b148      	cbz	r0, 405fae <lv_theme_apply+0x1e>
  405f9a:	4605      	mov	r5, r0
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
  405f9c:	4a05      	ldr	r2, [pc, #20]	; (405fb4 <lv_theme_apply+0x24>)
  405f9e:	2100      	movs	r1, #0
  405fa0:	4620      	mov	r0, r4
  405fa2:	4b05      	ldr	r3, [pc, #20]	; (405fb8 <lv_theme_apply+0x28>)
  405fa4:	4798      	blx	r3
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
  405fa6:	4621      	mov	r1, r4
  405fa8:	4628      	mov	r0, r5
  405faa:	4b04      	ldr	r3, [pc, #16]	; (405fbc <lv_theme_apply+0x2c>)
  405fac:	4798      	blx	r3
  405fae:	bd38      	pop	{r3, r4, r5, pc}
  405fb0:	00405f71 	.word	0x00405f71
  405fb4:	000fffff 	.word	0x000fffff
  405fb8:	004052c5 	.word	0x004052c5
  405fbc:	00405f55 	.word	0x00405f55

00405fc0 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
  405fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  405fc2:	f001 0307 	and.w	r3, r1, #7
  405fc6:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  405fca:	f3c1 2604 	ubfx	r6, r1, #8, #5
  405fce:	f3c1 3142 	ubfx	r1, r1, #13, #3

    if(opa <= LV_OPA_MIN) return bg;
  405fd2:	2a02      	cmp	r2, #2
  405fd4:	d94f      	bls.n	406076 <color_blend_true_color_additive+0xb6>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  405fd6:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  405fda:	442c      	add	r4, r5
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MIN(tmp, 31);
  405fdc:	2c1f      	cmp	r4, #31
  405fde:	bf28      	it	cs
  405fe0:	241f      	movcs	r4, #31
  405fe2:	f004 041f 	and.w	r4, r4, #31
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  405fe6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405fea:	f000 0307 	and.w	r3, r0, #7
  405fee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  405ff2:	f3c0 3742 	ubfx	r7, r0, #13, #3
  405ff6:	443b      	add	r3, r7
    tmp = LV_MIN(tmp, 63);
  405ff8:	2b3f      	cmp	r3, #63	; 0x3f
  405ffa:	bf28      	it	cs
  405ffc:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  405ffe:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
    fg.ch.green_l = tmp & 0x7;
  406002:	f003 0307 	and.w	r3, r3, #7
#elif LV_COLOR_DEPTH == 32
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  406006:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40600a:	4430      	add	r0, r6
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MIN(tmp, 31);
  40600c:	281f      	cmp	r0, #31
  40600e:	bf28      	it	cs
  406010:	201f      	movcs	r0, #31
  406012:	f000 071f 	and.w	r7, r0, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  406016:	2aff      	cmp	r2, #255	; 0xff
  406018:	d038      	beq.n	40608c <color_blend_true_color_additive+0xcc>
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
    ret.full = (uint16_t)((result >> 16) | result);
#elif LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40601a:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40601e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  406022:	fb0e f101 	mul.w	r1, lr, r1
  406026:	fb02 1303 	mla	r3, r2, r3, r1
  40602a:	3380      	adds	r3, #128	; 0x80
  40602c:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  406030:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  406034:	0e99      	lsrs	r1, r3, #26
  406036:	f04f 0000 	mov.w	r0, #0
  40603a:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40603e:	fb0e f505 	mul.w	r5, lr, r5
  406042:	fb02 5404 	mla	r4, r2, r4, r5
  406046:	3480      	adds	r4, #128	; 0x80
  406048:	eb04 2504 	add.w	r5, r4, r4, lsl #8
  40604c:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
  406050:	0de4      	lsrs	r4, r4, #23
  406052:	f364 00c7 	bfi	r0, r4, #3, #5
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406056:	fb0e f606 	mul.w	r6, lr, r6
  40605a:	fb02 6207 	mla	r2, r2, r7, r6
  40605e:	3280      	adds	r2, #128	; 0x80
  406060:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  406064:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  406068:	0dd2      	lsrs	r2, r2, #23
  40606a:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40606e:	0ddb      	lsrs	r3, r3, #23
  406070:	f363 304f 	bfi	r0, r3, #13, #3

    return lv_color_mix(fg, bg, opa);
}
  406074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
  406076:	f04f 0000 	mov.w	r0, #0
  40607a:	f363 0002 	bfi	r0, r3, #0, #3
  40607e:	f365 00c7 	bfi	r0, r5, #3, #5
  406082:	f366 200c 	bfi	r0, r6, #8, #5
  406086:	f361 304f 	bfi	r0, r1, #13, #3
  40608a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
  40608c:	f04f 0000 	mov.w	r0, #0
  406090:	f36c 0002 	bfi	r0, ip, #0, #3
  406094:	f364 00c7 	bfi	r0, r4, #3, #5
  406098:	f367 200c 	bfi	r0, r7, #8, #5
  40609c:	f363 304f 	bfi	r0, r3, #13, #3
  4060a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

004060a2 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
  4060a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4060a4:	f001 0307 	and.w	r3, r1, #7
  4060a8:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  4060ac:	f3c1 2604 	ubfx	r6, r1, #8, #5
  4060b0:	f3c1 3142 	ubfx	r1, r1, #13, #3

    if(opa <= LV_OPA_MIN) return bg;
  4060b4:	2a02      	cmp	r2, #2
  4060b6:	d94c      	bls.n	406152 <color_blend_true_color_subtractive+0xb0>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  4060b8:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  4060bc:	1b2c      	subs	r4, r5, r4
    fg.ch.red = LV_MAX(tmp, 0);
  4060be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  4060c2:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  4060c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4060ca:	f000 0307 	and.w	r3, r0, #7
  4060ce:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  4060d2:	f3c0 3742 	ubfx	r7, r0, #13, #3
  4060d6:	443b      	add	r3, r7
    tmp = LV_MAX(tmp, 0);
  4060d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  4060dc:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
    fg.ch.green_l = tmp & 0x7;
  4060e0:	f003 0307 	and.w	r3, r3, #7
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  4060e4:	f3c0 2004 	ubfx	r0, r0, #8, #5
  4060e8:	1a30      	subs	r0, r6, r0
    fg.ch.blue = LV_MAX(tmp, 0);
  4060ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  4060ee:	f000 071f 	and.w	r7, r0, #31

    if(opa == LV_OPA_COVER) return fg;
  4060f2:	2aff      	cmp	r2, #255	; 0xff
  4060f4:	d038      	beq.n	406168 <color_blend_true_color_subtractive+0xc6>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4060f6:	f1c2 0eff 	rsb	lr, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4060fa:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4060fe:	fb0e f101 	mul.w	r1, lr, r1
  406102:	fb02 1303 	mla	r3, r2, r3, r1
  406106:	3380      	adds	r3, #128	; 0x80
  406108:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40610c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  406110:	0e99      	lsrs	r1, r3, #26
  406112:	f04f 0000 	mov.w	r0, #0
  406116:	f361 0002 	bfi	r0, r1, #0, #3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40611a:	fb0e f505 	mul.w	r5, lr, r5
  40611e:	fb02 5404 	mla	r4, r2, r4, r5
  406122:	3480      	adds	r4, #128	; 0x80
  406124:	eb04 2504 	add.w	r5, r4, r4, lsl #8
  406128:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
  40612c:	0de4      	lsrs	r4, r4, #23
  40612e:	f364 00c7 	bfi	r0, r4, #3, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406132:	fb0e f606 	mul.w	r6, lr, r6
  406136:	fb02 6207 	mla	r2, r2, r7, r6
  40613a:	3280      	adds	r2, #128	; 0x80
  40613c:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  406140:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  406144:	0dd2      	lsrs	r2, r2, #23
  406146:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40614a:	0ddb      	lsrs	r3, r3, #23
  40614c:	f363 304f 	bfi	r0, r3, #13, #3

    return lv_color_mix(fg, bg, opa);
}
  406150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
  406152:	f04f 0000 	mov.w	r0, #0
  406156:	f363 0002 	bfi	r0, r3, #0, #3
  40615a:	f365 00c7 	bfi	r0, r5, #3, #5
  40615e:	f366 200c 	bfi	r0, r6, #8, #5
  406162:	f361 304f 	bfi	r0, r1, #13, #3
  406166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
  406168:	f04f 0000 	mov.w	r0, #0
  40616c:	f36c 0002 	bfi	r0, ip, #0, #3
  406170:	f364 00c7 	bfi	r0, r4, #3, #5
  406174:	f367 200c 	bfi	r0, r7, #8, #5
  406178:	f363 304f 	bfi	r0, r3, #13, #3
  40617c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00406180 <_lv_blend_fill>:
{
  406180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406184:	b093      	sub	sp, #76	; 0x4c
  406186:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
  40618a:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
  40618e:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  406192:	b114      	cbz	r4, 40619a <_lv_blend_fill+0x1a>
  406194:	f1bb 0f01 	cmp.w	fp, #1
  406198:	d802      	bhi.n	4061a0 <_lv_blend_fill+0x20>
}
  40619a:	b013      	add	sp, #76	; 0x4c
  40619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061a0:	9306      	str	r3, [sp, #24]
  4061a2:	f8ad 201c 	strh.w	r2, [sp, #28]
  4061a6:	460e      	mov	r6, r1
  4061a8:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  4061aa:	4b9c      	ldr	r3, [pc, #624]	; (40641c <_lv_blend_fill+0x29c>)
  4061ac:	4798      	blx	r3
  4061ae:	4681      	mov	r9, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
  4061b0:	4b9b      	ldr	r3, [pc, #620]	; (406420 <_lv_blend_fill+0x2a0>)
  4061b2:	4798      	blx	r3
  4061b4:	4680      	mov	r8, r0
    lv_color_t * disp_buf = draw_buf->buf_act;
  4061b6:	6883      	ldr	r3, [r0, #8]
  4061b8:	9304      	str	r3, [sp, #16]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
  4061ba:	f8d9 0000 	ldr.w	r0, [r9]
  4061be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4061c0:	b103      	cbz	r3, 4061c4 <_lv_blend_fill+0x44>
  4061c2:	4798      	blx	r3
    if(!_lv_area_intersect(&draw_area, clip_area, fill_area)) return;
  4061c4:	4632      	mov	r2, r6
  4061c6:	4629      	mov	r1, r5
  4061c8:	a810      	add	r0, sp, #64	; 0x40
  4061ca:	4b96      	ldr	r3, [pc, #600]	; (406424 <_lv_blend_fill+0x2a4>)
  4061cc:	4798      	blx	r3
  4061ce:	2800      	cmp	r0, #0
  4061d0:	d0e3      	beq.n	40619a <_lv_blend_fill+0x1a>
    lv_area_move(&draw_area, -disp_area->x1, -disp_area->y1);
  4061d2:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  4061d6:	4252      	negs	r2, r2
  4061d8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  4061dc:	4249      	negs	r1, r1
  4061de:	b212      	sxth	r2, r2
  4061e0:	b209      	sxth	r1, r1
  4061e2:	a810      	add	r0, sp, #64	; 0x40
  4061e4:	4b90      	ldr	r3, [pc, #576]	; (406428 <_lv_blend_fill+0x2a8>)
  4061e6:	4798      	blx	r3
    if(mask && disp->driver->antialiasing == 0 && mask) {
  4061e8:	9a06      	ldr	r2, [sp, #24]
  4061ea:	b1d2      	cbz	r2, 406222 <_lv_blend_fill+0xa2>
  4061ec:	f8d9 3000 	ldr.w	r3, [r9]
  4061f0:	7c1b      	ldrb	r3, [r3, #16]
  4061f2:	f013 0f04 	tst.w	r3, #4
  4061f6:	d114      	bne.n	406222 <_lv_blend_fill+0xa2>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4061f8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  4061fc:	3101      	adds	r1, #1
  4061fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  406202:	1ac9      	subs	r1, r1, r3
  406204:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  406206:	2900      	cmp	r1, #0
  406208:	dd0b      	ble.n	406222 <_lv_blend_fill+0xa2>
  40620a:	4613      	mov	r3, r2
  40620c:	4411      	add	r1, r2
  40620e:	781a      	ldrb	r2, [r3, #0]
  406210:	2a80      	cmp	r2, #128	; 0x80
  406212:	f04f 32ff 	mov.w	r2, #4294967295
  406216:	bf98      	it	ls
  406218:	2200      	movls	r2, #0
  40621a:	f803 2b01 	strb.w	r2, [r3], #1
  40621e:	428b      	cmp	r3, r1
  406220:	d1f5      	bne.n	40620e <_lv_blend_fill+0x8e>
    if(disp->driver->set_px_cb) {
  406222:	f8d9 3000 	ldr.w	r3, [r9]
  406226:	69db      	ldr	r3, [r3, #28]
  406228:	2b00      	cmp	r3, #0
  40622a:	d07e      	beq.n	40632a <_lv_blend_fill+0x1aa>
  40622c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  406230:	4b7a      	ldr	r3, [pc, #488]	; (40641c <_lv_blend_fill+0x29c>)
  406232:	4798      	blx	r3
  406234:	f8b8 3014 	ldrh.w	r3, [r8, #20]
  406238:	3301      	adds	r3, #1
  40623a:	f8b8 2010 	ldrh.w	r2, [r8, #16]
  40623e:	1a9b      	subs	r3, r3, r2
  406240:	b21b      	sxth	r3, r3
  406242:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  406244:	2c01      	cmp	r4, #1
  406246:	d013      	beq.n	406270 <_lv_blend_fill+0xf0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  406248:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
  40624c:	9b06      	ldr	r3, [sp, #24]
  40624e:	1a9b      	subs	r3, r3, r2
  406250:	9306      	str	r3, [sp, #24]
  406252:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  406256:	3301      	adds	r3, #1
  406258:	1a9b      	subs	r3, r3, r2
  40625a:	b21b      	sxth	r3, r3
  40625c:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40625e:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
  406262:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406266:	4599      	cmp	r9, r3
  406268:	dc97      	bgt.n	40619a <_lv_blend_fill+0x1a>
  40626a:	4680      	mov	r8, r0
  40626c:	46ba      	mov	sl, r7
  40626e:	e050      	b.n	406312 <_lv_blend_fill+0x192>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406270:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
  406274:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406278:	454b      	cmp	r3, r9
  40627a:	db8e      	blt.n	40619a <_lv_blend_fill+0x1a>
  40627c:	4680      	mov	r8, r0
  40627e:	f8dd a014 	ldr.w	sl, [sp, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406282:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
  406286:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40628a:	429c      	cmp	r4, r3
  40628c:	dc16      	bgt.n	4062bc <_lv_blend_fill+0x13c>
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40628e:	fa0f f689 	sxth.w	r6, r9
  406292:	4633      	mov	r3, r6
  406294:	465e      	mov	r6, fp
  406296:	469b      	mov	fp, r3
  406298:	f8d8 0000 	ldr.w	r0, [r8]
  40629c:	9602      	str	r6, [sp, #8]
  40629e:	f8ad 7004 	strh.w	r7, [sp, #4]
  4062a2:	f8cd b000 	str.w	fp, [sp]
  4062a6:	69c5      	ldr	r5, [r0, #28]
  4062a8:	b223      	sxth	r3, r4
  4062aa:	4652      	mov	r2, sl
  4062ac:	9904      	ldr	r1, [sp, #16]
  4062ae:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  4062b0:	3401      	adds	r4, #1
  4062b2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  4062b6:	429c      	cmp	r4, r3
  4062b8:	ddee      	ble.n	406298 <_lv_blend_fill+0x118>
  4062ba:	46b3      	mov	fp, r6
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  4062bc:	f109 0901 	add.w	r9, r9, #1
  4062c0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4062c4:	4599      	cmp	r9, r3
  4062c6:	dddc      	ble.n	406282 <_lv_blend_fill+0x102>
  4062c8:	e767      	b.n	40619a <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  4062ca:	3401      	adds	r4, #1
  4062cc:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  4062d0:	429c      	cmp	r4, r3
  4062d2:	dc13      	bgt.n	4062fc <_lv_blend_fill+0x17c>
                if(mask_tmp[x]) {
  4062d4:	f815 3b01 	ldrb.w	r3, [r5], #1
  4062d8:	2b00      	cmp	r3, #0
  4062da:	d0f6      	beq.n	4062ca <_lv_blend_fill+0x14a>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
  4062dc:	f8d8 0000 	ldr.w	r0, [r8]
                                            (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  4062e0:	fb03 f30b 	mul.w	r3, r3, fp
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
  4062e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4062e8:	9302      	str	r3, [sp, #8]
  4062ea:	f8ad a004 	strh.w	sl, [sp, #4]
  4062ee:	9700      	str	r7, [sp, #0]
  4062f0:	69c6      	ldr	r6, [r0, #28]
  4062f2:	b223      	sxth	r3, r4
  4062f4:	9a05      	ldr	r2, [sp, #20]
  4062f6:	9904      	ldr	r1, [sp, #16]
  4062f8:	47b0      	blx	r6
  4062fa:	e7e6      	b.n	4062ca <_lv_blend_fill+0x14a>
  4062fc:	9b06      	ldr	r3, [sp, #24]
  4062fe:	9a07      	ldr	r2, [sp, #28]
  406300:	4413      	add	r3, r2
  406302:	9306      	str	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406304:	f109 0901 	add.w	r9, r9, #1
  406308:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40630c:	4599      	cmp	r9, r3
  40630e:	f73f af44 	bgt.w	40619a <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406312:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
  406316:	462c      	mov	r4, r5
  406318:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  40631c:	429d      	cmp	r5, r3
  40631e:	dced      	bgt.n	4062fc <_lv_blend_fill+0x17c>
  406320:	9b06      	ldr	r3, [sp, #24]
  406322:	441d      	add	r5, r3
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
  406324:	fa0f f789 	sxth.w	r7, r9
  406328:	e7d4      	b.n	4062d4 <_lv_blend_fill+0x154>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40632a:	2f00      	cmp	r7, #0
  40632c:	f040 83e8 	bne.w	406b00 <_lv_blend_fill+0x980>
  406330:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  406334:	9305      	str	r3, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  406336:	4b39      	ldr	r3, [pc, #228]	; (40641c <_lv_blend_fill+0x29c>)
  406338:	4798      	blx	r3
  40633a:	4681      	mov	r9, r0
  40633c:	f8b8 6014 	ldrh.w	r6, [r8, #20]
  406340:	3601      	adds	r6, #1
  406342:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  406346:	1af6      	subs	r6, r6, r3
  406348:	b236      	sxth	r6, r6
  40634a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  40634e:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
  406352:	3701      	adds	r7, #1
  406354:	1aff      	subs	r7, r7, r3
  406356:	b23f      	sxth	r7, r7
    int32_t draw_area_w = lv_area_get_width(draw_area);
  406358:	970e      	str	r7, [sp, #56]	; 0x38
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40635a:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
  40635e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  406362:	1c48      	adds	r0, r1, #1
  406364:	1a80      	subs	r0, r0, r2
    int32_t draw_area_h = lv_area_get_height(draw_area);
  406366:	b200      	sxth	r0, r0
  406368:	900d      	str	r0, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40636a:	920a      	str	r2, [sp, #40]	; 0x28
  40636c:	fb02 3306 	mla	r3, r2, r6, r3
  406370:	9804      	ldr	r0, [sp, #16]
  406372:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  406376:	2c01      	cmp	r4, #1
  406378:	d023      	beq.n	4063c2 <_lv_blend_fill+0x242>
        if(opa > LV_OPA_MAX) {
  40637a:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  40637e:	f240 8323 	bls.w	4069c8 <_lv_blend_fill+0x848>
            for(y = 0; y < draw_area_h; y++) {
  406382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406384:	2b00      	cmp	r3, #0
  406386:	f77f af08 	ble.w	40619a <_lv_blend_fill+0x1a>
        int32_t x_end4 = draw_area_w - 4;
  40638a:	1f3b      	subs	r3, r7, #4
  40638c:	9307      	str	r3, [sp, #28]
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
  40638e:	9a05      	ldr	r2, [sp, #20]
  406390:	eb02 4302 	add.w	r3, r2, r2, lsl #16
  406394:	930b      	str	r3, [sp, #44]	; 0x2c
                disp_buf_first += (disp_w - draw_area_w);
  406396:	1bf6      	subs	r6, r6, r7
  406398:	0073      	lsls	r3, r6, #1
  40639a:	930f      	str	r3, [sp, #60]	; 0x3c
  40639c:	f8dd b018 	ldr.w	fp, [sp, #24]
  4063a0:	2300      	movs	r3, #0
  4063a2:	930c      	str	r3, [sp, #48]	; 0x30
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4063a4:	f3c2 03c4 	ubfx	r3, r2, #3, #5
  4063a8:	9304      	str	r3, [sp, #16]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4063aa:	f3c2 0302 	ubfx	r3, r2, #0, #3
  4063ae:	9306      	str	r3, [sp, #24]
  4063b0:	f3c2 3342 	ubfx	r3, r2, #13, #3
  4063b4:	9308      	str	r3, [sp, #32]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4063b6:	f3c2 2304 	ubfx	r3, r2, #8, #5
  4063ba:	9309      	str	r3, [sp, #36]	; 0x24
  4063bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4063be:	465b      	mov	r3, fp
  4063c0:	e2ef      	b.n	4069a2 <_lv_blend_fill+0x822>
        if(opa > LV_OPA_MAX) {
  4063c2:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  4063c6:	d935      	bls.n	406434 <_lv_blend_fill+0x2b4>
            if(disp->driver->gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  4063c8:	f8d9 3000 	ldr.w	r3, [r9]
  4063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4063ce:	b123      	cbz	r3, 4063da <_lv_blend_fill+0x25a>
  4063d0:	a810      	add	r0, sp, #64	; 0x40
  4063d2:	4b16      	ldr	r3, [pc, #88]	; (40642c <_lv_blend_fill+0x2ac>)
  4063d4:	4798      	blx	r3
  4063d6:	28f0      	cmp	r0, #240	; 0xf0
  4063d8:	d813      	bhi.n	406402 <_lv_blend_fill+0x282>
            for(y = 0; y < draw_area_h; y++) {
  4063da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4063dc:	2b00      	cmp	r3, #0
  4063de:	f77f aedc 	ble.w	40619a <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
  4063e2:	ea4f 0846 	mov.w	r8, r6, lsl #1
  4063e6:	2400      	movs	r4, #0
                lv_color_fill(disp_buf_first, color, draw_area_w);
  4063e8:	4e11      	ldr	r6, [pc, #68]	; (406430 <_lv_blend_fill+0x2b0>)
  4063ea:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  4063ee:	463a      	mov	r2, r7
  4063f0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
  4063f4:	4628      	mov	r0, r5
  4063f6:	47b0      	blx	r6
                disp_buf_first += disp_w;
  4063f8:	4445      	add	r5, r8
            for(y = 0; y < draw_area_h; y++) {
  4063fa:	3401      	adds	r4, #1
  4063fc:	45a1      	cmp	r9, r4
  4063fe:	d1f6      	bne.n	4063ee <_lv_blend_fill+0x26e>
  406400:	e6cb      	b.n	40619a <_lv_blend_fill+0x1a>
                disp->driver->gpu_fill_cb(disp->driver, disp_buf, disp_w, draw_area, color);
  406402:	f8d9 0000 	ldr.w	r0, [r9]
  406406:	6b44      	ldr	r4, [r0, #52]	; 0x34
  406408:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40640c:	f8ad 3000 	strh.w	r3, [sp]
  406410:	ab10      	add	r3, sp, #64	; 0x40
  406412:	4632      	mov	r2, r6
  406414:	9904      	ldr	r1, [sp, #16]
  406416:	47a0      	blx	r4
  406418:	e6bf      	b.n	40619a <_lv_blend_fill+0x1a>
  40641a:	bf00      	nop
  40641c:	00405f49 	.word	0x00405f49
  406420:	004101c9 	.word	0x004101c9
  406424:	004107cd 	.word	0x004107cd
  406428:	004107af 	.word	0x004107af
  40642c:	00410775 	.word	0x00410775
  406430:	00410ae9 	.word	0x00410ae9
  406434:	2400      	movs	r4, #0
  406436:	f8bd 901c 	ldrh.w	r9, [sp, #28]
  40643a:	f009 0007 	and.w	r0, r9, #7
  40643e:	f3c9 01c4 	ubfx	r1, r9, #3, #5
  406442:	f3c9 2204 	ubfx	r2, r9, #8, #5
  406446:	f3c9 3342 	ubfx	r3, r9, #13, #3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40644a:	fb0b f101 	mul.w	r1, fp, r1
  40644e:	3180      	adds	r1, #128	; 0x80
  406450:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
  406454:	eb01 11ce 	add.w	r1, r1, lr, lsl #7
  406458:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40645c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  406460:	fb0b f303 	mul.w	r3, fp, r3
  406464:	3380      	adds	r3, #128	; 0x80
  406466:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  40646a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  40646e:	f3c3 6e82 	ubfx	lr, r3, #26, #3
  406472:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  406476:	9307      	str	r3, [sp, #28]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406478:	fb0b f202 	mul.w	r2, fp, r2
  40647c:	3280      	adds	r2, #128	; 0x80
  40647e:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  406482:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  406486:	f3c2 52c4 	ubfx	r2, r2, #23, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40648a:	fa1f fa8b 	uxth.w	sl, fp
  40648e:	f3c9 0cc4 	ubfx	ip, r9, #3, #5
  406492:	fb0c f00a 	mul.w	r0, ip, sl
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  406496:	f009 0807 	and.w	r8, r9, #7
  40649a:	f3c9 3c42 	ubfx	ip, r9, #13, #3
  40649e:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  4064a2:	fb0c fc0a 	mul.w	ip, ip, sl
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  4064a6:	f3c9 2804 	ubfx	r8, r9, #8, #5
  4064aa:	fb08 f80a 	mul.w	r8, r8, sl
            lv_opa_t opa_inv = 255 - opa;
  4064ae:	ea6f 090b 	mvn.w	r9, fp
  4064b2:	fa5f f989 	uxtb.w	r9, r9
            for(y = 0; y < draw_area_h; y++) {
  4064b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4064b8:	42a3      	cmp	r3, r4
  4064ba:	f77f ae6e 	ble.w	40619a <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
  4064be:	0073      	lsls	r3, r6, #1
  4064c0:	9305      	str	r3, [sp, #20]
  4064c2:	007b      	lsls	r3, r7, #1
  4064c4:	9306      	str	r3, [sp, #24]
  4064c6:	9404      	str	r4, [sp, #16]
  4064c8:	4683      	mov	fp, r0
  4064ca:	9b07      	ldr	r3, [sp, #28]
  4064cc:	e048      	b.n	406560 <_lv_blend_fill+0x3e0>
                    disp_buf_first[x] = last_res_color;
  4064ce:	f890 a000 	ldrb.w	sl, [r0]
  4064d2:	f36e 0a02 	bfi	sl, lr, #0, #3
  4064d6:	f361 0ac7 	bfi	sl, r1, #3, #5
  4064da:	f880 a000 	strb.w	sl, [r0]
  4064de:	f890 a001 	ldrb.w	sl, [r0, #1]
  4064e2:	f362 0a04 	bfi	sl, r2, #0, #5
  4064e6:	f363 1a47 	bfi	sl, r3, #5, #3
  4064ea:	f880 a001 	strb.w	sl, [r0, #1]
                    if(last_dest_color.full != disp_buf_first[x].full) {
  4064ee:	46a2      	mov	sl, r4
                for(x = 0; x < draw_area_w; x++) {
  4064f0:	42b7      	cmp	r7, r6
  4064f2:	d02c      	beq.n	40654e <_lv_blend_fill+0x3ce>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  4064f4:	4630      	mov	r0, r6
  4064f6:	f836 4b02 	ldrh.w	r4, [r6], #2
  4064fa:	4554      	cmp	r4, sl
  4064fc:	d0e7      	beq.n	4064ce <_lv_blend_fill+0x34e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  4064fe:	7802      	ldrb	r2, [r0, #0]
  406500:	08d3      	lsrs	r3, r2, #3
  406502:	fb09 b303 	mla	r3, r9, r3, fp
  406506:	3380      	adds	r3, #128	; 0x80
  406508:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40650c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  406510:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  406514:	f002 0e07 	and.w	lr, r2, #7
  406518:	7842      	ldrb	r2, [r0, #1]
  40651a:	0953      	lsrs	r3, r2, #5
  40651c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
  406520:	fb09 c303 	mla	r3, r9, r3, ip
  406524:	3380      	adds	r3, #128	; 0x80
  406526:	eb03 2e03 	add.w	lr, r3, r3, lsl #8
  40652a:	eb03 13ce 	add.w	r3, r3, lr, lsl #7
  40652e:	f3c3 6e82 	ubfx	lr, r3, #26, #3
  406532:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  406536:	f002 021f 	and.w	r2, r2, #31
  40653a:	fb09 8202 	mla	r2, r9, r2, r8
  40653e:	3280      	adds	r2, #128	; 0x80
  406540:	eb02 2a02 	add.w	sl, r2, r2, lsl #8
  406544:	eb02 12ca 	add.w	r2, r2, sl, lsl #7
  406548:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40654c:	e7bf      	b.n	4064ce <_lv_blend_fill+0x34e>
                disp_buf_first += disp_w;
  40654e:	9805      	ldr	r0, [sp, #20]
  406550:	4405      	add	r5, r0
            for(y = 0; y < draw_area_h; y++) {
  406552:	9804      	ldr	r0, [sp, #16]
  406554:	3001      	adds	r0, #1
  406556:	9004      	str	r0, [sp, #16]
  406558:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40655a:	4286      	cmp	r6, r0
  40655c:	f43f ae1d 	beq.w	40619a <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  406560:	980e      	ldr	r0, [sp, #56]	; 0x38
  406562:	2800      	cmp	r0, #0
  406564:	ddf3      	ble.n	40654e <_lv_blend_fill+0x3ce>
  406566:	462e      	mov	r6, r5
  406568:	9806      	ldr	r0, [sp, #24]
  40656a:	182f      	adds	r7, r5, r0
  40656c:	46a2      	mov	sl, r4
  40656e:	e7c1      	b.n	4064f4 <_lv_blend_fill+0x374>
                    FILL_NORMAL_MASK_PX(color)
  406570:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  406574:	802b      	strh	r3, [r5, #0]
  406576:	464b      	mov	r3, r9
  406578:	3502      	adds	r5, #2
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)(mask) & 0x3); x++) {
  40657a:	3201      	adds	r2, #1
  40657c:	4297      	cmp	r7, r2
  40657e:	f000 83aa 	beq.w	406cd6 <_lv_blend_fill+0xb56>
  406582:	f019 0f03 	tst.w	r9, #3
  406586:	f000 821a 	beq.w	4069be <_lv_blend_fill+0x83e>
                    FILL_NORMAL_MASK_PX(color)
  40658a:	f819 3b01 	ldrb.w	r3, [r9], #1
  40658e:	2bff      	cmp	r3, #255	; 0xff
  406590:	d0ee      	beq.n	406570 <_lv_blend_fill+0x3f0>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  406592:	f1c3 0eff 	rsb	lr, r3, #255	; 0xff
  406596:	782e      	ldrb	r6, [r5, #0]
  406598:	08f0      	lsrs	r0, r6, #3
  40659a:	fb0e f000 	mul.w	r0, lr, r0
  40659e:	9904      	ldr	r1, [sp, #16]
  4065a0:	fb03 0001 	mla	r0, r3, r1, r0
  4065a4:	3080      	adds	r0, #128	; 0x80
  4065a6:	eb00 2100 	add.w	r1, r0, r0, lsl #8
  4065aa:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
  4065ae:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4065b2:	9906      	ldr	r1, [sp, #24]
  4065b4:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
  4065b8:	f006 0807 	and.w	r8, r6, #7
  4065bc:	786c      	ldrb	r4, [r5, #1]
  4065be:	ea4f 1c54 	mov.w	ip, r4, lsr #5
  4065c2:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  4065c6:	fb0e fc0c 	mul.w	ip, lr, ip
  4065ca:	fb03 c101 	mla	r1, r3, r1, ip
  4065ce:	3180      	adds	r1, #128	; 0x80
  4065d0:	eb01 2c01 	add.w	ip, r1, r1, lsl #8
  4065d4:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4065d8:	f004 0c1f 	and.w	ip, r4, #31
  4065dc:	fb0e fe0c 	mul.w	lr, lr, ip
  4065e0:	fb03 e30b 	mla	r3, r3, fp, lr
  4065e4:	3380      	adds	r3, #128	; 0x80
  4065e6:	eb03 2e03 	add.w	lr, r3, r3, lsl #8
  4065ea:	eb03 13ce 	add.w	r3, r3, lr, lsl #7
  4065ee:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4065f2:	ea4f 6e91 	mov.w	lr, r1, lsr #26
  4065f6:	f36e 0602 	bfi	r6, lr, #0, #3
  4065fa:	f360 06c7 	bfi	r6, r0, #3, #5
  4065fe:	702e      	strb	r6, [r5, #0]
  406600:	f363 0404 	bfi	r4, r3, #0, #5
  406604:	0dc9      	lsrs	r1, r1, #23
  406606:	f361 1447 	bfi	r4, r1, #5, #3
  40660a:	706c      	strb	r4, [r5, #1]
  40660c:	e7b3      	b.n	406576 <_lv_blend_fill+0x3f6>
                        if((lv_uintptr_t)disp_buf_first & 0x3) {
  40660e:	f016 0f03 	tst.w	r6, #3
  406612:	d009      	beq.n	406628 <_lv_blend_fill+0x4a8>
                            *(disp_buf_first + 0) = color;
  406614:	9805      	ldr	r0, [sp, #20]
  406616:	f824 0c08 	strh.w	r0, [r4, #-8]
                            *d = c32;
  40661a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40661c:	f844 1c06 	str.w	r1, [r4, #-6]
                            *(disp_buf_first + 3) = color;
  406620:	f824 0c02 	strh.w	r0, [r4, #-2]
                        disp_buf_first += 4;
  406624:	4625      	mov	r5, r4
  406626:	e019      	b.n	40665c <_lv_blend_fill+0x4dc>
                            *d = c32;
  406628:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40662a:	f844 1c08 	str.w	r1, [r4, #-8]
                            *(d + 1) = c32;
  40662e:	f844 1c04 	str.w	r1, [r4, #-4]
  406632:	e7f7      	b.n	406624 <_lv_blend_fill+0x4a4>
                        FILL_NORMAL_MASK_PX(color)
  406634:	f8bd 0014 	ldrh.w	r0, [sp, #20]
  406638:	f824 0c08 	strh.w	r0, [r4, #-8]
  40663c:	e06b      	b.n	406716 <_lv_blend_fill+0x596>
                        FILL_NORMAL_MASK_PX(color)
  40663e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
  406642:	f824 0c06 	strh.w	r0, [r4, #-6]
  406646:	e0b1      	b.n	4067ac <_lv_blend_fill+0x62c>
                        FILL_NORMAL_MASK_PX(color)
  406648:	f8bd 0014 	ldrh.w	r0, [sp, #20]
  40664c:	f824 0c04 	strh.w	r0, [r4, #-4]
  406650:	e0f8      	b.n	406844 <_lv_blend_fill+0x6c4>
                        FILL_NORMAL_MASK_PX(color)
  406652:	f8bd 1014 	ldrh.w	r1, [sp, #20]
  406656:	f824 1c02 	strh.w	r1, [r4, #-2]
  40665a:	4625      	mov	r5, r4
                for(; x <= x_end4; x += 4) {
  40665c:	3204      	adds	r2, #4
  40665e:	3304      	adds	r3, #4
  406660:	3408      	adds	r4, #8
  406662:	3608      	adds	r6, #8
  406664:	9907      	ldr	r1, [sp, #28]
  406666:	4291      	cmp	r1, r2
  406668:	f2c0 813b 	blt.w	4068e2 <_lv_blend_fill+0x762>
  40666c:	4631      	mov	r1, r6
  40666e:	4698      	mov	r8, r3
                    uint32_t mask32 = *((uint32_t *)mask);
  406670:	f853 0c04 	ldr.w	r0, [r3, #-4]
                    if(mask32 == 0xFFFFFFFF) {
  406674:	f1b0 3fff 	cmp.w	r0, #4294967295
  406678:	d0c9      	beq.n	40660e <_lv_blend_fill+0x48e>
                    else if(mask32) {
  40667a:	2800      	cmp	r0, #0
  40667c:	f000 812f 	beq.w	4068de <_lv_blend_fill+0x75e>
                        FILL_NORMAL_MASK_PX(color)
  406680:	f813 0c04 	ldrb.w	r0, [r3, #-4]
  406684:	28ff      	cmp	r0, #255	; 0xff
  406686:	d0d5      	beq.n	406634 <_lv_blend_fill+0x4b4>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  406688:	f1c0 09ff 	rsb	r9, r0, #255	; 0xff
  40668c:	f896 c000 	ldrb.w	ip, [r6]
  406690:	ea4f 07dc 	mov.w	r7, ip, lsr #3
  406694:	fb09 f707 	mul.w	r7, r9, r7
  406698:	9d04      	ldr	r5, [sp, #16]
  40669a:	fb00 7705 	mla	r7, r0, r5, r7
  40669e:	3780      	adds	r7, #128	; 0x80
  4066a0:	eb07 2507 	add.w	r5, r7, r7, lsl #8
  4066a4:	eb07 17c5 	add.w	r7, r7, r5, lsl #7
  4066a8:	f3c7 57c4 	ubfx	r7, r7, #23, #5
  4066ac:	970a      	str	r7, [sp, #40]	; 0x28
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4066ae:	9d08      	ldr	r5, [sp, #32]
  4066b0:	462f      	mov	r7, r5
  4066b2:	9d06      	ldr	r5, [sp, #24]
  4066b4:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  4066b8:	f00c 0b07 	and.w	fp, ip, #7
  4066bc:	f896 e001 	ldrb.w	lr, [r6, #1]
  4066c0:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  4066c4:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
  4066c8:	fb09 fa0a 	mul.w	sl, r9, sl
  4066cc:	fb00 a505 	mla	r5, r0, r5, sl
  4066d0:	3580      	adds	r5, #128	; 0x80
  4066d2:	eb05 2a05 	add.w	sl, r5, r5, lsl #8
  4066d6:	eb05 15ca 	add.w	r5, r5, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4066da:	f00e 0a1f 	and.w	sl, lr, #31
  4066de:	fb09 f90a 	mul.w	r9, r9, sl
  4066e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4066e4:	fb00 9007 	mla	r0, r0, r7, r9
  4066e8:	3080      	adds	r0, #128	; 0x80
  4066ea:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  4066ee:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  4066f2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4066f6:	ea4f 6995 	mov.w	r9, r5, lsr #26
  4066fa:	f369 0c02 	bfi	ip, r9, #0, #3
  4066fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406700:	f367 0cc7 	bfi	ip, r7, #3, #5
  406704:	f886 c000 	strb.w	ip, [r6]
  406708:	f360 0e04 	bfi	lr, r0, #0, #5
  40670c:	0ded      	lsrs	r5, r5, #23
  40670e:	f365 1e47 	bfi	lr, r5, #5, #3
  406712:	f886 e001 	strb.w	lr, [r6, #1]
                        FILL_NORMAL_MASK_PX(color)
  406716:	f818 0c03 	ldrb.w	r0, [r8, #-3]
  40671a:	28ff      	cmp	r0, #255	; 0xff
  40671c:	d08f      	beq.n	40663e <_lv_blend_fill+0x4be>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40671e:	f1c0 09ff 	rsb	r9, r0, #255	; 0xff
  406722:	f891 c002 	ldrb.w	ip, [r1, #2]
  406726:	ea4f 07dc 	mov.w	r7, ip, lsr #3
  40672a:	fb09 f707 	mul.w	r7, r9, r7
  40672e:	9d04      	ldr	r5, [sp, #16]
  406730:	fb00 7705 	mla	r7, r0, r5, r7
  406734:	3780      	adds	r7, #128	; 0x80
  406736:	eb07 2507 	add.w	r5, r7, r7, lsl #8
  40673a:	eb07 17c5 	add.w	r7, r7, r5, lsl #7
  40673e:	f3c7 57c4 	ubfx	r7, r7, #23, #5
  406742:	970a      	str	r7, [sp, #40]	; 0x28
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406744:	9d08      	ldr	r5, [sp, #32]
  406746:	462f      	mov	r7, r5
  406748:	9d06      	ldr	r5, [sp, #24]
  40674a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  40674e:	f00c 0b07 	and.w	fp, ip, #7
  406752:	f891 e003 	ldrb.w	lr, [r1, #3]
  406756:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  40675a:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
  40675e:	fb09 fa0a 	mul.w	sl, r9, sl
  406762:	fb00 a505 	mla	r5, r0, r5, sl
  406766:	3580      	adds	r5, #128	; 0x80
  406768:	eb05 2a05 	add.w	sl, r5, r5, lsl #8
  40676c:	eb05 15ca 	add.w	r5, r5, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406770:	f00e 0a1f 	and.w	sl, lr, #31
  406774:	fb09 f90a 	mul.w	r9, r9, sl
  406778:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40677a:	fb00 9007 	mla	r0, r0, r7, r9
  40677e:	3080      	adds	r0, #128	; 0x80
  406780:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  406784:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  406788:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40678c:	ea4f 6995 	mov.w	r9, r5, lsr #26
  406790:	f369 0c02 	bfi	ip, r9, #0, #3
  406794:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406796:	f367 0cc7 	bfi	ip, r7, #3, #5
  40679a:	f881 c002 	strb.w	ip, [r1, #2]
  40679e:	f360 0e04 	bfi	lr, r0, #0, #5
  4067a2:	0ded      	lsrs	r5, r5, #23
  4067a4:	f365 1e47 	bfi	lr, r5, #5, #3
  4067a8:	f881 e003 	strb.w	lr, [r1, #3]
                        FILL_NORMAL_MASK_PX(color)
  4067ac:	f818 0c02 	ldrb.w	r0, [r8, #-2]
  4067b0:	28ff      	cmp	r0, #255	; 0xff
  4067b2:	f43f af49 	beq.w	406648 <_lv_blend_fill+0x4c8>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4067b6:	f1c0 09ff 	rsb	r9, r0, #255	; 0xff
  4067ba:	f891 c004 	ldrb.w	ip, [r1, #4]
  4067be:	ea4f 07dc 	mov.w	r7, ip, lsr #3
  4067c2:	fb09 f707 	mul.w	r7, r9, r7
  4067c6:	9d04      	ldr	r5, [sp, #16]
  4067c8:	fb00 7705 	mla	r7, r0, r5, r7
  4067cc:	3780      	adds	r7, #128	; 0x80
  4067ce:	eb07 2507 	add.w	r5, r7, r7, lsl #8
  4067d2:	eb07 17c5 	add.w	r7, r7, r5, lsl #7
  4067d6:	f3c7 57c4 	ubfx	r7, r7, #23, #5
  4067da:	970a      	str	r7, [sp, #40]	; 0x28
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4067dc:	9d08      	ldr	r5, [sp, #32]
  4067de:	462f      	mov	r7, r5
  4067e0:	9d06      	ldr	r5, [sp, #24]
  4067e2:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  4067e6:	f00c 0b07 	and.w	fp, ip, #7
  4067ea:	f891 e005 	ldrb.w	lr, [r1, #5]
  4067ee:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  4067f2:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
  4067f6:	fb09 fa0a 	mul.w	sl, r9, sl
  4067fa:	fb00 a505 	mla	r5, r0, r5, sl
  4067fe:	3580      	adds	r5, #128	; 0x80
  406800:	eb05 2a05 	add.w	sl, r5, r5, lsl #8
  406804:	eb05 15ca 	add.w	r5, r5, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406808:	f00e 0a1f 	and.w	sl, lr, #31
  40680c:	fb09 f90a 	mul.w	r9, r9, sl
  406810:	9f09      	ldr	r7, [sp, #36]	; 0x24
  406812:	fb00 9007 	mla	r0, r0, r7, r9
  406816:	3080      	adds	r0, #128	; 0x80
  406818:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40681c:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  406820:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406824:	ea4f 6995 	mov.w	r9, r5, lsr #26
  406828:	f369 0c02 	bfi	ip, r9, #0, #3
  40682c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40682e:	f367 0cc7 	bfi	ip, r7, #3, #5
  406832:	f881 c004 	strb.w	ip, [r1, #4]
  406836:	f360 0e04 	bfi	lr, r0, #0, #5
  40683a:	0ded      	lsrs	r5, r5, #23
  40683c:	f365 1e47 	bfi	lr, r5, #5, #3
  406840:	f881 e005 	strb.w	lr, [r1, #5]
                        FILL_NORMAL_MASK_PX(color)
  406844:	f818 0c01 	ldrb.w	r0, [r8, #-1]
  406848:	28ff      	cmp	r0, #255	; 0xff
  40684a:	f43f af02 	beq.w	406652 <_lv_blend_fill+0x4d2>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40684e:	f1c0 09ff 	rsb	r9, r0, #255	; 0xff
  406852:	f891 c006 	ldrb.w	ip, [r1, #6]
  406856:	ea4f 07dc 	mov.w	r7, ip, lsr #3
  40685a:	fb09 f707 	mul.w	r7, r9, r7
  40685e:	9d04      	ldr	r5, [sp, #16]
  406860:	fb00 7705 	mla	r7, r0, r5, r7
  406864:	3780      	adds	r7, #128	; 0x80
  406866:	eb07 2507 	add.w	r5, r7, r7, lsl #8
  40686a:	eb07 17c5 	add.w	r7, r7, r5, lsl #7
  40686e:	f3c7 57c4 	ubfx	r7, r7, #23, #5
  406872:	970a      	str	r7, [sp, #40]	; 0x28
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406874:	9d08      	ldr	r5, [sp, #32]
  406876:	462f      	mov	r7, r5
  406878:	9d06      	ldr	r5, [sp, #24]
  40687a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
  40687e:	f00c 0b07 	and.w	fp, ip, #7
  406882:	f891 e007 	ldrb.w	lr, [r1, #7]
  406886:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  40688a:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
  40688e:	fb09 fa0a 	mul.w	sl, r9, sl
  406892:	fb00 a505 	mla	r5, r0, r5, sl
  406896:	3580      	adds	r5, #128	; 0x80
  406898:	eb05 2a05 	add.w	sl, r5, r5, lsl #8
  40689c:	eb05 15ca 	add.w	r5, r5, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4068a0:	f00e 0a1f 	and.w	sl, lr, #31
  4068a4:	fb09 f90a 	mul.w	r9, r9, sl
  4068a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4068aa:	fb00 9007 	mla	r0, r0, r7, r9
  4068ae:	3080      	adds	r0, #128	; 0x80
  4068b0:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  4068b4:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  4068b8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4068bc:	ea4f 6995 	mov.w	r9, r5, lsr #26
  4068c0:	f369 0c02 	bfi	ip, r9, #0, #3
  4068c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4068c6:	f367 0cc7 	bfi	ip, r7, #3, #5
  4068ca:	f881 c006 	strb.w	ip, [r1, #6]
  4068ce:	f360 0e04 	bfi	lr, r0, #0, #5
  4068d2:	0ded      	lsrs	r5, r5, #23
  4068d4:	f365 1e47 	bfi	lr, r5, #5, #3
  4068d8:	f881 e007 	strb.w	lr, [r1, #7]
  4068dc:	e6bd      	b.n	40665a <_lv_blend_fill+0x4da>
                        disp_buf_first += 4;
  4068de:	4625      	mov	r5, r4
  4068e0:	e6bc      	b.n	40665c <_lv_blend_fill+0x4dc>
  4068e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
                for(; x < draw_area_w ; x++) {
  4068e4:	4297      	cmp	r7, r2
  4068e6:	dd52      	ble.n	40698e <_lv_blend_fill+0x80e>
  4068e8:	4643      	mov	r3, r8
  4068ea:	4699      	mov	r9, r3
  4068ec:	1ad2      	subs	r2, r2, r3
  4068ee:	f8dd a020 	ldr.w	sl, [sp, #32]
  4068f2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4068f6:	e008      	b.n	40690a <_lv_blend_fill+0x78a>
                    FILL_NORMAL_MASK_PX(color)
  4068f8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4068fc:	802b      	strh	r3, [r5, #0]
  4068fe:	464b      	mov	r3, r9
  406900:	3502      	adds	r5, #2
  406902:	eb02 0109 	add.w	r1, r2, r9
                for(; x < draw_area_w ; x++) {
  406906:	428f      	cmp	r7, r1
  406908:	dd42      	ble.n	406990 <_lv_blend_fill+0x810>
                    FILL_NORMAL_MASK_PX(color)
  40690a:	f819 3b01 	ldrb.w	r3, [r9], #1
  40690e:	2bff      	cmp	r3, #255	; 0xff
  406910:	d0f2      	beq.n	4068f8 <_lv_blend_fill+0x778>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  406912:	f1c3 0eff 	rsb	lr, r3, #255	; 0xff
  406916:	782e      	ldrb	r6, [r5, #0]
  406918:	08f0      	lsrs	r0, r6, #3
  40691a:	fb0e f000 	mul.w	r0, lr, r0
  40691e:	9904      	ldr	r1, [sp, #16]
  406920:	fb03 0001 	mla	r0, r3, r1, r0
  406924:	3080      	adds	r0, #128	; 0x80
  406926:	eb00 2100 	add.w	r1, r0, r0, lsl #8
  40692a:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
  40692e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406932:	9906      	ldr	r1, [sp, #24]
  406934:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
  406938:	f006 0807 	and.w	r8, r6, #7
  40693c:	786c      	ldrb	r4, [r5, #1]
  40693e:	ea4f 1c54 	mov.w	ip, r4, lsr #5
  406942:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  406946:	fb0e fc0c 	mul.w	ip, lr, ip
  40694a:	fb03 c101 	mla	r1, r3, r1, ip
  40694e:	3180      	adds	r1, #128	; 0x80
  406950:	eb01 2c01 	add.w	ip, r1, r1, lsl #8
  406954:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406958:	f004 0c1f 	and.w	ip, r4, #31
  40695c:	fb0e fe0c 	mul.w	lr, lr, ip
  406960:	fb03 e30b 	mla	r3, r3, fp, lr
  406964:	3380      	adds	r3, #128	; 0x80
  406966:	eb03 2e03 	add.w	lr, r3, r3, lsl #8
  40696a:	eb03 13ce 	add.w	r3, r3, lr, lsl #7
  40696e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406972:	ea4f 6e91 	mov.w	lr, r1, lsr #26
  406976:	f36e 0602 	bfi	r6, lr, #0, #3
  40697a:	f360 06c7 	bfi	r6, r0, #3, #5
  40697e:	702e      	strb	r6, [r5, #0]
  406980:	f363 0404 	bfi	r4, r3, #0, #5
  406984:	0dc9      	lsrs	r1, r1, #23
  406986:	f361 1447 	bfi	r4, r1, #5, #3
  40698a:	706c      	strb	r4, [r5, #1]
  40698c:	e7b7      	b.n	4068fe <_lv_blend_fill+0x77e>
                for(; x < draw_area_w ; x++) {
  40698e:	4643      	mov	r3, r8
                disp_buf_first += (disp_w - draw_area_w);
  406990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406992:	4415      	add	r5, r2
            for(y = 0; y < draw_area_h; y++) {
  406994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406996:	3201      	adds	r2, #1
  406998:	920c      	str	r2, [sp, #48]	; 0x30
  40699a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40699c:	4291      	cmp	r1, r2
  40699e:	f43f abfc 	beq.w	40619a <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)(mask) & 0x3); x++) {
  4069a2:	2f00      	cmp	r7, #0
  4069a4:	f340 8196 	ble.w	406cd4 <_lv_blend_fill+0xb54>
  4069a8:	f013 0f03 	tst.w	r3, #3
  4069ac:	d006      	beq.n	4069bc <_lv_blend_fill+0x83c>
  4069ae:	4699      	mov	r9, r3
  4069b0:	2200      	movs	r2, #0
  4069b2:	f8dd a020 	ldr.w	sl, [sp, #32]
  4069b6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4069ba:	e5e6      	b.n	40658a <_lv_blend_fill+0x40a>
  4069bc:	2200      	movs	r2, #0
                for(; x <= x_end4; x += 4) {
  4069be:	9907      	ldr	r1, [sp, #28]
  4069c0:	4291      	cmp	r1, r2
  4069c2:	f280 818c 	bge.w	406cde <_lv_blend_fill+0xb5e>
  4069c6:	e790      	b.n	4068ea <_lv_blend_fill+0x76a>
            last_dest_color.full = disp_buf_first[0].full;
  4069c8:	9804      	ldr	r0, [sp, #16]
  4069ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  4069ce:	428a      	cmp	r2, r1
  4069d0:	f73f abe3 	bgt.w	40619a <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
  4069d4:	0072      	lsls	r2, r6, #1
  4069d6:	920c      	str	r2, [sp, #48]	; 0x30
  4069d8:	970d      	str	r7, [sp, #52]	; 0x34
  4069da:	9a06      	ldr	r2, [sp, #24]
  4069dc:	3a01      	subs	r2, #1
  4069de:	9204      	str	r2, [sp, #16]
  4069e0:	007a      	lsls	r2, r7, #1
  4069e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4069e4:	4619      	mov	r1, r3
  4069e6:	f04f 0c00 	mov.w	ip, #0
  4069ea:	4662      	mov	r2, ip
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4069ec:	9c05      	ldr	r4, [sp, #20]
  4069ee:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  4069f2:	9005      	str	r0, [sp, #20]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4069f4:	f3c4 0002 	ubfx	r0, r4, #0, #3
  4069f8:	9006      	str	r0, [sp, #24]
  4069fa:	f3c4 3042 	ubfx	r0, r4, #13, #3
  4069fe:	9007      	str	r0, [sp, #28]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406a00:	f3c4 2004 	ubfx	r0, r4, #8, #5
  406a04:	9008      	str	r0, [sp, #32]
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  406a06:	9409      	str	r4, [sp, #36]	; 0x24
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  406a08:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  406a0c:	46a9      	mov	r9, r5
  406a0e:	e06d      	b.n	406aec <_lv_blend_fill+0x96c>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  406a10:	2aff      	cmp	r2, #255	; 0xff
  406a12:	d002      	beq.n	406a1a <_lv_blend_fill+0x89a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  406a14:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  406a18:	e018      	b.n	406a4c <_lv_blend_fill+0x8cc>
  406a1a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  406a1e:	8832      	ldrh	r2, [r6, #0]
  406a20:	429a      	cmp	r2, r3
  406a22:	d113      	bne.n	406a4c <_lv_blend_fill+0x8cc>
  406a24:	e001      	b.n	406a2a <_lv_blend_fill+0x8aa>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  406a26:	9909      	ldr	r1, [sp, #36]	; 0x24
                            last_dest_color.full = disp_buf_first[x].full;
  406a28:	8833      	ldrh	r3, [r6, #0]
                        disp_buf_first[x] = last_res_color;
  406a2a:	8031      	strh	r1, [r6, #0]
  406a2c:	4602      	mov	r2, r0
  406a2e:	3602      	adds	r6, #2
                for(x = 0; x < draw_area_w; x++) {
  406a30:	45b0      	cmp	r8, r6
  406a32:	d04c      	beq.n	406ace <_lv_blend_fill+0x94e>
                    if(*mask_tmp_x) {
  406a34:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  406a38:	2800      	cmp	r0, #0
  406a3a:	d0f8      	beq.n	406a2e <_lv_blend_fill+0x8ae>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  406a3c:	4290      	cmp	r0, r2
  406a3e:	d0ee      	beq.n	406a1e <_lv_blend_fill+0x89e>
  406a40:	28ff      	cmp	r0, #255	; 0xff
  406a42:	d0e5      	beq.n	406a10 <_lv_blend_fill+0x890>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  406a44:	fb0b fc00 	mul.w	ip, fp, r0
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  406a48:	f3cc 2c07 	ubfx	ip, ip, #8, #8
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  406a4c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
  406a50:	d0e9      	beq.n	406a26 <_lv_blend_fill+0x8a6>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  406a52:	f1cc 03ff 	rsb	r3, ip, #255	; 0xff
  406a56:	7837      	ldrb	r7, [r6, #0]
  406a58:	08f9      	lsrs	r1, r7, #3
  406a5a:	fb03 f101 	mul.w	r1, r3, r1
  406a5e:	9a05      	ldr	r2, [sp, #20]
  406a60:	fb0c 1102 	mla	r1, ip, r2, r1
  406a64:	3180      	adds	r1, #128	; 0x80
  406a66:	eb01 2201 	add.w	r2, r1, r1, lsl #8
  406a6a:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
  406a6e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406a72:	9a07      	ldr	r2, [sp, #28]
  406a74:	9c06      	ldr	r4, [sp, #24]
  406a76:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  406a7a:	f007 0707 	and.w	r7, r7, #7
  406a7e:	7875      	ldrb	r5, [r6, #1]
  406a80:	096c      	lsrs	r4, r5, #5
  406a82:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  406a86:	fb03 f404 	mul.w	r4, r3, r4
  406a8a:	fb0c 4202 	mla	r2, ip, r2, r4
  406a8e:	3280      	adds	r2, #128	; 0x80
  406a90:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  406a94:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406a98:	f005 051f 	and.w	r5, r5, #31
  406a9c:	fb03 f305 	mul.w	r3, r3, r5
  406aa0:	9c08      	ldr	r4, [sp, #32]
  406aa2:	fb0c 3304 	mla	r3, ip, r4, r3
  406aa6:	3380      	adds	r3, #128	; 0x80
  406aa8:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  406aac:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  406ab0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406ab4:	0e94      	lsrs	r4, r2, #26
  406ab6:	f364 0a02 	bfi	sl, r4, #0, #3
  406aba:	f361 0ac7 	bfi	sl, r1, #3, #5
  406abe:	f363 2a0c 	bfi	sl, r3, #8, #5
  406ac2:	0dd2      	lsrs	r2, r2, #23
  406ac4:	f362 3a4f 	bfi	sl, r2, #13, #3
  406ac8:	fa1f f18a 	uxth.w	r1, sl
  406acc:	e7ac      	b.n	406a28 <_lv_blend_fill+0x8a8>
                disp_buf_first += disp_w;
  406ace:	980c      	ldr	r0, [sp, #48]	; 0x30
  406ad0:	4481      	add	r9, r0
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406ad2:	980a      	ldr	r0, [sp, #40]	; 0x28
  406ad4:	3001      	adds	r0, #1
  406ad6:	4604      	mov	r4, r0
  406ad8:	900a      	str	r0, [sp, #40]	; 0x28
  406ada:	9804      	ldr	r0, [sp, #16]
  406adc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  406ade:	4428      	add	r0, r5
  406ae0:	9004      	str	r0, [sp, #16]
  406ae2:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
  406ae6:	4284      	cmp	r4, r0
  406ae8:	f73f ab57 	bgt.w	40619a <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  406aec:	980e      	ldr	r0, [sp, #56]	; 0x38
  406aee:	2800      	cmp	r0, #0
  406af0:	dded      	ble.n	406ace <_lv_blend_fill+0x94e>
  406af2:	464e      	mov	r6, r9
  406af4:	980f      	ldr	r0, [sp, #60]	; 0x3c
  406af6:	eb09 0800 	add.w	r8, r9, r0
  406afa:	f8dd e010 	ldr.w	lr, [sp, #16]
  406afe:	e799      	b.n	406a34 <_lv_blend_fill+0x8b4>
  406b00:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  406b04:	f8ad 3014 	strh.w	r3, [sp, #20]
    switch(mode) {
  406b08:	2f01      	cmp	r7, #1
  406b0a:	d03a      	beq.n	406b82 <_lv_blend_fill+0xa02>
  406b0c:	2f02      	cmp	r7, #2
  406b0e:	d12d      	bne.n	406b6c <_lv_blend_fill+0x9ec>
            blend_fp = color_blend_true_color_subtractive;
  406b10:	4e76      	ldr	r6, [pc, #472]	; (406cec <_lv_blend_fill+0xb6c>)
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  406b12:	f8b8 3014 	ldrh.w	r3, [r8, #20]
  406b16:	3301      	adds	r3, #1
  406b18:	f8b8 2010 	ldrh.w	r2, [r8, #16]
  406b1c:	1a9b      	subs	r3, r3, r2
  406b1e:	b21b      	sxth	r3, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  406b20:	f9bd 7042 	ldrsh.w	r7, [sp, #66]	; 0x42
  406b24:	fb07 f103 	mul.w	r1, r7, r3
  406b28:	9a04      	ldr	r2, [sp, #16]
  406b2a:	eb02 0a41 	add.w	sl, r2, r1, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  406b2e:	2c01      	cmp	r4, #1
  406b30:	d029      	beq.n	406b86 <_lv_blend_fill+0xa06>
  406b32:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
  406b36:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
  406b3a:	3201      	adds	r2, #1
  406b3c:	1a12      	subs	r2, r2, r0
  406b3e:	b212      	sxth	r2, r2
  406b40:	9207      	str	r2, [sp, #28]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  406b42:	9a06      	ldr	r2, [sp, #24]
  406b44:	1a12      	subs	r2, r2, r0
  406b46:	4614      	mov	r4, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  406b48:	9a04      	ldr	r2, [sp, #16]
  406b4a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406b4e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  406b52:	4297      	cmp	r7, r2
  406b54:	f73f ab21 	bgt.w	40619a <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
  406b58:	005b      	lsls	r3, r3, #1
  406b5a:	9308      	str	r3, [sp, #32]
  406b5c:	4608      	mov	r0, r1
  406b5e:	2200      	movs	r2, #0
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  406b60:	f8cd b010 	str.w	fp, [sp, #16]
  406b64:	f8cd b018 	str.w	fp, [sp, #24]
  406b68:	46a3      	mov	fp, r4
  406b6a:	e0a7      	b.n	406cbc <_lv_blend_fill+0xb3c>
            LV_LOG_WARN("fill_blended: unsupported blend mode");
  406b6c:	4b60      	ldr	r3, [pc, #384]	; (406cf0 <_lv_blend_fill+0xb70>)
  406b6e:	9300      	str	r3, [sp, #0]
  406b70:	4b60      	ldr	r3, [pc, #384]	; (406cf4 <_lv_blend_fill+0xb74>)
  406b72:	f240 220a 	movw	r2, #522	; 0x20a
  406b76:	4960      	ldr	r1, [pc, #384]	; (406cf8 <_lv_blend_fill+0xb78>)
  406b78:	2002      	movs	r0, #2
  406b7a:	4c60      	ldr	r4, [pc, #384]	; (406cfc <_lv_blend_fill+0xb7c>)
  406b7c:	47a0      	blx	r4
  406b7e:	f7ff bb0c 	b.w	40619a <_lv_blend_fill+0x1a>
            blend_fp = color_blend_true_color_additive;
  406b82:	4e5f      	ldr	r6, [pc, #380]	; (406d00 <_lv_blend_fill+0xb80>)
  406b84:	e7c5      	b.n	406b12 <_lv_blend_fill+0x992>
  406b86:	f04f 0800 	mov.w	r8, #0
  406b8a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  406b8e:	f005 0407 	and.w	r4, r5, #7
  406b92:	f3c5 00c4 	ubfx	r0, r5, #3, #5
  406b96:	f3c5 2104 	ubfx	r1, r5, #8, #5
  406b9a:	f3c5 3242 	ubfx	r2, r5, #13, #3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  406b9e:	fb0b f000 	mul.w	r0, fp, r0
  406ba2:	3080      	adds	r0, #128	; 0x80
  406ba4:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
  406ba8:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
  406bac:	f3c0 5ec4 	ubfx	lr, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  406bb0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  406bb4:	fb0b f202 	mul.w	r2, fp, r2
  406bb8:	3280      	adds	r2, #128	; 0x80
  406bba:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  406bbe:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  406bc2:	f3c2 6c82 	ubfx	ip, r2, #26, #3
  406bc6:	f3c2 52c2 	ubfx	r2, r2, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  406bca:	fb0b f101 	mul.w	r1, fp, r1
  406bce:	3180      	adds	r1, #128	; 0x80
  406bd0:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  406bd4:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  406bd8:	f3c1 51c4 	ubfx	r1, r1, #23, #5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406bdc:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
  406be0:	4287      	cmp	r7, r0
  406be2:	f73f aada 	bgt.w	40619a <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
  406be6:	005b      	lsls	r3, r3, #1
  406be8:	9304      	str	r3, [sp, #16]
  406bea:	e02d      	b.n	406c48 <_lv_blend_fill+0xac8>
                disp_buf_tmp[x] = last_res_color;
  406bec:	7823      	ldrb	r3, [r4, #0]
  406bee:	f36c 0302 	bfi	r3, ip, #0, #3
  406bf2:	f36e 03c7 	bfi	r3, lr, #3, #5
  406bf6:	7023      	strb	r3, [r4, #0]
  406bf8:	7863      	ldrb	r3, [r4, #1]
  406bfa:	f361 0304 	bfi	r3, r1, #0, #5
  406bfe:	f362 1347 	bfi	r3, r2, #5, #3
  406c02:	7063      	strb	r3, [r4, #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406c04:	f109 0901 	add.w	r9, r9, #1
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  406c08:	4643      	mov	r3, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406c0a:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
  406c0e:	4581      	cmp	r9, r0
  406c10:	dc12      	bgt.n	406c38 <_lv_blend_fill+0xab8>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  406c12:	462c      	mov	r4, r5
  406c14:	f835 8b02 	ldrh.w	r8, [r5], #2
  406c18:	4598      	cmp	r8, r3
  406c1a:	d0e7      	beq.n	406bec <_lv_blend_fill+0xa6c>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  406c1c:	465a      	mov	r2, fp
  406c1e:	8821      	ldrh	r1, [r4, #0]
  406c20:	f8bd 0014 	ldrh.w	r0, [sp, #20]
  406c24:	47b0      	blx	r6
  406c26:	f000 0c07 	and.w	ip, r0, #7
  406c2a:	f3c0 0ec4 	ubfx	lr, r0, #3, #5
  406c2e:	f3c0 2104 	ubfx	r1, r0, #8, #5
  406c32:	f3c0 3242 	ubfx	r2, r0, #13, #3
  406c36:	e7d9      	b.n	406bec <_lv_blend_fill+0xa6c>
            disp_buf_tmp += disp_w;
  406c38:	9b04      	ldr	r3, [sp, #16]
  406c3a:	449a      	add	sl, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406c3c:	3701      	adds	r7, #1
  406c3e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406c42:	429f      	cmp	r7, r3
  406c44:	f73f aaa9 	bgt.w	40619a <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406c48:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
  406c4c:	46a9      	mov	r9, r5
  406c4e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  406c52:	429d      	cmp	r5, r3
  406c54:	dcf0      	bgt.n	406c38 <_lv_blend_fill+0xab8>
  406c56:	eb0a 0545 	add.w	r5, sl, r5, lsl #1
  406c5a:	4643      	mov	r3, r8
  406c5c:	e7d9      	b.n	406c12 <_lv_blend_fill+0xa92>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  406c5e:	f8b4 e000 	ldrh.w	lr, [r4]
  406c62:	458e      	cmp	lr, r1
  406c64:	d118      	bne.n	406c98 <_lv_blend_fill+0xb18>
  406c66:	e008      	b.n	406c7a <_lv_blend_fill+0xafa>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  406c68:	9a04      	ldr	r2, [sp, #16]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  406c6a:	8821      	ldrh	r1, [r4, #0]
  406c6c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
  406c70:	47b0      	blx	r6
  406c72:	b280      	uxth	r0, r0
                    last_mask = mask_tmp[x];
  406c74:	f899 2000 	ldrb.w	r2, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  406c78:	8821      	ldrh	r1, [r4, #0]
                disp_buf_tmp[x] = last_res_color;
  406c7a:	8020      	strh	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406c7c:	f108 0801 	add.w	r8, r8, #1
  406c80:	3501      	adds	r5, #1
  406c82:	3402      	adds	r4, #2
  406c84:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  406c88:	4598      	cmp	r8, r3
  406c8a:	dc0d      	bgt.n	406ca8 <_lv_blend_fill+0xb28>
  406c8c:	46a9      	mov	r9, r5
                if(mask_tmp[x] == 0) continue;
  406c8e:	782b      	ldrb	r3, [r5, #0]
  406c90:	2b00      	cmp	r3, #0
  406c92:	d0f3      	beq.n	406c7c <_lv_blend_fill+0xafc>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  406c94:	4293      	cmp	r3, r2
  406c96:	d0e2      	beq.n	406c5e <_lv_blend_fill+0xade>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  406c98:	2bfc      	cmp	r3, #252	; 0xfc
  406c9a:	d8e5      	bhi.n	406c68 <_lv_blend_fill+0xae8>
  406c9c:	9a06      	ldr	r2, [sp, #24]
  406c9e:	fb02 f303 	mul.w	r3, r2, r3
  406ca2:	f3c3 2207 	ubfx	r2, r3, #8, #8
  406ca6:	e7e0      	b.n	406c6a <_lv_blend_fill+0xaea>
            disp_buf_tmp += disp_w;
  406ca8:	9b08      	ldr	r3, [sp, #32]
  406caa:	449a      	add	sl, r3
  406cac:	9b07      	ldr	r3, [sp, #28]
  406cae:	449b      	add	fp, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406cb0:	3701      	adds	r7, #1
  406cb2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406cb6:	429f      	cmp	r7, r3
  406cb8:	f73f aa6f 	bgt.w	40619a <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406cbc:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
  406cc0:	46a0      	mov	r8, r4
  406cc2:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  406cc6:	429c      	cmp	r4, r3
  406cc8:	dcee      	bgt.n	406ca8 <_lv_blend_fill+0xb28>
  406cca:	eb0b 0504 	add.w	r5, fp, r4
  406cce:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
  406cd2:	e7db      	b.n	406c8c <_lv_blend_fill+0xb0c>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)(mask) & 0x3); x++) {
  406cd4:	2200      	movs	r2, #0
                for(; x <= x_end4; x += 4) {
  406cd6:	9907      	ldr	r1, [sp, #28]
  406cd8:	4291      	cmp	r1, r2
  406cda:	f6ff ae59 	blt.w	406990 <_lv_blend_fill+0x810>
  406cde:	3304      	adds	r3, #4
  406ce0:	f105 0408 	add.w	r4, r5, #8
  406ce4:	462e      	mov	r6, r5
  406ce6:	970e      	str	r7, [sp, #56]	; 0x38
  406ce8:	e4c0      	b.n	40666c <_lv_blend_fill+0x4ec>
  406cea:	bf00      	nop
  406cec:	004060a3 	.word	0x004060a3
  406cf0:	0041c3c8 	.word	0x0041c3c8
  406cf4:	0041c374 	.word	0x0041c374
  406cf8:	0041c390 	.word	0x0041c390
  406cfc:	00410edd 	.word	0x00410edd
  406d00:	00405fc1 	.word	0x00405fc1

00406d04 <_lv_blend_map>:
{
  406d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d08:	b093      	sub	sp, #76	; 0x4c
  406d0a:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
  406d0e:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
  406d12:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  406d16:	b114      	cbz	r4, 406d1e <_lv_blend_map+0x1a>
  406d18:	f1bb 0f01 	cmp.w	fp, #1
  406d1c:	d802      	bhi.n	406d24 <_lv_blend_map+0x20>
}
  406d1e:	b013      	add	sp, #76	; 0x4c
  406d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d24:	9306      	str	r3, [sp, #24]
  406d26:	9207      	str	r2, [sp, #28]
  406d28:	460e      	mov	r6, r1
  406d2a:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  406d2c:	4632      	mov	r2, r6
  406d2e:	a810      	add	r0, sp, #64	; 0x40
  406d30:	4bb5      	ldr	r3, [pc, #724]	; (407008 <_lv_blend_map+0x304>)
  406d32:	4798      	blx	r3
    if(!is_common) return;
  406d34:	2800      	cmp	r0, #0
  406d36:	d0f2      	beq.n	406d1e <_lv_blend_map+0x1a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  406d38:	4bb4      	ldr	r3, [pc, #720]	; (40700c <_lv_blend_map+0x308>)
  406d3a:	4798      	blx	r3
  406d3c:	4680      	mov	r8, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
  406d3e:	4bb4      	ldr	r3, [pc, #720]	; (407010 <_lv_blend_map+0x30c>)
  406d40:	4798      	blx	r3
  406d42:	4605      	mov	r5, r0
    lv_color_t * disp_buf = draw_buf->buf_act;
  406d44:	6883      	ldr	r3, [r0, #8]
  406d46:	9304      	str	r3, [sp, #16]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
  406d48:	f8d8 0000 	ldr.w	r0, [r8]
  406d4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  406d4e:	b103      	cbz	r3, 406d52 <_lv_blend_map+0x4e>
  406d50:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  406d52:	8a29      	ldrh	r1, [r5, #16]
  406d54:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  406d58:	1a5b      	subs	r3, r3, r1
  406d5a:	b29b      	uxth	r3, r3
  406d5c:	9308      	str	r3, [sp, #32]
  406d5e:	469c      	mov	ip, r3
  406d60:	fa0f fa83 	sxth.w	sl, r3
  406d64:	f8ad a040 	strh.w	sl, [sp, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
  406d68:	8a6b      	ldrh	r3, [r5, #18]
  406d6a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  406d6e:	1ad2      	subs	r2, r2, r3
  406d70:	b292      	uxth	r2, r2
  406d72:	9209      	str	r2, [sp, #36]	; 0x24
  406d74:	b212      	sxth	r2, r2
  406d76:	9205      	str	r2, [sp, #20]
  406d78:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
  406d7c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
  406d80:	1a52      	subs	r2, r2, r1
  406d82:	b292      	uxth	r2, r2
  406d84:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
  406d88:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
  406d8c:	1ac9      	subs	r1, r1, r3
  406d8e:	b289      	uxth	r1, r1
  406d90:	fa0f fe81 	sxth.w	lr, r1
  406d94:	f8ad e046 	strh.w	lr, [sp, #70]	; 0x46
    if(mask && disp->driver->antialiasing == 0) {
  406d98:	9806      	ldr	r0, [sp, #24]
  406d9a:	b1f8      	cbz	r0, 406ddc <_lv_blend_map+0xd8>
  406d9c:	f8d8 3000 	ldr.w	r3, [r8]
  406da0:	7c1b      	ldrb	r3, [r3, #16]
  406da2:	f013 0f04 	tst.w	r3, #4
  406da6:	d119      	bne.n	406ddc <_lv_blend_map+0xd8>
  406da8:	f102 0901 	add.w	r9, r2, #1
  406dac:	eba9 090c 	sub.w	r9, r9, ip
  406db0:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  406db4:	f1b9 0f00 	cmp.w	r9, #0
  406db8:	dd10      	ble.n	406ddc <_lv_blend_map+0xd8>
  406dba:	4603      	mov	r3, r0
  406dbc:	4481      	add	r9, r0
  406dbe:	9805      	ldr	r0, [sp, #20]
  406dc0:	f893 c000 	ldrb.w	ip, [r3]
  406dc4:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
  406dc8:	f04f 3cff 	mov.w	ip, #4294967295
  406dcc:	bf98      	it	ls
  406dce:	f04f 0c00 	movls.w	ip, #0
  406dd2:	f803 cb01 	strb.w	ip, [r3], #1
  406dd6:	454b      	cmp	r3, r9
  406dd8:	d1f2      	bne.n	406dc0 <_lv_blend_map+0xbc>
  406dda:	9005      	str	r0, [sp, #20]
    if(disp->driver->set_px_cb) {
  406ddc:	f8d8 3000 	ldr.w	r3, [r8]
  406de0:	69db      	ldr	r3, [r3, #28]
  406de2:	2b00      	cmp	r3, #0
  406de4:	f000 80ac 	beq.w	406f40 <_lv_blend_map+0x23c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  406de8:	4b88      	ldr	r3, [pc, #544]	; (40700c <_lv_blend_map+0x308>)
  406dea:	4798      	blx	r3
  406dec:	4607      	mov	r7, r0
  406dee:	f9b5 0010 	ldrsh.w	r0, [r5, #16]
  406df2:	8aab      	ldrh	r3, [r5, #20]
  406df4:	3301      	adds	r3, #1
  406df6:	1a1b      	subs	r3, r3, r0
  406df8:	b21b      	sxth	r3, r3
  406dfa:	9305      	str	r3, [sp, #20]
  406dfc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  406e00:	f9b6 2000 	ldrsh.w	r2, [r6]
  406e04:	88b3      	ldrh	r3, [r6, #4]
  406e06:	3301      	adds	r3, #1
  406e08:	1a9b      	subs	r3, r3, r2
  406e0a:	fa0f fe83 	sxth.w	lr, r3
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  406e0e:	f9bd 8042 	ldrsh.w	r8, [sp, #66]	; 0x42
  406e12:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  406e16:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
  406e1a:	1b5b      	subs	r3, r3, r5
  406e1c:	eba8 0303 	sub.w	r3, r8, r3
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  406e20:	1a12      	subs	r2, r2, r0
  406e22:	1a8a      	subs	r2, r1, r2
    map_buf_tmp -= draw_area->x1;
  406e24:	fb0e 2303 	mla	r3, lr, r3, r2
  406e28:	ea4f 0a41 	mov.w	sl, r1, lsl #1
  406e2c:	ebca 0a43 	rsb	sl, sl, r3, lsl #1
  406e30:	9b07      	ldr	r3, [sp, #28]
  406e32:	4453      	add	r3, sl
  406e34:	469a      	mov	sl, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  406e36:	2c01      	cmp	r4, #1
  406e38:	d014      	beq.n	406e64 <_lv_blend_map+0x160>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  406e3a:	9b06      	ldr	r3, [sp, #24]
  406e3c:	1a5b      	subs	r3, r3, r1
  406e3e:	9306      	str	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406e40:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406e44:	4598      	cmp	r8, r3
  406e46:	f73f af6a 	bgt.w	406d1e <_lv_blend_map+0x1a>
  406e4a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
            map_buf_tmp += map_w;
  406e4e:	ea4f 024e 	mov.w	r2, lr, lsl #1
  406e52:	9208      	str	r2, [sp, #32]
  406e54:	f8cd 801c 	str.w	r8, [sp, #28]
  406e58:	3301      	adds	r3, #1
  406e5a:	1a59      	subs	r1, r3, r1
            mask_tmp += draw_area_w;
  406e5c:	b20b      	sxth	r3, r1
  406e5e:	9309      	str	r3, [sp, #36]	; 0x24
  406e60:	46b9      	mov	r9, r7
  406e62:	e05e      	b.n	406f22 <_lv_blend_map+0x21e>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406e64:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406e68:	4598      	cmp	r8, r3
  406e6a:	f73f af58 	bgt.w	406d1e <_lv_blend_map+0x1a>
            map_buf_tmp += map_w;
  406e6e:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406e72:	9306      	str	r3, [sp, #24]
  406e74:	46b9      	mov	r9, r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406e76:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
  406e7a:	462c      	mov	r4, r5
  406e7c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  406e80:	429d      	cmp	r5, r3
  406e82:	dc1a      	bgt.n	406eba <_lv_blend_map+0x1b6>
  406e84:	eb0a 0545 	add.w	r5, sl, r5, lsl #1
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  406e88:	fa0f f788 	sxth.w	r7, r8
  406e8c:	463b      	mov	r3, r7
  406e8e:	465f      	mov	r7, fp
  406e90:	469b      	mov	fp, r3
  406e92:	f8d9 0000 	ldr.w	r0, [r9]
  406e96:	9702      	str	r7, [sp, #8]
  406e98:	f835 3b02 	ldrh.w	r3, [r5], #2
  406e9c:	f8ad 3004 	strh.w	r3, [sp, #4]
  406ea0:	f8cd b000 	str.w	fp, [sp]
  406ea4:	69c6      	ldr	r6, [r0, #28]
  406ea6:	b223      	sxth	r3, r4
  406ea8:	9a05      	ldr	r2, [sp, #20]
  406eaa:	9904      	ldr	r1, [sp, #16]
  406eac:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406eae:	3401      	adds	r4, #1
  406eb0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  406eb4:	429c      	cmp	r4, r3
  406eb6:	ddec      	ble.n	406e92 <_lv_blend_map+0x18e>
  406eb8:	46bb      	mov	fp, r7
            map_buf_tmp += map_w;
  406eba:	9b06      	ldr	r3, [sp, #24]
  406ebc:	449a      	add	sl, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406ebe:	f108 0801 	add.w	r8, r8, #1
  406ec2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406ec6:	4598      	cmp	r8, r3
  406ec8:	ddd5      	ble.n	406e76 <_lv_blend_map+0x172>
  406eca:	e728      	b.n	406d1e <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406ecc:	3401      	adds	r4, #1
  406ece:	3502      	adds	r5, #2
  406ed0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  406ed4:	429c      	cmp	r4, r3
  406ed6:	dc15      	bgt.n	406f04 <_lv_blend_map+0x200>
                if(mask_tmp[x]) {
  406ed8:	f816 3b01 	ldrb.w	r3, [r6], #1
  406edc:	2b00      	cmp	r3, #0
  406ede:	d0f5      	beq.n	406ecc <_lv_blend_map+0x1c8>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  406ee0:	f8d9 0000 	ldr.w	r0, [r9]
                                            (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  406ee4:	fb03 f30b 	mul.w	r3, r3, fp
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  406ee8:	f3c3 2307 	ubfx	r3, r3, #8, #8
  406eec:	9302      	str	r3, [sp, #8]
  406eee:	882b      	ldrh	r3, [r5, #0]
  406ef0:	f8ad 3004 	strh.w	r3, [sp, #4]
  406ef4:	9700      	str	r7, [sp, #0]
  406ef6:	f8d0 801c 	ldr.w	r8, [r0, #28]
  406efa:	b223      	sxth	r3, r4
  406efc:	9a05      	ldr	r2, [sp, #20]
  406efe:	9904      	ldr	r1, [sp, #16]
  406f00:	47c0      	blx	r8
  406f02:	e7e3      	b.n	406ecc <_lv_blend_map+0x1c8>
  406f04:	9b06      	ldr	r3, [sp, #24]
  406f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406f08:	4413      	add	r3, r2
  406f0a:	9306      	str	r3, [sp, #24]
            map_buf_tmp += map_w;
  406f0c:	9b08      	ldr	r3, [sp, #32]
  406f0e:	449a      	add	sl, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  406f10:	9b07      	ldr	r3, [sp, #28]
  406f12:	3301      	adds	r3, #1
  406f14:	461a      	mov	r2, r3
  406f16:	9307      	str	r3, [sp, #28]
  406f18:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  406f1c:	429a      	cmp	r2, r3
  406f1e:	f73f aefe 	bgt.w	406d1e <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  406f22:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
  406f26:	462c      	mov	r4, r5
  406f28:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  406f2c:	429d      	cmp	r5, r3
  406f2e:	dce9      	bgt.n	406f04 <_lv_blend_map+0x200>
  406f30:	9b06      	ldr	r3, [sp, #24]
  406f32:	195e      	adds	r6, r3, r5
  406f34:	eb0a 0545 	add.w	r5, sl, r5, lsl #1
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  406f38:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
  406f3c:	4647      	mov	r7, r8
  406f3e:	e7cb      	b.n	406ed8 <_lv_blend_map+0x1d4>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  406f40:	2f00      	cmp	r7, #0
  406f42:	f040 83d3 	bne.w	4076ec <_lv_blend_map+0x9e8>
  406f46:	f9b5 e010 	ldrsh.w	lr, [r5, #16]
  406f4a:	8aab      	ldrh	r3, [r5, #20]
  406f4c:	3301      	adds	r3, #1
  406f4e:	eba3 030e 	sub.w	r3, r3, lr
  406f52:	b21b      	sxth	r3, r3
  406f54:	3201      	adds	r2, #1
  406f56:	9808      	ldr	r0, [sp, #32]
  406f58:	1a12      	subs	r2, r2, r0
  406f5a:	b212      	sxth	r2, r2
  406f5c:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t draw_area_w = lv_area_get_width(draw_area);
  406f5e:	920a      	str	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  406f60:	3101      	adds	r1, #1
  406f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406f64:	1a89      	subs	r1, r1, r2
    int32_t draw_area_h = lv_area_get_height(draw_area);
  406f66:	b20a      	sxth	r2, r1
  406f68:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  406f6a:	f9b6 1000 	ldrsh.w	r1, [r6]
  406f6e:	88b2      	ldrh	r2, [r6, #4]
  406f70:	3201      	adds	r2, #1
  406f72:	1a52      	subs	r2, r2, r1
  406f74:	b212      	sxth	r2, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  406f76:	9f05      	ldr	r7, [sp, #20]
  406f78:	fb07 a703 	mla	r7, r7, r3, sl
  406f7c:	9804      	ldr	r0, [sp, #16]
  406f7e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
  406f82:	9004      	str	r0, [sp, #16]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  406f84:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  406f88:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
  406f8c:	1b75      	subs	r5, r6, r5
  406f8e:	9805      	ldr	r0, [sp, #20]
  406f90:	1b45      	subs	r5, r0, r5
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  406f92:	eba1 010e 	sub.w	r1, r1, lr
  406f96:	ebaa 0a01 	sub.w	sl, sl, r1
  406f9a:	fb02 a505 	mla	r5, r2, r5, sl
  406f9e:	9907      	ldr	r1, [sp, #28]
  406fa0:	eb01 0145 	add.w	r1, r1, r5, lsl #1
  406fa4:	9105      	str	r1, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  406fa6:	2c01      	cmp	r4, #1
  406fa8:	d016      	beq.n	406fd8 <_lv_blend_map+0x2d4>
        if(opa > LV_OPA_MAX) {
  406faa:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  406fae:	f200 80a6 	bhi.w	4070fe <_lv_blend_map+0x3fa>
            for(y = 0; y < draw_area_h; y++) {
  406fb2:	9908      	ldr	r1, [sp, #32]
  406fb4:	2900      	cmp	r1, #0
  406fb6:	f77f aeb2 	ble.w	406d1e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  406fba:	005b      	lsls	r3, r3, #1
  406fbc:	930b      	str	r3, [sp, #44]	; 0x2c
                map_buf_first += map_w;
  406fbe:	0053      	lsls	r3, r2, #1
  406fc0:	930c      	str	r3, [sp, #48]	; 0x30
  406fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406fc4:	9a06      	ldr	r2, [sp, #24]
  406fc6:	3a01      	subs	r2, #1
  406fc8:	9206      	str	r2, [sp, #24]
  406fca:	005b      	lsls	r3, r3, #1
  406fcc:	930e      	str	r3, [sp, #56]	; 0x38
  406fce:	2300      	movs	r3, #0
  406fd0:	9309      	str	r3, [sp, #36]	; 0x24
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  406fd2:	f8cd b01c 	str.w	fp, [sp, #28]
  406fd6:	e37c      	b.n	4076d2 <_lv_blend_map+0x9ce>
        if(opa > LV_OPA_MAX) {
  406fd8:	f1bb 0ffd 	cmp.w	fp, #253	; 0xfd
  406fdc:	d81a      	bhi.n	407014 <_lv_blend_map+0x310>
            for(y = 0; y < draw_area_h; y++) {
  406fde:	9908      	ldr	r1, [sp, #32]
  406fe0:	2900      	cmp	r1, #0
  406fe2:	f77f ae9c 	ble.w	406d1e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  406fe6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
                map_buf_first += map_w;
  406fea:	0053      	lsls	r3, r2, #1
  406fec:	9306      	str	r3, [sp, #24]
  406fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406ff0:	005b      	lsls	r3, r3, #1
  406ff2:	9307      	str	r3, [sp, #28]
  406ff4:	f04f 0900 	mov.w	r9, #0
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  406ff8:	f1cb 0cff 	rsb	ip, fp, #255	; 0xff
  406ffc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  407000:	f8dd a014 	ldr.w	sl, [sp, #20]
  407004:	e02c      	b.n	407060 <_lv_blend_map+0x35c>
  407006:	bf00      	nop
  407008:	004107cd 	.word	0x004107cd
  40700c:	00405f49 	.word	0x00405f49
  407010:	004101c9 	.word	0x004101c9
            for(y = 0; y < draw_area_h; y++) {
  407014:	9908      	ldr	r1, [sp, #32]
  407016:	2900      	cmp	r1, #0
  407018:	f77f ae81 	ble.w	406d1e <_lv_blend_map+0x1a>
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40701c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40701e:	0046      	lsls	r6, r0, #1
                disp_buf_first += disp_w;
  407020:	005f      	lsls	r7, r3, #1
                map_buf_first += map_w;
  407022:	ea4f 0842 	mov.w	r8, r2, lsl #1
  407026:	2400      	movs	r4, #0
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  407028:	4d6d      	ldr	r5, [pc, #436]	; (4071e0 <_lv_blend_map+0x4dc>)
  40702a:	468b      	mov	fp, r1
  40702c:	f8dd 9010 	ldr.w	r9, [sp, #16]
  407030:	f8dd a014 	ldr.w	sl, [sp, #20]
  407034:	4632      	mov	r2, r6
  407036:	4651      	mov	r1, sl
  407038:	4648      	mov	r0, r9
  40703a:	47a8      	blx	r5
                disp_buf_first += disp_w;
  40703c:	44b9      	add	r9, r7
                map_buf_first += map_w;
  40703e:	44c2      	add	sl, r8
            for(y = 0; y < draw_area_h; y++) {
  407040:	3401      	adds	r4, #1
  407042:	45a3      	cmp	fp, r4
  407044:	d1f6      	bne.n	407034 <_lv_blend_map+0x330>
  407046:	e66a      	b.n	406d1e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  407048:	9b04      	ldr	r3, [sp, #16]
  40704a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40704c:	4413      	add	r3, r2
  40704e:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
  407050:	9b06      	ldr	r3, [sp, #24]
  407052:	449a      	add	sl, r3
            for(y = 0; y < draw_area_h; y++) {
  407054:	f109 0901 	add.w	r9, r9, #1
  407058:	9b08      	ldr	r3, [sp, #32]
  40705a:	454b      	cmp	r3, r9
  40705c:	f43f ae5f 	beq.w	406d1e <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  407060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407062:	2b00      	cmp	r3, #0
  407064:	ddf0      	ble.n	407048 <_lv_blend_map+0x344>
  407066:	46d6      	mov	lr, sl
  407068:	9f04      	ldr	r7, [sp, #16]
  40706a:	9b07      	ldr	r3, [sp, #28]
  40706c:	eb0a 0803 	add.w	r8, sl, r3
  407070:	f89e 3000 	ldrb.w	r3, [lr]
  407074:	08d9      	lsrs	r1, r3, #3
  407076:	783c      	ldrb	r4, [r7, #0]
  407078:	08e2      	lsrs	r2, r4, #3
  40707a:	fb0c f202 	mul.w	r2, ip, r2
  40707e:	fb0b 2101 	mla	r1, fp, r1, r2
  407082:	3180      	adds	r1, #128	; 0x80
  407084:	eb01 2201 	add.w	r2, r1, r1, lsl #8
  407088:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
  40708c:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407090:	f003 0307 	and.w	r3, r3, #7
  407094:	f89e 2001 	ldrb.w	r2, [lr, #1]
  407098:	0950      	lsrs	r0, r2, #5
  40709a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40709e:	f004 0607 	and.w	r6, r4, #7
  4070a2:	7878      	ldrb	r0, [r7, #1]
  4070a4:	0945      	lsrs	r5, r0, #5
  4070a6:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  4070aa:	fb0c f505 	mul.w	r5, ip, r5
  4070ae:	fb0b 5303 	mla	r3, fp, r3, r5
  4070b2:	3380      	adds	r3, #128	; 0x80
  4070b4:	eb03 2503 	add.w	r5, r3, r3, lsl #8
  4070b8:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4070bc:	f002 021f 	and.w	r2, r2, #31
  4070c0:	f000 051f 	and.w	r5, r0, #31
  4070c4:	fb0c f505 	mul.w	r5, ip, r5
  4070c8:	fb0b 5202 	mla	r2, fp, r2, r5
  4070cc:	3280      	adds	r2, #128	; 0x80
  4070ce:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  4070d2:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  4070d6:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4070da:	0e9d      	lsrs	r5, r3, #26
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  4070dc:	f365 0402 	bfi	r4, r5, #0, #3
  4070e0:	f361 04c7 	bfi	r4, r1, #3, #5
  4070e4:	703c      	strb	r4, [r7, #0]
  4070e6:	f362 0004 	bfi	r0, r2, #0, #5
  4070ea:	0ddb      	lsrs	r3, r3, #23
  4070ec:	f363 1047 	bfi	r0, r3, #5, #3
  4070f0:	7078      	strb	r0, [r7, #1]
  4070f2:	f10e 0e02 	add.w	lr, lr, #2
  4070f6:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++) {
  4070f8:	45f0      	cmp	r8, lr
  4070fa:	d1b9      	bne.n	407070 <_lv_blend_map+0x36c>
  4070fc:	e7a4      	b.n	407048 <_lv_blend_map+0x344>
            int32_t x_end4 = draw_area_w - 4;
  4070fe:	990d      	ldr	r1, [sp, #52]	; 0x34
  407100:	3904      	subs	r1, #4
  407102:	910b      	str	r1, [sp, #44]	; 0x2c
            for(y = 0; y < draw_area_h; y++) {
  407104:	9908      	ldr	r1, [sp, #32]
  407106:	2900      	cmp	r1, #0
  407108:	f77f ae09 	ble.w	406d1e <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
  40710c:	005b      	lsls	r3, r3, #1
  40710e:	930e      	str	r3, [sp, #56]	; 0x38
                map_buf_first += map_w;
  407110:	0053      	lsls	r3, r2, #1
  407112:	930f      	str	r3, [sp, #60]	; 0x3c
  407114:	2300      	movs	r3, #0
  407116:	9307      	str	r3, [sp, #28]
  407118:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40711c:	e25d      	b.n	4075da <_lv_blend_map+0x8d6>
                    MAP_NORMAL_MASK_PX(x)
  40711e:	f8b8 3000 	ldrh.w	r3, [r8]
  407122:	f8ac 3000 	strh.w	r3, [ip]
  407126:	4673      	mov	r3, lr
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  407128:	3201      	adds	r2, #1
  40712a:	4593      	cmp	fp, r2
  40712c:	f000 83a0 	beq.w	407870 <_lv_blend_map+0xb6c>
  407130:	f108 0802 	add.w	r8, r8, #2
  407134:	f10c 0c02 	add.w	ip, ip, #2
  407138:	f01e 0f03 	tst.w	lr, #3
  40713c:	f000 83aa 	beq.w	407894 <_lv_blend_map+0xb90>
                    MAP_NORMAL_MASK_PX(x)
  407140:	f81e 6b01 	ldrb.w	r6, [lr], #1
  407144:	2e00      	cmp	r6, #0
  407146:	d0ee      	beq.n	407126 <_lv_blend_map+0x422>
  407148:	2eff      	cmp	r6, #255	; 0xff
  40714a:	d0e8      	beq.n	40711e <_lv_blend_map+0x41a>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40714c:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  407150:	f898 3000 	ldrb.w	r3, [r8]
  407154:	08d8      	lsrs	r0, r3, #3
  407156:	f89c 5000 	ldrb.w	r5, [ip]
  40715a:	08e9      	lsrs	r1, r5, #3
  40715c:	fb07 f101 	mul.w	r1, r7, r1
  407160:	fb06 1000 	mla	r0, r6, r0, r1
  407164:	3080      	adds	r0, #128	; 0x80
  407166:	eb00 2100 	add.w	r1, r0, r0, lsl #8
  40716a:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
  40716e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407172:	f003 0307 	and.w	r3, r3, #7
  407176:	f898 1001 	ldrb.w	r1, [r8, #1]
  40717a:	094c      	lsrs	r4, r1, #5
  40717c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  407180:	f005 0a07 	and.w	sl, r5, #7
  407184:	f89c 4001 	ldrb.w	r4, [ip, #1]
  407188:	ea4f 1954 	mov.w	r9, r4, lsr #5
  40718c:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  407190:	fb07 f909 	mul.w	r9, r7, r9
  407194:	fb06 9303 	mla	r3, r6, r3, r9
  407198:	3380      	adds	r3, #128	; 0x80
  40719a:	eb03 2903 	add.w	r9, r3, r3, lsl #8
  40719e:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4071a2:	f001 011f 	and.w	r1, r1, #31
  4071a6:	f004 091f 	and.w	r9, r4, #31
  4071aa:	fb07 f709 	mul.w	r7, r7, r9
  4071ae:	fb06 7101 	mla	r1, r6, r1, r7
  4071b2:	3180      	adds	r1, #128	; 0x80
  4071b4:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  4071b8:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  4071bc:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4071c0:	0e9e      	lsrs	r6, r3, #26
  4071c2:	f366 0502 	bfi	r5, r6, #0, #3
  4071c6:	f360 05c7 	bfi	r5, r0, #3, #5
  4071ca:	f88c 5000 	strb.w	r5, [ip]
  4071ce:	f361 0404 	bfi	r4, r1, #0, #5
  4071d2:	0ddb      	lsrs	r3, r3, #23
  4071d4:	f363 1447 	bfi	r4, r3, #5, #3
  4071d8:	f88c 4001 	strb.w	r4, [ip, #1]
  4071dc:	e7a3      	b.n	407126 <_lv_blend_map+0x422>
  4071de:	bf00      	nop
  4071e0:	00411161 	.word	0x00411161
                            disp_buf_first[x] = map_buf_first[x];
  4071e4:	f830 4c06 	ldrh.w	r4, [r0, #-6]
  4071e8:	f821 4c06 	strh.w	r4, [r1, #-6]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  4071ec:	f830 4c04 	ldrh.w	r4, [r0, #-4]
  4071f0:	f821 4c04 	strh.w	r4, [r1, #-4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  4071f4:	f830 4c02 	ldrh.w	r4, [r0, #-2]
  4071f8:	f821 4c02 	strh.w	r4, [r1, #-2]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  4071fc:	8804      	ldrh	r4, [r0, #0]
  4071fe:	800c      	strh	r4, [r1, #0]
                for(; x < x_end4; x += 4) {
  407200:	3204      	adds	r2, #4
  407202:	3304      	adds	r3, #4
  407204:	3008      	adds	r0, #8
  407206:	3108      	adds	r1, #8
  407208:	4593      	cmp	fp, r2
  40720a:	f340 816b 	ble.w	4074e4 <_lv_blend_map+0x7e0>
  40720e:	469c      	mov	ip, r3
                    if(*mask32) {
  407210:	f853 4c04 	ldr.w	r4, [r3, #-4]
  407214:	2c00      	cmp	r4, #0
  407216:	d0f3      	beq.n	407200 <_lv_blend_map+0x4fc>
                        if((*mask32) == 0xFFFFFFFF) {
  407218:	f1b4 3fff 	cmp.w	r4, #4294967295
  40721c:	d0e2      	beq.n	4071e4 <_lv_blend_map+0x4e0>
                            MAP_NORMAL_MASK_PX(x)
  40721e:	f813 6c04 	ldrb.w	r6, [r3, #-4]
  407222:	2e00      	cmp	r6, #0
  407224:	d050      	beq.n	4072c8 <_lv_blend_map+0x5c4>
  407226:	2eff      	cmp	r6, #255	; 0xff
  407228:	f000 814a 	beq.w	4074c0 <_lv_blend_map+0x7bc>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40722c:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
  407230:	f810 4c06 	ldrb.w	r4, [r0, #-6]
  407234:	08e5      	lsrs	r5, r4, #3
  407236:	f811 ec06 	ldrb.w	lr, [r1, #-6]
  40723a:	ea4f 07de 	mov.w	r7, lr, lsr #3
  40723e:	fb08 f707 	mul.w	r7, r8, r7
  407242:	fb06 7505 	mla	r5, r6, r5, r7
  407246:	3580      	adds	r5, #128	; 0x80
  407248:	eb05 2705 	add.w	r7, r5, r5, lsl #8
  40724c:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
  407250:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  407254:	9509      	str	r5, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407256:	f004 0407 	and.w	r4, r4, #7
  40725a:	f810 5c05 	ldrb.w	r5, [r0, #-5]
  40725e:	096f      	lsrs	r7, r5, #5
  407260:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
  407264:	940a      	str	r4, [sp, #40]	; 0x28
  407266:	f00e 0707 	and.w	r7, lr, #7
  40726a:	463c      	mov	r4, r7
  40726c:	f811 7c05 	ldrb.w	r7, [r1, #-5]
  407270:	ea4f 1957 	mov.w	r9, r7, lsr #5
  407274:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
  407278:	fb08 f909 	mul.w	r9, r8, r9
  40727c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40727e:	fb06 9404 	mla	r4, r6, r4, r9
  407282:	3480      	adds	r4, #128	; 0x80
  407284:	eb04 2904 	add.w	r9, r4, r4, lsl #8
  407288:	eb04 14c9 	add.w	r4, r4, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40728c:	f005 051f 	and.w	r5, r5, #31
  407290:	f007 091f 	and.w	r9, r7, #31
  407294:	fb08 f809 	mul.w	r8, r8, r9
  407298:	fb06 8505 	mla	r5, r6, r5, r8
  40729c:	3580      	adds	r5, #128	; 0x80
  40729e:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  4072a2:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  4072a6:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4072aa:	0ea6      	lsrs	r6, r4, #26
  4072ac:	f366 0e02 	bfi	lr, r6, #0, #3
  4072b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4072b2:	f366 0ec7 	bfi	lr, r6, #3, #5
  4072b6:	f801 ec06 	strb.w	lr, [r1, #-6]
  4072ba:	f365 0704 	bfi	r7, r5, #0, #5
  4072be:	0de4      	lsrs	r4, r4, #23
  4072c0:	f364 1747 	bfi	r7, r4, #5, #3
  4072c4:	f801 7c05 	strb.w	r7, [r1, #-5]
                            MAP_NORMAL_MASK_PX(x + 1)
  4072c8:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
  4072cc:	2e00      	cmp	r6, #0
  4072ce:	d050      	beq.n	407372 <_lv_blend_map+0x66e>
  4072d0:	2eff      	cmp	r6, #255	; 0xff
  4072d2:	f000 80fa 	beq.w	4074ca <_lv_blend_map+0x7c6>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4072d6:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
  4072da:	f810 4c04 	ldrb.w	r4, [r0, #-4]
  4072de:	08e5      	lsrs	r5, r4, #3
  4072e0:	f811 ec04 	ldrb.w	lr, [r1, #-4]
  4072e4:	ea4f 07de 	mov.w	r7, lr, lsr #3
  4072e8:	fb08 f707 	mul.w	r7, r8, r7
  4072ec:	fb06 7505 	mla	r5, r6, r5, r7
  4072f0:	3580      	adds	r5, #128	; 0x80
  4072f2:	eb05 2705 	add.w	r7, r5, r5, lsl #8
  4072f6:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
  4072fa:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  4072fe:	9509      	str	r5, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407300:	f004 0407 	and.w	r4, r4, #7
  407304:	f810 5c03 	ldrb.w	r5, [r0, #-3]
  407308:	096f      	lsrs	r7, r5, #5
  40730a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
  40730e:	940a      	str	r4, [sp, #40]	; 0x28
  407310:	f00e 0707 	and.w	r7, lr, #7
  407314:	463c      	mov	r4, r7
  407316:	f811 7c03 	ldrb.w	r7, [r1, #-3]
  40731a:	ea4f 1957 	mov.w	r9, r7, lsr #5
  40731e:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
  407322:	fb08 f909 	mul.w	r9, r8, r9
  407326:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407328:	fb06 9404 	mla	r4, r6, r4, r9
  40732c:	3480      	adds	r4, #128	; 0x80
  40732e:	eb04 2904 	add.w	r9, r4, r4, lsl #8
  407332:	eb04 14c9 	add.w	r4, r4, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407336:	f005 051f 	and.w	r5, r5, #31
  40733a:	f007 091f 	and.w	r9, r7, #31
  40733e:	fb08 f809 	mul.w	r8, r8, r9
  407342:	fb06 8505 	mla	r5, r6, r5, r8
  407346:	3580      	adds	r5, #128	; 0x80
  407348:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40734c:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  407350:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407354:	0ea6      	lsrs	r6, r4, #26
  407356:	f366 0e02 	bfi	lr, r6, #0, #3
  40735a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40735c:	f366 0ec7 	bfi	lr, r6, #3, #5
  407360:	f801 ec04 	strb.w	lr, [r1, #-4]
  407364:	f365 0704 	bfi	r7, r5, #0, #5
  407368:	0de4      	lsrs	r4, r4, #23
  40736a:	f364 1747 	bfi	r7, r4, #5, #3
  40736e:	f801 7c03 	strb.w	r7, [r1, #-3]
                            MAP_NORMAL_MASK_PX(x + 2)
  407372:	f81c 6c02 	ldrb.w	r6, [ip, #-2]
  407376:	2e00      	cmp	r6, #0
  407378:	d050      	beq.n	40741c <_lv_blend_map+0x718>
  40737a:	2eff      	cmp	r6, #255	; 0xff
  40737c:	f000 80aa 	beq.w	4074d4 <_lv_blend_map+0x7d0>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  407380:	f1c6 08ff 	rsb	r8, r6, #255	; 0xff
  407384:	f810 4c02 	ldrb.w	r4, [r0, #-2]
  407388:	08e5      	lsrs	r5, r4, #3
  40738a:	f811 ec02 	ldrb.w	lr, [r1, #-2]
  40738e:	ea4f 07de 	mov.w	r7, lr, lsr #3
  407392:	fb08 f707 	mul.w	r7, r8, r7
  407396:	fb06 7505 	mla	r5, r6, r5, r7
  40739a:	3580      	adds	r5, #128	; 0x80
  40739c:	eb05 2705 	add.w	r7, r5, r5, lsl #8
  4073a0:	eb05 15c7 	add.w	r5, r5, r7, lsl #7
  4073a4:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  4073a8:	9509      	str	r5, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4073aa:	f004 0407 	and.w	r4, r4, #7
  4073ae:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  4073b2:	096f      	lsrs	r7, r5, #5
  4073b4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
  4073b8:	940a      	str	r4, [sp, #40]	; 0x28
  4073ba:	f00e 0707 	and.w	r7, lr, #7
  4073be:	463c      	mov	r4, r7
  4073c0:	f811 7c01 	ldrb.w	r7, [r1, #-1]
  4073c4:	ea4f 1957 	mov.w	r9, r7, lsr #5
  4073c8:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
  4073cc:	fb08 f909 	mul.w	r9, r8, r9
  4073d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4073d2:	fb06 9404 	mla	r4, r6, r4, r9
  4073d6:	3480      	adds	r4, #128	; 0x80
  4073d8:	eb04 2904 	add.w	r9, r4, r4, lsl #8
  4073dc:	eb04 14c9 	add.w	r4, r4, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4073e0:	f005 051f 	and.w	r5, r5, #31
  4073e4:	f007 091f 	and.w	r9, r7, #31
  4073e8:	fb08 f809 	mul.w	r8, r8, r9
  4073ec:	fb06 8505 	mla	r5, r6, r5, r8
  4073f0:	3580      	adds	r5, #128	; 0x80
  4073f2:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  4073f6:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  4073fa:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4073fe:	0ea6      	lsrs	r6, r4, #26
  407400:	f366 0e02 	bfi	lr, r6, #0, #3
  407404:	9e09      	ldr	r6, [sp, #36]	; 0x24
  407406:	f366 0ec7 	bfi	lr, r6, #3, #5
  40740a:	f801 ec02 	strb.w	lr, [r1, #-2]
  40740e:	f365 0704 	bfi	r7, r5, #0, #5
  407412:	0de4      	lsrs	r4, r4, #23
  407414:	f364 1747 	bfi	r7, r4, #5, #3
  407418:	f801 7c01 	strb.w	r7, [r1, #-1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40741c:	f81c 6c01 	ldrb.w	r6, [ip, #-1]
  407420:	2e00      	cmp	r6, #0
  407422:	f43f aeed 	beq.w	407200 <_lv_blend_map+0x4fc>
  407426:	2eff      	cmp	r6, #255	; 0xff
  407428:	d059      	beq.n	4074de <_lv_blend_map+0x7da>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40742a:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
  40742e:	7805      	ldrb	r5, [r0, #0]
  407430:	08ec      	lsrs	r4, r5, #3
  407432:	f891 8000 	ldrb.w	r8, [r1]
  407436:	ea4f 07d8 	mov.w	r7, r8, lsr #3
  40743a:	fb09 f707 	mul.w	r7, r9, r7
  40743e:	fb06 7404 	mla	r4, r6, r4, r7
  407442:	3480      	adds	r4, #128	; 0x80
  407444:	eb04 2704 	add.w	r7, r4, r4, lsl #8
  407448:	eb04 14c7 	add.w	r4, r4, r7, lsl #7
  40744c:	f3c4 57c4 	ubfx	r7, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407450:	f005 0407 	and.w	r4, r5, #7
  407454:	7845      	ldrb	r5, [r0, #1]
  407456:	ea4f 1e55 	mov.w	lr, r5, lsr #5
  40745a:	eb0e 04c4 	add.w	r4, lr, r4, lsl #3
  40745e:	9409      	str	r4, [sp, #36]	; 0x24
  407460:	f008 0407 	and.w	r4, r8, #7
  407464:	f891 e001 	ldrb.w	lr, [r1, #1]
  407468:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  40746c:	eb0a 0ac4 	add.w	sl, sl, r4, lsl #3
  407470:	fb09 fa0a 	mul.w	sl, r9, sl
  407474:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407476:	fb06 a404 	mla	r4, r6, r4, sl
  40747a:	3480      	adds	r4, #128	; 0x80
  40747c:	eb04 2a04 	add.w	sl, r4, r4, lsl #8
  407480:	eb04 14ca 	add.w	r4, r4, sl, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407484:	f005 051f 	and.w	r5, r5, #31
  407488:	f00e 0a1f 	and.w	sl, lr, #31
  40748c:	fb09 f90a 	mul.w	r9, r9, sl
  407490:	fb06 9505 	mla	r5, r6, r5, r9
  407494:	3580      	adds	r5, #128	; 0x80
  407496:	eb05 2605 	add.w	r6, r5, r5, lsl #8
  40749a:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
  40749e:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4074a2:	0ea6      	lsrs	r6, r4, #26
  4074a4:	f366 0802 	bfi	r8, r6, #0, #3
  4074a8:	f367 08c7 	bfi	r8, r7, #3, #5
  4074ac:	f881 8000 	strb.w	r8, [r1]
  4074b0:	f365 0e04 	bfi	lr, r5, #0, #5
  4074b4:	0de4      	lsrs	r4, r4, #23
  4074b6:	f364 1e47 	bfi	lr, r4, #5, #3
  4074ba:	f881 e001 	strb.w	lr, [r1, #1]
  4074be:	e69f      	b.n	407200 <_lv_blend_map+0x4fc>
                            MAP_NORMAL_MASK_PX(x)
  4074c0:	f830 4c06 	ldrh.w	r4, [r0, #-6]
  4074c4:	f821 4c06 	strh.w	r4, [r1, #-6]
  4074c8:	e6fe      	b.n	4072c8 <_lv_blend_map+0x5c4>
                            MAP_NORMAL_MASK_PX(x + 1)
  4074ca:	f830 4c04 	ldrh.w	r4, [r0, #-4]
  4074ce:	f821 4c04 	strh.w	r4, [r1, #-4]
  4074d2:	e74e      	b.n	407372 <_lv_blend_map+0x66e>
                            MAP_NORMAL_MASK_PX(x + 2)
  4074d4:	f830 4c02 	ldrh.w	r4, [r0, #-2]
  4074d8:	f821 4c02 	strh.w	r4, [r1, #-2]
  4074dc:	e79e      	b.n	40741c <_lv_blend_map+0x718>
                            MAP_NORMAL_MASK_PX(x + 3)
  4074de:	8804      	ldrh	r4, [r0, #0]
  4074e0:	800c      	strh	r4, [r1, #0]
  4074e2:	e68d      	b.n	407200 <_lv_blend_map+0x4fc>
  4074e4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
                for(; x < draw_area_w ; x++) {
  4074e8:	4593      	cmp	fp, r2
  4074ea:	dd63      	ble.n	4075b4 <_lv_blend_map+0x8b0>
                    mask32++;
  4074ec:	4663      	mov	r3, ip
  4074ee:	3b01      	subs	r3, #1
  4074f0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4074f4:	9905      	ldr	r1, [sp, #20]
  4074f6:	eb01 080c 	add.w	r8, r1, ip
  4074fa:	9904      	ldr	r1, [sp, #16]
  4074fc:	448c      	add	ip, r1
  4074fe:	e00a      	b.n	407516 <_lv_blend_map+0x812>
                    MAP_NORMAL_MASK_PX(x)
  407500:	f8b8 1000 	ldrh.w	r1, [r8]
  407504:	f8ac 1000 	strh.w	r1, [ip]
                for(; x < draw_area_w ; x++) {
  407508:	3201      	adds	r2, #1
  40750a:	f108 0802 	add.w	r8, r8, #2
  40750e:	f10c 0c02 	add.w	ip, ip, #2
  407512:	4593      	cmp	fp, r2
  407514:	dd4e      	ble.n	4075b4 <_lv_blend_map+0x8b0>
                    MAP_NORMAL_MASK_PX(x)
  407516:	f813 7f01 	ldrb.w	r7, [r3, #1]!
  40751a:	2f00      	cmp	r7, #0
  40751c:	d0f4      	beq.n	407508 <_lv_blend_map+0x804>
  40751e:	2fff      	cmp	r7, #255	; 0xff
  407520:	d0ee      	beq.n	407500 <_lv_blend_map+0x7fc>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  407522:	f1c7 0eff 	rsb	lr, r7, #255	; 0xff
  407526:	f898 1000 	ldrb.w	r1, [r8]
  40752a:	08cc      	lsrs	r4, r1, #3
  40752c:	f89c 6000 	ldrb.w	r6, [ip]
  407530:	08f0      	lsrs	r0, r6, #3
  407532:	fb0e f000 	mul.w	r0, lr, r0
  407536:	fb07 0404 	mla	r4, r7, r4, r0
  40753a:	3480      	adds	r4, #128	; 0x80
  40753c:	eb04 2004 	add.w	r0, r4, r4, lsl #8
  407540:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
  407544:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407548:	f001 0107 	and.w	r1, r1, #7
  40754c:	f898 0001 	ldrb.w	r0, [r8, #1]
  407550:	0945      	lsrs	r5, r0, #5
  407552:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  407556:	f006 0a07 	and.w	sl, r6, #7
  40755a:	f89c 5001 	ldrb.w	r5, [ip, #1]
  40755e:	ea4f 1955 	mov.w	r9, r5, lsr #5
  407562:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  407566:	fb0e f909 	mul.w	r9, lr, r9
  40756a:	fb07 9101 	mla	r1, r7, r1, r9
  40756e:	3180      	adds	r1, #128	; 0x80
  407570:	eb01 2901 	add.w	r9, r1, r1, lsl #8
  407574:	eb01 11c9 	add.w	r1, r1, r9, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407578:	f000 001f 	and.w	r0, r0, #31
  40757c:	f005 091f 	and.w	r9, r5, #31
  407580:	fb0e fe09 	mul.w	lr, lr, r9
  407584:	fb07 e000 	mla	r0, r7, r0, lr
  407588:	3080      	adds	r0, #128	; 0x80
  40758a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
  40758e:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
  407592:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407596:	0e8f      	lsrs	r7, r1, #26
  407598:	f367 0602 	bfi	r6, r7, #0, #3
  40759c:	f364 06c7 	bfi	r6, r4, #3, #5
  4075a0:	f88c 6000 	strb.w	r6, [ip]
  4075a4:	f360 0504 	bfi	r5, r0, #0, #5
  4075a8:	0dc9      	lsrs	r1, r1, #23
  4075aa:	f361 1547 	bfi	r5, r1, #5, #3
  4075ae:	f88c 5001 	strb.w	r5, [ip, #1]
  4075b2:	e7a9      	b.n	407508 <_lv_blend_map+0x804>
                disp_buf_first += disp_w;
  4075b4:	9b04      	ldr	r3, [sp, #16]
  4075b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4075b8:	4413      	add	r3, r2
  4075ba:	9304      	str	r3, [sp, #16]
  4075bc:	9b06      	ldr	r3, [sp, #24]
  4075be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4075c0:	4413      	add	r3, r2
  4075c2:	9306      	str	r3, [sp, #24]
                map_buf_first += map_w;
  4075c4:	9b05      	ldr	r3, [sp, #20]
  4075c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4075c8:	4413      	add	r3, r2
  4075ca:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  4075cc:	9b07      	ldr	r3, [sp, #28]
  4075ce:	3301      	adds	r3, #1
  4075d0:	9307      	str	r3, [sp, #28]
  4075d2:	9a08      	ldr	r2, [sp, #32]
  4075d4:	429a      	cmp	r2, r3
  4075d6:	f43f aba2 	beq.w	406d1e <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  4075da:	f1bb 0f00 	cmp.w	fp, #0
  4075de:	f340 8145 	ble.w	40786c <_lv_blend_map+0xb68>
  4075e2:	9a06      	ldr	r2, [sp, #24]
  4075e4:	f012 0f03 	tst.w	r2, #3
  4075e8:	f000 8152 	beq.w	407890 <_lv_blend_map+0xb8c>
  4075ec:	f8dd 8014 	ldr.w	r8, [sp, #20]
  4075f0:	f8dd c010 	ldr.w	ip, [sp, #16]
  4075f4:	4696      	mov	lr, r2
  4075f6:	2200      	movs	r2, #0
  4075f8:	e5a2      	b.n	407140 <_lv_blend_map+0x43c>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  4075fa:	9d07      	ldr	r5, [sp, #28]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4075fc:	f1c5 06ff 	rsb	r6, r5, #255	; 0xff
  407600:	f898 3000 	ldrb.w	r3, [r8]
  407604:	08d9      	lsrs	r1, r3, #3
  407606:	f89c 4000 	ldrb.w	r4, [ip]
  40760a:	08e2      	lsrs	r2, r4, #3
  40760c:	fb06 f202 	mul.w	r2, r6, r2
  407610:	fb05 2101 	mla	r1, r5, r1, r2
  407614:	3180      	adds	r1, #128	; 0x80
  407616:	eb01 2201 	add.w	r2, r1, r1, lsl #8
  40761a:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
  40761e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407622:	f003 0307 	and.w	r3, r3, #7
  407626:	f898 2001 	ldrb.w	r2, [r8, #1]
  40762a:	0950      	lsrs	r0, r2, #5
  40762c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  407630:	f004 0e07 	and.w	lr, r4, #7
  407634:	f89c 0001 	ldrb.w	r0, [ip, #1]
  407638:	0947      	lsrs	r7, r0, #5
  40763a:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
  40763e:	fb06 f707 	mul.w	r7, r6, r7
  407642:	fb05 7303 	mla	r3, r5, r3, r7
  407646:	3380      	adds	r3, #128	; 0x80
  407648:	eb03 2703 	add.w	r7, r3, r3, lsl #8
  40764c:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407650:	f002 021f 	and.w	r2, r2, #31
  407654:	f000 071f 	and.w	r7, r0, #31
  407658:	fb06 f607 	mul.w	r6, r6, r7
  40765c:	fb05 6202 	mla	r2, r5, r2, r6
  407660:	3280      	adds	r2, #128	; 0x80
  407662:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  407666:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40766a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40766e:	0e9d      	lsrs	r5, r3, #26
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  407670:	f365 0402 	bfi	r4, r5, #0, #3
  407674:	f361 04c7 	bfi	r4, r1, #3, #5
  407678:	f88c 4000 	strb.w	r4, [ip]
  40767c:	f362 0004 	bfi	r0, r2, #0, #5
  407680:	0ddb      	lsrs	r3, r3, #23
  407682:	f363 1047 	bfi	r0, r3, #5, #3
  407686:	f88c 0001 	strb.w	r0, [ip, #1]
  40768a:	f108 0802 	add.w	r8, r8, #2
  40768e:	f10c 0c02 	add.w	ip, ip, #2
                for(x = 0; x < draw_area_w; x++) {
  407692:	45c2      	cmp	sl, r8
  407694:	d00a      	beq.n	4076ac <_lv_blend_map+0x9a8>
                    if(mask[x]) {
  407696:	f819 2f01 	ldrb.w	r2, [r9, #1]!
  40769a:	2a00      	cmp	r2, #0
  40769c:	d0f5      	beq.n	40768a <_lv_blend_map+0x986>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40769e:	2afc      	cmp	r2, #252	; 0xfc
  4076a0:	d8ab      	bhi.n	4075fa <_lv_blend_map+0x8f6>
  4076a2:	fb02 f20b 	mul.w	r2, r2, fp
  4076a6:	f3c2 2507 	ubfx	r5, r2, #8, #8
  4076aa:	e7a7      	b.n	4075fc <_lv_blend_map+0x8f8>
                disp_buf_first += disp_w;
  4076ac:	9b04      	ldr	r3, [sp, #16]
  4076ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4076b0:	4413      	add	r3, r2
  4076b2:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
  4076b4:	9b05      	ldr	r3, [sp, #20]
  4076b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4076b8:	4413      	add	r3, r2
  4076ba:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  4076bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4076be:	3301      	adds	r3, #1
  4076c0:	9309      	str	r3, [sp, #36]	; 0x24
  4076c2:	9a06      	ldr	r2, [sp, #24]
  4076c4:	990d      	ldr	r1, [sp, #52]	; 0x34
  4076c6:	440a      	add	r2, r1
  4076c8:	9206      	str	r2, [sp, #24]
  4076ca:	9a08      	ldr	r2, [sp, #32]
  4076cc:	429a      	cmp	r2, r3
  4076ce:	f43f ab26 	beq.w	406d1e <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
  4076d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4076d4:	2b00      	cmp	r3, #0
  4076d6:	dde9      	ble.n	4076ac <_lv_blend_map+0x9a8>
  4076d8:	9b05      	ldr	r3, [sp, #20]
  4076da:	4698      	mov	r8, r3
  4076dc:	f8dd c010 	ldr.w	ip, [sp, #16]
  4076e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4076e2:	eb03 0a02 	add.w	sl, r3, r2
  4076e6:	f8dd 9018 	ldr.w	r9, [sp, #24]
  4076ea:	e7d4      	b.n	407696 <_lv_blend_map+0x992>
    switch(mode) {
  4076ec:	2f01      	cmp	r7, #1
  4076ee:	d04e      	beq.n	40778e <_lv_blend_map+0xa8a>
  4076f0:	2f02      	cmp	r7, #2
  4076f2:	d141      	bne.n	407778 <_lv_blend_map+0xa74>
            blend_fp = color_blend_true_color_subtractive;
  4076f4:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 4078ac <_lv_blend_map+0xba8>
  4076f8:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  4076fc:	9309      	str	r3, [sp, #36]	; 0x24
  4076fe:	f8b5 c014 	ldrh.w	ip, [r5, #20]
  407702:	f10c 0c01 	add.w	ip, ip, #1
  407706:	ebac 0c03 	sub.w	ip, ip, r3
  40770a:	fa0f fc8c 	sxth.w	ip, ip
  40770e:	f9b6 1000 	ldrsh.w	r1, [r6]
  407712:	88b3      	ldrh	r3, [r6, #4]
  407714:	3301      	adds	r3, #1
  407716:	1a5b      	subs	r3, r3, r1
  407718:	b21b      	sxth	r3, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40771a:	9805      	ldr	r0, [sp, #20]
  40771c:	4681      	mov	r9, r0
  40771e:	fb00 f70c 	mul.w	r7, r0, ip
  407722:	9804      	ldr	r0, [sp, #16]
  407724:	eb00 0047 	add.w	r0, r0, r7, lsl #1
  407728:	9004      	str	r0, [sp, #16]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40772a:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40772e:	f9b5 5012 	ldrsh.w	r5, [r5, #18]
  407732:	1b77      	subs	r7, r6, r5
  407734:	4648      	mov	r0, r9
  407736:	1bc7      	subs	r7, r0, r7
  407738:	fb03 f707 	mul.w	r7, r3, r7
  40773c:	9807      	ldr	r0, [sp, #28]
  40773e:	eb00 0747 	add.w	r7, r0, r7, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  407742:	2c01      	cmp	r4, #1
  407744:	d026      	beq.n	407794 <_lv_blend_map+0xa90>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  407746:	9906      	ldr	r1, [sp, #24]
  407748:	eba1 010a 	sub.w	r1, r1, sl
        map_buf_tmp -= draw_area->x1;
  40774c:	eba7 0a4a 	sub.w	sl, r7, sl, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  407750:	9805      	ldr	r0, [sp, #20]
  407752:	4570      	cmp	r0, lr
  407754:	f73f aae3 	bgt.w	406d1e <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
  407758:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40775c:	9007      	str	r0, [sp, #28]
            map_buf_tmp += map_w;
  40775e:	005b      	lsls	r3, r3, #1
  407760:	9309      	str	r3, [sp, #36]	; 0x24
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  407762:	f8cd b014 	str.w	fp, [sp, #20]
  407766:	1c53      	adds	r3, r2, #1
  407768:	9a08      	ldr	r2, [sp, #32]
  40776a:	1a9b      	subs	r3, r3, r2
            mask_tmp += draw_area_w;
  40776c:	b21b      	sxth	r3, r3
  40776e:	9308      	str	r3, [sp, #32]
  407770:	f8cd b018 	str.w	fp, [sp, #24]
  407774:	468b      	mov	fp, r1
  407776:	e06a      	b.n	40784e <_lv_blend_map+0xb4a>
            LV_LOG_WARN("fill_blended: unsupported blend mode");
  407778:	4b48      	ldr	r3, [pc, #288]	; (40789c <_lv_blend_map+0xb98>)
  40777a:	9300      	str	r3, [sp, #0]
  40777c:	4b48      	ldr	r3, [pc, #288]	; (4078a0 <_lv_blend_map+0xb9c>)
  40777e:	f44f 7263 	mov.w	r2, #908	; 0x38c
  407782:	4948      	ldr	r1, [pc, #288]	; (4078a4 <_lv_blend_map+0xba0>)
  407784:	2002      	movs	r0, #2
  407786:	4c48      	ldr	r4, [pc, #288]	; (4078a8 <_lv_blend_map+0xba4>)
  407788:	47a0      	blx	r4
  40778a:	f7ff bac8 	b.w	406d1e <_lv_blend_map+0x1a>
            blend_fp = color_blend_true_color_additive;
  40778e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4078b0 <_lv_blend_map+0xbac>
  407792:	e7b1      	b.n	4076f8 <_lv_blend_map+0x9f4>
        map_buf_tmp -= draw_area->x1;
  407794:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407796:	1a52      	subs	r2, r2, r1
  407798:	eb07 0742 	add.w	r7, r7, r2, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40779c:	45f1      	cmp	r9, lr
  40779e:	f73f aabe 	bgt.w	406d1e <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
  4077a2:	ea4f 0a4c 	mov.w	sl, ip, lsl #1
            map_buf_tmp += map_w;
  4077a6:	005b      	lsls	r3, r3, #1
  4077a8:	9305      	str	r3, [sp, #20]
  4077aa:	f8cd a018 	str.w	sl, [sp, #24]
  4077ae:	463b      	mov	r3, r7
  4077b0:	4647      	mov	r7, r8
  4077b2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4077b6:	4698      	mov	r8, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  4077b8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  4077bc:	461c      	mov	r4, r3
  4077be:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
  4077c2:	4293      	cmp	r3, r2
  4077c4:	dc10      	bgt.n	4077e8 <_lv_blend_map+0xae4>
  4077c6:	005b      	lsls	r3, r3, #1
  4077c8:	eb0a 0503 	add.w	r5, sl, r3
  4077cc:	eb08 0603 	add.w	r6, r8, r3
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  4077d0:	465a      	mov	r2, fp
  4077d2:	8829      	ldrh	r1, [r5, #0]
  4077d4:	f836 0b02 	ldrh.w	r0, [r6], #2
  4077d8:	47b8      	blx	r7
  4077da:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  4077de:	3401      	adds	r4, #1
  4077e0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  4077e4:	429c      	cmp	r4, r3
  4077e6:	ddf3      	ble.n	4077d0 <_lv_blend_map+0xacc>
            disp_buf_tmp += disp_w;
  4077e8:	9b06      	ldr	r3, [sp, #24]
  4077ea:	449a      	add	sl, r3
            map_buf_tmp += map_w;
  4077ec:	9b05      	ldr	r3, [sp, #20]
  4077ee:	4498      	add	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  4077f0:	f109 0901 	add.w	r9, r9, #1
  4077f4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4077f8:	4599      	cmp	r9, r3
  4077fa:	dddd      	ble.n	4077b8 <_lv_blend_map+0xab4>
  4077fc:	f7ff ba8f 	b.w	406d1e <_lv_blend_map+0x1a>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  407800:	9a05      	ldr	r2, [sp, #20]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  407802:	8831      	ldrh	r1, [r6, #0]
  407804:	8820      	ldrh	r0, [r4, #0]
  407806:	47c0      	blx	r8
  407808:	8030      	strh	r0, [r6, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40780a:	3501      	adds	r5, #1
  40780c:	3602      	adds	r6, #2
  40780e:	3402      	adds	r4, #2
  407810:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
  407814:	429d      	cmp	r5, r3
  407816:	dc0b      	bgt.n	407830 <_lv_blend_map+0xb2c>
                if(mask_tmp[x] == 0) continue;
  407818:	f817 3b01 	ldrb.w	r3, [r7], #1
  40781c:	2b00      	cmp	r3, #0
  40781e:	d0f4      	beq.n	40780a <_lv_blend_map+0xb06>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  407820:	2bfc      	cmp	r3, #252	; 0xfc
  407822:	d8ed      	bhi.n	407800 <_lv_blend_map+0xafc>
  407824:	9a06      	ldr	r2, [sp, #24]
  407826:	fb03 f302 	mul.w	r3, r3, r2
  40782a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40782e:	e7e8      	b.n	407802 <_lv_blend_map+0xafe>
            disp_buf_tmp += disp_w;
  407830:	9b04      	ldr	r3, [sp, #16]
  407832:	9a07      	ldr	r2, [sp, #28]
  407834:	4413      	add	r3, r2
  407836:	9304      	str	r3, [sp, #16]
  407838:	9b08      	ldr	r3, [sp, #32]
  40783a:	449b      	add	fp, r3
            map_buf_tmp += map_w;
  40783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40783e:	449a      	add	sl, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  407840:	f109 0901 	add.w	r9, r9, #1
  407844:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  407848:	4599      	cmp	r9, r3
  40784a:	f73f aa68 	bgt.w	406d1e <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40784e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  407852:	461d      	mov	r5, r3
  407854:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
  407858:	4293      	cmp	r3, r2
  40785a:	dce9      	bgt.n	407830 <_lv_blend_map+0xb2c>
  40785c:	eb0b 0703 	add.w	r7, fp, r3
  407860:	005b      	lsls	r3, r3, #1
  407862:	9a04      	ldr	r2, [sp, #16]
  407864:	18d6      	adds	r6, r2, r3
  407866:	eb0a 0403 	add.w	r4, sl, r3
  40786a:	e7d5      	b.n	407818 <_lv_blend_map+0xb14>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40786c:	9b06      	ldr	r3, [sp, #24]
  40786e:	2200      	movs	r2, #0
                for(; x < x_end4; x += 4) {
  407870:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407872:	4291      	cmp	r1, r2
  407874:	f77f ae9e 	ble.w	4075b4 <_lv_blend_map+0x8b0>
  407878:	3304      	adds	r3, #4
  40787a:	1cd1      	adds	r1, r2, #3
  40787c:	0049      	lsls	r1, r1, #1
  40787e:	9805      	ldr	r0, [sp, #20]
  407880:	4408      	add	r0, r1
  407882:	9c04      	ldr	r4, [sp, #16]
  407884:	4421      	add	r1, r4
  407886:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40788a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40788e:	e4be      	b.n	40720e <_lv_blend_map+0x50a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  407890:	9b06      	ldr	r3, [sp, #24]
  407892:	2200      	movs	r2, #0
                for(; x < x_end4; x += 4) {
  407894:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407896:	4291      	cmp	r1, r2
  407898:	dcee      	bgt.n	407878 <_lv_blend_map+0xb74>
  40789a:	e628      	b.n	4074ee <_lv_blend_map+0x7ea>
  40789c:	0041c3c8 	.word	0x0041c3c8
  4078a0:	0041c384 	.word	0x0041c384
  4078a4:	0041c390 	.word	0x0041c390
  4078a8:	00410edd 	.word	0x00410edd
  4078ac:	004060a3 	.word	0x004060a3
  4078b0:	00405fc1 	.word	0x00405fc1

004078b4 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  4078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4078b8:	b0b7      	sub	sp, #220	; 0xdc
  4078ba:	4605      	mov	r5, r0
  4078bc:	9016      	str	r0, [sp, #88]	; 0x58
  4078be:	911c      	str	r1, [sp, #112]	; 0x70
  4078c0:	4690      	mov	r8, r2
  4078c2:	461f      	mov	r7, r3
  4078c4:	9305      	str	r3, [sp, #20]
  4078c6:	f89d 4100 	ldrb.w	r4, [sp, #256]	; 0x100
  4078ca:	940d      	str	r4, [sp, #52]	; 0x34
  4078cc:	f89d 4104 	ldrb.w	r4, [sp, #260]	; 0x104
  4078d0:	9408      	str	r4, [sp, #32]
    dest->x1 = src->x1;
  4078d2:	880b      	ldrh	r3, [r1, #0]
  4078d4:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
    dest->y1 = src->y1;
  4078d8:	884b      	ldrh	r3, [r1, #2]
  4078da:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
    dest->x2 = src->x2;
  4078de:	888b      	ldrh	r3, [r1, #4]
  4078e0:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
    dest->y2 = src->y2;
  4078e4:	88cb      	ldrh	r3, [r1, #6]
  4078e6:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  4078ea:	4baa      	ldr	r3, [pc, #680]	; (407b94 <lv_draw_map+0x2e0>)
  4078ec:	4798      	blx	r3
  4078ee:	9006      	str	r0, [sp, #24]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
  4078f0:	4ba9      	ldr	r3, [pc, #676]	; (407b98 <lv_draw_map+0x2e4>)
  4078f2:	4798      	blx	r3
  4078f4:	9013      	str	r0, [sp, #76]	; 0x4c
    const lv_area_t * disp_area = &draw_buf->area;

    /*Now `draw_area` has absolute coordinates.
     *Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  4078f6:	8a01      	ldrh	r1, [r0, #16]
  4078f8:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
  4078fc:	1a5b      	subs	r3, r3, r1
  4078fe:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
    draw_area.y1 -= disp_area->y1;
  407902:	8a42      	ldrh	r2, [r0, #18]
  407904:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
  407908:	1a9b      	subs	r3, r3, r2
  40790a:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
    draw_area.x2 -= disp_area->x1;
  40790e:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
  407912:	1a5b      	subs	r3, r3, r1
  407914:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
    draw_area.y2 -= disp_area->y1;
  407918:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
  40791c:	1a9b      	subs	r3, r3, r2
  40791e:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6

    bool mask_any = lv_draw_mask_is_any(map_area);
  407922:	4628      	mov	r0, r5
  407924:	4b9d      	ldr	r3, [pc, #628]	; (407b9c <lv_draw_map+0x2e8>)
  407926:	4798      	blx	r3
  407928:	9014      	str	r0, [sp, #80]	; 0x50

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40792a:	f080 0601 	eor.w	r6, r0, #1
  40792e:	b2f6      	uxtb	r6, r6
  407930:	b920      	cbnz	r0, 40793c <lv_draw_map+0x88>
  407932:	683b      	ldr	r3, [r7, #0]
  407934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  407938:	f000 80df 	beq.w	407afa <lv_draw_map+0x246>
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        //#if LV_DRAW_COMPLEX
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40793c:	9b08      	ldr	r3, [sp, #32]
  40793e:	2b00      	cmp	r3, #0
  407940:	bf14      	ite	ne
  407942:	f04f 0b03 	movne.w	fp, #3
  407946:	f04f 0b02 	moveq.w	fp, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40794a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40794c:	f9b1 0000 	ldrsh.w	r0, [r1]
  407950:	888f      	ldrh	r7, [r1, #4]
  407952:	3701      	adds	r7, #1
  407954:	1a3f      	subs	r7, r7, r0
  407956:	b23f      	sxth	r7, r7

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  407958:	f9bd 40d2 	ldrsh.w	r4, [sp, #210]	; 0xd2
  40795c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40795e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
  407962:	f8cd b01c 	str.w	fp, [sp, #28]
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  407966:	f9bd 50d0 	ldrsh.w	r5, [sp, #208]	; 0xd0
  40796a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40796e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  407972:	1a89      	subs	r1, r1, r2
  407974:	1a61      	subs	r1, r4, r1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  407976:	1ac0      	subs	r0, r0, r3
  407978:	1a28      	subs	r0, r5, r0
  40797a:	fb07 0101 	mla	r1, r7, r1, r0
  40797e:	fb01 810b 	mla	r1, r1, fp, r8
  407982:	910c      	str	r1, [sp, #48]	; 0x30
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  407984:	b2ad      	uxth	r5, r5
  407986:	442b      	add	r3, r5
  407988:	b299      	uxth	r1, r3
  40798a:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
  40798e:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
  407992:	3301      	adds	r3, #1
  407994:	1b5b      	subs	r3, r3, r5
  407996:	b29b      	uxth	r3, r3
  407998:	b218      	sxth	r0, r3
  40799a:	900e      	str	r0, [sp, #56]	; 0x38
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40799c:	3b01      	subs	r3, #1
  40799e:	440b      	add	r3, r1
  4079a0:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  4079a4:	b2a4      	uxth	r4, r4
  4079a6:	18a3      	adds	r3, r4, r2
  4079a8:	b21b      	sxth	r3, r3
  4079aa:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        blend_area.y2 = blend_area.y1;
  4079ae:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4079b2:	f8bd 50d6 	ldrh.w	r5, [sp, #214]	; 0xd6
  4079b6:	3501      	adds	r5, #1
  4079b8:	1b2d      	subs	r5, r5, r4
  4079ba:	b22d      	sxth	r5, r5

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  4079bc:	9a05      	ldr	r2, [sp, #20]
  4079be:	f8d2 a000 	ldr.w	sl, [r2]
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(!mask_any && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  4079c2:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
  4079c6:	bf14      	ite	ne
  4079c8:	2600      	movne	r6, #0
  4079ca:	f006 0601 	andeq.w	r6, r6, #1
  4079ce:	b13e      	cbz	r6, 4079e0 <lv_draw_map+0x12c>
  4079d0:	990d      	ldr	r1, [sp, #52]	; 0x34
  4079d2:	b929      	cbnz	r1, 4079e0 <lv_draw_map+0x12c>
  4079d4:	7a93      	ldrb	r3, [r2, #10]
  4079d6:	b91b      	cbnz	r3, 4079e0 <lv_draw_map+0x12c>
  4079d8:	9b08      	ldr	r3, [sp, #32]
  4079da:	2b00      	cmp	r3, #0
  4079dc:	f040 80aa 	bne.w	407b34 <lv_draw_map+0x280>
            lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  4079e0:	9806      	ldr	r0, [sp, #24]
  4079e2:	4b6f      	ldr	r3, [pc, #444]	; (407ba0 <lv_draw_map+0x2ec>)
  4079e4:	4798      	blx	r3
  4079e6:	4604      	mov	r4, r0
  4079e8:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  4079ea:	a834      	add	r0, sp, #208	; 0xd0
  4079ec:	4b6d      	ldr	r3, [pc, #436]	; (407ba4 <lv_draw_map+0x2f0>)
  4079ee:	4798      	blx	r3
  4079f0:	4284      	cmp	r4, r0
  4079f2:	f080 8139 	bcs.w	407c68 <lv_draw_map+0x3b4>
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  4079f6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4079f8:	0070      	lsls	r0, r6, #1
  4079fa:	4c6b      	ldr	r4, [pc, #428]	; (407ba8 <lv_draw_map+0x2f4>)
  4079fc:	47a0      	blx	r4
  4079fe:	9015      	str	r0, [sp, #84]	; 0x54
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
  407a00:	4630      	mov	r0, r6
  407a02:	47a0      	blx	r4
  407a04:	900f      	str	r0, [sp, #60]	; 0x3c

#if LV_DRAW_COMPLEX
            lv_img_transform_dsc_t trans_dsc;
            lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  407a06:	214c      	movs	r1, #76	; 0x4c
  407a08:	a821      	add	r0, sp, #132	; 0x84
  407a0a:	4b68      	ldr	r3, [pc, #416]	; (407bac <lv_draw_map+0x2f8>)
  407a0c:	4798      	blx	r3
            if(transform) {
  407a0e:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
  407a12:	d02d      	beq.n	407a70 <lv_draw_map+0x1bc>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  407a14:	9b08      	ldr	r3, [sp, #32]
  407a16:	2b00      	cmp	r3, #0
  407a18:	f040 812b 	bne.w	407c72 <lv_draw_map+0x3be>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  407a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a1e:	2b00      	cmp	r3, #0
  407a20:	bf0c      	ite	eq
  407a22:	2204      	moveq	r2, #4
  407a24:	2206      	movne	r2, #6

                trans_dsc.cfg.angle = draw_dsc->angle;
  407a26:	9805      	ldr	r0, [sp, #20]
  407a28:	8803      	ldrh	r3, [r0, #0]
  407a2a:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  407a2e:	8843      	ldrh	r3, [r0, #2]
  407a30:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
                trans_dsc.cfg.src = map_p;
  407a34:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
                trans_dsc.cfg.src_w = map_w;
  407a38:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
  407a3c:	9916      	ldr	r1, [sp, #88]	; 0x58
  407a3e:	88cb      	ldrh	r3, [r1, #6]
  407a40:	3301      	adds	r3, #1
  407a42:	8849      	ldrh	r1, [r1, #2]
  407a44:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  407a46:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                trans_dsc.cfg.cf = cf;
  407a4a:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  407a4e:	8883      	ldrh	r3, [r0, #4]
  407a50:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  407a54:	88c3      	ldrh	r3, [r0, #6]
  407a56:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                trans_dsc.cfg.color = draw_dsc->recolor;
  407a5a:	8903      	ldrh	r3, [r0, #8]
  407a5c:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  407a60:	7d03      	ldrb	r3, [r0, #20]
  407a62:	f3c3 0300 	ubfx	r3, r3, #0, #1
  407a66:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97

                _lv_img_buf_transform_init(&trans_dsc);
  407a6a:	a821      	add	r0, sp, #132	; 0x84
  407a6c:	4b50      	ldr	r3, [pc, #320]	; (407bb0 <lv_draw_map+0x2fc>)
  407a6e:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  407a70:	9805      	ldr	r0, [sp, #20]
  407a72:	7a83      	ldrb	r3, [r0, #10]
  407a74:	43da      	mvns	r2, r3
  407a76:	b2d2      	uxtb	r2, r2
  407a78:	9209      	str	r2, [sp, #36]	; 0x24
            if(draw_dsc->recolor_opa != 0) {
  407a7a:	2b00      	cmp	r3, #0
  407a7c:	f000 80fb 	beq.w	407c76 <lv_draw_map+0x3c2>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  407a80:	b29b      	uxth	r3, r3
  407a82:	7a02      	ldrb	r2, [r0, #8]
  407a84:	08d1      	lsrs	r1, r2, #3
  407a86:	fb01 f103 	mul.w	r1, r1, r3
  407a8a:	9112      	str	r1, [sp, #72]	; 0x48
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  407a8c:	f002 0107 	and.w	r1, r2, #7
  407a90:	7a42      	ldrb	r2, [r0, #9]
  407a92:	0950      	lsrs	r0, r2, #5
  407a94:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  407a98:	fb01 f103 	mul.w	r1, r1, r3
  407a9c:	9111      	str	r1, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  407a9e:	f002 021f 	and.w	r2, r2, #31
  407aa2:	fb02 f303 	mul.w	r3, r2, r3
  407aa6:	9310      	str	r3, [sp, #64]	; 0x40
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  407aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407aaa:	9a08      	ldr	r2, [sp, #32]
  407aac:	4313      	orrs	r3, r2
  407aae:	931d      	str	r3, [sp, #116]	; 0x74
  407ab0:	f040 80e6 	bne.w	407c80 <lv_draw_map+0x3cc>
  407ab4:	9b05      	ldr	r3, [sp, #20]
  407ab6:	681b      	ldr	r3, [r3, #0]
  407ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  407abc:	bf14      	ite	ne
  407abe:	2302      	movne	r3, #2
  407ac0:	2301      	moveq	r3, #1
  407ac2:	9318      	str	r3, [sp, #96]	; 0x60
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

            /*Prepare the `mask_buf`if there are other masks*/
            if(mask_any) {
  407ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407ac6:	2b00      	cmp	r3, #0
  407ac8:	f040 80dd 	bne.w	407c86 <lv_draw_map+0x3d2>
            }

            int32_t x;
            int32_t y;
#if LV_DRAW_COMPLEX
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  407acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407ace:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  407ad2:	f9bd 20d2 	ldrsh.w	r2, [sp, #210]	; 0xd2
  407ad6:	4413      	add	r3, r2
  407ad8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407ada:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  407ade:	1a9b      	subs	r3, r3, r2
  407ae0:	931b      	str	r3, [sp, #108]	; 0x6c
#endif
            for(y = 0; y < draw_area_h; y++) {
  407ae2:	951a      	str	r5, [sp, #104]	; 0x68
  407ae4:	2d00      	cmp	r5, #0
  407ae6:	f340 81eb 	ble.w	407ec0 <lv_draw_map+0x60c>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }
#endif

                map_buf_tmp += map_w * px_size_byte;
  407aea:	9b07      	ldr	r3, [sp, #28]
  407aec:	fb03 f307 	mul.w	r3, r3, r7
  407af0:	9319      	str	r3, [sp, #100]	; 0x64
  407af2:	2300      	movs	r3, #0
  407af4:	930a      	str	r3, [sp, #40]	; 0x28
  407af6:	930b      	str	r3, [sp, #44]	; 0x2c
  407af8:	e157      	b.n	407daa <lv_draw_map+0x4f6>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  407afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407afc:	2b00      	cmp	r3, #0
  407afe:	f47f af1d 	bne.w	40793c <lv_draw_map+0x88>
  407b02:	9b08      	ldr	r3, [sp, #32]
  407b04:	2b00      	cmp	r3, #0
  407b06:	f47f af19 	bne.w	40793c <lv_draw_map+0x88>
  407b0a:	9b05      	ldr	r3, [sp, #20]
  407b0c:	7a9b      	ldrb	r3, [r3, #10]
  407b0e:	2b00      	cmp	r3, #0
  407b10:	f47f af14 	bne.w	40793c <lv_draw_map+0x88>
                      draw_dsc->blend_mode);
  407b14:	9a05      	ldr	r2, [sp, #20]
  407b16:	7b13      	ldrb	r3, [r2, #12]
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  407b18:	f003 030f 	and.w	r3, r3, #15
  407b1c:	9302      	str	r3, [sp, #8]
  407b1e:	7ad3      	ldrb	r3, [r2, #11]
  407b20:	9301      	str	r3, [sp, #4]
  407b22:	2301      	movs	r3, #1
  407b24:	9300      	str	r3, [sp, #0]
  407b26:	2300      	movs	r3, #0
  407b28:	4642      	mov	r2, r8
  407b2a:	9916      	ldr	r1, [sp, #88]	; 0x58
  407b2c:	981c      	ldr	r0, [sp, #112]	; 0x70
  407b2e:	4c21      	ldr	r4, [pc, #132]	; (407bb4 <lv_draw_map+0x300>)
  407b30:	47a0      	blx	r4
  407b32:	e1e2      	b.n	407efa <lv_draw_map+0x646>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  407b34:	9806      	ldr	r0, [sp, #24]
  407b36:	4b1a      	ldr	r3, [pc, #104]	; (407ba0 <lv_draw_map+0x2ec>)
  407b38:	4798      	blx	r3
  407b3a:	4604      	mov	r4, r0
  407b3c:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  407b3e:	a834      	add	r0, sp, #208	; 0xd0
  407b40:	4b18      	ldr	r3, [pc, #96]	; (407ba4 <lv_draw_map+0x2f0>)
  407b42:	4798      	blx	r3
  407b44:	4284      	cmp	r4, r0
  407b46:	d211      	bcs.n	407b6c <lv_draw_map+0x2b8>
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  407b48:	ea4f 0048 	mov.w	r0, r8, lsl #1
  407b4c:	4c16      	ldr	r4, [pc, #88]	; (407ba8 <lv_draw_map+0x2f4>)
  407b4e:	47a0      	blx	r4
  407b50:	4681      	mov	r9, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
  407b52:	4640      	mov	r0, r8
  407b54:	47a0      	blx	r4
  407b56:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  407b58:	9506      	str	r5, [sp, #24]
  407b5a:	2d00      	cmp	r5, #0
  407b5c:	dd66      	ble.n	407c2c <lv_draw_map+0x378>
                map_buf_tmp += map_w * px_size_byte;
  407b5e:	9b07      	ldr	r3, [sp, #28]
  407b60:	fb03 fa07 	mul.w	sl, r3, r7
  407b64:	2500      	movs	r5, #0
  407b66:	46ac      	mov	ip, r5
  407b68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  407b6a:	e039      	b.n	407be0 <lv_draw_map+0x32c>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  407b6c:	a834      	add	r0, sp, #208	; 0xd0
  407b6e:	4b0d      	ldr	r3, [pc, #52]	; (407ba4 <lv_draw_map+0x2f0>)
  407b70:	4798      	blx	r3
  407b72:	4680      	mov	r8, r0
  407b74:	e7e8      	b.n	407b48 <lv_draw_map+0x294>
  407b76:	445b      	add	r3, fp
  407b78:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  407b7a:	4572      	cmp	r2, lr
  407b7c:	d01c      	beq.n	407bb8 <lv_draw_map+0x304>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  407b7e:	7899      	ldrb	r1, [r3, #2]
                    mask_buf[px_i] = px_opa;
  407b80:	f802 1b01 	strb.w	r1, [r2], #1
                    if(px_opa) {
  407b84:	2900      	cmp	r1, #0
  407b86:	d0f6      	beq.n	407b76 <lv_draw_map+0x2c2>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  407b88:	7858      	ldrb	r0, [r3, #1]
  407b8a:	7819      	ldrb	r1, [r3, #0]
  407b8c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  407b90:	8039      	strh	r1, [r7, #0]
  407b92:	e7f0      	b.n	407b76 <lv_draw_map+0x2c2>
  407b94:	00405f49 	.word	0x00405f49
  407b98:	004101c9 	.word	0x004101c9
  407b9c:	0040a0cd 	.word	0x0040a0cd
  407ba0:	0041013d 	.word	0x0041013d
  407ba4:	00410775 	.word	0x00410775
  407ba8:	004115a9 	.word	0x004115a9
  407bac:	004116ed 	.word	0x004116ed
  407bb0:	0040d031 	.word	0x0040d031
  407bb4:	00406d05 	.word	0x00406d05
                map_buf_tmp += map_w * px_size_byte;
  407bb8:	4456      	add	r6, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  407bba:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
  407bbe:	3301      	adds	r3, #1
  407bc0:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	; 0xd0
  407bc4:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  407bc6:	fa0c f383 	sxtah	r3, ip, r3
  407bca:	4598      	cmp	r8, r3
  407bcc:	d914      	bls.n	407bf8 <lv_draw_map+0x344>
                    blend_area.y2 ++;
  407bce:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  407bd2:	3301      	adds	r3, #1
  407bd4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            for(y = 0; y < draw_area_h; y++) {
  407bd8:	3501      	adds	r5, #1
  407bda:	9b06      	ldr	r3, [sp, #24]
  407bdc:	429d      	cmp	r5, r3
  407bde:	d025      	beq.n	407c2c <lv_draw_map+0x378>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  407be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407be2:	2b00      	cmp	r3, #0
  407be4:	dde8      	ble.n	407bb8 <lv_draw_map+0x304>
  407be6:	eb04 020c 	add.w	r2, r4, ip
  407bea:	eb09 074c 	add.w	r7, r9, ip, lsl #1
  407bee:	449c      	add	ip, r3
  407bf0:	eb04 0e0c 	add.w	lr, r4, ip
  407bf4:	4633      	mov	r3, r6
  407bf6:	e7c2      	b.n	407b7e <lv_draw_map+0x2ca>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  407bf8:	9a05      	ldr	r2, [sp, #20]
  407bfa:	7b13      	ldrb	r3, [r2, #12]
  407bfc:	f003 030f 	and.w	r3, r3, #15
  407c00:	9302      	str	r3, [sp, #8]
  407c02:	7ad3      	ldrb	r3, [r2, #11]
  407c04:	9301      	str	r3, [sp, #4]
  407c06:	2302      	movs	r3, #2
  407c08:	9300      	str	r3, [sp, #0]
  407c0a:	4623      	mov	r3, r4
  407c0c:	464a      	mov	r2, r9
  407c0e:	a91f      	add	r1, sp, #124	; 0x7c
  407c10:	981c      	ldr	r0, [sp, #112]	; 0x70
  407c12:	4fa4      	ldr	r7, [pc, #656]	; (407ea4 <lv_draw_map+0x5f0>)
  407c14:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  407c16:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  407c1a:	3301      	adds	r3, #1
  407c1c:	b21b      	sxth	r3, r3
  407c1e:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                    blend_area.y2 = blend_area.y1;
  407c22:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                    px_i = 0;
  407c26:	f04f 0c00 	mov.w	ip, #0
  407c2a:	e7d5      	b.n	407bd8 <lv_draw_map+0x324>
            if(blend_area.y1 != blend_area.y2) {
  407c2c:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  407c30:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
  407c34:	429a      	cmp	r2, r3
  407c36:	d011      	beq.n	407c5c <lv_draw_map+0x3a8>
                blend_area.y2--;
  407c38:	3b01      	subs	r3, #1
  407c3a:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  407c3e:	9a05      	ldr	r2, [sp, #20]
  407c40:	7b13      	ldrb	r3, [r2, #12]
  407c42:	f003 030f 	and.w	r3, r3, #15
  407c46:	9302      	str	r3, [sp, #8]
  407c48:	7ad3      	ldrb	r3, [r2, #11]
  407c4a:	9301      	str	r3, [sp, #4]
  407c4c:	2302      	movs	r3, #2
  407c4e:	9300      	str	r3, [sp, #0]
  407c50:	4623      	mov	r3, r4
  407c52:	464a      	mov	r2, r9
  407c54:	a91f      	add	r1, sp, #124	; 0x7c
  407c56:	981c      	ldr	r0, [sp, #112]	; 0x70
  407c58:	4d92      	ldr	r5, [pc, #584]	; (407ea4 <lv_draw_map+0x5f0>)
  407c5a:	47a8      	blx	r5
            lv_mem_buf_release(mask_buf);
  407c5c:	4620      	mov	r0, r4
  407c5e:	4c92      	ldr	r4, [pc, #584]	; (407ea8 <lv_draw_map+0x5f4>)
  407c60:	47a0      	blx	r4
            lv_mem_buf_release(map2);
  407c62:	4648      	mov	r0, r9
  407c64:	47a0      	blx	r4
        if(!mask_any && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  407c66:	e148      	b.n	407efa <lv_draw_map+0x646>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  407c68:	a834      	add	r0, sp, #208	; 0xd0
  407c6a:	4b90      	ldr	r3, [pc, #576]	; (407eac <lv_draw_map+0x5f8>)
  407c6c:	4798      	blx	r3
  407c6e:	9017      	str	r0, [sp, #92]	; 0x5c
  407c70:	e6c1      	b.n	4079f6 <lv_draw_map+0x142>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  407c72:	2205      	movs	r2, #5
  407c74:	e6d7      	b.n	407a26 <lv_draw_map+0x172>
            uint16_t recolor_premult[3] = {0};
  407c76:	2300      	movs	r3, #0
  407c78:	9310      	str	r3, [sp, #64]	; 0x40
  407c7a:	9311      	str	r3, [sp, #68]	; 0x44
  407c7c:	9312      	str	r3, [sp, #72]	; 0x48
  407c7e:	e713      	b.n	407aa8 <lv_draw_map+0x1f4>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  407c80:	2302      	movs	r3, #2
  407c82:	9318      	str	r3, [sp, #96]	; 0x60
  407c84:	e71e      	b.n	407ac4 <lv_draw_map+0x210>
                lv_memset_ff(mask_buf, mask_buf_size);
  407c86:	9917      	ldr	r1, [sp, #92]	; 0x5c
  407c88:	980f      	ldr	r0, [sp, #60]	; 0x3c
  407c8a:	4b89      	ldr	r3, [pc, #548]	; (407eb0 <lv_draw_map+0x5fc>)
  407c8c:	4798      	blx	r3
  407c8e:	e71d      	b.n	407acc <lv_draw_map+0x218>
                            mask_buf[px_i] = trans_dsc.res.opa;
  407c90:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
  407c94:	702b      	strb	r3, [r5, #0]
                            c.full = trans_dsc.res.color.full;
  407c96:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
                    if(draw_dsc->recolor_opa != 0) {
  407c9a:	9a05      	ldr	r2, [sp, #20]
  407c9c:	7a92      	ldrb	r2, [r2, #10]
  407c9e:	bb6a      	cbnz	r2, 407cfc <lv_draw_map+0x448>
                    map2[px_i].full = c.full;
  407ca0:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  407ca4:	3401      	adds	r4, #1
  407ca6:	445e      	add	r6, fp
  407ca8:	3501      	adds	r5, #1
  407caa:	42bc      	cmp	r4, r7
  407cac:	d05b      	beq.n	407d66 <lv_draw_map+0x4b2>
                    if(transform) {
  407cae:	f1ba 7f80 	cmp.w	sl, #16777216	; 0x1000000
  407cb2:	d00b      	beq.n	407ccc <lv_draw_map+0x418>
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  407cb4:	9b06      	ldr	r3, [sp, #24]
  407cb6:	18e1      	adds	r1, r4, r3
  407cb8:	9a07      	ldr	r2, [sp, #28]
  407cba:	b209      	sxth	r1, r1
  407cbc:	a821      	add	r0, sp, #132	; 0x84
  407cbe:	4b7d      	ldr	r3, [pc, #500]	; (407eb4 <lv_draw_map+0x600>)
  407cc0:	4798      	blx	r3
                        if(ret == false) {
  407cc2:	2800      	cmp	r0, #0
  407cc4:	d1e4      	bne.n	407c90 <lv_draw_map+0x3dc>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  407cc6:	2300      	movs	r3, #0
  407cc8:	702b      	strb	r3, [r5, #0]
                            continue;
  407cca:	e7eb      	b.n	407ca4 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  407ccc:	9b08      	ldr	r3, [sp, #32]
  407cce:	b123      	cbz	r3, 407cda <lv_draw_map+0x426>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  407cd0:	78b3      	ldrb	r3, [r6, #2]
                            mask_buf[px_i] = px_opa;
  407cd2:	702b      	strb	r3, [r5, #0]
                            if(px_opa == 0) {
  407cd4:	2b00      	cmp	r3, #0
  407cd6:	d0e5      	beq.n	407ca4 <lv_draw_map+0x3f0>
  407cd8:	e001      	b.n	407cde <lv_draw_map+0x42a>
                            mask_buf[px_i] = 0xFF;
  407cda:	23ff      	movs	r3, #255	; 0xff
  407cdc:	702b      	strb	r3, [r5, #0]
                        c.full =  map_px[0] + (map_px[1] << 8);
  407cde:	7872      	ldrb	r2, [r6, #1]
  407ce0:	7833      	ldrb	r3, [r6, #0]
  407ce2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  407ce6:	b29b      	uxth	r3, r3
                            if(c.full == chroma_keyed_color.full) {
  407ce8:	f24e 0207 	movw	r2, #57351	; 0xe007
  407cec:	4293      	cmp	r3, r2
  407cee:	d1d4      	bne.n	407c9a <lv_draw_map+0x3e6>
  407cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407cf2:	2a00      	cmp	r2, #0
  407cf4:	d0d1      	beq.n	407c9a <lv_draw_map+0x3e6>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  407cf6:	2300      	movs	r3, #0
  407cf8:	702b      	strb	r3, [r5, #0]
                                continue;
  407cfa:	e7d3      	b.n	407ca4 <lv_draw_map+0x3f0>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  407cfc:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  407d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407d02:	9812      	ldr	r0, [sp, #72]	; 0x48
  407d04:	fb02 0101 	mla	r1, r2, r1, r0
  407d08:	3180      	adds	r1, #128	; 0x80
  407d0a:	eb01 2201 	add.w	r2, r1, r1, lsl #8
  407d0e:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
  407d12:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  407d16:	f003 0007 	and.w	r0, r3, #7
  407d1a:	0b5a      	lsrs	r2, r3, #13
  407d1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  407d20:	9809      	ldr	r0, [sp, #36]	; 0x24
  407d22:	4686      	mov	lr, r0
  407d24:	9811      	ldr	r0, [sp, #68]	; 0x44
  407d26:	fb0e 0202 	mla	r2, lr, r2, r0
  407d2a:	3280      	adds	r2, #128	; 0x80
  407d2c:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  407d30:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  407d34:	f3c3 2304 	ubfx	r3, r3, #8, #5
  407d38:	9810      	ldr	r0, [sp, #64]	; 0x40
  407d3a:	fb0e 0303 	mla	r3, lr, r3, r0
  407d3e:	3380      	adds	r3, #128	; 0x80
  407d40:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  407d44:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  407d48:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  407d4c:	0e90      	lsrs	r0, r2, #26
  407d4e:	f360 0902 	bfi	r9, r0, #0, #3
  407d52:	f361 09c7 	bfi	r9, r1, #3, #5
  407d56:	f363 290c 	bfi	r9, r3, #8, #5
  407d5a:	0dd2      	lsrs	r2, r2, #23
  407d5c:	f362 394f 	bfi	r9, r2, #13, #3
  407d60:	fa1f f389 	uxth.w	r3, r9
  407d64:	e79c      	b.n	407ca0 <lv_draw_map+0x3ec>
  407d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407d6a:	189c      	adds	r4, r3, r2
                if(mask_any) {
  407d6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407d6e:	2b00      	cmp	r3, #0
  407d70:	d13b      	bne.n	407dea <lv_draw_map+0x536>
                map_buf_tmp += map_w * px_size_byte;
  407d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407d74:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407d76:	4413      	add	r3, r2
  407d78:	930c      	str	r3, [sp, #48]	; 0x30
  407d7a:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
  407d7e:	3301      	adds	r3, #1
  407d80:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	; 0xd0
  407d84:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  407d86:	fa04 f383 	sxtah	r3, r4, r3
  407d8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  407d8c:	429a      	cmp	r2, r3
  407d8e:	d959      	bls.n	407e44 <lv_draw_map+0x590>
                    blend_area.y2 ++;
  407d90:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  407d94:	3301      	adds	r3, #1
  407d96:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
  407d9a:	940b      	str	r4, [sp, #44]	; 0x2c
            for(y = 0; y < draw_area_h; y++) {
  407d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d9e:	3301      	adds	r3, #1
  407da0:	930a      	str	r3, [sp, #40]	; 0x28
  407da2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407da4:	4293      	cmp	r3, r2
  407da6:	f000 808b 	beq.w	407ec0 <lv_draw_map+0x60c>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  407daa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407dac:	f9b3 8010 	ldrsh.w	r8, [r3, #16]
  407db0:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
  407db4:	4498      	add	r8, r3
  407db6:	9b16      	ldr	r3, [sp, #88]	; 0x58
  407db8:	f9b3 3000 	ldrsh.w	r3, [r3]
  407dbc:	eba8 0303 	sub.w	r3, r8, r3
  407dc0:	9306      	str	r3, [sp, #24]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  407dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407dc4:	461f      	mov	r7, r3
  407dc6:	2b00      	cmp	r3, #0
  407dc8:	dd0d      	ble.n	407de6 <lv_draw_map+0x532>
  407dca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407dce:	18d5      	adds	r5, r2, r3
  407dd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  407dd2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
  407dd6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  407dd8:	2400      	movs	r4, #0
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  407dda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  407ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407dde:	4413      	add	r3, r2
  407de0:	b21b      	sxth	r3, r3
  407de2:	9307      	str	r3, [sp, #28]
  407de4:	e763      	b.n	407cae <lv_draw_map+0x3fa>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  407de6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407de8:	e7c0      	b.n	407d6c <lv_draw_map+0x4b8>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + draw_buf->area.x1,
  407dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407dec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407dee:	4413      	add	r3, r2
  407df0:	461d      	mov	r5, r3
  407df2:	f8bd 10d0 	ldrh.w	r1, [sp, #208]	; 0xd0
  407df6:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	; 0xd4
  407dfa:	3301      	adds	r3, #1
  407dfc:	1a5b      	subs	r3, r3, r1
                                                      y + draw_area.y1 + draw_buf->area.y1,
  407dfe:	f8bd 20d2 	ldrh.w	r2, [sp, #210]	; 0xd2
  407e02:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  407e04:	8a70      	ldrh	r0, [r6, #18]
  407e06:	4402      	add	r2, r0
  407e08:	980a      	ldr	r0, [sp, #40]	; 0x28
  407e0a:	4402      	add	r2, r0
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + draw_buf->area.x1,
  407e0c:	8a30      	ldrh	r0, [r6, #16]
  407e0e:	4401      	add	r1, r0
  407e10:	b21b      	sxth	r3, r3
  407e12:	b212      	sxth	r2, r2
  407e14:	b209      	sxth	r1, r1
  407e16:	4628      	mov	r0, r5
  407e18:	4e27      	ldr	r6, [pc, #156]	; (407eb8 <lv_draw_map+0x604>)
  407e1a:	47b0      	blx	r6
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  407e1c:	b128      	cbz	r0, 407e2a <lv_draw_map+0x576>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  407e1e:	2802      	cmp	r0, #2
  407e20:	9a18      	ldr	r2, [sp, #96]	; 0x60
  407e22:	bf08      	it	eq
  407e24:	4602      	moveq	r2, r0
  407e26:	9218      	str	r2, [sp, #96]	; 0x60
  407e28:	e7a3      	b.n	407d72 <lv_draw_map+0x4be>
  407e2a:	f8bd 10d4 	ldrh.w	r1, [sp, #212]	; 0xd4
  407e2e:	3101      	adds	r1, #1
  407e30:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
  407e34:	1ac9      	subs	r1, r1, r3
                        lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  407e36:	b209      	sxth	r1, r1
  407e38:	4628      	mov	r0, r5
  407e3a:	4b20      	ldr	r3, [pc, #128]	; (407ebc <lv_draw_map+0x608>)
  407e3c:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  407e3e:	2302      	movs	r3, #2
  407e40:	9318      	str	r3, [sp, #96]	; 0x60
  407e42:	e796      	b.n	407d72 <lv_draw_map+0x4be>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  407e44:	9d05      	ldr	r5, [sp, #20]
  407e46:	7b2b      	ldrb	r3, [r5, #12]
  407e48:	f003 030f 	and.w	r3, r3, #15
  407e4c:	9302      	str	r3, [sp, #8]
  407e4e:	7aeb      	ldrb	r3, [r5, #11]
  407e50:	9301      	str	r3, [sp, #4]
  407e52:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407e54:	9300      	str	r3, [sp, #0]
  407e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407e58:	9a15      	ldr	r2, [sp, #84]	; 0x54
  407e5a:	a91f      	add	r1, sp, #124	; 0x7c
  407e5c:	981c      	ldr	r0, [sp, #112]	; 0x70
  407e5e:	4c11      	ldr	r4, [pc, #68]	; (407ea4 <lv_draw_map+0x5f0>)
  407e60:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  407e62:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  407e66:	3301      	adds	r3, #1
  407e68:	b21b      	sxth	r3, r3
  407e6a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                    blend_area.y2 = blend_area.y1;
  407e6e:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  407e72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407e74:	b95b      	cbnz	r3, 407e8e <lv_draw_map+0x5da>
  407e76:	682b      	ldr	r3, [r5, #0]
  407e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  407e7c:	bf14      	ite	ne
  407e7e:	2302      	movne	r3, #2
  407e80:	2301      	moveq	r3, #1
  407e82:	9318      	str	r3, [sp, #96]	; 0x60
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(mask_any) {
  407e84:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407e86:	b92b      	cbnz	r3, 407e94 <lv_draw_map+0x5e0>
                    px_i = 0;
  407e88:	2300      	movs	r3, #0
  407e8a:	930b      	str	r3, [sp, #44]	; 0x2c
  407e8c:	e786      	b.n	407d9c <lv_draw_map+0x4e8>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  407e8e:	2302      	movs	r3, #2
  407e90:	9318      	str	r3, [sp, #96]	; 0x60
  407e92:	e7f7      	b.n	407e84 <lv_draw_map+0x5d0>
                        lv_memset_ff(mask_buf, mask_buf_size);
  407e94:	9917      	ldr	r1, [sp, #92]	; 0x5c
  407e96:	980f      	ldr	r0, [sp, #60]	; 0x3c
  407e98:	4b05      	ldr	r3, [pc, #20]	; (407eb0 <lv_draw_map+0x5fc>)
  407e9a:	4798      	blx	r3
                    px_i = 0;
  407e9c:	2300      	movs	r3, #0
  407e9e:	930b      	str	r3, [sp, #44]	; 0x2c
  407ea0:	e77c      	b.n	407d9c <lv_draw_map+0x4e8>
  407ea2:	bf00      	nop
  407ea4:	00406d05 	.word	0x00406d05
  407ea8:	00411105 	.word	0x00411105
  407eac:	00410775 	.word	0x00410775
  407eb0:	00411791 	.word	0x00411791
  407eb4:	0040d781 	.word	0x0040d781
  407eb8:	00409fed 	.word	0x00409fed
  407ebc:	004116ed 	.word	0x004116ed
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  407ec0:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  407ec4:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
  407ec8:	429a      	cmp	r2, r3
  407eca:	d011      	beq.n	407ef0 <lv_draw_map+0x63c>
                blend_area.y2--;
  407ecc:	3b01      	subs	r3, #1
  407ece:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  407ed2:	9a05      	ldr	r2, [sp, #20]
  407ed4:	7b13      	ldrb	r3, [r2, #12]
  407ed6:	f003 030f 	and.w	r3, r3, #15
  407eda:	9302      	str	r3, [sp, #8]
  407edc:	7ad3      	ldrb	r3, [r2, #11]
  407ede:	9301      	str	r3, [sp, #4]
  407ee0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407ee2:	9300      	str	r3, [sp, #0]
  407ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407ee6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  407ee8:	a91f      	add	r1, sp, #124	; 0x7c
  407eea:	981c      	ldr	r0, [sp, #112]	; 0x70
  407eec:	4c04      	ldr	r4, [pc, #16]	; (407f00 <lv_draw_map+0x64c>)
  407eee:	47a0      	blx	r4
            }

            lv_mem_buf_release(mask_buf);
  407ef0:	980f      	ldr	r0, [sp, #60]	; 0x3c
  407ef2:	4c04      	ldr	r4, [pc, #16]	; (407f04 <lv_draw_map+0x650>)
  407ef4:	47a0      	blx	r4
            lv_mem_buf_release(map2);
  407ef6:	9815      	ldr	r0, [sp, #84]	; 0x54
  407ef8:	47a0      	blx	r4
        }
    }
}
  407efa:	b037      	add	sp, #220	; 0xdc
  407efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f00:	00406d05 	.word	0x00406d05
  407f04:	00411105 	.word	0x00411105

00407f08 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  407f08:	b570      	push	{r4, r5, r6, lr}
  407f0a:	b098      	sub	sp, #96	; 0x60
  407f0c:	4604      	mov	r4, r0
  407f0e:	460d      	mov	r5, r1
  407f10:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  407f12:	a80b      	add	r0, sp, #44	; 0x2c
  407f14:	4b0c      	ldr	r3, [pc, #48]	; (407f48 <show_error+0x40>)
  407f16:	4798      	blx	r3
    rect_dsc.bg_color = lv_color_white();
  407f18:	23ff      	movs	r3, #255	; 0xff
  407f1a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  407f1e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    lv_draw_rect(coords, clip_area, &rect_dsc);
  407f22:	aa0b      	add	r2, sp, #44	; 0x2c
  407f24:	4629      	mov	r1, r5
  407f26:	4620      	mov	r0, r4
  407f28:	4b08      	ldr	r3, [pc, #32]	; (407f4c <show_error+0x44>)
  407f2a:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  407f2c:	a803      	add	r0, sp, #12
  407f2e:	4b08      	ldr	r3, [pc, #32]	; (407f50 <show_error+0x48>)
  407f30:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  407f32:	2300      	movs	r3, #0
  407f34:	9300      	str	r3, [sp, #0]
  407f36:	4633      	mov	r3, r6
  407f38:	aa03      	add	r2, sp, #12
  407f3a:	4629      	mov	r1, r5
  407f3c:	4620      	mov	r0, r4
  407f3e:	4c05      	ldr	r4, [pc, #20]	; (407f54 <show_error+0x4c>)
  407f40:	47a0      	blx	r4
}
  407f42:	b018      	add	sp, #96	; 0x60
  407f44:	bd70      	pop	{r4, r5, r6, pc}
  407f46:	bf00      	nop
  407f48:	0040a941 	.word	0x0040a941
  407f4c:	0040b101 	.word	0x0040b101
  407f50:	00408311 	.word	0x00408311
  407f54:	004087dd 	.word	0x004087dd

00407f58 <lv_draw_img_dsc_init>:
{
  407f58:	b510      	push	{r4, lr}
  407f5a:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  407f5c:	2118      	movs	r1, #24
  407f5e:	4b0c      	ldr	r3, [pc, #48]	; (407f90 <lv_draw_img_dsc_init+0x38>)
  407f60:	4798      	blx	r3
    dsc->recolor = lv_color_black();
  407f62:	7a23      	ldrb	r3, [r4, #8]
  407f64:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  407f68:	f36f 03c7 	bfc	r3, #3, #5
  407f6c:	7223      	strb	r3, [r4, #8]
  407f6e:	7a63      	ldrb	r3, [r4, #9]
  407f70:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  407f74:	f36f 1347 	bfc	r3, #5, #3
  407f78:	7263      	strb	r3, [r4, #9]
    dsc->opa = LV_OPA_COVER;
  407f7a:	23ff      	movs	r3, #255	; 0xff
  407f7c:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  407f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
  407f82:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
  407f84:	7d23      	ldrb	r3, [r4, #20]
  407f86:	f043 0301 	orr.w	r3, r3, #1
  407f8a:	7523      	strb	r3, [r4, #20]
  407f8c:	bd10      	pop	{r4, pc}
  407f8e:	bf00      	nop
  407f90:	004116ed 	.word	0x004116ed

00407f94 <lv_img_cf_get_px_size>:
    switch(cf) {
  407f94:	3804      	subs	r0, #4
  407f96:	280a      	cmp	r0, #10
  407f98:	d813      	bhi.n	407fc2 <lv_img_cf_get_px_size+0x2e>
  407f9a:	e8df f000 	tbb	[pc, r0]
  407f9e:	0806      	.short	0x0806
  407fa0:	0e0c0a06 	.word	0x0e0c0a06
  407fa4:	0e0c0a10 	.word	0x0e0c0a10
  407fa8:	10          	.byte	0x10
  407fa9:	00          	.byte	0x00
            px_size = LV_COLOR_SIZE;
  407faa:	2010      	movs	r0, #16
  407fac:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  407fae:	2018      	movs	r0, #24
            break;
  407fb0:	4770      	bx	lr
            px_size = 1;
  407fb2:	2001      	movs	r0, #1
            break;
  407fb4:	4770      	bx	lr
            px_size = 2;
  407fb6:	2002      	movs	r0, #2
            break;
  407fb8:	4770      	bx	lr
            px_size = 4;
  407fba:	2004      	movs	r0, #4
            break;
  407fbc:	4770      	bx	lr
            px_size = 8;
  407fbe:	2008      	movs	r0, #8
            break;
  407fc0:	4770      	bx	lr
            px_size = 0;
  407fc2:	2000      	movs	r0, #0
}
  407fc4:	4770      	bx	lr

00407fc6 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  407fc6:	2803      	cmp	r0, #3
  407fc8:	d005      	beq.n	407fd6 <lv_img_cf_is_chroma_keyed+0x10>
  407fca:	d302      	bcc.n	407fd2 <lv_img_cf_is_chroma_keyed+0xc>
  407fcc:	3806      	subs	r0, #6
  407fce:	2804      	cmp	r0, #4
  407fd0:	d901      	bls.n	407fd6 <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  407fd2:	2000      	movs	r0, #0
  407fd4:	4770      	bx	lr
            is_chroma_keyed = true;
  407fd6:	2001      	movs	r0, #1
}
  407fd8:	4770      	bx	lr

00407fda <lv_img_cf_has_alpha>:
    switch(cf) {
  407fda:	3802      	subs	r0, #2
  407fdc:	280c      	cmp	r0, #12
  407fde:	d808      	bhi.n	407ff2 <lv_img_cf_has_alpha+0x18>
  407fe0:	e8df f000 	tbb	[pc, r0]
  407fe4:	09070709 	.word	0x09070709
  407fe8:	09090907 	.word	0x09090907
  407fec:	09090909 	.word	0x09090909
  407ff0:	09          	.byte	0x09
  407ff1:	00          	.byte	0x00
            has_alpha = false;
  407ff2:	2000      	movs	r0, #0
  407ff4:	4770      	bx	lr
            has_alpha = true;
  407ff6:	2001      	movs	r0, #1
}
  407ff8:	4770      	bx	lr
	...

00407ffc <lv_draw_img>:
{
  407ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408000:	b091      	sub	sp, #68	; 0x44
  408002:	4605      	mov	r5, r0
  408004:	460e      	mov	r6, r1
    if(src == NULL) {
  408006:	b13a      	cbz	r2, 408018 <lv_draw_img+0x1c>
  408008:	461c      	mov	r4, r3
  40800a:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40800c:	7adb      	ldrb	r3, [r3, #11]
  40800e:	2b02      	cmp	r3, #2
  408010:	d810      	bhi.n	408034 <lv_draw_img+0x38>
}
  408012:	b011      	add	sp, #68	; 0x44
  408014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LV_LOG_WARN("Image draw: src is NULL");
  408018:	4b90      	ldr	r3, [pc, #576]	; (40825c <lv_draw_img+0x260>)
  40801a:	9300      	str	r3, [sp, #0]
  40801c:	4b90      	ldr	r3, [pc, #576]	; (408260 <lv_draw_img+0x264>)
  40801e:	224f      	movs	r2, #79	; 0x4f
  408020:	4990      	ldr	r1, [pc, #576]	; (408264 <lv_draw_img+0x268>)
  408022:	2002      	movs	r0, #2
  408024:	4c90      	ldr	r4, [pc, #576]	; (408268 <lv_draw_img+0x26c>)
  408026:	47a0      	blx	r4
        show_error(coords, mask, "No\ndata");
  408028:	4a90      	ldr	r2, [pc, #576]	; (40826c <lv_draw_img+0x270>)
  40802a:	4631      	mov	r1, r6
  40802c:	4628      	mov	r0, r5
  40802e:	4b90      	ldr	r3, [pc, #576]	; (408270 <lv_draw_img+0x274>)
  408030:	4798      	blx	r3
        return;
  408032:	e7ee      	b.n	408012 <lv_draw_img+0x16>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
  408034:	6922      	ldr	r2, [r4, #16]
  408036:	8921      	ldrh	r1, [r4, #8]
  408038:	4b8e      	ldr	r3, [pc, #568]	; (408274 <lv_draw_img+0x278>)
  40803a:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40803c:	4607      	mov	r7, r0
  40803e:	2800      	cmp	r0, #0
  408040:	f000 80cc 	beq.w	4081dc <lv_draw_img+0x1e0>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  408044:	f890 9014 	ldrb.w	r9, [r0, #20]
  408048:	f009 091f 	and.w	r9, r9, #31
  40804c:	4648      	mov	r0, r9
  40804e:	4b8a      	ldr	r3, [pc, #552]	; (408278 <lv_draw_img+0x27c>)
  408050:	4798      	blx	r3
  408052:	4680      	mov	r8, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  408054:	4648      	mov	r0, r9
  408056:	4b89      	ldr	r3, [pc, #548]	; (40827c <lv_draw_img+0x280>)
  408058:	4798      	blx	r3
  40805a:	4681      	mov	r9, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40805c:	6a3b      	ldr	r3, [r7, #32]
  40805e:	b183      	cbz	r3, 408082 <lv_draw_img+0x86>
        LV_LOG_WARN("Image draw error");
  408060:	4b87      	ldr	r3, [pc, #540]	; (408280 <lv_draw_img+0x284>)
  408062:	9300      	str	r3, [sp, #0]
  408064:	4b87      	ldr	r3, [pc, #540]	; (408284 <lv_draw_img+0x288>)
  408066:	22fb      	movs	r2, #251	; 0xfb
  408068:	497e      	ldr	r1, [pc, #504]	; (408264 <lv_draw_img+0x268>)
  40806a:	2002      	movs	r0, #2
  40806c:	4c7e      	ldr	r4, [pc, #504]	; (408268 <lv_draw_img+0x26c>)
  40806e:	47a0      	blx	r4
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  408070:	6a3a      	ldr	r2, [r7, #32]
  408072:	4631      	mov	r1, r6
  408074:	4628      	mov	r0, r5
  408076:	4b7e      	ldr	r3, [pc, #504]	; (408270 <lv_draw_img+0x274>)
  408078:	4798      	blx	r3

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
  40807a:	4638      	mov	r0, r7
  40807c:	4b82      	ldr	r3, [pc, #520]	; (408288 <lv_draw_img+0x28c>)
  40807e:	4798      	blx	r3
  408080:	e7c7      	b.n	408012 <lv_draw_img+0x16>
    else if(cdsc->dec_dsc.img_data) {
  408082:	69bb      	ldr	r3, [r7, #24]
  408084:	2b00      	cmp	r3, #0
  408086:	d050      	beq.n	40812a <lv_draw_img+0x12e>
    dest->x1 = src->x1;
  408088:	f9b5 e000 	ldrsh.w	lr, [r5]
  40808c:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
    dest->y1 = src->y1;
  408090:	f9b5 c002 	ldrsh.w	ip, [r5, #2]
  408094:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
    dest->x2 = src->x2;
  408098:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
  40809c:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    dest->y2 = src->y2;
  4080a0:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
  4080a4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  4080a8:	6823      	ldr	r3, [r4, #0]
  4080aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4080ae:	d027      	beq.n	408100 <lv_draw_img+0x104>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  4080b0:	4620      	mov	r0, r4
  4080b2:	f930 3b04 	ldrsh.w	r3, [r0], #4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4080b6:	3201      	adds	r2, #1
  4080b8:	eba2 020c 	sub.w	r2, r2, ip
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4080bc:	3101      	adds	r1, #1
  4080be:	eba1 010e 	sub.w	r1, r1, lr
  4080c2:	9001      	str	r0, [sp, #4]
  4080c4:	8860      	ldrh	r0, [r4, #2]
  4080c6:	9000      	str	r0, [sp, #0]
  4080c8:	b212      	sxth	r2, r2
  4080ca:	b209      	sxth	r1, r1
  4080cc:	a80c      	add	r0, sp, #48	; 0x30
  4080ce:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 4082a8 <lv_draw_img+0x2ac>
  4080d2:	47d0      	blx	sl
            map_area_rot.x1 += coords->x1;
  4080d4:	882a      	ldrh	r2, [r5, #0]
  4080d6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
  4080da:	4413      	add	r3, r2
  4080dc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
  4080e0:	886b      	ldrh	r3, [r5, #2]
  4080e2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
  4080e6:	4419      	add	r1, r3
  4080e8:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
  4080ec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
  4080f0:	440a      	add	r2, r1
  4080f2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
  4080f6:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  4080fa:	4413      	add	r3, r2
  4080fc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  408100:	aa0c      	add	r2, sp, #48	; 0x30
  408102:	4631      	mov	r1, r6
  408104:	a80e      	add	r0, sp, #56	; 0x38
  408106:	4b61      	ldr	r3, [pc, #388]	; (40828c <lv_draw_img+0x290>)
  408108:	4798      	blx	r3
        if(union_ok == false) {
  40810a:	b150      	cbz	r0, 408122 <lv_draw_img+0x126>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40810c:	69ba      	ldr	r2, [r7, #24]
  40810e:	f8cd 9004 	str.w	r9, [sp, #4]
  408112:	f8cd 8000 	str.w	r8, [sp]
  408116:	4623      	mov	r3, r4
  408118:	a90e      	add	r1, sp, #56	; 0x38
  40811a:	4628      	mov	r0, r5
  40811c:	4c5c      	ldr	r4, [pc, #368]	; (408290 <lv_draw_img+0x294>)
  40811e:	47a0      	blx	r4
  408120:	e7ab      	b.n	40807a <lv_draw_img+0x7e>
    lv_img_decoder_close(&cache->dec_dsc);
  408122:	4638      	mov	r0, r7
  408124:	4b58      	ldr	r3, [pc, #352]	; (408288 <lv_draw_img+0x28c>)
  408126:	4798      	blx	r3
  408128:	e773      	b.n	408012 <lv_draw_img+0x16>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40812a:	462a      	mov	r2, r5
  40812c:	4631      	mov	r1, r6
  40812e:	a80a      	add	r0, sp, #40	; 0x28
  408130:	4b56      	ldr	r3, [pc, #344]	; (40828c <lv_draw_img+0x290>)
  408132:	4798      	blx	r3
        if(union_ok == false) {
  408134:	b918      	cbnz	r0, 40813e <lv_draw_img+0x142>
    lv_img_decoder_close(&cache->dec_dsc);
  408136:	4638      	mov	r0, r7
  408138:	4b53      	ldr	r3, [pc, #332]	; (408288 <lv_draw_img+0x28c>)
  40813a:	4798      	blx	r3
  40813c:	e769      	b.n	408012 <lv_draw_img+0x16>
  40813e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  408142:	3301      	adds	r3, #1
  408144:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  408148:	1a9b      	subs	r3, r3, r2
  40814a:	b21b      	sxth	r3, r3
  40814c:	9304      	str	r3, [sp, #16]
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40814e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  408152:	4b50      	ldr	r3, [pc, #320]	; (408294 <lv_draw_img+0x298>)
  408154:	4798      	blx	r3
  408156:	9008      	str	r0, [sp, #32]
    dest->x1 = src->x1;
  408158:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40815c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    dest->y1 = src->y1;
  408160:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
  408164:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    dest->x2 = src->x2;
  408168:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  40816c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    dest->y2 = src->y2;
  408170:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
  408174:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        lv_area_set_height(&line, 1);
  408178:	2101      	movs	r1, #1
  40817a:	a80c      	add	r0, sp, #48	; 0x30
  40817c:	4b46      	ldr	r3, [pc, #280]	; (408298 <lv_draw_img+0x29c>)
  40817e:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  408180:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  408184:	f9b5 2000 	ldrsh.w	r2, [r5]
        int32_t y = mask_com.y1 - coords->y1;
  408188:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
  40818c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
  408190:	ebaa 0101 	sub.w	r1, sl, r1
  408194:	4608      	mov	r0, r1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  408196:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
  40819a:	4551      	cmp	r1, sl
  40819c:	db59      	blt.n	408252 <lv_draw_img+0x256>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40819e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 40828c <lv_draw_img+0x290>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  4081a2:	1a9b      	subs	r3, r3, r2
  4081a4:	b21b      	sxth	r3, r3
  4081a6:	9306      	str	r3, [sp, #24]
  4081a8:	9703      	str	r7, [sp, #12]
  4081aa:	9f08      	ldr	r7, [sp, #32]
  4081ac:	9509      	str	r5, [sp, #36]	; 0x24
  4081ae:	9407      	str	r4, [sp, #28]
  4081b0:	4604      	mov	r4, r0
  4081b2:	e027      	b.n	408204 <lv_draw_img+0x208>
  4081b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
                lv_img_decoder_close(&cdsc->dec_dsc);
  4081b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
  4081ba:	4640      	mov	r0, r8
  4081bc:	4c32      	ldr	r4, [pc, #200]	; (408288 <lv_draw_img+0x28c>)
  4081be:	47a0      	blx	r4
                LV_LOG_WARN("Image draw can't read the line");
  4081c0:	4b36      	ldr	r3, [pc, #216]	; (40829c <lv_draw_img+0x2a0>)
  4081c2:	9300      	str	r3, [sp, #0]
  4081c4:	4b2f      	ldr	r3, [pc, #188]	; (408284 <lv_draw_img+0x288>)
  4081c6:	f44f 729d 	mov.w	r2, #314	; 0x13a
  4081ca:	4926      	ldr	r1, [pc, #152]	; (408264 <lv_draw_img+0x268>)
  4081cc:	2002      	movs	r0, #2
  4081ce:	4f26      	ldr	r7, [pc, #152]	; (408268 <lv_draw_img+0x26c>)
  4081d0:	47b8      	blx	r7
                lv_mem_buf_release(buf);
  4081d2:	9808      	ldr	r0, [sp, #32]
  4081d4:	4b32      	ldr	r3, [pc, #200]	; (4082a0 <lv_draw_img+0x2a4>)
  4081d6:	4798      	blx	r3
    lv_img_decoder_close(&cache->dec_dsc);
  4081d8:	4640      	mov	r0, r8
  4081da:	47a0      	blx	r4
        LV_LOG_WARN("Image draw error");
  4081dc:	4b28      	ldr	r3, [pc, #160]	; (408280 <lv_draw_img+0x284>)
  4081de:	9300      	str	r3, [sp, #0]
  4081e0:	4b1f      	ldr	r3, [pc, #124]	; (408260 <lv_draw_img+0x264>)
  4081e2:	225a      	movs	r2, #90	; 0x5a
  4081e4:	491f      	ldr	r1, [pc, #124]	; (408264 <lv_draw_img+0x268>)
  4081e6:	2002      	movs	r0, #2
  4081e8:	4c1f      	ldr	r4, [pc, #124]	; (408268 <lv_draw_img+0x26c>)
  4081ea:	47a0      	blx	r4
        show_error(coords, mask, "No\ndata");
  4081ec:	4a1f      	ldr	r2, [pc, #124]	; (40826c <lv_draw_img+0x270>)
  4081ee:	4631      	mov	r1, r6
  4081f0:	4628      	mov	r0, r5
  4081f2:	4b1f      	ldr	r3, [pc, #124]	; (408270 <lv_draw_img+0x274>)
  4081f4:	4798      	blx	r3
        return;
  4081f6:	e70c      	b.n	408012 <lv_draw_img+0x16>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  4081f8:	f10a 0a01 	add.w	sl, sl, #1
  4081fc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  408200:	459a      	cmp	sl, r3
  408202:	dc25      	bgt.n	408250 <lv_draw_img+0x254>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  408204:	aa0c      	add	r2, sp, #48	; 0x30
  408206:	4631      	mov	r1, r6
  408208:	a80e      	add	r0, sp, #56	; 0x38
  40820a:	47d8      	blx	fp
            if(union_ok == false) continue;
  40820c:	2800      	cmp	r0, #0
  40820e:	d0f3      	beq.n	4081f8 <lv_draw_img+0x1fc>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  408210:	9803      	ldr	r0, [sp, #12]
  408212:	9005      	str	r0, [sp, #20]
  408214:	9700      	str	r7, [sp, #0]
  408216:	9b04      	ldr	r3, [sp, #16]
  408218:	b222      	sxth	r2, r4
  40821a:	9906      	ldr	r1, [sp, #24]
  40821c:	4d21      	ldr	r5, [pc, #132]	; (4082a4 <lv_draw_img+0x2a8>)
  40821e:	47a8      	blx	r5
            if(read_res != LV_RES_OK) {
  408220:	2801      	cmp	r0, #1
  408222:	d1c7      	bne.n	4081b4 <lv_draw_img+0x1b8>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  408224:	f8cd 9004 	str.w	r9, [sp, #4]
  408228:	f8cd 8000 	str.w	r8, [sp]
  40822c:	9b07      	ldr	r3, [sp, #28]
  40822e:	463a      	mov	r2, r7
  408230:	a90e      	add	r1, sp, #56	; 0x38
  408232:	a80c      	add	r0, sp, #48	; 0x30
  408234:	4d16      	ldr	r5, [pc, #88]	; (408290 <lv_draw_img+0x294>)
  408236:	47a8      	blx	r5
            line.y1++;
  408238:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
  40823c:	3301      	adds	r3, #1
  40823e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            line.y2++;
  408242:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  408246:	3301      	adds	r3, #1
  408248:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            y++;
  40824c:	3401      	adds	r4, #1
  40824e:	e7d3      	b.n	4081f8 <lv_draw_img+0x1fc>
  408250:	9f03      	ldr	r7, [sp, #12]
        lv_mem_buf_release(buf);
  408252:	9808      	ldr	r0, [sp, #32]
  408254:	4b12      	ldr	r3, [pc, #72]	; (4082a0 <lv_draw_img+0x2a4>)
  408256:	4798      	blx	r3
  408258:	e70f      	b.n	40807a <lv_draw_img+0x7e>
  40825a:	bf00      	nop
  40825c:	0041c444 	.word	0x0041c444
  408260:	0041c3f0 	.word	0x0041c3f0
  408264:	0041c410 	.word	0x0041c410
  408268:	00410edd 	.word	0x00410edd
  40826c:	0041c45c 	.word	0x0041c45c
  408270:	00407f09 	.word	0x00407f09
  408274:	0040d8f9 	.word	0x0040d8f9
  408278:	00407fc7 	.word	0x00407fc7
  40827c:	00407fdb 	.word	0x00407fdb
  408280:	0041c464 	.word	0x0041c464
  408284:	0041c3fc 	.word	0x0041c3fc
  408288:	0040e381 	.word	0x0040e381
  40828c:	004107cd 	.word	0x004107cd
  408290:	004078b5 	.word	0x004078b5
  408294:	004115a9 	.word	0x004115a9
  408298:	0041076b 	.word	0x0041076b
  40829c:	0041c478 	.word	0x0041c478
  4082a0:	00411105 	.word	0x00411105
  4082a4:	0040e35d 	.word	0x0040e35d
  4082a8:	0040d14d 	.word	0x0040d14d

004082ac <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  4082ac:	b158      	cbz	r0, 4082c6 <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  4082ae:	7802      	ldrb	r2, [r0, #0]
  4082b0:	f1a2 0320 	sub.w	r3, r2, #32
  4082b4:	b2db      	uxtb	r3, r3
  4082b6:	2b5f      	cmp	r3, #95	; 0x5f
  4082b8:	d907      	bls.n	4082ca <lv_img_src_get_type+0x1e>
    else if(u8_p[0] >= 0x80) {
  4082ba:	b252      	sxtb	r2, r2
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
  4082bc:	2a00      	cmp	r2, #0
  4082be:	bfb4      	ite	lt
  4082c0:	2002      	movlt	r0, #2
  4082c2:	2000      	movge	r0, #0
  4082c4:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  4082c6:	2003      	movs	r0, #3
  4082c8:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  4082ca:	2001      	movs	r0, #1
}
  4082cc:	4770      	bx	lr

004082ce <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  4082ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4082d2:	b2db      	uxtb	r3, r3
  4082d4:	2b09      	cmp	r3, #9
  4082d6:	d917      	bls.n	408308 <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  4082d8:	2860      	cmp	r0, #96	; 0x60
  4082da:	d901      	bls.n	4082e0 <hex_char_to_num+0x12>
  4082dc:	3820      	subs	r0, #32
  4082de:	b2c0      	uxtb	r0, r0

        switch(hex) {
  4082e0:	3841      	subs	r0, #65	; 0x41
  4082e2:	2805      	cmp	r0, #5
  4082e4:	d80e      	bhi.n	408304 <hex_char_to_num+0x36>
  4082e6:	e8df f000 	tbb	[pc, r0]
  4082ea:	0311      	.short	0x0311
  4082ec:	0b090705 	.word	0x0b090705
            case 'A':
                result = 10;
                break;
            case 'B':
                result = 11;
  4082f0:	200b      	movs	r0, #11
  4082f2:	4770      	bx	lr
                break;
            case 'C':
                result = 12;
  4082f4:	200c      	movs	r0, #12
                break;
  4082f6:	4770      	bx	lr
            case 'D':
                result = 13;
  4082f8:	200d      	movs	r0, #13
                break;
  4082fa:	4770      	bx	lr
            case 'E':
                result = 14;
  4082fc:	200e      	movs	r0, #14
                break;
  4082fe:	4770      	bx	lr
            case 'F':
                result = 15;
  408300:	200f      	movs	r0, #15
                break;
  408302:	4770      	bx	lr
            default:
                result = 0;
  408304:	2000      	movs	r0, #0
                break;
  408306:	4770      	bx	lr
        result = hex - '0';
  408308:	4618      	mov	r0, r3
  40830a:	4770      	bx	lr
                result = 10;
  40830c:	200a      	movs	r0, #10
        }
    }

    return result;
}
  40830e:	4770      	bx	lr

00408310 <lv_draw_label_dsc_init>:
{
  408310:	b510      	push	{r4, lr}
  408312:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  408314:	2120      	movs	r1, #32
  408316:	4b14      	ldr	r3, [pc, #80]	; (408368 <lv_draw_label_dsc_init+0x58>)
  408318:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40831a:	23ff      	movs	r3, #255	; 0xff
  40831c:	76a3      	strb	r3, [r4, #26]
    dsc->color = lv_color_black();
  40831e:	7b23      	ldrb	r3, [r4, #12]
  408320:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  408324:	f36f 03c7 	bfc	r3, #3, #5
  408328:	7323      	strb	r3, [r4, #12]
  40832a:	7b63      	ldrb	r3, [r4, #13]
  40832c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  408330:	f36f 1347 	bfc	r3, #5, #3
  408334:	7363      	strb	r3, [r4, #13]
    dsc->font = LV_FONT_DEFAULT;
  408336:	4b0d      	ldr	r3, [pc, #52]	; (40836c <lv_draw_label_dsc_init+0x5c>)
  408338:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40833a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40833e:	6063      	str	r3, [r4, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  408340:	60a3      	str	r3, [r4, #8]
    dsc->sel_color = lv_color_black();
  408342:	7ba3      	ldrb	r3, [r4, #14]
  408344:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  408348:	f36f 03c7 	bfc	r3, #3, #5
  40834c:	73a3      	strb	r3, [r4, #14]
  40834e:	7be3      	ldrb	r3, [r4, #15]
  408350:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  408354:	f36f 1347 	bfc	r3, #5, #3
  408358:	73e3      	strb	r3, [r4, #15]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
  40835a:	2005      	movs	r0, #5
  40835c:	4b04      	ldr	r3, [pc, #16]	; (408370 <lv_draw_label_dsc_init+0x60>)
  40835e:	4798      	blx	r3
  408360:	8220      	strh	r0, [r4, #16]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
  408362:	2300      	movs	r3, #0
  408364:	76e3      	strb	r3, [r4, #27]
  408366:	bd10      	pop	{r4, pc}
  408368:	004116ed 	.word	0x004116ed
  40836c:	00420284 	.word	0x00420284
  408370:	00410b55 	.word	0x00410b55

00408374 <lv_draw_letter>:
{
  408374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408378:	b099      	sub	sp, #100	; 0x64
  40837a:	f89d 608c 	ldrb.w	r6, [sp, #140]	; 0x8c
  40837e:	f89d 5090 	ldrb.w	r5, [sp, #144]	; 0x90
    if(opa < LV_OPA_MIN) return;
  408382:	2e01      	cmp	r6, #1
  408384:	d92c      	bls.n	4083e0 <lv_draw_letter+0x6c>
  408386:	461f      	mov	r7, r3
  408388:	4691      	mov	r9, r2
  40838a:	9104      	str	r1, [sp, #16]
  40838c:	4682      	mov	sl, r0
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40838e:	2efe      	cmp	r6, #254	; 0xfe
  408390:	bf28      	it	cs
  408392:	26ff      	movcs	r6, #255	; 0xff
    if(font_p == NULL) {
  408394:	b1da      	cbz	r2, 4083ce <lv_draw_letter+0x5a>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  408396:	2300      	movs	r3, #0
  408398:	463a      	mov	r2, r7
  40839a:	a915      	add	r1, sp, #84	; 0x54
  40839c:	4648      	mov	r0, r9
  40839e:	4ca9      	ldr	r4, [pc, #676]	; (408644 <lv_draw_letter+0x2d0>)
  4083a0:	47a0      	blx	r4
    if(g_ret == false)  {
  4083a2:	bb00      	cbnz	r0, 4083e6 <lv_draw_letter+0x72>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
  4083a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
  4083a8:	429f      	cmp	r7, r3
  4083aa:	bf18      	it	ne
  4083ac:	2f1f      	cmpne	r7, #31
  4083ae:	d917      	bls.n	4083e0 <lv_draw_letter+0x6c>
  4083b0:	f242 030c 	movw	r3, #8204	; 0x200c
  4083b4:	429f      	cmp	r7, r3
  4083b6:	d013      	beq.n	4083e0 <lv_draw_letter+0x6c>
            LV_LOG_WARN("lv_draw_letter: glyph dsc. not found for U+%X", letter);
  4083b8:	9701      	str	r7, [sp, #4]
  4083ba:	4ba3      	ldr	r3, [pc, #652]	; (408648 <lv_draw_letter+0x2d4>)
  4083bc:	9300      	str	r3, [sp, #0]
  4083be:	4ba3      	ldr	r3, [pc, #652]	; (40864c <lv_draw_letter+0x2d8>)
  4083c0:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  4083c4:	49a2      	ldr	r1, [pc, #648]	; (408650 <lv_draw_letter+0x2dc>)
  4083c6:	2002      	movs	r0, #2
  4083c8:	4ca2      	ldr	r4, [pc, #648]	; (408654 <lv_draw_letter+0x2e0>)
  4083ca:	47a0      	blx	r4
  4083cc:	e008      	b.n	4083e0 <lv_draw_letter+0x6c>
        LV_LOG_WARN("lv_draw_letter: font is NULL");
  4083ce:	4ba2      	ldr	r3, [pc, #648]	; (408658 <lv_draw_letter+0x2e4>)
  4083d0:	9300      	str	r3, [sp, #0]
  4083d2:	4b9e      	ldr	r3, [pc, #632]	; (40864c <lv_draw_letter+0x2d8>)
  4083d4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
  4083d8:	499d      	ldr	r1, [pc, #628]	; (408650 <lv_draw_letter+0x2dc>)
  4083da:	2002      	movs	r0, #2
  4083dc:	4c9d      	ldr	r4, [pc, #628]	; (408654 <lv_draw_letter+0x2e0>)
  4083de:	47a0      	blx	r4
}
  4083e0:	b019      	add	sp, #100	; 0x64
  4083e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((g.box_h == 0) || (g.box_w == 0)) return;
  4083e6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
  4083ea:	2b00      	cmp	r3, #0
  4083ec:	d0f8      	beq.n	4083e0 <lv_draw_letter+0x6c>
  4083ee:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
  4083f2:	2a00      	cmp	r2, #0
  4083f4:	d0f4      	beq.n	4083e0 <lv_draw_letter+0x6c>
    int32_t pos_x = pos_p->x + g.ofs_x;
  4083f6:	f9ba 8000 	ldrsh.w	r8, [sl]
  4083fa:	f9bd 105a 	ldrsh.w	r1, [sp, #90]	; 0x5a
  4083fe:	4488      	add	r8, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  408400:	4442      	add	r2, r8
  408402:	9804      	ldr	r0, [sp, #16]
  408404:	f9b0 1000 	ldrsh.w	r1, [r0]
  408408:	428a      	cmp	r2, r1
  40840a:	dbe9      	blt.n	4083e0 <lv_draw_letter+0x6c>
       pos_x > clip_area->x2 ||
  40840c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  408410:	4590      	cmp	r8, r2
  408412:	dce5      	bgt.n	4083e0 <lv_draw_letter+0x6c>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  408414:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
  408418:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
  40841c:	1a52      	subs	r2, r2, r1
  40841e:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  408422:	4492      	add	sl, r2
  408424:	ebaa 0a03 	sub.w	sl, sl, r3
  408428:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  40842c:	ebaa 0a02 	sub.w	sl, sl, r2
       pos_y + g.box_h < clip_area->y1 ||
  408430:	4453      	add	r3, sl
  408432:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
       pos_x > clip_area->x2 ||
  408436:	4293      	cmp	r3, r2
  408438:	dbd2      	blt.n	4083e0 <lv_draw_letter+0x6c>
       pos_y > clip_area->y2)  {
  40843a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40843e:	459a      	cmp	sl, r3
  408440:	dcce      	bgt.n	4083e0 <lv_draw_letter+0x6c>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  408442:	4639      	mov	r1, r7
  408444:	4648      	mov	r0, r9
  408446:	4b85      	ldr	r3, [pc, #532]	; (40865c <lv_draw_letter+0x2e8>)
  408448:	4798      	blx	r3
    if(map_p == NULL) {
  40844a:	4607      	mov	r7, r0
  40844c:	b170      	cbz	r0, 40846c <lv_draw_letter+0xf8>
    if(font_p->subpx) {
  40844e:	f899 300c 	ldrb.w	r3, [r9, #12]
  408452:	f013 0f03 	tst.w	r3, #3
  408456:	d013      	beq.n	408480 <lv_draw_letter+0x10c>
        LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
  408458:	4b81      	ldr	r3, [pc, #516]	; (408660 <lv_draw_letter+0x2ec>)
  40845a:	9300      	str	r3, [sp, #0]
  40845c:	4b7b      	ldr	r3, [pc, #492]	; (40864c <lv_draw_letter+0x2d8>)
  40845e:	f240 12cd 	movw	r2, #461	; 0x1cd
  408462:	497b      	ldr	r1, [pc, #492]	; (408650 <lv_draw_letter+0x2dc>)
  408464:	2002      	movs	r0, #2
  408466:	4c7b      	ldr	r4, [pc, #492]	; (408654 <lv_draw_letter+0x2e0>)
  408468:	47a0      	blx	r4
  40846a:	e7b9      	b.n	4083e0 <lv_draw_letter+0x6c>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
  40846c:	4b7d      	ldr	r3, [pc, #500]	; (408664 <lv_draw_letter+0x2f0>)
  40846e:	9300      	str	r3, [sp, #0]
  408470:	4b76      	ldr	r3, [pc, #472]	; (40864c <lv_draw_letter+0x2d8>)
  408472:	f240 12c5 	movw	r2, #453	; 0x1c5
  408476:	4976      	ldr	r1, [pc, #472]	; (408650 <lv_draw_letter+0x2dc>)
  408478:	2002      	movs	r0, #2
  40847a:	4c76      	ldr	r4, [pc, #472]	; (408654 <lv_draw_letter+0x2e0>)
  40847c:	47a0      	blx	r4
        return;
  40847e:	e7af      	b.n	4083e0 <lv_draw_letter+0x6c>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  408480:	fa0f fe88 	sxth.w	lr, r8
  408484:	fa0f f08a 	sxth.w	r0, sl
  408488:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40848c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint32_t bpp = g->bpp;
  408490:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
  408494:	4699      	mov	r9, r3
    if(bpp == 3) bpp = 4;
  408496:	2b03      	cmp	r3, #3
  408498:	d00e      	beq.n	4084b8 <lv_draw_letter+0x144>
    switch(bpp) {
  40849a:	3b01      	subs	r3, #1
  40849c:	2b07      	cmp	r3, #7
  40849e:	d821      	bhi.n	4084e4 <lv_draw_letter+0x170>
  4084a0:	e8df f003 	tbb	[pc, r3]
  4084a4:	0c20042a 	.word	0x0c20042a
  4084a8:	32202020 	.word	0x32202020
            shades = 4;
  4084ac:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
  4084ae:	22c0      	movs	r2, #192	; 0xc0
  4084b0:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  4084b2:	4a6d      	ldr	r2, [pc, #436]	; (408668 <lv_draw_letter+0x2f4>)
  4084b4:	9207      	str	r2, [sp, #28]
  4084b6:	e006      	b.n	4084c6 <lv_draw_letter+0x152>
    if(bpp == 3) bpp = 4;
  4084b8:	f04f 0904 	mov.w	r9, #4
            shades = 16;
  4084bc:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
  4084be:	22f0      	movs	r2, #240	; 0xf0
  4084c0:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  4084c2:	4a6a      	ldr	r2, [pc, #424]	; (40866c <lv_draw_letter+0x2f8>)
  4084c4:	9207      	str	r2, [sp, #28]
    if(opa < LV_OPA_MAX) {
  4084c6:	2efc      	cmp	r6, #252	; 0xfc
  4084c8:	d832      	bhi.n	408530 <lv_draw_letter+0x1bc>
        if(prev_opa != opa || prev_bpp != bpp) {
  4084ca:	4a69      	ldr	r2, [pc, #420]	; (408670 <lv_draw_letter+0x2fc>)
  4084cc:	7812      	ldrb	r2, [r2, #0]
  4084ce:	42b2      	cmp	r2, r6
  4084d0:	d023      	beq.n	40851a <lv_draw_letter+0x1a6>
            for(i = 0; i < shades; i++) {
  4084d2:	b333      	cbz	r3, 408522 <lv_draw_letter+0x1ae>
  4084d4:	9c07      	ldr	r4, [sp, #28]
  4084d6:	1e62      	subs	r2, r4, #1
  4084d8:	4966      	ldr	r1, [pc, #408]	; (408674 <lv_draw_letter+0x300>)
  4084da:	3b01      	subs	r3, #1
  4084dc:	eb04 0c03 	add.w	ip, r4, r3
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  4084e0:	46b3      	mov	fp, r6
  4084e2:	e09d      	b.n	408620 <lv_draw_letter+0x2ac>
            LV_LOG_WARN("lv_draw_letter: invalid bpp");
  4084e4:	4b64      	ldr	r3, [pc, #400]	; (408678 <lv_draw_letter+0x304>)
  4084e6:	9300      	str	r3, [sp, #0]
  4084e8:	4b64      	ldr	r3, [pc, #400]	; (40867c <lv_draw_letter+0x308>)
  4084ea:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
  4084ee:	4958      	ldr	r1, [pc, #352]	; (408650 <lv_draw_letter+0x2dc>)
  4084f0:	2002      	movs	r0, #2
  4084f2:	4c58      	ldr	r4, [pc, #352]	; (408654 <lv_draw_letter+0x2e0>)
  4084f4:	47a0      	blx	r4
  4084f6:	e773      	b.n	4083e0 <lv_draw_letter+0x6c>
    uint32_t bpp = g->bpp;
  4084f8:	f04f 0901 	mov.w	r9, #1
            shades = 2;
  4084fc:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
  4084fe:	2280      	movs	r2, #128	; 0x80
  408500:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  408502:	4a5f      	ldr	r2, [pc, #380]	; (408680 <lv_draw_letter+0x30c>)
  408504:	9207      	str	r2, [sp, #28]
  408506:	e7de      	b.n	4084c6 <lv_draw_letter+0x152>
    uint32_t bpp = g->bpp;
  408508:	f04f 0908 	mov.w	r9, #8
            shades = 256;
  40850c:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
  408510:	22ff      	movs	r2, #255	; 0xff
  408512:	9205      	str	r2, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  408514:	4a5b      	ldr	r2, [pc, #364]	; (408684 <lv_draw_letter+0x310>)
  408516:	9207      	str	r2, [sp, #28]
  408518:	e7d5      	b.n	4084c6 <lv_draw_letter+0x152>
        if(prev_opa != opa || prev_bpp != bpp) {
  40851a:	4a5b      	ldr	r2, [pc, #364]	; (408688 <lv_draw_letter+0x314>)
  40851c:	6812      	ldr	r2, [r2, #0]
  40851e:	454a      	cmp	r2, r9
  408520:	d1d7      	bne.n	4084d2 <lv_draw_letter+0x15e>
        prev_opa = opa;
  408522:	4b53      	ldr	r3, [pc, #332]	; (408670 <lv_draw_letter+0x2fc>)
  408524:	701e      	strb	r6, [r3, #0]
        prev_bpp = bpp;
  408526:	4b58      	ldr	r3, [pc, #352]	; (408688 <lv_draw_letter+0x314>)
  408528:	f8c3 9000 	str.w	r9, [r3]
        bpp_opa_table_p = opa_table;
  40852c:	4b57      	ldr	r3, [pc, #348]	; (40868c <lv_draw_letter+0x318>)
  40852e:	9307      	str	r3, [sp, #28]
    int32_t box_w = g->box_w;
  408530:	f8bd b056 	ldrh.w	fp, [sp, #86]	; 0x56
    int32_t box_h = g->box_h;
  408534:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
  408538:	9306      	str	r3, [sp, #24]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40853a:	fb09 f60b 	mul.w	r6, r9, fp
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40853e:	9b04      	ldr	r3, [sp, #16]
  408540:	f9b3 3000 	ldrsh.w	r3, [r3]
  408544:	459e      	cmp	lr, r3
  408546:	bfb4      	ite	lt
  408548:	eba3 030e 	sublt.w	r3, r3, lr
  40854c:	2300      	movge	r3, #0
  40854e:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  408550:	9b04      	ldr	r3, [sp, #16]
  408552:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  408556:	eb0b 020e 	add.w	r2, fp, lr
  40855a:	429a      	cmp	r2, r3
  40855c:	dd69      	ble.n	408632 <lv_draw_letter+0x2be>
  40855e:	eba3 030e 	sub.w	r3, r3, lr
  408562:	3301      	adds	r3, #1
  408564:	9308      	str	r3, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  408566:	9b04      	ldr	r3, [sp, #16]
  408568:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40856c:	4298      	cmp	r0, r3
  40856e:	bfb4      	ite	lt
  408570:	1a1b      	sublt	r3, r3, r0
  408572:	2300      	movge	r3, #0
  408574:	930a      	str	r3, [sp, #40]	; 0x28
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  408576:	9b04      	ldr	r3, [sp, #16]
  408578:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  40857c:	9a06      	ldr	r2, [sp, #24]
  40857e:	4402      	add	r2, r0
  408580:	429a      	cmp	r2, r3
  408582:	dd59      	ble.n	408638 <lv_draw_letter+0x2c4>
  408584:	1a1b      	subs	r3, r3, r0
  408586:	3301      	adds	r3, #1
  408588:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40858a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40858c:	940f      	str	r4, [sp, #60]	; 0x3c
  40858e:	fb09 f304 	mul.w	r3, r9, r4
  408592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408594:	fb02 3606 	mla	r6, r2, r6, r3
    map_p += bit_ofs >> 3;
  408598:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
  40859c:	f006 0607 	and.w	r6, r6, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  4085a0:	4b3b      	ldr	r3, [pc, #236]	; (408690 <lv_draw_letter+0x31c>)
  4085a2:	4798      	blx	r3
  4085a4:	4b3b      	ldr	r3, [pc, #236]	; (408694 <lv_draw_letter+0x320>)
  4085a6:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  4085a8:	9906      	ldr	r1, [sp, #24]
  4085aa:	fb01 f30b 	mul.w	r3, r1, fp
  4085ae:	4619      	mov	r1, r3
  4085b0:	4283      	cmp	r3, r0
  4085b2:	bfa8      	it	ge
  4085b4:	4601      	movge	r1, r0
  4085b6:	910c      	str	r1, [sp, #48]	; 0x30
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
  4085b8:	4608      	mov	r0, r1
  4085ba:	4b37      	ldr	r3, [pc, #220]	; (408698 <lv_draw_letter+0x324>)
  4085bc:	4798      	blx	r3
  4085be:	9006      	str	r0, [sp, #24]
    fill_area.x1 = col_start + pos_x;
  4085c0:	fa1f f888 	uxth.w	r8, r8
  4085c4:	eb08 0304 	add.w	r3, r8, r4
  4085c8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    fill_area.x2 = col_end  + pos_x - 1;
  4085cc:	f108 38ff 	add.w	r8, r8, #4294967295
  4085d0:	9908      	ldr	r1, [sp, #32]
  4085d2:	eb08 0301 	add.w	r3, r8, r1
  4085d6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    fill_area.y1 = row_start + pos_y;
  4085da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4085dc:	4453      	add	r3, sl
  4085de:	b21b      	sxth	r3, r3
  4085e0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    fill_area.y2 = fill_area.y1;
  4085e4:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    bool mask_any = lv_draw_mask_is_any(&fill_area);
  4085e8:	a813      	add	r0, sp, #76	; 0x4c
  4085ea:	4b2c      	ldr	r3, [pc, #176]	; (40869c <lv_draw_letter+0x328>)
  4085ec:	4798      	blx	r3
  4085ee:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t col_bit_max = 8 - bpp;
  4085f0:	f1c9 0808 	rsb	r8, r9, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  4085f4:	eb0b 0304 	add.w	r3, fp, r4
  4085f8:	9908      	ldr	r1, [sp, #32]
  4085fa:	1a5b      	subs	r3, r3, r1
  4085fc:	fb09 f103 	mul.w	r1, r9, r3
  408600:	910e      	str	r1, [sp, #56]	; 0x38
    for(row = row_start ; row < row_end; row++) {
  408602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408604:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408606:	428a      	cmp	r2, r1
  408608:	f280 80c7 	bge.w	40879a <lv_draw_letter+0x426>
  40860c:	2400      	movs	r4, #0
                mask_buf[mask_p] = 0;
  40860e:	46a3      	mov	fp, r4
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  408610:	4692      	mov	sl, r2
  408612:	9510      	str	r5, [sp, #64]	; 0x40
  408614:	e078      	b.n	408708 <lv_draw_letter+0x394>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  408616:	465b      	mov	r3, fp
  408618:	f801 3f01 	strb.w	r3, [r1, #1]!
            for(i = 0; i < shades; i++) {
  40861c:	4562      	cmp	r2, ip
  40861e:	d080      	beq.n	408522 <lv_draw_letter+0x1ae>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  408620:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  408624:	2bff      	cmp	r3, #255	; 0xff
  408626:	d0f6      	beq.n	408616 <lv_draw_letter+0x2a2>
  408628:	fb06 f303 	mul.w	r3, r6, r3
  40862c:	f3c3 2307 	ubfx	r3, r3, #8, #8
  408630:	e7f2      	b.n	408618 <lv_draw_letter+0x2a4>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  408632:	f8cd b020 	str.w	fp, [sp, #32]
  408636:	e796      	b.n	408566 <lv_draw_letter+0x1f2>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  408638:	9b06      	ldr	r3, [sp, #24]
  40863a:	930b      	str	r3, [sp, #44]	; 0x2c
  40863c:	e7a5      	b.n	40858a <lv_draw_letter+0x216>
                mask_buf[mask_p] = 0;
  40863e:	f881 b000 	strb.w	fp, [r1]
  408642:	e03e      	b.n	4086c2 <lv_draw_letter+0x34e>
  408644:	0040fd31 	.word	0x0040fd31
  408648:	0041c62c 	.word	0x0041c62c
  40864c:	0041c498 	.word	0x0041c498
  408650:	0041c5d4 	.word	0x0041c5d4
  408654:	00410edd 	.word	0x00410edd
  408658:	0041c60c 	.word	0x0041c60c
  40865c:	0040fcf1 	.word	0x0040fcf1
  408660:	0041c68c 	.word	0x0041c68c
  408664:	0041c65c 	.word	0x0041c65c
  408668:	0041c4c0 	.word	0x0041c4c0
  40866c:	0041c4c4 	.word	0x0041c4c4
  408670:	20400b28 	.word	0x20400b28
  408674:	20400a23 	.word	0x20400a23
  408678:	0041c6e0 	.word	0x0041c6e0
  40867c:	0041c4a8 	.word	0x0041c4a8
  408680:	0041c4bc 	.word	0x0041c4bc
  408684:	0041c4d4 	.word	0x0041c4d4
  408688:	20400b24 	.word	0x20400b24
  40868c:	20400a24 	.word	0x20400a24
  408690:	00405f49 	.word	0x00405f49
  408694:	0041013d 	.word	0x0041013d
  408698:	004115a9 	.word	0x004115a9
  40869c:	0040a0cd 	.word	0x0040a0cd
                map_p++;
  4086a0:	3701      	adds	r7, #1
                bitmask = bitmask_init;
  4086a2:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  4086a4:	2600      	movs	r6, #0
  4086a6:	3101      	adds	r1, #1
        for(col = col_start; col < col_end; col++) {
  4086a8:	4571      	cmp	r1, lr
  4086aa:	d010      	beq.n	4086ce <lv_draw_letter+0x35a>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  4086ac:	783b      	ldrb	r3, [r7, #0]
  4086ae:	4003      	ands	r3, r0
  4086b0:	eba8 0206 	sub.w	r2, r8, r6
  4086b4:	40d3      	lsrs	r3, r2
            if(letter_px) {
  4086b6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4086ba:	d0c0      	beq.n	40863e <lv_draw_letter+0x2ca>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  4086bc:	b2db      	uxtb	r3, r3
  4086be:	5ceb      	ldrb	r3, [r5, r3]
  4086c0:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
  4086c2:	45b0      	cmp	r8, r6
  4086c4:	d9ec      	bls.n	4086a0 <lv_draw_letter+0x32c>
                col_bit += bpp;
  4086c6:	444e      	add	r6, r9
                bitmask = bitmask >> bpp;
  4086c8:	fa20 f009 	lsr.w	r0, r0, r9
  4086cc:	e7eb      	b.n	4086a6 <lv_draw_letter+0x332>
  4086ce:	9507      	str	r5, [sp, #28]
  4086d0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
        if(mask_any) {
  4086d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4086d6:	bb6b      	cbnz	r3, 408734 <lv_draw_letter+0x3c0>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  4086d8:	9b08      	ldr	r3, [sp, #32]
  4086da:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4086dc:	1a9b      	subs	r3, r3, r2
  4086de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4086e0:	4423      	add	r3, r4
  4086e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4086e4:	429a      	cmp	r2, r3
  4086e6:	d940      	bls.n	40876a <lv_draw_letter+0x3f6>
            fill_area.y2 ++;
  4086e8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  4086ec:	3301      	adds	r3, #1
  4086ee:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        col_bit += col_bit_row_ofs;
  4086f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4086f4:	441e      	add	r6, r3
        map_p += (col_bit >> 3);
  4086f6:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
        col_bit = col_bit & 0x7;
  4086fa:	f006 0607 	and.w	r6, r6, #7
    for(row = row_start ; row < row_end; row++) {
  4086fe:	f10a 0a01 	add.w	sl, sl, #1
  408702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408704:	459a      	cmp	sl, r3
  408706:	da47      	bge.n	408798 <lv_draw_letter+0x424>
        bitmask = bitmask_init >> col_bit;
  408708:	9b05      	ldr	r3, [sp, #20]
  40870a:	fa23 f006 	lsr.w	r0, r3, r6
        for(col = col_start; col < col_end; col++) {
  40870e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408710:	4619      	mov	r1, r3
  408712:	9a08      	ldr	r2, [sp, #32]
  408714:	4291      	cmp	r1, r2
  408716:	da0b      	bge.n	408730 <lv_draw_letter+0x3bc>
  408718:	9b06      	ldr	r3, [sp, #24]
  40871a:	1919      	adds	r1, r3, r4
  40871c:	4613      	mov	r3, r2
  40871e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408720:	eba3 0c02 	sub.w	ip, r3, r2
  408724:	44a4      	add	ip, r4
  408726:	9b06      	ldr	r3, [sp, #24]
  408728:	eb03 0e0c 	add.w	lr, r3, ip
  40872c:	9d07      	ldr	r5, [sp, #28]
  40872e:	e7bd      	b.n	4086ac <lv_draw_letter+0x338>
  408730:	940a      	str	r4, [sp, #40]	; 0x28
  408732:	e7cf      	b.n	4086d4 <lv_draw_letter+0x360>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  408734:	9b06      	ldr	r3, [sp, #24]
  408736:	441c      	add	r4, r3
  408738:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40873c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  408740:	3301      	adds	r3, #1
  408742:	1a5b      	subs	r3, r3, r1
  408744:	b21b      	sxth	r3, r3
  408746:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  40874a:	4620      	mov	r0, r4
  40874c:	4d1f      	ldr	r5, [pc, #124]	; (4087cc <lv_draw_letter+0x458>)
  40874e:	47a8      	blx	r5
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  408750:	2800      	cmp	r0, #0
  408752:	d1c1      	bne.n	4086d8 <lv_draw_letter+0x364>
  408754:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
  408758:	3101      	adds	r1, #1
  40875a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40875e:	1ac9      	subs	r1, r1, r3
                lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  408760:	b209      	sxth	r1, r1
  408762:	4620      	mov	r0, r4
  408764:	4b1a      	ldr	r3, [pc, #104]	; (4087d0 <lv_draw_letter+0x45c>)
  408766:	4798      	blx	r3
  408768:	e7b6      	b.n	4086d8 <lv_draw_letter+0x364>
            _lv_blend_fill(clip_area, &fill_area,
  40876a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40876c:	9302      	str	r3, [sp, #8]
  40876e:	23ff      	movs	r3, #255	; 0xff
  408770:	9301      	str	r3, [sp, #4]
  408772:	2302      	movs	r3, #2
  408774:	9300      	str	r3, [sp, #0]
  408776:	9b06      	ldr	r3, [sp, #24]
  408778:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
  40877c:	a913      	add	r1, sp, #76	; 0x4c
  40877e:	9804      	ldr	r0, [sp, #16]
  408780:	4c14      	ldr	r4, [pc, #80]	; (4087d4 <lv_draw_letter+0x460>)
  408782:	47a0      	blx	r4
            fill_area.y1 = fill_area.y2 + 1;
  408784:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  408788:	3301      	adds	r3, #1
  40878a:	b21b      	sxth	r3, r3
  40878c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area.y2 = fill_area.y1;
  408790:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            mask_p = 0;
  408794:	465c      	mov	r4, fp
  408796:	e7ac      	b.n	4086f2 <lv_draw_letter+0x37e>
  408798:	9d10      	ldr	r5, [sp, #64]	; 0x40
    if(fill_area.y1 != fill_area.y2) {
  40879a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  40879e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  4087a2:	429a      	cmp	r2, r3
  4087a4:	d00e      	beq.n	4087c4 <lv_draw_letter+0x450>
        fill_area.y2--;
  4087a6:	3b01      	subs	r3, #1
  4087a8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        _lv_blend_fill(clip_area, &fill_area,
  4087ac:	9502      	str	r5, [sp, #8]
  4087ae:	23ff      	movs	r3, #255	; 0xff
  4087b0:	9301      	str	r3, [sp, #4]
  4087b2:	2302      	movs	r3, #2
  4087b4:	9300      	str	r3, [sp, #0]
  4087b6:	9b06      	ldr	r3, [sp, #24]
  4087b8:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
  4087bc:	a913      	add	r1, sp, #76	; 0x4c
  4087be:	9804      	ldr	r0, [sp, #16]
  4087c0:	4c04      	ldr	r4, [pc, #16]	; (4087d4 <lv_draw_letter+0x460>)
  4087c2:	47a0      	blx	r4
    lv_mem_buf_release(mask_buf);
  4087c4:	9806      	ldr	r0, [sp, #24]
  4087c6:	4b04      	ldr	r3, [pc, #16]	; (4087d8 <lv_draw_letter+0x464>)
  4087c8:	4798      	blx	r3
  4087ca:	e609      	b.n	4083e0 <lv_draw_letter+0x6c>
  4087cc:	00409fed 	.word	0x00409fed
  4087d0:	004116ed 	.word	0x004116ed
  4087d4:	00406181 	.word	0x00406181
  4087d8:	00411105 	.word	0x00411105

004087dc <lv_draw_label>:
{
  4087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4087e0:	b0af      	sub	sp, #188	; 0xbc
    if(dsc->opa <= LV_OPA_MIN) return;
  4087e2:	7e94      	ldrb	r4, [r2, #26]
  4087e4:	2c02      	cmp	r4, #2
  4087e6:	d902      	bls.n	4087ee <lv_draw_label+0x12>
    if(txt == NULL || txt[0] == '\0')
  4087e8:	b10b      	cbz	r3, 4087ee <lv_draw_label+0x12>
  4087ea:	781c      	ldrb	r4, [r3, #0]
  4087ec:	b914      	cbnz	r4, 4087f4 <lv_draw_label+0x18>
}
  4087ee:	b02f      	add	sp, #188	; 0xbc
  4087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087f4:	930b      	str	r3, [sp, #44]	; 0x2c
  4087f6:	4616      	mov	r6, r2
  4087f8:	460a      	mov	r2, r1
  4087fa:	9108      	str	r1, [sp, #32]
  4087fc:	4604      	mov	r4, r0
  4087fe:	9010      	str	r0, [sp, #64]	; 0x40
    const lv_font_t * font = dsc->font;
  408800:	6833      	ldr	r3, [r6, #0]
  408802:	9305      	str	r3, [sp, #20]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  408804:	4601      	mov	r1, r0
  408806:	a82c      	add	r0, sp, #176	; 0xb0
  408808:	4ba2      	ldr	r3, [pc, #648]	; (408a94 <lv_draw_label+0x2b8>)
  40880a:	4798      	blx	r3
    if(!clip_ok) return;
  40880c:	2800      	cmp	r0, #0
  40880e:	d0ee      	beq.n	4087ee <lv_draw_label+0x12>
    lv_text_align_t align = dsc->align;
  408810:	7f33      	ldrb	r3, [r6, #28]
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
  408812:	2b00      	cmp	r3, #0
  408814:	bf14      	ite	ne
  408816:	4619      	movne	r1, r3
  408818:	2101      	moveq	r1, #1
  40881a:	910f      	str	r1, [sp, #60]	; 0x3c
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
  40881c:	7f72      	ldrb	r2, [r6, #29]
  40881e:	f012 0f02 	tst.w	r2, #2
  408822:	d13f      	bne.n	4088a4 <lv_draw_label+0xc8>
  408824:	88a3      	ldrh	r3, [r4, #4]
  408826:	3301      	adds	r3, #1
  408828:	8822      	ldrh	r2, [r4, #0]
  40882a:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
  40882c:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
  40882e:	9a05      	ldr	r2, [sp, #20]
  408830:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  408834:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
  408838:	442a      	add	r2, r5
  40883a:	4614      	mov	r4, r2
  40883c:	920e      	str	r2, [sp, #56]	; 0x38
    pos.x = coords->x1;
  40883e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408840:	880a      	ldrh	r2, [r1, #0]
  408842:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
    pos.y = coords->y1;
  408846:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    x_ofs = dsc->ofs_x;
  40884a:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
  40884e:	9212      	str	r2, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  408850:	f9b6 0018 	ldrsh.w	r0, [r6, #24]
    pos.y += y_ofs;
  408854:	180a      	adds	r2, r1, r0
  408856:	b292      	uxth	r2, r2
  408858:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40885c:	9f38      	ldr	r7, [sp, #224]	; 0xe0
  40885e:	f117 0900 	adds.w	r9, r7, #0
  408862:	bf18      	it	ne
  408864:	f04f 0901 	movne.w	r9, #1
  408868:	ea19 77d1 	ands.w	r7, r9, r1, lsr #31
  40886c:	d000      	beq.n	408870 <lv_draw_label+0x94>
  40886e:	b350      	cbz	r0, 4088c6 <lv_draw_label+0xea>
    uint32_t line_start     = 0;
  408870:	2700      	movs	r7, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  408872:	b21b      	sxth	r3, r3
  408874:	4619      	mov	r1, r3
  408876:	930c      	str	r3, [sp, #48]	; 0x30
  408878:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
  40887c:	7f73      	ldrb	r3, [r6, #29]
  40887e:	9300      	str	r3, [sp, #0]
  408880:	460b      	mov	r3, r1
  408882:	9905      	ldr	r1, [sp, #20]
  408884:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408886:	4438      	add	r0, r7
  408888:	4c83      	ldr	r4, [pc, #524]	; (408a98 <lv_draw_label+0x2bc>)
  40888a:	47a0      	blx	r4
  40888c:	eb07 0b00 	add.w	fp, r7, r0
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  408890:	46a0      	mov	r8, r4
  408892:	4639      	mov	r1, r7
  408894:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  408896:	f8cd 9018 	str.w	r9, [sp, #24]
  40889a:	f8dd a020 	ldr.w	sl, [sp, #32]
  40889e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    while(pos.y + line_height_font < mask->y1) {
  4088a2:	e036      	b.n	408912 <lv_draw_label+0x136>
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  4088a4:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  4088a8:	9202      	str	r2, [sp, #8]
  4088aa:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  4088ae:	9201      	str	r2, [sp, #4]
  4088b0:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
  4088b4:	9200      	str	r2, [sp, #0]
  4088b6:	6832      	ldr	r2, [r6, #0]
  4088b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4088ba:	a818      	add	r0, sp, #96	; 0x60
  4088bc:	4c77      	ldr	r4, [pc, #476]	; (408a9c <lv_draw_label+0x2c0>)
  4088be:	47a0      	blx	r4
        w = p.x;
  4088c0:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  4088c4:	e7b3      	b.n	40882e <lv_draw_label+0x52>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  4088c6:	9838      	ldr	r0, [sp, #224]	; 0xe0
  4088c8:	6880      	ldr	r0, [r0, #8]
  4088ca:	1a40      	subs	r0, r0, r1
  4088cc:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  4088d0:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  4088d4:	f5c4 7000 	rsb	r0, r4, #512	; 0x200
  4088d8:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  4088dc:	dd05      	ble.n	4088ea <lv_draw_label+0x10e>
            hint->line_start = -1;
  4088de:	f04f 32ff 	mov.w	r2, #4294967295
  4088e2:	9938      	ldr	r1, [sp, #224]	; 0xe0
  4088e4:	600a      	str	r2, [r1, #0]
    uint32_t line_start     = 0;
  4088e6:	2700      	movs	r7, #0
  4088e8:	e7c3      	b.n	408872 <lv_draw_label+0x96>
        last_line_start = hint->line_start;
  4088ea:	9938      	ldr	r1, [sp, #224]	; 0xe0
  4088ec:	680f      	ldr	r7, [r1, #0]
    if(hint && last_line_start >= 0) {
  4088ee:	2f00      	cmp	r7, #0
  4088f0:	db07      	blt.n	408902 <lv_draw_label+0x126>
  4088f2:	f1b9 0f00 	cmp.w	r9, #0
  4088f6:	d004      	beq.n	408902 <lv_draw_label+0x126>
        pos.y += hint->y;
  4088f8:	6849      	ldr	r1, [r1, #4]
  4088fa:	440a      	add	r2, r1
  4088fc:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
  408900:	e7b7      	b.n	408872 <lv_draw_label+0x96>
    uint32_t line_start     = 0;
  408902:	2700      	movs	r7, #0
  408904:	e7b5      	b.n	408872 <lv_draw_label+0x96>
  408906:	4659      	mov	r1, fp
        if(txt[line_start] == '\0') return;
  408908:	7823      	ldrb	r3, [r4, #0]
  40890a:	2b00      	cmp	r3, #0
  40890c:	f43f af6f 	beq.w	4087ee <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  408910:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  408912:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
  408916:	442b      	add	r3, r5
  408918:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
  40891c:	4293      	cmp	r3, r2
  40891e:	da28      	bge.n	408972 <lv_draw_label+0x196>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  408920:	eb09 040b 	add.w	r4, r9, fp
  408924:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
  408928:	7f73      	ldrb	r3, [r6, #29]
  40892a:	9300      	str	r3, [sp, #0]
  40892c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40892e:	9905      	ldr	r1, [sp, #20]
  408930:	4620      	mov	r0, r4
  408932:	47c0      	blx	r8
  408934:	4458      	add	r0, fp
        pos.y += line_height;
  408936:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
  40893a:	443b      	add	r3, r7
  40893c:	b21b      	sxth	r3, r3
  40893e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  408942:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  408946:	dbde      	blt.n	408906 <lv_draw_label+0x12a>
  408948:	9a06      	ldr	r2, [sp, #24]
  40894a:	2a00      	cmp	r2, #0
  40894c:	d0db      	beq.n	408906 <lv_draw_label+0x12a>
  40894e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
  408950:	6812      	ldr	r2, [r2, #0]
  408952:	2a00      	cmp	r2, #0
  408954:	dad7      	bge.n	408906 <lv_draw_label+0x12a>
            hint->line_start = line_start;
  408956:	9a38      	ldr	r2, [sp, #224]	; 0xe0
  408958:	f8c2 b000 	str.w	fp, [r2]
            hint->y          = pos.y - coords->y1;
  40895c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40895e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  408962:	1a9b      	subs	r3, r3, r2
  408964:	9a38      	ldr	r2, [sp, #224]	; 0xe0
  408966:	6053      	str	r3, [r2, #4]
            hint->coord_y    = coords->y1;
  408968:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40896c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
  40896e:	6093      	str	r3, [r2, #8]
  408970:	e7c9      	b.n	408906 <lv_draw_label+0x12a>
  408972:	460f      	mov	r7, r1
    if(align == LV_TEXT_ALIGN_CENTER) {
  408974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408976:	2b02      	cmp	r3, #2
  408978:	d01f      	beq.n	4089ba <lv_draw_label+0x1de>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
  40897a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40897c:	2b03      	cmp	r3, #3
  40897e:	d037      	beq.n	4089f0 <lv_draw_label+0x214>
    lv_opa_t opa = dsc->opa;
  408980:	7eb3      	ldrb	r3, [r6, #26]
  408982:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t sel_start = dsc->sel_start;
  408984:	f8d6 a004 	ldr.w	sl, [r6, #4]
    uint32_t sel_end = dsc->sel_end;
  408988:	68b3      	ldr	r3, [r6, #8]
  40898a:	4619      	mov	r1, r3
  40898c:	9307      	str	r3, [sp, #28]
    if(sel_start > sel_end) {
  40898e:	459a      	cmp	sl, r3
  408990:	d902      	bls.n	408998 <lv_draw_label+0x1bc>
  408992:	4653      	mov	r3, sl
        sel_start = sel_end;
  408994:	468a      	mov	sl, r1
        sel_end = tmp;
  408996:	9307      	str	r3, [sp, #28]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  408998:	7fb3      	ldrb	r3, [r6, #30]
  40899a:	f013 0f03 	tst.w	r3, #3
  40899e:	d13f      	bne.n	408a20 <lv_draw_label+0x244>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  4089a0:	a81a      	add	r0, sp, #104	; 0x68
  4089a2:	4b3f      	ldr	r3, [pc, #252]	; (408aa0 <lv_draw_label+0x2c4>)
  4089a4:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  4089a6:	8a33      	ldrh	r3, [r6, #16]
  4089a8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    int32_t pos_x_start = pos.x;
  4089ac:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
  4089b0:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  4089b2:	2300      	movs	r3, #0
  4089b4:	9311      	str	r3, [sp, #68]	; 0x44
  4089b6:	46b9      	mov	r9, r7
    while(txt[line_start] != '\0') {
  4089b8:	e154      	b.n	408c64 <lv_draw_label+0x488>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  4089ba:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  4089be:	7f72      	ldrb	r2, [r6, #29]
  4089c0:	9200      	str	r2, [sp, #0]
  4089c2:	9a05      	ldr	r2, [sp, #20]
  4089c4:	ebab 0101 	sub.w	r1, fp, r1
  4089c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4089ca:	4438      	add	r0, r7
  4089cc:	4c35      	ldr	r4, [pc, #212]	; (408aa4 <lv_draw_label+0x2c8>)
  4089ce:	47a0      	blx	r4
  4089d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4089d2:	8893      	ldrh	r3, [r2, #4]
  4089d4:	3301      	adds	r3, #1
  4089d6:	8812      	ldrh	r2, [r2, #0]
  4089d8:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  4089da:	b21b      	sxth	r3, r3
  4089dc:	1a18      	subs	r0, r3, r0
  4089de:	bf48      	it	mi
  4089e0:	3001      	addmi	r0, #1
  4089e2:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  4089e6:	eb03 0060 	add.w	r0, r3, r0, asr #1
  4089ea:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
  4089ee:	e7c7      	b.n	408980 <lv_draw_label+0x1a4>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  4089f0:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  4089f4:	7f72      	ldrb	r2, [r6, #29]
  4089f6:	9200      	str	r2, [sp, #0]
  4089f8:	9a05      	ldr	r2, [sp, #20]
  4089fa:	ebab 0101 	sub.w	r1, fp, r1
  4089fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408a00:	4438      	add	r0, r7
  408a02:	4c28      	ldr	r4, [pc, #160]	; (408aa4 <lv_draw_label+0x2c8>)
  408a04:	47a0      	blx	r4
  408a06:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408a08:	8893      	ldrh	r3, [r2, #4]
  408a0a:	3301      	adds	r3, #1
  408a0c:	8812      	ldrh	r2, [r2, #0]
  408a0e:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
  408a10:	b21b      	sxth	r3, r3
  408a12:	1a1b      	subs	r3, r3, r0
  408a14:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
  408a18:	4413      	add	r3, r2
  408a1a:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
  408a1e:	e7af      	b.n	408980 <lv_draw_label+0x1a4>
        lv_draw_line_dsc_init(&line_dsc);
  408a20:	a828      	add	r0, sp, #160	; 0xa0
  408a22:	4b21      	ldr	r3, [pc, #132]	; (408aa8 <lv_draw_label+0x2cc>)
  408a24:	4798      	blx	r3
        line_dsc.color = dsc->color;
  408a26:	89b3      	ldrh	r3, [r6, #12]
  408a28:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  408a2c:	9b05      	ldr	r3, [sp, #20]
  408a2e:	f993 300e 	ldrsb.w	r3, [r3, #14]
  408a32:	2b00      	cmp	r3, #0
  408a34:	bf08      	it	eq
  408a36:	2301      	moveq	r3, #1
  408a38:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
        line_dsc.opa = dsc->opa;
  408a3c:	7eb3      	ldrb	r3, [r6, #26]
  408a3e:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
        line_dsc.blend_mode = dsc->blend_mode;
  408a42:	7fb3      	ldrb	r3, [r6, #30]
  408a44:	f89d 20a9 	ldrb.w	r2, [sp, #169]	; 0xa9
  408a48:	f3c3 03c2 	ubfx	r3, r3, #3, #3
  408a4c:	f363 0201 	bfi	r2, r3, #0, #2
  408a50:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
  408a54:	e7a4      	b.n	4089a0 <lv_draw_label+0x1c4>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  408a56:	4449      	add	r1, r9
  408a58:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408a5a:	4b14      	ldr	r3, [pc, #80]	; (408aac <lv_draw_label+0x2d0>)
  408a5c:	681b      	ldr	r3, [r3, #0]
  408a5e:	4798      	blx	r3
  408a60:	9006      	str	r0, [sp, #24]
  408a62:	e091      	b.n	408b88 <lv_draw_label+0x3ac>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  408a64:	b91f      	cbnz	r7, 408a6e <lv_draw_label+0x292>
                        par_start = i;
  408a66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  408a68:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  408a6a:	2701      	movs	r7, #1
                        continue;
  408a6c:	e07a      	b.n	408b64 <lv_draw_label+0x388>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
  408a6e:	2f01      	cmp	r7, #1
  408a70:	f000 817d 	beq.w	408d6e <lv_draw_label+0x592>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
  408a74:	2f02      	cmp	r7, #2
  408a76:	f040 809a 	bne.w	408bae <lv_draw_label+0x3d2>
                        cmd_state = CMD_STATE_WAIT;
  408a7a:	2700      	movs	r7, #0
  408a7c:	e072      	b.n	408b64 <lv_draw_label+0x388>
                    if(letter == ' ') {
  408a7e:	2b20      	cmp	r3, #32
  408a80:	d170      	bne.n	408b64 <lv_draw_label+0x388>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  408a82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  408a84:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a86:	1a9b      	subs	r3, r3, r2
  408a88:	2b07      	cmp	r3, #7
  408a8a:	d011      	beq.n	408ab0 <lv_draw_label+0x2d4>
                            recolor.full = dsc->color.full;
  408a8c:	89b3      	ldrh	r3, [r6, #12]
  408a8e:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  408a90:	2702      	movs	r7, #2
  408a92:	e067      	b.n	408b64 <lv_draw_label+0x388>
  408a94:	004107cd 	.word	0x004107cd
  408a98:	004135e1 	.word	0x004135e1
  408a9c:	00413965 	.word	0x00413965
  408aa0:	0040a941 	.word	0x0040a941
  408aa4:	004138bd 	.word	0x004138bd
  408aa8:	00408d95 	.word	0x00408d95
  408aac:	20400018 	.word	0x20400018
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  408ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ab2:	1898      	adds	r0, r3, r2
  408ab4:	1e43      	subs	r3, r0, #1
  408ab6:	3005      	adds	r0, #5
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  408ab8:	aa18      	add	r2, sp, #96	; 0x60
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  408aba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  408abe:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
  408ac2:	4298      	cmp	r0, r3
  408ac4:	d1f9      	bne.n	408aba <lv_draw_label+0x2de>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  408ac6:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  408aca:	4daa      	ldr	r5, [pc, #680]	; (408d74 <lv_draw_label+0x598>)
  408acc:	47a8      	blx	r5
  408ace:	4680      	mov	r8, r0
  408ad0:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  408ad4:	47a8      	blx	r5
  408ad6:	eb00 1808 	add.w	r8, r0, r8, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  408ada:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  408ade:	47a8      	blx	r5
  408ae0:	4604      	mov	r4, r0
  408ae2:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  408ae6:	47a8      	blx	r5
  408ae8:	eb00 1404 	add.w	r4, r0, r4, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  408aec:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  408af0:	47a8      	blx	r5
  408af2:	4607      	mov	r7, r0
  408af4:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  408af8:	47a8      	blx	r5
                            recolor = lv_color_make(r, g, b);
  408afa:	b2e4      	uxtb	r4, r4
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
  408afc:	0963      	lsrs	r3, r4, #5
  408afe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408b00:	f363 0202 	bfi	r2, r3, #0, #3
  408b04:	4613      	mov	r3, r2
  408b06:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  408b0a:	f368 03c7 	bfi	r3, r8, #3, #5
  408b0e:	461a      	mov	r2, r3
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  408b10:	eb00 1307 	add.w	r3, r0, r7, lsl #4
  408b14:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  408b18:	f363 220c 	bfi	r2, r3, #8, #5
  408b1c:	4613      	mov	r3, r2
  408b1e:	08a4      	lsrs	r4, r4, #2
  408b20:	f364 334f 	bfi	r3, r4, #13, #3
  408b24:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  408b28:	b29b      	uxth	r3, r3
  408b2a:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  408b2c:	2702      	movs	r7, #2
  408b2e:	e019      	b.n	408b64 <lv_draw_label+0x388>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  408b30:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
  408b34:	e03d      	b.n	408bb2 <lv_draw_label+0x3d6>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  408b36:	7fb3      	ldrb	r3, [r6, #30]
  408b38:	f3c3 03c2 	ubfx	r3, r3, #3, #3
  408b3c:	9302      	str	r3, [sp, #8]
  408b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408b40:	9301      	str	r3, [sp, #4]
  408b42:	f8ad 8000 	strh.w	r8, [sp]
  408b46:	9b16      	ldr	r3, [sp, #88]	; 0x58
  408b48:	9a05      	ldr	r2, [sp, #20]
  408b4a:	9908      	ldr	r1, [sp, #32]
  408b4c:	a82b      	add	r0, sp, #172	; 0xac
  408b4e:	4c8a      	ldr	r4, [pc, #552]	; (408d78 <lv_draw_label+0x59c>)
  408b50:	47a0      	blx	r4
            if(letter_w > 0) {
  408b52:	2d00      	cmp	r5, #0
  408b54:	dd06      	ble.n	408b64 <lv_draw_label+0x388>
                pos.x += letter_w + dsc->letter_space;
  408b56:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  408b5a:	8ab2      	ldrh	r2, [r6, #20]
  408b5c:	4413      	add	r3, r2
  408b5e:	441d      	add	r5, r3
  408b60:	f8ad 50ac 	strh.w	r5, [sp, #172]	; 0xac
        while(i < line_end - line_start) {
  408b64:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408b66:	ebab 0309 	sub.w	r3, fp, r9
  408b6a:	428b      	cmp	r3, r1
  408b6c:	d94b      	bls.n	408c06 <lv_draw_label+0x42a>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  408b6e:	f64f 74ff 	movw	r4, #65535	; 0xffff
  408b72:	9b07      	ldr	r3, [sp, #28]
  408b74:	45a2      	cmp	sl, r4
  408b76:	bf18      	it	ne
  408b78:	42a3      	cmpne	r3, r4
  408b7a:	bf14      	ite	ne
  408b7c:	2401      	movne	r4, #1
  408b7e:	2400      	moveq	r4, #0
  408b80:	f47f af69 	bne.w	408a56 <lv_draw_label+0x27a>
            uint32_t logical_char_pos = 0;
  408b84:	2300      	movs	r3, #0
  408b86:	9306      	str	r3, [sp, #24]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
  408b88:	ab27      	add	r3, sp, #156	; 0x9c
  408b8a:	aa17      	add	r2, sp, #92	; 0x5c
  408b8c:	a916      	add	r1, sp, #88	; 0x58
  408b8e:	9809      	ldr	r0, [sp, #36]	; 0x24
  408b90:	4d7a      	ldr	r5, [pc, #488]	; (408d7c <lv_draw_label+0x5a0>)
  408b92:	47a8      	blx	r5
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
  408b94:	7f73      	ldrb	r3, [r6, #29]
  408b96:	f013 0f01 	tst.w	r3, #1
  408b9a:	d006      	beq.n	408baa <lv_draw_label+0x3ce>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  408b9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  408b9e:	2b23      	cmp	r3, #35	; 0x23
  408ba0:	f43f af60 	beq.w	408a64 <lv_draw_label+0x288>
                if(cmd_state == CMD_STATE_PAR) {
  408ba4:	2f01      	cmp	r7, #1
  408ba6:	f43f af6a 	beq.w	408a7e <lv_draw_label+0x2a2>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  408baa:	2f02      	cmp	r7, #2
  408bac:	d0c0      	beq.n	408b30 <lv_draw_label+0x354>
            lv_color_t color = dsc->color;
  408bae:	f8b6 800c 	ldrh.w	r8, [r6, #12]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  408bb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  408bb4:	9916      	ldr	r1, [sp, #88]	; 0x58
  408bb6:	9805      	ldr	r0, [sp, #20]
  408bb8:	4b71      	ldr	r3, [pc, #452]	; (408d80 <lv_draw_label+0x5a4>)
  408bba:	4798      	blx	r3
  408bbc:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  408bbe:	2c00      	cmp	r4, #0
  408bc0:	d0b9      	beq.n	408b36 <lv_draw_label+0x35a>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  408bc2:	9a06      	ldr	r2, [sp, #24]
  408bc4:	4592      	cmp	sl, r2
  408bc6:	d8b6      	bhi.n	408b36 <lv_draw_label+0x35a>
  408bc8:	9b07      	ldr	r3, [sp, #28]
  408bca:	4619      	mov	r1, r3
  408bcc:	4291      	cmp	r1, r2
  408bce:	d9b2      	bls.n	408b36 <lv_draw_label+0x35a>
                    sel_coords.x1 = pos.x;
  408bd0:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
  408bd4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  408bd8:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
  408bdc:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  408be0:	3b01      	subs	r3, #1
  408be2:	8ab1      	ldrh	r1, [r6, #20]
  408be4:	440b      	add	r3, r1
  408be6:	4403      	add	r3, r0
  408be8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  408bec:	3a01      	subs	r2, #1
  408bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408bf0:	441a      	add	r2, r3
  408bf2:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  408bf6:	aa1a      	add	r2, sp, #104	; 0x68
  408bf8:	9908      	ldr	r1, [sp, #32]
  408bfa:	a818      	add	r0, sp, #96	; 0x60
  408bfc:	4b61      	ldr	r3, [pc, #388]	; (408d84 <lv_draw_label+0x5a8>)
  408bfe:	4798      	blx	r3
                    color = dsc->sel_color;
  408c00:	f8b6 800e 	ldrh.w	r8, [r6, #14]
  408c04:	e797      	b.n	408b36 <lv_draw_label+0x35a>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  408c06:	7fb3      	ldrb	r3, [r6, #30]
  408c08:	f013 0f02 	tst.w	r3, #2
  408c0c:	d13c      	bne.n	408c88 <lv_draw_label+0x4ac>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  408c0e:	7fb3      	ldrb	r3, [r6, #30]
  408c10:	f013 0f01 	tst.w	r3, #1
  408c14:	d15d      	bne.n	408cd2 <lv_draw_label+0x4f6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  408c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408c18:	eb03 050b 	add.w	r5, r3, fp
  408c1c:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
  408c20:	7f73      	ldrb	r3, [r6, #29]
  408c22:	9300      	str	r3, [sp, #0]
  408c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408c26:	9905      	ldr	r1, [sp, #20]
  408c28:	4628      	mov	r0, r5
  408c2a:	4c57      	ldr	r4, [pc, #348]	; (408d88 <lv_draw_label+0x5ac>)
  408c2c:	47a0      	blx	r4
  408c2e:	eb0b 0400 	add.w	r4, fp, r0
        pos.x = coords->x1;
  408c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408c34:	881b      	ldrh	r3, [r3, #0]
  408c36:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        if(align == LV_TEXT_ALIGN_CENTER) {
  408c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408c3c:	2b02      	cmp	r3, #2
  408c3e:	d067      	beq.n	408d10 <lv_draw_label+0x534>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
  408c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408c42:	2b03      	cmp	r3, #3
  408c44:	d07d      	beq.n	408d42 <lv_draw_label+0x566>
        pos.y += line_height;
  408c46:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
  408c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408c4c:	4413      	add	r3, r2
  408c4e:	b21b      	sxth	r3, r3
  408c50:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        line_start = line_end;
  408c54:	46d9      	mov	r9, fp
        if(pos.y > mask->y2) return;
  408c56:	9a08      	ldr	r2, [sp, #32]
  408c58:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  408c5c:	429a      	cmp	r2, r3
  408c5e:	f6ff adc6 	blt.w	4087ee <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  408c62:	46a3      	mov	fp, r4
    while(txt[line_start] != '\0') {
  408c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408c66:	4613      	mov	r3, r2
  408c68:	444b      	add	r3, r9
  408c6a:	9309      	str	r3, [sp, #36]	; 0x24
  408c6c:	f812 3009 	ldrb.w	r3, [r2, r9]
  408c70:	2b00      	cmp	r3, #0
  408c72:	f43f adbc 	beq.w	4087ee <lv_draw_label+0x12>
        pos.x += x_ofs;
  408c76:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  408c7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408c7c:	4413      	add	r3, r2
  408c7e:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        i         = 0;
  408c82:	2700      	movs	r7, #0
  408c84:	9727      	str	r7, [sp, #156]	; 0x9c
        while(i < line_end - line_start) {
  408c86:	e76d      	b.n	408b64 <lv_draw_label+0x388>
            p1.x = pos_x_start;
  408c88:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  408c8c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  408c90:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  408c94:	2a00      	cmp	r2, #0
  408c96:	bfb8      	it	lt
  408c98:	3201      	addlt	r2, #1
  408c9a:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
  408c9e:	eb03 0362 	add.w	r3, r3, r2, asr #1
  408ca2:	6832      	ldr	r2, [r6, #0]
  408ca4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  408ca8:	2a00      	cmp	r2, #0
  408caa:	bfb8      	it	lt
  408cac:	3201      	addlt	r2, #1
  408cae:	eb03 0362 	add.w	r3, r3, r2, asr #1
  408cb2:	b21b      	sxth	r3, r3
  408cb4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  408cb8:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
  408cbc:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  408cc0:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  408cc4:	ab28      	add	r3, sp, #160	; 0xa0
  408cc6:	9a08      	ldr	r2, [sp, #32]
  408cc8:	a918      	add	r1, sp, #96	; 0x60
  408cca:	a817      	add	r0, sp, #92	; 0x5c
  408ccc:	4c2f      	ldr	r4, [pc, #188]	; (408d8c <lv_draw_label+0x5b0>)
  408cce:	47a0      	blx	r4
  408cd0:	e79d      	b.n	408c0e <lv_draw_label+0x432>
            p1.x = pos_x_start;
  408cd2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  408cd6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  408cda:	6832      	ldr	r2, [r6, #0]
  408cdc:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
  408ce0:	8911      	ldrh	r1, [r2, #8]
  408ce2:	440b      	add	r3, r1
  408ce4:	8952      	ldrh	r2, [r2, #10]
  408ce6:	1a9b      	subs	r3, r3, r2
  408ce8:	9a05      	ldr	r2, [sp, #20]
  408cea:	f992 200d 	ldrsb.w	r2, [r2, #13]
  408cee:	1a9b      	subs	r3, r3, r2
  408cf0:	b21b      	sxth	r3, r3
  408cf2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  408cf6:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
  408cfa:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  408cfe:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  408d02:	ab28      	add	r3, sp, #160	; 0xa0
  408d04:	9a08      	ldr	r2, [sp, #32]
  408d06:	a918      	add	r1, sp, #96	; 0x60
  408d08:	a817      	add	r0, sp, #92	; 0x5c
  408d0a:	4c20      	ldr	r4, [pc, #128]	; (408d8c <lv_draw_label+0x5b0>)
  408d0c:	47a0      	blx	r4
  408d0e:	e782      	b.n	408c16 <lv_draw_label+0x43a>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  408d10:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  408d14:	7f72      	ldrb	r2, [r6, #29]
  408d16:	9200      	str	r2, [sp, #0]
  408d18:	9a05      	ldr	r2, [sp, #20]
  408d1a:	4601      	mov	r1, r0
  408d1c:	4628      	mov	r0, r5
  408d1e:	4d1c      	ldr	r5, [pc, #112]	; (408d90 <lv_draw_label+0x5b4>)
  408d20:	47a8      	blx	r5
  408d22:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408d24:	8893      	ldrh	r3, [r2, #4]
  408d26:	3301      	adds	r3, #1
  408d28:	8812      	ldrh	r2, [r2, #0]
  408d2a:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  408d2c:	b21b      	sxth	r3, r3
  408d2e:	1a1b      	subs	r3, r3, r0
  408d30:	bf48      	it	mi
  408d32:	3301      	addmi	r3, #1
  408d34:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
  408d38:	eb02 0363 	add.w	r3, r2, r3, asr #1
  408d3c:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
  408d40:	e781      	b.n	408c46 <lv_draw_label+0x46a>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  408d42:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  408d46:	7f72      	ldrb	r2, [r6, #29]
  408d48:	9200      	str	r2, [sp, #0]
  408d4a:	9a05      	ldr	r2, [sp, #20]
  408d4c:	4601      	mov	r1, r0
  408d4e:	4628      	mov	r0, r5
  408d50:	4d0f      	ldr	r5, [pc, #60]	; (408d90 <lv_draw_label+0x5b4>)
  408d52:	47a8      	blx	r5
  408d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408d56:	8893      	ldrh	r3, [r2, #4]
  408d58:	3301      	adds	r3, #1
  408d5a:	8812      	ldrh	r2, [r2, #0]
  408d5c:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
  408d5e:	b21b      	sxth	r3, r3
  408d60:	1a1b      	subs	r3, r3, r0
  408d62:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
  408d66:	4413      	add	r3, r2
  408d68:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
  408d6c:	e76b      	b.n	408c46 <lv_draw_label+0x46a>
                        cmd_state = CMD_STATE_WAIT;
  408d6e:	2700      	movs	r7, #0
  408d70:	e71d      	b.n	408bae <lv_draw_label+0x3d2>
  408d72:	bf00      	nop
  408d74:	004082cf 	.word	0x004082cf
  408d78:	00408375 	.word	0x00408375
  408d7c:	0041388d 	.word	0x0041388d
  408d80:	0040fd71 	.word	0x0040fd71
  408d84:	0040b101 	.word	0x0040b101
  408d88:	004135e1 	.word	0x004135e1
  408d8c:	00408dc5 	.word	0x00408dc5
  408d90:	004138bd 	.word	0x004138bd

00408d94 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
  408d94:	b510      	push	{r4, lr}
  408d96:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  408d98:	210a      	movs	r1, #10
  408d9a:	4b09      	ldr	r3, [pc, #36]	; (408dc0 <lv_draw_line_dsc_init+0x2c>)
  408d9c:	4798      	blx	r3
    dsc->width = 1;
  408d9e:	2301      	movs	r3, #1
  408da0:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  408da2:	23ff      	movs	r3, #255	; 0xff
  408da4:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
  408da6:	7823      	ldrb	r3, [r4, #0]
  408da8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  408dac:	f36f 03c7 	bfc	r3, #3, #5
  408db0:	7023      	strb	r3, [r4, #0]
  408db2:	7863      	ldrb	r3, [r4, #1]
  408db4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  408db8:	f36f 1347 	bfc	r3, #5, #3
  408dbc:	7063      	strb	r3, [r4, #1]
  408dbe:	bd10      	pop	{r4, pc}
  408dc0:	004116ed 	.word	0x004116ed

00408dc4 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
  408dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408dc8:	b0c3      	sub	sp, #268	; 0x10c
    if(dsc->width == 0) return;
  408dca:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  408dce:	2c00      	cmp	r4, #0
  408dd0:	f000 841f 	beq.w	409612 <lv_draw_line+0x84e>
    if(dsc->opa <= LV_OPA_MIN) return;
  408dd4:	7a1d      	ldrb	r5, [r3, #8]
  408dd6:	2d02      	cmp	r5, #2
  408dd8:	f240 841b 	bls.w	409612 <lv_draw_line+0x84e>

    if(point1->x == point2->x && point1->y == point2->y) return;
  408ddc:	f9b0 6000 	ldrsh.w	r6, [r0]
  408de0:	f9b1 7000 	ldrsh.w	r7, [r1]
  408de4:	42be      	cmp	r6, r7
  408de6:	f000 8132 	beq.w	40904e <lv_draw_line+0x28a>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
  408dea:	4625      	mov	r5, r4
  408dec:	2c00      	cmp	r4, #0
  408dee:	bfb8      	it	lt
  408df0:	1c65      	addlt	r5, r4, #1
  408df2:	461c      	mov	r4, r3
  408df4:	4696      	mov	lr, r2
  408df6:	9208      	str	r2, [sp, #32]
  408df8:	9107      	str	r1, [sp, #28]
  408dfa:	9006      	str	r0, [sp, #24]
  408dfc:	f3c5 034f 	ubfx	r3, r5, #1, #16
  408e00:	42be      	cmp	r6, r7
  408e02:	bfd4      	ite	le
  408e04:	ebc3 0206 	rsble	r2, r3, r6
  408e08:	ebc3 0207 	rsbgt	r2, r3, r7
  408e0c:	f8ad 2100 	strh.w	r2, [sp, #256]	; 0x100
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
  408e10:	42be      	cmp	r6, r7
  408e12:	bfac      	ite	ge
  408e14:	199a      	addge	r2, r3, r6
  408e16:	19da      	addlt	r2, r3, r7
  408e18:	f8ad 2104 	strh.w	r2, [sp, #260]	; 0x104
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
  408e1c:	460d      	mov	r5, r1
  408e1e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  408e22:	4606      	mov	r6, r0
  408e24:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  408e28:	4291      	cmp	r1, r2
  408e2a:	bfd4      	ite	le
  408e2c:	ebc3 0001 	rsble	r0, r3, r1
  408e30:	ebc3 0002 	rsbgt	r0, r3, r2
  408e34:	f8ad 0102 	strh.w	r0, [sp, #258]	; 0x102
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
  408e38:	4291      	cmp	r1, r2
  408e3a:	bfac      	ite	ge
  408e3c:	185b      	addge	r3, r3, r1
  408e3e:	189b      	addlt	r3, r3, r2
  408e40:	f8ad 3106 	strh.w	r3, [sp, #262]	; 0x106

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  408e44:	4672      	mov	r2, lr
  408e46:	a940      	add	r1, sp, #256	; 0x100
  408e48:	4608      	mov	r0, r1
  408e4a:	4ba2      	ldr	r3, [pc, #648]	; (4090d4 <lv_draw_line+0x310>)
  408e4c:	4798      	blx	r3
    if(!is_common) return;
  408e4e:	4683      	mov	fp, r0
  408e50:	2800      	cmp	r0, #0
  408e52:	f000 83de 	beq.w	409612 <lv_draw_line+0x84e>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  408e56:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  408e5a:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
  408e5e:	42ae      	cmp	r6, r5
  408e60:	f000 80fd 	beq.w	40905e <lv_draw_line+0x29a>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  408e64:	9b06      	ldr	r3, [sp, #24]
  408e66:	f9b3 3000 	ldrsh.w	r3, [r3]
  408e6a:	461a      	mov	r2, r3
  408e6c:	9305      	str	r3, [sp, #20]
  408e6e:	9b07      	ldr	r3, [sp, #28]
  408e70:	f9b3 a000 	ldrsh.w	sl, [r3]
  408e74:	4552      	cmp	r2, sl
  408e76:	f000 81f9 	beq.w	40926c <lv_draw_line+0x4a8>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  408e7a:	42ae      	cmp	r6, r5
  408e7c:	db06      	blt.n	408e8c <lv_draw_line+0xc8>
  408e7e:	4633      	mov	r3, r6
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
  408e80:	462e      	mov	r6, r5
        p2.y = point1->y;
  408e82:	461d      	mov	r5, r3
    if(point1->y < point2->y) {
  408e84:	9b05      	ldr	r3, [sp, #20]
        p1.x = point2->x;
  408e86:	f8cd a014 	str.w	sl, [sp, #20]
        p2.x = point1->x;
  408e8a:	469a      	mov	sl, r3
    }

    int32_t xdiff = p2.x - p1.x;
  408e8c:	9b05      	ldr	r3, [sp, #20]
  408e8e:	ebaa 0303 	sub.w	r3, sl, r3
  408e92:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
  408e94:	1baa      	subs	r2, r5, r6
  408e96:	920a      	str	r2, [sp, #40]	; 0x28
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
  408e98:	2b00      	cmp	r3, #0
  408e9a:	bfb8      	it	lt
  408e9c:	425b      	neglt	r3, r3
  408e9e:	469b      	mov	fp, r3
  408ea0:	2a00      	cmp	r2, #0
  408ea2:	bfb8      	it	lt
  408ea4:	4252      	neglt	r2, r2
  408ea6:	4690      	mov	r8, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  408ea8:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
  408eac:	4293      	cmp	r3, r2
  408eae:	f340 82bf 	ble.w	409430 <lv_draw_line+0x66c>
  408eb2:	0153      	lsls	r3, r2, #5
  408eb4:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  408eb8:	4a87      	ldr	r2, [pc, #540]	; (4090d8 <lv_draw_line+0x314>)
  408eba:	5cd3      	ldrb	r3, [r2, r3]
  408ebc:	fb09 f903 	mul.w	r9, r9, r3
  408ec0:	f109 093f 	add.w	r9, r9, #63	; 0x3f
  408ec4:	ea4f 13e9 	mov.w	r3, r9, asr #7
  408ec8:	461f      	mov	r7, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MIN(p1.x, p2.x) - w;
  408eca:	b29b      	uxth	r3, r3
  408ecc:	9805      	ldr	r0, [sp, #20]
  408ece:	4582      	cmp	sl, r0
  408ed0:	bfd4      	ite	le
  408ed2:	ebc3 020a 	rsble	r2, r3, sl
  408ed6:	ebc3 0200 	rsbgt	r2, r3, r0
  408eda:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.x2 = LV_MAX(p1.x, p2.x) + w;
  408ede:	4582      	cmp	sl, r0
  408ee0:	bfac      	ite	ge
  408ee2:	eb03 020a 	addge.w	r2, r3, sl
  408ee6:	181a      	addlt	r2, r3, r0
  408ee8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MIN(p1.y, p2.y) - w;
  408eec:	42b5      	cmp	r5, r6
  408eee:	bfd4      	ite	le
  408ef0:	ebc3 0205 	rsble	r2, r3, r5
  408ef4:	ebc3 0206 	rsbgt	r2, r3, r6
  408ef8:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;
  408efc:	42b5      	cmp	r5, r6
  408efe:	bfac      	ite	ge
  408f00:	195b      	addge	r3, r3, r5
  408f02:	199b      	addlt	r3, r3, r6
  408f04:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  408f08:	aa40      	add	r2, sp, #256	; 0x100
  408f0a:	a90e      	add	r1, sp, #56	; 0x38
  408f0c:	4608      	mov	r0, r1
  408f0e:	4b71      	ldr	r3, [pc, #452]	; (4090d4 <lv_draw_line+0x310>)
  408f10:	4798      	blx	r3
    if(is_common == false) return;
  408f12:	2800      	cmp	r0, #0
  408f14:	f000 8379 	beq.w	40960a <lv_draw_line+0x846>
    int32_t w_half0 = w >> 1;
  408f18:	ea4f 2929 	mov.w	r9, r9, asr #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  408f1c:	f007 0301 	and.w	r3, r7, #1
  408f20:	444b      	add	r3, r9
  408f22:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  408f24:	45c3      	cmp	fp, r8
  408f26:	f340 82ab 	ble.w	409480 <lv_draw_line+0x6bc>
        if(xdiff > 0) {
  408f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408f2c:	2a00      	cmp	r2, #0
  408f2e:	f340 8283 	ble.w	409438 <lv_draw_line+0x674>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  408f32:	fa1f fb86 	uxth.w	fp, r6
  408f36:	fa1f f389 	uxth.w	r3, r9
  408f3a:	fa1f f985 	uxth.w	r9, r5
  408f3e:	ebab 0203 	sub.w	r2, fp, r3
  408f42:	2100      	movs	r1, #0
  408f44:	9101      	str	r1, [sp, #4]
  408f46:	eba9 0303 	sub.w	r3, r9, r3
  408f4a:	b21b      	sxth	r3, r3
  408f4c:	9300      	str	r3, [sp, #0]
  408f4e:	4653      	mov	r3, sl
  408f50:	b212      	sxth	r2, r2
  408f52:	9905      	ldr	r1, [sp, #20]
  408f54:	a812      	add	r0, sp, #72	; 0x48
  408f56:	4f61      	ldr	r7, [pc, #388]	; (4090dc <lv_draw_line+0x318>)
  408f58:	47b8      	blx	r7
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  408f5a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  408f5e:	eb0b 0208 	add.w	r2, fp, r8
  408f62:	2301      	movs	r3, #1
  408f64:	9301      	str	r3, [sp, #4]
  408f66:	44c1      	add	r9, r8
  408f68:	fa0f f389 	sxth.w	r3, r9
  408f6c:	9300      	str	r3, [sp, #0]
  408f6e:	4653      	mov	r3, sl
  408f70:	b212      	sxth	r2, r2
  408f72:	9905      	ldr	r1, [sp, #20]
  408f74:	a81d      	add	r0, sp, #116	; 0x74
  408f76:	47b8      	blx	r7
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  408f78:	2100      	movs	r1, #0
  408f7a:	a812      	add	r0, sp, #72	; 0x48
  408f7c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 409100 <lv_draw_line+0x33c>
  408f80:	47c0      	blx	r8
  408f82:	900c      	str	r0, [sp, #48]	; 0x30
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  408f84:	2100      	movs	r1, #0
  408f86:	a81d      	add	r0, sp, #116	; 0x74
  408f88:	47c0      	blx	r8
  408f8a:	900d      	str	r0, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  408f8c:	7a63      	ldrb	r3, [r4, #9]
  408f8e:	f013 0f10 	tst.w	r3, #16
  408f92:	f000 8299 	beq.w	4094c8 <lv_draw_line+0x704>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  408f96:	f04f 33ff 	mov.w	r3, #4294967295
  408f9a:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  408f9c:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  408f9e:	4b50      	ldr	r3, [pc, #320]	; (4090e0 <lv_draw_line+0x31c>)
  408fa0:	4798      	blx	r3
  408fa2:	4606      	mov	r6, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
  408fa4:	4b4f      	ldr	r3, [pc, #316]	; (4090e4 <lv_draw_line+0x320>)
  408fa6:	4798      	blx	r3
  408fa8:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &draw_buf->area;

    /*Store the coordinates of the `draw_a` relative to the draw_buf*/
    draw_area.x1 -= disp_area->x1;
  408faa:	8a07      	ldrh	r7, [r0, #16]
  408fac:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
  408fb0:	1bed      	subs	r5, r5, r7
  408fb2:	b2aa      	uxth	r2, r5
  408fb4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
  408fb8:	8a40      	ldrh	r0, [r0, #18]
  408fba:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
  408fbe:	1a09      	subs	r1, r1, r0
  408fc0:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
  408fc4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  408fc8:	1bdb      	subs	r3, r3, r7
  408fca:	b29b      	uxth	r3, r3
  408fcc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
  408fd0:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  408fd4:	1a09      	subs	r1, r1, r0
  408fd6:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
  408fda:	1c5d      	adds	r5, r3, #1
  408fdc:	1aad      	subs	r5, r5, r2
  408fde:	b22d      	sxth	r5, r5
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  408fe0:	4630      	mov	r0, r6
  408fe2:	4b41      	ldr	r3, [pc, #260]	; (4090e8 <lv_draw_line+0x324>)
  408fe4:	4798      	blx	r3
  408fe6:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&draw_area), hor_res);
  408fe8:	a80e      	add	r0, sp, #56	; 0x38
  408fea:	4b40      	ldr	r3, [pc, #256]	; (4090ec <lv_draw_line+0x328>)
  408fec:	4798      	blx	r3
  408fee:	4583      	cmp	fp, r0
  408ff0:	f200 8293 	bhi.w	40951a <lv_draw_line+0x756>
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
  408ff4:	4658      	mov	r0, fp
  408ff6:	4b3e      	ldr	r3, [pc, #248]	; (4090f0 <lv_draw_line+0x32c>)
  408ff8:	4798      	blx	r3
  408ffa:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  408ffc:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  409000:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  409004:	441a      	add	r2, r3
  409006:	b212      	sxth	r2, r2
  409008:	9205      	str	r2, [sp, #20]
  40900a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40900e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  409012:	4413      	add	r3, r2
  409014:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  409018:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  40901c:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  409020:	4413      	add	r3, r2
  409022:	b21b      	sxth	r3, r3
  409024:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  409028:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    int32_t x = draw_buf->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    lv_memset_ff(mask_buf, mask_buf_size);
  40902c:	4659      	mov	r1, fp
  40902e:	4b31      	ldr	r3, [pc, #196]	; (4090f4 <lv_draw_line+0x330>)
  409030:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  409032:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  409036:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  40903a:	4416      	add	r6, r2
  40903c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  409040:	4413      	add	r3, r2
  409042:	429e      	cmp	r6, r3
  409044:	f300 82ac 	bgt.w	4095a0 <lv_draw_line+0x7dc>
  409048:	2700      	movs	r7, #0
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
  40904a:	9409      	str	r4, [sp, #36]	; 0x24
  40904c:	e293      	b.n	409576 <lv_draw_line+0x7b2>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40904e:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  409052:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  409056:	45ae      	cmp	lr, r5
  409058:	f47f aec7 	bne.w	408dea <lv_draw_line+0x26>
  40905c:	e2d9      	b.n	409612 <lv_draw_line+0x84e>
    lv_opa_t opa = dsc->opa;
  40905e:	7a25      	ldrb	r5, [r4, #8]
    int32_t w = dsc->width - 1;
  409060:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  409064:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
  409066:	1059      	asrs	r1, r3, #1
    draw_area.x1 = LV_MIN(point1->x, point2->x);
  409068:	9a07      	ldr	r2, [sp, #28]
  40906a:	f9b2 2000 	ldrsh.w	r2, [r2]
  40906e:	9806      	ldr	r0, [sp, #24]
  409070:	f9b0 0000 	ldrsh.w	r0, [r0]
  409074:	4617      	mov	r7, r2
  409076:	4282      	cmp	r2, r0
  409078:	bfa8      	it	ge
  40907a:	4607      	movge	r7, r0
  40907c:	f8ad 70a0 	strh.w	r7, [sp, #160]	; 0xa0
    draw_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
  409080:	4282      	cmp	r2, r0
  409082:	bfb8      	it	lt
  409084:	4602      	movlt	r2, r0
  409086:	3a01      	subs	r2, #1
  409088:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
  40908c:	b2b6      	uxth	r6, r6
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40908e:	f003 0301 	and.w	r3, r3, #1
  409092:	440b      	add	r3, r1
    draw_area.y1 = point1->y - w_half1;
  409094:	1af3      	subs	r3, r6, r3
  409096:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
  40909a:	440e      	add	r6, r1
  40909c:	f8ad 60a6 	strh.w	r6, [sp, #166]	; 0xa6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  4090a0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  4090a4:	b123      	cbz	r3, 4090b0 <lv_draw_line+0x2ec>
  4090a6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4090aa:	2b00      	cmp	r3, #0
  4090ac:	f040 8302 	bne.w	4096b4 <lv_draw_line+0x8f0>
    if(lv_draw_mask_is_any(&draw_area)) simple_mode = false;
  4090b0:	a828      	add	r0, sp, #160	; 0xa0
  4090b2:	4b11      	ldr	r3, [pc, #68]	; (4090f8 <lv_draw_line+0x334>)
  4090b4:	4798      	blx	r3
    if(simple_mode) {
  4090b6:	bb28      	cbnz	r0, 409104 <lv_draw_line+0x340>
                       dsc->blend_mode);
  4090b8:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
  4090ba:	f003 0303 	and.w	r3, r3, #3
  4090be:	9302      	str	r3, [sp, #8]
  4090c0:	9501      	str	r5, [sp, #4]
  4090c2:	2301      	movs	r3, #1
  4090c4:	9300      	str	r3, [sp, #0]
  4090c6:	2300      	movs	r3, #0
  4090c8:	8822      	ldrh	r2, [r4, #0]
  4090ca:	a928      	add	r1, sp, #160	; 0xa0
  4090cc:	a840      	add	r0, sp, #256	; 0x100
  4090ce:	4d0b      	ldr	r5, [pc, #44]	; (4090fc <lv_draw_line+0x338>)
  4090d0:	47a8      	blx	r5
  4090d2:	e29a      	b.n	40960a <lv_draw_line+0x846>
  4090d4:	004107cd 	.word	0x004107cd
  4090d8:	0041c6fc 	.word	0x0041c6fc
  4090dc:	0040a149 	.word	0x0040a149
  4090e0:	00405f49 	.word	0x00405f49
  4090e4:	004101c9 	.word	0x004101c9
  4090e8:	0041013d 	.word	0x0041013d
  4090ec:	00410775 	.word	0x00410775
  4090f0:	004115a9 	.word	0x004115a9
  4090f4:	00411791 	.word	0x00411791
  4090f8:	0040a0cd 	.word	0x0040a0cd
  4090fc:	00406181 	.word	0x00406181
  409100:	00409f91 	.word	0x00409f91
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  409104:	f04f 0b00 	mov.w	fp, #0
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  409108:	4ba1      	ldr	r3, [pc, #644]	; (409390 <lv_draw_line+0x5cc>)
  40910a:	4798      	blx	r3
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
  40910c:	4ba1      	ldr	r3, [pc, #644]	; (409394 <lv_draw_line+0x5d0>)
  40910e:	4798      	blx	r3
  409110:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  409112:	aa28      	add	r2, sp, #160	; 0xa0
  409114:	a940      	add	r1, sp, #256	; 0x100
  409116:	4610      	mov	r0, r2
  409118:	4b9f      	ldr	r3, [pc, #636]	; (409398 <lv_draw_line+0x5d4>)
  40911a:	4798      	blx	r3
        if(!is_common) return;
  40911c:	2800      	cmp	r0, #0
  40911e:	f000 8274 	beq.w	40960a <lv_draw_line+0x846>
        draw_area.x1 -= disp_area->x1;
  409122:	f9bd e0a0 	ldrsh.w	lr, [sp, #160]	; 0xa0
  409126:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
  40912a:	b28b      	uxth	r3, r1
  40912c:	ebae 0203 	sub.w	r2, lr, r3
  409130:	b292      	uxth	r2, r2
  409132:	fa0f fc82 	sxth.w	ip, r2
  409136:	f8ad c0a0 	strh.w	ip, [sp, #160]	; 0xa0
        draw_area.y1 -= disp_area->y1;
  40913a:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
  40913e:	f8b7 8012 	ldrh.w	r8, [r7, #18]
  409142:	eba0 0508 	sub.w	r5, r0, r8
  409146:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
  40914a:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
  40914e:	1af3      	subs	r3, r6, r3
  409150:	b29b      	uxth	r3, r3
  409152:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
  409156:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
  40915a:	eba5 0508 	sub.w	r5, r5, r8
  40915e:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
  409162:	3301      	adds	r3, #1
  409164:	1a9a      	subs	r2, r3, r2
  409166:	b215      	sxth	r5, r2
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  409168:	f8ad e0cc 	strh.w	lr, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40916c:	f8ad 60d0 	strh.w	r6, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  409170:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
  409174:	f8ad 00d2 	strh.w	r0, [sp, #210]	; 0xd2
        if(dashed) {
  409178:	f1bb 0f00 	cmp.w	fp, #0
  40917c:	d01c      	beq.n	4091b8 <lv_draw_line+0x3f4>
            dash_start = (draw_buf->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40917e:	4461      	add	r1, ip
  409180:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  409184:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  409188:	441a      	add	r2, r3
  40918a:	fb91 f3f2 	sdiv	r3, r1, r2
  40918e:	fb02 1113 	mls	r1, r2, r3, r1
  409192:	b20b      	sxth	r3, r1
  409194:	930a      	str	r3, [sp, #40]	; 0x28
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
  409196:	9509      	str	r5, [sp, #36]	; 0x24
  409198:	4628      	mov	r0, r5
  40919a:	4b80      	ldr	r3, [pc, #512]	; (40939c <lv_draw_line+0x5d8>)
  40919c:	4798      	blx	r3
  40919e:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4091a0:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
  4091a4:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  4091a8:	429e      	cmp	r6, r3
  4091aa:	dc5b      	bgt.n	409264 <lv_draw_line+0x4a0>
            lv_memset_ff(mask_buf, draw_area_w);
  4091ac:	f8df 8200 	ldr.w	r8, [pc, #512]	; 4093b0 <lv_draw_line+0x5ec>
            _lv_blend_fill(clip, &fill_area,
  4091b0:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 4093ac <lv_draw_line+0x5e8>
  4091b4:	9505      	str	r5, [sp, #20]
  4091b6:	e036      	b.n	409226 <lv_draw_line+0x462>
        if(dashed) {
  4091b8:	2100      	movs	r1, #0
  4091ba:	e7ea      	b.n	409192 <lv_draw_line+0x3ce>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  4091bc:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
  4091c0:	4473      	add	r3, lr
  4091c2:	429a      	cmp	r2, r3
  4091c4:	da03      	bge.n	4091ce <lv_draw_line+0x40a>
                            mask_buf[i] = 0x00;
  4091c6:	f809 1000 	strb.w	r1, [r9, r0]
  4091ca:	4613      	mov	r3, r2
  4091cc:	e000      	b.n	4091d0 <lv_draw_line+0x40c>
                            dash_cnt = 0;
  4091ce:	460b      	mov	r3, r1
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  4091d0:	3001      	adds	r0, #1
  4091d2:	b200      	sxth	r0, r0
  4091d4:	3301      	adds	r3, #1
  4091d6:	b21a      	sxth	r2, r3
  4091d8:	4285      	cmp	r5, r0
  4091da:	dd07      	ble.n	4091ec <lv_draw_line+0x428>
                        if(dash_cnt <= dsc->dash_width) {
  4091dc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4091e0:	4293      	cmp	r3, r2
  4091e2:	dbeb      	blt.n	4091bc <lv_draw_line+0x3f8>
                            i += diff;
  4091e4:	4418      	add	r0, r3
  4091e6:	1a80      	subs	r0, r0, r2
  4091e8:	b200      	sxth	r0, r0
  4091ea:	e7f1      	b.n	4091d0 <lv_draw_line+0x40c>
  4091ec:	9505      	str	r5, [sp, #20]
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  4091ee:	2202      	movs	r2, #2
                           dsc->blend_mode);
  4091f0:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
  4091f2:	f003 0303 	and.w	r3, r3, #3
  4091f6:	9302      	str	r3, [sp, #8]
  4091f8:	7a23      	ldrb	r3, [r4, #8]
  4091fa:	9301      	str	r3, [sp, #4]
  4091fc:	9200      	str	r2, [sp, #0]
  4091fe:	464b      	mov	r3, r9
  409200:	8822      	ldrh	r2, [r4, #0]
  409202:	a933      	add	r1, sp, #204	; 0xcc
  409204:	a840      	add	r0, sp, #256	; 0x100
  409206:	47d0      	blx	sl
            fill_area.y1++;
  409208:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40920c:	3301      	adds	r3, #1
  40920e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
  409212:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
  409216:	3301      	adds	r3, #1
  409218:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40921c:	3601      	adds	r6, #1
  40921e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  409222:	429e      	cmp	r6, r3
  409224:	dc1e      	bgt.n	409264 <lv_draw_line+0x4a0>
            lv_memset_ff(mask_buf, draw_area_w);
  409226:	9909      	ldr	r1, [sp, #36]	; 0x24
  409228:	4648      	mov	r0, r9
  40922a:	47c0      	blx	r8
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h,
  40922c:	8a7a      	ldrh	r2, [r7, #18]
  40922e:	4432      	add	r2, r6
  409230:	8a39      	ldrh	r1, [r7, #16]
  409232:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
  409236:	4419      	add	r1, r3
  409238:	9b05      	ldr	r3, [sp, #20]
  40923a:	b212      	sxth	r2, r2
  40923c:	b209      	sxth	r1, r1
  40923e:	4648      	mov	r0, r9
  409240:	4d57      	ldr	r5, [pc, #348]	; (4093a0 <lv_draw_line+0x5dc>)
  409242:	47a8      	blx	r5
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  409244:	4602      	mov	r2, r0
  409246:	2800      	cmp	r0, #0
  409248:	d0d2      	beq.n	4091f0 <lv_draw_line+0x42c>
  40924a:	f1bb 0f00 	cmp.w	fp, #0
  40924e:	d0cf      	beq.n	4091f0 <lv_draw_line+0x42c>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  409250:	9b05      	ldr	r3, [sp, #20]
  409252:	2b00      	cmp	r3, #0
  409254:	dd04      	ble.n	409260 <lv_draw_line+0x49c>
  409256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409258:	2000      	movs	r0, #0
                            dash_cnt = 0;
  40925a:	4601      	mov	r1, r0
  40925c:	461d      	mov	r5, r3
  40925e:	e7bd      	b.n	4091dc <lv_draw_line+0x418>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  409260:	2202      	movs	r2, #2
  409262:	e7c5      	b.n	4091f0 <lv_draw_line+0x42c>
        lv_mem_buf_release(mask_buf);
  409264:	4648      	mov	r0, r9
  409266:	4b4f      	ldr	r3, [pc, #316]	; (4093a4 <lv_draw_line+0x5e0>)
  409268:	4798      	blx	r3
  40926a:	e1ce      	b.n	40960a <lv_draw_line+0x846>
    lv_opa_t opa = dsc->opa;
  40926c:	f894 8008 	ldrb.w	r8, [r4, #8]
    int32_t w = dsc->width - 1;
  409270:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  409274:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
  409276:	105a      	asrs	r2, r3, #1
    draw_area.x1 = point1->x - w_half1;
  409278:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40927c:	f003 0301 	and.w	r3, r3, #1
  409280:	4413      	add	r3, r2
    draw_area.x1 = point1->x - w_half1;
  409282:	1afb      	subs	r3, r7, r3
  409284:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
    draw_area.x2 = point1->x + w_half0;
  409288:	4417      	add	r7, r2
  40928a:	f8ad 70a4 	strh.w	r7, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MIN(point1->y, point2->y);
  40928e:	4633      	mov	r3, r6
  409290:	42ae      	cmp	r6, r5
  409292:	bfa8      	it	ge
  409294:	462b      	movge	r3, r5
  409296:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MAX(point1->y, point2->y) - 1;
  40929a:	42b5      	cmp	r5, r6
  40929c:	bfb8      	it	lt
  40929e:	4635      	movlt	r5, r6
  4092a0:	3d01      	subs	r5, #1
  4092a2:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  4092a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  4092aa:	b123      	cbz	r3, 4092b6 <lv_draw_line+0x4f2>
  4092ac:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4092b0:	2b00      	cmp	r3, #0
  4092b2:	f040 8203 	bne.w	4096bc <lv_draw_line+0x8f8>
    if(lv_draw_mask_is_any(&draw_area)) simple_mode = false;
  4092b6:	a828      	add	r0, sp, #160	; 0xa0
  4092b8:	4b3b      	ldr	r3, [pc, #236]	; (4093a8 <lv_draw_line+0x5e4>)
  4092ba:	4798      	blx	r3
    if(simple_mode) {
  4092bc:	b970      	cbnz	r0, 4092dc <lv_draw_line+0x518>
                       dsc->blend_mode);
  4092be:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
  4092c0:	f003 0303 	and.w	r3, r3, #3
  4092c4:	9302      	str	r3, [sp, #8]
  4092c6:	f8cd 8004 	str.w	r8, [sp, #4]
  4092ca:	2301      	movs	r3, #1
  4092cc:	9300      	str	r3, [sp, #0]
  4092ce:	2300      	movs	r3, #0
  4092d0:	8822      	ldrh	r2, [r4, #0]
  4092d2:	a928      	add	r1, sp, #160	; 0xa0
  4092d4:	a840      	add	r0, sp, #256	; 0x100
  4092d6:	4d35      	ldr	r5, [pc, #212]	; (4093ac <lv_draw_line+0x5e8>)
  4092d8:	47a8      	blx	r5
  4092da:	e196      	b.n	40960a <lv_draw_line+0x846>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  4092dc:	f04f 0b00 	mov.w	fp, #0
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  4092e0:	4b2b      	ldr	r3, [pc, #172]	; (409390 <lv_draw_line+0x5cc>)
  4092e2:	4798      	blx	r3
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
  4092e4:	4b2b      	ldr	r3, [pc, #172]	; (409394 <lv_draw_line+0x5d0>)
  4092e6:	4798      	blx	r3
  4092e8:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  4092ea:	aa28      	add	r2, sp, #160	; 0xa0
  4092ec:	a940      	add	r1, sp, #256	; 0x100
  4092ee:	4610      	mov	r0, r2
  4092f0:	4b29      	ldr	r3, [pc, #164]	; (409398 <lv_draw_line+0x5d4>)
  4092f2:	4798      	blx	r3
        if(!is_common) return;
  4092f4:	2800      	cmp	r0, #0
  4092f6:	f000 8188 	beq.w	40960a <lv_draw_line+0x846>
        draw_area.x1 -= draw_buf->area.x1;
  4092fa:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
  4092fe:	8a3b      	ldrh	r3, [r7, #16]
  409300:	1ac5      	subs	r5, r0, r3
  409302:	b2ad      	uxth	r5, r5
  409304:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
        draw_area.y1 -= draw_buf->area.y1;
  409308:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40930c:	8a7e      	ldrh	r6, [r7, #18]
  40930e:	1b91      	subs	r1, r2, r6
  409310:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= draw_buf->area.x1;
  409314:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
  409318:	1acb      	subs	r3, r1, r3
  40931a:	b29b      	uxth	r3, r3
  40931c:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= draw_buf->area.y1;
  409320:	f8bd e0a6 	ldrh.w	lr, [sp, #166]	; 0xa6
  409324:	ebae 0606 	sub.w	r6, lr, r6
  409328:	f8ad 60a6 	strh.w	r6, [sp, #166]	; 0xa6
  40932c:	3301      	adds	r3, #1
  40932e:	1b5b      	subs	r3, r3, r5
  409330:	b21b      	sxth	r3, r3
  409332:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  409334:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  409338:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40933c:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
  409340:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
  409344:	930a      	str	r3, [sp, #40]	; 0x28
  409346:	4618      	mov	r0, r3
  409348:	4b14      	ldr	r3, [pc, #80]	; (40939c <lv_draw_line+0x5d8>)
  40934a:	4798      	blx	r3
  40934c:	9005      	str	r0, [sp, #20]
        if(dashed) {
  40934e:	f1bb 0f00 	cmp.w	fp, #0
  409352:	d00e      	beq.n	409372 <lv_draw_line+0x5ae>
            dash_start = (draw_buf->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  409354:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  409358:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
  40935c:	4432      	add	r2, r6
  40935e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  409362:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
  409366:	4433      	add	r3, r6
  409368:	fb92 f6f3 	sdiv	r6, r2, r3
  40936c:	fb03 2616 	mls	r6, r3, r6, r2
  409370:	e000      	b.n	409374 <lv_draw_line+0x5b0>
        if(dashed) {
  409372:	2600      	movs	r6, #0
  409374:	b236      	sxth	r6, r6
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  409376:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
  40937a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  40937e:	429d      	cmp	r5, r3
  409380:	dc52      	bgt.n	409428 <lv_draw_line+0x664>
            lv_memset_ff(mask_buf, draw_area_w);
  409382:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4093b0 <lv_draw_line+0x5ec>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h,
  409386:	f8df 8018 	ldr.w	r8, [pc, #24]	; 4093a0 <lv_draw_line+0x5dc>
            _lv_blend_fill(clip, &fill_area,
  40938a:	f8df a020 	ldr.w	sl, [pc, #32]	; 4093ac <lv_draw_line+0x5e8>
  40938e:	e02c      	b.n	4093ea <lv_draw_line+0x626>
  409390:	00405f49 	.word	0x00405f49
  409394:	004101c9 	.word	0x004101c9
  409398:	004107cd 	.word	0x004107cd
  40939c:	004115a9 	.word	0x004115a9
  4093a0:	00409fed 	.word	0x00409fed
  4093a4:	00411105 	.word	0x00411105
  4093a8:	0040a0cd 	.word	0x0040a0cd
  4093ac:	00406181 	.word	0x00406181
  4093b0:	00411791 	.word	0x00411791
                dash_cnt ++;
  4093b4:	3601      	adds	r6, #1
  4093b6:	b236      	sxth	r6, r6
            _lv_blend_fill(clip, &fill_area,
  4093b8:	2300      	movs	r3, #0
  4093ba:	9302      	str	r3, [sp, #8]
  4093bc:	7a23      	ldrb	r3, [r4, #8]
  4093be:	9301      	str	r3, [sp, #4]
  4093c0:	9000      	str	r0, [sp, #0]
  4093c2:	9b05      	ldr	r3, [sp, #20]
  4093c4:	8822      	ldrh	r2, [r4, #0]
  4093c6:	a933      	add	r1, sp, #204	; 0xcc
  4093c8:	a840      	add	r0, sp, #256	; 0x100
  4093ca:	47d0      	blx	sl
            fill_area.y1++;
  4093cc:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  4093d0:	3301      	adds	r3, #1
  4093d2:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
  4093d6:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
  4093da:	3301      	adds	r3, #1
  4093dc:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4093e0:	3501      	adds	r5, #1
  4093e2:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
  4093e6:	429d      	cmp	r5, r3
  4093e8:	dc1e      	bgt.n	409428 <lv_draw_line+0x664>
            lv_memset_ff(mask_buf, draw_area_w);
  4093ea:	990a      	ldr	r1, [sp, #40]	; 0x28
  4093ec:	9805      	ldr	r0, [sp, #20]
  4093ee:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h,
  4093f0:	8a7a      	ldrh	r2, [r7, #18]
  4093f2:	442a      	add	r2, r5
  4093f4:	8a39      	ldrh	r1, [r7, #16]
  4093f6:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
  4093fa:	4419      	add	r1, r3
  4093fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4093fe:	b212      	sxth	r2, r2
  409400:	b209      	sxth	r1, r1
  409402:	9805      	ldr	r0, [sp, #20]
  409404:	47c0      	blx	r8
            if(dashed) {
  409406:	f1bb 0f00 	cmp.w	fp, #0
  40940a:	d0d5      	beq.n	4093b8 <lv_draw_line+0x5f4>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40940c:	2800      	cmp	r0, #0
  40940e:	d0d1      	beq.n	4093b4 <lv_draw_line+0x5f0>
                    if(dash_cnt > dsc->dash_width) {
  409410:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  409414:	42b2      	cmp	r2, r6
  409416:	bfb8      	it	lt
  409418:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40941a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40941e:	4413      	add	r3, r2
                        dash_cnt = 0;
  409420:	429e      	cmp	r6, r3
  409422:	bfa8      	it	ge
  409424:	2600      	movge	r6, #0
  409426:	e7c5      	b.n	4093b4 <lv_draw_line+0x5f0>
        lv_mem_buf_release(mask_buf);
  409428:	9805      	ldr	r0, [sp, #20]
  40942a:	4ba6      	ldr	r3, [pc, #664]	; (4096c4 <lv_draw_line+0x900>)
  40942c:	4798      	blx	r3
  40942e:	e0ec      	b.n	40960a <lv_draw_line+0x846>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
  409430:	015b      	lsls	r3, r3, #5
  409432:	fb93 f3f2 	sdiv	r3, r3, r2
  409436:	e53f      	b.n	408eb8 <lv_draw_line+0xf4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  409438:	fa1f fb86 	uxth.w	fp, r6
  40943c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  409440:	b2a9      	uxth	r1, r5
  409442:	eb0b 0208 	add.w	r2, fp, r8
  409446:	2300      	movs	r3, #0
  409448:	9301      	str	r3, [sp, #4]
  40944a:	460f      	mov	r7, r1
  40944c:	4488      	add	r8, r1
  40944e:	fa0f f388 	sxth.w	r3, r8
  409452:	9300      	str	r3, [sp, #0]
  409454:	4653      	mov	r3, sl
  409456:	b212      	sxth	r2, r2
  409458:	9905      	ldr	r1, [sp, #20]
  40945a:	a812      	add	r0, sp, #72	; 0x48
  40945c:	f8df 8268 	ldr.w	r8, [pc, #616]	; 4096c8 <lv_draw_line+0x904>
  409460:	47c0      	blx	r8
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  409462:	fa1f f389 	uxth.w	r3, r9
  409466:	ebab 0203 	sub.w	r2, fp, r3
  40946a:	2101      	movs	r1, #1
  40946c:	9101      	str	r1, [sp, #4]
  40946e:	1afb      	subs	r3, r7, r3
  409470:	b21b      	sxth	r3, r3
  409472:	9300      	str	r3, [sp, #0]
  409474:	4653      	mov	r3, sl
  409476:	b212      	sxth	r2, r2
  409478:	9905      	ldr	r1, [sp, #20]
  40947a:	a81d      	add	r0, sp, #116	; 0x74
  40947c:	47c0      	blx	r8
  40947e:	e57b      	b.n	408f78 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  409480:	f8bd b014 	ldrh.w	fp, [sp, #20]
  409484:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  409488:	fa1f f38a 	uxth.w	r3, sl
  40948c:	461f      	mov	r7, r3
  40948e:	4443      	add	r3, r8
  409490:	44d8      	add	r8, fp
  409492:	2200      	movs	r2, #0
  409494:	9201      	str	r2, [sp, #4]
  409496:	9500      	str	r5, [sp, #0]
  409498:	b21b      	sxth	r3, r3
  40949a:	4632      	mov	r2, r6
  40949c:	fa0f f188 	sxth.w	r1, r8
  4094a0:	a812      	add	r0, sp, #72	; 0x48
  4094a2:	f8df 8224 	ldr.w	r8, [pc, #548]	; 4096c8 <lv_draw_line+0x904>
  4094a6:	47c0      	blx	r8
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  4094a8:	fa1f f989 	uxth.w	r9, r9
  4094ac:	eba7 0309 	sub.w	r3, r7, r9
  4094b0:	ebab 0909 	sub.w	r9, fp, r9
  4094b4:	2201      	movs	r2, #1
  4094b6:	9201      	str	r2, [sp, #4]
  4094b8:	9500      	str	r5, [sp, #0]
  4094ba:	b21b      	sxth	r3, r3
  4094bc:	4632      	mov	r2, r6
  4094be:	fa0f f189 	sxth.w	r1, r9
  4094c2:	a81d      	add	r0, sp, #116	; 0x74
  4094c4:	47c0      	blx	r8
  4094c6:	e557      	b.n	408f78 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  4094c8:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  4094cc:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  4094d0:	9905      	ldr	r1, [sp, #20]
  4094d2:	eba1 0308 	sub.w	r3, r1, r8
  4094d6:	2203      	movs	r2, #3
  4094d8:	9201      	str	r2, [sp, #4]
  4094da:	eb09 0206 	add.w	r2, r9, r6
  4094de:	b212      	sxth	r2, r2
  4094e0:	9200      	str	r2, [sp, #0]
  4094e2:	b21b      	sxth	r3, r3
  4094e4:	4632      	mov	r2, r6
  4094e6:	a828      	add	r0, sp, #160	; 0xa0
  4094e8:	4e77      	ldr	r6, [pc, #476]	; (4096c8 <lv_draw_line+0x904>)
  4094ea:	47b0      	blx	r6
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  4094ec:	ebaa 0308 	sub.w	r3, sl, r8
  4094f0:	2202      	movs	r2, #2
  4094f2:	9201      	str	r2, [sp, #4]
  4094f4:	eb09 0205 	add.w	r2, r9, r5
  4094f8:	b212      	sxth	r2, r2
  4094fa:	9200      	str	r2, [sp, #0]
  4094fc:	b21b      	sxth	r3, r3
  4094fe:	462a      	mov	r2, r5
  409500:	4651      	mov	r1, sl
  409502:	a833      	add	r0, sp, #204	; 0xcc
  409504:	47b0      	blx	r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  409506:	2100      	movs	r1, #0
  409508:	a828      	add	r0, sp, #160	; 0xa0
  40950a:	4d70      	ldr	r5, [pc, #448]	; (4096cc <lv_draw_line+0x908>)
  40950c:	47a8      	blx	r5
  40950e:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  409510:	2100      	movs	r1, #0
  409512:	a833      	add	r0, sp, #204	; 0xcc
  409514:	47a8      	blx	r5
  409516:	900b      	str	r0, [sp, #44]	; 0x2c
  409518:	e541      	b.n	408f9e <lv_draw_line+0x1da>
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&draw_area), hor_res);
  40951a:	a80e      	add	r0, sp, #56	; 0x38
  40951c:	4b6c      	ldr	r3, [pc, #432]	; (4096d0 <lv_draw_line+0x90c>)
  40951e:	4798      	blx	r3
  409520:	4683      	mov	fp, r0
  409522:	e567      	b.n	408ff4 <lv_draw_line+0x230>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
  409524:	4629      	mov	r1, r5
  409526:	4640      	mov	r0, r8
  409528:	4b6a      	ldr	r3, [pc, #424]	; (4096d4 <lv_draw_line+0x910>)
  40952a:	4798      	blx	r3
  40952c:	e02d      	b.n	40958a <lv_draw_line+0x7c6>
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40952e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409530:	7a53      	ldrb	r3, [r2, #9]
            _lv_blend_fill(&fill_area, clip,
  409532:	f003 0303 	and.w	r3, r3, #3
  409536:	9302      	str	r3, [sp, #8]
  409538:	7a13      	ldrb	r3, [r2, #8]
  40953a:	9301      	str	r3, [sp, #4]
  40953c:	2302      	movs	r3, #2
  40953e:	9300      	str	r3, [sp, #0]
  409540:	464b      	mov	r3, r9
  409542:	8812      	ldrh	r2, [r2, #0]
  409544:	a940      	add	r1, sp, #256	; 0x100
  409546:	a810      	add	r0, sp, #64	; 0x40
  409548:	4c63      	ldr	r4, [pc, #396]	; (4096d8 <lv_draw_line+0x914>)
  40954a:	47a0      	blx	r4

            fill_area.y1 = fill_area.y2 + 1;
  40954c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  409550:	3301      	adds	r3, #1
  409552:	b21b      	sxth	r3, r3
  409554:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  409558:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
            lv_memset_ff(mask_buf, mask_buf_size);
  40955c:	4659      	mov	r1, fp
  40955e:	4648      	mov	r0, r9
  409560:	4b5e      	ldr	r3, [pc, #376]	; (4096dc <lv_draw_line+0x918>)
  409562:	4798      	blx	r3
            mask_p = 0;
  409564:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  409566:	3601      	adds	r6, #1
  409568:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  40956c:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  409570:	4413      	add	r3, r2
  409572:	429e      	cmp	r6, r3
  409574:	dc13      	bgt.n	40959e <lv_draw_line+0x7da>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  409576:	eb09 0807 	add.w	r8, r9, r7
  40957a:	462b      	mov	r3, r5
  40957c:	b232      	sxth	r2, r6
  40957e:	9905      	ldr	r1, [sp, #20]
  409580:	4640      	mov	r0, r8
  409582:	4c57      	ldr	r4, [pc, #348]	; (4096e0 <lv_draw_line+0x91c>)
  409584:	47a0      	blx	r4
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  409586:	2800      	cmp	r0, #0
  409588:	d0cc      	beq.n	409524 <lv_draw_line+0x760>
        mask_p += draw_area_w;
  40958a:	442f      	add	r7, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40958c:	19eb      	adds	r3, r5, r7
  40958e:	459b      	cmp	fp, r3
  409590:	d9cd      	bls.n	40952e <lv_draw_line+0x76a>
            fill_area.y2 ++;
  409592:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  409596:	3301      	adds	r3, #1
  409598:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40959c:	e7e3      	b.n	409566 <lv_draw_line+0x7a2>
  40959e:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  4095a0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4095a4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  4095a8:	429a      	cmp	r2, r3
  4095aa:	d010      	beq.n	4095ce <lv_draw_line+0x80a>
        fill_area.y2--;
  4095ac:	3b01      	subs	r3, #1
  4095ae:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  4095b2:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
  4095b4:	f003 0303 	and.w	r3, r3, #3
  4095b8:	9302      	str	r3, [sp, #8]
  4095ba:	7a23      	ldrb	r3, [r4, #8]
  4095bc:	9301      	str	r3, [sp, #4]
  4095be:	2302      	movs	r3, #2
  4095c0:	9300      	str	r3, [sp, #0]
  4095c2:	464b      	mov	r3, r9
  4095c4:	8822      	ldrh	r2, [r4, #0]
  4095c6:	a940      	add	r1, sp, #256	; 0x100
  4095c8:	a810      	add	r0, sp, #64	; 0x40
  4095ca:	4d43      	ldr	r5, [pc, #268]	; (4096d8 <lv_draw_line+0x914>)
  4095cc:	47a8      	blx	r5

    }

    lv_mem_buf_release(mask_buf);
  4095ce:	4648      	mov	r0, r9
  4095d0:	4b3c      	ldr	r3, [pc, #240]	; (4096c4 <lv_draw_line+0x900>)
  4095d2:	4798      	blx	r3

    lv_draw_mask_free_param(&mask_left_param);
  4095d4:	a812      	add	r0, sp, #72	; 0x48
  4095d6:	4d43      	ldr	r5, [pc, #268]	; (4096e4 <lv_draw_line+0x920>)
  4095d8:	47a8      	blx	r5
    lv_draw_mask_free_param(&mask_right_param);
  4095da:	a81d      	add	r0, sp, #116	; 0x74
  4095dc:	47a8      	blx	r5
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
  4095de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4095e0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4095e4:	d001      	beq.n	4095ea <lv_draw_line+0x826>
  4095e6:	a828      	add	r0, sp, #160	; 0xa0
  4095e8:	47a8      	blx	r5
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
  4095ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4095ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4095f0:	d002      	beq.n	4095f8 <lv_draw_line+0x834>
  4095f2:	a833      	add	r0, sp, #204	; 0xcc
  4095f4:	4b3b      	ldr	r3, [pc, #236]	; (4096e4 <lv_draw_line+0x920>)
  4095f6:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_left_id);
  4095f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4095fa:	4d3b      	ldr	r5, [pc, #236]	; (4096e8 <lv_draw_line+0x924>)
  4095fc:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_right_id);
  4095fe:	980d      	ldr	r0, [sp, #52]	; 0x34
  409600:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_top_id);
  409602:	980a      	ldr	r0, [sp, #40]	; 0x28
  409604:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_bottom_id);
  409606:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409608:	47a8      	blx	r5
    if(dsc->round_end || dsc->round_start) {
  40960a:	7a63      	ldrb	r3, [r4, #9]
  40960c:	f013 0f0c 	tst.w	r3, #12
  409610:	d102      	bne.n	409618 <lv_draw_line+0x854>
}
  409612:	b043      	add	sp, #268	; 0x10c
  409614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect_dsc_init(&cir_dsc);
  409618:	a833      	add	r0, sp, #204	; 0xcc
  40961a:	4b34      	ldr	r3, [pc, #208]	; (4096ec <lv_draw_line+0x928>)
  40961c:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40961e:	8823      	ldrh	r3, [r4, #0]
  409620:	f8ad 30d0 	strh.w	r3, [sp, #208]	; 0xd0
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  409624:	f647 73ff 	movw	r3, #32767	; 0x7fff
  409628:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
  40962c:	7a23      	ldrb	r3, [r4, #8]
  40962e:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
        int32_t r = (dsc->width >> 1);
  409632:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  409636:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  409638:	f083 0301 	eor.w	r3, r3, #1
  40963c:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  409640:	7a63      	ldrb	r3, [r4, #9]
  409642:	f013 0f04 	tst.w	r3, #4
  409646:	d11c      	bne.n	409682 <lv_draw_line+0x8be>
        if(dsc->round_end) {
  409648:	7a63      	ldrb	r3, [r4, #9]
  40964a:	f013 0f08 	tst.w	r3, #8
  40964e:	d0e0      	beq.n	409612 <lv_draw_line+0x84e>
            cir_area.x1 = point2->x - r;
  409650:	9907      	ldr	r1, [sp, #28]
  409652:	880a      	ldrh	r2, [r1, #0]
  409654:	b2b6      	uxth	r6, r6
  409656:	1b93      	subs	r3, r2, r6
  409658:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
  40965c:	8849      	ldrh	r1, [r1, #2]
  40965e:	1b8b      	subs	r3, r1, r6
  409660:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
  409664:	b2ab      	uxth	r3, r5
  409666:	4432      	add	r2, r6
  409668:	1ad2      	subs	r2, r2, r3
  40966a:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
  40966e:	440e      	add	r6, r1
  409670:	1af3      	subs	r3, r6, r3
  409672:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  409676:	aa33      	add	r2, sp, #204	; 0xcc
  409678:	9908      	ldr	r1, [sp, #32]
  40967a:	a828      	add	r0, sp, #160	; 0xa0
  40967c:	4b1c      	ldr	r3, [pc, #112]	; (4096f0 <lv_draw_line+0x92c>)
  40967e:	4798      	blx	r3
  409680:	e7c7      	b.n	409612 <lv_draw_line+0x84e>
            cir_area.x1 = point1->x - r;
  409682:	9806      	ldr	r0, [sp, #24]
  409684:	8802      	ldrh	r2, [r0, #0]
  409686:	b2b3      	uxth	r3, r6
  409688:	1ad1      	subs	r1, r2, r3
  40968a:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
  40968e:	8840      	ldrh	r0, [r0, #2]
  409690:	1ac1      	subs	r1, r0, r3
  409692:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
  409696:	b2a9      	uxth	r1, r5
  409698:	441a      	add	r2, r3
  40969a:	1a52      	subs	r2, r2, r1
  40969c:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
  4096a0:	4403      	add	r3, r0
  4096a2:	1a5b      	subs	r3, r3, r1
  4096a4:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  4096a8:	aa33      	add	r2, sp, #204	; 0xcc
  4096aa:	9908      	ldr	r1, [sp, #32]
  4096ac:	a828      	add	r0, sp, #160	; 0xa0
  4096ae:	4b10      	ldr	r3, [pc, #64]	; (4096f0 <lv_draw_line+0x92c>)
  4096b0:	4798      	blx	r3
  4096b2:	e7c9      	b.n	409648 <lv_draw_line+0x884>
    if(lv_draw_mask_is_any(&draw_area)) simple_mode = false;
  4096b4:	a828      	add	r0, sp, #160	; 0xa0
  4096b6:	4b0f      	ldr	r3, [pc, #60]	; (4096f4 <lv_draw_line+0x930>)
  4096b8:	4798      	blx	r3
  4096ba:	e525      	b.n	409108 <lv_draw_line+0x344>
    if(lv_draw_mask_is_any(&draw_area)) simple_mode = false;
  4096bc:	a828      	add	r0, sp, #160	; 0xa0
  4096be:	4b0d      	ldr	r3, [pc, #52]	; (4096f4 <lv_draw_line+0x930>)
  4096c0:	4798      	blx	r3
  4096c2:	e60d      	b.n	4092e0 <lv_draw_line+0x51c>
  4096c4:	00411105 	.word	0x00411105
  4096c8:	0040a149 	.word	0x0040a149
  4096cc:	00409f91 	.word	0x00409f91
  4096d0:	00410775 	.word	0x00410775
  4096d4:	004116ed 	.word	0x004116ed
  4096d8:	00406181 	.word	0x00406181
  4096dc:	00411791 	.word	0x00411791
  4096e0:	00409fed 	.word	0x00409fed
  4096e4:	0040a09d 	.word	0x0040a09d
  4096e8:	0040a03d 	.word	0x0040a03d
  4096ec:	0040a941 	.word	0x0040a941
  4096f0:	0040b101 	.word	0x0040b101
  4096f4:	0040a0cd 	.word	0x0040a0cd

004096f8 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
  4096f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4096fc:	9c08      	ldr	r4, [sp, #32]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
  4096fe:	8aa5      	ldrh	r5, [r4, #20]
  409700:	1b52      	subs	r2, r2, r5
  409702:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  409704:	8a65      	ldrh	r5, [r4, #18]
  409706:	1b4d      	subs	r5, r1, r5
  409708:	b22d      	sxth	r5, r5

    /*Handle special cases*/
    if(p->steep == 0) {
  40970a:	6a21      	ldr	r1, [r4, #32]
  40970c:	2900      	cmp	r1, #0
  40970e:	d14b      	bne.n	4097a8 <lv_draw_mask_line+0xb0>
        /*Horizontal*/
        if(p->flat) {
  409710:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
  409714:	f011 0f01 	tst.w	r1, #1
  409718:	d016      	beq.n	409748 <lv_draw_mask_line+0x50>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40971a:	7c20      	ldrb	r0, [r4, #16]
  40971c:	f000 0003 	and.w	r0, r0, #3
  409720:	2801      	cmp	r0, #1
  409722:	f240 822d 	bls.w	409b80 <lv_draw_mask_line+0x488>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  409726:	2802      	cmp	r0, #2
  409728:	d008      	beq.n	40973c <lv_draw_mask_line+0x44>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40972a:	2803      	cmp	r0, #3
  40972c:	bf14      	ite	ne
  40972e:	2000      	movne	r0, #0
  409730:	2001      	moveq	r0, #1
  409732:	2a00      	cmp	r2, #0
  409734:	bfd8      	it	le
  409736:	2000      	movle	r0, #0
  409738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40973c:	f112 0f01 	cmn.w	r2, #1
  409740:	d5f3      	bpl.n	40972a <lv_draw_mask_line+0x32>
  409742:	2001      	movs	r0, #1
  409744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  409748:	7c22      	ldrb	r2, [r4, #16]
  40974a:	f002 0203 	and.w	r2, r2, #3
  40974e:	1e91      	subs	r1, r2, #2
  409750:	b2c9      	uxtb	r1, r1
  409752:	2901      	cmp	r1, #1
  409754:	f240 8217 	bls.w	409b86 <lv_draw_mask_line+0x48e>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  409758:	2a01      	cmp	r2, #1
  40975a:	d104      	bne.n	409766 <lv_draw_mask_line+0x6e>
  40975c:	2d00      	cmp	r5, #0
  40975e:	dd02      	ble.n	409766 <lv_draw_mask_line+0x6e>
  409760:	2001      	movs	r0, #1
  409762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  409766:	b98a      	cbnz	r2, 40978c <lv_draw_mask_line+0x94>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  409768:	18e9      	adds	r1, r5, r3
  40976a:	f100 820f 	bmi.w	409b8c <lv_draw_mask_line+0x494>
                else {
                    int32_t k = - abs_x;
  40976e:	426d      	negs	r5, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  409770:	2d00      	cmp	r5, #0
  409772:	f2c0 820e 	blt.w	409b92 <lv_draw_mask_line+0x49a>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
  409776:	42ab      	cmp	r3, r5
  409778:	dc02      	bgt.n	409780 <lv_draw_mask_line+0x88>
                    return  LV_DRAW_MASK_RES_CHANGED;
  40977a:	2002      	movs	r0, #2
  40977c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
  409780:	4428      	add	r0, r5
  409782:	4bc2      	ldr	r3, [pc, #776]	; (409a8c <lv_draw_mask_line+0x394>)
  409784:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
  409786:	2002      	movs	r0, #2
  409788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40978c:	42dd      	cmn	r5, r3
  40978e:	f100 8203 	bmi.w	409b98 <lv_draw_mask_line+0x4a0>
                else {
                    int32_t k = - abs_x;
  409792:	4269      	negs	r1, r5
  409794:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k < 0) k = 0;
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  409798:	428b      	cmp	r3, r1
  40979a:	f340 8200 	ble.w	409b9e <lv_draw_mask_line+0x4a6>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
  40979e:	4bbb      	ldr	r3, [pc, #748]	; (409a8c <lv_draw_mask_line+0x394>)
  4097a0:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
  4097a2:	2002      	movs	r0, #2
  4097a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
  4097a8:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
  4097ac:	f016 0f01 	tst.w	r6, #1
  4097b0:	d10f      	bne.n	4097d2 <lv_draw_mask_line+0xda>
{
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  4097b2:	69a7      	ldr	r7, [r4, #24]
  4097b4:	fb02 f107 	mul.w	r1, r2, r7
  4097b8:	1289      	asrs	r1, r1, #10
    if(p->xy_steep > 0) x_at_y++;
  4097ba:	2f00      	cmp	r7, #0
  4097bc:	bfcc      	ite	gt
  4097be:	f101 0e01 	addgt.w	lr, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  4097c2:	468e      	movle	lr, r1
    if(x_at_y < abs_x) {
  4097c4:	4575      	cmp	r5, lr
  4097c6:	f340 8099 	ble.w	4098fc <lv_draw_mask_line+0x204>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  4097ca:	f3c6 0040 	ubfx	r0, r6, #1, #1
  4097ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  4097d2:	69e1      	ldr	r1, [r4, #28]
  4097d4:	fb05 f701 	mul.w	r7, r5, r1
  4097d8:	12bf      	asrs	r7, r7, #10
    if(p->yx_steep > 0) {
  4097da:	2900      	cmp	r1, #0
  4097dc:	dd06      	ble.n	4097ec <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
  4097de:	4297      	cmp	r7, r2
  4097e0:	f340 8219 	ble.w	409c16 <lv_draw_mask_line+0x51e>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  4097e4:	f3c6 0040 	ubfx	r0, r6, #1, #1
  4097e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(y_at_x < abs_y) {
  4097ec:	4297      	cmp	r7, r2
  4097ee:	f280 8203 	bge.w	409bf8 <lv_draw_mask_line+0x500>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  4097f2:	f3c6 0040 	ubfx	r0, r6, #1, #1
  4097f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(p->inv) {
  4097fa:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  4097fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
  409802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(p->inv) {
  409806:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40980a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40980e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
  409812:	2500      	movs	r5, #0
  409814:	e236      	b.n	409c84 <lv_draw_mask_line+0x58c>
  409816:	46f4      	mov	ip, lr
            mask_buf[k] = mask_mix(mask_buf[k], m);
  409818:	f888 c000 	strb.w	ip, [r8]
        px_h -= p->spx;
  40981c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40981e:	1ad2      	subs	r2, r2, r3
        k++;
  409820:	3501      	adds	r5, #1
  409822:	3601      	adds	r6, #1
        if(k >= len) break;
  409824:	42bd      	cmp	r5, r7
  409826:	da4a      	bge.n	4098be <lv_draw_mask_line+0x1c6>
    while(px_h > p->spx) {
  409828:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40982a:	429a      	cmp	r2, r3
  40982c:	dd1d      	ble.n	40986a <lv_draw_mask_line+0x172>
        if(k >= 0 && k < len) {
  40982e:	2d00      	cmp	r5, #0
  409830:	dbf4      	blt.n	40981c <lv_draw_mask_line+0x124>
  409832:	42bd      	cmp	r5, r7
  409834:	daf2      	bge.n	40981c <lv_draw_mask_line+0x124>
            m = px_h - (p->spx >> 1);
  409836:	eba2 0363 	sub.w	r3, r2, r3, asr #1
  40983a:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
  40983c:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
  409840:	f01c 0f02 	tst.w	ip, #2
  409844:	d001      	beq.n	40984a <lv_draw_mask_line+0x152>
  409846:	43db      	mvns	r3, r3
  409848:	b2db      	uxtb	r3, r3
  40984a:	46b0      	mov	r8, r6
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40984c:	f896 c000 	ldrb.w	ip, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409850:	2bfc      	cmp	r3, #252	; 0xfc
  409852:	d8e1      	bhi.n	409818 <lv_draw_mask_line+0x120>
    if(mask_new <= LV_OPA_MIN) return 0;
  409854:	2b02      	cmp	r3, #2
  409856:	d9de      	bls.n	409816 <lv_draw_mask_line+0x11e>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409858:	fb03 f30c 	mul.w	r3, r3, ip
  40985c:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  409860:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  409864:	f3c3 5cc7 	ubfx	ip, r3, #23, #8
  409868:	e7d6      	b.n	409818 <lv_draw_mask_line+0x120>
    if(k < len && k >= 0) {
  40986a:	2d00      	cmp	r5, #0
  40986c:	db27      	blt.n	4098be <lv_draw_mask_line+0x1c6>
  40986e:	42bd      	cmp	r5, r7
  409870:	da25      	bge.n	4098be <lv_draw_mask_line+0x1c6>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  409872:	69a3      	ldr	r3, [r4, #24]
  409874:	fb03 f302 	mul.w	r3, r3, r2
  409878:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
  40987a:	fb02 f203 	mul.w	r2, r2, r3
  40987e:	f3c2 2247 	ubfx	r2, r2, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  409882:	69e3      	ldr	r3, [r4, #28]
  409884:	2b00      	cmp	r3, #0
  409886:	db15      	blt.n	4098b4 <lv_draw_mask_line+0x1bc>
        if(p->inv) m = 255 - m;
  409888:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40988c:	f013 0f02 	tst.w	r3, #2
  409890:	d001      	beq.n	409896 <lv_draw_mask_line+0x19e>
  409892:	43d2      	mvns	r2, r2
  409894:	b2d2      	uxtb	r2, r2
        mask_buf[k] = mask_mix(mask_buf[k], m);
  409896:	1946      	adds	r6, r0, r5
  409898:	5d43      	ldrb	r3, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40989a:	2afc      	cmp	r2, #252	; 0xfc
  40989c:	d80e      	bhi.n	4098bc <lv_draw_mask_line+0x1c4>
    if(mask_new <= LV_OPA_MIN) return 0;
  40989e:	2a02      	cmp	r2, #2
  4098a0:	d90b      	bls.n	4098ba <lv_draw_mask_line+0x1c2>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  4098a2:	fb02 f203 	mul.w	r2, r2, r3
  4098a6:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  4098aa:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  4098ae:	f3c2 53c7 	ubfx	r3, r2, #23, #8
  4098b2:	e003      	b.n	4098bc <lv_draw_mask_line+0x1c4>
        if(p->yx_steep < 0) m = 255 - m;
  4098b4:	43d2      	mvns	r2, r2
  4098b6:	b2d2      	uxtb	r2, r2
  4098b8:	e7e6      	b.n	409888 <lv_draw_mask_line+0x190>
    if(mask_new <= LV_OPA_MIN) return 0;
  4098ba:	2300      	movs	r3, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  4098bc:	7033      	strb	r3, [r6, #0]
    if(p->inv) {
  4098be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  4098c2:	f013 0f02 	tst.w	r3, #2
  4098c6:	d00a      	beq.n	4098de <lv_draw_mask_line+0x1e6>
        if(k > len) {
  4098c8:	428f      	cmp	r7, r1
  4098ca:	f2c0 816b 	blt.w	409ba4 <lv_draw_mask_line+0x4ac>
        if(k >= 0) {
  4098ce:	2900      	cmp	r1, #0
  4098d0:	f2c0 816b 	blt.w	409baa <lv_draw_mask_line+0x4b2>
            lv_memset_00(&mask_buf[0], k);
  4098d4:	4b6d      	ldr	r3, [pc, #436]	; (409a8c <lv_draw_mask_line+0x394>)
  4098d6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  4098d8:	2002      	movs	r0, #2
  4098da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(k < 0) {
  4098de:	3501      	adds	r5, #1
  4098e0:	f100 8166 	bmi.w	409bb0 <lv_draw_mask_line+0x4b8>
        if(k <= len) {
  4098e4:	42bd      	cmp	r5, r7
  4098e6:	dd02      	ble.n	4098ee <lv_draw_mask_line+0x1f6>
    return LV_DRAW_MASK_RES_CHANGED;
  4098e8:	2002      	movs	r0, #2
  4098ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_memset_00(&mask_buf[k], len - k);
  4098ee:	1b79      	subs	r1, r7, r5
  4098f0:	4428      	add	r0, r5
  4098f2:	4b66      	ldr	r3, [pc, #408]	; (409a8c <lv_draw_mask_line+0x394>)
  4098f4:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  4098f6:	2002      	movs	r0, #2
  4098f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(x_at_y > abs_x + len) {
  4098fc:	eb05 0e03 	add.w	lr, r5, r3
  409900:	4571      	cmp	r1, lr
  409902:	dd05      	ble.n	409910 <lv_draw_mask_line+0x218>
        if(p->inv) {
  409904:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  409908:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40990c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
  409910:	0212      	lsls	r2, r2, #8
  409912:	fb02 f107 	mul.w	r1, r2, r7
    int32_t xsi = xs >> 8;
  409916:	ea4f 48a1 	mov.w	r8, r1, asr #18
    int32_t xsf = xs & 0xFF;
  40991a:	f3c1 2c87 	ubfx	ip, r1, #10, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
  40991e:	f502 7280 	add.w	r2, r2, #256	; 0x100
  409922:	fb07 f202 	mul.w	r2, r7, r2
    int32_t xei = xe >> 8;
  409926:	ea4f 4ea2 	mov.w	lr, r2, asr #18
    k = xsi - abs_x;
  40992a:	eba8 0105 	sub.w	r1, r8, r5
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40992e:	fabc f98c 	clz	r9, ip
  409932:	ea4f 1959 	mov.w	r9, r9, lsr #5
  409936:	45f0      	cmp	r8, lr
  409938:	bf08      	it	eq
  40993a:	f04f 0900 	moveq.w	r9, #0
  40993e:	f1b9 0f00 	cmp.w	r9, #0
  409942:	d021      	beq.n	409988 <lv_draw_mask_line+0x290>
  409944:	2f00      	cmp	r7, #0
  409946:	da1f      	bge.n	409988 <lv_draw_mask_line+0x290>
        k--;
  409948:	3901      	subs	r1, #1
        xsf = 0xFF;
  40994a:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if(k >= 0 && k < len) {
  40994e:	428b      	cmp	r3, r1
  409950:	dd79      	ble.n	409a46 <lv_draw_mask_line+0x34e>
  409952:	2900      	cmp	r1, #0
  409954:	db77      	blt.n	409a46 <lv_draw_mask_line+0x34e>
    int32_t xef = xe & 0xFF;
  409956:	f3c2 2287 	ubfx	r2, r2, #10, #8
            m = (xsf + xef) >> 1;
  40995a:	4462      	add	r2, ip
  40995c:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  409960:	f016 0f02 	tst.w	r6, #2
  409964:	d001      	beq.n	40996a <lv_draw_mask_line+0x272>
  409966:	43d2      	mvns	r2, r2
  409968:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40996a:	1847      	adds	r7, r0, r1
  40996c:	5c46      	ldrb	r6, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40996e:	2afc      	cmp	r2, #252	; 0xfc
  409970:	d868      	bhi.n	409a44 <lv_draw_mask_line+0x34c>
    if(mask_new <= LV_OPA_MIN) return 0;
  409972:	2a02      	cmp	r2, #2
  409974:	d965      	bls.n	409a42 <lv_draw_mask_line+0x34a>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409976:	fb02 f206 	mul.w	r2, r2, r6
  40997a:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40997e:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  409982:	f3c2 56c7 	ubfx	r6, r2, #23, #8
  409986:	e05d      	b.n	409a44 <lv_draw_mask_line+0x34c>
    if(xsi == xei) {
  409988:	45f0      	cmp	r8, lr
  40998a:	d0e0      	beq.n	40994e <lv_draw_mask_line+0x256>
        if(p->xy_steep < 0) {
  40998c:	2f00      	cmp	r7, #0
  40998e:	db7f      	blt.n	409a90 <lv_draw_mask_line+0x398>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  409990:	f1cc 02ff 	rsb	r2, ip, #255	; 0xff
  409994:	69e5      	ldr	r5, [r4, #28]
  409996:	fb05 f502 	mul.w	r5, r5, r2
  40999a:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40999c:	428b      	cmp	r3, r1
  40999e:	dd1a      	ble.n	4099d6 <lv_draw_mask_line+0x2de>
  4099a0:	2900      	cmp	r1, #0
  4099a2:	db18      	blt.n	4099d6 <lv_draw_mask_line+0x2de>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  4099a4:	fb05 f202 	mul.w	r2, r5, r2
  4099a8:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  4099ac:	f016 0f02 	tst.w	r6, #2
  4099b0:	d101      	bne.n	4099b6 <lv_draw_mask_line+0x2be>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  4099b2:	43d2      	mvns	r2, r2
  4099b4:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  4099b6:	1847      	adds	r7, r0, r1
  4099b8:	5c46      	ldrb	r6, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  4099ba:	2afc      	cmp	r2, #252	; 0xfc
  4099bc:	d80a      	bhi.n	4099d4 <lv_draw_mask_line+0x2dc>
    if(mask_new <= LV_OPA_MIN) return 0;
  4099be:	2a02      	cmp	r2, #2
  4099c0:	f240 80cb 	bls.w	409b5a <lv_draw_mask_line+0x462>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  4099c4:	fb02 f206 	mul.w	r2, r2, r6
  4099c8:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  4099cc:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  4099d0:	f3c2 56c7 	ubfx	r6, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  4099d4:	703e      	strb	r6, [r7, #0]
            k++;
  4099d6:	1c4e      	adds	r6, r1, #1
            if(k >= 0 && k < len) {
  4099d8:	42b3      	cmp	r3, r6
  4099da:	dd21      	ble.n	409a20 <lv_draw_mask_line+0x328>
  4099dc:	2e00      	cmp	r6, #0
  4099de:	db1f      	blt.n	409a20 <lv_draw_mask_line+0x328>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  4099e0:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  4099e4:	69a5      	ldr	r5, [r4, #24]
  4099e6:	fb05 f502 	mul.w	r5, r5, r2
  4099ea:	12ad      	asrs	r5, r5, #10
                m = ((255 - y_inters) * x_inters) >> 9;
  4099ec:	fb02 f205 	mul.w	r2, r2, r5
  4099f0:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  4099f4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  4099f8:	f015 0f02 	tst.w	r5, #2
  4099fc:	d001      	beq.n	409a02 <lv_draw_mask_line+0x30a>
  4099fe:	43d2      	mvns	r2, r2
  409a00:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  409a02:	5d85      	ldrb	r5, [r0, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409a04:	2afc      	cmp	r2, #252	; 0xfc
  409a06:	d80a      	bhi.n	409a1e <lv_draw_mask_line+0x326>
    if(mask_new <= LV_OPA_MIN) return 0;
  409a08:	2a02      	cmp	r2, #2
  409a0a:	f240 80a8 	bls.w	409b5e <lv_draw_mask_line+0x466>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409a0e:	fb02 f205 	mul.w	r2, r2, r5
  409a12:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  409a16:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  409a1a:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  409a1e:	5585      	strb	r5, [r0, r6]
            if(p->inv) {
  409a20:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  409a24:	f012 0f02 	tst.w	r2, #2
  409a28:	f000 809b 	beq.w	409b62 <lv_draw_mask_line+0x46a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  409a2c:	428b      	cmp	r3, r1
  409a2e:	f2c0 80d7 	blt.w	409be0 <lv_draw_mask_line+0x4e8>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
  409a32:	2900      	cmp	r1, #0
  409a34:	f2c0 80d7 	blt.w	409be6 <lv_draw_mask_line+0x4ee>
  409a38:	4b14      	ldr	r3, [pc, #80]	; (409a8c <lv_draw_mask_line+0x394>)
  409a3a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  409a3c:	2002      	movs	r0, #2
  409a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  409a42:	2600      	movs	r6, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  409a44:	703e      	strb	r6, [r7, #0]
        if(p->inv) {
  409a46:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  409a4a:	f012 0f02 	tst.w	r2, #2
  409a4e:	d00c      	beq.n	409a6a <lv_draw_mask_line+0x372>
            k = xsi - abs_x;
  409a50:	ebae 0105 	sub.w	r1, lr, r5
            if(k >= len) {
  409a54:	428b      	cmp	r3, r1
  409a56:	f340 80ae 	ble.w	409bb6 <lv_draw_mask_line+0x4be>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
  409a5a:	2900      	cmp	r1, #0
  409a5c:	f2c0 80ae 	blt.w	409bbc <lv_draw_mask_line+0x4c4>
  409a60:	4b0a      	ldr	r3, [pc, #40]	; (409a8c <lv_draw_mask_line+0x394>)
  409a62:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  409a64:	2002      	movs	r0, #2
  409a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        k++;
  409a6a:	1c4a      	adds	r2, r1, #1
  409a6c:	429a      	cmp	r2, r3
  409a6e:	bfa8      	it	ge
  409a70:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  409a72:	2a00      	cmp	r2, #0
  409a74:	f000 80a5 	beq.w	409bc2 <lv_draw_mask_line+0x4ca>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
  409a78:	2a00      	cmp	r2, #0
  409a7a:	f340 80a5 	ble.w	409bc8 <lv_draw_mask_line+0x4d0>
  409a7e:	1a99      	subs	r1, r3, r2
  409a80:	4410      	add	r0, r2
  409a82:	4b02      	ldr	r3, [pc, #8]	; (409a8c <lv_draw_mask_line+0x394>)
  409a84:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  409a86:	2002      	movs	r0, #2
  409a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409a8c:	004116ed 	.word	0x004116ed
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  409a90:	69e2      	ldr	r2, [r4, #28]
  409a92:	4252      	negs	r2, r2
  409a94:	fb0c f202 	mul.w	r2, ip, r2
  409a98:	1295      	asrs	r5, r2, #10
            if(k >= 0 && k < len) {
  409a9a:	428b      	cmp	r3, r1
  409a9c:	dd19      	ble.n	409ad2 <lv_draw_mask_line+0x3da>
  409a9e:	2900      	cmp	r1, #0
  409aa0:	db17      	blt.n	409ad2 <lv_draw_mask_line+0x3da>
                m = (y_inters * xsf) >> 9;
  409aa2:	fb05 f20c 	mul.w	r2, r5, ip
  409aa6:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  409aaa:	f016 0f02 	tst.w	r6, #2
  409aae:	d001      	beq.n	409ab4 <lv_draw_mask_line+0x3bc>
  409ab0:	43d2      	mvns	r2, r2
  409ab2:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  409ab4:	1847      	adds	r7, r0, r1
  409ab6:	5c46      	ldrb	r6, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409ab8:	2afc      	cmp	r2, #252	; 0xfc
  409aba:	d809      	bhi.n	409ad0 <lv_draw_mask_line+0x3d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  409abc:	2a02      	cmp	r2, #2
  409abe:	d93c      	bls.n	409b3a <lv_draw_mask_line+0x442>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409ac0:	fb02 f206 	mul.w	r2, r2, r6
  409ac4:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  409ac8:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  409acc:	f3c2 56c7 	ubfx	r6, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  409ad0:	703e      	strb	r6, [r7, #0]
            k--;
  409ad2:	1e4e      	subs	r6, r1, #1
            if(k >= 0 && k < len) {
  409ad4:	42b3      	cmp	r3, r6
  409ad6:	dd21      	ble.n	409b1c <lv_draw_mask_line+0x424>
  409ad8:	2e00      	cmp	r6, #0
  409ada:	db1f      	blt.n	409b1c <lv_draw_mask_line+0x424>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  409adc:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  409ae0:	69a5      	ldr	r5, [r4, #24]
  409ae2:	426d      	negs	r5, r5
  409ae4:	fb02 f505 	mul.w	r5, r2, r5
  409ae8:	12ad      	asrs	r5, r5, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  409aea:	fb02 f205 	mul.w	r2, r2, r5
  409aee:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  409af2:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  409af6:	f015 0f02 	tst.w	r5, #2
  409afa:	d101      	bne.n	409b00 <lv_draw_mask_line+0x408>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  409afc:	43d2      	mvns	r2, r2
  409afe:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  409b00:	5d85      	ldrb	r5, [r0, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409b02:	2afc      	cmp	r2, #252	; 0xfc
  409b04:	d809      	bhi.n	409b1a <lv_draw_mask_line+0x422>
    if(mask_new <= LV_OPA_MIN) return 0;
  409b06:	2a02      	cmp	r2, #2
  409b08:	d919      	bls.n	409b3e <lv_draw_mask_line+0x446>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409b0a:	fb02 f205 	mul.w	r2, r2, r5
  409b0e:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  409b12:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  409b16:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  409b1a:	5585      	strb	r5, [r0, r6]
            if(p->inv) {
  409b1c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  409b20:	f012 0f02 	tst.w	r2, #2
  409b24:	d00d      	beq.n	409b42 <lv_draw_mask_line+0x44a>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
  409b26:	2e00      	cmp	r6, #0
  409b28:	dd51      	ble.n	409bce <lv_draw_mask_line+0x4d6>
  409b2a:	42b3      	cmp	r3, r6
  409b2c:	db4f      	blt.n	409bce <lv_draw_mask_line+0x4d6>
  409b2e:	4631      	mov	r1, r6
  409b30:	4b59      	ldr	r3, [pc, #356]	; (409c98 <lv_draw_mask_line+0x5a0>)
  409b32:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  409b34:	2002      	movs	r0, #2
  409b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  409b3a:	2600      	movs	r6, #0
  409b3c:	e7c8      	b.n	409ad0 <lv_draw_mask_line+0x3d8>
  409b3e:	2500      	movs	r5, #0
  409b40:	e7eb      	b.n	409b1a <lv_draw_mask_line+0x422>
            k += 2;
  409b42:	1c4a      	adds	r2, r1, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  409b44:	4293      	cmp	r3, r2
  409b46:	db45      	blt.n	409bd4 <lv_draw_mask_line+0x4dc>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
  409b48:	2a00      	cmp	r2, #0
  409b4a:	db46      	blt.n	409bda <lv_draw_mask_line+0x4e2>
  409b4c:	1a99      	subs	r1, r3, r2
  409b4e:	4410      	add	r0, r2
  409b50:	4b51      	ldr	r3, [pc, #324]	; (409c98 <lv_draw_mask_line+0x5a0>)
  409b52:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  409b54:	2002      	movs	r0, #2
  409b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  409b5a:	2600      	movs	r6, #0
  409b5c:	e73a      	b.n	4099d4 <lv_draw_mask_line+0x2dc>
  409b5e:	2500      	movs	r5, #0
  409b60:	e75d      	b.n	409a1e <lv_draw_mask_line+0x326>
            k++;
  409b62:	1c8a      	adds	r2, r1, #2
  409b64:	429a      	cmp	r2, r3
  409b66:	bfa8      	it	ge
  409b68:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  409b6a:	2a00      	cmp	r2, #0
  409b6c:	d03e      	beq.n	409bec <lv_draw_mask_line+0x4f4>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
  409b6e:	2a00      	cmp	r2, #0
  409b70:	dd3f      	ble.n	409bf2 <lv_draw_mask_line+0x4fa>
  409b72:	1a99      	subs	r1, r3, r2
  409b74:	4410      	add	r0, r2
  409b76:	4b48      	ldr	r3, [pc, #288]	; (409c98 <lv_draw_mask_line+0x5a0>)
  409b78:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  409b7a:	2002      	movs	r0, #2
  409b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  409b80:	2001      	movs	r0, #1
  409b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  409b86:	2001      	movs	r0, #1
  409b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  409b8c:	2001      	movs	r0, #1
  409b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  409b92:	2000      	movs	r0, #0
  409b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  409b98:	2000      	movs	r0, #0
  409b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  409b9e:	2000      	movs	r0, #0
  409ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  409ba4:	2000      	movs	r0, #0
  409ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  409baa:	2002      	movs	r0, #2
  409bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  409bb0:	2000      	movs	r0, #0
  409bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  409bb6:	2000      	movs	r0, #0
  409bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  409bbc:	2002      	movs	r0, #2
  409bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  409bc2:	2000      	movs	r0, #0
  409bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  409bc8:	2002      	movs	r0, #2
  409bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409bce:	2002      	movs	r0, #2
  409bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  409bd4:	2001      	movs	r0, #1
  409bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  409bda:	2002      	movs	r0, #2
  409bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  409be0:	2000      	movs	r0, #0
  409be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  409be6:	2002      	movs	r0, #2
  409be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  409bec:	2000      	movs	r0, #0
  409bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  409bf2:	2002      	movs	r0, #2
  409bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  409bf8:	461f      	mov	r7, r3
  409bfa:	442b      	add	r3, r5
  409bfc:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x > abs_y) {
  409c00:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
  409c04:	f6ff adff 	blt.w	409806 <lv_draw_mask_line+0x10e>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
  409c08:	3201      	adds	r2, #1
  409c0a:	0212      	lsls	r2, r2, #8
  409c0c:	69a3      	ldr	r3, [r4, #24]
  409c0e:	fb03 f302 	mul.w	r3, r3, r2
  409c12:	129b      	asrs	r3, r3, #10
  409c14:	e00c      	b.n	409c30 <lv_draw_mask_line+0x538>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  409c16:	461f      	mov	r7, r3
  409c18:	442b      	add	r3, r5
  409c1a:	fb01 f303 	mul.w	r3, r1, r3
        if(y_at_x < abs_y) {
  409c1e:	ebb2 2fa3 	cmp.w	r2, r3, asr #10
  409c22:	f73f adea 	bgt.w	4097fa <lv_draw_mask_line+0x102>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
  409c26:	0212      	lsls	r2, r2, #8
  409c28:	69a3      	ldr	r3, [r4, #24]
  409c2a:	fb03 f302 	mul.w	r3, r3, r2
  409c2e:	129b      	asrs	r3, r3, #10
    int32_t xei = xe >> 8;
  409c30:	1219      	asrs	r1, r3, #8
    if(xef == 0) px_h = 255;
  409c32:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  409c36:	d02b      	beq.n	409c90 <lv_draw_mask_line+0x598>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  409c38:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  409c3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  409c3e:	fb02 f203 	mul.w	r2, r2, r3
  409c42:	ea4f 2e22 	mov.w	lr, r2, asr #8
  409c46:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
    int32_t k = xei - abs_x;
  409c4a:	1b49      	subs	r1, r1, r5
        if(k >= 0 && k < len) {
  409c4c:	42b9      	cmp	r1, r7
  409c4e:	da1a      	bge.n	409c86 <lv_draw_mask_line+0x58e>
  409c50:	2900      	cmp	r1, #0
  409c52:	db18      	blt.n	409c86 <lv_draw_mask_line+0x58e>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  409c54:	fb0e f303 	mul.w	r3, lr, r3
  409c58:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
  409c5c:	f016 0f02 	tst.w	r6, #2
  409c60:	d101      	bne.n	409c66 <lv_draw_mask_line+0x56e>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  409c62:	43db      	mvns	r3, r3
  409c64:	b2db      	uxtb	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
  409c66:	1846      	adds	r6, r0, r1
  409c68:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409c6a:	2bfc      	cmp	r3, #252	; 0xfc
  409c6c:	d80a      	bhi.n	409c84 <lv_draw_mask_line+0x58c>
    if(mask_new <= LV_OPA_MIN) return 0;
  409c6e:	2b02      	cmp	r3, #2
  409c70:	f67f adcf 	bls.w	409812 <lv_draw_mask_line+0x11a>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409c74:	fb03 f305 	mul.w	r3, r3, r5
  409c78:	eb03 2503 	add.w	r5, r3, r3, lsl #8
  409c7c:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
  409c80:	f3c3 55c7 	ubfx	r5, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  409c84:	7035      	strb	r5, [r6, #0]
        k++;
  409c86:	1c4d      	adds	r5, r1, #1
  409c88:	1946      	adds	r6, r0, r5
    if(mask_new <= LV_OPA_MIN) return 0;
  409c8a:	f04f 0e00 	mov.w	lr, #0
  409c8e:	e5cb      	b.n	409828 <lv_draw_mask_line+0x130>
    int32_t k = xei - abs_x;
  409c90:	1b4d      	subs	r5, r1, r5
  409c92:	4629      	mov	r1, r5
    if(xef == 0) px_h = 255;
  409c94:	22ff      	movs	r2, #255	; 0xff
  409c96:	e7f7      	b.n	409c88 <lv_draw_mask_line+0x590>
  409c98:	004116ed 	.word	0x004116ed

00409c9c <lv_draw_mask_radius>:
{
  409c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ca0:	b083      	sub	sp, #12
  409ca2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    bool outer = p->cfg.outer;
  409ca4:	7cbd      	ldrb	r5, [r7, #18]
    dest->y1 = src->y1;
  409ca6:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
    dest->y2 = src->y2;
  409caa:	f9b7 c00e 	ldrsh.w	ip, [r7, #14]
    if(outer == false) {
  409cae:	f015 0501 	ands.w	r5, r5, #1
  409cb2:	d13c      	bne.n	409d2e <lv_draw_mask_radius+0x92>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
  409cb4:	4562      	cmp	r2, ip
  409cb6:	f300 815c 	bgt.w	409f72 <lv_draw_mask_radius+0x2d6>
  409cba:	42a2      	cmp	r2, r4
  409cbc:	f2c0 8159 	blt.w	409f72 <lv_draw_mask_radius+0x2d6>
  409cc0:	461e      	mov	r6, r3
  409cc2:	468a      	mov	sl, r1
  409cc4:	4680      	mov	r8, r0
    int32_t radius = p->cfg.radius;
  409cc6:	f9b7 e010 	ldrsh.w	lr, [r7, #16]
    dest->x1 = src->x1;
  409cca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
    dest->x2 = src->x2;
  409cce:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  409cd2:	eb0e 0103 	add.w	r1, lr, r3
  409cd6:	458a      	cmp	sl, r1
  409cd8:	db05      	blt.n	409ce6 <lv_draw_mask_radius+0x4a>
  409cda:	eb06 010a 	add.w	r1, r6, sl
  409cde:	eba9 000e 	sub.w	r0, r9, lr
  409ce2:	4281      	cmp	r1, r0
  409ce4:	dd07      	ble.n	409cf6 <lv_draw_mask_radius+0x5a>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  409ce6:	eb04 010e 	add.w	r1, r4, lr
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  409cea:	428a      	cmp	r2, r1
  409cec:	db46      	blt.n	409d7c <lv_draw_mask_radius+0xe0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  409cee:	ebac 010e 	sub.w	r1, ip, lr
  409cf2:	428a      	cmp	r2, r1
  409cf4:	dc42      	bgt.n	409d7c <lv_draw_mask_radius+0xe0>
        if(outer == false) {
  409cf6:	bb45      	cbnz	r5, 409d4a <lv_draw_mask_radius+0xae>
            int32_t last =  rect.x1 - abs_x;
  409cf8:	eba3 040a 	sub.w	r4, r3, sl
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  409cfc:	42b4      	cmp	r4, r6
  409cfe:	f300 813c 	bgt.w	409f7a <lv_draw_mask_radius+0x2de>
            if(last >= 0) {
  409d02:	2c00      	cmp	r4, #0
  409d04:	db03      	blt.n	409d0e <lv_draw_mask_radius+0x72>
                lv_memset_00(&mask_buf[0], last);
  409d06:	4621      	mov	r1, r4
  409d08:	4640      	mov	r0, r8
  409d0a:	4ba0      	ldr	r3, [pc, #640]	; (409f8c <lv_draw_mask_radius+0x2f0>)
  409d0c:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  409d0e:	eba9 090a 	sub.w	r9, r9, sl
  409d12:	f109 0901 	add.w	r9, r9, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  409d16:	f1b9 0f00 	cmp.w	r9, #0
  409d1a:	f340 8130 	ble.w	409f7e <lv_draw_mask_radius+0x2e2>
            else if(first < len) {
  409d1e:	454e      	cmp	r6, r9
  409d20:	dc0b      	bgt.n	409d3a <lv_draw_mask_radius+0x9e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  409d22:	b914      	cbnz	r4, 409d2a <lv_draw_mask_radius+0x8e>
  409d24:	454e      	cmp	r6, r9
  409d26:	f000 812c 	beq.w	409f82 <lv_draw_mask_radius+0x2e6>
            else return LV_DRAW_MASK_RES_CHANGED;
  409d2a:	2002      	movs	r0, #2
  409d2c:	e122      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  409d2e:	4562      	cmp	r2, ip
  409d30:	dc01      	bgt.n	409d36 <lv_draw_mask_radius+0x9a>
  409d32:	42a2      	cmp	r2, r4
  409d34:	dac4      	bge.n	409cc0 <lv_draw_mask_radius+0x24>
            return LV_DRAW_MASK_RES_FULL_COVER;
  409d36:	2001      	movs	r0, #1
  409d38:	e11c      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
                lv_memset_00(&mask_buf[first], len - first);
  409d3a:	eba6 0109 	sub.w	r1, r6, r9
  409d3e:	eb08 0009 	add.w	r0, r8, r9
  409d42:	4b92      	ldr	r3, [pc, #584]	; (409f8c <lv_draw_mask_radius+0x2f0>)
  409d44:	4798      	blx	r3
            else return LV_DRAW_MASK_RES_CHANGED;
  409d46:	2002      	movs	r0, #2
  409d48:	e114      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
            int32_t first = rect.x1 - abs_x;
  409d4a:	eba3 030a 	sub.w	r3, r3, sl
  409d4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(first <= len) {
  409d52:	429e      	cmp	r6, r3
  409d54:	da01      	bge.n	409d5a <lv_draw_mask_radius+0xbe>
        return LV_DRAW_MASK_RES_CHANGED;
  409d56:	2002      	movs	r0, #2
  409d58:	e10c      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
                int32_t last =  rect.x2 - abs_x - first + 1;
  409d5a:	eba9 010a 	sub.w	r1, r9, sl
  409d5e:	1ac9      	subs	r1, r1, r3
  409d60:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  409d62:	18ca      	adds	r2, r1, r3
  409d64:	4296      	cmp	r6, r2
  409d66:	bfb8      	it	lt
  409d68:	1af1      	sublt	r1, r6, r3
                if(last >= 0) {
  409d6a:	2900      	cmp	r1, #0
  409d6c:	f2c0 810b 	blt.w	409f86 <lv_draw_mask_radius+0x2ea>
                    lv_memset_00(&mask_buf[first], last);
  409d70:	eb08 0003 	add.w	r0, r8, r3
  409d74:	4b85      	ldr	r3, [pc, #532]	; (409f8c <lv_draw_mask_radius+0x2f0>)
  409d76:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  409d78:	2002      	movs	r0, #2
  409d7a:	e0fb      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  409d7c:	eba3 010a 	sub.w	r1, r3, sl
  409d80:	f109 0001 	add.w	r0, r9, #1
  409d84:	1ac0      	subs	r0, r0, r3
  409d86:	b280      	uxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  409d88:	b2a4      	uxth	r4, r4
    abs_y -= rect.y1;
  409d8a:	1b13      	subs	r3, r2, r4
  409d8c:	b29b      	uxth	r3, r3
    if(abs_y < radius) {
  409d8e:	b21a      	sxth	r2, r3
  409d90:	4596      	cmp	lr, r2
  409d92:	dd2f      	ble.n	409df4 <lv_draw_mask_radius+0x158>
        cir_y = radius - abs_y - 1;
  409d94:	f10e 32ff 	add.w	r2, lr, #4294967295
  409d98:	1ad2      	subs	r2, r2, r3
  409d9a:	b212      	sxth	r2, r2
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
  409d9c:	697b      	ldr	r3, [r7, #20]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
  409d9e:	68dc      	ldr	r4, [r3, #12]
  409da0:	1c57      	adds	r7, r2, #1
  409da2:	0052      	lsls	r2, r2, #1
  409da4:	f834 c002 	ldrh.w	ip, [r4, r2]
  409da8:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
  409dac:	eba7 070c 	sub.w	r7, r7, ip
  409db0:	b23f      	sxth	r7, r7
    *x_start = c->x_start_on_y[y];
  409db2:	689c      	ldr	r4, [r3, #8]
  409db4:	5aa2      	ldrh	r2, [r4, r2]
    return &c->cir_opa[c->opa_start_on_y[y]];
  409db6:	685b      	ldr	r3, [r3, #4]
  409db8:	4463      	add	r3, ip
    lv_coord_t cir_x_right = k + w - radius + x_start;
  409dba:	b289      	uxth	r1, r1
  409dbc:	fa1f fe8e 	uxth.w	lr, lr
  409dc0:	eba0 000e 	sub.w	r0, r0, lr
  409dc4:	4408      	add	r0, r1
  409dc6:	4410      	add	r0, r2
  409dc8:	b200      	sxth	r0, r0
  409dca:	9001      	str	r0, [sp, #4]
    lv_coord_t cir_x_left = k + radius - x_start - 1;
  409dcc:	f10e 3eff 	add.w	lr, lr, #4294967295
  409dd0:	448e      	add	lr, r1
  409dd2:	ebae 0402 	sub.w	r4, lr, r2
  409dd6:	b224      	sxth	r4, r4
    if(outer == false) {
  409dd8:	b1a5      	cbz	r5, 409e04 <lv_draw_mask_radius+0x168>
        for(i = 0; i < aa_len; i++) {
  409dda:	2f00      	cmp	r7, #0
  409ddc:	f340 80b4 	ble.w	409f48 <lv_draw_mask_radius+0x2ac>
  409de0:	443b      	add	r3, r7
  409de2:	46a2      	mov	sl, r4
  409de4:	eb08 0004 	add.w	r0, r8, r4
  409de8:	9a01      	ldr	r2, [sp, #4]
  409dea:	4691      	mov	r9, r2
  409dec:	eb08 0102 	add.w	r1, r8, r2
  409df0:	2500      	movs	r5, #0
  409df2:	e08e      	b.n	409f12 <lv_draw_mask_radius+0x276>
        cir_y = abs_y - (h - radius);
  409df4:	eb04 020e 	add.w	r2, r4, lr
  409df8:	3a01      	subs	r2, #1
  409dfa:	441a      	add	r2, r3
  409dfc:	eba2 020c 	sub.w	r2, r2, ip
  409e00:	b212      	sxth	r2, r2
  409e02:	e7cb      	b.n	409d9c <lv_draw_mask_radius+0x100>
        for(i = 0; i < aa_len; i++) {
  409e04:	2f00      	cmp	r7, #0
  409e06:	dd5c      	ble.n	409ec2 <lv_draw_mask_radius+0x226>
  409e08:	443b      	add	r3, r7
  409e0a:	46a2      	mov	sl, r4
  409e0c:	eb08 0504 	add.w	r5, r8, r4
  409e10:	9a01      	ldr	r2, [sp, #4]
  409e12:	4691      	mov	r9, r2
  409e14:	eb08 0002 	add.w	r0, r8, r2
  409e18:	2200      	movs	r2, #0
  409e1a:	e022      	b.n	409e62 <lv_draw_mask_radius+0x1c6>
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409e1c:	4671      	mov	r1, lr
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
  409e1e:	f88c 1000 	strb.w	r1, [ip]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
  409e22:	ebba 0102 	subs.w	r1, sl, r2
  409e26:	d416      	bmi.n	409e56 <lv_draw_mask_radius+0x1ba>
  409e28:	428e      	cmp	r6, r1
  409e2a:	dd14      	ble.n	409e56 <lv_draw_mask_radius+0x1ba>
  409e2c:	46ac      	mov	ip, r5
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
  409e2e:	7829      	ldrb	r1, [r5, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409e30:	29fc      	cmp	r1, #252	; 0xfc
  409e32:	d80e      	bhi.n	409e52 <lv_draw_mask_radius+0x1b6>
    if(mask_new <= LV_OPA_MIN) return 0;
  409e34:	2902      	cmp	r1, #2
  409e36:	d90a      	bls.n	409e4e <lv_draw_mask_radius+0x1b2>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409e38:	fb01 fe0e 	mul.w	lr, r1, lr
  409e3c:	eb0e 210e 	add.w	r1, lr, lr, lsl #8
  409e40:	eb0e 1ec1 	add.w	lr, lr, r1, lsl #7
  409e44:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
  409e48:	e003      	b.n	409e52 <lv_draw_mask_radius+0x1b6>
    if(mask_new <= LV_OPA_MIN) return 0;
  409e4a:	2100      	movs	r1, #0
  409e4c:	e7e7      	b.n	409e1e <lv_draw_mask_radius+0x182>
  409e4e:	f04f 0e00 	mov.w	lr, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
  409e52:	f88c e000 	strb.w	lr, [ip]
  409e56:	3201      	adds	r2, #1
  409e58:	3d01      	subs	r5, #1
  409e5a:	3001      	adds	r0, #1
        for(i = 0; i < aa_len; i++) {
  409e5c:	b211      	sxth	r1, r2
  409e5e:	428f      	cmp	r7, r1
  409e60:	dd15      	ble.n	409e8e <lv_draw_mask_radius+0x1f2>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
  409e62:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
  409e66:	eb19 0102 	adds.w	r1, r9, r2
  409e6a:	d4da      	bmi.n	409e22 <lv_draw_mask_radius+0x186>
  409e6c:	428e      	cmp	r6, r1
  409e6e:	ddd8      	ble.n	409e22 <lv_draw_mask_radius+0x186>
  409e70:	4684      	mov	ip, r0
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
  409e72:	7801      	ldrb	r1, [r0, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409e74:	29fc      	cmp	r1, #252	; 0xfc
  409e76:	d8d1      	bhi.n	409e1c <lv_draw_mask_radius+0x180>
    if(mask_new <= LV_OPA_MIN) return 0;
  409e78:	2902      	cmp	r1, #2
  409e7a:	d9e6      	bls.n	409e4a <lv_draw_mask_radius+0x1ae>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409e7c:	fb01 f10e 	mul.w	r1, r1, lr
  409e80:	eb01 2b01 	add.w	fp, r1, r1, lsl #8
  409e84:	eb01 11cb 	add.w	r1, r1, fp, lsl #7
  409e88:	f3c1 51c7 	ubfx	r1, r1, #23, #8
  409e8c:	e7c7      	b.n	409e1e <lv_draw_mask_radius+0x182>
        for(i = 0; i < aa_len; i++) {
  409e8e:	4638      	mov	r0, r7
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
  409e90:	9b01      	ldr	r3, [sp, #4]
  409e92:	4403      	add	r3, r0
  409e94:	4618      	mov	r0, r3
  409e96:	42b3      	cmp	r3, r6
  409e98:	bfa8      	it	ge
  409e9a:	4630      	movge	r0, r6
  409e9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  409ea0:	b200      	sxth	r0, r0
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
  409ea2:	1a31      	subs	r1, r6, r0
  409ea4:	4440      	add	r0, r8
  409ea6:	4d39      	ldr	r5, [pc, #228]	; (409f8c <lv_draw_mask_radius+0x2f0>)
  409ea8:	47a8      	blx	r5
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
  409eaa:	1be4      	subs	r4, r4, r7
  409eac:	1c61      	adds	r1, r4, #1
  409eae:	42b1      	cmp	r1, r6
  409eb0:	bfa8      	it	ge
  409eb2:	4631      	movge	r1, r6
  409eb4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        lv_memset_00(&mask_buf[0], cir_x_left);
  409eb8:	b209      	sxth	r1, r1
  409eba:	4640      	mov	r0, r8
  409ebc:	47a8      	blx	r5
    return LV_DRAW_MASK_RES_CHANGED;
  409ebe:	2002      	movs	r0, #2
  409ec0:	e058      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
        for(i = 0; i < aa_len; i++) {
  409ec2:	2000      	movs	r0, #0
  409ec4:	e7e4      	b.n	409e90 <lv_draw_mask_radius+0x1f4>
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409ec6:	4696      	mov	lr, r2
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
  409ec8:	f88c e000 	strb.w	lr, [ip]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
  409ecc:	ebba 0e05 	subs.w	lr, sl, r5
  409ed0:	d419      	bmi.n	409f06 <lv_draw_mask_radius+0x26a>
  409ed2:	4576      	cmp	r6, lr
  409ed4:	dd17      	ble.n	409f06 <lv_draw_mask_radius+0x26a>
  409ed6:	4684      	mov	ip, r0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
  409ed8:	f890 e000 	ldrb.w	lr, [r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409edc:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  409ee0:	d80f      	bhi.n	409f02 <lv_draw_mask_radius+0x266>
    if(mask_new <= LV_OPA_MIN) return 0;
  409ee2:	f1be 0f02 	cmp.w	lr, #2
  409ee6:	d90b      	bls.n	409f00 <lv_draw_mask_radius+0x264>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409ee8:	fb0e f202 	mul.w	r2, lr, r2
  409eec:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  409ef0:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  409ef4:	f3c2 52c7 	ubfx	r2, r2, #23, #8
  409ef8:	e003      	b.n	409f02 <lv_draw_mask_radius+0x266>
    if(mask_new <= LV_OPA_MIN) return 0;
  409efa:	f04f 0e00 	mov.w	lr, #0
  409efe:	e7e3      	b.n	409ec8 <lv_draw_mask_radius+0x22c>
  409f00:	2200      	movs	r2, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
  409f02:	f88c 2000 	strb.w	r2, [ip]
  409f06:	3501      	adds	r5, #1
  409f08:	3801      	subs	r0, #1
  409f0a:	3101      	adds	r1, #1
        for(i = 0; i < aa_len; i++) {
  409f0c:	b22a      	sxth	r2, r5
  409f0e:	4297      	cmp	r7, r2
  409f10:	dd1a      	ble.n	409f48 <lv_draw_mask_radius+0x2ac>
  409f12:	3b01      	subs	r3, #1
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
  409f14:	781a      	ldrb	r2, [r3, #0]
  409f16:	43d2      	mvns	r2, r2
  409f18:	b2d2      	uxtb	r2, r2
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
  409f1a:	eb15 0e09 	adds.w	lr, r5, r9
  409f1e:	d4d5      	bmi.n	409ecc <lv_draw_mask_radius+0x230>
  409f20:	4576      	cmp	r6, lr
  409f22:	ddd3      	ble.n	409ecc <lv_draw_mask_radius+0x230>
  409f24:	468c      	mov	ip, r1
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
  409f26:	f891 e000 	ldrb.w	lr, [r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  409f2a:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  409f2e:	d8ca      	bhi.n	409ec6 <lv_draw_mask_radius+0x22a>
    if(mask_new <= LV_OPA_MIN) return 0;
  409f30:	f1be 0f02 	cmp.w	lr, #2
  409f34:	d9e1      	bls.n	409efa <lv_draw_mask_radius+0x25e>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
  409f36:	fb0e fe02 	mul.w	lr, lr, r2
  409f3a:	eb0e 2b0e 	add.w	fp, lr, lr, lsl #8
  409f3e:	eb0e 1ecb 	add.w	lr, lr, fp, lsl #7
  409f42:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
  409f46:	e7bf      	b.n	409ec8 <lv_draw_mask_radius+0x22c>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
  409f48:	1c60      	adds	r0, r4, #1
  409f4a:	42b0      	cmp	r0, r6
  409f4c:	bfa8      	it	ge
  409f4e:	4630      	movge	r0, r6
  409f50:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
  409f54:	b220      	sxth	r0, r4
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
  409f56:	1a36      	subs	r6, r6, r0
  409f58:	9b01      	ldr	r3, [sp, #4]
  409f5a:	1a19      	subs	r1, r3, r0
  409f5c:	42b1      	cmp	r1, r6
  409f5e:	bfa8      	it	ge
  409f60:	4631      	movge	r1, r6
  409f62:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        lv_memset_00(&mask_buf[clr_start], clr_len);
  409f66:	b209      	sxth	r1, r1
  409f68:	4440      	add	r0, r8
  409f6a:	4b08      	ldr	r3, [pc, #32]	; (409f8c <lv_draw_mask_radius+0x2f0>)
  409f6c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  409f6e:	2002      	movs	r0, #2
  409f70:	e000      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
            return LV_DRAW_MASK_RES_TRANSP;
  409f72:	2000      	movs	r0, #0
}
  409f74:	b003      	add	sp, #12
  409f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  409f7a:	2000      	movs	r0, #0
  409f7c:	e7fa      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  409f7e:	2000      	movs	r0, #0
  409f80:	e7f8      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  409f82:	2001      	movs	r0, #1
  409f84:	e7f6      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
        return LV_DRAW_MASK_RES_CHANGED;
  409f86:	2002      	movs	r0, #2
  409f88:	e7f4      	b.n	409f74 <lv_draw_mask_radius+0x2d8>
  409f8a:	bf00      	nop
  409f8c:	004116ed 	.word	0x004116ed

00409f90 <lv_draw_mask_add>:
{
  409f90:	b510      	push	{r4, lr}
  409f92:	b082      	sub	sp, #8
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  409f94:	4b10      	ldr	r3, [pc, #64]	; (409fd8 <lv_draw_mask_add+0x48>)
  409f96:	681b      	ldr	r3, [r3, #0]
  409f98:	b19b      	cbz	r3, 409fc2 <lv_draw_mask_add+0x32>
  409f9a:	4a0f      	ldr	r2, [pc, #60]	; (409fd8 <lv_draw_mask_add+0x48>)
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  409f9c:	2301      	movs	r3, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  409f9e:	6894      	ldr	r4, [r2, #8]
  409fa0:	b184      	cbz	r4, 409fc4 <lv_draw_mask_add+0x34>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  409fa2:	3301      	adds	r3, #1
  409fa4:	b2db      	uxtb	r3, r3
  409fa6:	3208      	adds	r2, #8
  409fa8:	2b10      	cmp	r3, #16
  409faa:	d1f8      	bne.n	409f9e <lv_draw_mask_add+0xe>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
  409fac:	4b0b      	ldr	r3, [pc, #44]	; (409fdc <lv_draw_mask_add+0x4c>)
  409fae:	9300      	str	r3, [sp, #0]
  409fb0:	4b0b      	ldr	r3, [pc, #44]	; (409fe0 <lv_draw_mask_add+0x50>)
  409fb2:	2257      	movs	r2, #87	; 0x57
  409fb4:	490b      	ldr	r1, [pc, #44]	; (409fe4 <lv_draw_mask_add+0x54>)
  409fb6:	2002      	movs	r0, #2
  409fb8:	4c0b      	ldr	r4, [pc, #44]	; (409fe8 <lv_draw_mask_add+0x58>)
  409fba:	47a0      	blx	r4
        return LV_MASK_ID_INV;
  409fbc:	f04f 30ff 	mov.w	r0, #4294967295
  409fc0:	e007      	b.n	409fd2 <lv_draw_mask_add+0x42>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  409fc2:	2300      	movs	r3, #0
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  409fc4:	4a04      	ldr	r2, [pc, #16]	; (409fd8 <lv_draw_mask_add+0x48>)
  409fc6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  409fca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  409fce:	6051      	str	r1, [r2, #4]
    return i;
  409fd0:	b218      	sxth	r0, r3
}
  409fd2:	b002      	add	sp, #8
  409fd4:	bd10      	pop	{r4, pc}
  409fd6:	bf00      	nop
  409fd8:	20439edc 	.word	0x20439edc
  409fdc:	0041c794 	.word	0x0041c794
  409fe0:	0041c720 	.word	0x0041c720
  409fe4:	0041c760 	.word	0x0041c760
  409fe8:	00410edd 	.word	0x00410edd

00409fec <lv_draw_mask_apply>:
{
  409fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409ff0:	b082      	sub	sp, #8
    while(m->param) {
  409ff2:	4c11      	ldr	r4, [pc, #68]	; (40a038 <lv_draw_mask_apply+0x4c>)
  409ff4:	6824      	ldr	r4, [r4, #0]
  409ff6:	b1ec      	cbz	r4, 40a034 <lv_draw_mask_apply+0x48>
  409ff8:	469a      	mov	sl, r3
  409ffa:	4691      	mov	r9, r2
  409ffc:	4688      	mov	r8, r1
  409ffe:	4607      	mov	r7, r0
  40a000:	4e0d      	ldr	r6, [pc, #52]	; (40a038 <lv_draw_mask_apply+0x4c>)
  40a002:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40a004:	9400      	str	r4, [sp, #0]
  40a006:	6824      	ldr	r4, [r4, #0]
  40a008:	4653      	mov	r3, sl
  40a00a:	464a      	mov	r2, r9
  40a00c:	4641      	mov	r1, r8
  40a00e:	4638      	mov	r0, r7
  40a010:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40a012:	4604      	mov	r4, r0
  40a014:	b150      	cbz	r0, 40a02c <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40a016:	2802      	cmp	r0, #2
  40a018:	bf08      	it	eq
  40a01a:	2501      	moveq	r5, #1
    while(m->param) {
  40a01c:	f856 4f08 	ldr.w	r4, [r6, #8]!
  40a020:	2c00      	cmp	r4, #0
  40a022:	d1ef      	bne.n	40a004 <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40a024:	2d00      	cmp	r5, #0
  40a026:	bf14      	ite	ne
  40a028:	2402      	movne	r4, #2
  40a02a:	2401      	moveq	r4, #1
}
  40a02c:	4620      	mov	r0, r4
  40a02e:	b002      	add	sp, #8
  40a030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40a034:	2401      	movs	r4, #1
  40a036:	e7f9      	b.n	40a02c <lv_draw_mask_apply+0x40>
  40a038:	20439edc 	.word	0x20439edc

0040a03c <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40a03c:	f1b0 3fff 	cmp.w	r0, #4294967295
  40a040:	d00a      	beq.n	40a058 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40a042:	4b06      	ldr	r3, [pc, #24]	; (40a05c <lv_draw_mask_remove_id+0x20>)
  40a044:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40a048:	2200      	movs	r2, #0
  40a04a:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40a04e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40a052:	605a      	str	r2, [r3, #4]
}
  40a054:	4608      	mov	r0, r1
  40a056:	4770      	bx	lr
    _lv_draw_mask_common_dsc_t * p = NULL;
  40a058:	2100      	movs	r1, #0
  40a05a:	e7fb      	b.n	40a054 <lv_draw_mask_remove_id+0x18>
  40a05c:	20439edc 	.word	0x20439edc

0040a060 <lv_draw_mask_remove_custom>:
{
  40a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a064:	4606      	mov	r6, r0
  40a066:	4d0b      	ldr	r5, [pc, #44]	; (40a094 <lv_draw_mask_remove_custom+0x34>)
  40a068:	2400      	movs	r4, #0
    _lv_draw_mask_common_dsc_t * p = NULL;
  40a06a:	4627      	mov	r7, r4
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40a06c:	46a9      	mov	r9, r5
            lv_draw_mask_remove_id(i);
  40a06e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40a098 <lv_draw_mask_remove_custom+0x38>
  40a072:	e003      	b.n	40a07c <lv_draw_mask_remove_custom+0x1c>
  40a074:	3401      	adds	r4, #1
  40a076:	3508      	adds	r5, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40a078:	2c10      	cmp	r4, #16
  40a07a:	d007      	beq.n	40a08c <lv_draw_mask_remove_custom+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40a07c:	686b      	ldr	r3, [r5, #4]
  40a07e:	42b3      	cmp	r3, r6
  40a080:	d1f8      	bne.n	40a074 <lv_draw_mask_remove_custom+0x14>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40a082:	f859 7034 	ldr.w	r7, [r9, r4, lsl #3]
            lv_draw_mask_remove_id(i);
  40a086:	b220      	sxth	r0, r4
  40a088:	47c0      	blx	r8
  40a08a:	e7f3      	b.n	40a074 <lv_draw_mask_remove_custom+0x14>
}
  40a08c:	4638      	mov	r0, r7
  40a08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a092:	bf00      	nop
  40a094:	20439edc 	.word	0x20439edc
  40a098:	0040a03d 	.word	0x0040a03d

0040a09c <lv_draw_mask_free_param>:
{
  40a09c:	b538      	push	{r3, r4, r5, lr}
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
  40a09e:	7903      	ldrb	r3, [r0, #4]
  40a0a0:	2b02      	cmp	r3, #2
  40a0a2:	d000      	beq.n	40a0a6 <lv_draw_mask_free_param+0xa>
  40a0a4:	bd38      	pop	{r3, r4, r5, pc}
        if(radius_p->circle) {
  40a0a6:	6943      	ldr	r3, [r0, #20]
  40a0a8:	2b00      	cmp	r3, #0
  40a0aa:	d0fb      	beq.n	40a0a4 <lv_draw_mask_free_param+0x8>
            if(radius_p->circle->life < 0) {
  40a0ac:	691a      	ldr	r2, [r3, #16]
  40a0ae:	2a00      	cmp	r2, #0
  40a0b0:	db03      	blt.n	40a0ba <lv_draw_mask_free_param+0x1e>
                radius_p->circle->used_cnt--;
  40a0b2:	695a      	ldr	r2, [r3, #20]
  40a0b4:	3a01      	subs	r2, #1
  40a0b6:	615a      	str	r2, [r3, #20]
}
  40a0b8:	e7f4      	b.n	40a0a4 <lv_draw_mask_free_param+0x8>
  40a0ba:	4604      	mov	r4, r0
                lv_mem_free(radius_p->circle->cir_opa);
  40a0bc:	6858      	ldr	r0, [r3, #4]
  40a0be:	4d02      	ldr	r5, [pc, #8]	; (40a0c8 <lv_draw_mask_free_param+0x2c>)
  40a0c0:	47a8      	blx	r5
                lv_mem_free(radius_p->circle);
  40a0c2:	6960      	ldr	r0, [r4, #20]
  40a0c4:	47a8      	blx	r5
  40a0c6:	bd38      	pop	{r3, r4, r5, pc}
  40a0c8:	004110e1 	.word	0x004110e1

0040a0cc <lv_draw_mask_is_any>:
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
  40a0cc:	b140      	cbz	r0, 40a0e0 <lv_draw_mask_is_any+0x14>
{
  40a0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a0d2:	4605      	mov	r5, r0
  40a0d4:	2400      	movs	r4, #0
        _lv_draw_mask_common_dsc_t * comm_param =  LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40a0d6:	4e19      	ldr	r6, [pc, #100]	; (40a13c <lv_draw_mask_is_any+0x70>)
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
  40a0d8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 40a144 <lv_draw_mask_is_any+0x78>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
  40a0dc:	4f18      	ldr	r7, [pc, #96]	; (40a140 <lv_draw_mask_is_any+0x74>)
  40a0de:	e00e      	b.n	40a0fe <lv_draw_mask_is_any+0x32>
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
  40a0e0:	4b16      	ldr	r3, [pc, #88]	; (40a13c <lv_draw_mask_is_any+0x70>)
  40a0e2:	6818      	ldr	r0, [r3, #0]
  40a0e4:	3000      	adds	r0, #0
  40a0e6:	bf18      	it	ne
  40a0e8:	2001      	movne	r0, #1
  40a0ea:	4770      	bx	lr
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
  40a0ec:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
  40a0f0:	3108      	adds	r1, #8
  40a0f2:	4628      	mov	r0, r5
  40a0f4:	47c0      	blx	r8
  40a0f6:	b1e8      	cbz	r0, 40a134 <lv_draw_mask_is_any+0x68>
  40a0f8:	3401      	adds	r4, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40a0fa:	2c10      	cmp	r4, #16
  40a0fc:	d014      	beq.n	40a128 <lv_draw_mask_is_any+0x5c>
        _lv_draw_mask_common_dsc_t * comm_param =  LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40a0fe:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
        if(comm_param == NULL) continue;
  40a102:	2900      	cmp	r1, #0
  40a104:	d0f8      	beq.n	40a0f8 <lv_draw_mask_is_any+0x2c>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
  40a106:	790b      	ldrb	r3, [r1, #4]
  40a108:	2b02      	cmp	r3, #2
  40a10a:	d110      	bne.n	40a12e <lv_draw_mask_is_any+0x62>
            if(radius_param->cfg.outer) {
  40a10c:	7c8b      	ldrb	r3, [r1, #18]
  40a10e:	f013 0f01 	tst.w	r3, #1
  40a112:	d0eb      	beq.n	40a0ec <lv_draw_mask_is_any+0x20>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
  40a114:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
  40a118:	3108      	adds	r1, #8
  40a11a:	4628      	mov	r0, r5
  40a11c:	47b8      	blx	r7
  40a11e:	2800      	cmp	r0, #0
  40a120:	d1ea      	bne.n	40a0f8 <lv_draw_mask_is_any+0x2c>
  40a122:	2001      	movs	r0, #1
  40a124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
  40a128:	2000      	movs	r0, #0
  40a12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return true;
  40a12e:	2001      	movs	r0, #1
  40a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
  40a134:	2001      	movs	r0, #1
}
  40a136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a13a:	bf00      	nop
  40a13c:	20439edc 	.word	0x20439edc
  40a140:	00410a39 	.word	0x00410a39
  40a144:	00410991 	.word	0x00410991

0040a148 <lv_draw_mask_line_points_init>:
{
  40a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a14c:	4604      	mov	r4, r0
  40a14e:	460f      	mov	r7, r1
  40a150:	4615      	mov	r5, r2
  40a152:	4698      	mov	r8, r3
  40a154:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
  40a158:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40a15c:	212c      	movs	r1, #44	; 0x2c
  40a15e:	4b4e      	ldr	r3, [pc, #312]	; (40a298 <lv_draw_mask_line_points_init+0x150>)
  40a160:	4798      	blx	r3
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40a162:	42b5      	cmp	r5, r6
  40a164:	d106      	bne.n	40a174 <lv_draw_mask_line_points_init+0x2c>
  40a166:	f1b9 0f03 	cmp.w	r9, #3
  40a16a:	d103      	bne.n	40a174 <lv_draw_mask_line_points_init+0x2c>
        p1y--;
  40a16c:	3d01      	subs	r5, #1
  40a16e:	b22d      	sxth	r5, r5
        p2y--;
  40a170:	3e01      	subs	r6, #1
  40a172:	b236      	sxth	r6, r6
    if(p1y > p2y) {
  40a174:	42b5      	cmp	r5, r6
  40a176:	dd05      	ble.n	40a184 <lv_draw_mask_line_points_init+0x3c>
  40a178:	462b      	mov	r3, r5
        p1y = t;
  40a17a:	4635      	mov	r5, r6
        p2y = p1y;
  40a17c:	461e      	mov	r6, r3
    if(p1y > p2y) {
  40a17e:	463b      	mov	r3, r7
        p1x = t;
  40a180:	4647      	mov	r7, r8
        p2x = p1x;
  40a182:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40a184:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40a186:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40a188:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40a18c:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40a18e:	7c23      	ldrb	r3, [r4, #16]
  40a190:	f369 0301 	bfi	r3, r9, #0, #2
  40a194:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40a196:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40a198:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
  40a19a:	eba8 0707 	sub.w	r7, r8, r7
  40a19e:	1b75      	subs	r5, r6, r5
  40a1a0:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
  40a1a4:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40a1a8:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40a1ac:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40a1b0:	4299      	cmp	r1, r3
  40a1b2:	bfd4      	ite	le
  40a1b4:	2100      	movle	r1, #0
  40a1b6:	2101      	movgt	r1, #1
  40a1b8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
  40a1bc:	f361 0200 	bfi	r2, r1, #0, #1
  40a1c0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40a1c4:	2100      	movs	r1, #0
  40a1c6:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
  40a1c8:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40a1ca:	4b34      	ldr	r3, [pc, #208]	; (40a29c <lv_draw_mask_line_points_init+0x154>)
  40a1cc:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40a1ce:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
  40a1d0:	f012 0f01 	tst.w	r2, #1
  40a1d4:	d025      	beq.n	40a222 <lv_draw_mask_line_points_init+0xda>
        if(dx) {
  40a1d6:	b13f      	cbz	r7, 40a1e8 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40a1d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40a1dc:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40a1e0:	fb05 f303 	mul.w	r3, r5, r3
  40a1e4:	129b      	asrs	r3, r3, #10
  40a1e6:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40a1e8:	b13d      	cbz	r5, 40a1fa <lv_draw_mask_line_points_init+0xb2>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40a1ea:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40a1ee:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40a1f2:	fb07 f705 	mul.w	r7, r7, r5
  40a1f6:	12bf      	asrs	r7, r7, #10
  40a1f8:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40a1fa:	69e3      	ldr	r3, [r4, #28]
  40a1fc:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40a1fe:	7c23      	ldrb	r3, [r4, #16]
  40a200:	f013 0303 	ands.w	r3, r3, #3
  40a204:	d122      	bne.n	40a24c <lv_draw_mask_line_points_init+0x104>
  40a206:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40a20a:	f36f 0341 	bfc	r3, #1, #1
  40a20e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40a212:	6a23      	ldr	r3, [r4, #32]
  40a214:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
  40a216:	2b00      	cmp	r3, #0
  40a218:	bfb8      	it	lt
  40a21a:	4252      	neglt	r2, r2
  40a21c:	6262      	str	r2, [r4, #36]	; 0x24
  40a21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
  40a222:	b13d      	cbz	r5, 40a234 <lv_draw_mask_line_points_init+0xec>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40a224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40a228:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40a22c:	fb07 f303 	mul.w	r3, r7, r3
  40a230:	129b      	asrs	r3, r3, #10
  40a232:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40a234:	b13f      	cbz	r7, 40a246 <lv_draw_mask_line_points_init+0xfe>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40a236:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40a23a:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40a23e:	fb05 f507 	mul.w	r5, r5, r7
  40a242:	12ad      	asrs	r5, r5, #10
  40a244:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40a246:	69a3      	ldr	r3, [r4, #24]
  40a248:	6223      	str	r3, [r4, #32]
  40a24a:	e7d8      	b.n	40a1fe <lv_draw_mask_line_points_init+0xb6>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40a24c:	2b01      	cmp	r3, #1
  40a24e:	d00f      	beq.n	40a270 <lv_draw_mask_line_points_init+0x128>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40a250:	2b02      	cmp	r3, #2
  40a252:	d014      	beq.n	40a27e <lv_draw_mask_line_points_init+0x136>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40a254:	2b03      	cmp	r3, #3
  40a256:	d1dc      	bne.n	40a212 <lv_draw_mask_line_points_init+0xca>
        if(param->steep > 0) param->inv = 0;
  40a258:	6a23      	ldr	r3, [r4, #32]
  40a25a:	2b00      	cmp	r3, #0
  40a25c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40a260:	bfcc      	ite	gt
  40a262:	f36f 0341 	bfcgt	r3, #1, #1
        else param->inv = 1;
  40a266:	f043 0302 	orrle.w	r3, r3, #2
  40a26a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40a26e:	e7d0      	b.n	40a212 <lv_draw_mask_line_points_init+0xca>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40a270:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40a274:	f043 0302 	orr.w	r3, r3, #2
  40a278:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40a27c:	e7c9      	b.n	40a212 <lv_draw_mask_line_points_init+0xca>
        if(param->steep > 0) param->inv = 1;
  40a27e:	6a23      	ldr	r3, [r4, #32]
  40a280:	2b00      	cmp	r3, #0
  40a282:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40a286:	bfcc      	ite	gt
  40a288:	f043 0302 	orrgt.w	r3, r3, #2
        else param->inv = 0;
  40a28c:	f36f 0341 	bfcle	r3, #1, #1
  40a290:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40a294:	e7bd      	b.n	40a212 <lv_draw_mask_line_points_init+0xca>
  40a296:	bf00      	nop
  40a298:	004116ed 	.word	0x004116ed
  40a29c:	004096f9 	.word	0x004096f9

0040a2a0 <lv_draw_mask_radius_init>:
{
  40a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a2a4:	b08f      	sub	sp, #60	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40a2a6:	f9b1 6000 	ldrsh.w	r6, [r1]
  40a2aa:	ea22 75e2 	bic.w	r5, r2, r2, asr #31
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40a2ae:	88ca      	ldrh	r2, [r1, #6]
  40a2b0:	3201      	adds	r2, #1
  40a2b2:	884c      	ldrh	r4, [r1, #2]
  40a2b4:	1b12      	subs	r2, r2, r4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40a2b6:	888c      	ldrh	r4, [r1, #4]
  40a2b8:	3401      	adds	r4, #1
  40a2ba:	1ba4      	subs	r4, r4, r6
    int32_t short_side = LV_MIN(w, h);
  40a2bc:	b212      	sxth	r2, r2
  40a2be:	b224      	sxth	r4, r4
  40a2c0:	42a2      	cmp	r2, r4
  40a2c2:	bfa8      	it	ge
  40a2c4:	4622      	movge	r2, r4
    if(radius > short_side >> 1) radius = short_side >> 1;
  40a2c6:	1052      	asrs	r2, r2, #1
  40a2c8:	4295      	cmp	r5, r2
  40a2ca:	bfc8      	it	gt
  40a2cc:	b215      	sxthgt	r5, r2
    dest->x1 = src->x1;
  40a2ce:	8106      	strh	r6, [r0, #8]
    dest->y1 = src->y1;
  40a2d0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40a2d4:	8142      	strh	r2, [r0, #10]
    dest->x2 = src->x2;
  40a2d6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
  40a2da:	8182      	strh	r2, [r0, #12]
    dest->y2 = src->y2;
  40a2dc:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  40a2e0:	81c2      	strh	r2, [r0, #14]
    param->cfg.radius = radius;
  40a2e2:	8205      	strh	r5, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40a2e4:	7c82      	ldrb	r2, [r0, #18]
  40a2e6:	f363 0200 	bfi	r2, r3, #0, #1
  40a2ea:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40a2ec:	4b9b      	ldr	r3, [pc, #620]	; (40a55c <lv_draw_mask_radius_init+0x2bc>)
  40a2ee:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40a2f0:	2302      	movs	r3, #2
  40a2f2:	7103      	strb	r3, [r0, #4]
    if(radius == 0) {
  40a2f4:	b1c5      	cbz	r5, 40a328 <lv_draw_mask_radius_init+0x88>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
  40a2f6:	4b9a      	ldr	r3, [pc, #616]	; (40a560 <lv_draw_mask_radius_init+0x2c0>)
  40a2f8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
  40a2fc:	42ab      	cmp	r3, r5
  40a2fe:	d01e      	beq.n	40a33e <lv_draw_mask_radius_init+0x9e>
  40a300:	4b97      	ldr	r3, [pc, #604]	; (40a560 <lv_draw_mask_radius_init+0x2c0>)
  40a302:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  40a306:	42ab      	cmp	r3, r5
  40a308:	d015      	beq.n	40a336 <lv_draw_mask_radius_init+0x96>
  40a30a:	4b95      	ldr	r3, [pc, #596]	; (40a560 <lv_draw_mask_radius_init+0x2c0>)
  40a30c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
  40a310:	42ab      	cmp	r3, r5
  40a312:	d012      	beq.n	40a33a <lv_draw_mask_radius_init+0x9a>
  40a314:	4b92      	ldr	r3, [pc, #584]	; (40a560 <lv_draw_mask_radius_init+0x2c0>)
  40a316:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
  40a31a:	42ab      	cmp	r3, r5
  40a31c:	d009      	beq.n	40a332 <lv_draw_mask_radius_init+0x92>
  40a31e:	4b90      	ldr	r3, [pc, #576]	; (40a560 <lv_draw_mask_radius_init+0x2c0>)
  40a320:	f103 0670 	add.w	r6, r3, #112	; 0x70
  40a324:	2400      	movs	r4, #0
  40a326:	e02a      	b.n	40a37e <lv_draw_mask_radius_init+0xde>
        param->circle = NULL;
  40a328:	2300      	movs	r3, #0
  40a32a:	6143      	str	r3, [r0, #20]
}
  40a32c:	b00f      	add	sp, #60	; 0x3c
  40a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
  40a332:	2303      	movs	r3, #3
  40a334:	e004      	b.n	40a340 <lv_draw_mask_radius_init+0xa0>
  40a336:	2301      	movs	r3, #1
  40a338:	e002      	b.n	40a340 <lv_draw_mask_radius_init+0xa0>
  40a33a:	2302      	movs	r3, #2
  40a33c:	e000      	b.n	40a340 <lv_draw_mask_radius_init+0xa0>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
  40a33e:	2300      	movs	r3, #0
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
  40a340:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
  40a344:	4a86      	ldr	r2, [pc, #536]	; (40a560 <lv_draw_mask_radius_init+0x2c0>)
  40a346:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40a34a:	6951      	ldr	r1, [r2, #20]
  40a34c:	3101      	adds	r1, #1
  40a34e:	6151      	str	r1, [r2, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
  40a350:	6912      	ldr	r2, [r2, #16]
  40a352:	2d0f      	cmp	r5, #15
  40a354:	bfcc      	ite	gt
  40a356:	112d      	asrgt	r5, r5, #4
  40a358:	2501      	movle	r5, #1
  40a35a:	4981      	ldr	r1, [pc, #516]	; (40a560 <lv_draw_mask_radius_init+0x2c0>)
  40a35c:	00dc      	lsls	r4, r3, #3
  40a35e:	1ae6      	subs	r6, r4, r3
  40a360:	eb01 0686 	add.w	r6, r1, r6, lsl #2
  40a364:	4415      	add	r5, r2
  40a366:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
  40a36a:	bfa8      	it	ge
  40a36c:	f44f 757a 	movge.w	r5, #1000	; 0x3e8
  40a370:	6135      	str	r5, [r6, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
  40a372:	6146      	str	r6, [r0, #20]
            return;
  40a374:	e7da      	b.n	40a32c <lv_draw_mask_radius_init+0x8c>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
  40a376:	461c      	mov	r4, r3
  40a378:	331c      	adds	r3, #28
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
  40a37a:	42b3      	cmp	r3, r6
  40a37c:	d00a      	beq.n	40a394 <lv_draw_mask_radius_init+0xf4>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
  40a37e:	695a      	ldr	r2, [r3, #20]
  40a380:	2a00      	cmp	r2, #0
  40a382:	d1f9      	bne.n	40a378 <lv_draw_mask_radius_init+0xd8>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
  40a384:	2c00      	cmp	r4, #0
  40a386:	d0f6      	beq.n	40a376 <lv_draw_mask_radius_init+0xd6>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
  40a388:	691f      	ldr	r7, [r3, #16]
  40a38a:	6922      	ldr	r2, [r4, #16]
  40a38c:	4297      	cmp	r7, r2
  40a38e:	bfb8      	it	lt
  40a390:	461c      	movlt	r4, r3
  40a392:	e7f1      	b.n	40a378 <lv_draw_mask_radius_init+0xd8>
  40a394:	4606      	mov	r6, r0
    if(!entry) {
  40a396:	2c00      	cmp	r4, #0
  40a398:	d032      	beq.n	40a400 <lv_draw_mask_radius_init+0x160>
        entry->used_cnt++;
  40a39a:	6963      	ldr	r3, [r4, #20]
  40a39c:	3301      	adds	r3, #1
  40a39e:	6163      	str	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
  40a3a0:	2d0f      	cmp	r5, #15
  40a3a2:	bfcc      	ite	gt
  40a3a4:	112b      	asrgt	r3, r5, #4
  40a3a6:	2301      	movle	r3, #1
  40a3a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40a3ac:	bfa8      	it	ge
  40a3ae:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
  40a3b2:	6123      	str	r3, [r4, #16]
    param->circle = entry;
  40a3b4:	6174      	str	r4, [r6, #20]
    c->radius = radius;
  40a3b6:	8325      	strh	r5, [r4, #24]
    if(c->buf) lv_mem_free(c->buf);
  40a3b8:	6820      	ldr	r0, [r4, #0]
  40a3ba:	b108      	cbz	r0, 40a3c0 <lv_draw_mask_radius_init+0x120>
  40a3bc:	4b69      	ldr	r3, [pc, #420]	; (40a564 <lv_draw_mask_radius_init+0x2c4>)
  40a3be:	4798      	blx	r3
    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
  40a3c0:	9505      	str	r5, [sp, #20]
  40a3c2:	1c6f      	adds	r7, r5, #1
  40a3c4:	eb07 0047 	add.w	r0, r7, r7, lsl #1
  40a3c8:	0040      	lsls	r0, r0, #1
  40a3ca:	4b67      	ldr	r3, [pc, #412]	; (40a568 <lv_draw_mask_radius_init+0x2c8>)
  40a3cc:	4798      	blx	r3
  40a3ce:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MALLOC(c->buf);
  40a3d0:	2800      	cmp	r0, #0
  40a3d2:	d02f      	beq.n	40a434 <lv_draw_mask_radius_init+0x194>
    c->cir_opa = c->buf;
  40a3d4:	6060      	str	r0, [r4, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
  40a3d6:	eb00 0345 	add.w	r3, r0, r5, lsl #1
  40a3da:	3302      	adds	r3, #2
  40a3dc:	60e3      	str	r3, [r4, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
  40a3de:	00ae      	lsls	r6, r5, #2
  40a3e0:	1d33      	adds	r3, r6, #4
  40a3e2:	4403      	add	r3, r0
  40a3e4:	60a3      	str	r3, [r4, #8]
    if(radius == 1) {
  40a3e6:	2d01      	cmp	r5, #1
  40a3e8:	d132      	bne.n	40a450 <lv_draw_mask_radius_init+0x1b0>
        c->cir_opa[0] =  180;
  40a3ea:	23b4      	movs	r3, #180	; 0xb4
  40a3ec:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] =  0;
  40a3ee:	68e2      	ldr	r2, [r4, #12]
  40a3f0:	2300      	movs	r3, #0
  40a3f2:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] =  1;
  40a3f4:	68e2      	ldr	r2, [r4, #12]
  40a3f6:	2101      	movs	r1, #1
  40a3f8:	8051      	strh	r1, [r2, #2]
        c->x_start_on_y[0] =  0;
  40a3fa:	68a2      	ldr	r2, [r4, #8]
  40a3fc:	8013      	strh	r3, [r2, #0]
  40a3fe:	e795      	b.n	40a32c <lv_draw_mask_radius_init+0x8c>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
  40a400:	201c      	movs	r0, #28
  40a402:	4b59      	ldr	r3, [pc, #356]	; (40a568 <lv_draw_mask_radius_init+0x2c8>)
  40a404:	4798      	blx	r3
        LV_ASSERT_MALLOC(entry);
  40a406:	4604      	mov	r4, r0
  40a408:	b130      	cbz	r0, 40a418 <lv_draw_mask_radius_init+0x178>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
  40a40a:	211c      	movs	r1, #28
  40a40c:	4b57      	ldr	r3, [pc, #348]	; (40a56c <lv_draw_mask_radius_init+0x2cc>)
  40a40e:	4798      	blx	r3
        entry->life = -1;
  40a410:	f04f 33ff 	mov.w	r3, #4294967295
  40a414:	6123      	str	r3, [r4, #16]
  40a416:	e7cd      	b.n	40a3b4 <lv_draw_mask_radius_init+0x114>
        LV_ASSERT_MALLOC(entry);
  40a418:	4b55      	ldr	r3, [pc, #340]	; (40a570 <lv_draw_mask_radius_init+0x2d0>)
  40a41a:	9302      	str	r3, [sp, #8]
  40a41c:	4b55      	ldr	r3, [pc, #340]	; (40a574 <lv_draw_mask_radius_init+0x2d4>)
  40a41e:	9301      	str	r3, [sp, #4]
  40a420:	4b55      	ldr	r3, [pc, #340]	; (40a578 <lv_draw_mask_radius_init+0x2d8>)
  40a422:	9300      	str	r3, [sp, #0]
  40a424:	4b55      	ldr	r3, [pc, #340]	; (40a57c <lv_draw_mask_radius_init+0x2dc>)
  40a426:	f44f 7200 	mov.w	r2, #512	; 0x200
  40a42a:	4955      	ldr	r1, [pc, #340]	; (40a580 <lv_draw_mask_radius_init+0x2e0>)
  40a42c:	2003      	movs	r0, #3
  40a42e:	4c55      	ldr	r4, [pc, #340]	; (40a584 <lv_draw_mask_radius_init+0x2e4>)
  40a430:	47a0      	blx	r4
  40a432:	e7fe      	b.n	40a432 <lv_draw_mask_radius_init+0x192>
    LV_ASSERT_MALLOC(c->buf);
  40a434:	4b4e      	ldr	r3, [pc, #312]	; (40a570 <lv_draw_mask_radius_init+0x2d0>)
  40a436:	9302      	str	r3, [sp, #8]
  40a438:	4b53      	ldr	r3, [pc, #332]	; (40a588 <lv_draw_mask_radius_init+0x2e8>)
  40a43a:	9301      	str	r3, [sp, #4]
  40a43c:	4b4e      	ldr	r3, [pc, #312]	; (40a578 <lv_draw_mask_radius_init+0x2d8>)
  40a43e:	9300      	str	r3, [sp, #0]
  40a440:	4b52      	ldr	r3, [pc, #328]	; (40a58c <lv_draw_mask_radius_init+0x2ec>)
  40a442:	f240 42f7 	movw	r2, #1271	; 0x4f7
  40a446:	494e      	ldr	r1, [pc, #312]	; (40a580 <lv_draw_mask_radius_init+0x2e0>)
  40a448:	2003      	movs	r0, #3
  40a44a:	4c4e      	ldr	r4, [pc, #312]	; (40a584 <lv_draw_mask_radius_init+0x2e4>)
  40a44c:	47a0      	blx	r4
  40a44e:	e7fe      	b.n	40a44e <lv_draw_mask_radius_init+0x1ae>
    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
  40a450:	00f8      	lsls	r0, r7, #3
  40a452:	4b4f      	ldr	r3, [pc, #316]	; (40a590 <lv_draw_mask_radius_init+0x2f0>)
  40a454:	4798      	blx	r3
  40a456:	4686      	mov	lr, r0
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
  40a458:	3604      	adds	r6, #4
  40a45a:	eb00 0c06 	add.w	ip, r0, r6
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
  40a45e:	00ab      	lsls	r3, r5, #2
  40a460:	b29b      	uxth	r3, r3
  40a462:	b21a      	sxth	r2, r3
    *tmp = 1 - radius;
  40a464:	f1c3 0301 	rsb	r3, r3, #1
  40a468:	b21b      	sxth	r3, r3
    x_int[0] = cp.x >> 2;
  40a46a:	1091      	asrs	r1, r2, #2
  40a46c:	9106      	str	r1, [sp, #24]
    x_fract[0] = 0;
  40a46e:	2100      	movs	r1, #0
  40a470:	910a      	str	r1, [sp, #40]	; 0x28
    while(circ_cont(&cp)) {
  40a472:	428a      	cmp	r2, r1
  40a474:	db08      	blt.n	40a488 <lv_draw_mask_radius_init+0x1e8>
  40a476:	2600      	movs	r6, #0
  40a478:	46b2      	mov	sl, r6
  40a47a:	4635      	mov	r5, r6
            x_int[i] = cp.x >> 2;
  40a47c:	f10d 0818 	add.w	r8, sp, #24
            x_fract[i] = cp.x & 0x3;
  40a480:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
  40a484:	4681      	mov	r9, r0
  40a486:	e024      	b.n	40a4d2 <lv_draw_mask_radius_init+0x232>
    lv_coord_t cir_size = 0;
  40a488:	460d      	mov	r5, r1
  40a48a:	e0de      	b.n	40a64a <lv_draw_mask_radius_init+0x3aa>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
  40a48c:	1987      	adds	r7, r0, r6
  40a48e:	3303      	adds	r3, #3
  40a490:	eb03 0347 	add.w	r3, r3, r7, lsl #1
  40a494:	b21b      	sxth	r3, r3
  40a496:	e027      	b.n	40a4e8 <lv_draw_mask_radius_init+0x248>
        if(i != 4) break;
  40a498:	2804      	cmp	r0, #4
  40a49a:	d033      	beq.n	40a504 <lv_draw_mask_radius_init+0x264>
  40a49c:	46ce      	mov	lr, r9
  40a49e:	e0d4      	b.n	40a64a <lv_draw_mask_radius_init+0x3aa>
            cir_x[cir_size] = x_int[0];
  40a4a0:	f829 0015 	strh.w	r0, [r9, r5, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
  40a4a4:	f82c a015 	strh.w	sl, [ip, r5, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
  40a4a8:	6867      	ldr	r7, [r4, #4]
  40a4aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40a4ac:	980a      	ldr	r0, [sp, #40]	; 0x28
  40a4ae:	4430      	add	r0, r6
  40a4b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40a4b2:	4406      	add	r6, r0
  40a4b4:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a4b6:	4430      	add	r0, r6
  40a4b8:	5578      	strb	r0, [r7, r5]
            c->cir_opa[cir_size] *= 16;
  40a4ba:	6866      	ldr	r6, [r4, #4]
  40a4bc:	5d70      	ldrb	r0, [r6, r5]
  40a4be:	0100      	lsls	r0, r0, #4
  40a4c0:	5570      	strb	r0, [r6, r5]
            cir_size++;
  40a4c2:	3501      	adds	r5, #1
  40a4c4:	b22d      	sxth	r5, r5
        y_8th_cnt++;
  40a4c6:	f10a 0a01 	add.w	sl, sl, #1
  40a4ca:	460e      	mov	r6, r1
    while(circ_cont(&cp)) {
  40a4cc:	428a      	cmp	r2, r1
  40a4ce:	f2c0 80bb 	blt.w	40a648 <lv_draw_mask_radius_init+0x3a8>
  40a4d2:	4631      	mov	r1, r6
  40a4d4:	2000      	movs	r0, #0
    if(*tmp <= 0) {
  40a4d6:	2b00      	cmp	r3, #0
  40a4d8:	ddd8      	ble.n	40a48c <lv_draw_mask_radius_init+0x1ec>
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
  40a4da:	1a8f      	subs	r7, r1, r2
  40a4dc:	3305      	adds	r3, #5
  40a4de:	eb03 0347 	add.w	r3, r3, r7, lsl #1
  40a4e2:	b21b      	sxth	r3, r3
        c->x--;
  40a4e4:	3a01      	subs	r2, #1
  40a4e6:	b212      	sxth	r2, r2
  40a4e8:	3101      	adds	r1, #1
  40a4ea:	b209      	sxth	r1, r1
            if(circ_cont(&cp) == false) break;
  40a4ec:	428a      	cmp	r2, r1
  40a4ee:	dbd3      	blt.n	40a498 <lv_draw_mask_radius_init+0x1f8>
            x_int[i] = cp.x >> 2;
  40a4f0:	1097      	asrs	r7, r2, #2
  40a4f2:	f848 7020 	str.w	r7, [r8, r0, lsl #2]
            x_fract[i] = cp.x & 0x3;
  40a4f6:	f002 0703 	and.w	r7, r2, #3
  40a4fa:	f84b 7020 	str.w	r7, [fp, r0, lsl #2]
        for(i = 0; i < 4; i++) {
  40a4fe:	3001      	adds	r0, #1
  40a500:	2804      	cmp	r0, #4
  40a502:	d1e8      	bne.n	40a4d6 <lv_draw_mask_radius_init+0x236>
        if(x_int[0] == x_int[3]) {
  40a504:	9806      	ldr	r0, [sp, #24]
  40a506:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40a508:	42b0      	cmp	r0, r6
  40a50a:	d0c9      	beq.n	40a4a0 <lv_draw_mask_radius_init+0x200>
        else if(x_int[0] != x_int[1]) {
  40a50c:	9e07      	ldr	r6, [sp, #28]
  40a50e:	42b0      	cmp	r0, r6
  40a510:	d040      	beq.n	40a594 <lv_draw_mask_radius_init+0x2f4>
            cir_x[cir_size] = x_int[0];
  40a512:	f829 0015 	strh.w	r0, [r9, r5, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
  40a516:	fa0f fe8a 	sxth.w	lr, sl
  40a51a:	f82c e015 	strh.w	lr, [ip, r5, lsl #1]
            c->cir_opa[cir_size] = x_fract[0];
  40a51e:	6866      	ldr	r6, [r4, #4]
  40a520:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a522:	5577      	strb	r7, [r6, r5]
            c->cir_opa[cir_size] *= 16;
  40a524:	6867      	ldr	r7, [r4, #4]
  40a526:	5d7e      	ldrb	r6, [r7, r5]
  40a528:	0136      	lsls	r6, r6, #4
  40a52a:	557e      	strb	r6, [r7, r5]
            cir_size++;
  40a52c:	b2ad      	uxth	r5, r5
  40a52e:	1c6f      	adds	r7, r5, #1
            cir_x[cir_size] = x_int[0] - 1;
  40a530:	b23f      	sxth	r7, r7
  40a532:	3801      	subs	r0, #1
  40a534:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
  40a538:	f82c e017 	strh.w	lr, [ip, r7, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
  40a53c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40a53e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a540:	4430      	add	r0, r6
  40a542:	1d06      	adds	r6, r0, #4
  40a544:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a546:	4430      	add	r0, r6
  40a548:	6866      	ldr	r6, [r4, #4]
  40a54a:	55f0      	strb	r0, [r6, r7]
            c->cir_opa[cir_size] *= 16;
  40a54c:	6866      	ldr	r6, [r4, #4]
  40a54e:	5df0      	ldrb	r0, [r6, r7]
  40a550:	0100      	lsls	r0, r0, #4
  40a552:	55f0      	strb	r0, [r6, r7]
            cir_size++;
  40a554:	3502      	adds	r5, #2
  40a556:	b22d      	sxth	r5, r5
  40a558:	e7b5      	b.n	40a4c6 <lv_draw_mask_radius_init+0x226>
  40a55a:	bf00      	nop
  40a55c:	00409c9d 	.word	0x00409c9d
  40a560:	20439f74 	.word	0x20439f74
  40a564:	004110e1 	.word	0x004110e1
  40a568:	004114b5 	.word	0x004114b5
  40a56c:	004116ed 	.word	0x004116ed
  40a570:	0041c064 	.word	0x0041c064
  40a574:	0041c83c 	.word	0x0041c83c
  40a578:	0041c098 	.word	0x0041c098
  40a57c:	0041c734 	.word	0x0041c734
  40a580:	0041c760 	.word	0x0041c760
  40a584:	00410edd 	.word	0x00410edd
  40a588:	0041c84c 	.word	0x0041c84c
  40a58c:	0041c750 	.word	0x0041c750
  40a590:	004115a9 	.word	0x004115a9
        else if(x_int[0] != x_int[2]) {
  40a594:	9e08      	ldr	r6, [sp, #32]
  40a596:	42b0      	cmp	r0, r6
  40a598:	d032      	beq.n	40a600 <lv_draw_mask_radius_init+0x360>
            cir_x[cir_size] = x_int[0];
  40a59a:	f829 0015 	strh.w	r0, [r9, r5, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
  40a59e:	fa0f f68a 	sxth.w	r6, sl
  40a5a2:	9604      	str	r6, [sp, #16]
  40a5a4:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  40a5a8:	f82c 6015 	strh.w	r6, [ip, r5, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
  40a5ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40a5ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a5b0:	eb07 0e06 	add.w	lr, r7, r6
  40a5b4:	6866      	ldr	r6, [r4, #4]
  40a5b6:	f806 e005 	strb.w	lr, [r6, r5]
            c->cir_opa[cir_size] *= 16;
  40a5ba:	f8d4 e004 	ldr.w	lr, [r4, #4]
  40a5be:	f81e 6005 	ldrb.w	r6, [lr, r5]
  40a5c2:	0136      	lsls	r6, r6, #4
  40a5c4:	f80e 6005 	strb.w	r6, [lr, r5]
            cir_size++;
  40a5c8:	b2ad      	uxth	r5, r5
  40a5ca:	f105 0e01 	add.w	lr, r5, #1
            cir_x[cir_size] = x_int[0] - 1;
  40a5ce:	fa0f fe8e 	sxth.w	lr, lr
  40a5d2:	3801      	subs	r0, #1
  40a5d4:	f829 001e 	strh.w	r0, [r9, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
  40a5d8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  40a5dc:	f82c 001e 	strh.w	r0, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
  40a5e0:	6866      	ldr	r6, [r4, #4]
  40a5e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40a5e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a5e6:	4438      	add	r0, r7
  40a5e8:	3008      	adds	r0, #8
  40a5ea:	f806 000e 	strb.w	r0, [r6, lr]
            c->cir_opa[cir_size] *= 16;
  40a5ee:	6866      	ldr	r6, [r4, #4]
  40a5f0:	f816 000e 	ldrb.w	r0, [r6, lr]
  40a5f4:	0100      	lsls	r0, r0, #4
  40a5f6:	f806 000e 	strb.w	r0, [r6, lr]
            cir_size++;
  40a5fa:	3502      	adds	r5, #2
  40a5fc:	b22d      	sxth	r5, r5
  40a5fe:	e762      	b.n	40a4c6 <lv_draw_mask_radius_init+0x226>
            cir_x[cir_size] = x_int[0];
  40a600:	f829 0015 	strh.w	r0, [r9, r5, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
  40a604:	fa0f fe8a 	sxth.w	lr, sl
  40a608:	f82c e015 	strh.w	lr, [ip, r5, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
  40a60c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40a60e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40a610:	443e      	add	r6, r7
  40a612:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a614:	443e      	add	r6, r7
  40a616:	6867      	ldr	r7, [r4, #4]
  40a618:	557e      	strb	r6, [r7, r5]
            c->cir_opa[cir_size] *= 16;
  40a61a:	6867      	ldr	r7, [r4, #4]
  40a61c:	5d7e      	ldrb	r6, [r7, r5]
  40a61e:	0136      	lsls	r6, r6, #4
  40a620:	557e      	strb	r6, [r7, r5]
            cir_size++;
  40a622:	b2ad      	uxth	r5, r5
  40a624:	1c6f      	adds	r7, r5, #1
            cir_x[cir_size] = x_int[0] - 1;
  40a626:	b23f      	sxth	r7, r7
  40a628:	3801      	subs	r0, #1
  40a62a:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
  40a62e:	f82c e017 	strh.w	lr, [ip, r7, lsl #1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
  40a632:	6866      	ldr	r6, [r4, #4]
  40a634:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a636:	300c      	adds	r0, #12
  40a638:	55f0      	strb	r0, [r6, r7]
            c->cir_opa[cir_size] *= 16;
  40a63a:	6866      	ldr	r6, [r4, #4]
  40a63c:	5df0      	ldrb	r0, [r6, r7]
  40a63e:	0100      	lsls	r0, r0, #4
  40a640:	55f0      	strb	r0, [r6, r7]
            cir_size++;
  40a642:	3502      	adds	r5, #2
  40a644:	b22d      	sxth	r5, r5
  40a646:	e73e      	b.n	40a4c6 <lv_draw_mask_radius_init+0x226>
  40a648:	46ce      	mov	lr, r9
    int32_t mid = radius * 723;
  40a64a:	f240 23d3 	movw	r3, #723	; 0x2d3
  40a64e:	9a05      	ldr	r2, [sp, #20]
  40a650:	fb03 f302 	mul.w	r3, r3, r2
    int32_t mid_int = mid >> 10;
  40a654:	129a      	asrs	r2, r3, #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
  40a656:	4629      	mov	r1, r5
  40a658:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  40a65c:	442e      	add	r6, r5
  40a65e:	0070      	lsls	r0, r6, #1
  40a660:	f93e 7016 	ldrsh.w	r7, [lr, r6, lsl #1]
  40a664:	42ba      	cmp	r2, r7
  40a666:	d03e      	beq.n	40a6e6 <lv_draw_mask_radius_init+0x446>
  40a668:	f3c3 0309 	ubfx	r3, r3, #0, #10
        if(tmp_val <= 512) {
  40a66c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a670:	dc3e      	bgt.n	40a6f0 <lv_draw_mask_radius_init+0x450>
            tmp_val = tmp_val * tmp_val * 2;
  40a672:	fb03 f303 	mul.w	r3, r3, r3
            tmp_val = tmp_val >> (10 + 6);
  40a676:	13db      	asrs	r3, r3, #15
        cir_x[cir_size] = mid_int;
  40a678:	3002      	adds	r0, #2
  40a67a:	b212      	sxth	r2, r2
  40a67c:	f82e 2000 	strh.w	r2, [lr, r0]
        cir_y[cir_size] = mid_int;
  40a680:	f82c 2000 	strh.w	r2, [ip, r0]
        c->cir_opa[cir_size] = tmp_val;
  40a684:	6862      	ldr	r2, [r4, #4]
  40a686:	5453      	strb	r3, [r2, r1]
        c->cir_opa[cir_size] *= 16;
  40a688:	6862      	ldr	r2, [r4, #4]
  40a68a:	5c53      	ldrb	r3, [r2, r1]
  40a68c:	011b      	lsls	r3, r3, #4
  40a68e:	5453      	strb	r3, [r2, r1]
        cir_size++;
  40a690:	3501      	adds	r5, #1
  40a692:	b22d      	sxth	r5, r5
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
  40a694:	1eaa      	subs	r2, r5, #2
  40a696:	d41d      	bmi.n	40a6d4 <lv_draw_mask_radius_init+0x434>
  40a698:	46a8      	mov	r8, r5
  40a69a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40a69e:	442b      	add	r3, r5
  40a6a0:	005b      	lsls	r3, r3, #1
  40a6a2:	eb0c 0603 	add.w	r6, ip, r3
  40a6a6:	eb0e 0103 	add.w	r1, lr, r3
  40a6aa:	462b      	mov	r3, r5
        cir_x[cir_size] = cir_y[i];
  40a6ac:	f936 0d02 	ldrsh.w	r0, [r6, #-2]!
  40a6b0:	f82e 0013 	strh.w	r0, [lr, r3, lsl #1]
        cir_y[cir_size] = cir_x[i];
  40a6b4:	f931 0d02 	ldrsh.w	r0, [r1, #-2]!
  40a6b8:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
  40a6bc:	6860      	ldr	r0, [r4, #4]
  40a6be:	5c87      	ldrb	r7, [r0, r2]
  40a6c0:	54c7      	strb	r7, [r0, r3]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
  40a6c2:	3a01      	subs	r2, #1
  40a6c4:	3301      	adds	r3, #1
  40a6c6:	b21b      	sxth	r3, r3
  40a6c8:	f1b2 3fff 	cmp.w	r2, #4294967295
  40a6cc:	d1ee      	bne.n	40a6ac <lv_draw_mask_radius_init+0x40c>
  40a6ce:	4445      	add	r5, r8
  40a6d0:	3d01      	subs	r5, #1
  40a6d2:	b22d      	sxth	r5, r5
    c->opa_start_on_y[0] = 0;
  40a6d4:	68e3      	ldr	r3, [r4, #12]
  40a6d6:	2200      	movs	r2, #0
  40a6d8:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
  40a6da:	462f      	mov	r7, r5
  40a6dc:	4295      	cmp	r5, r2
  40a6de:	dd39      	ble.n	40a754 <lv_draw_mask_radius_init+0x4b4>
  40a6e0:	4690      	mov	r8, r2
  40a6e2:	4611      	mov	r1, r2
  40a6e4:	e010      	b.n	40a708 <lv_draw_mask_radius_init+0x468>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
  40a6e6:	f93c 6016 	ldrsh.w	r6, [ip, r6, lsl #1]
  40a6ea:	42b2      	cmp	r2, r6
  40a6ec:	d1bc      	bne.n	40a668 <lv_draw_mask_radius_init+0x3c8>
  40a6ee:	e7d1      	b.n	40a694 <lv_draw_mask_radius_init+0x3f4>
            tmp_val = 1024 - tmp_val;
  40a6f0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
            tmp_val = tmp_val * tmp_val * 2;
  40a6f4:	fb03 f303 	mul.w	r3, r3, r3
            tmp_val = tmp_val >> (10 + 6);
  40a6f8:	13db      	asrs	r3, r3, #15
            tmp_val = 15 - tmp_val;
  40a6fa:	f1c3 030f 	rsb	r3, r3, #15
  40a6fe:	e7bb      	b.n	40a678 <lv_draw_mask_radius_init+0x3d8>
  40a700:	f108 0801 	add.w	r8, r8, #1
    while(i < cir_size) {
  40a704:	428f      	cmp	r7, r1
  40a706:	dd25      	ble.n	40a754 <lv_draw_mask_radius_init+0x4b4>
  40a708:	fa0f f688 	sxth.w	r6, r8
        c->opa_start_on_y[y] = i;
  40a70c:	0075      	lsls	r5, r6, #1
  40a70e:	68e3      	ldr	r3, [r4, #12]
  40a710:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
  40a714:	004a      	lsls	r2, r1, #1
  40a716:	eb0e 0902 	add.w	r9, lr, r2
  40a71a:	68a3      	ldr	r3, [r4, #8]
  40a71c:	f83e 0011 	ldrh.w	r0, [lr, r1, lsl #1]
  40a720:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
  40a724:	eb0c 0002 	add.w	r0, ip, r2
  40a728:	f93c 3011 	ldrsh.w	r3, [ip, r1, lsl #1]
  40a72c:	42b3      	cmp	r3, r6
  40a72e:	d1e7      	bne.n	40a700 <lv_draw_mask_radius_init+0x460>
  40a730:	428f      	cmp	r7, r1
  40a732:	dde5      	ble.n	40a700 <lv_draw_mask_radius_init+0x460>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
  40a734:	68a2      	ldr	r2, [r4, #8]
  40a736:	f939 ab02 	ldrsh.w	sl, [r9], #2
  40a73a:	5b53      	ldrh	r3, [r2, r5]
  40a73c:	4553      	cmp	r3, sl
  40a73e:	bfa8      	it	ge
  40a740:	4653      	movge	r3, sl
  40a742:	5353      	strh	r3, [r2, r5]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
  40a744:	3101      	adds	r1, #1
  40a746:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
  40a74a:	42b3      	cmp	r3, r6
  40a74c:	d1d8      	bne.n	40a700 <lv_draw_mask_radius_init+0x460>
  40a74e:	42b9      	cmp	r1, r7
  40a750:	dbf0      	blt.n	40a734 <lv_draw_mask_radius_init+0x494>
  40a752:	e7d5      	b.n	40a700 <lv_draw_mask_radius_init+0x460>
    lv_mem_buf_release(cir_x);
  40a754:	4670      	mov	r0, lr
  40a756:	4b01      	ldr	r3, [pc, #4]	; (40a75c <lv_draw_mask_radius_init+0x4bc>)
  40a758:	4798      	blx	r3
  40a75a:	e5e7      	b.n	40a32c <lv_draw_mask_radius_init+0x8c>
  40a75c:	00411105 	.word	0x00411105

0040a760 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a764:	b08b      	sub	sp, #44	; 0x2c
  40a766:	9006      	str	r0, [sp, #24]
  40a768:	9104      	str	r1, [sp, #16]
  40a76a:	9207      	str	r2, [sp, #28]
    int32_t s_left = sw >> 1;
  40a76c:	ea4f 0b61 	mov.w	fp, r1, asr #1
  40a770:	f8cd b004 	str.w	fp, [sp, #4]
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40a774:	f011 0f01 	tst.w	r1, #1
  40a778:	d15a      	bne.n	40a830 <shadow_blur_corner+0xd0>
  40a77a:	f10b 33ff 	add.w	r3, fp, #4294967295
  40a77e:	9308      	str	r3, [sp, #32]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
  40a780:	9c06      	ldr	r4, [sp, #24]
  40a782:	0067      	lsls	r7, r4, #1
  40a784:	4638      	mov	r0, r7
  40a786:	4b6b      	ldr	r3, [pc, #428]	; (40a934 <shadow_blur_corner+0x1d4>)
  40a788:	4798      	blx	r3
  40a78a:	9005      	str	r0, [sp, #20]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
  40a78c:	2c00      	cmp	r4, #0
  40a78e:	f340 80c4 	ble.w	40a91a <shadow_blur_corner+0x1ba>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40a792:	f1a7 0a02 	sub.w	sl, r7, #2
  40a796:	19c2      	adds	r2, r0, r7
  40a798:	9202      	str	r2, [sp, #8]
  40a79a:	9d07      	ldr	r5, [sp, #28]
  40a79c:	f04f 0800 	mov.w	r8, #0
        for(x = size - 1; x >= 0; x--) {
  40a7a0:	f104 39ff 	add.w	r9, r4, #4294967295
  40a7a4:	9a08      	ldr	r2, [sp, #32]
  40a7a6:	eba9 0202 	sub.w	r2, r9, r2
  40a7aa:	9203      	str	r2, [sp, #12]
  40a7ac:	4606      	mov	r6, r0
  40a7ae:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  40a7b2:	f8dd b010 	ldr.w	fp, [sp, #16]
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40a7b6:	f835 300a 	ldrh.w	r3, [r5, sl]
  40a7ba:	fb0b f303 	mul.w	r3, fp, r3
        for(x = size - 1; x >= 0; x--) {
  40a7be:	f1b9 0f00 	cmp.w	r9, #0
  40a7c2:	db1b      	blt.n	40a7fc <shadow_blur_corner+0x9c>
  40a7c4:	9a01      	ldr	r2, [sp, #4]
  40a7c6:	eb02 0109 	add.w	r1, r2, r9
  40a7ca:	9a03      	ldr	r2, [sp, #12]
  40a7cc:	3a01      	subs	r2, #1
  40a7ce:	9802      	ldr	r0, [sp, #8]
  40a7d0:	f04f 0e00 	mov.w	lr, #0
            sh_ups_blur_buf[x] = v;
  40a7d4:	f820 3d02 	strh.w	r3, [r0, #-2]!

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40a7d8:	428c      	cmp	r4, r1
  40a7da:	bfcc      	ite	gt
  40a7dc:	f835 c011 	ldrhgt.w	ip, [r5, r1, lsl #1]
  40a7e0:	46f4      	movle	ip, lr
            v -= right_val;
  40a7e2:	eba3 030c 	sub.w	r3, r3, ip

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40a7e6:	2a00      	cmp	r2, #0
  40a7e8:	bfb4      	ite	lt
  40a7ea:	f8b5 c000 	ldrhlt.w	ip, [r5]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40a7ee:	f835 c012 	ldrhge.w	ip, [r5, r2, lsl #1]
            v += left_val;
  40a7f2:	4463      	add	r3, ip
  40a7f4:	3901      	subs	r1, #1
  40a7f6:	3a01      	subs	r2, #1
        for(x = size - 1; x >= 0; x--) {
  40a7f8:	42b0      	cmp	r0, r6
  40a7fa:	d1eb      	bne.n	40a7d4 <shadow_blur_corner+0x74>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40a7fc:	463a      	mov	r2, r7
  40a7fe:	4631      	mov	r1, r6
  40a800:	4628      	mov	r0, r5
  40a802:	4b4d      	ldr	r3, [pc, #308]	; (40a938 <shadow_blur_corner+0x1d8>)
  40a804:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40a806:	443d      	add	r5, r7
    for(y = 0; y < size; y++) {
  40a808:	f108 0801 	add.w	r8, r8, #1
  40a80c:	45a0      	cmp	r8, r4
  40a80e:	d1d2      	bne.n	40a7b6 <shadow_blur_corner+0x56>
  40a810:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
    uint32_t max_v_div = max_v / sw;
  40a814:	f44f 567f 	mov.w	r6, #16320	; 0x3fc0
  40a818:	9b04      	ldr	r3, [sp, #16]
  40a81a:	fbb6 f6f3 	udiv	r6, r6, r3
    for(i = 0; i < (uint32_t)size * size; i++) {
  40a81e:	9b06      	ldr	r3, [sp, #24]
  40a820:	fb03 f503 	mul.w	r5, r3, r3
  40a824:	b1cd      	cbz	r5, 40a85a <shadow_blur_corner+0xfa>
  40a826:	9b07      	ldr	r3, [sp, #28]
  40a828:	2100      	movs	r1, #0
  40a82a:	f8dd e010 	ldr.w	lr, [sp, #16]
  40a82e:	e007      	b.n	40a840 <shadow_blur_corner+0xe0>
    int32_t s_left = sw >> 1;
  40a830:	f8cd b020 	str.w	fp, [sp, #32]
  40a834:	e7a4      	b.n	40a780 <shadow_blur_corner+0x20>
        if(sh_ups_buf[i] == 0) continue;
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
  40a836:	801e      	strh	r6, [r3, #0]
    for(i = 0; i < (uint32_t)size * size; i++) {
  40a838:	3101      	adds	r1, #1
  40a83a:	3302      	adds	r3, #2
  40a83c:	42a9      	cmp	r1, r5
  40a83e:	d209      	bcs.n	40a854 <shadow_blur_corner+0xf4>
        if(sh_ups_buf[i] == 0) continue;
  40a840:	881a      	ldrh	r2, [r3, #0]
  40a842:	2a00      	cmp	r2, #0
  40a844:	d0f8      	beq.n	40a838 <shadow_blur_corner+0xd8>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
  40a846:	f5b2 5f7f 	cmp.w	r2, #16320	; 0x3fc0
  40a84a:	d0f4      	beq.n	40a836 <shadow_blur_corner+0xd6>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  40a84c:	fb92 f2fe 	sdiv	r2, r2, lr
  40a850:	801a      	strh	r2, [r3, #0]
  40a852:	e7f1      	b.n	40a838 <shadow_blur_corner+0xd8>
    }

    for(x = 0; x < size; x++) {
  40a854:	9b06      	ldr	r3, [sp, #24]
  40a856:	2b00      	cmp	r3, #0
  40a858:	dd59      	ble.n	40a90e <shadow_blur_corner+0x1ae>
  40a85a:	9e07      	ldr	r6, [sp, #28]
  40a85c:	9601      	str	r6, [sp, #4]
  40a85e:	9908      	ldr	r1, [sp, #32]
  40a860:	fb01 7207 	mla	r2, r1, r7, r7
  40a864:	ea6f 030b 	mvn.w	r3, fp
  40a868:	1a5b      	subs	r3, r3, r1
  40a86a:	9d06      	ldr	r5, [sp, #24]
  40a86c:	fb05 f303 	mul.w	r3, r5, r3
  40a870:	9306      	str	r3, [sp, #24]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40a872:	1e6b      	subs	r3, r5, #1
  40a874:	fb05 f303 	mul.w	r3, r5, r3
  40a878:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  40a87c:	9307      	str	r3, [sp, #28]
  40a87e:	f04f 0a00 	mov.w	sl, #0
  40a882:	1e93      	subs	r3, r2, #2
  40a884:	9308      	str	r3, [sp, #32]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40a886:	f101 0901 	add.w	r9, r1, #1
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40a88a:	9b01      	ldr	r3, [sp, #4]
  40a88c:	461e      	mov	r6, r3
  40a88e:	3302      	adds	r3, #2
  40a890:	461a      	mov	r2, r3
  40a892:	9301      	str	r3, [sp, #4]
        int32_t v = sh_ups_tmp_buf[0] * sw;
  40a894:	8833      	ldrh	r3, [r6, #0]
  40a896:	9904      	ldr	r1, [sp, #16]
  40a898:	fb01 f303 	mul.w	r3, r1, r3
  40a89c:	9908      	ldr	r1, [sp, #32]
  40a89e:	188d      	adds	r5, r1, r2
  40a8a0:	9a05      	ldr	r2, [sp, #20]
  40a8a2:	f1a2 0c02 	sub.w	ip, r2, #2
  40a8a6:	46e0      	mov	r8, ip
  40a8a8:	46b6      	mov	lr, r6
  40a8aa:	2200      	movs	r2, #0
  40a8ac:	f8cd c008 	str.w	ip, [sp, #8]
  40a8b0:	9603      	str	r6, [sp, #12]
  40a8b2:	9e06      	ldr	r6, [sp, #24]
  40a8b4:	f8dd c01c 	ldr.w	ip, [sp, #28]
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40a8b8:	2b00      	cmp	r3, #0
  40a8ba:	bfac      	ite	ge
  40a8bc:	1199      	asrge	r1, r3, #6
  40a8be:	2100      	movlt	r1, #0
  40a8c0:	f828 1f02 	strh.w	r1, [r8, #2]!
  40a8c4:	4611      	mov	r1, r2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40a8c6:	eba2 000b 	sub.w	r0, r2, fp
  40a8ca:	2800      	cmp	r0, #0
  40a8cc:	bfd4      	ite	le
  40a8ce:	f8be 0000 	ldrhle.w	r0, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  40a8d2:	f835 0016 	ldrhgt.w	r0, [r5, r6, lsl #1]
            v -= top_val;
  40a8d6:	1a1b      	subs	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40a8d8:	4449      	add	r1, r9
  40a8da:	428c      	cmp	r4, r1
  40a8dc:	bfcc      	ite	gt
  40a8de:	8829      	ldrhgt	r1, [r5, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40a8e0:	f83c 101a 	ldrhle.w	r1, [ip, sl, lsl #1]
            v += bottom_val;
  40a8e4:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40a8e6:	3201      	adds	r2, #1
  40a8e8:	44be      	add	lr, r7
  40a8ea:	443d      	add	r5, r7
  40a8ec:	42a2      	cmp	r2, r4
  40a8ee:	dbe3      	blt.n	40a8b8 <shadow_blur_corner+0x158>
  40a8f0:	f8dd c008 	ldr.w	ip, [sp, #8]
  40a8f4:	9e03      	ldr	r6, [sp, #12]
  40a8f6:	2300      	movs	r3, #0
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  40a8f8:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
  40a8fc:	8032      	strh	r2, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  40a8fe:	3301      	adds	r3, #1
  40a900:	443e      	add	r6, r7
  40a902:	42a3      	cmp	r3, r4
  40a904:	dbf8      	blt.n	40a8f8 <shadow_blur_corner+0x198>
    for(x = 0; x < size; x++) {
  40a906:	f10a 0a01 	add.w	sl, sl, #1
  40a90a:	45a2      	cmp	sl, r4
  40a90c:	dbbd      	blt.n	40a88a <shadow_blur_corner+0x12a>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
  40a90e:	9805      	ldr	r0, [sp, #20]
  40a910:	4b0a      	ldr	r3, [pc, #40]	; (40a93c <shadow_blur_corner+0x1dc>)
  40a912:	4798      	blx	r3
}
  40a914:	b00b      	add	sp, #44	; 0x2c
  40a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t max_v_div = max_v / sw;
  40a91a:	f44f 567f 	mov.w	r6, #16320	; 0x3fc0
  40a91e:	9b04      	ldr	r3, [sp, #16]
  40a920:	fbb6 f6f3 	udiv	r6, r6, r3
    for(i = 0; i < (uint32_t)size * size; i++) {
  40a924:	9b06      	ldr	r3, [sp, #24]
  40a926:	fb03 f503 	mul.w	r5, r3, r3
  40a92a:	2d00      	cmp	r5, #0
  40a92c:	f47f af7b 	bne.w	40a826 <shadow_blur_corner+0xc6>
  40a930:	e7ed      	b.n	40a90e <shadow_blur_corner+0x1ae>
  40a932:	bf00      	nop
  40a934:	004115a9 	.word	0x004115a9
  40a938:	00411161 	.word	0x00411161
  40a93c:	00411105 	.word	0x00411105

0040a940 <lv_draw_rect_dsc_init>:
{
  40a940:	b510      	push	{r4, lr}
  40a942:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  40a944:	2134      	movs	r1, #52	; 0x34
  40a946:	4b1f      	ldr	r3, [pc, #124]	; (40a9c4 <lv_draw_rect_dsc_init+0x84>)
  40a948:	4798      	blx	r3
    dsc->bg_color = lv_color_white();
  40a94a:	23ff      	movs	r3, #255	; 0xff
  40a94c:	7123      	strb	r3, [r4, #4]
  40a94e:	7163      	strb	r3, [r4, #5]
    dsc->bg_grad_color = lv_color_black();
  40a950:	79a3      	ldrb	r3, [r4, #6]
  40a952:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  40a956:	f36f 03c7 	bfc	r3, #3, #5
  40a95a:	71a3      	strb	r3, [r4, #6]
  40a95c:	79e3      	ldrb	r3, [r4, #7]
  40a95e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  40a962:	f36f 1347 	bfc	r3, #5, #3
  40a966:	71e3      	strb	r3, [r4, #7]
    dsc->border_color = lv_color_black();
  40a968:	7ea3      	ldrb	r3, [r4, #26]
  40a96a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  40a96e:	f36f 03c7 	bfc	r3, #3, #5
  40a972:	76a3      	strb	r3, [r4, #26]
  40a974:	7ee3      	ldrb	r3, [r4, #27]
  40a976:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  40a97a:	f36f 1347 	bfc	r3, #5, #3
  40a97e:	76e3      	strb	r3, [r4, #27]
    dsc->shadow_color = lv_color_black();
  40a980:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40a984:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  40a988:	f36f 03c7 	bfc	r3, #3, #5
  40a98c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40a990:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
  40a994:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  40a998:	f36f 1347 	bfc	r3, #5, #3
  40a99c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    dsc->bg_grad_color_stop = 0xFF;
  40a9a0:	23ff      	movs	r3, #255	; 0xff
  40a9a2:	7263      	strb	r3, [r4, #9]
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
  40a9a4:	4a08      	ldr	r2, [pc, #32]	; (40a9c8 <lv_draw_rect_dsc_init+0x88>)
  40a9a6:	6122      	str	r2, [r4, #16]
    dsc->bg_opa = LV_OPA_COVER;
  40a9a8:	72a3      	strb	r3, [r4, #10]
    dsc->bg_img_opa = LV_OPA_COVER;
  40a9aa:	75a3      	strb	r3, [r4, #22]
    dsc->outline_opa = LV_OPA_COVER;
  40a9ac:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    dsc->border_opa = LV_OPA_COVER;
  40a9b0:	77a3      	strb	r3, [r4, #30]
    dsc->shadow_opa = LV_OPA_COVER;
  40a9b2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    dsc->border_side = LV_BORDER_SIDE_FULL;
  40a9b6:	7fe3      	ldrb	r3, [r4, #31]
  40a9b8:	220f      	movs	r2, #15
  40a9ba:	f362 0345 	bfi	r3, r2, #1, #5
  40a9be:	77e3      	strb	r3, [r4, #31]
  40a9c0:	bd10      	pop	{r4, pc}
  40a9c2:	bf00      	nop
  40a9c4:	004116ed 	.word	0x004116ed
  40a9c8:	00420284 	.word	0x00420284

0040a9cc <draw_border_generic>:
    draw_border_generic(clip, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa, dsc->blend_mode);
}

void draw_border_generic(const lv_area_t * clip_area, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  40a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a9d0:	b0a9      	sub	sp, #164	; 0xa4
  40a9d2:	9005      	str	r0, [sp, #20]
  40a9d4:	4689      	mov	r9, r1
  40a9d6:	4614      	mov	r4, r2
  40a9d8:	f9bd 60c8 	ldrsh.w	r6, [sp, #200]	; 0xc8
  40a9dc:	f89d b0d0 	ldrb.w	fp, [sp, #208]	; 0xd0
  40a9e0:	f89d a0d4 	ldrb.w	sl, [sp, #212]	; 0xd4
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    if(rout == 0 || rin == 0) {
  40a9e4:	b163      	cbz	r3, 40aa00 <draw_border_generic+0x34>
  40a9e6:	461d      	mov	r5, r3
  40a9e8:	b156      	cbz	r6, 40aa00 <draw_border_generic+0x34>

#if LV_DRAW_COMPLEX
    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, clip_area)) return;
  40a9ea:	9a05      	ldr	r2, [sp, #20]
  40a9ec:	a826      	add	r0, sp, #152	; 0x98
  40a9ee:	4b91      	ldr	r3, [pc, #580]	; (40ac34 <draw_border_generic+0x268>)
  40a9f0:	4798      	blx	r3
  40a9f2:	9008      	str	r0, [sp, #32]
  40a9f4:	2800      	cmp	r0, #0
  40a9f6:	f040 8089 	bne.w	40ab0c <draw_border_generic+0x140>
    lv_mem_buf_release(mask_buf);

#else /*LV_DRAW_COMPLEX*/
    LV_UNUSED(blend_mode);
#endif /*LV_DRAW_COMPLEX*/
}
  40a9fa:	b029      	add	sp, #164	; 0xa4
  40a9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static void draw_border_simple(const lv_area_t * clip, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
  40aa00:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
  40aa04:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
  40aa08:	f9b9 a006 	ldrsh.w	sl, [r9, #6]
  40aa0c:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
  40aa10:	f9b9 3000 	ldrsh.w	r3, [r9]
  40aa14:	4619      	mov	r1, r3
  40aa16:	9304      	str	r3, [sp, #16]
  40aa18:	f9b4 3000 	ldrsh.w	r3, [r4]
  40aa1c:	9306      	str	r3, [sp, #24]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
  40aa1e:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
  40aa22:	9307      	str	r3, [sp, #28]
  40aa24:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40aa28:	9208      	str	r2, [sp, #32]

    lv_area_t a;
    /*Top*/
    a.x1 = outer_area->x1;
  40aa2a:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    a.x2 = outer_area->x2;
  40aa2e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    a.y1 = outer_area->y1;
  40aa32:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
    a.y2 = inner_area->y1 - 1;
  40aa36:	1e73      	subs	r3, r6, #1
  40aa38:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(top_side) {
  40aa3c:	42b5      	cmp	r5, r6
  40aa3e:	dd3e      	ble.n	40aabe <draw_border_generic+0xf2>
        _lv_blend_fill(clip, &a, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, LV_BLEND_MODE_NORMAL);
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
  40aa40:	88e3      	ldrh	r3, [r4, #6]
  40aa42:	3301      	adds	r3, #1
  40aa44:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    a.y2 = outer_area->y2;
  40aa48:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  40aa4c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(bottom_side) {
  40aa50:	45c2      	cmp	sl, r8
  40aa52:	da41      	bge.n	40aad8 <draw_border_generic+0x10c>
        _lv_blend_fill(clip, &a, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, LV_BLEND_MODE_NORMAL);
    }

    /*Left*/
    a.x1 = outer_area->x1;
  40aa54:	f8b9 3000 	ldrh.w	r3, [r9]
  40aa58:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x2 = inner_area->x1 - 1;
  40aa5c:	8823      	ldrh	r3, [r4, #0]
  40aa5e:	3b01      	subs	r3, #1
  40aa60:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
  40aa64:	42b5      	cmp	r5, r6
  40aa66:	bfd4      	ite	le
  40aa68:	f9b4 3002 	ldrshle.w	r3, [r4, #2]
  40aa6c:	f9b9 3002 	ldrshgt.w	r3, [r9, #2]
  40aa70:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
  40aa74:	45c2      	cmp	sl, r8
  40aa76:	bfac      	ite	ge
  40aa78:	f9b4 3006 	ldrshge.w	r3, [r4, #6]
  40aa7c:	f9b9 3006 	ldrshlt.w	r3, [r9, #6]
  40aa80:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(left_side) {
  40aa84:	9b06      	ldr	r3, [sp, #24]
  40aa86:	9a04      	ldr	r2, [sp, #16]
  40aa88:	429a      	cmp	r2, r3
  40aa8a:	dd32      	ble.n	40aaf2 <draw_border_generic+0x126>
        _lv_blend_fill(clip, &a, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, LV_BLEND_MODE_NORMAL);
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
  40aa8c:	88a3      	ldrh	r3, [r4, #4]
  40aa8e:	3301      	adds	r3, #1
  40aa90:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x2 = outer_area->x2;
  40aa94:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  40aa98:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    if(right_side) {
  40aa9c:	9b07      	ldr	r3, [sp, #28]
  40aa9e:	9a08      	ldr	r2, [sp, #32]
  40aaa0:	4293      	cmp	r3, r2
  40aaa2:	dbaa      	blt.n	40a9fa <draw_border_generic+0x2e>
        _lv_blend_fill(clip, &a, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, LV_BLEND_MODE_NORMAL);
  40aaa4:	2300      	movs	r3, #0
  40aaa6:	9302      	str	r3, [sp, #8]
  40aaa8:	f8cd b004 	str.w	fp, [sp, #4]
  40aaac:	2201      	movs	r2, #1
  40aaae:	9200      	str	r2, [sp, #0]
  40aab0:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40aab4:	a916      	add	r1, sp, #88	; 0x58
  40aab6:	9805      	ldr	r0, [sp, #20]
  40aab8:	4c5f      	ldr	r4, [pc, #380]	; (40ac38 <draw_border_generic+0x26c>)
  40aaba:	47a0      	blx	r4
  40aabc:	e79d      	b.n	40a9fa <draw_border_generic+0x2e>
        _lv_blend_fill(clip, &a, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, LV_BLEND_MODE_NORMAL);
  40aabe:	2300      	movs	r3, #0
  40aac0:	9302      	str	r3, [sp, #8]
  40aac2:	f8cd b004 	str.w	fp, [sp, #4]
  40aac6:	2201      	movs	r2, #1
  40aac8:	9200      	str	r2, [sp, #0]
  40aaca:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40aace:	a916      	add	r1, sp, #88	; 0x58
  40aad0:	9805      	ldr	r0, [sp, #20]
  40aad2:	4f59      	ldr	r7, [pc, #356]	; (40ac38 <draw_border_generic+0x26c>)
  40aad4:	47b8      	blx	r7
  40aad6:	e7b3      	b.n	40aa40 <draw_border_generic+0x74>
        _lv_blend_fill(clip, &a, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, LV_BLEND_MODE_NORMAL);
  40aad8:	2300      	movs	r3, #0
  40aada:	9302      	str	r3, [sp, #8]
  40aadc:	f8cd b004 	str.w	fp, [sp, #4]
  40aae0:	2201      	movs	r2, #1
  40aae2:	9200      	str	r2, [sp, #0]
  40aae4:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40aae8:	a916      	add	r1, sp, #88	; 0x58
  40aaea:	9805      	ldr	r0, [sp, #20]
  40aaec:	4f52      	ldr	r7, [pc, #328]	; (40ac38 <draw_border_generic+0x26c>)
  40aaee:	47b8      	blx	r7
  40aaf0:	e7b0      	b.n	40aa54 <draw_border_generic+0x88>
        _lv_blend_fill(clip, &a, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, LV_BLEND_MODE_NORMAL);
  40aaf2:	2300      	movs	r3, #0
  40aaf4:	9302      	str	r3, [sp, #8]
  40aaf6:	f8cd b004 	str.w	fp, [sp, #4]
  40aafa:	2201      	movs	r2, #1
  40aafc:	9200      	str	r2, [sp, #0]
  40aafe:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40ab02:	a916      	add	r1, sp, #88	; 0x58
  40ab04:	9805      	ldr	r0, [sp, #20]
  40ab06:	4d4c      	ldr	r5, [pc, #304]	; (40ac38 <draw_border_generic+0x26c>)
  40ab08:	47a8      	blx	r5
  40ab0a:	e7bf      	b.n	40aa8c <draw_border_generic+0xc0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ab0c:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
  40ab10:	3301      	adds	r3, #1
  40ab12:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
  40ab16:	1a9b      	subs	r3, r3, r2
  40ab18:	b21b      	sxth	r3, r3
  40ab1a:	461f      	mov	r7, r3
  40ab1c:	9307      	str	r3, [sp, #28]
    bool mask_any = lv_draw_mask_is_any(outer_area);
  40ab1e:	4648      	mov	r0, r9
  40ab20:	4b46      	ldr	r3, [pc, #280]	; (40ac3c <draw_border_generic+0x270>)
  40ab22:	4798      	blx	r3
  40ab24:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
  40ab26:	9706      	str	r7, [sp, #24]
  40ab28:	4638      	mov	r0, r7
  40ab2a:	4b45      	ldr	r3, [pc, #276]	; (40ac40 <draw_border_generic+0x274>)
  40ab2c:	4798      	blx	r3
  40ab2e:	9004      	str	r0, [sp, #16]
    if(rout > 0) {
  40ab30:	2d00      	cmp	r5, #0
  40ab32:	dd42      	ble.n	40abba <draw_border_generic+0x1ee>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
  40ab34:	2300      	movs	r3, #0
  40ab36:	462a      	mov	r2, r5
  40ab38:	4649      	mov	r1, r9
  40ab3a:	a820      	add	r0, sp, #128	; 0x80
  40ab3c:	4f41      	ldr	r7, [pc, #260]	; (40ac44 <draw_border_generic+0x278>)
  40ab3e:	47b8      	blx	r7
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40ab40:	2100      	movs	r1, #0
  40ab42:	a820      	add	r0, sp, #128	; 0x80
  40ab44:	4b40      	ldr	r3, [pc, #256]	; (40ac48 <draw_border_generic+0x27c>)
  40ab46:	4798      	blx	r3
  40ab48:	900c      	str	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
  40ab4a:	2301      	movs	r3, #1
  40ab4c:	4632      	mov	r2, r6
  40ab4e:	4621      	mov	r1, r4
  40ab50:	a81a      	add	r0, sp, #104	; 0x68
  40ab52:	4e3c      	ldr	r6, [pc, #240]	; (40ac44 <draw_border_generic+0x278>)
  40ab54:	47b0      	blx	r6
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  40ab56:	2100      	movs	r1, #0
  40ab58:	a81a      	add	r0, sp, #104	; 0x68
  40ab5a:	4b3b      	ldr	r3, [pc, #236]	; (40ac48 <draw_border_generic+0x27c>)
  40ab5c:	4798      	blx	r3
  40ab5e:	900d      	str	r0, [sp, #52]	; 0x34
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
  40ab60:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
  40ab64:	f9b9 6002 	ldrsh.w	r6, [r9, #2]
  40ab68:	1973      	adds	r3, r6, r5
  40ab6a:	42bb      	cmp	r3, r7
  40ab6c:	bfb8      	it	lt
  40ab6e:	463b      	movlt	r3, r7
  40ab70:	b21b      	sxth	r3, r3
  40ab72:	930a      	str	r3, [sp, #40]	; 0x28
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
  40ab74:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
  40ab78:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40ab7c:	461a      	mov	r2, r3
  40ab7e:	469c      	mov	ip, r3
  40ab80:	1b5b      	subs	r3, r3, r5
  40ab82:	4543      	cmp	r3, r8
  40ab84:	bfa8      	it	ge
  40ab86:	4643      	movge	r3, r8
  40ab88:	b21b      	sxth	r3, r3
  40ab8a:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask_any) {
  40ab8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ab8e:	2b00      	cmp	r3, #0
  40ab90:	d066      	beq.n	40ac60 <draw_border_generic+0x294>
        blend_area.x1 = draw_area.x1;
  40ab92:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
  40ab96:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = draw_area.x2;
  40ab9a:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
  40ab9e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        for(h = draw_area.y1; h < draw_area.y2; h++) {
  40aba2:	f9bd 409a 	ldrsh.w	r4, [sp, #154]	; 0x9a
  40aba6:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40abaa:	429c      	cmp	r4, r3
  40abac:	da34      	bge.n	40ac18 <draw_border_generic+0x24c>
            _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40abae:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40ac38 <draw_border_generic+0x26c>
  40abb2:	f8cd a020 	str.w	sl, [sp, #32]
  40abb6:	4692      	mov	sl, r2
  40abb8:	e028      	b.n	40ac0c <draw_border_generic+0x240>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  40abba:	f04f 33ff 	mov.w	r3, #4294967295
  40abbe:	930c      	str	r3, [sp, #48]	; 0x30
  40abc0:	e7c3      	b.n	40ab4a <draw_border_generic+0x17e>
            if(!bottom_side && h > core_area.y2) break;
  40abc2:	45d0      	cmp	r8, sl
  40abc4:	dd02      	ble.n	40abcc <draw_border_generic+0x200>
  40abc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40abc8:	42a3      	cmp	r3, r4
  40abca:	db25      	blt.n	40ac18 <draw_border_generic+0x24c>
            blend_area.y1 = h;
  40abcc:	b225      	sxth	r5, r4
  40abce:	f8ad 5062 	strh.w	r5, [sp, #98]	; 0x62
            blend_area.y2 = h;
  40abd2:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
            lv_memset_ff(mask_buf, draw_area_w);
  40abd6:	9906      	ldr	r1, [sp, #24]
  40abd8:	9804      	ldr	r0, [sp, #16]
  40abda:	4b1c      	ldr	r3, [pc, #112]	; (40ac4c <draw_border_generic+0x280>)
  40abdc:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, draw_area.x1, h, draw_area_w);
  40abde:	9b07      	ldr	r3, [sp, #28]
  40abe0:	462a      	mov	r2, r5
  40abe2:	f9bd 1098 	ldrsh.w	r1, [sp, #152]	; 0x98
  40abe6:	9804      	ldr	r0, [sp, #16]
  40abe8:	4d19      	ldr	r5, [pc, #100]	; (40ac50 <draw_border_generic+0x284>)
  40abea:	47a8      	blx	r5
            _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40abec:	9a08      	ldr	r2, [sp, #32]
  40abee:	9202      	str	r2, [sp, #8]
  40abf0:	f8cd b004 	str.w	fp, [sp, #4]
  40abf4:	9000      	str	r0, [sp, #0]
  40abf6:	9b04      	ldr	r3, [sp, #16]
  40abf8:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40abfc:	a918      	add	r1, sp, #96	; 0x60
  40abfe:	9805      	ldr	r0, [sp, #20]
  40ac00:	47c8      	blx	r9
        for(h = draw_area.y1; h < draw_area.y2; h++) {
  40ac02:	3401      	adds	r4, #1
  40ac04:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40ac08:	42a3      	cmp	r3, r4
  40ac0a:	dd05      	ble.n	40ac18 <draw_border_generic+0x24c>
            if(!top_side && h < core_area.y1) continue;
  40ac0c:	42b7      	cmp	r7, r6
  40ac0e:	dad8      	bge.n	40abc2 <draw_border_generic+0x1f6>
  40ac10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ac12:	42a3      	cmp	r3, r4
  40ac14:	dcf5      	bgt.n	40ac02 <draw_border_generic+0x236>
  40ac16:	e7d4      	b.n	40abc2 <draw_border_generic+0x1f6>
        lv_draw_mask_free_param(&mask_rin_param);
  40ac18:	a81a      	add	r0, sp, #104	; 0x68
  40ac1a:	4d0e      	ldr	r5, [pc, #56]	; (40ac54 <draw_border_generic+0x288>)
  40ac1c:	47a8      	blx	r5
        lv_draw_mask_remove_id(mask_rin_id);
  40ac1e:	980d      	ldr	r0, [sp, #52]	; 0x34
  40ac20:	4c0d      	ldr	r4, [pc, #52]	; (40ac58 <draw_border_generic+0x28c>)
  40ac22:	47a0      	blx	r4
        lv_draw_mask_free_param(&mask_rout_param);
  40ac24:	a820      	add	r0, sp, #128	; 0x80
  40ac26:	47a8      	blx	r5
        lv_draw_mask_remove_id(mask_rout_id);
  40ac28:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ac2a:	47a0      	blx	r4
        lv_mem_buf_release(mask_buf);
  40ac2c:	9804      	ldr	r0, [sp, #16]
  40ac2e:	4b0b      	ldr	r3, [pc, #44]	; (40ac5c <draw_border_generic+0x290>)
  40ac30:	4798      	blx	r3
        return;
  40ac32:	e6e2      	b.n	40a9fa <draw_border_generic+0x2e>
  40ac34:	004107cd 	.word	0x004107cd
  40ac38:	00406181 	.word	0x00406181
  40ac3c:	0040a0cd 	.word	0x0040a0cd
  40ac40:	004115a9 	.word	0x004115a9
  40ac44:	0040a2a1 	.word	0x0040a2a1
  40ac48:	00409f91 	.word	0x00409f91
  40ac4c:	00411791 	.word	0x00411791
  40ac50:	00409fed 	.word	0x00409fed
  40ac54:	0040a09d 	.word	0x0040a09d
  40ac58:	0040a03d 	.word	0x0040a03d
  40ac5c:	00411105 	.word	0x00411105
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
  40ac60:	f9b4 3000 	ldrsh.w	r3, [r4]
  40ac64:	4618      	mov	r0, r3
  40ac66:	9312      	str	r3, [sp, #72]	; 0x48
  40ac68:	f9b9 2000 	ldrsh.w	r2, [r9]
  40ac6c:	920b      	str	r2, [sp, #44]	; 0x2c
  40ac6e:	1951      	adds	r1, r2, r5
  40ac70:	4299      	cmp	r1, r3
  40ac72:	bfb8      	it	lt
  40ac74:	4619      	movlt	r1, r3
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
  40ac76:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40ac7a:	461a      	mov	r2, r3
  40ac7c:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
  40ac80:	930f      	str	r3, [sp, #60]	; 0x3c
  40ac82:	1b5b      	subs	r3, r3, r5
  40ac84:	920e      	str	r2, [sp, #56]	; 0x38
  40ac86:	4696      	mov	lr, r2
  40ac88:	4293      	cmp	r3, r2
  40ac8a:	bfa8      	it	ge
  40ac8c:	4613      	movge	r3, r2
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
  40ac8e:	42b7      	cmp	r7, r6
  40ac90:	bfb4      	ite	lt
  40ac92:	f04f 0e00 	movlt.w	lr, #0
  40ac96:	f04f 0e01 	movge.w	lr, #1
  40ac9a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
  40ac9e:	46e6      	mov	lr, ip
  40aca0:	45e0      	cmp	r8, ip
  40aca2:	bfcc      	ite	gt
  40aca4:	f04f 0e00 	movgt.w	lr, #0
  40aca8:	f04f 0e01 	movle.w	lr, #1
  40acac:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
  40acb0:	4602      	mov	r2, r0
  40acb2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40acb4:	4282      	cmp	r2, r0
  40acb6:	bfb4      	ite	lt
  40acb8:	f04f 0800 	movlt.w	r8, #0
  40acbc:	f04f 0801 	movge.w	r8, #1
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
  40acc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40acc2:	4696      	mov	lr, r2
  40acc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40acc6:	4282      	cmp	r2, r0
  40acc8:	bfcc      	ite	gt
  40acca:	f04f 0e00 	movgt.w	lr, #0
  40acce:	f04f 0e01 	movle.w	lr, #1
  40acd2:	4672      	mov	r2, lr
  40acd4:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
    if(left_side && right_side && top_side && bottom_side &&
  40acd8:	f1b8 0f00 	cmp.w	r8, #0
  40acdc:	d010      	beq.n	40ad00 <draw_border_generic+0x334>
  40acde:	b17a      	cbz	r2, 40ad00 <draw_border_generic+0x334>
  40ace0:	1c5a      	adds	r2, r3, #1
  40ace2:	1a52      	subs	r2, r2, r1
  40ace4:	b212      	sxth	r2, r2
  40ace6:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ace8:	4686      	mov	lr, r0
  40acea:	9811      	ldr	r0, [sp, #68]	; 0x44
  40acec:	ea0e 0000 	and.w	r0, lr, r0
  40acf0:	2a31      	cmp	r2, #49	; 0x31
  40acf2:	bfcc      	ite	gt
  40acf4:	2200      	movgt	r2, #0
  40acf6:	f000 0201 	andle.w	r2, r0, #1
  40acfa:	f082 0201 	eor.w	r2, r2, #1
  40acfe:	9208      	str	r2, [sp, #32]
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
  40ad00:	b20a      	sxth	r2, r1
  40ad02:	9213      	str	r2, [sp, #76]	; 0x4c
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
  40ad04:	b21b      	sxth	r3, r3
  40ad06:	9314      	str	r3, [sp, #80]	; 0x50
    if(top_side && split_hor) {
  40ad08:	9908      	ldr	r1, [sp, #32]
  40ad0a:	b109      	cbz	r1, 40ad10 <draw_border_generic+0x344>
  40ad0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ad0e:	bb61      	cbnz	r1, 40ad6a <draw_border_generic+0x39e>
    if(bottom_side && split_hor) {
  40ad10:	9b08      	ldr	r3, [sp, #32]
  40ad12:	b113      	cbz	r3, 40ad1a <draw_border_generic+0x34e>
  40ad14:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ad16:	2b00      	cmp	r3, #0
  40ad18:	d13e      	bne.n	40ad98 <draw_border_generic+0x3cc>
    if(left_side) {
  40ad1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ad1e:	4293      	cmp	r3, r2
  40ad20:	da58      	bge.n	40add4 <draw_border_generic+0x408>
    if(right_side) {
  40ad22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ad24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ad26:	4293      	cmp	r3, r2
  40ad28:	dd72      	ble.n	40ae10 <draw_border_generic+0x444>
    if(!split_hor) {
  40ad2a:	9b08      	ldr	r3, [sp, #32]
  40ad2c:	2b00      	cmp	r3, #0
  40ad2e:	f040 80d8 	bne.w	40aee2 <draw_border_generic+0x516>
        blend_area.x1 = draw_area.x1;
  40ad32:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
  40ad36:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = draw_area.x2;
  40ad3a:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
  40ad3e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        lv_coord_t max_h = LV_MAX(rout, outer_area->y1 - inner_area->y1);
  40ad42:	f9b9 7002 	ldrsh.w	r7, [r9, #2]
  40ad46:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  40ad4a:	1aff      	subs	r7, r7, r3
  40ad4c:	42bd      	cmp	r5, r7
  40ad4e:	bfb8      	it	lt
  40ad50:	463d      	movlt	r5, r7
  40ad52:	b22f      	sxth	r7, r5
        for(h = 0; h < max_h; h++) {
  40ad54:	2f00      	cmp	r7, #0
  40ad56:	f340 8130 	ble.w	40afba <draw_border_generic+0x5ee>
  40ad5a:	3701      	adds	r7, #1
  40ad5c:	2601      	movs	r6, #1
            mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, draw_area_w);
  40ad5e:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 40b044 <draw_border_generic+0x678>
                _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40ad62:	465b      	mov	r3, fp
  40ad64:	46bb      	mov	fp, r7
  40ad66:	461f      	mov	r7, r3
  40ad68:	e087      	b.n	40ae7a <draw_border_generic+0x4ae>
        blend_area.x1 = core_area.x1;
  40ad6a:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        blend_area.x2 = core_area.x2;
  40ad6e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.y1 = outer_area->y1;
  40ad72:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
        blend_area.y2 = inner_area->y1 - 1;
  40ad76:	1e7b      	subs	r3, r7, #1
  40ad78:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        _lv_blend_fill(clip_area, &blend_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40ad7c:	f8cd a008 	str.w	sl, [sp, #8]
  40ad80:	f8cd b004 	str.w	fp, [sp, #4]
  40ad84:	2301      	movs	r3, #1
  40ad86:	9300      	str	r3, [sp, #0]
  40ad88:	2300      	movs	r3, #0
  40ad8a:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40ad8e:	a918      	add	r1, sp, #96	; 0x60
  40ad90:	9805      	ldr	r0, [sp, #20]
  40ad92:	4ea7      	ldr	r6, [pc, #668]	; (40b030 <draw_border_generic+0x664>)
  40ad94:	47b0      	blx	r6
  40ad96:	e7bb      	b.n	40ad10 <draw_border_generic+0x344>
        blend_area.x1 = core_area.x1;
  40ad98:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40ad9c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = core_area.x2;
  40ada0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40ada4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.y1 = inner_area->y2 + 1;
  40ada8:	88e3      	ldrh	r3, [r4, #6]
  40adaa:	3301      	adds	r3, #1
  40adac:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        blend_area.y2 = outer_area->y2;
  40adb0:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  40adb4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        _lv_blend_fill(clip_area, &blend_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40adb8:	f8cd a008 	str.w	sl, [sp, #8]
  40adbc:	f8cd b004 	str.w	fp, [sp, #4]
  40adc0:	2301      	movs	r3, #1
  40adc2:	9300      	str	r3, [sp, #0]
  40adc4:	2300      	movs	r3, #0
  40adc6:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40adca:	a918      	add	r1, sp, #96	; 0x60
  40adcc:	9805      	ldr	r0, [sp, #20]
  40adce:	4e98      	ldr	r6, [pc, #608]	; (40b030 <draw_border_generic+0x664>)
  40add0:	47b0      	blx	r6
  40add2:	e7a2      	b.n	40ad1a <draw_border_generic+0x34e>
        blend_area.x1 = outer_area->x1;
  40add4:	f8b9 3000 	ldrh.w	r3, [r9]
  40add8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = inner_area->x1 - 1;
  40addc:	8823      	ldrh	r3, [r4, #0]
  40adde:	3b01      	subs	r3, #1
  40ade0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.y1 = core_area.y1;
  40ade4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40ade8:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        blend_area.y2 = core_area.y2;
  40adec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40adf0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        _lv_blend_fill(clip_area, &blend_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40adf4:	f8cd a008 	str.w	sl, [sp, #8]
  40adf8:	f8cd b004 	str.w	fp, [sp, #4]
  40adfc:	2301      	movs	r3, #1
  40adfe:	9300      	str	r3, [sp, #0]
  40ae00:	2300      	movs	r3, #0
  40ae02:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40ae06:	a918      	add	r1, sp, #96	; 0x60
  40ae08:	9805      	ldr	r0, [sp, #20]
  40ae0a:	4e89      	ldr	r6, [pc, #548]	; (40b030 <draw_border_generic+0x664>)
  40ae0c:	47b0      	blx	r6
  40ae0e:	e788      	b.n	40ad22 <draw_border_generic+0x356>
        blend_area.x1 = inner_area->x2 + 1;
  40ae10:	88a3      	ldrh	r3, [r4, #4]
  40ae12:	3301      	adds	r3, #1
  40ae14:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = outer_area->x2;
  40ae18:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  40ae1c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.y1 = core_area.y1;
  40ae20:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40ae24:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        blend_area.y2 = core_area.y2;
  40ae28:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40ae2c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        _lv_blend_fill(clip_area, &blend_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  40ae30:	f8cd a008 	str.w	sl, [sp, #8]
  40ae34:	f8cd b004 	str.w	fp, [sp, #4]
  40ae38:	2301      	movs	r3, #1
  40ae3a:	9300      	str	r3, [sp, #0]
  40ae3c:	2300      	movs	r3, #0
  40ae3e:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40ae42:	a918      	add	r1, sp, #96	; 0x60
  40ae44:	9805      	ldr	r0, [sp, #20]
  40ae46:	4e7a      	ldr	r6, [pc, #488]	; (40b030 <draw_border_generic+0x664>)
  40ae48:	47b0      	blx	r6
  40ae4a:	e76e      	b.n	40ad2a <draw_border_generic+0x35e>
            lv_memset_ff(mask_buf, draw_area_w);
  40ae4c:	9906      	ldr	r1, [sp, #24]
  40ae4e:	9804      	ldr	r0, [sp, #16]
  40ae50:	4b78      	ldr	r3, [pc, #480]	; (40b034 <draw_border_generic+0x668>)
  40ae52:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, draw_area_w);
  40ae54:	9b07      	ldr	r3, [sp, #28]
  40ae56:	4622      	mov	r2, r4
  40ae58:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
  40ae5c:	9804      	ldr	r0, [sp, #16]
  40ae5e:	47c0      	blx	r8
  40ae60:	9008      	str	r0, [sp, #32]
            if(top_y >= draw_area.y1) {
  40ae62:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40ae66:	42a3      	cmp	r3, r4
  40ae68:	dd1a      	ble.n	40aea0 <draw_border_generic+0x4d4>
            if(bottom_y <= draw_area.y2) {
  40ae6a:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40ae6e:	42ab      	cmp	r3, r5
  40ae70:	da26      	bge.n	40aec0 <draw_border_generic+0x4f4>
  40ae72:	3601      	adds	r6, #1
        for(h = 0; h < max_h; h++) {
  40ae74:	455e      	cmp	r6, fp
  40ae76:	f000 80a0 	beq.w	40afba <draw_border_generic+0x5ee>
  40ae7a:	1e73      	subs	r3, r6, #1
  40ae7c:	b29b      	uxth	r3, r3
            lv_coord_t top_y = outer_area->y1 + h;
  40ae7e:	f8b9 4002 	ldrh.w	r4, [r9, #2]
  40ae82:	441c      	add	r4, r3
  40ae84:	b224      	sxth	r4, r4
            lv_coord_t bottom_y = outer_area->y2 - h;
  40ae86:	f8b9 5006 	ldrh.w	r5, [r9, #6]
  40ae8a:	1aed      	subs	r5, r5, r3
  40ae8c:	b22d      	sxth	r5, r5
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
  40ae8e:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40ae92:	42a3      	cmp	r3, r4
  40ae94:	ddda      	ble.n	40ae4c <draw_border_generic+0x480>
  40ae96:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40ae9a:	42ab      	cmp	r3, r5
  40ae9c:	dbe9      	blt.n	40ae72 <draw_border_generic+0x4a6>
  40ae9e:	e7d5      	b.n	40ae4c <draw_border_generic+0x480>
                blend_area.y1 = top_y;
  40aea0:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
                blend_area.y2 = top_y;
  40aea4:	f8ad 4066 	strh.w	r4, [sp, #102]	; 0x66
                _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40aea8:	f8cd a008 	str.w	sl, [sp, #8]
  40aeac:	9701      	str	r7, [sp, #4]
  40aeae:	9000      	str	r0, [sp, #0]
  40aeb0:	9b04      	ldr	r3, [sp, #16]
  40aeb2:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40aeb6:	a918      	add	r1, sp, #96	; 0x60
  40aeb8:	9805      	ldr	r0, [sp, #20]
  40aeba:	4c5d      	ldr	r4, [pc, #372]	; (40b030 <draw_border_generic+0x664>)
  40aebc:	47a0      	blx	r4
  40aebe:	e7d4      	b.n	40ae6a <draw_border_generic+0x49e>
                blend_area.y1 = bottom_y;
  40aec0:	f8ad 5062 	strh.w	r5, [sp, #98]	; 0x62
                blend_area.y2 = bottom_y;
  40aec4:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40aec8:	f8cd a008 	str.w	sl, [sp, #8]
  40aecc:	9701      	str	r7, [sp, #4]
  40aece:	9b08      	ldr	r3, [sp, #32]
  40aed0:	9300      	str	r3, [sp, #0]
  40aed2:	9b04      	ldr	r3, [sp, #16]
  40aed4:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40aed8:	a918      	add	r1, sp, #96	; 0x60
  40aeda:	9805      	ldr	r0, [sp, #20]
  40aedc:	4c54      	ldr	r4, [pc, #336]	; (40b030 <draw_border_generic+0x664>)
  40aede:	47a0      	blx	r4
  40aee0:	e7c7      	b.n	40ae72 <draw_border_generic+0x4a6>
        blend_area.x1 = draw_area.x1;
  40aee2:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
  40aee6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
  40aeea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40aeec:	1e57      	subs	r7, r2, #1
  40aeee:	f9bd 209c 	ldrsh.w	r2, [sp, #156]	; 0x9c
  40aef2:	4297      	cmp	r7, r2
  40aef4:	bfa8      	it	ge
  40aef6:	4617      	movge	r7, r2
  40aef8:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
  40aefc:	f1c3 0301 	rsb	r3, r3, #1
  40af00:	441f      	add	r7, r3
  40af02:	b23b      	sxth	r3, r7
  40af04:	9306      	str	r3, [sp, #24]
        if(blend_w > 0) {
  40af06:	2b00      	cmp	r3, #0
  40af08:	dd0d      	ble.n	40af26 <draw_border_generic+0x55a>
            if(left_side || top_side) {
  40af0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40af0c:	2b00      	cmp	r3, #0
  40af0e:	d162      	bne.n	40afd6 <draw_border_generic+0x60a>
  40af10:	f1b8 0f00 	cmp.w	r8, #0
  40af14:	d15f      	bne.n	40afd6 <draw_border_generic+0x60a>
            if(left_side || bottom_side) {
  40af16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40af18:	2b00      	cmp	r3, #0
  40af1a:	f040 8095 	bne.w	40b048 <draw_border_generic+0x67c>
  40af1e:	f1b8 0f00 	cmp.w	r8, #0
  40af22:	f040 8091 	bne.w	40b048 <draw_border_generic+0x67c>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
  40af26:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40af28:	3301      	adds	r3, #1
  40af2a:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	; 0x98
  40af2e:	4293      	cmp	r3, r2
  40af30:	bfb8      	it	lt
  40af32:	4613      	movlt	r3, r2
  40af34:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = draw_area.x2;
  40af38:	f9bd 209c 	ldrsh.w	r2, [sp, #156]	; 0x9c
  40af3c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
  40af40:	3201      	adds	r2, #1
  40af42:	1ad3      	subs	r3, r2, r3
  40af44:	b21b      	sxth	r3, r3
  40af46:	9306      	str	r3, [sp, #24]
        if(blend_w > 0) {
  40af48:	2b00      	cmp	r3, #0
  40af4a:	dd36      	ble.n	40afba <draw_border_generic+0x5ee>
            if(right_side || top_side) {
  40af4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40af4e:	2b00      	cmp	r3, #0
  40af50:	f040 80a7 	bne.w	40b0a2 <draw_border_generic+0x6d6>
  40af54:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40af56:	2b00      	cmp	r3, #0
  40af58:	f040 80a3 	bne.w	40b0a2 <draw_border_generic+0x6d6>
            if(right_side || bottom_side) {
  40af5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40af5e:	b90b      	cbnz	r3, 40af64 <draw_border_generic+0x598>
  40af60:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40af62:	b353      	cbz	r3, 40afba <draw_border_generic+0x5ee>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
  40af64:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40af66:	3401      	adds	r4, #1
  40af68:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40af6c:	429c      	cmp	r4, r3
  40af6e:	dc24      	bgt.n	40afba <draw_border_generic+0x5ee>
                    lv_memset_ff(mask_buf, blend_w);
  40af70:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 40b034 <draw_border_generic+0x668>
                    mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_w);
  40af74:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 40b044 <draw_border_generic+0x678>
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40af78:	4f2d      	ldr	r7, [pc, #180]	; (40b030 <draw_border_generic+0x664>)
                    blend_area.y1 = h;
  40af7a:	b226      	sxth	r6, r4
  40af7c:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
                    blend_area.y2 = h;
  40af80:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
                    lv_memset_ff(mask_buf, blend_w);
  40af84:	9906      	ldr	r1, [sp, #24]
  40af86:	9804      	ldr	r0, [sp, #16]
  40af88:	47c8      	blx	r9
                    mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_w);
  40af8a:	ad28      	add	r5, sp, #160	; 0xa0
  40af8c:	9b06      	ldr	r3, [sp, #24]
  40af8e:	4632      	mov	r2, r6
  40af90:	f935 1d40 	ldrsh.w	r1, [r5, #-64]!
  40af94:	9e04      	ldr	r6, [sp, #16]
  40af96:	4630      	mov	r0, r6
  40af98:	47c0      	blx	r8
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40af9a:	f8cd a008 	str.w	sl, [sp, #8]
  40af9e:	f8cd b004 	str.w	fp, [sp, #4]
  40afa2:	9000      	str	r0, [sp, #0]
  40afa4:	4633      	mov	r3, r6
  40afa6:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40afaa:	4629      	mov	r1, r5
  40afac:	9805      	ldr	r0, [sp, #20]
  40afae:	47b8      	blx	r7
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
  40afb0:	3401      	adds	r4, #1
  40afb2:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40afb6:	42a3      	cmp	r3, r4
  40afb8:	dadf      	bge.n	40af7a <draw_border_generic+0x5ae>
    lv_draw_mask_free_param(&mask_rin_param);
  40afba:	a81a      	add	r0, sp, #104	; 0x68
  40afbc:	4d1e      	ldr	r5, [pc, #120]	; (40b038 <draw_border_generic+0x66c>)
  40afbe:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  40afc0:	980d      	ldr	r0, [sp, #52]	; 0x34
  40afc2:	4c1e      	ldr	r4, [pc, #120]	; (40b03c <draw_border_generic+0x670>)
  40afc4:	47a0      	blx	r4
    lv_draw_mask_free_param(&mask_rout_param);
  40afc6:	a820      	add	r0, sp, #128	; 0x80
  40afc8:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rout_id);
  40afca:	980c      	ldr	r0, [sp, #48]	; 0x30
  40afcc:	47a0      	blx	r4
    lv_mem_buf_release(mask_buf);
  40afce:	9804      	ldr	r0, [sp, #16]
  40afd0:	4b1b      	ldr	r3, [pc, #108]	; (40b040 <draw_border_generic+0x674>)
  40afd2:	4798      	blx	r3
  40afd4:	e511      	b.n	40a9fa <draw_border_generic+0x2e>
                for(h = draw_area.y1; h < core_area.y1; h++) {
  40afd6:	f9bd 409a 	ldrsh.w	r4, [sp, #154]	; 0x9a
  40afda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40afdc:	429c      	cmp	r4, r3
  40afde:	da9a      	bge.n	40af16 <draw_border_generic+0x54a>
                    lv_memset_ff(mask_buf, blend_w);
  40afe0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 40b034 <draw_border_generic+0x668>
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40afe4:	4f12      	ldr	r7, [pc, #72]	; (40b030 <draw_border_generic+0x664>)
  40afe6:	f8cd 801c 	str.w	r8, [sp, #28]
  40afea:	4698      	mov	r8, r3
                    blend_area.y1 = h;
  40afec:	b226      	sxth	r6, r4
  40afee:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
                    blend_area.y2 = h;
  40aff2:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
                    lv_memset_ff(mask_buf, blend_w);
  40aff6:	9906      	ldr	r1, [sp, #24]
  40aff8:	9804      	ldr	r0, [sp, #16]
  40affa:	47c8      	blx	r9
                    mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_w);
  40affc:	ad28      	add	r5, sp, #160	; 0xa0
  40affe:	9b06      	ldr	r3, [sp, #24]
  40b000:	4632      	mov	r2, r6
  40b002:	f935 1d40 	ldrsh.w	r1, [r5, #-64]!
  40b006:	9804      	ldr	r0, [sp, #16]
  40b008:	4e0e      	ldr	r6, [pc, #56]	; (40b044 <draw_border_generic+0x678>)
  40b00a:	47b0      	blx	r6
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40b00c:	f8cd a008 	str.w	sl, [sp, #8]
  40b010:	f8cd b004 	str.w	fp, [sp, #4]
  40b014:	9000      	str	r0, [sp, #0]
  40b016:	9b04      	ldr	r3, [sp, #16]
  40b018:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40b01c:	4629      	mov	r1, r5
  40b01e:	9805      	ldr	r0, [sp, #20]
  40b020:	47b8      	blx	r7
                for(h = draw_area.y1; h < core_area.y1; h++) {
  40b022:	3401      	adds	r4, #1
  40b024:	4544      	cmp	r4, r8
  40b026:	dbe1      	blt.n	40afec <draw_border_generic+0x620>
  40b028:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40b02c:	e773      	b.n	40af16 <draw_border_generic+0x54a>
  40b02e:	bf00      	nop
  40b030:	00406181 	.word	0x00406181
  40b034:	00411791 	.word	0x00411791
  40b038:	0040a09d 	.word	0x0040a09d
  40b03c:	0040a03d 	.word	0x0040a03d
  40b040:	00411105 	.word	0x00411105
  40b044:	00409fed 	.word	0x00409fed
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
  40b048:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b04a:	1c5c      	adds	r4, r3, #1
  40b04c:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40b050:	429c      	cmp	r4, r3
  40b052:	f73f af68 	bgt.w	40af26 <draw_border_generic+0x55a>
                    lv_memset_ff(mask_buf, blend_w);
  40b056:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40b0fc <draw_border_generic+0x730>
                    mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_w);
  40b05a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40b0f8 <draw_border_generic+0x72c>
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40b05e:	4f25      	ldr	r7, [pc, #148]	; (40b0f4 <draw_border_generic+0x728>)
                    blend_area.y1 = h;
  40b060:	b226      	sxth	r6, r4
  40b062:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
                    blend_area.y2 = h;
  40b066:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
                    lv_memset_ff(mask_buf, blend_w);
  40b06a:	9906      	ldr	r1, [sp, #24]
  40b06c:	9804      	ldr	r0, [sp, #16]
  40b06e:	47c8      	blx	r9
                    mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_w);
  40b070:	ad28      	add	r5, sp, #160	; 0xa0
  40b072:	9b06      	ldr	r3, [sp, #24]
  40b074:	4632      	mov	r2, r6
  40b076:	f935 1d40 	ldrsh.w	r1, [r5, #-64]!
  40b07a:	9e04      	ldr	r6, [sp, #16]
  40b07c:	4630      	mov	r0, r6
  40b07e:	47c0      	blx	r8
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40b080:	f8cd a008 	str.w	sl, [sp, #8]
  40b084:	f8cd b004 	str.w	fp, [sp, #4]
  40b088:	9000      	str	r0, [sp, #0]
  40b08a:	4633      	mov	r3, r6
  40b08c:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40b090:	4629      	mov	r1, r5
  40b092:	9805      	ldr	r0, [sp, #20]
  40b094:	47b8      	blx	r7
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
  40b096:	3401      	adds	r4, #1
  40b098:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
  40b09c:	42a3      	cmp	r3, r4
  40b09e:	dadf      	bge.n	40b060 <draw_border_generic+0x694>
  40b0a0:	e741      	b.n	40af26 <draw_border_generic+0x55a>
                for(h = draw_area.y1; h < core_area.y1; h++) {
  40b0a2:	f9bd 409a 	ldrsh.w	r4, [sp, #154]	; 0x9a
  40b0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b0a8:	4698      	mov	r8, r3
  40b0aa:	429c      	cmp	r4, r3
  40b0ac:	f6bf af56 	bge.w	40af5c <draw_border_generic+0x590>
                    lv_memset_ff(mask_buf, blend_w);
  40b0b0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 40b0fc <draw_border_generic+0x730>
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40b0b4:	4f0f      	ldr	r7, [pc, #60]	; (40b0f4 <draw_border_generic+0x728>)
                    blend_area.y1 = h;
  40b0b6:	b226      	sxth	r6, r4
  40b0b8:	f8ad 6062 	strh.w	r6, [sp, #98]	; 0x62
                    blend_area.y2 = h;
  40b0bc:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
                    lv_memset_ff(mask_buf, blend_w);
  40b0c0:	9906      	ldr	r1, [sp, #24]
  40b0c2:	9804      	ldr	r0, [sp, #16]
  40b0c4:	47c8      	blx	r9
                    mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_w);
  40b0c6:	ad28      	add	r5, sp, #160	; 0xa0
  40b0c8:	9b06      	ldr	r3, [sp, #24]
  40b0ca:	4632      	mov	r2, r6
  40b0cc:	f935 1d40 	ldrsh.w	r1, [r5, #-64]!
  40b0d0:	9804      	ldr	r0, [sp, #16]
  40b0d2:	4e09      	ldr	r6, [pc, #36]	; (40b0f8 <draw_border_generic+0x72c>)
  40b0d4:	47b0      	blx	r6
                    _lv_blend_fill(clip_area, &blend_area, color, mask_buf, mask_res, opa, blend_mode);
  40b0d6:	f8cd a008 	str.w	sl, [sp, #8]
  40b0da:	f8cd b004 	str.w	fp, [sp, #4]
  40b0de:	9000      	str	r0, [sp, #0]
  40b0e0:	9b04      	ldr	r3, [sp, #16]
  40b0e2:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40b0e6:	4629      	mov	r1, r5
  40b0e8:	9805      	ldr	r0, [sp, #20]
  40b0ea:	47b8      	blx	r7
                for(h = draw_area.y1; h < core_area.y1; h++) {
  40b0ec:	3401      	adds	r4, #1
  40b0ee:	4544      	cmp	r4, r8
  40b0f0:	dbe1      	blt.n	40b0b6 <draw_border_generic+0x6ea>
  40b0f2:	e733      	b.n	40af5c <draw_border_generic+0x590>
  40b0f4:	00406181 	.word	0x00406181
  40b0f8:	00409fed 	.word	0x00409fed
  40b0fc:	00411791 	.word	0x00411791

0040b100 <lv_draw_rect>:
{
  40b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b104:	b0ab      	sub	sp, #172	; 0xac
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b106:	88c5      	ldrh	r5, [r0, #6]
  40b108:	f8b0 8002 	ldrh.w	r8, [r0, #2]
  40b10c:	1c6b      	adds	r3, r5, #1
  40b10e:	eba3 0308 	sub.w	r3, r3, r8
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  40b112:	b21b      	sxth	r3, r3
  40b114:	2b00      	cmp	r3, #0
  40b116:	f341 826e 	ble.w	40c5f6 <lv_draw_rect+0x14f6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b11a:	8886      	ldrh	r6, [r0, #4]
  40b11c:	f8b0 9000 	ldrh.w	r9, [r0]
  40b120:	1c73      	adds	r3, r6, #1
  40b122:	eba3 0309 	sub.w	r3, r3, r9
  40b126:	b21b      	sxth	r3, r3
  40b128:	2b00      	cmp	r3, #0
  40b12a:	f341 8264 	ble.w	40c5f6 <lv_draw_rect+0x14f6>
  40b12e:	4614      	mov	r4, r2
  40b130:	9106      	str	r1, [sp, #24]
  40b132:	4682      	mov	sl, r0
    if(dsc->shadow_width == 0) return;
  40b134:	f9b2 202a 	ldrsh.w	r2, [r2, #42]	; 0x2a
  40b138:	2a00      	cmp	r2, #0
  40b13a:	d03d      	beq.n	40b1b8 <lv_draw_rect+0xb8>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  40b13c:	f894 b032 	ldrb.w	fp, [r4, #50]	; 0x32
  40b140:	f1bb 0f02 	cmp.w	fp, #2
  40b144:	d938      	bls.n	40b1b8 <lv_draw_rect+0xb8>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
  40b146:	2a01      	cmp	r2, #1
  40b148:	f000 80dc 	beq.w	40b304 <lv_draw_rect+0x204>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  40b14c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
  40b14e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  40b150:	1ac8      	subs	r0, r1, r3
  40b152:	4481      	add	r9, r0
  40b154:	fa1f f989 	uxth.w	r9, r9
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  40b158:	4419      	add	r1, r3
  40b15a:	440e      	add	r6, r1
  40b15c:	b2b6      	uxth	r6, r6
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  40b15e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
  40b160:	1ac8      	subs	r0, r1, r3
  40b162:	4480      	add	r8, r0
  40b164:	fa1f f888 	uxth.w	r8, r8
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  40b168:	440b      	add	r3, r1
  40b16a:	441d      	add	r5, r3
  40b16c:	b2ad      	uxth	r5, r5
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
  40b16e:	4613      	mov	r3, r2
  40b170:	2a00      	cmp	r2, #0
  40b172:	bfb8      	it	lt
  40b174:	1c53      	addlt	r3, r2, #1
  40b176:	f3c3 034f 	ubfx	r3, r3, #1, #16
  40b17a:	43da      	mvns	r2, r3
  40b17c:	b292      	uxth	r2, r2
  40b17e:	eb09 0102 	add.w	r1, r9, r2
  40b182:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
  40b186:	3301      	adds	r3, #1
  40b188:	b29b      	uxth	r3, r3
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
  40b18a:	18f1      	adds	r1, r6, r3
  40b18c:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
  40b190:	4442      	add	r2, r8
  40b192:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
  40b196:	442b      	add	r3, r5
  40b198:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40b19c:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  40b1a0:	bf28      	it	cs
  40b1a2:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    if(!_lv_area_intersect(&draw_area, &shadow_area, clip)) return;
  40b1a6:	9a06      	ldr	r2, [sp, #24]
  40b1a8:	a918      	add	r1, sp, #96	; 0x60
  40b1aa:	a81a      	add	r0, sp, #104	; 0x68
  40b1ac:	4bc0      	ldr	r3, [pc, #768]	; (40b4b0 <lv_draw_rect+0x3b0>)
  40b1ae:	4798      	blx	r3
  40b1b0:	9007      	str	r0, [sp, #28]
  40b1b2:	2800      	cmp	r0, #0
  40b1b4:	f040 80b0 	bne.w	40b318 <lv_draw_rect+0x218>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  40b1b8:	7aa3      	ldrb	r3, [r4, #10]
  40b1ba:	9304      	str	r3, [sp, #16]
  40b1bc:	2b02      	cmp	r3, #2
  40b1be:	f241 8166 	bls.w	40c48e <lv_draw_rect+0x138e>
    dest->x1 = src->x1;
  40b1c2:	f9ba 6000 	ldrsh.w	r6, [sl]
  40b1c6:	f8ad 6070 	strh.w	r6, [sp, #112]	; 0x70
    dest->y1 = src->y1;
  40b1ca:	f9ba 5002 	ldrsh.w	r5, [sl, #2]
  40b1ce:	f8ad 5072 	strh.w	r5, [sp, #114]	; 0x72
    dest->x2 = src->x2;
  40b1d2:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
  40b1d6:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    dest->y2 = src->y2;
  40b1da:	f9ba 0006 	ldrsh.w	r0, [sl, #6]
  40b1de:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  40b1e2:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
  40b1e6:	2901      	cmp	r1, #1
  40b1e8:	dd1c      	ble.n	40b224 <lv_draw_rect+0x124>
  40b1ea:	7fa1      	ldrb	r1, [r4, #30]
  40b1ec:	29fc      	cmp	r1, #252	; 0xfc
  40b1ee:	d919      	bls.n	40b224 <lv_draw_rect+0x124>
  40b1f0:	f9b4 3000 	ldrsh.w	r3, [r4]
  40b1f4:	b1b3      	cbz	r3, 40b224 <lv_draw_rect+0x124>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  40b1f6:	7fe3      	ldrb	r3, [r4, #31]
  40b1f8:	f3c3 0344 	ubfx	r3, r3, #1, #5
  40b1fc:	f3c3 0180 	ubfx	r1, r3, #2, #1
  40b200:	440e      	add	r6, r1
  40b202:	f8ad 6070 	strh.w	r6, [sp, #112]	; 0x70
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  40b206:	f3c3 0140 	ubfx	r1, r3, #1, #1
  40b20a:	440d      	add	r5, r1
  40b20c:	f8ad 5072 	strh.w	r5, [sp, #114]	; 0x72
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  40b210:	f3c3 01c0 	ubfx	r1, r3, #3, #1
  40b214:	1a52      	subs	r2, r2, r1
  40b216:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  40b21a:	f003 0301 	and.w	r3, r3, #1
  40b21e:	1ac3      	subs	r3, r0, r3
  40b220:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
  40b224:	9b04      	ldr	r3, [sp, #16]
  40b226:	2bfd      	cmp	r3, #253	; 0xfd
  40b228:	bf28      	it	cs
  40b22a:	23ff      	movcs	r3, #255	; 0xff
  40b22c:	461d      	mov	r5, r3
  40b22e:	9304      	str	r3, [sp, #16]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  40b230:	7ae6      	ldrb	r6, [r4, #11]
  40b232:	f006 0607 	and.w	r6, r6, #7
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  40b236:	88a2      	ldrh	r2, [r4, #4]
  40b238:	88e3      	ldrh	r3, [r4, #6]
  40b23a:	429a      	cmp	r2, r3
  40b23c:	bf08      	it	eq
  40b23e:	2600      	moveq	r6, #0
    bool mask_any = lv_draw_mask_is_any(&coords_bg);
  40b240:	a81c      	add	r0, sp, #112	; 0x70
  40b242:	4b9c      	ldr	r3, [pc, #624]	; (40b4b4 <lv_draw_rect+0x3b4>)
  40b244:	4798      	blx	r3
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  40b246:	9008      	str	r0, [sp, #32]
  40b248:	b928      	cbnz	r0, 40b256 <lv_draw_rect+0x156>
  40b24a:	f9b4 3000 	ldrsh.w	r3, [r4]
  40b24e:	b913      	cbnz	r3, 40b256 <lv_draw_rect+0x156>
  40b250:	2e00      	cmp	r6, #0
  40b252:	f000 876d 	beq.w	40c130 <lv_draw_rect+0x1030>
    if(!_lv_area_intersect(&draw_area, &coords_bg, clip_area)) return;
  40b256:	9a06      	ldr	r2, [sp, #24]
  40b258:	a91c      	add	r1, sp, #112	; 0x70
  40b25a:	a81e      	add	r0, sp, #120	; 0x78
  40b25c:	4b94      	ldr	r3, [pc, #592]	; (40b4b0 <lv_draw_rect+0x3b0>)
  40b25e:	4798      	blx	r3
  40b260:	2800      	cmp	r0, #0
  40b262:	f001 8114 	beq.w	40c48e <lv_draw_rect+0x138e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b266:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
  40b26a:	3501      	adds	r5, #1
  40b26c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
  40b270:	1aed      	subs	r5, r5, r3
  40b272:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b274:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
  40b278:	3301      	adds	r3, #1
  40b27a:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
  40b27e:	1a9b      	subs	r3, r3, r2
  40b280:	b21b      	sxth	r3, r3
  40b282:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t short_side = LV_MIN(coords_w, coords_h);
  40b284:	42ab      	cmp	r3, r5
  40b286:	bfa8      	it	ge
  40b288:	462b      	movge	r3, r5
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
  40b28a:	105b      	asrs	r3, r3, #1
  40b28c:	f9b4 2000 	ldrsh.w	r2, [r4]
  40b290:	4293      	cmp	r3, r2
  40b292:	bfa8      	it	ge
  40b294:	4613      	movge	r3, r2
  40b296:	4619      	mov	r1, r3
  40b298:	930c      	str	r3, [sp, #48]	; 0x30
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b29a:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
  40b29e:	3301      	adds	r3, #1
  40b2a0:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  40b2a4:	1a9b      	subs	r3, r3, r2
  40b2a6:	b21b      	sxth	r3, r3
  40b2a8:	9305      	str	r3, [sp, #20]
    if(rout > 0 || mask_any) {
  40b2aa:	9b08      	ldr	r3, [sp, #32]
  40b2ac:	2900      	cmp	r1, #0
  40b2ae:	bfc8      	it	gt
  40b2b0:	f043 0301 	orrgt.w	r3, r3, #1
  40b2b4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  40b2b8:	930a      	str	r3, [sp, #40]	; 0x28
  40b2ba:	f040 8745 	bne.w	40c148 <lv_draw_rect+0x1048>
    lv_opa_t * mask_buf = NULL;
  40b2be:	2300      	movs	r3, #0
  40b2c0:	9307      	str	r3, [sp, #28]
    int16_t mask_rout_id = LV_MASK_ID_INV;
  40b2c2:	f04f 33ff 	mov.w	r3, #4294967295
  40b2c6:	930d      	str	r3, [sp, #52]	; 0x34
    if(grad_dir == LV_GRAD_DIR_HOR) {
  40b2c8:	2e02      	cmp	r6, #2
  40b2ca:	f000 874e 	beq.w	40c16a <lv_draw_rect+0x106a>
    lv_color_t * grad_map = NULL;
  40b2ce:	2300      	movs	r3, #0
  40b2d0:	9309      	str	r3, [sp, #36]	; 0x24
    blend_area.x1 = draw_area.x1;
  40b2d2:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
  40b2d6:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    blend_area.x2 = draw_area.x2;
  40b2da:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
  40b2de:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    if(mask_any) {
  40b2e2:	9b08      	ldr	r3, [sp, #32]
  40b2e4:	2b00      	cmp	r3, #0
  40b2e6:	f040 87cf 	bne.w	40c288 <lv_draw_rect+0x1188>
    for(h = 0; h < rout; h++) {
  40b2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b2ec:	2b00      	cmp	r3, #0
  40b2ee:	f001 834c 	beq.w	40c98a <lv_draw_rect+0x188a>
  40b2f2:	f04f 0800 	mov.w	r8, #0
                _lv_blend_fill(clip_area, &blend_area, c, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40b2f6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b2fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  40b2fe:	940a      	str	r4, [sp, #40]	; 0x28
  40b300:	f001 b9ae 	b.w	40c660 <lv_draw_rect+0x1560>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
  40b304:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
  40b308:	2b00      	cmp	r3, #0
  40b30a:	f73f af1f 	bgt.w	40b14c <lv_draw_rect+0x4c>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
  40b30e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b310:	2b00      	cmp	r3, #0
  40b312:	f43f af51 	beq.w	40b1b8 <lv_draw_rect+0xb8>
  40b316:	e719      	b.n	40b14c <lv_draw_rect+0x4c>
    dest->x1 = src->x1;
  40b318:	f8ba 3000 	ldrh.w	r3, [sl]
  40b31c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    dest->y1 = src->y1;
  40b320:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40b324:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    dest->x2 = src->x2;
  40b328:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  40b32c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    dest->y2 = src->y2;
  40b330:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  40b334:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    lv_area_increase(&bg_area, -1, -1);
  40b338:	f04f 32ff 	mov.w	r2, #4294967295
  40b33c:	4611      	mov	r1, r2
  40b33e:	a81c      	add	r0, sp, #112	; 0x70
  40b340:	4b5d      	ldr	r3, [pc, #372]	; (40b4b8 <lv_draw_rect+0x3b8>)
  40b342:	4798      	blx	r3
    int32_t r_bg = dsc->radius;
  40b344:	f9b4 2000 	ldrsh.w	r2, [r4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b348:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
  40b34c:	3301      	adds	r3, #1
  40b34e:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
  40b352:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b354:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
  40b358:	3101      	adds	r1, #1
  40b35a:	f8bd 0072 	ldrh.w	r0, [sp, #114]	; 0x72
  40b35e:	1a09      	subs	r1, r1, r0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  40b360:	b21b      	sxth	r3, r3
  40b362:	b209      	sxth	r1, r1
  40b364:	428b      	cmp	r3, r1
  40b366:	bfa8      	it	ge
  40b368:	460b      	movge	r3, r1
  40b36a:	105b      	asrs	r3, r3, #1
  40b36c:	4293      	cmp	r3, r2
  40b36e:	bfa8      	it	ge
  40b370:	4613      	movge	r3, r2
  40b372:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b374:	3601      	adds	r6, #1
  40b376:	eba6 0609 	sub.w	r6, r6, r9
  40b37a:	b2b6      	uxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b37c:	3501      	adds	r5, #1
  40b37e:	eba5 0508 	sub.w	r5, r5, r8
  40b382:	b2ad      	uxth	r5, r5
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  40b384:	b237      	sxth	r7, r6
  40b386:	b22b      	sxth	r3, r5
  40b388:	429f      	cmp	r7, r3
  40b38a:	bfa8      	it	ge
  40b38c:	461f      	movge	r7, r3
  40b38e:	107f      	asrs	r7, r7, #1
  40b390:	4297      	cmp	r7, r2
  40b392:	bfa8      	it	ge
  40b394:	4617      	movge	r7, r2
    int32_t corner_size = dsc->shadow_width  + r_sh;
  40b396:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
  40b39a:	443b      	add	r3, r7
  40b39c:	9309      	str	r3, [sp, #36]	; 0x24
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  40b39e:	fb03 f003 	mul.w	r0, r3, r3
  40b3a2:	0040      	lsls	r0, r0, #1
  40b3a4:	4b45      	ldr	r3, [pc, #276]	; (40b4bc <lv_draw_rect+0x3bc>)
  40b3a6:	4798      	blx	r3
  40b3a8:	9008      	str	r0, [sp, #32]
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  40b3aa:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
  40b3ae:	b23a      	sxth	r2, r7
    int32_t size = sw_ori  + r;
  40b3b0:	eb02 0809 	add.w	r8, r2, r9
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40b3b4:	4649      	mov	r1, r9
  40b3b6:	f1b9 0f00 	cmp.w	r9, #0
  40b3ba:	bfb8      	it	lt
  40b3bc:	f109 0101 	addlt.w	r1, r9, #1
  40b3c0:	f3c1 014f 	ubfx	r1, r1, #1, #16
  40b3c4:	1e4b      	subs	r3, r1, #1
  40b3c6:	f019 0001 	ands.w	r0, r9, #1
  40b3ca:	9010      	str	r0, [sp, #64]	; 0x40
  40b3cc:	bf0c      	ite	eq
  40b3ce:	2001      	moveq	r0, #1
  40b3d0:	2000      	movne	r0, #0
  40b3d2:	1a1b      	subs	r3, r3, r0
  40b3d4:	443b      	add	r3, r7
  40b3d6:	b29b      	uxth	r3, r3
  40b3d8:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    sh_area.y1 = sw / 2 + 1;
  40b3dc:	3101      	adds	r1, #1
  40b3de:	b289      	uxth	r1, r1
  40b3e0:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  40b3e4:	1b9b      	subs	r3, r3, r6
  40b3e6:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  40b3ea:	4429      	add	r1, r5
  40b3ec:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  40b3f0:	2300      	movs	r3, #0
  40b3f2:	a920      	add	r1, sp, #128	; 0x80
  40b3f4:	a822      	add	r0, sp, #136	; 0x88
  40b3f6:	4d32      	ldr	r5, [pc, #200]	; (40b4c0 <lv_draw_rect+0x3c0>)
  40b3f8:	47a8      	blx	r5
    if(sw_ori == 1) sw = 1;
  40b3fa:	f1b9 0f01 	cmp.w	r9, #1
  40b3fe:	f001 84e9 	beq.w	40cdd4 <lv_draw_rect+0x1cd4>
  40b402:	ea4f 0369 	mov.w	r3, r9, asr #1
  40b406:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * mask_line = lv_mem_buf_get(size);
  40b408:	f8cd 8010 	str.w	r8, [sp, #16]
  40b40c:	4640      	mov	r0, r8
  40b40e:	4b2b      	ldr	r3, [pc, #172]	; (40b4bc <lv_draw_rect+0x3bc>)
  40b410:	4798      	blx	r3
  40b412:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
  40b414:	f1b8 0f00 	cmp.w	r8, #0
  40b418:	dd5d      	ble.n	40b4d6 <lv_draw_rect+0x3d6>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40b41a:	9b04      	ldr	r3, [sp, #16]
  40b41c:	ea4f 0943 	mov.w	r9, r3, lsl #1
  40b420:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40b424:	4443      	add	r3, r8
  40b426:	005b      	lsls	r3, r3, #1
  40b428:	9d08      	ldr	r5, [sp, #32]
  40b42a:	2600      	movs	r6, #0
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40b42c:	fa0f f288 	sxth.w	r2, r8
  40b430:	9205      	str	r2, [sp, #20]
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40b432:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40b436:	469b      	mov	fp, r3
  40b438:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  40b43c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  40b440:	940f      	str	r4, [sp, #60]	; 0x3c
  40b442:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b444:	e007      	b.n	40b456 <lv_draw_rect+0x356>
  40b446:	4649      	mov	r1, r9
  40b448:	4628      	mov	r0, r5
  40b44a:	4b1e      	ldr	r3, [pc, #120]	; (40b4c4 <lv_draw_rect+0x3c4>)
  40b44c:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40b44e:	444d      	add	r5, r9
    for(y = 0; y < size; y++) {
  40b450:	3601      	adds	r6, #1
  40b452:	45b0      	cmp	r8, r6
  40b454:	dd3a      	ble.n	40b4cc <lv_draw_rect+0x3cc>
        lv_memset_ff(mask_line, size);
  40b456:	9904      	ldr	r1, [sp, #16]
  40b458:	4620      	mov	r0, r4
  40b45a:	4b1b      	ldr	r3, [pc, #108]	; (40b4c8 <lv_draw_rect+0x3c8>)
  40b45c:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40b45e:	ab22      	add	r3, sp, #136	; 0x88
  40b460:	9300      	str	r3, [sp, #0]
  40b462:	9b05      	ldr	r3, [sp, #20]
  40b464:	b232      	sxth	r2, r6
  40b466:	2100      	movs	r1, #0
  40b468:	4620      	mov	r0, r4
  40b46a:	9f22      	ldr	r7, [sp, #136]	; 0x88
  40b46c:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40b46e:	2800      	cmp	r0, #0
  40b470:	d0e9      	beq.n	40b446 <lv_draw_rect+0x346>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40b472:	4657      	mov	r7, sl
  40b474:	7823      	ldrb	r3, [r4, #0]
  40b476:	019b      	lsls	r3, r3, #6
  40b478:	fb93 f3fa 	sdiv	r3, r3, sl
  40b47c:	802b      	strh	r3, [r5, #0]
            for(i = 1; i < size; i++) {
  40b47e:	f1b8 0f01 	cmp.w	r8, #1
  40b482:	dde4      	ble.n	40b44e <lv_draw_rect+0x34e>
  40b484:	4621      	mov	r1, r4
  40b486:	462a      	mov	r2, r5
  40b488:	eb05 000b 	add.w	r0, r5, fp
  40b48c:	e004      	b.n	40b498 <lv_draw_rect+0x398>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40b48e:	8813      	ldrh	r3, [r2, #0]
  40b490:	8053      	strh	r3, [r2, #2]
  40b492:	3202      	adds	r2, #2
            for(i = 1; i < size; i++) {
  40b494:	4290      	cmp	r0, r2
  40b496:	d0da      	beq.n	40b44e <lv_draw_rect+0x34e>
  40b498:	468e      	mov	lr, r1
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40b49a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40b49e:	f89e e000 	ldrb.w	lr, [lr]
  40b4a2:	459e      	cmp	lr, r3
  40b4a4:	d0f3      	beq.n	40b48e <lv_draw_rect+0x38e>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40b4a6:	019b      	lsls	r3, r3, #6
  40b4a8:	fb93 f3f7 	sdiv	r3, r3, r7
  40b4ac:	8053      	strh	r3, [r2, #2]
  40b4ae:	e7f0      	b.n	40b492 <lv_draw_rect+0x392>
  40b4b0:	004107cd 	.word	0x004107cd
  40b4b4:	0040a0cd 	.word	0x0040a0cd
  40b4b8:	00410791 	.word	0x00410791
  40b4bc:	004115a9 	.word	0x004115a9
  40b4c0:	0040a2a1 	.word	0x0040a2a1
  40b4c4:	004116ed 	.word	0x004116ed
  40b4c8:	00411791 	.word	0x00411791
  40b4cc:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40b4d0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  40b4d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    lv_mem_buf_release(mask_line);
  40b4d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b4d8:	4ba0      	ldr	r3, [pc, #640]	; (40b75c <lv_draw_rect+0x65c>)
  40b4da:	4798      	blx	r3
    lv_draw_mask_free_param(&mask_param);
  40b4dc:	a822      	add	r0, sp, #136	; 0x88
  40b4de:	4ba0      	ldr	r3, [pc, #640]	; (40b760 <lv_draw_rect+0x660>)
  40b4e0:	4798      	blx	r3
    if(sw == 1) {
  40b4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b4e4:	2b01      	cmp	r3, #1
  40b4e6:	f001 8461 	beq.w	40cdac <lv_draw_rect+0x1cac>
    shadow_blur_corner(size, sw, sh_buf);
  40b4ea:	fa0f f988 	sxth.w	r9, r8
  40b4ee:	9a08      	ldr	r2, [sp, #32]
  40b4f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40b4f2:	4629      	mov	r1, r5
  40b4f4:	4648      	mov	r0, r9
  40b4f6:	4b9b      	ldr	r3, [pc, #620]	; (40b764 <lv_draw_rect+0x664>)
  40b4f8:	4798      	blx	r3
    sw += sw_ori & 1;
  40b4fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b4fc:	442b      	add	r3, r5
  40b4fe:	b219      	sxth	r1, r3
    if(sw > 1) {
  40b500:	2901      	cmp	r1, #1
  40b502:	dd1f      	ble.n	40b544 <lv_draw_rect+0x444>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
  40b504:	460d      	mov	r5, r1
  40b506:	f44f 567f 	mov.w	r6, #16320	; 0x3fc0
  40b50a:	fb96 f6f1 	sdiv	r6, r6, r1
        for(i = 0; i < (uint32_t)size * size; i++) {
  40b50e:	9f04      	ldr	r7, [sp, #16]
  40b510:	fb07 f707 	mul.w	r7, r7, r7
  40b514:	b197      	cbz	r7, 40b53c <lv_draw_rect+0x43c>
  40b516:	9a08      	ldr	r2, [sp, #32]
  40b518:	4613      	mov	r3, r2
  40b51a:	eb02 0747 	add.w	r7, r2, r7, lsl #1
  40b51e:	e003      	b.n	40b528 <lv_draw_rect+0x428>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
  40b520:	801e      	strh	r6, [r3, #0]
  40b522:	3302      	adds	r3, #2
        for(i = 0; i < (uint32_t)size * size; i++) {
  40b524:	429f      	cmp	r7, r3
  40b526:	d009      	beq.n	40b53c <lv_draw_rect+0x43c>
            if(sh_buf[i] == 0) continue;
  40b528:	881a      	ldrh	r2, [r3, #0]
  40b52a:	2a00      	cmp	r2, #0
  40b52c:	d0f9      	beq.n	40b522 <lv_draw_rect+0x422>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
  40b52e:	2aff      	cmp	r2, #255	; 0xff
  40b530:	d0f6      	beq.n	40b520 <lv_draw_rect+0x420>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40b532:	0192      	lsls	r2, r2, #6
  40b534:	fb92 f2f5 	sdiv	r2, r2, r5
  40b538:	801a      	strh	r2, [r3, #0]
  40b53a:	e7f2      	b.n	40b522 <lv_draw_rect+0x422>
        shadow_blur_corner(size, sw, sh_buf);
  40b53c:	9a08      	ldr	r2, [sp, #32]
  40b53e:	4648      	mov	r0, r9
  40b540:	4b88      	ldr	r3, [pc, #544]	; (40b764 <lv_draw_rect+0x664>)
  40b542:	4798      	blx	r3
    for(x = 0; x < size * size; x++) {
  40b544:	fb08 f808 	mul.w	r8, r8, r8
  40b548:	f1b8 0f00 	cmp.w	r8, #0
  40b54c:	dd0a      	ble.n	40b564 <lv_draw_rect+0x464>
  40b54e:	9908      	ldr	r1, [sp, #32]
  40b550:	460b      	mov	r3, r1
  40b552:	1e4a      	subs	r2, r1, #1
  40b554:	eb01 0048 	add.w	r0, r1, r8, lsl #1
        res_buf[x] = sh_buf[x];
  40b558:	f833 1b02 	ldrh.w	r1, [r3], #2
  40b55c:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
  40b560:	4298      	cmp	r0, r3
  40b562:	d1f9      	bne.n	40b558 <lv_draw_rect+0x458>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
  40b564:	a818      	add	r0, sp, #96	; 0x60
  40b566:	4b80      	ldr	r3, [pc, #512]	; (40b768 <lv_draw_rect+0x668>)
  40b568:	4798      	blx	r3
    if(mask_any || dsc->bg_opa < LV_OPA_COVER) simple = false;
  40b56a:	b918      	cbnz	r0, 40b574 <lv_draw_rect+0x474>
  40b56c:	7aa3      	ldrb	r3, [r4, #10]
  40b56e:	2bff      	cmp	r3, #255	; 0xff
  40b570:	f000 80f0 	beq.w	40b754 <lv_draw_rect+0x654>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
  40b574:	2301      	movs	r3, #1
  40b576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b578:	a91c      	add	r1, sp, #112	; 0x70
  40b57a:	a822      	add	r0, sp, #136	; 0x88
  40b57c:	4d7b      	ldr	r5, [pc, #492]	; (40b76c <lv_draw_rect+0x66c>)
  40b57e:	47a8      	blx	r5
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40b580:	2100      	movs	r1, #0
  40b582:	a822      	add	r0, sp, #136	; 0x88
  40b584:	4b7a      	ldr	r3, [pc, #488]	; (40b770 <lv_draw_rect+0x670>)
  40b586:	4798      	blx	r3
  40b588:	900c      	str	r0, [sp, #48]	; 0x30
  40b58a:	2300      	movs	r3, #0
  40b58c:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b58e:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
  40b592:	3001      	adds	r0, #1
  40b594:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  40b598:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
  40b59a:	b200      	sxth	r0, r0
  40b59c:	4b75      	ldr	r3, [pc, #468]	; (40b774 <lv_draw_rect+0x674>)
  40b59e:	4798      	blx	r3
  40b5a0:	900b      	str	r0, [sp, #44]	; 0x2c
  40b5a2:	9016      	str	r0, [sp, #88]	; 0x58
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
  40b5a4:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
  40b5a8:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
  40b5ac:	1c69      	adds	r1, r5, #1
  40b5ae:	b289      	uxth	r1, r1
  40b5b0:	1a8b      	subs	r3, r1, r2
  40b5b2:	b21b      	sxth	r3, r3
  40b5b4:	2b00      	cmp	r3, #0
  40b5b6:	bfb8      	it	lt
  40b5b8:	3301      	addlt	r3, #1
  40b5ba:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40b5be:	b21b      	sxth	r3, r3
  40b5c0:	9304      	str	r3, [sp, #16]
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
  40b5c2:	f9bd 0062 	ldrsh.w	r0, [sp, #98]	; 0x62
  40b5c6:	b283      	uxth	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b5c8:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
  40b5cc:	3201      	adds	r2, #1
  40b5ce:	1ad2      	subs	r2, r2, r3
  40b5d0:	b212      	sxth	r2, r2
  40b5d2:	2a00      	cmp	r2, #0
  40b5d4:	bfb8      	it	lt
  40b5d6:	3201      	addlt	r2, #1
  40b5d8:	eb03 0262 	add.w	r2, r3, r2, asr #1
  40b5dc:	fa0f f982 	sxth.w	r9, r2
    blend_area.x2 = shadow_area.x2;
  40b5e0:	f8ad 507c 	strh.w	r5, [sp, #124]	; 0x7c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
  40b5e4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
    blend_area.y1 = shadow_area.y1;
  40b5e8:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
  40b5ec:	1b4a      	subs	r2, r1, r5
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
  40b5ee:	b212      	sxth	r2, r2
  40b5f0:	9904      	ldr	r1, [sp, #16]
  40b5f2:	428a      	cmp	r2, r1
  40b5f4:	bfb8      	it	lt
  40b5f6:	460a      	movlt	r2, r1
  40b5f8:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
  40b5fc:	3b01      	subs	r3, #1
  40b5fe:	442b      	add	r3, r5
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
  40b600:	b21b      	sxth	r3, r3
  40b602:	454b      	cmp	r3, r9
  40b604:	bfa8      	it	ge
  40b606:	464b      	movge	r3, r9
  40b608:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b60c:	9a06      	ldr	r2, [sp, #24]
  40b60e:	a91e      	add	r1, sp, #120	; 0x78
  40b610:	a820      	add	r0, sp, #128	; 0x80
  40b612:	4b59      	ldr	r3, [pc, #356]	; (40b778 <lv_draw_rect+0x678>)
  40b614:	4798      	blx	r3
  40b616:	2800      	cmp	r0, #0
  40b618:	f040 80b0 	bne.w	40b77c <lv_draw_rect+0x67c>
    blend_area.x2 = shadow_area.x2;
  40b61c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
  40b620:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
  40b624:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y2;
  40b628:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
  40b62c:	3201      	adds	r2, #1
  40b62e:	1b52      	subs	r2, r2, r5
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
  40b630:	b212      	sxth	r2, r2
  40b632:	9904      	ldr	r1, [sp, #16]
  40b634:	428a      	cmp	r2, r1
  40b636:	bfb8      	it	lt
  40b638:	460a      	movlt	r2, r1
  40b63a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
  40b63e:	f109 0201 	add.w	r2, r9, #1
  40b642:	9205      	str	r2, [sp, #20]
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
  40b644:	3301      	adds	r3, #1
  40b646:	1b5b      	subs	r3, r3, r5
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
  40b648:	b21b      	sxth	r3, r3
  40b64a:	4293      	cmp	r3, r2
  40b64c:	bfb8      	it	lt
  40b64e:	4613      	movlt	r3, r2
  40b650:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b654:	9a06      	ldr	r2, [sp, #24]
  40b656:	a91e      	add	r1, sp, #120	; 0x78
  40b658:	a820      	add	r0, sp, #128	; 0x80
  40b65a:	4b47      	ldr	r3, [pc, #284]	; (40b778 <lv_draw_rect+0x678>)
  40b65c:	4798      	blx	r3
  40b65e:	2800      	cmp	r0, #0
  40b660:	f040 8108 	bne.w	40b874 <lv_draw_rect+0x774>
    blend_area.x1 = shadow_area.x1 + corner_size;
  40b664:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  40b668:	442b      	add	r3, r5
  40b66a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    blend_area.x2 = shadow_area.x2 - corner_size;
  40b66e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  40b672:	1b5b      	subs	r3, r3, r5
  40b674:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    blend_area.y1 = shadow_area.y1;
  40b678:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
  40b67c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
  40b680:	3b01      	subs	r3, #1
  40b682:	442b      	add	r3, r5
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
  40b684:	b21b      	sxth	r3, r3
  40b686:	454b      	cmp	r3, r9
  40b688:	bfa8      	it	ge
  40b68a:	464b      	movge	r3, r9
  40b68c:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b690:	9a06      	ldr	r2, [sp, #24]
  40b692:	a91e      	add	r1, sp, #120	; 0x78
  40b694:	a820      	add	r0, sp, #128	; 0x80
  40b696:	4b38      	ldr	r3, [pc, #224]	; (40b778 <lv_draw_rect+0x678>)
  40b698:	4798      	blx	r3
  40b69a:	2800      	cmp	r0, #0
  40b69c:	f040 8166 	bne.w	40b96c <lv_draw_rect+0x86c>
    blend_area.x1 = shadow_area.x1 + corner_size;
  40b6a0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  40b6a4:	442b      	add	r3, r5
  40b6a6:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    blend_area.x2 = shadow_area.x2 - corner_size;
  40b6aa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  40b6ae:	1b5b      	subs	r3, r3, r5
  40b6b0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
  40b6b4:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y2;
  40b6b8:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
  40b6bc:	3301      	adds	r3, #1
  40b6be:	1b5b      	subs	r3, r3, r5
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
  40b6c0:	b21b      	sxth	r3, r3
  40b6c2:	9a05      	ldr	r2, [sp, #20]
  40b6c4:	4293      	cmp	r3, r2
  40b6c6:	bfb8      	it	lt
  40b6c8:	4613      	movlt	r3, r2
  40b6ca:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b6ce:	9a06      	ldr	r2, [sp, #24]
  40b6d0:	a91e      	add	r1, sp, #120	; 0x78
  40b6d2:	a820      	add	r0, sp, #128	; 0x80
  40b6d4:	4b28      	ldr	r3, [pc, #160]	; (40b778 <lv_draw_rect+0x678>)
  40b6d6:	4798      	blx	r3
  40b6d8:	2800      	cmp	r0, #0
  40b6da:	f040 81d7 	bne.w	40ba8c <lv_draw_rect+0x98c>
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
  40b6de:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2;
  40b6e2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    blend_area.y2 = shadow_area.y2 - corner_size;
  40b6e6:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
  40b6ea:	1b52      	subs	r2, r2, r5
  40b6ec:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y1 + corner_size;
  40b6ee:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  40b6f2:	4429      	add	r1, r5
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
  40b6f4:	b209      	sxth	r1, r1
  40b6f6:	9805      	ldr	r0, [sp, #20]
  40b6f8:	4281      	cmp	r1, r0
  40b6fa:	bfa8      	it	ge
  40b6fc:	4601      	movge	r1, r0
  40b6fe:	f8ad 107a 	strh.w	r1, [sp, #122]	; 0x7a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
  40b702:	454a      	cmp	r2, r9
  40b704:	bfb8      	it	lt
  40b706:	464a      	movlt	r2, r9
  40b708:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
  40b70c:	3301      	adds	r3, #1
  40b70e:	1b5b      	subs	r3, r3, r5
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
  40b710:	b21b      	sxth	r3, r3
  40b712:	9a04      	ldr	r2, [sp, #16]
  40b714:	4293      	cmp	r3, r2
  40b716:	bfb8      	it	lt
  40b718:	4613      	movlt	r3, r2
  40b71a:	a92a      	add	r1, sp, #168	; 0xa8
  40b71c:	f821 3d30 	strh.w	r3, [r1, #-48]!
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b720:	9a06      	ldr	r2, [sp, #24]
  40b722:	a820      	add	r0, sp, #128	; 0x80
  40b724:	4b14      	ldr	r3, [pc, #80]	; (40b778 <lv_draw_rect+0x678>)
  40b726:	4798      	blx	r3
  40b728:	2800      	cmp	r0, #0
  40b72a:	f040 8230 	bne.w	40bb8e <lv_draw_rect+0xa8e>
    sh_buf_tmp = sh_buf ;
  40b72e:	9b08      	ldr	r3, [sp, #32]
  40b730:	9317      	str	r3, [sp, #92]	; 0x5c
    for(y = 0; y < corner_size; y++) {
  40b732:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b734:	2b00      	cmp	r3, #0
  40b736:	f340 82c1 	ble.w	40bcbc <lv_draw_rect+0xbbc>
        for(x = 0; x < corner_size / 2; x++) {
  40b73a:	469c      	mov	ip, r3
  40b73c:	f2c0 8297 	blt.w	40bc6e <lv_draw_rect+0xb6e>
  40b740:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  40b744:	f8dd e020 	ldr.w	lr, [sp, #32]
  40b748:	2700      	movs	r7, #0
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
  40b74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b74c:	f102 38ff 	add.w	r8, r2, #4294967295
  40b750:	4693      	mov	fp, r2
  40b752:	e29c      	b.n	40bc8e <lv_draw_rect+0xb8e>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  40b754:	f04f 33ff 	mov.w	r3, #4294967295
  40b758:	930c      	str	r3, [sp, #48]	; 0x30
  40b75a:	e718      	b.n	40b58e <lv_draw_rect+0x48e>
  40b75c:	00411105 	.word	0x00411105
  40b760:	0040a09d 	.word	0x0040a09d
  40b764:	0040a761 	.word	0x0040a761
  40b768:	0040a0cd 	.word	0x0040a0cd
  40b76c:	0040a2a1 	.word	0x0040a2a1
  40b770:	00409f91 	.word	0x00409f91
  40b774:	004115a9 	.word	0x004115a9
  40b778:	004107cd 	.word	0x004107cd
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b77c:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
  40b780:	4632      	mov	r2, r6
  40b782:	a91c      	add	r1, sp, #112	; 0x70
  40b784:	a820      	add	r0, sp, #128	; 0x80
  40b786:	4ba5      	ldr	r3, [pc, #660]	; (40ba1c <lv_draw_rect+0x91c>)
  40b788:	4798      	blx	r3
  40b78a:	2800      	cmp	r0, #0
  40b78c:	f47f af46 	bne.w	40b61c <lv_draw_rect+0x51c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b790:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40b794:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40b798:	3301      	adds	r3, #1
  40b79a:	1a5b      	subs	r3, r3, r1
  40b79c:	b21b      	sxth	r3, r3
  40b79e:	930d      	str	r3, [sp, #52]	; 0x34
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
  40b7a0:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40b7a4:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
  40b7a8:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
  40b7aa:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
  40b7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b7b0:	1a12      	subs	r2, r2, r0
  40b7b2:	3201      	adds	r2, #1
  40b7b4:	1a8a      	subs	r2, r1, r2
  40b7b6:	fb00 2303 	mla	r3, r0, r3, r2
  40b7ba:	9a08      	ldr	r2, [sp, #32]
  40b7bc:	4413      	add	r3, r2
  40b7be:	9317      	str	r3, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40b7c0:	9b07      	ldr	r3, [sp, #28]
  40b7c2:	b9c3      	cbnz	r3, 40b7f6 <lv_draw_rect+0x6f6>
        else simple_sub = simple;
  40b7c4:	9b07      	ldr	r3, [sp, #28]
  40b7c6:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40b7c8:	f10d 0858 	add.w	r8, sp, #88	; 0x58
        if(w > 0) {
  40b7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b7ce:	2b00      	cmp	r3, #0
  40b7d0:	f77f af24 	ble.w	40b61c <lv_draw_rect+0x51c>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40b7d4:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  40b7d8:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40b7dc:	42b3      	cmp	r3, r6
  40b7de:	f6ff af1d 	blt.w	40b61c <lv_draw_rect+0x51c>
  40b7e2:	2702      	movs	r7, #2
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40b7e4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40b7e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40b7ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40b7f0:	46ab      	mov	fp, r5
  40b7f2:	9205      	str	r2, [sp, #20]
  40b7f4:	e01f      	b.n	40b836 <lv_draw_rect+0x736>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40b7f6:	4632      	mov	r2, r6
  40b7f8:	a91c      	add	r1, sp, #112	; 0x70
  40b7fa:	a820      	add	r0, sp, #128	; 0x80
  40b7fc:	4b88      	ldr	r3, [pc, #544]	; (40ba20 <lv_draw_rect+0x920>)
  40b7fe:	4798      	blx	r3
  40b800:	9b07      	ldr	r3, [sp, #28]
  40b802:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40b804:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
  40b808:	e7e0      	b.n	40b7cc <lv_draw_rect+0x6cc>
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40b80a:	78a3      	ldrb	r3, [r4, #2]
  40b80c:	9302      	str	r3, [sp, #8]
  40b80e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40b812:	9301      	str	r3, [sp, #4]
  40b814:	9700      	str	r7, [sp, #0]
  40b816:	f8d8 3000 	ldr.w	r3, [r8]
  40b81a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40b81c:	a91e      	add	r1, sp, #120	; 0x78
  40b81e:	a820      	add	r0, sp, #128	; 0x80
  40b820:	4d80      	ldr	r5, [pc, #512]	; (40ba24 <lv_draw_rect+0x924>)
  40b822:	47a8      	blx	r5
                sh_buf_tmp += corner_size;
  40b824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b826:	444b      	add	r3, r9
  40b828:	9317      	str	r3, [sp, #92]	; 0x5c
  40b82a:	3601      	adds	r6, #1
  40b82c:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40b82e:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40b832:	42b3      	cmp	r3, r6
  40b834:	db18      	blt.n	40b868 <lv_draw_rect+0x768>
                blend_area.y1 = y;
  40b836:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40b83a:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(!simple_sub) {
  40b83e:	9b05      	ldr	r3, [sp, #20]
  40b840:	2b00      	cmp	r3, #0
  40b842:	d1e2      	bne.n	40b80a <lv_draw_rect+0x70a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
  40b844:	464a      	mov	r2, r9
  40b846:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40b848:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40b84a:	4628      	mov	r0, r5
  40b84c:	4b76      	ldr	r3, [pc, #472]	; (40ba28 <lv_draw_rect+0x928>)
  40b84e:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40b850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b852:	4632      	mov	r2, r6
  40b854:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40b858:	4628      	mov	r0, r5
  40b85a:	4d74      	ldr	r5, [pc, #464]	; (40ba2c <lv_draw_rect+0x92c>)
  40b85c:	47a8      	blx	r5
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40b85e:	2801      	cmp	r0, #1
  40b860:	bf14      	ite	ne
  40b862:	4607      	movne	r7, r0
  40b864:	2702      	moveq	r7, #2
  40b866:	e7d0      	b.n	40b80a <lv_draw_rect+0x70a>
  40b868:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40b86c:	465d      	mov	r5, fp
  40b86e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  40b872:	e6d3      	b.n	40b61c <lv_draw_rect+0x51c>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b874:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
  40b878:	4632      	mov	r2, r6
  40b87a:	a91c      	add	r1, sp, #112	; 0x70
  40b87c:	a820      	add	r0, sp, #128	; 0x80
  40b87e:	4b67      	ldr	r3, [pc, #412]	; (40ba1c <lv_draw_rect+0x91c>)
  40b880:	4798      	blx	r3
  40b882:	2800      	cmp	r0, #0
  40b884:	f47f aeee 	bne.w	40b664 <lv_draw_rect+0x564>
  40b888:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40b88c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40b890:	3301      	adds	r3, #1
  40b892:	1a5b      	subs	r3, r3, r1
  40b894:	b21b      	sxth	r3, r3
  40b896:	930e      	str	r3, [sp, #56]	; 0x38
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
  40b898:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40b89c:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
  40b8a0:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
  40b8a2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
  40b8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b8a8:	1a12      	subs	r2, r2, r0
  40b8aa:	3201      	adds	r2, #1
  40b8ac:	1a8a      	subs	r2, r1, r2
  40b8ae:	fb00 2303 	mla	r3, r0, r3, r2
  40b8b2:	9a08      	ldr	r2, [sp, #32]
  40b8b4:	4413      	add	r3, r2
  40b8b6:	9317      	str	r3, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40b8b8:	9b07      	ldr	r3, [sp, #28]
  40b8ba:	b9c3      	cbnz	r3, 40b8ee <lv_draw_rect+0x7ee>
        else simple_sub = simple;
  40b8bc:	9b07      	ldr	r3, [sp, #28]
  40b8be:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40b8c0:	f10d 0858 	add.w	r8, sp, #88	; 0x58
        if(w > 0) {
  40b8c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b8c6:	2b00      	cmp	r3, #0
  40b8c8:	f77f aecc 	ble.w	40b664 <lv_draw_rect+0x564>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
  40b8cc:	f9bd 6086 	ldrsh.w	r6, [sp, #134]	; 0x86
  40b8d0:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40b8d4:	42b3      	cmp	r3, r6
  40b8d6:	f73f aec5 	bgt.w	40b664 <lv_draw_rect+0x564>
  40b8da:	2702      	movs	r7, #2
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40b8dc:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40b8e0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  40b8e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40b8e8:	46ab      	mov	fp, r5
  40b8ea:	920d      	str	r2, [sp, #52]	; 0x34
  40b8ec:	e01f      	b.n	40b92e <lv_draw_rect+0x82e>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40b8ee:	4632      	mov	r2, r6
  40b8f0:	a91c      	add	r1, sp, #112	; 0x70
  40b8f2:	a820      	add	r0, sp, #128	; 0x80
  40b8f4:	4b4a      	ldr	r3, [pc, #296]	; (40ba20 <lv_draw_rect+0x920>)
  40b8f6:	4798      	blx	r3
  40b8f8:	9b07      	ldr	r3, [sp, #28]
  40b8fa:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40b8fc:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
  40b900:	e7e0      	b.n	40b8c4 <lv_draw_rect+0x7c4>
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40b902:	78a3      	ldrb	r3, [r4, #2]
  40b904:	9302      	str	r3, [sp, #8]
  40b906:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40b90a:	9301      	str	r3, [sp, #4]
  40b90c:	9700      	str	r7, [sp, #0]
  40b90e:	f8d8 3000 	ldr.w	r3, [r8]
  40b912:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40b914:	a91e      	add	r1, sp, #120	; 0x78
  40b916:	a820      	add	r0, sp, #128	; 0x80
  40b918:	4d42      	ldr	r5, [pc, #264]	; (40ba24 <lv_draw_rect+0x924>)
  40b91a:	47a8      	blx	r5
                sh_buf_tmp += corner_size;
  40b91c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b91e:	444b      	add	r3, r9
  40b920:	9317      	str	r3, [sp, #92]	; 0x5c
  40b922:	3e01      	subs	r6, #1
  40b924:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
  40b926:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40b92a:	42b3      	cmp	r3, r6
  40b92c:	dc18      	bgt.n	40b960 <lv_draw_rect+0x860>
                blend_area.y1 = y;
  40b92e:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40b932:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(!simple_sub) {
  40b936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b938:	2b00      	cmp	r3, #0
  40b93a:	d1e2      	bne.n	40b902 <lv_draw_rect+0x802>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
  40b93c:	464a      	mov	r2, r9
  40b93e:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40b940:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40b942:	4628      	mov	r0, r5
  40b944:	4b38      	ldr	r3, [pc, #224]	; (40ba28 <lv_draw_rect+0x928>)
  40b946:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40b948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b94a:	4632      	mov	r2, r6
  40b94c:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40b950:	4628      	mov	r0, r5
  40b952:	4d36      	ldr	r5, [pc, #216]	; (40ba2c <lv_draw_rect+0x92c>)
  40b954:	47a8      	blx	r5
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40b956:	2801      	cmp	r0, #1
  40b958:	bf14      	ite	ne
  40b95a:	4607      	movne	r7, r0
  40b95c:	2702      	moveq	r7, #2
  40b95e:	e7d0      	b.n	40b902 <lv_draw_rect+0x802>
  40b960:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  40b964:	465d      	mov	r5, fp
  40b966:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  40b96a:	e67b      	b.n	40b664 <lv_draw_rect+0x564>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40b96c:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
  40b970:	4632      	mov	r2, r6
  40b972:	a91c      	add	r1, sp, #112	; 0x70
  40b974:	a820      	add	r0, sp, #128	; 0x80
  40b976:	4b29      	ldr	r3, [pc, #164]	; (40ba1c <lv_draw_rect+0x91c>)
  40b978:	4798      	blx	r3
  40b97a:	2800      	cmp	r0, #0
  40b97c:	f47f ae90 	bne.w	40b6a0 <lv_draw_rect+0x5a0>
  40b980:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40b984:	3301      	adds	r3, #1
  40b986:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
  40b98a:	1a9b      	subs	r3, r3, r2
  40b98c:	b21b      	sxth	r3, r3
  40b98e:	930d      	str	r3, [sp, #52]	; 0x34
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
  40b990:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40b994:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
  40b998:	1a9b      	subs	r3, r3, r2
  40b99a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b99c:	9908      	ldr	r1, [sp, #32]
  40b99e:	fb02 1303 	mla	r3, r2, r3, r1
  40b9a2:	9317      	str	r3, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40b9a4:	9b07      	ldr	r3, [sp, #28]
  40b9a6:	b99b      	cbnz	r3, 40b9d0 <lv_draw_rect+0x8d0>
        else simple_sub = simple;
  40b9a8:	9f07      	ldr	r7, [sp, #28]
        if(w > 0) {
  40b9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b9ac:	2b00      	cmp	r3, #0
  40b9ae:	f77f ae77 	ble.w	40b6a0 <lv_draw_rect+0x5a0>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40b9b2:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  40b9b6:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40b9ba:	42b3      	cmp	r3, r6
  40b9bc:	f6ff ae70 	blt.w	40b6a0 <lv_draw_rect+0x5a0>
                    _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40b9c0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 40ba24 <lv_draw_rect+0x924>
  40b9c4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40b9c8:	950f      	str	r5, [sp, #60]	; 0x3c
  40b9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b9cc:	930b      	str	r3, [sp, #44]	; 0x2c
  40b9ce:	e047      	b.n	40ba60 <lv_draw_rect+0x960>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40b9d0:	4632      	mov	r2, r6
  40b9d2:	a91c      	add	r1, sp, #112	; 0x70
  40b9d4:	a820      	add	r0, sp, #128	; 0x80
  40b9d6:	4b12      	ldr	r3, [pc, #72]	; (40ba20 <lv_draw_rect+0x920>)
  40b9d8:	4798      	blx	r3
  40b9da:	9f07      	ldr	r7, [sp, #28]
  40b9dc:	e7e5      	b.n	40b9aa <lv_draw_rect+0x8aa>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
  40b9de:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
  40b9e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40b9e4:	462a      	mov	r2, r5
  40b9e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b9e8:	7819      	ldrb	r1, [r3, #0]
  40b9ea:	4648      	mov	r0, r9
  40b9ec:	4b10      	ldr	r3, [pc, #64]	; (40ba30 <lv_draw_rect+0x930>)
  40b9ee:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40b9f0:	462b      	mov	r3, r5
  40b9f2:	4632      	mov	r2, r6
  40b9f4:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40b9f8:	4648      	mov	r0, r9
  40b9fa:	4d0c      	ldr	r5, [pc, #48]	; (40ba2c <lv_draw_rect+0x92c>)
  40b9fc:	47a8      	blx	r5
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40b9fe:	2801      	cmp	r0, #1
  40ba00:	bf08      	it	eq
  40ba02:	2002      	moveq	r0, #2
                    _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40ba04:	78a3      	ldrb	r3, [r4, #2]
  40ba06:	9302      	str	r3, [sp, #8]
  40ba08:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40ba0c:	9301      	str	r3, [sp, #4]
  40ba0e:	9000      	str	r0, [sp, #0]
  40ba10:	464b      	mov	r3, r9
  40ba12:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40ba14:	a91e      	add	r1, sp, #120	; 0x78
  40ba16:	a820      	add	r0, sp, #128	; 0x80
  40ba18:	47c0      	blx	r8
  40ba1a:	e017      	b.n	40ba4c <lv_draw_rect+0x94c>
  40ba1c:	00410991 	.word	0x00410991
  40ba20:	00410a39 	.word	0x00410a39
  40ba24:	00406181 	.word	0x00406181
  40ba28:	00411161 	.word	0x00411161
  40ba2c:	00409fed 	.word	0x00409fed
  40ba30:	004113a3 	.word	0x004113a3
                    lv_opa_t line_opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
  40ba34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ba36:	781b      	ldrb	r3, [r3, #0]
                    _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, line_opa,
  40ba38:	78a2      	ldrb	r2, [r4, #2]
  40ba3a:	9202      	str	r2, [sp, #8]
  40ba3c:	9301      	str	r3, [sp, #4]
  40ba3e:	2301      	movs	r3, #1
  40ba40:	9300      	str	r3, [sp, #0]
  40ba42:	2300      	movs	r3, #0
  40ba44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40ba46:	a91e      	add	r1, sp, #120	; 0x78
  40ba48:	a820      	add	r0, sp, #128	; 0x80
  40ba4a:	47c0      	blx	r8
                sh_buf_tmp += corner_size;
  40ba4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ba4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ba50:	4413      	add	r3, r2
  40ba52:	9317      	str	r3, [sp, #92]	; 0x5c
  40ba54:	3601      	adds	r6, #1
  40ba56:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40ba58:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40ba5c:	42b3      	cmp	r3, r6
  40ba5e:	db11      	blt.n	40ba84 <lv_draw_rect+0x984>
                blend_area.y1 = y;
  40ba60:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40ba64:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(!simple_sub) {
  40ba68:	2f00      	cmp	r7, #0
  40ba6a:	d0b8      	beq.n	40b9de <lv_draw_rect+0x8de>
                    lv_opa_t line_opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
  40ba6c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  40ba70:	d0e0      	beq.n	40ba34 <lv_draw_rect+0x934>
  40ba72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ba74:	781a      	ldrb	r2, [r3, #0]
  40ba76:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40ba7a:	fb03 f302 	mul.w	r3, r3, r2
  40ba7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40ba82:	e7d9      	b.n	40ba38 <lv_draw_rect+0x938>
  40ba84:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  40ba88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ba8a:	e609      	b.n	40b6a0 <lv_draw_rect+0x5a0>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40ba8c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  40ba90:	930d      	str	r3, [sp, #52]	; 0x34
  40ba92:	461a      	mov	r2, r3
  40ba94:	a91c      	add	r1, sp, #112	; 0x70
  40ba96:	a820      	add	r0, sp, #128	; 0x80
  40ba98:	4b81      	ldr	r3, [pc, #516]	; (40bca0 <lv_draw_rect+0xba0>)
  40ba9a:	4798      	blx	r3
  40ba9c:	2800      	cmp	r0, #0
  40ba9e:	f47f ae1e 	bne.w	40b6de <lv_draw_rect+0x5de>
  40baa2:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40baa6:	3301      	adds	r3, #1
  40baa8:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
  40baac:	1a9b      	subs	r3, r3, r2
  40baae:	b21b      	sxth	r3, r3
  40bab0:	461a      	mov	r2, r3
  40bab2:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
  40bab4:	f9bd 6086 	ldrsh.w	r6, [sp, #134]	; 0x86
  40bab8:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40babc:	1b9b      	subs	r3, r3, r6
  40babe:	9809      	ldr	r0, [sp, #36]	; 0x24
  40bac0:	9f08      	ldr	r7, [sp, #32]
  40bac2:	fb00 7303 	mla	r3, r0, r3, r7
  40bac6:	9317      	str	r3, [sp, #92]	; 0x5c
        if(w > 0) {
  40bac8:	2a00      	cmp	r2, #0
  40baca:	f77f ae08 	ble.w	40b6de <lv_draw_rect+0x5de>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
  40bace:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40bad2:	42b3      	cmp	r3, r6
  40bad4:	f73f ae03 	bgt.w	40b6de <lv_draw_rect+0x5de>
                    _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, line_opa,
  40bad8:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 40bcb4 <lv_draw_rect+0xbb4>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
  40badc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40bae0:	f8dd 901c 	ldr.w	r9, [sp, #28]
  40bae4:	950f      	str	r5, [sp, #60]	; 0x3c
  40bae6:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  40baea:	4682      	mov	sl, r0
  40baec:	e022      	b.n	40bb34 <lv_draw_rect+0xa34>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40baee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40baf0:	a91c      	add	r1, sp, #112	; 0x70
  40baf2:	a820      	add	r0, sp, #128	; 0x80
  40baf4:	4b6b      	ldr	r3, [pc, #428]	; (40bca4 <lv_draw_rect+0xba4>)
  40baf6:	4798      	blx	r3
                    lv_opa_t line_opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
  40baf8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  40bafc:	d03e      	beq.n	40bb7c <lv_draw_rect+0xa7c>
  40bafe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40bb00:	781a      	ldrb	r2, [r3, #0]
  40bb02:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40bb06:	fb03 f302 	mul.w	r3, r3, r2
  40bb0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
                    _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, line_opa,
  40bb0e:	78a2      	ldrb	r2, [r4, #2]
  40bb10:	9202      	str	r2, [sp, #8]
  40bb12:	9301      	str	r3, [sp, #4]
  40bb14:	2301      	movs	r3, #1
  40bb16:	9300      	str	r3, [sp, #0]
  40bb18:	2300      	movs	r3, #0
  40bb1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40bb1c:	a91e      	add	r1, sp, #120	; 0x78
  40bb1e:	a820      	add	r0, sp, #128	; 0x80
  40bb20:	47c0      	blx	r8
                sh_buf_tmp += corner_size;
  40bb22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40bb24:	4453      	add	r3, sl
  40bb26:	9317      	str	r3, [sp, #92]	; 0x5c
  40bb28:	3e01      	subs	r6, #1
  40bb2a:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
  40bb2c:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40bb30:	42b3      	cmp	r3, r6
  40bb32:	dc26      	bgt.n	40bb82 <lv_draw_rect+0xa82>
                blend_area.y1 = y;
  40bb34:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40bb38:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40bb3c:	f1b9 0f00 	cmp.w	r9, #0
  40bb40:	d1d5      	bne.n	40baee <lv_draw_rect+0x9ee>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
  40bb42:	9f16      	ldr	r7, [sp, #88]	; 0x58
  40bb44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40bb46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40bb48:	7819      	ldrb	r1, [r3, #0]
  40bb4a:	4638      	mov	r0, r7
  40bb4c:	4d56      	ldr	r5, [pc, #344]	; (40bca8 <lv_draw_rect+0xba8>)
  40bb4e:	47a8      	blx	r5
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40bb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bb52:	4632      	mov	r2, r6
  40bb54:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40bb58:	4638      	mov	r0, r7
  40bb5a:	4d54      	ldr	r5, [pc, #336]	; (40bcac <lv_draw_rect+0xbac>)
  40bb5c:	47a8      	blx	r5
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40bb5e:	2801      	cmp	r0, #1
  40bb60:	bf08      	it	eq
  40bb62:	2002      	moveq	r0, #2
                    _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40bb64:	78a3      	ldrb	r3, [r4, #2]
  40bb66:	9302      	str	r3, [sp, #8]
  40bb68:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40bb6c:	9301      	str	r3, [sp, #4]
  40bb6e:	9000      	str	r0, [sp, #0]
  40bb70:	463b      	mov	r3, r7
  40bb72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40bb74:	a91e      	add	r1, sp, #120	; 0x78
  40bb76:	a820      	add	r0, sp, #128	; 0x80
  40bb78:	47c0      	blx	r8
  40bb7a:	e7d2      	b.n	40bb22 <lv_draw_rect+0xa22>
                    lv_opa_t line_opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
  40bb7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40bb7e:	781b      	ldrb	r3, [r3, #0]
  40bb80:	e7c5      	b.n	40bb0e <lv_draw_rect+0xa0e>
  40bb82:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  40bb86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40bb88:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  40bb8c:	e5a7      	b.n	40b6de <lv_draw_rect+0x5de>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40bb8e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
  40bb92:	4632      	mov	r2, r6
  40bb94:	a91c      	add	r1, sp, #112	; 0x70
  40bb96:	a820      	add	r0, sp, #128	; 0x80
  40bb98:	4b41      	ldr	r3, [pc, #260]	; (40bca0 <lv_draw_rect+0xba0>)
  40bb9a:	4798      	blx	r3
  40bb9c:	2800      	cmp	r0, #0
  40bb9e:	f47f adc6 	bne.w	40b72e <lv_draw_rect+0x62e>
  40bba2:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  40bba6:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40bbaa:	3301      	adds	r3, #1
  40bbac:	1a9b      	subs	r3, r3, r2
  40bbae:	b21b      	sxth	r3, r3
  40bbb0:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
  40bbb2:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
  40bbb6:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bbb8:	1a5b      	subs	r3, r3, r1
  40bbba:	3301      	adds	r3, #1
  40bbbc:	1ad3      	subs	r3, r2, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
  40bbbe:	1e4a      	subs	r2, r1, #1
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
  40bbc0:	fb01 3302 	mla	r3, r1, r2, r3
  40bbc4:	9a08      	ldr	r2, [sp, #32]
  40bbc6:	18d3      	adds	r3, r2, r3
  40bbc8:	930d      	str	r3, [sp, #52]	; 0x34
  40bbca:	9317      	str	r3, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40bbcc:	9b07      	ldr	r3, [sp, #28]
  40bbce:	b9b3      	cbnz	r3, 40bbfe <lv_draw_rect+0xafe>
        else simple_sub = simple;
  40bbd0:	9b07      	ldr	r3, [sp, #28]
  40bbd2:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40bbd4:	f10d 0858 	add.w	r8, sp, #88	; 0x58
        if(w > 0) {
  40bbd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bbda:	2b00      	cmp	r3, #0
  40bbdc:	f77f ada7 	ble.w	40b72e <lv_draw_rect+0x62e>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40bbe0:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  40bbe4:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40bbe8:	42b3      	cmp	r3, r6
  40bbea:	f6ff ada0 	blt.w	40b72e <lv_draw_rect+0x62e>
  40bbee:	2702      	movs	r7, #2
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40bbf0:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 40bcb4 <lv_draw_rect+0xbb4>
  40bbf4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40bbf8:	46a9      	mov	r9, r5
  40bbfa:	4615      	mov	r5, r2
  40bbfc:	e01b      	b.n	40bc36 <lv_draw_rect+0xb36>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40bbfe:	4632      	mov	r2, r6
  40bc00:	a91c      	add	r1, sp, #112	; 0x70
  40bc02:	a820      	add	r0, sp, #128	; 0x80
  40bc04:	4b27      	ldr	r3, [pc, #156]	; (40bca4 <lv_draw_rect+0xba4>)
  40bc06:	4798      	blx	r3
  40bc08:	9b07      	ldr	r3, [sp, #28]
  40bc0a:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40bc0c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
  40bc10:	e7e2      	b.n	40bbd8 <lv_draw_rect+0xad8>
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40bc12:	78a3      	ldrb	r3, [r4, #2]
  40bc14:	9302      	str	r3, [sp, #8]
  40bc16:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40bc1a:	9301      	str	r3, [sp, #4]
  40bc1c:	9700      	str	r7, [sp, #0]
  40bc1e:	f8d8 3000 	ldr.w	r3, [r8]
  40bc22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40bc24:	a91e      	add	r1, sp, #120	; 0x78
  40bc26:	a820      	add	r0, sp, #128	; 0x80
  40bc28:	47d8      	blx	fp
  40bc2a:	3601      	adds	r6, #1
  40bc2c:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40bc2e:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40bc32:	42b3      	cmp	r3, r6
  40bc34:	db17      	blt.n	40bc66 <lv_draw_rect+0xb66>
                blend_area.y1 = y;
  40bc36:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40bc3a:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(!simple_sub) {
  40bc3e:	2d00      	cmp	r5, #0
  40bc40:	d1e7      	bne.n	40bc12 <lv_draw_rect+0xb12>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
  40bc42:	9f16      	ldr	r7, [sp, #88]	; 0x58
  40bc44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40bc46:	990d      	ldr	r1, [sp, #52]	; 0x34
  40bc48:	4638      	mov	r0, r7
  40bc4a:	4b19      	ldr	r3, [pc, #100]	; (40bcb0 <lv_draw_rect+0xbb0>)
  40bc4c:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40bc4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bc50:	4632      	mov	r2, r6
  40bc52:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40bc56:	4638      	mov	r0, r7
  40bc58:	4f14      	ldr	r7, [pc, #80]	; (40bcac <lv_draw_rect+0xbac>)
  40bc5a:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40bc5c:	2801      	cmp	r0, #1
  40bc5e:	bf14      	ite	ne
  40bc60:	4607      	movne	r7, r0
  40bc62:	2702      	moveq	r7, #2
  40bc64:	e7d5      	b.n	40bc12 <lv_draw_rect+0xb12>
  40bc66:	464d      	mov	r5, r9
  40bc68:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  40bc6c:	e55f      	b.n	40b72e <lv_draw_rect+0x62e>
        for(x = 0; x < corner_size / 2; x++) {
  40bc6e:	f103 0c01 	add.w	ip, r3, #1
  40bc72:	e565      	b.n	40b740 <lv_draw_rect+0x640>
            lv_opa_t tmp = *start;
  40bc74:	7819      	ldrb	r1, [r3, #0]
            *start = *end;
  40bc76:	7810      	ldrb	r0, [r2, #0]
  40bc78:	f803 0b01 	strb.w	r0, [r3], #1
            *end = tmp;
  40bc7c:	f802 1901 	strb.w	r1, [r2], #-1
        for(x = 0; x < corner_size / 2; x++) {
  40bc80:	429e      	cmp	r6, r3
  40bc82:	d1f7      	bne.n	40bc74 <lv_draw_rect+0xb74>
  40bc84:	44de      	add	lr, fp
  40bc86:	3701      	adds	r7, #1
  40bc88:	b23f      	sxth	r7, r7
    for(y = 0; y < corner_size; y++) {
  40bc8a:	45bb      	cmp	fp, r7
  40bc8c:	dd14      	ble.n	40bcb8 <lv_draw_rect+0xbb8>
  40bc8e:	eb0e 0208 	add.w	r2, lr, r8
        for(x = 0; x < corner_size / 2; x++) {
  40bc92:	f1bc 0f00 	cmp.w	ip, #0
  40bc96:	ddf5      	ble.n	40bc84 <lv_draw_rect+0xb84>
  40bc98:	4673      	mov	r3, lr
  40bc9a:	eb0e 060c 	add.w	r6, lr, ip
  40bc9e:	e7e9      	b.n	40bc74 <lv_draw_rect+0xb74>
  40bca0:	00410991 	.word	0x00410991
  40bca4:	00410a39 	.word	0x00410a39
  40bca8:	004113a3 	.word	0x004113a3
  40bcac:	00409fed 	.word	0x00409fed
  40bcb0:	00411161 	.word	0x00411161
  40bcb4:	00406181 	.word	0x00406181
  40bcb8:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
    blend_area.x1 = shadow_area.x1;
  40bcbc:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40bcc0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    blend_area.y2 = shadow_area.y2 - corner_size;
  40bcc4:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
  40bcc8:	1b52      	subs	r2, r2, r5
  40bcca:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y1 + corner_size;
  40bccc:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  40bcd0:	4429      	add	r1, r5
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
  40bcd2:	b209      	sxth	r1, r1
  40bcd4:	9805      	ldr	r0, [sp, #20]
  40bcd6:	4281      	cmp	r1, r0
  40bcd8:	bfa8      	it	ge
  40bcda:	4601      	movge	r1, r0
  40bcdc:	f8ad 107a 	strh.w	r1, [sp, #122]	; 0x7a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
  40bce0:	454a      	cmp	r2, r9
  40bce2:	bfb8      	it	lt
  40bce4:	464a      	movlt	r2, r9
  40bce6:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
  40bcea:	9a04      	ldr	r2, [sp, #16]
  40bcec:	f102 3bff 	add.w	fp, r2, #4294967295
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
  40bcf0:	3b01      	subs	r3, #1
  40bcf2:	442b      	add	r3, r5
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
  40bcf4:	b21b      	sxth	r3, r3
  40bcf6:	455b      	cmp	r3, fp
  40bcf8:	bfa8      	it	ge
  40bcfa:	465b      	movge	r3, fp
  40bcfc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40bd00:	9a06      	ldr	r2, [sp, #24]
  40bd02:	a91e      	add	r1, sp, #120	; 0x78
  40bd04:	a820      	add	r0, sp, #128	; 0x80
  40bd06:	4ba7      	ldr	r3, [pc, #668]	; (40bfa4 <lv_draw_rect+0xea4>)
  40bd08:	4798      	blx	r3
  40bd0a:	2800      	cmp	r0, #0
  40bd0c:	d167      	bne.n	40bdde <lv_draw_rect+0xcde>
    blend_area.x1 = shadow_area.x1;
  40bd0e:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
  40bd12:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    blend_area.y1 = shadow_area.y1;
  40bd16:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
  40bd1a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
  40bd1e:	3a01      	subs	r2, #1
  40bd20:	442a      	add	r2, r5
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
  40bd22:	b212      	sxth	r2, r2
  40bd24:	455a      	cmp	r2, fp
  40bd26:	bfa8      	it	ge
  40bd28:	465a      	movge	r2, fp
  40bd2a:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
  40bd2e:	3b01      	subs	r3, #1
  40bd30:	442b      	add	r3, r5
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
  40bd32:	b21b      	sxth	r3, r3
  40bd34:	454b      	cmp	r3, r9
  40bd36:	bfa8      	it	ge
  40bd38:	464b      	movge	r3, r9
  40bd3a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40bd3e:	9a06      	ldr	r2, [sp, #24]
  40bd40:	a91e      	add	r1, sp, #120	; 0x78
  40bd42:	a820      	add	r0, sp, #128	; 0x80
  40bd44:	4b97      	ldr	r3, [pc, #604]	; (40bfa4 <lv_draw_rect+0xea4>)
  40bd46:	4798      	blx	r3
  40bd48:	2800      	cmp	r0, #0
  40bd4a:	f040 80b5 	bne.w	40beb8 <lv_draw_rect+0xdb8>
    blend_area.x1 = shadow_area.x1 ;
  40bd4e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40bd52:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
  40bd56:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y2;
  40bd5a:	f8ad 207e 	strh.w	r2, [sp, #126]	; 0x7e
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
  40bd5e:	3201      	adds	r2, #1
  40bd60:	1b52      	subs	r2, r2, r5
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
  40bd62:	b212      	sxth	r2, r2
  40bd64:	9905      	ldr	r1, [sp, #20]
  40bd66:	428a      	cmp	r2, r1
  40bd68:	bfb8      	it	lt
  40bd6a:	460a      	movlt	r2, r1
  40bd6c:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
  40bd70:	3b01      	subs	r3, #1
  40bd72:	442b      	add	r3, r5
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
  40bd74:	b21b      	sxth	r3, r3
  40bd76:	455b      	cmp	r3, fp
  40bd78:	bfa8      	it	ge
  40bd7a:	465b      	movge	r3, fp
  40bd7c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40bd80:	9a06      	ldr	r2, [sp, #24]
  40bd82:	a91e      	add	r1, sp, #120	; 0x78
  40bd84:	a820      	add	r0, sp, #128	; 0x80
  40bd86:	4b87      	ldr	r3, [pc, #540]	; (40bfa4 <lv_draw_rect+0xea4>)
  40bd88:	4798      	blx	r3
  40bd8a:	2800      	cmp	r0, #0
  40bd8c:	f040 8118 	bne.w	40bfc0 <lv_draw_rect+0xec0>
    blend_area.x1 = shadow_area.x1 + corner_size ;
  40bd90:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  40bd94:	442b      	add	r3, r5
  40bd96:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    blend_area.x2 = shadow_area.x2 - corner_size;
  40bd9a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  40bd9e:	1b5b      	subs	r3, r3, r5
  40bda0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    blend_area.y1 = shadow_area.y1 + corner_size;
  40bda4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
  40bda8:	442b      	add	r3, r5
  40bdaa:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    blend_area.y2 = shadow_area.y2 - corner_size;
  40bdae:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  40bdb2:	1b5d      	subs	r5, r3, r5
  40bdb4:	f8ad 507e 	strh.w	r5, [sp, #126]	; 0x7e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40bdb8:	9a06      	ldr	r2, [sp, #24]
  40bdba:	a91e      	add	r1, sp, #120	; 0x78
  40bdbc:	a820      	add	r0, sp, #128	; 0x80
  40bdbe:	4b79      	ldr	r3, [pc, #484]	; (40bfa4 <lv_draw_rect+0xea4>)
  40bdc0:	4798      	blx	r3
  40bdc2:	2800      	cmp	r0, #0
  40bdc4:	f040 816d 	bne.w	40c0a2 <lv_draw_rect+0xfa2>
    if(!simple) {
  40bdc8:	9b07      	ldr	r3, [sp, #28]
  40bdca:	2b00      	cmp	r3, #0
  40bdcc:	f000 81a9 	beq.w	40c122 <lv_draw_rect+0x1022>
    lv_mem_buf_release(sh_buf);
  40bdd0:	9808      	ldr	r0, [sp, #32]
  40bdd2:	4d75      	ldr	r5, [pc, #468]	; (40bfa8 <lv_draw_rect+0xea8>)
  40bdd4:	47a8      	blx	r5
    lv_mem_buf_release(mask_buf);
  40bdd6:	9816      	ldr	r0, [sp, #88]	; 0x58
  40bdd8:	47a8      	blx	r5
  40bdda:	f7ff b9ed 	b.w	40b1b8 <lv_draw_rect+0xb8>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40bdde:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
  40bde2:	4632      	mov	r2, r6
  40bde4:	a91c      	add	r1, sp, #112	; 0x70
  40bde6:	a820      	add	r0, sp, #128	; 0x80
  40bde8:	4b70      	ldr	r3, [pc, #448]	; (40bfac <lv_draw_rect+0xeac>)
  40bdea:	4798      	blx	r3
  40bdec:	2800      	cmp	r0, #0
  40bdee:	d18e      	bne.n	40bd0e <lv_draw_rect+0xc0e>
  40bdf0:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  40bdf4:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40bdf8:	3301      	adds	r3, #1
  40bdfa:	1a9b      	subs	r3, r3, r2
  40bdfc:	b21b      	sxth	r3, r3
  40bdfe:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += (corner_size - 1) * corner_size;
  40be00:	9809      	ldr	r0, [sp, #36]	; 0x24
  40be02:	1e43      	subs	r3, r0, #1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
  40be04:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
  40be08:	1a52      	subs	r2, r2, r1
  40be0a:	fb00 2303 	mla	r3, r0, r3, r2
  40be0e:	9a08      	ldr	r2, [sp, #32]
  40be10:	18d3      	adds	r3, r2, r3
  40be12:	930d      	str	r3, [sp, #52]	; 0x34
  40be14:	9317      	str	r3, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40be16:	9b07      	ldr	r3, [sp, #28]
  40be18:	b9a3      	cbnz	r3, 40be44 <lv_draw_rect+0xd44>
        else simple_sub = simple;
  40be1a:	9b07      	ldr	r3, [sp, #28]
  40be1c:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40be1e:	f10d 0858 	add.w	r8, sp, #88	; 0x58
        if(w > 0) {
  40be22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40be24:	2b00      	cmp	r3, #0
  40be26:	f77f af72 	ble.w	40bd0e <lv_draw_rect+0xc0e>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40be2a:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  40be2e:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40be32:	42b3      	cmp	r3, r6
  40be34:	f6ff af6b 	blt.w	40bd0e <lv_draw_rect+0xc0e>
  40be38:	2702      	movs	r7, #2
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40be3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40be3e:	46a9      	mov	r9, r5
  40be40:	9204      	str	r2, [sp, #16]
  40be42:	e01c      	b.n	40be7e <lv_draw_rect+0xd7e>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40be44:	4632      	mov	r2, r6
  40be46:	a91c      	add	r1, sp, #112	; 0x70
  40be48:	a820      	add	r0, sp, #128	; 0x80
  40be4a:	4b59      	ldr	r3, [pc, #356]	; (40bfb0 <lv_draw_rect+0xeb0>)
  40be4c:	4798      	blx	r3
  40be4e:	9b07      	ldr	r3, [sp, #28]
  40be50:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40be52:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
  40be56:	e7e4      	b.n	40be22 <lv_draw_rect+0xd22>
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40be58:	78a3      	ldrb	r3, [r4, #2]
  40be5a:	9302      	str	r3, [sp, #8]
  40be5c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40be60:	9301      	str	r3, [sp, #4]
  40be62:	9700      	str	r7, [sp, #0]
  40be64:	f8d8 3000 	ldr.w	r3, [r8]
  40be68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40be6a:	a91e      	add	r1, sp, #120	; 0x78
  40be6c:	a820      	add	r0, sp, #128	; 0x80
  40be6e:	4d51      	ldr	r5, [pc, #324]	; (40bfb4 <lv_draw_rect+0xeb4>)
  40be70:	47a8      	blx	r5
  40be72:	3601      	adds	r6, #1
  40be74:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40be76:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40be7a:	42b3      	cmp	r3, r6
  40be7c:	db18      	blt.n	40beb0 <lv_draw_rect+0xdb0>
                blend_area.y1 = y;
  40be7e:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40be82:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(!simple_sub) {
  40be86:	9b04      	ldr	r3, [sp, #16]
  40be88:	2b00      	cmp	r3, #0
  40be8a:	d1e5      	bne.n	40be58 <lv_draw_rect+0xd58>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
  40be8c:	9f16      	ldr	r7, [sp, #88]	; 0x58
  40be8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40be90:	990d      	ldr	r1, [sp, #52]	; 0x34
  40be92:	4638      	mov	r0, r7
  40be94:	4d48      	ldr	r5, [pc, #288]	; (40bfb8 <lv_draw_rect+0xeb8>)
  40be96:	47a8      	blx	r5
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40be98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40be9a:	4632      	mov	r2, r6
  40be9c:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40bea0:	4638      	mov	r0, r7
  40bea2:	4d46      	ldr	r5, [pc, #280]	; (40bfbc <lv_draw_rect+0xebc>)
  40bea4:	47a8      	blx	r5
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40bea6:	2801      	cmp	r0, #1
  40bea8:	bf14      	ite	ne
  40beaa:	4607      	movne	r7, r0
  40beac:	2702      	moveq	r7, #2
  40beae:	e7d3      	b.n	40be58 <lv_draw_rect+0xd58>
  40beb0:	464d      	mov	r5, r9
  40beb2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  40beb6:	e72a      	b.n	40bd0e <lv_draw_rect+0xc0e>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40beb8:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
  40bebc:	4632      	mov	r2, r6
  40bebe:	a91c      	add	r1, sp, #112	; 0x70
  40bec0:	a820      	add	r0, sp, #128	; 0x80
  40bec2:	4b3a      	ldr	r3, [pc, #232]	; (40bfac <lv_draw_rect+0xeac>)
  40bec4:	4798      	blx	r3
  40bec6:	2800      	cmp	r0, #0
  40bec8:	f47f af41 	bne.w	40bd4e <lv_draw_rect+0xc4e>
  40becc:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  40bed0:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40bed4:	3301      	adds	r3, #1
  40bed6:	1a9b      	subs	r3, r3, r2
  40bed8:	b21b      	sxth	r3, r3
  40beda:	9304      	str	r3, [sp, #16]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
  40bedc:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40bee0:	f9bd 107a 	ldrsh.w	r1, [sp, #122]	; 0x7a
  40bee4:	1a5b      	subs	r3, r3, r1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
  40bee6:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
  40beea:	1a52      	subs	r2, r2, r1
  40beec:	9909      	ldr	r1, [sp, #36]	; 0x24
  40beee:	fb01 2303 	mla	r3, r1, r3, r2
  40bef2:	9a08      	ldr	r2, [sp, #32]
  40bef4:	4413      	add	r3, r2
  40bef6:	9317      	str	r3, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40bef8:	9b07      	ldr	r3, [sp, #28]
  40befa:	b9bb      	cbnz	r3, 40bf2c <lv_draw_rect+0xe2c>
        else simple_sub = simple;
  40befc:	9b07      	ldr	r3, [sp, #28]
  40befe:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40bf00:	f10d 0858 	add.w	r8, sp, #88	; 0x58
        if(w > 0) {
  40bf04:	9b04      	ldr	r3, [sp, #16]
  40bf06:	2b00      	cmp	r3, #0
  40bf08:	f77f af21 	ble.w	40bd4e <lv_draw_rect+0xc4e>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40bf0c:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  40bf10:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40bf14:	42b3      	cmp	r3, r6
  40bf16:	f6ff af1a 	blt.w	40bd4e <lv_draw_rect+0xc4e>
  40bf1a:	2702      	movs	r7, #2
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40bf1c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 40bfb4 <lv_draw_rect+0xeb4>
  40bf20:	950b      	str	r5, [sp, #44]	; 0x2c
  40bf22:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40bf24:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40bf28:	4693      	mov	fp, r2
  40bf2a:	e01e      	b.n	40bf6a <lv_draw_rect+0xe6a>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40bf2c:	4632      	mov	r2, r6
  40bf2e:	a91c      	add	r1, sp, #112	; 0x70
  40bf30:	a820      	add	r0, sp, #128	; 0x80
  40bf32:	4b1f      	ldr	r3, [pc, #124]	; (40bfb0 <lv_draw_rect+0xeb0>)
  40bf34:	4798      	blx	r3
  40bf36:	9b07      	ldr	r3, [sp, #28]
  40bf38:	461a      	mov	r2, r3
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40bf3a:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
  40bf3e:	e7e1      	b.n	40bf04 <lv_draw_rect+0xe04>
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40bf40:	78a3      	ldrb	r3, [r4, #2]
  40bf42:	9302      	str	r3, [sp, #8]
  40bf44:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40bf48:	9301      	str	r3, [sp, #4]
  40bf4a:	9700      	str	r7, [sp, #0]
  40bf4c:	f8d8 3000 	ldr.w	r3, [r8]
  40bf50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40bf52:	a91e      	add	r1, sp, #120	; 0x78
  40bf54:	a820      	add	r0, sp, #128	; 0x80
  40bf56:	47c8      	blx	r9
                sh_buf_tmp += corner_size;
  40bf58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40bf5a:	442b      	add	r3, r5
  40bf5c:	9317      	str	r3, [sp, #92]	; 0x5c
  40bf5e:	3601      	adds	r6, #1
  40bf60:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40bf62:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40bf66:	42b3      	cmp	r3, r6
  40bf68:	db18      	blt.n	40bf9c <lv_draw_rect+0xe9c>
                blend_area.y1 = y;
  40bf6a:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40bf6e:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(!simple_sub) {
  40bf72:	f1bb 0f00 	cmp.w	fp, #0
  40bf76:	d1e3      	bne.n	40bf40 <lv_draw_rect+0xe40>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
  40bf78:	9f16      	ldr	r7, [sp, #88]	; 0x58
  40bf7a:	462a      	mov	r2, r5
  40bf7c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40bf7e:	4638      	mov	r0, r7
  40bf80:	4b0d      	ldr	r3, [pc, #52]	; (40bfb8 <lv_draw_rect+0xeb8>)
  40bf82:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40bf84:	9b04      	ldr	r3, [sp, #16]
  40bf86:	4632      	mov	r2, r6
  40bf88:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40bf8c:	4638      	mov	r0, r7
  40bf8e:	4f0b      	ldr	r7, [pc, #44]	; (40bfbc <lv_draw_rect+0xebc>)
  40bf90:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40bf92:	2801      	cmp	r0, #1
  40bf94:	bf14      	ite	ne
  40bf96:	4607      	movne	r7, r0
  40bf98:	2702      	moveq	r7, #2
  40bf9a:	e7d1      	b.n	40bf40 <lv_draw_rect+0xe40>
  40bf9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40bf9e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40bfa2:	e6d4      	b.n	40bd4e <lv_draw_rect+0xc4e>
  40bfa4:	004107cd 	.word	0x004107cd
  40bfa8:	00411105 	.word	0x00411105
  40bfac:	00410991 	.word	0x00410991
  40bfb0:	00410a39 	.word	0x00410a39
  40bfb4:	00406181 	.word	0x00406181
  40bfb8:	00411161 	.word	0x00411161
  40bfbc:	00409fed 	.word	0x00409fed
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40bfc0:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
  40bfc4:	4632      	mov	r2, r6
  40bfc6:	a91c      	add	r1, sp, #112	; 0x70
  40bfc8:	a820      	add	r0, sp, #128	; 0x80
  40bfca:	4bb7      	ldr	r3, [pc, #732]	; (40c2a8 <lv_draw_rect+0x11a8>)
  40bfcc:	4798      	blx	r3
  40bfce:	2800      	cmp	r0, #0
  40bfd0:	f47f aede 	bne.w	40bd90 <lv_draw_rect+0xc90>
  40bfd4:	f9bd 2080 	ldrsh.w	r2, [sp, #128]	; 0x80
  40bfd8:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40bfdc:	3301      	adds	r3, #1
  40bfde:	1a9b      	subs	r3, r3, r2
  40bfe0:	b21b      	sxth	r3, r3
  40bfe2:	9304      	str	r3, [sp, #16]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
  40bfe4:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40bfe8:	f9bd 1086 	ldrsh.w	r1, [sp, #134]	; 0x86
  40bfec:	1a5b      	subs	r3, r3, r1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
  40bfee:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
  40bff2:	1a52      	subs	r2, r2, r1
  40bff4:	9909      	ldr	r1, [sp, #36]	; 0x24
  40bff6:	fb01 2303 	mla	r3, r1, r3, r2
  40bffa:	9a08      	ldr	r2, [sp, #32]
  40bffc:	4413      	add	r3, r2
  40bffe:	9317      	str	r3, [sp, #92]	; 0x5c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40c000:	9b07      	ldr	r3, [sp, #28]
  40c002:	b9a3      	cbnz	r3, 40c02e <lv_draw_rect+0xf2e>
        else simple_sub = simple;
  40c004:	f8dd b01c 	ldr.w	fp, [sp, #28]
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40c008:	f10d 0858 	add.w	r8, sp, #88	; 0x58
        if(w > 0) {
  40c00c:	9b04      	ldr	r3, [sp, #16]
  40c00e:	2b00      	cmp	r3, #0
  40c010:	f77f aebe 	ble.w	40bd90 <lv_draw_rect+0xc90>
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
  40c014:	f9bd 6086 	ldrsh.w	r6, [sp, #134]	; 0x86
  40c018:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40c01c:	42b3      	cmp	r3, r6
  40c01e:	f73f aeb7 	bgt.w	40bd90 <lv_draw_rect+0xc90>
  40c022:	2702      	movs	r7, #2
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40c024:	f8df 9290 	ldr.w	r9, [pc, #656]	; 40c2b8 <lv_draw_rect+0x11b8>
  40c028:	9505      	str	r5, [sp, #20]
  40c02a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40c02c:	e01e      	b.n	40c06c <lv_draw_rect+0xf6c>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
  40c02e:	4632      	mov	r2, r6
  40c030:	a91c      	add	r1, sp, #112	; 0x70
  40c032:	a820      	add	r0, sp, #128	; 0x80
  40c034:	4b9d      	ldr	r3, [pc, #628]	; (40c2ac <lv_draw_rect+0x11ac>)
  40c036:	4798      	blx	r3
  40c038:	f8dd b01c 	ldr.w	fp, [sp, #28]
        mask_act = simple_sub ? &sh_buf_tmp : &mask_buf;
  40c03c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
  40c040:	e7e4      	b.n	40c00c <lv_draw_rect+0xf0c>
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, *mask_act, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40c042:	78a3      	ldrb	r3, [r4, #2]
  40c044:	9302      	str	r3, [sp, #8]
  40c046:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40c04a:	9301      	str	r3, [sp, #4]
  40c04c:	9700      	str	r7, [sp, #0]
  40c04e:	f8d8 3000 	ldr.w	r3, [r8]
  40c052:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40c054:	a91e      	add	r1, sp, #120	; 0x78
  40c056:	a820      	add	r0, sp, #128	; 0x80
  40c058:	47c8      	blx	r9
                sh_buf_tmp += corner_size;
  40c05a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40c05c:	442b      	add	r3, r5
  40c05e:	9317      	str	r3, [sp, #92]	; 0x5c
  40c060:	3e01      	subs	r6, #1
  40c062:	b236      	sxth	r6, r6
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
  40c064:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
  40c068:	42b3      	cmp	r3, r6
  40c06a:	dc18      	bgt.n	40c09e <lv_draw_rect+0xf9e>
                blend_area.y1 = y;
  40c06c:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40c070:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
                if(!simple_sub) {
  40c074:	f1bb 0f00 	cmp.w	fp, #0
  40c078:	d1e3      	bne.n	40c042 <lv_draw_rect+0xf42>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
  40c07a:	9f16      	ldr	r7, [sp, #88]	; 0x58
  40c07c:	462a      	mov	r2, r5
  40c07e:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40c080:	4638      	mov	r0, r7
  40c082:	4b8b      	ldr	r3, [pc, #556]	; (40c2b0 <lv_draw_rect+0x11b0>)
  40c084:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40c086:	9b04      	ldr	r3, [sp, #16]
  40c088:	4632      	mov	r2, r6
  40c08a:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40c08e:	4638      	mov	r0, r7
  40c090:	4f88      	ldr	r7, [pc, #544]	; (40c2b4 <lv_draw_rect+0x11b4>)
  40c092:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40c094:	2801      	cmp	r0, #1
  40c096:	bf14      	ite	ne
  40c098:	4607      	movne	r7, r0
  40c09a:	2702      	moveq	r7, #2
  40c09c:	e7d1      	b.n	40c042 <lv_draw_rect+0xf42>
  40c09e:	9d05      	ldr	r5, [sp, #20]
  40c0a0:	e676      	b.n	40bd90 <lv_draw_rect+0xc90>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, clip) && !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
  40c0a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c0a4:	a91c      	add	r1, sp, #112	; 0x70
  40c0a6:	a820      	add	r0, sp, #128	; 0x80
  40c0a8:	4b7f      	ldr	r3, [pc, #508]	; (40c2a8 <lv_draw_rect+0x11a8>)
  40c0aa:	4798      	blx	r3
  40c0ac:	2800      	cmp	r0, #0
  40c0ae:	f47f ae8b 	bne.w	40bdc8 <lv_draw_rect+0xcc8>
  40c0b2:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40c0b6:	1c5a      	adds	r2, r3, #1
  40c0b8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  40c0bc:	1ad3      	subs	r3, r2, r3
  40c0be:	fa0f fb83 	sxth.w	fp, r3
        if(w > 0) {
  40c0c2:	f1bb 0f00 	cmp.w	fp, #0
  40c0c6:	f77f ae7f 	ble.w	40bdc8 <lv_draw_rect+0xcc8>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40c0ca:	f9bd 5082 	ldrsh.w	r5, [sp, #130]	; 0x82
  40c0ce:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40c0d2:	42ab      	cmp	r3, r5
  40c0d4:	f6ff ae78 	blt.w	40bdc8 <lv_draw_rect+0xcc8>
                lv_memset_ff(mask_buf, w);
  40c0d8:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 40c2d0 <lv_draw_rect+0x11d0>
                mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40c0dc:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 40c2b4 <lv_draw_rect+0x11b4>
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40c0e0:	4f75      	ldr	r7, [pc, #468]	; (40c2b8 <lv_draw_rect+0x11b8>)
                blend_area.y1 = y;
  40c0e2:	f8ad 507a 	strh.w	r5, [sp, #122]	; 0x7a
                blend_area.y2 = y;
  40c0e6:	f8ad 507e 	strh.w	r5, [sp, #126]	; 0x7e
                lv_memset_ff(mask_buf, w);
  40c0ea:	9e16      	ldr	r6, [sp, #88]	; 0x58
  40c0ec:	4659      	mov	r1, fp
  40c0ee:	4630      	mov	r0, r6
  40c0f0:	47c8      	blx	r9
                mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
  40c0f2:	465b      	mov	r3, fp
  40c0f4:	462a      	mov	r2, r5
  40c0f6:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40c0fa:	4630      	mov	r0, r6
  40c0fc:	47c0      	blx	r8
                _lv_blend_fill(&clip_area_sub, &blend_area, dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->blend_mode);
  40c0fe:	78a3      	ldrb	r3, [r4, #2]
  40c100:	9302      	str	r3, [sp, #8]
  40c102:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40c106:	9301      	str	r3, [sp, #4]
  40c108:	9000      	str	r0, [sp, #0]
  40c10a:	4633      	mov	r3, r6
  40c10c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  40c10e:	a91e      	add	r1, sp, #120	; 0x78
  40c110:	a820      	add	r0, sp, #128	; 0x80
  40c112:	47b8      	blx	r7
  40c114:	3501      	adds	r5, #1
  40c116:	b22d      	sxth	r5, r5
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
  40c118:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  40c11c:	42ab      	cmp	r3, r5
  40c11e:	dae0      	bge.n	40c0e2 <lv_draw_rect+0xfe2>
  40c120:	e652      	b.n	40bdc8 <lv_draw_rect+0xcc8>
        lv_draw_mask_free_param(&mask_rout_param);
  40c122:	a822      	add	r0, sp, #136	; 0x88
  40c124:	4b65      	ldr	r3, [pc, #404]	; (40c2bc <lv_draw_rect+0x11bc>)
  40c126:	4798      	blx	r3
        lv_draw_mask_remove_id(mask_rout_id);
  40c128:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c12a:	4b65      	ldr	r3, [pc, #404]	; (40c2c0 <lv_draw_rect+0x11c0>)
  40c12c:	4798      	blx	r3
  40c12e:	e64f      	b.n	40bdd0 <lv_draw_rect+0xcd0>
        _lv_blend_fill(clip_area, &coords_bg, dsc->bg_color, NULL,
  40c130:	78a3      	ldrb	r3, [r4, #2]
  40c132:	9302      	str	r3, [sp, #8]
  40c134:	9501      	str	r5, [sp, #4]
  40c136:	2301      	movs	r3, #1
  40c138:	9300      	str	r3, [sp, #0]
  40c13a:	2300      	movs	r3, #0
  40c13c:	88a2      	ldrh	r2, [r4, #4]
  40c13e:	a91c      	add	r1, sp, #112	; 0x70
  40c140:	9806      	ldr	r0, [sp, #24]
  40c142:	4d5d      	ldr	r5, [pc, #372]	; (40c2b8 <lv_draw_rect+0x11b8>)
  40c144:	47a8      	blx	r5
  40c146:	e1a2      	b.n	40c48e <lv_draw_rect+0x138e>
        mask_buf = lv_mem_buf_get(draw_area_w);
  40c148:	9805      	ldr	r0, [sp, #20]
  40c14a:	4b5e      	ldr	r3, [pc, #376]	; (40c2c4 <lv_draw_rect+0x11c4>)
  40c14c:	4798      	blx	r3
  40c14e:	9007      	str	r0, [sp, #28]
        lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  40c150:	2300      	movs	r3, #0
  40c152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c154:	a91c      	add	r1, sp, #112	; 0x70
  40c156:	a822      	add	r0, sp, #136	; 0x88
  40c158:	4f5b      	ldr	r7, [pc, #364]	; (40c2c8 <lv_draw_rect+0x11c8>)
  40c15a:	47b8      	blx	r7
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40c15c:	2100      	movs	r1, #0
  40c15e:	a822      	add	r0, sp, #136	; 0x88
  40c160:	4b5a      	ldr	r3, [pc, #360]	; (40c2cc <lv_draw_rect+0x11cc>)
  40c162:	4798      	blx	r3
  40c164:	900d      	str	r0, [sp, #52]	; 0x34
  40c166:	f7ff b8af 	b.w	40b2c8 <lv_draw_rect+0x1c8>
        grad_map = lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  40c16a:	0068      	lsls	r0, r5, #1
  40c16c:	4b55      	ldr	r3, [pc, #340]	; (40c2c4 <lv_draw_rect+0x11c4>)
  40c16e:	4798      	blx	r3
  40c170:	9009      	str	r0, [sp, #36]	; 0x24
        for(i = 0; i < coords_w; i++) {
  40c172:	46ae      	mov	lr, r5
  40c174:	2d00      	cmp	r5, #0
  40c176:	f77f a8ac 	ble.w	40b2d2 <lv_draw_rect+0x1d2>
  40c17a:	4683      	mov	fp, r0
  40c17c:	f04f 0900 	mov.w	r9, #0
  40c180:	960e      	str	r6, [sp, #56]	; 0x38
  40c182:	e019      	b.n	40c1b8 <lv_draw_rect+0x10b8>
    if(i <= min) return dsc->bg_color;
  40c184:	7921      	ldrb	r1, [r4, #4]
  40c186:	f001 0707 	and.w	r7, r1, #7
  40c18a:	08c9      	lsrs	r1, r1, #3
  40c18c:	7962      	ldrb	r2, [r4, #5]
  40c18e:	f002 051f 	and.w	r5, r2, #31
  40c192:	0952      	lsrs	r2, r2, #5
            grad_map[i] = grad_get(dsc, coords_w, i - coords_bg.x1);
  40c194:	7803      	ldrb	r3, [r0, #0]
  40c196:	f367 0302 	bfi	r3, r7, #0, #3
  40c19a:	f361 03c7 	bfi	r3, r1, #3, #5
  40c19e:	7003      	strb	r3, [r0, #0]
  40c1a0:	7843      	ldrb	r3, [r0, #1]
  40c1a2:	f365 0304 	bfi	r3, r5, #0, #5
  40c1a6:	f362 1347 	bfi	r3, r2, #5, #3
  40c1aa:	7043      	strb	r3, [r0, #1]
        for(i = 0; i < coords_w; i++) {
  40c1ac:	f109 0901 	add.w	r9, r9, #1
  40c1b0:	f10b 0b02 	add.w	fp, fp, #2
  40c1b4:	45f1      	cmp	r9, lr
  40c1b6:	d064      	beq.n	40c282 <lv_draw_rect+0x1182>
            grad_map[i] = grad_get(dsc, coords_w, i - coords_bg.x1);
  40c1b8:	4658      	mov	r0, fp
  40c1ba:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
  40c1be:	eba9 0303 	sub.w	r3, r9, r3
  40c1c2:	b29b      	uxth	r3, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  40c1c4:	7a26      	ldrb	r6, [r4, #8]
  40c1c6:	fb06 f20e 	mul.w	r2, r6, lr
  40c1ca:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  40c1cc:	b21d      	sxth	r5, r3
  40c1ce:	42aa      	cmp	r2, r5
  40c1d0:	dad8      	bge.n	40c184 <lv_draw_rect+0x1084>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  40c1d2:	7a61      	ldrb	r1, [r4, #9]
  40c1d4:	fb01 f70e 	mul.w	r7, r1, lr
    if(i >= max) return dsc->bg_grad_color;
  40c1d8:	ebb5 2f27 	cmp.w	r5, r7, asr #8
  40c1dc:	db08      	blt.n	40c1f0 <lv_draw_rect+0x10f0>
  40c1de:	79a1      	ldrb	r1, [r4, #6]
  40c1e0:	f001 0707 	and.w	r7, r1, #7
  40c1e4:	08c9      	lsrs	r1, r1, #3
  40c1e6:	79e2      	ldrb	r2, [r4, #7]
  40c1e8:	f002 051f 	and.w	r5, r2, #31
  40c1ec:	0952      	lsrs	r2, r2, #5
  40c1ee:	e7d1      	b.n	40c194 <lv_draw_rect+0x1094>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  40c1f0:	1b89      	subs	r1, r1, r6
    d = (s * d) >> 8;
  40c1f2:	fb0e f101 	mul.w	r1, lr, r1
    i -= min;
  40c1f6:	1a9b      	subs	r3, r3, r2
    lv_opa_t mix = (i * 255) / d;
  40c1f8:	b21b      	sxth	r3, r3
  40c1fa:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
  40c1fe:	120a      	asrs	r2, r1, #8
    lv_opa_t mix = (i * 255) / d;
  40c200:	fb93 f3f2 	sdiv	r3, r3, r2
  40c204:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c206:	f1c3 06ff 	rsb	r6, r3, #255	; 0xff
  40c20a:	79a5      	ldrb	r5, [r4, #6]
  40c20c:	08ea      	lsrs	r2, r5, #3
  40c20e:	f894 8004 	ldrb.w	r8, [r4, #4]
  40c212:	ea4f 01d8 	mov.w	r1, r8, lsr #3
  40c216:	fb06 f101 	mul.w	r1, r6, r1
  40c21a:	fb03 1202 	mla	r2, r3, r2, r1
  40c21e:	3280      	adds	r2, #128	; 0x80
  40c220:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c224:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c228:	f3c2 51c4 	ubfx	r1, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c22c:	f005 0207 	and.w	r2, r5, #7
  40c230:	79e5      	ldrb	r5, [r4, #7]
  40c232:	096f      	lsrs	r7, r5, #5
  40c234:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40c238:	f008 0807 	and.w	r8, r8, #7
  40c23c:	f894 c005 	ldrb.w	ip, [r4, #5]
  40c240:	ea4f 175c 	mov.w	r7, ip, lsr #5
  40c244:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
  40c248:	fb06 f707 	mul.w	r7, r6, r7
  40c24c:	fb03 7202 	mla	r2, r3, r2, r7
  40c250:	3280      	adds	r2, #128	; 0x80
  40c252:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40c256:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40c25a:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40c25e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c262:	f005 051f 	and.w	r5, r5, #31
  40c266:	f00c 0c1f 	and.w	ip, ip, #31
  40c26a:	fb06 f60c 	mul.w	r6, r6, ip
  40c26e:	fb03 6305 	mla	r3, r3, r5, r6
  40c272:	3380      	adds	r3, #128	; 0x80
  40c274:	eb03 2503 	add.w	r5, r3, r3, lsl #8
  40c278:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
  40c27c:	f3c3 55c4 	ubfx	r5, r3, #23, #5
  40c280:	e788      	b.n	40c194 <lv_draw_rect+0x1094>
  40c282:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40c284:	f7ff b825 	b.w	40b2d2 <lv_draw_rect+0x1d2>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40c288:	f9bd 507a 	ldrsh.w	r5, [sp, #122]	; 0x7a
  40c28c:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40c290:	429d      	cmp	r5, r3
  40c292:	f300 80e9 	bgt.w	40c468 <lv_draw_rect+0x1368>
            lv_memset(mask_buf, opa, draw_area_w);
  40c296:	f8df 803c 	ldr.w	r8, [pc, #60]	; 40c2d4 <lv_draw_rect+0x11d4>
                _lv_blend_fill(clip_area, &blend_area, dsc->bg_color, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c29a:	f8df b01c 	ldr.w	fp, [pc, #28]	; 40c2b8 <lv_draw_rect+0x11b8>
  40c29e:	f8cd a020 	str.w	sl, [sp, #32]
  40c2a2:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
  40c2a6:	e027      	b.n	40c2f8 <lv_draw_rect+0x11f8>
  40c2a8:	00410991 	.word	0x00410991
  40c2ac:	00410a39 	.word	0x00410a39
  40c2b0:	00411161 	.word	0x00411161
  40c2b4:	00409fed 	.word	0x00409fed
  40c2b8:	00406181 	.word	0x00406181
  40c2bc:	0040a09d 	.word	0x0040a09d
  40c2c0:	0040a03d 	.word	0x0040a03d
  40c2c4:	004115a9 	.word	0x004115a9
  40c2c8:	0040a2a1 	.word	0x0040a2a1
  40c2cc:	00409f91 	.word	0x00409f91
  40c2d0:	00411791 	.word	0x00411791
  40c2d4:	004113a3 	.word	0x004113a3
  40c2d8:	78a3      	ldrb	r3, [r4, #2]
  40c2da:	9302      	str	r3, [sp, #8]
  40c2dc:	23ff      	movs	r3, #255	; 0xff
  40c2de:	9301      	str	r3, [sp, #4]
  40c2e0:	9000      	str	r0, [sp, #0]
  40c2e2:	9b07      	ldr	r3, [sp, #28]
  40c2e4:	88a2      	ldrh	r2, [r4, #4]
  40c2e6:	a920      	add	r1, sp, #128	; 0x80
  40c2e8:	9806      	ldr	r0, [sp, #24]
  40c2ea:	47d8      	blx	fp
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40c2ec:	3501      	adds	r5, #1
  40c2ee:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40c2f2:	429d      	cmp	r5, r3
  40c2f4:	f300 80b6 	bgt.w	40c464 <lv_draw_rect+0x1364>
            blend_area.y1 = h;
  40c2f8:	fa0f f985 	sxth.w	r9, r5
  40c2fc:	f8ad 9082 	strh.w	r9, [sp, #130]	; 0x82
            blend_area.y2 = h;
  40c300:	f8ad 9086 	strh.w	r9, [sp, #134]	; 0x86
            lv_memset(mask_buf, opa, draw_area_w);
  40c304:	9a05      	ldr	r2, [sp, #20]
  40c306:	9904      	ldr	r1, [sp, #16]
  40c308:	9f07      	ldr	r7, [sp, #28]
  40c30a:	4638      	mov	r0, r7
  40c30c:	47c0      	blx	r8
            mask_res = lv_draw_mask_apply(mask_buf, draw_area.x1, h, draw_area_w);
  40c30e:	9b05      	ldr	r3, [sp, #20]
  40c310:	464a      	mov	r2, r9
  40c312:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
  40c316:	4638      	mov	r0, r7
  40c318:	4fb8      	ldr	r7, [pc, #736]	; (40c5fc <lv_draw_rect+0x14fc>)
  40c31a:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40c31c:	2801      	cmp	r0, #1
  40c31e:	bf08      	it	eq
  40c320:	2002      	moveq	r0, #2
            if(grad_dir == LV_GRAD_DIR_NONE) {
  40c322:	2e00      	cmp	r6, #0
  40c324:	d0d8      	beq.n	40c2d8 <lv_draw_rect+0x11d8>
            else if(grad_dir == LV_GRAD_DIR_HOR) {
  40c326:	2e02      	cmp	r6, #2
  40c328:	d01f      	beq.n	40c36a <lv_draw_rect+0x126a>
            else if(grad_dir == LV_GRAD_DIR_VER) {
  40c32a:	2e01      	cmp	r6, #1
  40c32c:	d1de      	bne.n	40c2ec <lv_draw_rect+0x11ec>
                lv_color_t c = grad_get(dsc, coords_h, h - coords_bg.y1);
  40c32e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
  40c332:	1aeb      	subs	r3, r5, r3
  40c334:	b29b      	uxth	r3, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  40c336:	f894 c008 	ldrb.w	ip, [r4, #8]
  40c33a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c33c:	fb02 f20c 	mul.w	r2, r2, ip
  40c340:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  40c342:	b219      	sxth	r1, r3
  40c344:	428a      	cmp	r2, r1
  40c346:	da1d      	bge.n	40c384 <lv_draw_rect+0x1284>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  40c348:	f894 e009 	ldrb.w	lr, [r4, #9]
  40c34c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40c34e:	fb0e f907 	mul.w	r9, lr, r7
    if(i >= max) return dsc->bg_grad_color;
  40c352:	ebb1 2f29 	cmp.w	r1, r9, asr #8
  40c356:	db30      	blt.n	40c3ba <lv_draw_rect+0x12ba>
  40c358:	79a2      	ldrb	r2, [r4, #6]
  40c35a:	f002 0c07 	and.w	ip, r2, #7
  40c35e:	08d2      	lsrs	r2, r2, #3
  40c360:	79e3      	ldrb	r3, [r4, #7]
  40c362:	f003 011f 	and.w	r1, r3, #31
  40c366:	095b      	lsrs	r3, r3, #5
  40c368:	e014      	b.n	40c394 <lv_draw_rect+0x1294>
                _lv_blend_map(clip_area, &blend_area, grad_map, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c36a:	78a3      	ldrb	r3, [r4, #2]
  40c36c:	9302      	str	r3, [sp, #8]
  40c36e:	23ff      	movs	r3, #255	; 0xff
  40c370:	9301      	str	r3, [sp, #4]
  40c372:	9000      	str	r0, [sp, #0]
  40c374:	9b07      	ldr	r3, [sp, #28]
  40c376:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c378:	a920      	add	r1, sp, #128	; 0x80
  40c37a:	9806      	ldr	r0, [sp, #24]
  40c37c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 40c610 <lv_draw_rect+0x1510>
  40c380:	47c8      	blx	r9
  40c382:	e7b3      	b.n	40c2ec <lv_draw_rect+0x11ec>
    if(i <= min) return dsc->bg_color;
  40c384:	7922      	ldrb	r2, [r4, #4]
  40c386:	f002 0c07 	and.w	ip, r2, #7
  40c38a:	08d2      	lsrs	r2, r2, #3
  40c38c:	7963      	ldrb	r3, [r4, #5]
  40c38e:	f003 011f 	and.w	r1, r3, #31
  40c392:	095b      	lsrs	r3, r3, #5
  40c394:	f36c 0a02 	bfi	sl, ip, #0, #3
  40c398:	f362 0ac7 	bfi	sl, r2, #3, #5
  40c39c:	f361 2a0c 	bfi	sl, r1, #8, #5
  40c3a0:	f363 3a4f 	bfi	sl, r3, #13, #3
                _lv_blend_fill(clip_area, &blend_area, c, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c3a4:	78a3      	ldrb	r3, [r4, #2]
  40c3a6:	9302      	str	r3, [sp, #8]
  40c3a8:	23ff      	movs	r3, #255	; 0xff
  40c3aa:	9301      	str	r3, [sp, #4]
  40c3ac:	9000      	str	r0, [sp, #0]
  40c3ae:	9b07      	ldr	r3, [sp, #28]
  40c3b0:	4652      	mov	r2, sl
  40c3b2:	a920      	add	r1, sp, #128	; 0x80
  40c3b4:	9806      	ldr	r0, [sp, #24]
  40c3b6:	47d8      	blx	fp
  40c3b8:	e798      	b.n	40c2ec <lv_draw_rect+0x11ec>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  40c3ba:	ebae 010c 	sub.w	r1, lr, ip
    d = (s * d) >> 8;
  40c3be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40c3c0:	fb07 f101 	mul.w	r1, r7, r1
    i -= min;
  40c3c4:	1a9b      	subs	r3, r3, r2
    lv_opa_t mix = (i * 255) / d;
  40c3c6:	b21b      	sxth	r3, r3
  40c3c8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
  40c3cc:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
  40c3ce:	fb93 f3f1 	sdiv	r3, r3, r1
  40c3d2:	b2db      	uxtb	r3, r3
  40c3d4:	461f      	mov	r7, r3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c3d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40c3da:	f894 e006 	ldrb.w	lr, [r4, #6]
  40c3de:	ea4f 02de 	mov.w	r2, lr, lsr #3
  40c3e2:	f894 9004 	ldrb.w	r9, [r4, #4]
  40c3e6:	ea4f 01d9 	mov.w	r1, r9, lsr #3
  40c3ea:	930a      	str	r3, [sp, #40]	; 0x28
  40c3ec:	fb03 f101 	mul.w	r1, r3, r1
  40c3f0:	970c      	str	r7, [sp, #48]	; 0x30
  40c3f2:	fb07 1202 	mla	r2, r7, r2, r1
  40c3f6:	3280      	adds	r2, #128	; 0x80
  40c3f8:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c3fc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c400:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c404:	f00e 0307 	and.w	r3, lr, #7
  40c408:	79e1      	ldrb	r1, [r4, #7]
  40c40a:	ea4f 1e51 	mov.w	lr, r1, lsr #5
  40c40e:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
  40c412:	f009 0907 	and.w	r9, r9, #7
  40c416:	f894 e005 	ldrb.w	lr, [r4, #5]
  40c41a:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
  40c41e:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40c422:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40c424:	fb07 fc0c 	mul.w	ip, r7, ip
  40c428:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c42a:	fb07 c303 	mla	r3, r7, r3, ip
  40c42e:	3380      	adds	r3, #128	; 0x80
  40c430:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40c434:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40c438:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  40c43c:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c440:	f001 011f 	and.w	r1, r1, #31
  40c444:	f00e 0e1f 	and.w	lr, lr, #31
  40c448:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40c44a:	fb07 fe0e 	mul.w	lr, r7, lr
  40c44e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c450:	fb07 e101 	mla	r1, r7, r1, lr
  40c454:	3180      	adds	r1, #128	; 0x80
  40c456:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
  40c45a:	eb01 11ce 	add.w	r1, r1, lr, lsl #7
  40c45e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c462:	e797      	b.n	40c394 <lv_draw_rect+0x1294>
  40c464:	f8dd a020 	ldr.w	sl, [sp, #32]
    if(grad_map) lv_mem_buf_release(grad_map);
  40c468:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c46a:	b113      	cbz	r3, 40c472 <lv_draw_rect+0x1372>
  40c46c:	4618      	mov	r0, r3
  40c46e:	4b64      	ldr	r3, [pc, #400]	; (40c600 <lv_draw_rect+0x1500>)
  40c470:	4798      	blx	r3
    if(mask_buf) lv_mem_buf_release(mask_buf);
  40c472:	9b07      	ldr	r3, [sp, #28]
  40c474:	b113      	cbz	r3, 40c47c <lv_draw_rect+0x137c>
  40c476:	4618      	mov	r0, r3
  40c478:	4b61      	ldr	r3, [pc, #388]	; (40c600 <lv_draw_rect+0x1500>)
  40c47a:	4798      	blx	r3
    if(mask_rout_id != LV_MASK_ID_INV) {
  40c47c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40c47e:	f1b0 3fff 	cmp.w	r0, #4294967295
  40c482:	d004      	beq.n	40c48e <lv_draw_rect+0x138e>
        lv_draw_mask_remove_id(mask_rout_id);
  40c484:	4b5f      	ldr	r3, [pc, #380]	; (40c604 <lv_draw_rect+0x1504>)
  40c486:	4798      	blx	r3
        lv_draw_mask_free_param(&mask_rout_param);
  40c488:	a822      	add	r0, sp, #136	; 0x88
  40c48a:	4b5f      	ldr	r3, [pc, #380]	; (40c608 <lv_draw_rect+0x1508>)
  40c48c:	4798      	blx	r3
    if(dsc->bg_img_src == NULL) return;
  40c48e:	68e0      	ldr	r0, [r4, #12]
  40c490:	b118      	cbz	r0, 40c49a <lv_draw_rect+0x139a>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
  40c492:	7da3      	ldrb	r3, [r4, #22]
  40c494:	2b02      	cmp	r3, #2
  40c496:	f200 834c 	bhi.w	40cb32 <lv_draw_rect+0x1a32>
    if(dsc->border_opa <= LV_OPA_MIN) return;
  40c49a:	7fa1      	ldrb	r1, [r4, #30]
  40c49c:	2902      	cmp	r1, #2
  40c49e:	d959      	bls.n	40c554 <lv_draw_rect+0x1454>
    if(dsc->border_width == 0) return;
  40c4a0:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  40c4a4:	2a00      	cmp	r2, #0
  40c4a6:	d055      	beq.n	40c554 <lv_draw_rect+0x1454>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  40c4a8:	7fe3      	ldrb	r3, [r4, #31]
  40c4aa:	f013 0f3e 	tst.w	r3, #62	; 0x3e
  40c4ae:	d051      	beq.n	40c554 <lv_draw_rect+0x1454>
    if(dsc->border_post) return;
  40c4b0:	f013 0f01 	tst.w	r3, #1
  40c4b4:	d14e      	bne.n	40c554 <lv_draw_rect+0x1454>
  40c4b6:	f8ba 6004 	ldrh.w	r6, [sl, #4]
  40c4ba:	f8ba 7000 	ldrh.w	r7, [sl]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c4be:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  40c4c2:	f8ba 5002 	ldrh.w	r5, [sl, #2]
    int32_t rout = dsc->radius;
  40c4c6:	f9b4 e000 	ldrsh.w	lr, [r4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c4ca:	1c73      	adds	r3, r6, #1
  40c4cc:	1bdb      	subs	r3, r3, r7
    int32_t coords_w = lv_area_get_width(coords);
  40c4ce:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c4d0:	f100 0c01 	add.w	ip, r0, #1
  40c4d4:	ebac 0c05 	sub.w	ip, ip, r5
    int32_t coords_h = lv_area_get_height(coords);
  40c4d8:	fa0f fc8c 	sxth.w	ip, ip
    int32_t short_side = LV_MIN(coords_w, coords_h);
  40c4dc:	4563      	cmp	r3, ip
  40c4de:	bfa8      	it	ge
  40c4e0:	4663      	movge	r3, ip
    if(rout > short_side >> 1) rout = short_side >> 1;
  40c4e2:	105b      	asrs	r3, r3, #1
  40c4e4:	4573      	cmp	r3, lr
  40c4e6:	bfa8      	it	ge
  40c4e8:	4673      	movge	r3, lr
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  40c4ea:	f894 e01f 	ldrb.w	lr, [r4, #31]
  40c4ee:	f3ce 0e44 	ubfx	lr, lr, #1, #5
  40c4f2:	f01e 0f04 	tst.w	lr, #4
  40c4f6:	f000 843c 	beq.w	40cd72 <lv_draw_rect+0x1c72>
  40c4fa:	fa1f fc82 	uxth.w	ip, r2
  40c4fe:	4467      	add	r7, ip
  40c500:	f8ad 7088 	strh.w	r7, [sp, #136]	; 0x88
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  40c504:	f01e 0f08 	tst.w	lr, #8
  40c508:	f000 843b 	beq.w	40cd82 <lv_draw_rect+0x1c82>
  40c50c:	b297      	uxth	r7, r2
  40c50e:	1bf6      	subs	r6, r6, r7
  40c510:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  40c514:	f01e 0f02 	tst.w	lr, #2
  40c518:	f000 8438 	beq.w	40cd8c <lv_draw_rect+0x1c8c>
  40c51c:	b296      	uxth	r6, r2
  40c51e:	4435      	add	r5, r6
  40c520:	f8ad 508a 	strh.w	r5, [sp, #138]	; 0x8a
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  40c524:	f01e 0f01 	tst.w	lr, #1
  40c528:	f000 8435 	beq.w	40cd96 <lv_draw_rect+0x1c96>
  40c52c:	b295      	uxth	r5, r2
  40c52e:	1b40      	subs	r0, r0, r5
  40c530:	f8ad 008e 	strh.w	r0, [sp, #142]	; 0x8e
    lv_coord_t rin = rout - dsc->border_width;
  40c534:	1a9a      	subs	r2, r3, r2
  40c536:	b212      	sxth	r2, r2
    draw_border_generic(clip, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
  40c538:	78a0      	ldrb	r0, [r4, #2]
  40c53a:	9003      	str	r0, [sp, #12]
  40c53c:	9102      	str	r1, [sp, #8]
  40c53e:	8b61      	ldrh	r1, [r4, #26]
  40c540:	f8ad 1004 	strh.w	r1, [sp, #4]
  40c544:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  40c548:	9200      	str	r2, [sp, #0]
  40c54a:	aa22      	add	r2, sp, #136	; 0x88
  40c54c:	4651      	mov	r1, sl
  40c54e:	9806      	ldr	r0, [sp, #24]
  40c550:	4d2e      	ldr	r5, [pc, #184]	; (40c60c <lv_draw_rect+0x150c>)
  40c552:	47a8      	blx	r5
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  40c554:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
  40c558:	2902      	cmp	r1, #2
  40c55a:	d94c      	bls.n	40c5f6 <lv_draw_rect+0x14f6>
    if(dsc->outline_width == 0) return;
  40c55c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
  40c560:	2800      	cmp	r0, #0
  40c562:	d048      	beq.n	40c5f6 <lv_draw_rect+0x14f6>
    dest->x1 = src->x1;
  40c564:	f9ba 7000 	ldrsh.w	r7, [sl]
    dest->y1 = src->y1;
  40c568:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    dest->x2 = src->x2;
  40c56c:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
    dest->y2 = src->y2;
  40c570:	f9ba 5006 	ldrsh.w	r5, [sl, #6]
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
  40c574:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
  40c578:	2b00      	cmp	r3, #0
  40c57a:	bf08      	it	eq
  40c57c:	f04f 33ff 	moveq.w	r3, #4294967295
    area_inner.x1 -= pad;
  40c580:	b29b      	uxth	r3, r3
  40c582:	1aff      	subs	r7, r7, r3
  40c584:	b2bf      	uxth	r7, r7
  40c586:	f8ad 7080 	strh.w	r7, [sp, #128]	; 0x80
    area_inner.y1 -= pad;
  40c58a:	1af6      	subs	r6, r6, r3
  40c58c:	b2b6      	uxth	r6, r6
  40c58e:	f8ad 6082 	strh.w	r6, [sp, #130]	; 0x82
    area_inner.x2 += pad;
  40c592:	441a      	add	r2, r3
  40c594:	b292      	uxth	r2, r2
  40c596:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
    area_inner.y2 += pad;
  40c59a:	442b      	add	r3, r5
  40c59c:	b29b      	uxth	r3, r3
  40c59e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    area_outer.x1 -= dsc->outline_width;
  40c5a2:	b280      	uxth	r0, r0
  40c5a4:	1a3d      	subs	r5, r7, r0
  40c5a6:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
    area_outer.x2 += dsc->outline_width;
  40c5aa:	1815      	adds	r5, r2, r0
  40c5ac:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    area_outer.y1 -= dsc->outline_width;
  40c5b0:	1a35      	subs	r5, r6, r0
  40c5b2:	f8ad 508a 	strh.w	r5, [sp, #138]	; 0x8a
    area_outer.y2 += dsc->outline_width;
  40c5b6:	181d      	adds	r5, r3, r0
  40c5b8:	f8ad 508e 	strh.w	r5, [sp, #142]	; 0x8e
    int32_t rin = dsc->radius;
  40c5bc:	f9b4 5000 	ldrsh.w	r5, [r4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c5c0:	3201      	adds	r2, #1
  40c5c2:	1bd2      	subs	r2, r2, r7
    int32_t inner_w = lv_area_get_width(&area_inner);
  40c5c4:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c5c6:	3301      	adds	r3, #1
  40c5c8:	1b9b      	subs	r3, r3, r6
    int32_t inner_h = lv_area_get_height(&area_inner);
  40c5ca:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MIN(inner_w, inner_h);
  40c5cc:	429a      	cmp	r2, r3
  40c5ce:	bfa8      	it	ge
  40c5d0:	461a      	movge	r2, r3
    if(rin > short_side >> 1) rin = short_side >> 1;
  40c5d2:	1052      	asrs	r2, r2, #1
  40c5d4:	42aa      	cmp	r2, r5
  40c5d6:	bfa8      	it	ge
  40c5d8:	462a      	movge	r2, r5
    lv_coord_t rout = rin + dsc->outline_width;
  40c5da:	1883      	adds	r3, r0, r2
    draw_border_generic(clip, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa, dsc->blend_mode);
  40c5dc:	78a0      	ldrb	r0, [r4, #2]
  40c5de:	9003      	str	r0, [sp, #12]
  40c5e0:	9102      	str	r1, [sp, #8]
  40c5e2:	8c21      	ldrh	r1, [r4, #32]
  40c5e4:	f8ad 1004 	strh.w	r1, [sp, #4]
  40c5e8:	9200      	str	r2, [sp, #0]
  40c5ea:	b21b      	sxth	r3, r3
  40c5ec:	aa20      	add	r2, sp, #128	; 0x80
  40c5ee:	a922      	add	r1, sp, #136	; 0x88
  40c5f0:	9806      	ldr	r0, [sp, #24]
  40c5f2:	4c06      	ldr	r4, [pc, #24]	; (40c60c <lv_draw_rect+0x150c>)
  40c5f4:	47a0      	blx	r4
}
  40c5f6:	b02b      	add	sp, #172	; 0xac
  40c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c5fc:	00409fed 	.word	0x00409fed
  40c600:	00411105 	.word	0x00411105
  40c604:	0040a03d 	.word	0x0040a03d
  40c608:	0040a09d 	.word	0x0040a09d
  40c60c:	0040a9cd 	.word	0x0040a9cd
  40c610:	00406d05 	.word	0x00406d05
                _lv_blend_fill(clip_area, &blend_area, dsc->bg_color, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c616:	7893      	ldrb	r3, [r2, #2]
  40c618:	9302      	str	r3, [sp, #8]
  40c61a:	23ff      	movs	r3, #255	; 0xff
  40c61c:	9301      	str	r3, [sp, #4]
  40c61e:	9000      	str	r0, [sp, #0]
  40c620:	9b07      	ldr	r3, [sp, #28]
  40c622:	8892      	ldrh	r2, [r2, #4]
  40c624:	a920      	add	r1, sp, #128	; 0x80
  40c626:	9806      	ldr	r0, [sp, #24]
  40c628:	4cad      	ldr	r4, [pc, #692]	; (40c8e0 <lv_draw_rect+0x17e0>)
  40c62a:	47a0      	blx	r4
        if(bottom_y <= draw_area.y2) {
  40c62c:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40c630:	4553      	cmp	r3, sl
  40c632:	db10      	blt.n	40c656 <lv_draw_rect+0x1556>
            blend_area.y1 = bottom_y;
  40c634:	f8ad a082 	strh.w	sl, [sp, #130]	; 0x82
            blend_area.y2 = bottom_y;
  40c638:	f8ad a086 	strh.w	sl, [sp, #134]	; 0x86
                _lv_blend_fill(clip_area, &blend_area, dsc->bg_color, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c63c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c63e:	7893      	ldrb	r3, [r2, #2]
  40c640:	9302      	str	r3, [sp, #8]
  40c642:	23ff      	movs	r3, #255	; 0xff
  40c644:	9301      	str	r3, [sp, #4]
  40c646:	9b08      	ldr	r3, [sp, #32]
  40c648:	9300      	str	r3, [sp, #0]
  40c64a:	9b07      	ldr	r3, [sp, #28]
  40c64c:	8892      	ldrh	r2, [r2, #4]
  40c64e:	a920      	add	r1, sp, #128	; 0x80
  40c650:	9806      	ldr	r0, [sp, #24]
  40c652:	4ca3      	ldr	r4, [pc, #652]	; (40c8e0 <lv_draw_rect+0x17e0>)
  40c654:	47a0      	blx	r4
    for(h = 0; h < rout; h++) {
  40c656:	f108 0801 	add.w	r8, r8, #1
  40c65a:	45c3      	cmp	fp, r8
  40c65c:	f340 8192 	ble.w	40c984 <lv_draw_rect+0x1884>
        lv_coord_t top_y = coords_bg.y1 + h;
  40c660:	fa1f f788 	uxth.w	r7, r8
  40c664:	f8bd 5072 	ldrh.w	r5, [sp, #114]	; 0x72
  40c668:	443d      	add	r5, r7
  40c66a:	b2ad      	uxth	r5, r5
  40c66c:	fa0f f985 	sxth.w	r9, r5
        lv_coord_t bottom_y = coords_bg.y2 - h;
  40c670:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
  40c674:	1bdf      	subs	r7, r3, r7
  40c676:	b2bf      	uxth	r7, r7
  40c678:	fa0f fa87 	sxth.w	sl, r7
        if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
  40c67c:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
  40c680:	454b      	cmp	r3, r9
  40c682:	dd03      	ble.n	40c68c <lv_draw_rect+0x158c>
  40c684:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40c688:	4553      	cmp	r3, sl
  40c68a:	dbe4      	blt.n	40c656 <lv_draw_rect+0x1556>
        lv_memset(mask_buf, opa, draw_area_w);
  40c68c:	9a05      	ldr	r2, [sp, #20]
  40c68e:	9904      	ldr	r1, [sp, #16]
  40c690:	9c07      	ldr	r4, [sp, #28]
  40c692:	4620      	mov	r0, r4
  40c694:	4b93      	ldr	r3, [pc, #588]	; (40c8e4 <lv_draw_rect+0x17e4>)
  40c696:	4798      	blx	r3
        mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, draw_area_w);
  40c698:	9b05      	ldr	r3, [sp, #20]
  40c69a:	464a      	mov	r2, r9
  40c69c:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  40c6a0:	4620      	mov	r0, r4
  40c6a2:	4c91      	ldr	r4, [pc, #580]	; (40c8e8 <lv_draw_rect+0x17e8>)
  40c6a4:	47a0      	blx	r4
  40c6a6:	9008      	str	r0, [sp, #32]
        if(top_y >= draw_area.y1) {
  40c6a8:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
  40c6ac:	454b      	cmp	r3, r9
  40c6ae:	dc09      	bgt.n	40c6c4 <lv_draw_rect+0x15c4>
            blend_area.y1 = top_y;
  40c6b0:	f8ad 9082 	strh.w	r9, [sp, #130]	; 0x82
            blend_area.y2 = top_y;
  40c6b4:	f8ad 9086 	strh.w	r9, [sp, #134]	; 0x86
            if(grad_dir == LV_GRAD_DIR_NONE) {
  40c6b8:	2e00      	cmp	r6, #0
  40c6ba:	d0ab      	beq.n	40c614 <lv_draw_rect+0x1514>
            else if(grad_dir == LV_GRAD_DIR_HOR) {
  40c6bc:	2e02      	cmp	r6, #2
  40c6be:	d030      	beq.n	40c722 <lv_draw_rect+0x1622>
            else if(grad_dir == LV_GRAD_DIR_VER) {
  40c6c0:	2e01      	cmp	r6, #1
  40c6c2:	d051      	beq.n	40c768 <lv_draw_rect+0x1668>
        if(bottom_y <= draw_area.y2) {
  40c6c4:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40c6c8:	4553      	cmp	r3, sl
  40c6ca:	dbc4      	blt.n	40c656 <lv_draw_rect+0x1556>
            blend_area.y1 = bottom_y;
  40c6cc:	f8ad a082 	strh.w	sl, [sp, #130]	; 0x82
            blend_area.y2 = bottom_y;
  40c6d0:	f8ad a086 	strh.w	sl, [sp, #134]	; 0x86
            if(grad_dir == LV_GRAD_DIR_NONE) {
  40c6d4:	2e00      	cmp	r6, #0
  40c6d6:	d0b1      	beq.n	40c63c <lv_draw_rect+0x153c>
            else if(grad_dir == LV_GRAD_DIR_HOR) {
  40c6d8:	2e02      	cmp	r6, #2
  40c6da:	d037      	beq.n	40c74c <lv_draw_rect+0x164c>
            else if(grad_dir == LV_GRAD_DIR_VER) {
  40c6dc:	2e01      	cmp	r6, #1
  40c6de:	d1ba      	bne.n	40c656 <lv_draw_rect+0x1556>
                lv_color_t c = grad_get(dsc, coords_h, bottom_y - coords_bg.y1);
  40c6e0:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
  40c6e4:	1afb      	subs	r3, r7, r3
  40c6e6:	b29b      	uxth	r3, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  40c6e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c6ea:	f892 e008 	ldrb.w	lr, [r2, #8]
  40c6ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c6f0:	fb02 f20e 	mul.w	r2, r2, lr
  40c6f4:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  40c6f6:	b218      	sxth	r0, r3
  40c6f8:	4282      	cmp	r2, r0
  40c6fa:	f280 80cd 	bge.w	40c898 <lv_draw_rect+0x1798>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  40c6fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40c700:	7a79      	ldrb	r1, [r7, #9]
  40c702:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c704:	fb01 f504 	mul.w	r5, r1, r4
    if(i >= max) return dsc->bg_grad_color;
  40c708:	ebb0 2f25 	cmp.w	r0, r5, asr #8
  40c70c:	f2c0 80f0 	blt.w	40c8f0 <lv_draw_rect+0x17f0>
  40c710:	79ba      	ldrb	r2, [r7, #6]
  40c712:	f002 0007 	and.w	r0, r2, #7
  40c716:	08d2      	lsrs	r2, r2, #3
  40c718:	79fb      	ldrb	r3, [r7, #7]
  40c71a:	f003 011f 	and.w	r1, r3, #31
  40c71e:	095b      	lsrs	r3, r3, #5
  40c720:	e0c3      	b.n	40c8aa <lv_draw_rect+0x17aa>
                _lv_blend_map(clip_area, &blend_area, grad_map, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c724:	789b      	ldrb	r3, [r3, #2]
  40c726:	9302      	str	r3, [sp, #8]
  40c728:	23ff      	movs	r3, #255	; 0xff
  40c72a:	9301      	str	r3, [sp, #4]
  40c72c:	9b08      	ldr	r3, [sp, #32]
  40c72e:	9300      	str	r3, [sp, #0]
  40c730:	9b07      	ldr	r3, [sp, #28]
  40c732:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c734:	a920      	add	r1, sp, #128	; 0x80
  40c736:	9806      	ldr	r0, [sp, #24]
  40c738:	4d6c      	ldr	r5, [pc, #432]	; (40c8ec <lv_draw_rect+0x17ec>)
  40c73a:	47a8      	blx	r5
        if(bottom_y <= draw_area.y2) {
  40c73c:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40c740:	4553      	cmp	r3, sl
  40c742:	db88      	blt.n	40c656 <lv_draw_rect+0x1556>
            blend_area.y1 = bottom_y;
  40c744:	f8ad a082 	strh.w	sl, [sp, #130]	; 0x82
            blend_area.y2 = bottom_y;
  40c748:	f8ad a086 	strh.w	sl, [sp, #134]	; 0x86
                _lv_blend_map(clip_area, &blend_area, grad_map, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c74e:	789b      	ldrb	r3, [r3, #2]
  40c750:	9302      	str	r3, [sp, #8]
  40c752:	23ff      	movs	r3, #255	; 0xff
  40c754:	9301      	str	r3, [sp, #4]
  40c756:	9b08      	ldr	r3, [sp, #32]
  40c758:	9300      	str	r3, [sp, #0]
  40c75a:	9b07      	ldr	r3, [sp, #28]
  40c75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c75e:	a920      	add	r1, sp, #128	; 0x80
  40c760:	9806      	ldr	r0, [sp, #24]
  40c762:	4d62      	ldr	r5, [pc, #392]	; (40c8ec <lv_draw_rect+0x17ec>)
  40c764:	47a8      	blx	r5
  40c766:	e776      	b.n	40c656 <lv_draw_rect+0x1556>
                lv_color_t c = grad_get(dsc, coords_h, top_y - coords_bg.y1);
  40c768:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
  40c76c:	1aeb      	subs	r3, r5, r3
  40c76e:	b29b      	uxth	r3, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  40c770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c772:	f892 c008 	ldrb.w	ip, [r2, #8]
  40c776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c778:	fb02 f20c 	mul.w	r2, r2, ip
  40c77c:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  40c77e:	b218      	sxth	r0, r3
  40c780:	4282      	cmp	r2, r0
  40c782:	da11      	bge.n	40c7a8 <lv_draw_rect+0x16a8>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  40c784:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c786:	7a49      	ldrb	r1, [r1, #9]
  40c788:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c78a:	fb01 f504 	mul.w	r5, r1, r4
    if(i >= max) return dsc->bg_grad_color;
  40c78e:	ebb0 2f25 	cmp.w	r0, r5, asr #8
  40c792:	db35      	blt.n	40c800 <lv_draw_rect+0x1700>
  40c794:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c796:	798a      	ldrb	r2, [r1, #6]
  40c798:	f002 0007 	and.w	r0, r2, #7
  40c79c:	08d2      	lsrs	r2, r2, #3
  40c79e:	79cb      	ldrb	r3, [r1, #7]
  40c7a0:	f003 011f 	and.w	r1, r3, #31
  40c7a4:	095b      	lsrs	r3, r3, #5
  40c7a6:	e008      	b.n	40c7ba <lv_draw_rect+0x16ba>
    if(i <= min) return dsc->bg_color;
  40c7a8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c7aa:	790a      	ldrb	r2, [r1, #4]
  40c7ac:	f002 0007 	and.w	r0, r2, #7
  40c7b0:	08d2      	lsrs	r2, r2, #3
  40c7b2:	794b      	ldrb	r3, [r1, #5]
  40c7b4:	f003 011f 	and.w	r1, r3, #31
  40c7b8:	095b      	lsrs	r3, r3, #5
  40c7ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40c7bc:	f360 0402 	bfi	r4, r0, #0, #3
  40c7c0:	4620      	mov	r0, r4
  40c7c2:	f362 00c7 	bfi	r0, r2, #3, #5
  40c7c6:	4602      	mov	r2, r0
  40c7c8:	f361 220c 	bfi	r2, r1, #8, #5
  40c7cc:	f363 324f 	bfi	r2, r3, #13, #3
  40c7d0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
                _lv_blend_fill(clip_area, &blend_area, c, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c7d6:	789b      	ldrb	r3, [r3, #2]
  40c7d8:	9302      	str	r3, [sp, #8]
  40c7da:	23ff      	movs	r3, #255	; 0xff
  40c7dc:	9301      	str	r3, [sp, #4]
  40c7de:	9b08      	ldr	r3, [sp, #32]
  40c7e0:	9300      	str	r3, [sp, #0]
  40c7e2:	9b07      	ldr	r3, [sp, #28]
  40c7e4:	a920      	add	r1, sp, #128	; 0x80
  40c7e6:	9806      	ldr	r0, [sp, #24]
  40c7e8:	4c3d      	ldr	r4, [pc, #244]	; (40c8e0 <lv_draw_rect+0x17e0>)
  40c7ea:	47a0      	blx	r4
        if(bottom_y <= draw_area.y2) {
  40c7ec:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
  40c7f0:	4553      	cmp	r3, sl
  40c7f2:	f6ff af30 	blt.w	40c656 <lv_draw_rect+0x1556>
            blend_area.y1 = bottom_y;
  40c7f6:	f8ad a082 	strh.w	sl, [sp, #130]	; 0x82
            blend_area.y2 = bottom_y;
  40c7fa:	f8ad a086 	strh.w	sl, [sp, #134]	; 0x86
  40c7fe:	e76f      	b.n	40c6e0 <lv_draw_rect+0x15e0>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  40c800:	eba1 0c0c 	sub.w	ip, r1, ip
    d = (s * d) >> 8;
  40c804:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c806:	fb01 fc0c 	mul.w	ip, r1, ip
    i -= min;
  40c80a:	1a9b      	subs	r3, r3, r2
    lv_opa_t mix = (i * 255) / d;
  40c80c:	b21b      	sxth	r3, r3
  40c80e:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
  40c812:	ea4f 2c2c 	mov.w	ip, ip, asr #8
    lv_opa_t mix = (i * 255) / d;
  40c816:	fb93 fcfc 	sdiv	ip, r3, ip
  40c81a:	fa5f fc8c 	uxtb.w	ip, ip
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c81e:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
  40c822:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40c824:	79a3      	ldrb	r3, [r4, #6]
  40c826:	08da      	lsrs	r2, r3, #3
  40c828:	f894 e004 	ldrb.w	lr, [r4, #4]
  40c82c:	ea4f 01de 	mov.w	r1, lr, lsr #3
  40c830:	fb09 f101 	mul.w	r1, r9, r1
  40c834:	fb0c 1202 	mla	r2, ip, r2, r1
  40c838:	3280      	adds	r2, #128	; 0x80
  40c83a:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c83e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c842:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c846:	f003 0307 	and.w	r3, r3, #7
  40c84a:	79e1      	ldrb	r1, [r4, #7]
  40c84c:	0948      	lsrs	r0, r1, #5
  40c84e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40c852:	f00e 0e07 	and.w	lr, lr, #7
  40c856:	7965      	ldrb	r5, [r4, #5]
  40c858:	0968      	lsrs	r0, r5, #5
  40c85a:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
  40c85e:	fb09 f000 	mul.w	r0, r9, r0
  40c862:	fb0c 0303 	mla	r3, ip, r3, r0
  40c866:	3380      	adds	r3, #128	; 0x80
  40c868:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  40c86c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  40c870:	f3c3 6082 	ubfx	r0, r3, #26, #3
  40c874:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c878:	f001 011f 	and.w	r1, r1, #31
  40c87c:	f005 051f 	and.w	r5, r5, #31
  40c880:	fb09 f505 	mul.w	r5, r9, r5
  40c884:	fb0c 5101 	mla	r1, ip, r1, r5
  40c888:	3180      	adds	r1, #128	; 0x80
  40c88a:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40c88e:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40c892:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c896:	e790      	b.n	40c7ba <lv_draw_rect+0x16ba>
    if(i <= min) return dsc->bg_color;
  40c898:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c89a:	790a      	ldrb	r2, [r1, #4]
  40c89c:	f002 0007 	and.w	r0, r2, #7
  40c8a0:	08d2      	lsrs	r2, r2, #3
  40c8a2:	794b      	ldrb	r3, [r1, #5]
  40c8a4:	f003 011f 	and.w	r1, r3, #31
  40c8a8:	095b      	lsrs	r3, r3, #5
  40c8aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c8ac:	f360 0402 	bfi	r4, r0, #0, #3
  40c8b0:	4620      	mov	r0, r4
  40c8b2:	f362 00c7 	bfi	r0, r2, #3, #5
  40c8b6:	4602      	mov	r2, r0
  40c8b8:	f361 220c 	bfi	r2, r1, #8, #5
  40c8bc:	f363 324f 	bfi	r2, r3, #13, #3
  40c8c0:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
                _lv_blend_fill(clip_area, &blend_area, c, mask_buf, mask_res, LV_OPA_COVER, dsc->blend_mode);
  40c8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c8c6:	789b      	ldrb	r3, [r3, #2]
  40c8c8:	9302      	str	r3, [sp, #8]
  40c8ca:	23ff      	movs	r3, #255	; 0xff
  40c8cc:	9301      	str	r3, [sp, #4]
  40c8ce:	9b08      	ldr	r3, [sp, #32]
  40c8d0:	9300      	str	r3, [sp, #0]
  40c8d2:	9b07      	ldr	r3, [sp, #28]
  40c8d4:	a920      	add	r1, sp, #128	; 0x80
  40c8d6:	9806      	ldr	r0, [sp, #24]
  40c8d8:	4c01      	ldr	r4, [pc, #4]	; (40c8e0 <lv_draw_rect+0x17e0>)
  40c8da:	47a0      	blx	r4
  40c8dc:	e6bb      	b.n	40c656 <lv_draw_rect+0x1556>
  40c8de:	bf00      	nop
  40c8e0:	00406181 	.word	0x00406181
  40c8e4:	004113a3 	.word	0x004113a3
  40c8e8:	00409fed 	.word	0x00409fed
  40c8ec:	00406d05 	.word	0x00406d05
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  40c8f0:	eba1 0e0e 	sub.w	lr, r1, lr
    d = (s * d) >> 8;
  40c8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c8f6:	fb01 fe0e 	mul.w	lr, r1, lr
    i -= min;
  40c8fa:	1a9b      	subs	r3, r3, r2
    lv_opa_t mix = (i * 255) / d;
  40c8fc:	b21b      	sxth	r3, r3
  40c8fe:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
  40c902:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    lv_opa_t mix = (i * 255) / d;
  40c906:	fb93 fefe 	sdiv	lr, r3, lr
  40c90a:	fa5f fe8e 	uxtb.w	lr, lr
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c90e:	f1ce 0cff 	rsb	ip, lr, #255	; 0xff
  40c912:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40c914:	79a3      	ldrb	r3, [r4, #6]
  40c916:	08da      	lsrs	r2, r3, #3
  40c918:	7927      	ldrb	r7, [r4, #4]
  40c91a:	08f9      	lsrs	r1, r7, #3
  40c91c:	fb0c f101 	mul.w	r1, ip, r1
  40c920:	fb0e 1202 	mla	r2, lr, r2, r1
  40c924:	3280      	adds	r2, #128	; 0x80
  40c926:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c92a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c92e:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c932:	f003 0307 	and.w	r3, r3, #7
  40c936:	79e1      	ldrb	r1, [r4, #7]
  40c938:	0948      	lsrs	r0, r1, #5
  40c93a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40c93e:	f007 0707 	and.w	r7, r7, #7
  40c942:	7965      	ldrb	r5, [r4, #5]
  40c944:	0968      	lsrs	r0, r5, #5
  40c946:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
  40c94a:	fb0c f000 	mul.w	r0, ip, r0
  40c94e:	fb0e 0303 	mla	r3, lr, r3, r0
  40c952:	3380      	adds	r3, #128	; 0x80
  40c954:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  40c958:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  40c95c:	f3c3 6082 	ubfx	r0, r3, #26, #3
  40c960:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c964:	f001 011f 	and.w	r1, r1, #31
  40c968:	f005 051f 	and.w	r5, r5, #31
  40c96c:	fb0c f505 	mul.w	r5, ip, r5
  40c970:	fb0e 5101 	mla	r1, lr, r1, r5
  40c974:	3180      	adds	r1, #128	; 0x80
  40c976:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40c97a:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40c97e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c982:	e792      	b.n	40c8aa <lv_draw_rect+0x17aa>
  40c984:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  40c988:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if(!mask_any && grad_dir == LV_GRAD_DIR_NONE) {
  40c98a:	b186      	cbz	r6, 40c9ae <lv_draw_rect+0x18ae>
        int32_t h_end = coords_bg.y2 - rout;
  40c98c:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
  40c990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c992:	1aff      	subs	r7, r7, r3
        for(h = coords_bg.y1 + rout; h <= h_end; h++) {
  40c994:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
  40c998:	441d      	add	r5, r3
  40c99a:	42af      	cmp	r7, r5
  40c99c:	f6ff ad64 	blt.w	40c468 <lv_draw_rect+0x1368>
                _lv_blend_map(clip_area, &blend_area, grad_map, mask_buf, mask_res, opa, dsc->blend_mode);
  40c9a0:	f8df 8358 	ldr.w	r8, [pc, #856]	; 40ccfc <lv_draw_rect+0x1bfc>
                _lv_blend_fill(clip_area, &blend_area, c, mask_buf, mask_res, opa, dsc->blend_mode);
  40c9a4:	f8df b324 	ldr.w	fp, [pc, #804]	; 40cccc <lv_draw_rect+0x1bcc>
  40c9a8:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
  40c9ac:	e027      	b.n	40c9fe <lv_draw_rect+0x18fe>
        blend_area.y1 = coords_bg.y1 + rout;
  40c9ae:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  40c9b2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
  40c9b6:	4413      	add	r3, r2
  40c9b8:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        blend_area.y2 = coords_bg.y2 - rout;
  40c9bc:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
  40c9c0:	1a9b      	subs	r3, r3, r2
  40c9c2:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        _lv_blend_fill(clip_area, &blend_area, dsc->bg_color, mask_buf, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->blend_mode);
  40c9c6:	78a3      	ldrb	r3, [r4, #2]
  40c9c8:	9302      	str	r3, [sp, #8]
  40c9ca:	9b04      	ldr	r3, [sp, #16]
  40c9cc:	9301      	str	r3, [sp, #4]
  40c9ce:	2301      	movs	r3, #1
  40c9d0:	9300      	str	r3, [sp, #0]
  40c9d2:	9b07      	ldr	r3, [sp, #28]
  40c9d4:	88a2      	ldrh	r2, [r4, #4]
  40c9d6:	a920      	add	r1, sp, #128	; 0x80
  40c9d8:	9806      	ldr	r0, [sp, #24]
  40c9da:	4dbc      	ldr	r5, [pc, #752]	; (40cccc <lv_draw_rect+0x1bcc>)
  40c9dc:	47a8      	blx	r5
  40c9de:	e543      	b.n	40c468 <lv_draw_rect+0x1368>
                _lv_blend_map(clip_area, &blend_area, grad_map, mask_buf, mask_res, opa, dsc->blend_mode);
  40c9e0:	78a3      	ldrb	r3, [r4, #2]
  40c9e2:	9302      	str	r3, [sp, #8]
  40c9e4:	9b04      	ldr	r3, [sp, #16]
  40c9e6:	9301      	str	r3, [sp, #4]
  40c9e8:	2301      	movs	r3, #1
  40c9ea:	9300      	str	r3, [sp, #0]
  40c9ec:	9b07      	ldr	r3, [sp, #28]
  40c9ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c9f0:	a920      	add	r1, sp, #128	; 0x80
  40c9f2:	9806      	ldr	r0, [sp, #24]
  40c9f4:	47c0      	blx	r8
        for(h = coords_bg.y1 + rout; h <= h_end; h++) {
  40c9f6:	3501      	adds	r5, #1
  40c9f8:	42af      	cmp	r7, r5
  40c9fa:	f6ff ad35 	blt.w	40c468 <lv_draw_rect+0x1368>
            blend_area.y1 = h;
  40c9fe:	b22b      	sxth	r3, r5
  40ca00:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            blend_area.y2 = h;
  40ca04:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            else if(grad_dir == LV_GRAD_DIR_HOR) {
  40ca08:	2e02      	cmp	r6, #2
  40ca0a:	d0e9      	beq.n	40c9e0 <lv_draw_rect+0x18e0>
            else if(grad_dir == LV_GRAD_DIR_VER) {
  40ca0c:	2e01      	cmp	r6, #1
  40ca0e:	d1f2      	bne.n	40c9f6 <lv_draw_rect+0x18f6>
                lv_color_t c = grad_get(dsc, coords_h, h - coords_bg.y1);
  40ca10:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
  40ca14:	1aeb      	subs	r3, r5, r3
  40ca16:	b29b      	uxth	r3, r3
  40ca18:	9305      	str	r3, [sp, #20]
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  40ca1a:	7a20      	ldrb	r0, [r4, #8]
  40ca1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ca1e:	fb02 f200 	mul.w	r2, r2, r0
  40ca22:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  40ca24:	b219      	sxth	r1, r3
  40ca26:	428a      	cmp	r2, r1
  40ca28:	da10      	bge.n	40ca4c <lv_draw_rect+0x194c>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  40ca2a:	f894 e009 	ldrb.w	lr, [r4, #9]
  40ca2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ca30:	fb0e fc03 	mul.w	ip, lr, r3
    if(i >= max) return dsc->bg_grad_color;
  40ca34:	ebb1 2f2c 	cmp.w	r1, ip, asr #8
  40ca38:	db24      	blt.n	40ca84 <lv_draw_rect+0x1984>
  40ca3a:	79a2      	ldrb	r2, [r4, #6]
  40ca3c:	f002 0007 	and.w	r0, r2, #7
  40ca40:	08d2      	lsrs	r2, r2, #3
  40ca42:	79e3      	ldrb	r3, [r4, #7]
  40ca44:	f003 011f 	and.w	r1, r3, #31
  40ca48:	095b      	lsrs	r3, r3, #5
  40ca4a:	e007      	b.n	40ca5c <lv_draw_rect+0x195c>
    if(i <= min) return dsc->bg_color;
  40ca4c:	7922      	ldrb	r2, [r4, #4]
  40ca4e:	f002 0007 	and.w	r0, r2, #7
  40ca52:	08d2      	lsrs	r2, r2, #3
  40ca54:	7963      	ldrb	r3, [r4, #5]
  40ca56:	f003 011f 	and.w	r1, r3, #31
  40ca5a:	095b      	lsrs	r3, r3, #5
  40ca5c:	f360 0902 	bfi	r9, r0, #0, #3
  40ca60:	f362 09c7 	bfi	r9, r2, #3, #5
  40ca64:	f361 290c 	bfi	r9, r1, #8, #5
  40ca68:	f363 394f 	bfi	r9, r3, #13, #3
                _lv_blend_fill(clip_area, &blend_area, c, mask_buf, mask_res, opa, dsc->blend_mode);
  40ca6c:	78a3      	ldrb	r3, [r4, #2]
  40ca6e:	9302      	str	r3, [sp, #8]
  40ca70:	9b04      	ldr	r3, [sp, #16]
  40ca72:	9301      	str	r3, [sp, #4]
  40ca74:	2301      	movs	r3, #1
  40ca76:	9300      	str	r3, [sp, #0]
  40ca78:	9b07      	ldr	r3, [sp, #28]
  40ca7a:	464a      	mov	r2, r9
  40ca7c:	a920      	add	r1, sp, #128	; 0x80
  40ca7e:	9806      	ldr	r0, [sp, #24]
  40ca80:	47d8      	blx	fp
  40ca82:	e7b8      	b.n	40c9f6 <lv_draw_rect+0x18f6>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  40ca84:	ebae 0100 	sub.w	r1, lr, r0
    d = (s * d) >> 8;
  40ca88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ca8a:	fb03 f101 	mul.w	r1, r3, r1
    i -= min;
  40ca8e:	9b05      	ldr	r3, [sp, #20]
  40ca90:	1a9b      	subs	r3, r3, r2
    lv_opa_t mix = (i * 255) / d;
  40ca92:	b21b      	sxth	r3, r3
  40ca94:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
  40ca98:	120a      	asrs	r2, r1, #8
    lv_opa_t mix = (i * 255) / d;
  40ca9a:	fb93 f3f2 	sdiv	r3, r3, r2
  40ca9e:	b2db      	uxtb	r3, r3
  40caa0:	4618      	mov	r0, r3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40caa2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40caa6:	f894 e006 	ldrb.w	lr, [r4, #6]
  40caaa:	ea4f 02de 	mov.w	r2, lr, lsr #3
  40caae:	f894 c004 	ldrb.w	ip, [r4, #4]
  40cab2:	ea4f 01dc 	mov.w	r1, ip, lsr #3
  40cab6:	9308      	str	r3, [sp, #32]
  40cab8:	fb03 f101 	mul.w	r1, r3, r1
  40cabc:	9005      	str	r0, [sp, #20]
  40cabe:	fb00 1202 	mla	r2, r0, r2, r1
  40cac2:	3280      	adds	r2, #128	; 0x80
  40cac4:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40cac8:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40cacc:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40cad0:	f00e 0307 	and.w	r3, lr, #7
  40cad4:	79e1      	ldrb	r1, [r4, #7]
  40cad6:	910a      	str	r1, [sp, #40]	; 0x28
  40cad8:	0948      	lsrs	r0, r1, #5
  40cada:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  40cade:	f00c 0c07 	and.w	ip, ip, #7
  40cae2:	f894 e005 	ldrb.w	lr, [r4, #5]
  40cae6:	ea4f 105e 	mov.w	r0, lr, lsr #5
  40caea:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40caee:	9908      	ldr	r1, [sp, #32]
  40caf0:	fb01 f000 	mul.w	r0, r1, r0
  40caf4:	9905      	ldr	r1, [sp, #20]
  40caf6:	fb01 0303 	mla	r3, r1, r3, r0
  40cafa:	3380      	adds	r3, #128	; 0x80
  40cafc:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  40cb00:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  40cb04:	f3c3 6082 	ubfx	r0, r3, #26, #3
  40cb08:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40cb0c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40cb0e:	f001 0c1f 	and.w	ip, r1, #31
  40cb12:	f00e 0e1f 	and.w	lr, lr, #31
  40cb16:	9908      	ldr	r1, [sp, #32]
  40cb18:	fb01 fe0e 	mul.w	lr, r1, lr
  40cb1c:	9905      	ldr	r1, [sp, #20]
  40cb1e:	fb01 e10c 	mla	r1, r1, ip, lr
  40cb22:	3180      	adds	r1, #128	; 0x80
  40cb24:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
  40cb28:	eb01 11ce 	add.w	r1, r1, lr, lsl #7
  40cb2c:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40cb30:	e794      	b.n	40ca5c <lv_draw_rect+0x195c>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
  40cb32:	4b67      	ldr	r3, [pc, #412]	; (40ccd0 <lv_draw_rect+0x1bd0>)
  40cb34:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_SYMBOL) {
  40cb36:	2802      	cmp	r0, #2
  40cb38:	d00f      	beq.n	40cb5a <lv_draw_rect+0x1a5a>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
  40cb3a:	a91e      	add	r1, sp, #120	; 0x78
  40cb3c:	68e0      	ldr	r0, [r4, #12]
  40cb3e:	4b65      	ldr	r3, [pc, #404]	; (40ccd4 <lv_draw_rect+0x1bd4>)
  40cb40:	4798      	blx	r3
        if(res != LV_RES_OK) {
  40cb42:	2801      	cmp	r0, #1
  40cb44:	d05e      	beq.n	40cc04 <lv_draw_rect+0x1b04>
            LV_LOG_WARN("Couldn't read the background image");
  40cb46:	4b64      	ldr	r3, [pc, #400]	; (40ccd8 <lv_draw_rect+0x1bd8>)
  40cb48:	9300      	str	r3, [sp, #0]
  40cb4a:	4b64      	ldr	r3, [pc, #400]	; (40ccdc <lv_draw_rect+0x1bdc>)
  40cb4c:	f44f 72aa 	mov.w	r2, #340	; 0x154
  40cb50:	4963      	ldr	r1, [pc, #396]	; (40cce0 <lv_draw_rect+0x1be0>)
  40cb52:	2002      	movs	r0, #2
  40cb54:	4d63      	ldr	r5, [pc, #396]	; (40cce4 <lv_draw_rect+0x1be4>)
  40cb56:	47a8      	blx	r5
  40cb58:	e49f      	b.n	40c49a <lv_draw_rect+0x139a>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
  40cb5a:	2300      	movs	r3, #0
  40cb5c:	9302      	str	r3, [sp, #8]
  40cb5e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  40cb62:	9201      	str	r2, [sp, #4]
  40cb64:	9300      	str	r3, [sp, #0]
  40cb66:	6922      	ldr	r2, [r4, #16]
  40cb68:	68e1      	ldr	r1, [r4, #12]
  40cb6a:	a81e      	add	r0, sp, #120	; 0x78
  40cb6c:	4d5e      	ldr	r5, [pc, #376]	; (40cce8 <lv_draw_rect+0x1be8>)
  40cb6e:	47a8      	blx	r5
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
  40cb70:	f8ba 1000 	ldrh.w	r1, [sl]
  40cb74:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cb78:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  40cb7c:	3301      	adds	r3, #1
  40cb7e:	1a5b      	subs	r3, r3, r1
  40cb80:	b21b      	sxth	r3, r3
  40cb82:	2b00      	cmp	r3, #0
  40cb84:	bfb8      	it	lt
  40cb86:	3301      	addlt	r3, #1
  40cb88:	105b      	asrs	r3, r3, #1
  40cb8a:	4610      	mov	r0, r2
  40cb8c:	2a00      	cmp	r2, #0
  40cb8e:	bfb8      	it	lt
  40cb90:	1c50      	addlt	r0, r2, #1
  40cb92:	eba1 0160 	sub.w	r1, r1, r0, asr #1
  40cb96:	440b      	add	r3, r1
  40cb98:	b29b      	uxth	r3, r3
  40cb9a:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        a.x2 = a.x1 + size.x - 1;
  40cb9e:	3a01      	subs	r2, #1
  40cba0:	4413      	add	r3, r2
  40cba2:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
  40cba6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
  40cbaa:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cbae:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  40cbb2:	3301      	adds	r3, #1
  40cbb4:	1a5b      	subs	r3, r3, r1
  40cbb6:	b21b      	sxth	r3, r3
  40cbb8:	2b00      	cmp	r3, #0
  40cbba:	bfb8      	it	lt
  40cbbc:	3301      	addlt	r3, #1
  40cbbe:	105b      	asrs	r3, r3, #1
  40cbc0:	4610      	mov	r0, r2
  40cbc2:	2a00      	cmp	r2, #0
  40cbc4:	bfb8      	it	lt
  40cbc6:	1c50      	addlt	r0, r2, #1
  40cbc8:	eba1 0160 	sub.w	r1, r1, r0, asr #1
  40cbcc:	440b      	add	r3, r1
  40cbce:	b29b      	uxth	r3, r3
  40cbd0:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
        a.y2 = a.y1 + size.y - 1;
  40cbd4:	3a01      	subs	r2, #1
  40cbd6:	4413      	add	r3, r2
  40cbd8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
        lv_draw_label_dsc_init(&label_draw_dsc);
  40cbdc:	a822      	add	r0, sp, #136	; 0x88
  40cbde:	4b43      	ldr	r3, [pc, #268]	; (40ccec <lv_draw_rect+0x1bec>)
  40cbe0:	4798      	blx	r3
        label_draw_dsc.font = dsc->bg_img_symbol_font;
  40cbe2:	6923      	ldr	r3, [r4, #16]
  40cbe4:	9322      	str	r3, [sp, #136]	; 0x88
        label_draw_dsc.color = dsc->bg_img_recolor;
  40cbe6:	8aa3      	ldrh	r3, [r4, #20]
  40cbe8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        label_draw_dsc.opa = dsc->bg_img_opa;
  40cbec:	7da3      	ldrb	r3, [r4, #22]
  40cbee:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
  40cbf2:	2300      	movs	r3, #0
  40cbf4:	9300      	str	r3, [sp, #0]
  40cbf6:	68e3      	ldr	r3, [r4, #12]
  40cbf8:	aa22      	add	r2, sp, #136	; 0x88
  40cbfa:	9906      	ldr	r1, [sp, #24]
  40cbfc:	a820      	add	r0, sp, #128	; 0x80
  40cbfe:	4d3c      	ldr	r5, [pc, #240]	; (40ccf0 <lv_draw_rect+0x1bf0>)
  40cc00:	47a8      	blx	r5
  40cc02:	e44a      	b.n	40c49a <lv_draw_rect+0x139a>
        lv_draw_img_dsc_init(&img_dsc);
  40cc04:	a822      	add	r0, sp, #136	; 0x88
  40cc06:	4b3b      	ldr	r3, [pc, #236]	; (40ccf4 <lv_draw_rect+0x1bf4>)
  40cc08:	4798      	blx	r3
        img_dsc.blend_mode = dsc->blend_mode;
  40cc0a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
  40cc0e:	78a2      	ldrb	r2, [r4, #2]
  40cc10:	f362 0303 	bfi	r3, r2, #0, #4
  40cc14:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
        img_dsc.recolor = dsc->bg_img_recolor;
  40cc18:	8aa3      	ldrh	r3, [r4, #20]
  40cc1a:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
        img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
  40cc1e:	7de3      	ldrb	r3, [r4, #23]
  40cc20:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
        img_dsc.opa = dsc->bg_img_opa;
  40cc24:	7da3      	ldrb	r3, [r4, #22]
  40cc26:	f88d 3093 	strb.w	r3, [sp, #147]	; 0x93
        if(dsc->bg_img_tiled == false) {
  40cc2a:	7e23      	ldrb	r3, [r4, #24]
  40cc2c:	2b00      	cmp	r3, #0
  40cc2e:	d067      	beq.n	40cd00 <lv_draw_rect+0x1c00>
            area.y1 = coords->y1;
  40cc30:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
  40cc34:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
            area.y2 = area.y1 + header.h - 1;
  40cc38:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
  40cc3c:	f3c3 134a 	ubfx	r3, r3, #5, #11
  40cc40:	3b01      	subs	r3, #1
  40cc42:	4413      	add	r3, r2
  40cc44:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
  40cc48:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  40cc4c:	4293      	cmp	r3, r2
  40cc4e:	f6ff ac24 	blt.w	40c49a <lv_draw_rect+0x139a>
                    lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
  40cc52:	4d29      	ldr	r5, [pc, #164]	; (40ccf8 <lv_draw_rect+0x1bf8>)
  40cc54:	9e06      	ldr	r6, [sp, #24]
                area.x1 = coords->x1;
  40cc56:	f9ba 2000 	ldrsh.w	r2, [sl]
  40cc5a:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
                area.x2 = area.x1 + header.w - 1;
  40cc5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40cc60:	f3c3 238a 	ubfx	r3, r3, #10, #11
  40cc64:	3b01      	subs	r3, #1
  40cc66:	4413      	add	r3, r2
  40cc68:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
  40cc6c:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
  40cc70:	4293      	cmp	r3, r2
  40cc72:	db16      	blt.n	40cca2 <lv_draw_rect+0x1ba2>
                    lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
  40cc74:	ab22      	add	r3, sp, #136	; 0x88
  40cc76:	68e2      	ldr	r2, [r4, #12]
  40cc78:	4631      	mov	r1, r6
  40cc7a:	a820      	add	r0, sp, #128	; 0x80
  40cc7c:	47a8      	blx	r5
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
  40cc7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40cc80:	f3c2 228a 	ubfx	r2, r2, #10, #11
  40cc84:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  40cc88:	4413      	add	r3, r2
  40cc8a:	b21b      	sxth	r3, r3
  40cc8c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
  40cc90:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
  40cc94:	440a      	add	r2, r1
  40cc96:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
  40cc9a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
  40cc9e:	429a      	cmp	r2, r3
  40cca0:	dae8      	bge.n	40cc74 <lv_draw_rect+0x1b74>
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
  40cca2:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
  40cca6:	f3c2 124a 	ubfx	r2, r2, #5, #11
  40ccaa:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  40ccae:	4413      	add	r3, r2
  40ccb0:	b21b      	sxth	r3, r3
  40ccb2:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
  40ccb6:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  40ccba:	440a      	add	r2, r1
  40ccbc:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
  40ccc0:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
  40ccc4:	429a      	cmp	r2, r3
  40ccc6:	dac6      	bge.n	40cc56 <lv_draw_rect+0x1b56>
  40ccc8:	f7ff bbe7 	b.w	40c49a <lv_draw_rect+0x139a>
  40cccc:	00406181 	.word	0x00406181
  40ccd0:	004082ad 	.word	0x004082ad
  40ccd4:	0040e1b1 	.word	0x0040e1b1
  40ccd8:	0041c89c 	.word	0x0041c89c
  40ccdc:	0041c85c 	.word	0x0041c85c
  40cce0:	0041c868 	.word	0x0041c868
  40cce4:	00410edd 	.word	0x00410edd
  40cce8:	00413965 	.word	0x00413965
  40ccec:	00408311 	.word	0x00408311
  40ccf0:	004087dd 	.word	0x004087dd
  40ccf4:	00407f59 	.word	0x00407f59
  40ccf8:	00407ffd 	.word	0x00407ffd
  40ccfc:	00406d05 	.word	0x00406d05
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
  40cd00:	f8ba 1000 	ldrh.w	r1, [sl]
  40cd04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40cd06:	f3c2 228a 	ubfx	r2, r2, #10, #11
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cd0a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  40cd0e:	3301      	adds	r3, #1
  40cd10:	1a5b      	subs	r3, r3, r1
  40cd12:	b21b      	sxth	r3, r3
  40cd14:	2b00      	cmp	r3, #0
  40cd16:	bfb8      	it	lt
  40cd18:	3301      	addlt	r3, #1
  40cd1a:	105b      	asrs	r3, r3, #1
  40cd1c:	eba1 0162 	sub.w	r1, r1, r2, asr #1
  40cd20:	440b      	add	r3, r1
  40cd22:	b299      	uxth	r1, r3
  40cd24:	f8ad 1080 	strh.w	r1, [sp, #128]	; 0x80
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
  40cd28:	f8ba 5002 	ldrh.w	r5, [sl, #2]
  40cd2c:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  40cd30:	f3c0 104a 	ubfx	r0, r0, #5, #11
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cd34:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  40cd38:	3301      	adds	r3, #1
  40cd3a:	1b5b      	subs	r3, r3, r5
  40cd3c:	b21b      	sxth	r3, r3
  40cd3e:	2b00      	cmp	r3, #0
  40cd40:	bfb8      	it	lt
  40cd42:	3301      	addlt	r3, #1
  40cd44:	105b      	asrs	r3, r3, #1
  40cd46:	eba5 0560 	sub.w	r5, r5, r0, asr #1
  40cd4a:	442b      	add	r3, r5
  40cd4c:	b29b      	uxth	r3, r3
  40cd4e:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
            area.x2 = area.x1 + header.w - 1;
  40cd52:	3a01      	subs	r2, #1
  40cd54:	4411      	add	r1, r2
  40cd56:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
            area.y2 = area.y1 + header.h - 1;
  40cd5a:	1e42      	subs	r2, r0, #1
  40cd5c:	4413      	add	r3, r2
  40cd5e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
  40cd62:	ab22      	add	r3, sp, #136	; 0x88
  40cd64:	68e2      	ldr	r2, [r4, #12]
  40cd66:	9906      	ldr	r1, [sp, #24]
  40cd68:	a820      	add	r0, sp, #128	; 0x80
  40cd6a:	4d21      	ldr	r5, [pc, #132]	; (40cdf0 <lv_draw_rect+0x1cf0>)
  40cd6c:	47a8      	blx	r5
  40cd6e:	f7ff bb94 	b.w	40c49a <lv_draw_rect+0x139a>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  40cd72:	eb02 0c03 	add.w	ip, r2, r3
  40cd76:	f1cc 0c00 	rsb	ip, ip, #0
  40cd7a:	fa1f fc8c 	uxth.w	ip, ip
  40cd7e:	f7ff bbbe 	b.w	40c4fe <lv_draw_rect+0x13fe>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  40cd82:	18d7      	adds	r7, r2, r3
  40cd84:	427f      	negs	r7, r7
  40cd86:	b2bf      	uxth	r7, r7
  40cd88:	f7ff bbc1 	b.w	40c50e <lv_draw_rect+0x140e>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  40cd8c:	18d6      	adds	r6, r2, r3
  40cd8e:	4276      	negs	r6, r6
  40cd90:	b2b6      	uxth	r6, r6
  40cd92:	f7ff bbc4 	b.w	40c51e <lv_draw_rect+0x141e>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  40cd96:	18d5      	adds	r5, r2, r3
  40cd98:	426d      	negs	r5, r5
  40cd9a:	b2ad      	uxth	r5, r5
  40cd9c:	f7ff bbc7 	b.w	40c52e <lv_draw_rect+0x142e>
    lv_mem_buf_release(mask_line);
  40cda0:	980c      	ldr	r0, [sp, #48]	; 0x30
  40cda2:	4b14      	ldr	r3, [pc, #80]	; (40cdf4 <lv_draw_rect+0x1cf4>)
  40cda4:	4798      	blx	r3
    lv_draw_mask_free_param(&mask_param);
  40cda6:	a822      	add	r0, sp, #136	; 0x88
  40cda8:	4b13      	ldr	r3, [pc, #76]	; (40cdf8 <lv_draw_rect+0x1cf8>)
  40cdaa:	4798      	blx	r3
        for(i = 0; i < size * size; i++) {
  40cdac:	fb08 f808 	mul.w	r8, r8, r8
  40cdb0:	f1b8 0f00 	cmp.w	r8, #0
  40cdb4:	f77e abd6 	ble.w	40b564 <lv_draw_rect+0x464>
  40cdb8:	9808      	ldr	r0, [sp, #32]
  40cdba:	4602      	mov	r2, r0
  40cdbc:	1e41      	subs	r1, r0, #1
  40cdbe:	eb00 0048 	add.w	r0, r0, r8, lsl #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  40cdc2:	f832 3b02 	ldrh.w	r3, [r2], #2
  40cdc6:	099b      	lsrs	r3, r3, #6
  40cdc8:	f801 3f01 	strb.w	r3, [r1, #1]!
        for(i = 0; i < size * size; i++) {
  40cdcc:	4290      	cmp	r0, r2
  40cdce:	d1f8      	bne.n	40cdc2 <lv_draw_rect+0x1cc2>
  40cdd0:	f7fe bbc8 	b.w	40b564 <lv_draw_rect+0x464>
    lv_opa_t * mask_line = lv_mem_buf_get(size);
  40cdd4:	f8cd 8010 	str.w	r8, [sp, #16]
  40cdd8:	4640      	mov	r0, r8
  40cdda:	4b08      	ldr	r3, [pc, #32]	; (40cdfc <lv_draw_rect+0x1cfc>)
  40cddc:	4798      	blx	r3
  40cdde:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
  40cde0:	f1b8 0f00 	cmp.w	r8, #0
  40cde4:	dddc      	ble.n	40cda0 <lv_draw_rect+0x1ca0>
  40cde6:	2301      	movs	r3, #1
  40cde8:	930b      	str	r3, [sp, #44]	; 0x2c
  40cdea:	f7fe bb16 	b.w	40b41a <lv_draw_rect+0x31a>
  40cdee:	bf00      	nop
  40cdf0:	00407ffd 	.word	0x00407ffd
  40cdf4:	00411105 	.word	0x00411105
  40cdf8:	0040a09d 	.word	0x0040a09d
  40cdfc:	004115a9 	.word	0x004115a9

0040ce00 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  40ce00:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ce02:	b083      	sub	sp, #12
    lv_color_t p_color = lv_color_black();
  40ce04:	f89d 4004 	ldrb.w	r4, [sp, #4]
  40ce08:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
  40ce0c:	f36f 04c7 	bfc	r4, #3, #5
  40ce10:	f88d 4004 	strb.w	r4, [sp, #4]
  40ce14:	f89d 4005 	ldrb.w	r4, [sp, #5]
  40ce18:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
  40ce1c:	f36f 1447 	bfc	r4, #5, #3
  40ce20:	f88d 4005 	strb.w	r4, [sp, #5]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  40ce24:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  40ce26:	7804      	ldrb	r4, [r0, #0]
  40ce28:	f004 041f 	and.w	r4, r4, #31
  40ce2c:	1f25      	subs	r5, r4, #4
  40ce2e:	b2ed      	uxtb	r5, r5
  40ce30:	2d02      	cmp	r5, #2
  40ce32:	d90e      	bls.n	40ce52 <lv_img_buf_get_px_color+0x52>
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  40ce34:	2c07      	cmp	r4, #7
  40ce36:	d028      	beq.n	40ce8a <lv_img_buf_get_px_color+0x8a>
         *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         *so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  40ce38:	2c08      	cmp	r4, #8
  40ce3a:	d03b      	beq.n	40ceb4 <lv_img_buf_get_px_color+0xb4>
         *dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         *so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  40ce3c:	2c09      	cmp	r4, #9
  40ce3e:	d050      	beq.n	40cee2 <lv_img_buf_get_px_color+0xe2>
         *dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         *so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  40ce40:	2c0a      	cmp	r4, #10
  40ce42:	d066      	beq.n	40cf12 <lv_img_buf_get_px_color+0x112>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  40ce44:	3c0b      	subs	r4, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  40ce46:	b2e4      	uxtb	r4, r4
  40ce48:	2c03      	cmp	r4, #3
        p_color = color;
  40ce4a:	bf98      	it	ls
  40ce4c:	f8ad 3004 	strhls.w	r3, [sp, #4]
  40ce50:	e017      	b.n	40ce82 <lv_img_buf_get_px_color+0x82>
  40ce52:	4617      	mov	r7, r2
  40ce54:	460d      	mov	r5, r1
  40ce56:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  40ce58:	7800      	ldrb	r0, [r0, #0]
  40ce5a:	f000 001f 	and.w	r0, r0, #31
  40ce5e:	4b32      	ldr	r3, [pc, #200]	; (40cf28 <lv_img_buf_get_px_color+0x128>)
  40ce60:	4798      	blx	r3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  40ce62:	6821      	ldr	r1, [r4, #0]
  40ce64:	f3c1 218a 	ubfx	r1, r1, #10, #11
  40ce68:	fb07 5101 	mla	r1, r7, r1, r5
  40ce6c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
  40ce70:	fb00 f101 	mul.w	r1, r0, r1
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  40ce74:	1873      	adds	r3, r6, r1
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40ce76:	5c72      	ldrb	r2, [r6, r1]
  40ce78:	f88d 2004 	strb.w	r2, [sp, #4]
  40ce7c:	785b      	ldrb	r3, [r3, #1]
  40ce7e:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    return p_color;
}
  40ce82:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  40ce86:	b003      	add	sp, #12
  40ce88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  40ce8a:	f001 0307 	and.w	r3, r1, #7
  40ce8e:	f1c3 0407 	rsb	r4, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  40ce92:	6803      	ldr	r3, [r0, #0]
  40ce94:	f3c3 238a 	ubfx	r3, r3, #10, #11
  40ce98:	3307      	adds	r3, #7
  40ce9a:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  40ce9c:	fb02 6603 	mla	r6, r2, r3, r6
  40cea0:	eb06 01e1 	add.w	r1, r6, r1, asr #3
  40cea4:	7a0b      	ldrb	r3, [r1, #8]
  40cea6:	2201      	movs	r2, #1
  40cea8:	40a2      	lsls	r2, r4
  40ceaa:	4013      	ands	r3, r2
  40ceac:	4123      	asrs	r3, r4
  40ceae:	f8ad 3004 	strh.w	r3, [sp, #4]
  40ceb2:	e7e6      	b.n	40ce82 <lv_img_buf_get_px_color+0x82>
        uint8_t bit = (x & 0x3) * 2;
  40ceb4:	f001 0403 	and.w	r4, r1, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  40ceb8:	0064      	lsls	r4, r4, #1
  40ceba:	f1c4 0406 	rsb	r4, r4, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  40cebe:	6803      	ldr	r3, [r0, #0]
  40cec0:	f3c3 238a 	ubfx	r3, r3, #10, #11
  40cec4:	3303      	adds	r3, #3
  40cec6:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  40cec8:	fb02 6603 	mla	r6, r2, r3, r6
  40cecc:	eb06 01a1 	add.w	r1, r6, r1, asr #2
  40ced0:	7c0b      	ldrb	r3, [r1, #16]
  40ced2:	2203      	movs	r2, #3
  40ced4:	40a2      	lsls	r2, r4
  40ced6:	4013      	ands	r3, r2
  40ced8:	fa43 f404 	asr.w	r4, r3, r4
  40cedc:	f8ad 4004 	strh.w	r4, [sp, #4]
  40cee0:	e7cf      	b.n	40ce82 <lv_img_buf_get_px_color+0x82>
        uint8_t bit = (x & 0x1) * 4;
  40cee2:	f001 0401 	and.w	r4, r1, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  40cee6:	00a4      	lsls	r4, r4, #2
  40cee8:	f1c4 0404 	rsb	r4, r4, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  40ceec:	6803      	ldr	r3, [r0, #0]
  40ceee:	f3c3 238a 	ubfx	r3, r3, #10, #11
  40cef2:	3301      	adds	r3, #1
  40cef4:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  40cef6:	fb02 6603 	mla	r6, r2, r3, r6
  40cefa:	eb06 0161 	add.w	r1, r6, r1, asr #1
  40cefe:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  40cf02:	220f      	movs	r2, #15
  40cf04:	40a2      	lsls	r2, r4
  40cf06:	4013      	ands	r3, r2
  40cf08:	fa43 f404 	asr.w	r4, r3, r4
  40cf0c:	f8ad 4004 	strh.w	r4, [sp, #4]
  40cf10:	e7b7      	b.n	40ce82 <lv_img_buf_get_px_color+0x82>
        uint32_t px  = dsc->header.w * y + x;
  40cf12:	6803      	ldr	r3, [r0, #0]
  40cf14:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = buf_u8[px];
  40cf18:	4431      	add	r1, r6
  40cf1a:	fb02 1103 	mla	r1, r2, r3, r1
  40cf1e:	f891 3400 	ldrb.w	r3, [r1, #1024]	; 0x400
  40cf22:	f8ad 3004 	strh.w	r3, [sp, #4]
  40cf26:	e7ac      	b.n	40ce82 <lv_img_buf_get_px_color+0x82>
  40cf28:	00407f95 	.word	0x00407f95

0040cf2c <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  40cf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cf2e:	b085      	sub	sp, #20
  40cf30:	4604      	mov	r4, r0
  40cf32:	460d      	mov	r5, r1
  40cf34:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  40cf36:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  40cf38:	7803      	ldrb	r3, [r0, #0]
  40cf3a:	f003 031f 	and.w	r3, r3, #31
  40cf3e:	2b05      	cmp	r3, #5
  40cf40:	d00a      	beq.n	40cf58 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  40cf42:	2b0b      	cmp	r3, #11
  40cf44:	d012      	beq.n	40cf6c <lv_img_buf_get_px_alpha+0x40>
         *so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  40cf46:	2b0c      	cmp	r3, #12
  40cf48:	d027      	beq.n	40cf9a <lv_img_buf_get_px_alpha+0x6e>
         *so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  40cf4a:	2b0d      	cmp	r3, #13
  40cf4c:	d049      	beq.n	40cfe2 <lv_img_buf_get_px_alpha+0xb6>
         *so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  40cf4e:	2b0e      	cmp	r3, #14
  40cf50:	d064      	beq.n	40d01c <lv_img_buf_get_px_alpha+0xf0>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  40cf52:	20ff      	movs	r0, #255	; 0xff
}
  40cf54:	b005      	add	sp, #20
  40cf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  40cf58:	6802      	ldr	r2, [r0, #0]
  40cf5a:	f3c2 228a 	ubfx	r2, r2, #10, #11
  40cf5e:	fb07 1502 	mla	r5, r7, r2, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40cf62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40cf66:	4435      	add	r5, r6
  40cf68:	78a8      	ldrb	r0, [r5, #2]
  40cf6a:	e7f3      	b.n	40cf54 <lv_img_buf_get_px_alpha+0x28>
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  40cf6c:	f001 0307 	and.w	r3, r1, #7
  40cf70:	f1c3 0107 	rsb	r1, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  40cf74:	6802      	ldr	r2, [r0, #0]
  40cf76:	f3c2 228a 	ubfx	r2, r2, #10, #11
  40cf7a:	3207      	adds	r2, #7
  40cf7c:	10d2      	asrs	r2, r2, #3
  40cf7e:	10ed      	asrs	r5, r5, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  40cf80:	fb07 6202 	mla	r2, r7, r2, r6
  40cf84:	5d53      	ldrb	r3, [r2, r5]
  40cf86:	2201      	movs	r2, #1
  40cf88:	408a      	lsls	r2, r1
  40cf8a:	4013      	ands	r3, r2
  40cf8c:	410b      	asrs	r3, r1
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  40cf8e:	f013 0fff 	tst.w	r3, #255	; 0xff
  40cf92:	bf0c      	ite	eq
  40cf94:	20ff      	moveq	r0, #255	; 0xff
  40cf96:	2000      	movne	r0, #0
  40cf98:	e7dc      	b.n	40cf54 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  40cf9a:	2300      	movs	r3, #0
  40cf9c:	f88d 3000 	strb.w	r3, [sp]
  40cfa0:	2355      	movs	r3, #85	; 0x55
  40cfa2:	f88d 3001 	strb.w	r3, [sp, #1]
  40cfa6:	23aa      	movs	r3, #170	; 0xaa
  40cfa8:	f88d 3002 	strb.w	r3, [sp, #2]
  40cfac:	23ff      	movs	r3, #255	; 0xff
  40cfae:	f88d 3003 	strb.w	r3, [sp, #3]
        uint8_t bit = (x & 0x3) * 2;
  40cfb2:	f001 0303 	and.w	r3, r1, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  40cfb6:	005b      	lsls	r3, r3, #1
  40cfb8:	f1c3 0106 	rsb	r1, r3, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  40cfbc:	6802      	ldr	r2, [r0, #0]
  40cfbe:	f3c2 228a 	ubfx	r2, r2, #10, #11
  40cfc2:	3203      	adds	r2, #3
  40cfc4:	1092      	asrs	r2, r2, #2
  40cfc6:	10ad      	asrs	r5, r5, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  40cfc8:	fb07 6202 	mla	r2, r7, r2, r6
  40cfcc:	5d53      	ldrb	r3, [r2, r5]
  40cfce:	2203      	movs	r2, #3
  40cfd0:	408a      	lsls	r2, r1
  40cfd2:	4013      	ands	r3, r2
  40cfd4:	410b      	asrs	r3, r1
        return opa_table[px_opa];
  40cfd6:	aa04      	add	r2, sp, #16
  40cfd8:	fa52 f383 	uxtab	r3, r2, r3
  40cfdc:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  40cfe0:	e7b8      	b.n	40cf54 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  40cfe2:	4b12      	ldr	r3, [pc, #72]	; (40d02c <lv_img_buf_get_px_alpha+0x100>)
  40cfe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40cfe6:	f10d 0e10 	add.w	lr, sp, #16
  40cfea:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  40cfee:	f005 0301 	and.w	r3, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  40cff2:	009b      	lsls	r3, r3, #2
  40cff4:	f1c3 0104 	rsb	r1, r3, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  40cff8:	6822      	ldr	r2, [r4, #0]
  40cffa:	f3c2 228a 	ubfx	r2, r2, #10, #11
  40cffe:	3201      	adds	r2, #1
  40d000:	1052      	asrs	r2, r2, #1
  40d002:	106d      	asrs	r5, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  40d004:	fb07 6202 	mla	r2, r7, r2, r6
  40d008:	5d53      	ldrb	r3, [r2, r5]
  40d00a:	220f      	movs	r2, #15
  40d00c:	408a      	lsls	r2, r1
  40d00e:	4013      	ands	r3, r2
  40d010:	410b      	asrs	r3, r1
        return opa_table[px_opa];
  40d012:	fa5e f383 	uxtab	r3, lr, r3
  40d016:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  40d01a:	e79b      	b.n	40cf54 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  40d01c:	6802      	ldr	r2, [r0, #0]
  40d01e:	f3c2 228a 	ubfx	r2, r2, #10, #11
        return buf_u8[px];
  40d022:	fb07 6202 	mla	r2, r7, r2, r6
  40d026:	5c50      	ldrb	r0, [r2, r1]
  40d028:	e794      	b.n	40cf54 <lv_img_buf_get_px_alpha+0x28>
  40d02a:	bf00      	nop
  40d02c:	0041c8c0 	.word	0x0041c8c0

0040d030 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  40d030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d034:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  40d036:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  40d03a:	021b      	lsls	r3, r3, #8
  40d03c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  40d03e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  40d042:	021b      	lsls	r3, r3, #8
  40d044:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  40d046:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  40d04a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 40d144 <_lv_img_buf_transform_init+0x114>
  40d04e:	fb88 2300 	smull	r2, r3, r8, r0
  40d052:	17c5      	asrs	r5, r0, #31
  40d054:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
  40d058:	b22d      	sxth	r5, r5
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  40d05a:	f06f 0909 	mvn.w	r9, #9
  40d05e:	fb09 0905 	mla	r9, r9, r5, r0

    int32_t s1 = lv_trigo_sin(-angle_low);
  40d062:	b2ae      	uxth	r6, r5
  40d064:	4270      	negs	r0, r6
  40d066:	b200      	sxth	r0, r0
  40d068:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 40d148 <_lv_img_buf_transform_init+0x118>
  40d06c:	47d0      	blx	sl
  40d06e:	4607      	mov	r7, r0
    int32_t angle_high = angle_low + 1;
  40d070:	3501      	adds	r5, #1
    int32_t s2 = lv_trigo_sin(-angle_high);
  40d072:	b2ad      	uxth	r5, r5
  40d074:	4268      	negs	r0, r5
  40d076:	b200      	sxth	r0, r0
  40d078:	47d0      	blx	sl
  40d07a:	4683      	mov	fp, r0

    int32_t c1 = lv_trigo_sin(-angle_low + 90);
  40d07c:	f1c6 005a 	rsb	r0, r6, #90	; 0x5a
  40d080:	b200      	sxth	r0, r0
  40d082:	47d0      	blx	sl
  40d084:	4606      	mov	r6, r0
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
  40d086:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  40d08a:	b200      	sxth	r0, r0
  40d08c:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  40d08e:	f1c9 020a 	rsb	r2, r9, #10
  40d092:	fb09 f30b 	mul.w	r3, r9, fp
  40d096:	fb02 3307 	mla	r3, r2, r7, r3
  40d09a:	fb88 5103 	smull	r5, r1, r8, r3
  40d09e:	17db      	asrs	r3, r3, #31
  40d0a0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  40d0a4:	115b      	asrs	r3, r3, #5
  40d0a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  40d0a8:	fb09 f000 	mul.w	r0, r9, r0
  40d0ac:	fb02 0006 	mla	r0, r2, r6, r0
  40d0b0:	fb88 3800 	smull	r3, r8, r8, r0
  40d0b4:	17c0      	asrs	r0, r0, #31
  40d0b6:	ebc0 00a8 	rsb	r0, r0, r8, asr #2
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  40d0ba:	1140      	asrs	r0, r0, #5
  40d0bc:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  40d0be:	7ca0      	ldrb	r0, [r4, #18]
  40d0c0:	4b1e      	ldr	r3, [pc, #120]	; (40d13c <_lv_img_buf_transform_init+0x10c>)
  40d0c2:	4798      	blx	r3
  40d0c4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40d0c8:	f360 0300 	bfi	r3, r0, #0, #1
  40d0cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  40d0d0:	7ca0      	ldrb	r0, [r4, #18]
  40d0d2:	4b1b      	ldr	r3, [pc, #108]	; (40d140 <_lv_img_buf_transform_init+0x110>)
  40d0d4:	4798      	blx	r3
  40d0d6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40d0da:	f360 0341 	bfi	r3, r0, #1, #1
  40d0de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  40d0e2:	7ca2      	ldrb	r2, [r4, #18]
  40d0e4:	1f13      	subs	r3, r2, #4
  40d0e6:	b2db      	uxtb	r3, r3
  40d0e8:	2b02      	cmp	r3, #2
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
  40d0ea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40d0ee:	bf94      	ite	ls
  40d0f0:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
  40d0f4:	f36f 0382 	bfchi	r3, #2, #1
  40d0f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  40d0fc:	6823      	ldr	r3, [r4, #0]
  40d0fe:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  40d100:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  40d102:	f003 031f 	and.w	r3, r3, #31
  40d106:	f362 0304 	bfi	r3, r2, #0, #5
  40d10a:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  40d10c:	69a3      	ldr	r3, [r4, #24]
  40d10e:	88a2      	ldrh	r2, [r4, #4]
  40d110:	f362 2394 	bfi	r3, r2, #10, #11
  40d114:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  40d116:	0c1b      	lsrs	r3, r3, #16
  40d118:	88e2      	ldrh	r2, [r4, #6]
  40d11a:	f362 134f 	bfi	r3, r2, #5, #11
  40d11e:	8363      	strh	r3, [r4, #26]

    /*The inverse of the zoom will be sued during the transformation
     * + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  40d120:	89e2      	ldrh	r2, [r4, #14]
  40d122:	0853      	lsrs	r3, r2, #1
  40d124:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40d128:	fb93 f3f2 	sdiv	r3, r3, r2
  40d12c:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  40d12e:	23ff      	movs	r3, #255	; 0xff
  40d130:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  40d132:	8a23      	ldrh	r3, [r4, #16]
  40d134:	82a3      	strh	r3, [r4, #20]
  40d136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d13a:	bf00      	nop
  40d13c:	00407fc7 	.word	0x00407fc7
  40d140:	00407fdb 	.word	0x00407fdb
  40d144:	66666667 	.word	0x66666667
  40d148:	00410fa9 	.word	0x00410fa9

0040d14c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  40d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d150:	b083      	sub	sp, #12
  40d152:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40d156:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  40d158:	461f      	mov	r7, r3
  40d15a:	b95b      	cbnz	r3, 40d174 <_lv_img_buf_get_transformed_area+0x28>
  40d15c:	f5be 7f80 	cmp.w	lr, #256	; 0x100
  40d160:	d108      	bne.n	40d174 <_lv_img_buf_get_transformed_area+0x28>
        res->x1 = 0;
  40d162:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  40d164:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  40d166:	3901      	subs	r1, #1
  40d168:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  40d16a:	3a01      	subs	r2, #1
  40d16c:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  40d16e:	b003      	add	sp, #12
  40d170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
  40d174:	f9b5 6000 	ldrsh.w	r6, [r5]
  40d178:	4276      	negs	r6, r6
  40d17a:	fb0e f606 	mul.w	r6, lr, r6
  40d17e:	1236      	asrs	r6, r6, #8
  40d180:	3e01      	subs	r6, #1
  40d182:	b2b6      	uxth	r6, r6
  40d184:	8006      	strh	r6, [r0, #0]
    res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
  40d186:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40d18a:	4264      	negs	r4, r4
  40d18c:	fb0e f404 	mul.w	r4, lr, r4
  40d190:	1224      	asrs	r4, r4, #8
  40d192:	3c01      	subs	r4, #1
  40d194:	b2a4      	uxth	r4, r4
  40d196:	8044      	strh	r4, [r0, #2]
    res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
  40d198:	f9b5 3000 	ldrsh.w	r3, [r5]
  40d19c:	1ac9      	subs	r1, r1, r3
  40d19e:	fb0e f101 	mul.w	r1, lr, r1
  40d1a2:	1209      	asrs	r1, r1, #8
  40d1a4:	3102      	adds	r1, #2
  40d1a6:	b289      	uxth	r1, r1
  40d1a8:	8081      	strh	r1, [r0, #4]
    res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
  40d1aa:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  40d1ae:	1ad3      	subs	r3, r2, r3
  40d1b0:	fb0e f303 	mul.w	r3, lr, r3
  40d1b4:	121b      	asrs	r3, r3, #8
  40d1b6:	3302      	adds	r3, #2
  40d1b8:	b29b      	uxth	r3, r3
  40d1ba:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  40d1bc:	b967      	cbnz	r7, 40d1d8 <_lv_img_buf_get_transformed_area+0x8c>
        res->x1 += pivot->x;
  40d1be:	882a      	ldrh	r2, [r5, #0]
  40d1c0:	4416      	add	r6, r2
  40d1c2:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  40d1c4:	886a      	ldrh	r2, [r5, #2]
  40d1c6:	4414      	add	r4, r2
  40d1c8:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  40d1ca:	882a      	ldrh	r2, [r5, #0]
  40d1cc:	4411      	add	r1, r2
  40d1ce:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  40d1d0:	886a      	ldrh	r2, [r5, #2]
  40d1d2:	4413      	add	r3, r2
  40d1d4:	80c3      	strh	r3, [r0, #6]
        return;
  40d1d6:	e7ca      	b.n	40d16e <_lv_img_buf_get_transformed_area+0x22>
  40d1d8:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  40d1da:	f8df 8148 	ldr.w	r8, [pc, #328]	; 40d324 <_lv_img_buf_get_transformed_area+0x1d8>
  40d1de:	fb88 3007 	smull	r3, r0, r8, r7
  40d1e2:	17fe      	asrs	r6, r7, #31
  40d1e4:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  40d1e8:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  40d1ea:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  40d1ee:	f06f 0009 	mvn.w	r0, #9
  40d1f2:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = lv_trigo_sin(angle_low);
  40d1f6:	4630      	mov	r0, r6
  40d1f8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40d328 <_lv_img_buf_get_transformed_area+0x1dc>
  40d1fc:	47c8      	blx	r9
  40d1fe:	9001      	str	r0, [sp, #4]
    int32_t s2 = lv_trigo_sin(angle_high);
  40d200:	fa0f f08a 	sxth.w	r0, sl
  40d204:	47c8      	blx	r9
  40d206:	4683      	mov	fp, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
  40d208:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  40d20c:	b200      	sxth	r0, r0
  40d20e:	47c8      	blx	r9
  40d210:	4606      	mov	r6, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
  40d212:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  40d216:	b200      	sxth	r0, r0
  40d218:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  40d21a:	f1c7 020a 	rsb	r2, r7, #10
  40d21e:	fb07 fb0b 	mul.w	fp, r7, fp
  40d222:	9b01      	ldr	r3, [sp, #4]
  40d224:	fb02 bb03 	mla	fp, r2, r3, fp
  40d228:	fb88 310b 	smull	r3, r1, r8, fp
  40d22c:	ea4f 73eb 	mov.w	r3, fp, asr #31
  40d230:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  40d234:	fb07 f000 	mul.w	r0, r7, r0
  40d238:	fb02 0606 	mla	r6, r2, r6, r0
  40d23c:	fb88 2806 	smull	r2, r8, r8, r6
  40d240:	17f6      	asrs	r6, r6, #31
  40d242:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  40d246:	115b      	asrs	r3, r3, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  40d248:	ea4f 1868 	mov.w	r8, r8, asr #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  40d24c:	f9b4 1000 	ldrsh.w	r1, [r4]
  40d250:	fb01 fe08 	mul.w	lr, r1, r8
  40d254:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40d258:	fb00 fc03 	mul.w	ip, r0, r3
  40d25c:	882f      	ldrh	r7, [r5, #0]
  40d25e:	ebae 060c 	sub.w	r6, lr, ip
  40d262:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  40d266:	b236      	sxth	r6, r6
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  40d268:	fb01 f103 	mul.w	r1, r1, r3
  40d26c:	fb00 f008 	mul.w	r0, r0, r8
  40d270:	886d      	ldrh	r5, [r5, #2]
  40d272:	180a      	adds	r2, r1, r0
  40d274:	eb05 22a2 	add.w	r2, r5, r2, asr #10
  40d278:	b212      	sxth	r2, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  40d27a:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
  40d27e:	fb09 fb08 	mul.w	fp, r9, r8
  40d282:	ebab 0c0c 	sub.w	ip, fp, ip
  40d286:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  40d28a:	fa0f fc8c 	sxth.w	ip, ip
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  40d28e:	fb09 f903 	mul.w	r9, r9, r3
  40d292:	4448      	add	r0, r9
  40d294:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  40d298:	b200      	sxth	r0, r0
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  40d29a:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
  40d29e:	fb0a f303 	mul.w	r3, sl, r3
  40d2a2:	ebae 0e03 	sub.w	lr, lr, r3
  40d2a6:	eb07 2eae 	add.w	lr, r7, lr, asr #10
  40d2aa:	fa0f fe8e 	sxth.w	lr, lr
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  40d2ae:	fb0a f808 	mul.w	r8, sl, r8
  40d2b2:	4441      	add	r1, r8
  40d2b4:	eb05 21a1 	add.w	r1, r5, r1, asr #10
  40d2b8:	b209      	sxth	r1, r1
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  40d2ba:	ebab 0303 	sub.w	r3, fp, r3
  40d2be:	eb07 27a3 	add.w	r7, r7, r3, asr #10
  40d2c2:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  40d2c4:	44c8      	add	r8, r9
  40d2c6:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  40d2ca:	b22d      	sxth	r5, r5
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
  40d2cc:	4633      	mov	r3, r6
  40d2ce:	4566      	cmp	r6, ip
  40d2d0:	bfa8      	it	ge
  40d2d2:	4663      	movge	r3, ip
  40d2d4:	4573      	cmp	r3, lr
  40d2d6:	bfa8      	it	ge
  40d2d8:	4673      	movge	r3, lr
  40d2da:	42bb      	cmp	r3, r7
  40d2dc:	bfa8      	it	ge
  40d2de:	463b      	movge	r3, r7
  40d2e0:	8023      	strh	r3, [r4, #0]
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
  40d2e2:	4566      	cmp	r6, ip
  40d2e4:	bfb8      	it	lt
  40d2e6:	4666      	movlt	r6, ip
  40d2e8:	45b6      	cmp	lr, r6
  40d2ea:	bfb8      	it	lt
  40d2ec:	46b6      	movlt	lr, r6
  40d2ee:	4577      	cmp	r7, lr
  40d2f0:	bfb8      	it	lt
  40d2f2:	4677      	movlt	r7, lr
  40d2f4:	80a7      	strh	r7, [r4, #4]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
  40d2f6:	4613      	mov	r3, r2
  40d2f8:	4282      	cmp	r2, r0
  40d2fa:	bfa8      	it	ge
  40d2fc:	4603      	movge	r3, r0
  40d2fe:	428b      	cmp	r3, r1
  40d300:	bfa8      	it	ge
  40d302:	460b      	movge	r3, r1
  40d304:	42ab      	cmp	r3, r5
  40d306:	bfa8      	it	ge
  40d308:	462b      	movge	r3, r5
  40d30a:	8063      	strh	r3, [r4, #2]
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
  40d30c:	4282      	cmp	r2, r0
  40d30e:	bfb8      	it	lt
  40d310:	4602      	movlt	r2, r0
  40d312:	4291      	cmp	r1, r2
  40d314:	bfb8      	it	lt
  40d316:	4611      	movlt	r1, r2
  40d318:	428d      	cmp	r5, r1
  40d31a:	bfb8      	it	lt
  40d31c:	460d      	movlt	r5, r1
  40d31e:	80e5      	strh	r5, [r4, #6]
  40d320:	e725      	b.n	40d16e <_lv_img_buf_get_transformed_area+0x22>
  40d322:	bf00      	nop
  40d324:	66666667 	.word	0x66666667
  40d328:	00410fa9 	.word	0x00410fa9

0040d32c <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  40d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d330:	b087      	sub	sp, #28
  40d332:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  40d334:	6800      	ldr	r0, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  40d336:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
  40d33a:	b2eb      	uxtb	r3, r5
    int ys_fract = dsc->tmp.ys & 0xff;
  40d33c:	f9b4 603e 	ldrsh.w	r6, [r4, #62]	; 0x3e
  40d340:	b2f2      	uxtb	r2, r6
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  40d342:	2b6f      	cmp	r3, #111	; 0x6f
  40d344:	dc6b      	bgt.n	40d41e <_lv_img_buf_transform_anti_alias+0xf2>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  40d346:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
  40d34a:	425b      	negs	r3, r3
  40d34c:	17db      	asrs	r3, r3, #31
        xr = xs_fract + 0x80;
  40d34e:	3d80      	subs	r5, #128	; 0x80
  40d350:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  40d352:	2a6f      	cmp	r2, #111	; 0x6f
  40d354:	dc75      	bgt.n	40d442 <_lv_img_buf_transform_anti_alias+0x116>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  40d356:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  40d35a:	427f      	negs	r7, r7
  40d35c:	17ff      	asrs	r7, r7, #31

        yr = ys_fract + 0x80;
  40d35e:	3e80      	subs	r6, #128	; 0x80
  40d360:	b2f6      	uxtb	r6, r6
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  40d362:	f8b4 8014 	ldrh.w	r8, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  40d366:	f894 9016 	ldrb.w	r9, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  40d36a:	f894 e034 	ldrb.w	lr, [r4, #52]	; 0x34
  40d36e:	f01e 0f04 	tst.w	lr, #4
  40d372:	d078      	beq.n	40d466 <_lv_img_buf_transform_anti_alias+0x13a>
        lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  40d374:	6c62      	ldr	r2, [r4, #68]	; 0x44
  40d376:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
  40d37a:	fb01 2303 	mla	r3, r1, r3, r2
  40d37e:	eb00 0c03 	add.w	ip, r0, r3
  40d382:	f810 a003 	ldrb.w	sl, [r0, r3]
  40d386:	f88d a014 	strb.w	sl, [sp, #20]
  40d38a:	f89c c001 	ldrb.w	ip, [ip, #1]
  40d38e:	f88d c015 	strb.w	ip, [sp, #21]
        lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  40d392:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
  40d396:	fb01 fc0c 	mul.w	ip, r1, ip
  40d39a:	fb07 f70c 	mul.w	r7, r7, ip
  40d39e:	443a      	add	r2, r7
  40d3a0:	eb00 0c02 	add.w	ip, r0, r2
  40d3a4:	f810 a002 	ldrb.w	sl, [r0, r2]
  40d3a8:	f88d a010 	strb.w	sl, [sp, #16]
  40d3ac:	f89c c001 	ldrb.w	ip, [ip, #1]
  40d3b0:	f88d c011 	strb.w	ip, [sp, #17]
        lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  40d3b4:	441f      	add	r7, r3
  40d3b6:	eb00 0c07 	add.w	ip, r0, r7
  40d3ba:	f810 a007 	ldrb.w	sl, [r0, r7]
  40d3be:	f88d a00c 	strb.w	sl, [sp, #12]
  40d3c2:	f89c c001 	ldrb.w	ip, [ip, #1]
  40d3c6:	f88d c00d 	strb.w	ip, [sp, #13]
                        sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  40d3ca:	f01e 0f02 	tst.w	lr, #2
  40d3ce:	d07c      	beq.n	40d4ca <_lv_img_buf_transform_anti_alias+0x19e>
  40d3d0:	3901      	subs	r1, #1
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  40d3d2:	4403      	add	r3, r0
  40d3d4:	f813 b001 	ldrb.w	fp, [r3, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  40d3d8:	4402      	add	r2, r0
  40d3da:	f812 a001 	ldrb.w	sl, [r2, r1]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  40d3de:	4407      	add	r7, r0
  40d3e0:	5c78      	ldrb	r0, [r7, r1]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  40d3e2:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
  40d3e6:	fb03 f10b 	mul.w	r1, r3, fp
  40d3ea:	fb05 1109 	mla	r1, r5, r9, r1
  40d3ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  40d3f2:	fb03 f300 	mul.w	r3, r3, r0
  40d3f6:	fb05 330a 	mla	r3, r5, sl, r3
  40d3fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  40d3fe:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
  40d402:	fb06 f701 	mul.w	r7, r6, r1
  40d406:	fb02 7203 	mla	r2, r2, r3, r7
  40d40a:	1212      	asrs	r2, r2, #8
  40d40c:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  40d40e:	2902      	cmp	r1, #2
  40d410:	f200 80df 	bhi.w	40d5d2 <_lv_img_buf_transform_anti_alias+0x2a6>
  40d414:	2b02      	cmp	r3, #2
  40d416:	f200 80dc 	bhi.w	40d5d2 <_lv_img_buf_transform_anti_alias+0x2a6>
  40d41a:	2000      	movs	r0, #0
  40d41c:	e19b      	b.n	40d756 <_lv_img_buf_transform_anti_alias+0x42a>
    else if(xs_fract > 0x90) {
  40d41e:	2b90      	cmp	r3, #144	; 0x90
  40d420:	dd0c      	ble.n	40d43c <_lv_img_buf_transform_anti_alias+0x110>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  40d422:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
  40d426:	3301      	adds	r3, #1
  40d428:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
  40d42c:	428b      	cmp	r3, r1
  40d42e:	bfac      	ite	ge
  40d430:	2300      	movge	r3, #0
  40d432:	2301      	movlt	r3, #1
        xr = (0xFF - xs_fract) + 0x80;
  40d434:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  40d438:	b2ed      	uxtb	r5, r5
  40d43a:	e78a      	b.n	40d352 <_lv_img_buf_transform_anti_alias+0x26>
        xr = 0xFF;
  40d43c:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
  40d43e:	2300      	movs	r3, #0
  40d440:	e787      	b.n	40d352 <_lv_img_buf_transform_anti_alias+0x26>
    else if(ys_fract > 0x90) {
  40d442:	2a90      	cmp	r2, #144	; 0x90
  40d444:	dd0c      	ble.n	40d460 <_lv_img_buf_transform_anti_alias+0x134>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  40d446:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  40d44a:	3701      	adds	r7, #1
  40d44c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  40d450:	4297      	cmp	r7, r2
  40d452:	bfac      	ite	ge
  40d454:	2700      	movge	r7, #0
  40d456:	2701      	movlt	r7, #1
        yr = (0xFF - ys_fract) + 0x80;
  40d458:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  40d45c:	b2f6      	uxtb	r6, r6
  40d45e:	e780      	b.n	40d362 <_lv_img_buf_transform_anti_alias+0x36>
        yr = 0xFF;
  40d460:	26ff      	movs	r6, #255	; 0xff
        yn = 0;
  40d462:	2700      	movs	r7, #0
  40d464:	e77d      	b.n	40d362 <_lv_img_buf_transform_anti_alias+0x36>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  40d466:	f104 0218 	add.w	r2, r4, #24
  40d46a:	4610      	mov	r0, r2
  40d46c:	9201      	str	r2, [sp, #4]
  40d46e:	b29b      	uxth	r3, r3
  40d470:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  40d474:	9300      	str	r3, [sp, #0]
  40d476:	4419      	add	r1, r3
  40d478:	8a23      	ldrh	r3, [r4, #16]
  40d47a:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  40d47e:	b209      	sxth	r1, r1
  40d480:	4683      	mov	fp, r0
  40d482:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 40d77c <_lv_img_buf_transform_anti_alias+0x450>
  40d486:	47d0      	blx	sl
  40d488:	f8ad 0014 	strh.w	r0, [sp, #20]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  40d48c:	b2bf      	uxth	r7, r7
  40d48e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  40d492:	443a      	add	r2, r7
  40d494:	8a23      	ldrh	r3, [r4, #16]
  40d496:	b212      	sxth	r2, r2
  40d498:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  40d49c:	4658      	mov	r0, fp
  40d49e:	47d0      	blx	sl
  40d4a0:	f8ad 0010 	strh.w	r0, [sp, #16]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  40d4a4:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  40d4a8:	443a      	add	r2, r7
  40d4aa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  40d4ae:	9b00      	ldr	r3, [sp, #0]
  40d4b0:	4419      	add	r1, r3
  40d4b2:	8a23      	ldrh	r3, [r4, #16]
  40d4b4:	b212      	sxth	r2, r2
  40d4b6:	b209      	sxth	r1, r1
  40d4b8:	4658      	mov	r0, fp
  40d4ba:	47d0      	blx	sl
  40d4bc:	f8ad 000c 	strh.w	r0, [sp, #12]
        if(dsc->tmp.has_alpha) {
  40d4c0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40d4c4:	f013 0f02 	tst.w	r3, #2
  40d4c8:	d157      	bne.n	40d57a <_lv_img_buf_transform_anti_alias+0x24e>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  40d4ca:	23ff      	movs	r3, #255	; 0xff
  40d4cc:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  40d4ce:	4628      	mov	r0, r5
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  40d4d0:	2d00      	cmp	r5, #0
  40d4d2:	f040 809a 	bne.w	40d60a <_lv_img_buf_transform_anti_alias+0x2de>
  40d4d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  40d4da:	f003 0707 	and.w	r7, r3, #7
  40d4de:	08d9      	lsrs	r1, r3, #3
  40d4e0:	f89d 3015 	ldrb.w	r3, [sp, #21]
  40d4e4:	f003 051f 	and.w	r5, r3, #31
  40d4e8:	095b      	lsrs	r3, r3, #5
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  40d4ea:	2800      	cmp	r0, #0
  40d4ec:	f040 80d5 	bne.w	40d69a <_lv_img_buf_transform_anti_alias+0x36e>
  40d4f0:	f89d c00c 	ldrb.w	ip, [sp, #12]
  40d4f4:	f00c 0807 	and.w	r8, ip, #7
  40d4f8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  40d4fc:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40d500:	f002 001f 	and.w	r0, r2, #31
  40d504:	0952      	lsrs	r2, r2, #5
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  40d506:	2e00      	cmp	r6, #0
  40d508:	f000 8118 	beq.w	40d73c <_lv_img_buf_transform_anti_alias+0x410>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  40d50c:	2eff      	cmp	r6, #255	; 0xff
  40d50e:	f000 8125 	beq.w	40d75c <_lv_img_buf_transform_anti_alias+0x430>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40d512:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40d516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  40d51a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
  40d51e:	fb0e f202 	mul.w	r2, lr, r2
  40d522:	fb06 2203 	mla	r2, r6, r3, r2
  40d526:	3280      	adds	r2, #128	; 0x80
  40d528:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40d52c:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40d530:	0e93      	lsrs	r3, r2, #26
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  40d532:	7d27      	ldrb	r7, [r4, #20]
  40d534:	f363 0702 	bfi	r7, r3, #0, #3
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40d538:	fb0e f30c 	mul.w	r3, lr, ip
  40d53c:	fb06 3301 	mla	r3, r6, r1, r3
  40d540:	3380      	adds	r3, #128	; 0x80
  40d542:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40d546:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40d54a:	0ddb      	lsrs	r3, r3, #23
  40d54c:	4639      	mov	r1, r7
  40d54e:	f363 01c7 	bfi	r1, r3, #3, #5
  40d552:	7521      	strb	r1, [r4, #20]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40d554:	fb0e f000 	mul.w	r0, lr, r0
  40d558:	fb06 0605 	mla	r6, r6, r5, r0
  40d55c:	3680      	adds	r6, #128	; 0x80
  40d55e:	eb06 2306 	add.w	r3, r6, r6, lsl #8
  40d562:	eb06 16c3 	add.w	r6, r6, r3, lsl #7
  40d566:	0df6      	lsrs	r6, r6, #23
  40d568:	7d63      	ldrb	r3, [r4, #21]
  40d56a:	f366 0304 	bfi	r3, r6, #0, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40d56e:	0dd2      	lsrs	r2, r2, #23
  40d570:	f362 1347 	bfi	r3, r2, #5, #3
  40d574:	7563      	strb	r3, [r4, #21]

    return true;
  40d576:	2001      	movs	r0, #1
  40d578:	e0ed      	b.n	40d756 <_lv_img_buf_transform_anti_alias+0x42a>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  40d57a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  40d57e:	9b00      	ldr	r3, [sp, #0]
  40d580:	4419      	add	r1, r3
  40d582:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  40d586:	b209      	sxth	r1, r1
  40d588:	f8dd a004 	ldr.w	sl, [sp, #4]
  40d58c:	4650      	mov	r0, sl
  40d58e:	4b7a      	ldr	r3, [pc, #488]	; (40d778 <_lv_img_buf_transform_anti_alias+0x44c>)
  40d590:	4798      	blx	r3
  40d592:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  40d594:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  40d598:	443a      	add	r2, r7
  40d59a:	b212      	sxth	r2, r2
  40d59c:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  40d5a0:	f8cd a004 	str.w	sl, [sp, #4]
  40d5a4:	4650      	mov	r0, sl
  40d5a6:	4b74      	ldr	r3, [pc, #464]	; (40d778 <_lv_img_buf_transform_anti_alias+0x44c>)
  40d5a8:	4798      	blx	r3
  40d5aa:	4682      	mov	sl, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  40d5ac:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  40d5b0:	443a      	add	r2, r7
  40d5b2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  40d5b6:	9b00      	ldr	r3, [sp, #0]
  40d5b8:	4419      	add	r1, r3
  40d5ba:	b212      	sxth	r2, r2
  40d5bc:	b209      	sxth	r1, r1
  40d5be:	9801      	ldr	r0, [sp, #4]
  40d5c0:	4b6d      	ldr	r3, [pc, #436]	; (40d778 <_lv_img_buf_transform_anti_alias+0x44c>)
  40d5c2:	4798      	blx	r3
    if(dsc->tmp.has_alpha) {
  40d5c4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40d5c8:	f013 0f02 	tst.w	r3, #2
  40d5cc:	f47f af09 	bne.w	40d3e2 <_lv_img_buf_transform_anti_alias+0xb6>
  40d5d0:	e77b      	b.n	40d4ca <_lv_img_buf_transform_anti_alias+0x19e>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  40d5d2:	2902      	cmp	r1, #2
  40d5d4:	d914      	bls.n	40d600 <_lv_img_buf_transform_anti_alias+0x2d4>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  40d5d6:	2b02      	cmp	r3, #2
  40d5d8:	bf98      	it	ls
  40d5da:	26ff      	movls	r6, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  40d5dc:	f1b9 0f02 	cmp.w	r9, #2
  40d5e0:	bf8c      	ite	hi
  40d5e2:	462b      	movhi	r3, r5
  40d5e4:	2300      	movls	r3, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  40d5e6:	f1bb 0f02 	cmp.w	fp, #2
  40d5ea:	bf98      	it	ls
  40d5ec:	23ff      	movls	r3, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  40d5ee:	f1ba 0f02 	cmp.w	sl, #2
  40d5f2:	bf98      	it	ls
  40d5f4:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  40d5f6:	2802      	cmp	r0, #2
  40d5f8:	d804      	bhi.n	40d604 <_lv_img_buf_transform_anti_alias+0x2d8>
  40d5fa:	461d      	mov	r5, r3
  40d5fc:	20ff      	movs	r0, #255	; 0xff
  40d5fe:	e767      	b.n	40d4d0 <_lv_img_buf_transform_anti_alias+0x1a4>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  40d600:	2600      	movs	r6, #0
  40d602:	e7eb      	b.n	40d5dc <_lv_img_buf_transform_anti_alias+0x2b0>
  40d604:	4628      	mov	r0, r5
  40d606:	461d      	mov	r5, r3
  40d608:	e762      	b.n	40d4d0 <_lv_img_buf_transform_anti_alias+0x1a4>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  40d60a:	2dff      	cmp	r5, #255	; 0xff
  40d60c:	d03c      	beq.n	40d688 <_lv_img_buf_transform_anti_alias+0x35c>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40d60e:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  40d612:	f3c8 03c4 	ubfx	r3, r8, #3, #5
  40d616:	f89d 7014 	ldrb.w	r7, [sp, #20]
  40d61a:	08f9      	lsrs	r1, r7, #3
  40d61c:	fb02 f101 	mul.w	r1, r2, r1
  40d620:	fb05 1303 	mla	r3, r5, r3, r1
  40d624:	3380      	adds	r3, #128	; 0x80
  40d626:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40d62a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40d62e:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40d632:	f008 0e07 	and.w	lr, r8, #7
  40d636:	f3c8 3342 	ubfx	r3, r8, #13, #3
  40d63a:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
  40d63e:	f007 0c07 	and.w	ip, r7, #7
  40d642:	f89d e015 	ldrb.w	lr, [sp, #21]
  40d646:	ea4f 175e 	mov.w	r7, lr, lsr #5
  40d64a:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
  40d64e:	fb02 f707 	mul.w	r7, r2, r7
  40d652:	fb05 7303 	mla	r3, r5, r3, r7
  40d656:	3380      	adds	r3, #128	; 0x80
  40d658:	eb03 2703 	add.w	r7, r3, r3, lsl #8
  40d65c:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
  40d660:	f3c3 6782 	ubfx	r7, r3, #26, #3
  40d664:	f3c3 53c2 	ubfx	r3, r3, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40d668:	f3c8 2804 	ubfx	r8, r8, #8, #5
  40d66c:	f00e 0e1f 	and.w	lr, lr, #31
  40d670:	fb02 f20e 	mul.w	r2, r2, lr
  40d674:	fb05 2508 	mla	r5, r5, r8, r2
  40d678:	3580      	adds	r5, #128	; 0x80
  40d67a:	eb05 2205 	add.w	r2, r5, r5, lsl #8
  40d67e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  40d682:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  40d686:	e730      	b.n	40d4ea <_lv_img_buf_transform_anti_alias+0x1be>
  40d688:	f008 0707 	and.w	r7, r8, #7
  40d68c:	f3c8 01c4 	ubfx	r1, r8, #3, #5
  40d690:	f3c8 2504 	ubfx	r5, r8, #8, #5
  40d694:	f3c8 3342 	ubfx	r3, r8, #13, #3
  40d698:	e727      	b.n	40d4ea <_lv_img_buf_transform_anti_alias+0x1be>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  40d69a:	28ff      	cmp	r0, #255	; 0xff
  40d69c:	d042      	beq.n	40d724 <_lv_img_buf_transform_anti_alias+0x3f8>
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40d69e:	f1c0 09ff 	rsb	r9, r0, #255	; 0xff
  40d6a2:	f89d 2010 	ldrb.w	r2, [sp, #16]
  40d6a6:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
  40d6aa:	f89d 800c 	ldrb.w	r8, [sp, #12]
  40d6ae:	ea4f 0ed8 	mov.w	lr, r8, lsr #3
  40d6b2:	fb09 fe0e 	mul.w	lr, r9, lr
  40d6b6:	fb00 ec0c 	mla	ip, r0, ip, lr
  40d6ba:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
  40d6be:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
  40d6c2:	eb0c 1cce 	add.w	ip, ip, lr, lsl #7
  40d6c6:	f3cc 5cc4 	ubfx	ip, ip, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40d6ca:	f002 0207 	and.w	r2, r2, #7
  40d6ce:	f89d e011 	ldrb.w	lr, [sp, #17]
  40d6d2:	ea4f 1a5e 	mov.w	sl, lr, lsr #5
  40d6d6:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
  40d6da:	f008 0b07 	and.w	fp, r8, #7
  40d6de:	f89d a00d 	ldrb.w	sl, [sp, #13]
  40d6e2:	ea4f 185a 	mov.w	r8, sl, lsr #5
  40d6e6:	eb08 08cb 	add.w	r8, r8, fp, lsl #3
  40d6ea:	fb09 f808 	mul.w	r8, r9, r8
  40d6ee:	fb00 8202 	mla	r2, r0, r2, r8
  40d6f2:	3280      	adds	r2, #128	; 0x80
  40d6f4:	eb02 2802 	add.w	r8, r2, r2, lsl #8
  40d6f8:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
  40d6fc:	f3c2 6882 	ubfx	r8, r2, #26, #3
  40d700:	f3c2 52c2 	ubfx	r2, r2, #23, #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40d704:	f00e 0e1f 	and.w	lr, lr, #31
  40d708:	f00a 0a1f 	and.w	sl, sl, #31
  40d70c:	fb09 f90a 	mul.w	r9, r9, sl
  40d710:	fb00 900e 	mla	r0, r0, lr, r9
  40d714:	3080      	adds	r0, #128	; 0x80
  40d716:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
  40d71a:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
  40d71e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40d722:	e6f0      	b.n	40d506 <_lv_img_buf_transform_anti_alias+0x1da>
  40d724:	f89d c010 	ldrb.w	ip, [sp, #16]
  40d728:	f00c 0807 	and.w	r8, ip, #7
  40d72c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  40d730:	f89d 2011 	ldrb.w	r2, [sp, #17]
  40d734:	f002 001f 	and.w	r0, r2, #31
  40d738:	0952      	lsrs	r2, r2, #5
  40d73a:	e6e4      	b.n	40d506 <_lv_img_buf_transform_anti_alias+0x1da>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  40d73c:	7d23      	ldrb	r3, [r4, #20]
  40d73e:	f368 0302 	bfi	r3, r8, #0, #3
  40d742:	f36c 03c7 	bfi	r3, ip, #3, #5
  40d746:	7523      	strb	r3, [r4, #20]
  40d748:	7d63      	ldrb	r3, [r4, #21]
  40d74a:	f360 0304 	bfi	r3, r0, #0, #5
  40d74e:	f362 1347 	bfi	r3, r2, #5, #3
  40d752:	7563      	strb	r3, [r4, #21]
    return true;
  40d754:	2001      	movs	r0, #1
}
  40d756:	b007      	add	sp, #28
  40d758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  40d75c:	7d22      	ldrb	r2, [r4, #20]
  40d75e:	f367 0202 	bfi	r2, r7, #0, #3
  40d762:	f361 02c7 	bfi	r2, r1, #3, #5
  40d766:	7522      	strb	r2, [r4, #20]
  40d768:	7d62      	ldrb	r2, [r4, #21]
  40d76a:	f365 0204 	bfi	r2, r5, #0, #5
  40d76e:	f363 1247 	bfi	r2, r3, #5, #3
  40d772:	7562      	strb	r2, [r4, #21]
    return true;
  40d774:	2001      	movs	r0, #1
  40d776:	e7ee      	b.n	40d756 <_lv_img_buf_transform_anti_alias+0x42a>
  40d778:	0040cf2d 	.word	0x0040cf2d
  40d77c:	0040ce01 	.word	0x0040ce01

0040d780 <_lv_img_buf_transform>:
{
  40d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d784:	b083      	sub	sp, #12
  40d786:	4604      	mov	r4, r0
    int32_t xt = x - dsc->cfg.pivot_x;
  40d788:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
  40d78c:	1b89      	subs	r1, r1, r6
    int32_t yt = y - dsc->cfg.pivot_y;
  40d78e:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
  40d792:	1bd2      	subs	r2, r2, r7
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40d794:	89c3      	ldrh	r3, [r0, #14]
  40d796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40d79a:	d048      	beq.n	40d82e <_lv_img_buf_transform+0xae>
    else if(dsc->cfg.angle == 0) {
  40d79c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  40d7a0:	2b00      	cmp	r3, #0
  40d7a2:	d155      	bne.n	40d850 <_lv_img_buf_transform+0xd0>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d7a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d7a6:	fb03 f101 	mul.w	r1, r3, r1
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d7aa:	fb03 f202 	mul.w	r2, r3, r2
        xs = xt + dsc->tmp.pivot_x_256;
  40d7ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40d7b0:	eb06 1661 	add.w	r6, r6, r1, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40d7b4:	6a87      	ldr	r7, [r0, #40]	; 0x28
  40d7b6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    int32_t xs_int = xs >> 8;
  40d7ba:	1235      	asrs	r5, r6, #8
    if(xs_int >= dsc->cfg.src_w) return false;
  40d7bc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40d7c0:	429d      	cmp	r5, r3
  40d7c2:	bfb4      	ite	lt
  40d7c4:	2000      	movlt	r0, #0
  40d7c6:	2001      	movge	r0, #1
    else if(xs_int < 0) return false;
  40d7c8:	ea50 70d5 	orrs.w	r0, r0, r5, lsr #31
  40d7cc:	f040 8088 	bne.w	40d8e0 <_lv_img_buf_transform+0x160>
    int32_t ys_int = ys >> 8;
  40d7d0:	ea4f 2927 	mov.w	r9, r7, asr #8
    if(ys_int >= dsc->cfg.src_h) return false;
  40d7d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    else if(ys_int < 0) return false;
  40d7d8:	ea4f 78d9 	mov.w	r8, r9, lsr #31
  40d7dc:	4591      	cmp	r9, r2
  40d7de:	bfa8      	it	ge
  40d7e0:	f048 0801 	orrge.w	r8, r8, #1
  40d7e4:	f1b8 0f00 	cmp.w	r8, #0
  40d7e8:	d17b      	bne.n	40d8e2 <_lv_img_buf_transform+0x162>
    if(dsc->tmp.native_color) {
  40d7ea:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  40d7ee:	f012 0f04 	tst.w	r2, #4
  40d7f2:	d052      	beq.n	40d89a <_lv_img_buf_transform+0x11a>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40d7f4:	6821      	ldr	r1, [r4, #0]
        if(dsc->tmp.has_alpha == 0) {
  40d7f6:	f012 0f02 	tst.w	r2, #2
  40d7fa:	d141      	bne.n	40d880 <_lv_img_buf_transform+0x100>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40d7fc:	fb03 5209 	mla	r2, r3, r9, r5
  40d800:	0053      	lsls	r3, r2, #1
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40d802:	18c8      	adds	r0, r1, r3
  40d804:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
  40d808:	7522      	strb	r2, [r4, #20]
  40d80a:	7842      	ldrb	r2, [r0, #1]
  40d80c:	7562      	strb	r2, [r4, #21]
            px_size = LV_COLOR_SIZE >> 3;
  40d80e:	2102      	movs	r1, #2
    if(dsc->tmp.chroma_keyed) {
  40d810:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  40d814:	f012 0f01 	tst.w	r2, #1
  40d818:	d004      	beq.n	40d824 <_lv_img_buf_transform+0xa4>
        if(dsc->res.color.full == ct.full) return false;
  40d81a:	8aa2      	ldrh	r2, [r4, #20]
  40d81c:	f24e 0007 	movw	r0, #57351	; 0xe007
  40d820:	4290      	cmp	r0, r2
  40d822:	d061      	beq.n	40d8e8 <_lv_img_buf_transform+0x168>
    if(dsc->cfg.antialias == false) return true;
  40d824:	7ce2      	ldrb	r2, [r4, #19]
  40d826:	2a00      	cmp	r2, #0
  40d828:	d14d      	bne.n	40d8c6 <_lv_img_buf_transform+0x146>
  40d82a:	2001      	movs	r0, #1
  40d82c:	e059      	b.n	40d8e2 <_lv_img_buf_transform+0x162>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40d82e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40d830:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  40d832:	fb03 f601 	mul.w	r6, r3, r1
  40d836:	fb07 6012 	mls	r0, r7, r2, r6
  40d83a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40d83c:	eb06 06a0 	add.w	r6, r6, r0, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40d840:	fb03 f202 	mul.w	r2, r3, r2
  40d844:	fb07 2101 	mla	r1, r7, r1, r2
  40d848:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  40d84a:	eb07 07a1 	add.w	r7, r7, r1, asr #2
  40d84e:	e7b4      	b.n	40d7ba <_lv_img_buf_transform+0x3a>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d850:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40d852:	fb07 f101 	mul.w	r1, r7, r1
  40d856:	1149      	asrs	r1, r1, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d858:	fb07 f202 	mul.w	r2, r7, r2
  40d85c:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40d85e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40d860:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  40d862:	fb03 f601 	mul.w	r6, r3, r1
  40d866:	fb07 6012 	mls	r0, r7, r2, r6
  40d86a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40d86c:	eb06 26a0 	add.w	r6, r6, r0, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40d870:	fb03 f202 	mul.w	r2, r3, r2
  40d874:	fb07 2101 	mla	r1, r7, r1, r2
  40d878:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  40d87a:	eb07 27a1 	add.w	r7, r7, r1, asr #10
  40d87e:	e79c      	b.n	40d7ba <_lv_img_buf_transform+0x3a>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40d880:	fb03 5309 	mla	r3, r3, r9, r5
  40d884:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40d888:	18ca      	adds	r2, r1, r3
  40d88a:	5cc9      	ldrb	r1, [r1, r3]
  40d88c:	7521      	strb	r1, [r4, #20]
  40d88e:	7851      	ldrb	r1, [r2, #1]
  40d890:	7561      	strb	r1, [r4, #21]
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40d892:	7892      	ldrb	r2, [r2, #2]
  40d894:	75a2      	strb	r2, [r4, #22]
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40d896:	2103      	movs	r1, #3
  40d898:	e7ba      	b.n	40d810 <_lv_img_buf_transform+0x90>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40d89a:	f104 0018 	add.w	r0, r4, #24
  40d89e:	b229      	sxth	r1, r5
  40d8a0:	fa0f fa89 	sxth.w	sl, r9
  40d8a4:	8a23      	ldrh	r3, [r4, #16]
  40d8a6:	4652      	mov	r2, sl
  40d8a8:	9101      	str	r1, [sp, #4]
  40d8aa:	9000      	str	r0, [sp, #0]
  40d8ac:	f8df b044 	ldr.w	fp, [pc, #68]	; 40d8f4 <_lv_img_buf_transform+0x174>
  40d8b0:	47d8      	blx	fp
  40d8b2:	82a0      	strh	r0, [r4, #20]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40d8b4:	4652      	mov	r2, sl
  40d8b6:	9901      	ldr	r1, [sp, #4]
  40d8b8:	9800      	ldr	r0, [sp, #0]
  40d8ba:	4b0c      	ldr	r3, [pc, #48]	; (40d8ec <_lv_img_buf_transform+0x16c>)
  40d8bc:	4798      	blx	r3
  40d8be:	75a0      	strb	r0, [r4, #22]
        pxi = 0; /*unused*/
  40d8c0:	2300      	movs	r3, #0
        px_size = 0;    /*unused*/
  40d8c2:	4619      	mov	r1, r3
  40d8c4:	e7a4      	b.n	40d810 <_lv_img_buf_transform+0x90>
    dsc->tmp.xs = xs;
  40d8c6:	87a6      	strh	r6, [r4, #60]	; 0x3c
    dsc->tmp.ys = ys;
  40d8c8:	87e7      	strh	r7, [r4, #62]	; 0x3e
    dsc->tmp.xs_int = xs_int;
  40d8ca:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    dsc->tmp.ys_int = ys_int;
  40d8ce:	f8a4 9042 	strh.w	r9, [r4, #66]	; 0x42
    dsc->tmp.pxi = pxi;
  40d8d2:	6463      	str	r3, [r4, #68]	; 0x44
    dsc->tmp.px_size = px_size;
  40d8d4:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40d8d8:	4620      	mov	r0, r4
  40d8da:	4b05      	ldr	r3, [pc, #20]	; (40d8f0 <_lv_img_buf_transform+0x170>)
  40d8dc:	4798      	blx	r3
    return ret;
  40d8de:	e000      	b.n	40d8e2 <_lv_img_buf_transform+0x162>
    else if(xs_int < 0) return false;
  40d8e0:	2000      	movs	r0, #0
}
  40d8e2:	b003      	add	sp, #12
  40d8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(dsc->res.color.full == ct.full) return false;
  40d8e8:	4640      	mov	r0, r8
  40d8ea:	e7fa      	b.n	40d8e2 <_lv_img_buf_transform+0x162>
  40d8ec:	0040cf2d 	.word	0x0040cf2d
  40d8f0:	0040d32d 	.word	0x0040d32d
  40d8f4:	0040ce01 	.word	0x0040ce01

0040d8f8 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
  40d8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d8fa:	b083      	sub	sp, #12
  40d8fc:	4604      	mov	r4, r0
  40d8fe:	460d      	mov	r5, r1
  40d900:	4616      	mov	r6, r2
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
  40d902:	4b18      	ldr	r3, [pc, #96]	; (40d964 <_lv_img_cache_open+0x6c>)
  40d904:	4798      	blx	r3
  40d906:	4607      	mov	r7, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
  40d908:	4633      	mov	r3, r6
  40d90a:	462a      	mov	r2, r5
  40d90c:	4621      	mov	r1, r4
  40d90e:	4816      	ldr	r0, [pc, #88]	; (40d968 <_lv_img_cache_open+0x70>)
  40d910:	4c16      	ldr	r4, [pc, #88]	; (40d96c <_lv_img_cache_open+0x74>)
  40d912:	47a0      	blx	r4
    if(open_res == LV_RES_INV) {
  40d914:	b138      	cbz	r0, 40d926 <_lv_img_cache_open+0x2e>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
        return NULL;
    }

    cached_src->life = 0;
  40d916:	4b14      	ldr	r3, [pc, #80]	; (40d968 <_lv_img_cache_open+0x70>)
  40d918:	2200      	movs	r2, #0
  40d91a:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
  40d91c:	69db      	ldr	r3, [r3, #28]
  40d91e:	b1a3      	cbz	r3, 40d94a <_lv_img_cache_open+0x52>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
  40d920:	4811      	ldr	r0, [pc, #68]	; (40d968 <_lv_img_cache_open+0x70>)
}
  40d922:	b003      	add	sp, #12
  40d924:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_LOG_WARN("Image draw cannot open the image resource");
  40d926:	4b12      	ldr	r3, [pc, #72]	; (40d970 <_lv_img_cache_open+0x78>)
  40d928:	9300      	str	r3, [sp, #0]
  40d92a:	4b12      	ldr	r3, [pc, #72]	; (40d974 <_lv_img_cache_open+0x7c>)
  40d92c:	227d      	movs	r2, #125	; 0x7d
  40d92e:	4912      	ldr	r1, [pc, #72]	; (40d978 <_lv_img_cache_open+0x80>)
  40d930:	2002      	movs	r0, #2
  40d932:	4c12      	ldr	r4, [pc, #72]	; (40d97c <_lv_img_cache_open+0x84>)
  40d934:	47a0      	blx	r4
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
  40d936:	4c0c      	ldr	r4, [pc, #48]	; (40d968 <_lv_img_cache_open+0x70>)
  40d938:	212c      	movs	r1, #44	; 0x2c
  40d93a:	4620      	mov	r0, r4
  40d93c:	4b10      	ldr	r3, [pc, #64]	; (40d980 <_lv_img_cache_open+0x88>)
  40d93e:	4798      	blx	r3
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
  40d940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40d944:	62a3      	str	r3, [r4, #40]	; 0x28
        return NULL;
  40d946:	2000      	movs	r0, #0
  40d948:	e7eb      	b.n	40d922 <_lv_img_cache_open+0x2a>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  40d94a:	4638      	mov	r0, r7
  40d94c:	4b0d      	ldr	r3, [pc, #52]	; (40d984 <_lv_img_cache_open+0x8c>)
  40d94e:	4798      	blx	r3
  40d950:	4b05      	ldr	r3, [pc, #20]	; (40d968 <_lv_img_cache_open+0x70>)
  40d952:	61d8      	str	r0, [r3, #28]
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  40d954:	b918      	cbnz	r0, 40d95e <_lv_img_cache_open+0x66>
  40d956:	4618      	mov	r0, r3
  40d958:	2301      	movs	r3, #1
  40d95a:	61c3      	str	r3, [r0, #28]
  40d95c:	e7e1      	b.n	40d922 <_lv_img_cache_open+0x2a>
    return cached_src;
  40d95e:	4802      	ldr	r0, [pc, #8]	; (40d968 <_lv_img_cache_open+0x70>)
  40d960:	e7df      	b.n	40d922 <_lv_img_cache_open+0x2a>
  40d962:	bf00      	nop
  40d964:	00410239 	.word	0x00410239
  40d968:	20439ea0 	.word	0x20439ea0
  40d96c:	0040e229 	.word	0x0040e229
  40d970:	0041c918 	.word	0x0041c918
  40d974:	0041c8d0 	.word	0x0041c8d0
  40d978:	0041c8e4 	.word	0x0041c8e4
  40d97c:	00410edd 	.word	0x00410edd
  40d980:	004116ed 	.word	0x004116ed
  40d984:	00410255 	.word	0x00410255

0040d988 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  40d988:	b530      	push	{r4, r5, lr}
  40d98a:	b087      	sub	sp, #28
  40d98c:	460c      	mov	r4, r1
  40d98e:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  40d990:	4608      	mov	r0, r1
  40d992:	4b37      	ldr	r3, [pc, #220]	; (40da70 <lv_img_decoder_built_in_info+0xe8>)
  40d994:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  40d996:	b9d8      	cbnz	r0, 40d9d0 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  40d998:	7823      	ldrb	r3, [r4, #0]
  40d99a:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  40d99e:	3b04      	subs	r3, #4
  40d9a0:	b2db      	uxtb	r3, r3
  40d9a2:	2b0a      	cmp	r3, #10
  40d9a4:	d861      	bhi.n	40da6a <lv_img_decoder_built_in_info+0xe2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  40d9a6:	6823      	ldr	r3, [r4, #0]
  40d9a8:	f3c3 238a 	ubfx	r3, r3, #10, #11
  40d9ac:	682a      	ldr	r2, [r5, #0]
  40d9ae:	f363 2294 	bfi	r2, r3, #10, #11
  40d9b2:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  40d9b4:	8863      	ldrh	r3, [r4, #2]
  40d9b6:	f3c3 134a 	ubfx	r3, r3, #5, #11
  40d9ba:	886a      	ldrh	r2, [r5, #2]
  40d9bc:	f363 124f 	bfi	r2, r3, #5, #11
  40d9c0:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  40d9c2:	7822      	ldrb	r2, [r4, #0]
  40d9c4:	782b      	ldrb	r3, [r5, #0]
  40d9c6:	f362 0304 	bfi	r3, r2, #0, #5
  40d9ca:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  40d9cc:	2001      	movs	r0, #1
  40d9ce:	e00d      	b.n	40d9ec <lv_img_decoder_built_in_info+0x64>
    else if(src_type == LV_IMG_SRC_FILE) {
  40d9d0:	2801      	cmp	r0, #1
  40d9d2:	d00d      	beq.n	40d9f0 <lv_img_decoder_built_in_info+0x68>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  40d9d4:	2802      	cmp	r0, #2
  40d9d6:	d03a      	beq.n	40da4e <lv_img_decoder_built_in_info+0xc6>
        LV_LOG_WARN("Image get info found unknown src type");
  40d9d8:	4b26      	ldr	r3, [pc, #152]	; (40da74 <lv_img_decoder_built_in_info+0xec>)
  40d9da:	9300      	str	r3, [sp, #0]
  40d9dc:	4b26      	ldr	r3, [pc, #152]	; (40da78 <lv_img_decoder_built_in_info+0xf0>)
  40d9de:	f44f 729d 	mov.w	r2, #314	; 0x13a
  40d9e2:	4926      	ldr	r1, [pc, #152]	; (40da7c <lv_img_decoder_built_in_info+0xf4>)
  40d9e4:	2002      	movs	r0, #2
  40d9e6:	4c26      	ldr	r4, [pc, #152]	; (40da80 <lv_img_decoder_built_in_info+0xf8>)
  40d9e8:	47a0      	blx	r4
        return LV_RES_INV;
  40d9ea:	2000      	movs	r0, #0
}
  40d9ec:	b007      	add	sp, #28
  40d9ee:	bd30      	pop	{r4, r5, pc}
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
  40d9f0:	4620      	mov	r0, r4
  40d9f2:	4b24      	ldr	r3, [pc, #144]	; (40da84 <lv_img_decoder_built_in_info+0xfc>)
  40d9f4:	4798      	blx	r3
  40d9f6:	4924      	ldr	r1, [pc, #144]	; (40da88 <lv_img_decoder_built_in_info+0x100>)
  40d9f8:	4b24      	ldr	r3, [pc, #144]	; (40da8c <lv_img_decoder_built_in_info+0x104>)
  40d9fa:	4798      	blx	r3
  40d9fc:	b108      	cbz	r0, 40da02 <lv_img_decoder_built_in_info+0x7a>
  40d9fe:	2000      	movs	r0, #0
  40da00:	e7f4      	b.n	40d9ec <lv_img_decoder_built_in_info+0x64>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
  40da02:	2202      	movs	r2, #2
  40da04:	4621      	mov	r1, r4
  40da06:	a804      	add	r0, sp, #16
  40da08:	4b21      	ldr	r3, [pc, #132]	; (40da90 <lv_img_decoder_built_in_info+0x108>)
  40da0a:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  40da0c:	b138      	cbz	r0, 40da1e <lv_img_decoder_built_in_info+0x96>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  40da0e:	782b      	ldrb	r3, [r5, #0]
  40da10:	331c      	adds	r3, #28
  40da12:	f003 031f 	and.w	r3, r3, #31
  40da16:	2b0a      	cmp	r3, #10
  40da18:	d8f1      	bhi.n	40d9fe <lv_img_decoder_built_in_info+0x76>
    return LV_RES_OK;
  40da1a:	2001      	movs	r0, #1
  40da1c:	e7e6      	b.n	40d9ec <lv_img_decoder_built_in_info+0x64>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
  40da1e:	ab03      	add	r3, sp, #12
  40da20:	2204      	movs	r2, #4
  40da22:	4629      	mov	r1, r5
  40da24:	a804      	add	r0, sp, #16
  40da26:	4c1b      	ldr	r4, [pc, #108]	; (40da94 <lv_img_decoder_built_in_info+0x10c>)
  40da28:	47a0      	blx	r4
  40da2a:	4604      	mov	r4, r0
            lv_fs_close(&f);
  40da2c:	a804      	add	r0, sp, #16
  40da2e:	4b1a      	ldr	r3, [pc, #104]	; (40da98 <lv_img_decoder_built_in_info+0x110>)
  40da30:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  40da32:	b914      	cbnz	r4, 40da3a <lv_img_decoder_built_in_info+0xb2>
  40da34:	9b03      	ldr	r3, [sp, #12]
  40da36:	2b04      	cmp	r3, #4
  40da38:	d0e9      	beq.n	40da0e <lv_img_decoder_built_in_info+0x86>
                LV_LOG_WARN("Image get info get read file header");
  40da3a:	4b18      	ldr	r3, [pc, #96]	; (40da9c <lv_img_decoder_built_in_info+0x114>)
  40da3c:	9300      	str	r3, [sp, #0]
  40da3e:	4b0e      	ldr	r3, [pc, #56]	; (40da78 <lv_img_decoder_built_in_info+0xf0>)
  40da40:	f240 1229 	movw	r2, #297	; 0x129
  40da44:	490d      	ldr	r1, [pc, #52]	; (40da7c <lv_img_decoder_built_in_info+0xf4>)
  40da46:	2002      	movs	r0, #2
  40da48:	4c0d      	ldr	r4, [pc, #52]	; (40da80 <lv_img_decoder_built_in_info+0xf8>)
  40da4a:	47a0      	blx	r4
  40da4c:	e7d7      	b.n	40d9fe <lv_img_decoder_built_in_info+0x76>
        header->w = 1;
  40da4e:	682b      	ldr	r3, [r5, #0]
  40da50:	2001      	movs	r0, #1
  40da52:	f360 2394 	bfi	r3, r0, #10, #11
  40da56:	602b      	str	r3, [r5, #0]
        header->h = 1;
  40da58:	0c1a      	lsrs	r2, r3, #16
  40da5a:	f360 124f 	bfi	r2, r0, #5, #11
  40da5e:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  40da60:	220b      	movs	r2, #11
  40da62:	f362 0304 	bfi	r3, r2, #0, #5
  40da66:	702b      	strb	r3, [r5, #0]
  40da68:	e7c0      	b.n	40d9ec <lv_img_decoder_built_in_info+0x64>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  40da6a:	2000      	movs	r0, #0
  40da6c:	e7be      	b.n	40d9ec <lv_img_decoder_built_in_info+0x64>
  40da6e:	bf00      	nop
  40da70:	004082ad 	.word	0x004082ad
  40da74:	0041ca84 	.word	0x0041ca84
  40da78:	0041c998 	.word	0x0041c998
  40da7c:	0041ca28 	.word	0x0041ca28
  40da80:	00410edd 	.word	0x00410edd
  40da84:	00410d25 	.word	0x00410d25
  40da88:	0041ca24 	.word	0x0041ca24
  40da8c:	00419749 	.word	0x00419749
  40da90:	00410c65 	.word	0x00410c65
  40da94:	00410bcb 	.word	0x00410bcb
  40da98:	00410ba9 	.word	0x00410ba9
  40da9c:	0041ca60 	.word	0x0041ca60

0040daa0 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  40daa0:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  40daa2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    if(user_data) {
  40daa4:	b184      	cbz	r4, 40dac8 <lv_img_decoder_built_in_close+0x28>
  40daa6:	460d      	mov	r5, r1
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  40daa8:	7c0b      	ldrb	r3, [r1, #16]
  40daaa:	2b01      	cmp	r3, #1
  40daac:	d00d      	beq.n	40daca <lv_img_decoder_built_in_close+0x2a>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
  40daae:	68a0      	ldr	r0, [r4, #8]
  40dab0:	b108      	cbz	r0, 40dab6 <lv_img_decoder_built_in_close+0x16>
  40dab2:	4b08      	ldr	r3, [pc, #32]	; (40dad4 <lv_img_decoder_built_in_close+0x34>)
  40dab4:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  40dab6:	68e0      	ldr	r0, [r4, #12]
  40dab8:	b108      	cbz	r0, 40dabe <lv_img_decoder_built_in_close+0x1e>
  40daba:	4b06      	ldr	r3, [pc, #24]	; (40dad4 <lv_img_decoder_built_in_close+0x34>)
  40dabc:	4798      	blx	r3

        lv_mem_free(user_data);
  40dabe:	4620      	mov	r0, r4
  40dac0:	4b04      	ldr	r3, [pc, #16]	; (40dad4 <lv_img_decoder_built_in_close+0x34>)
  40dac2:	4798      	blx	r3
        dsc->user_data = NULL;
  40dac4:	2300      	movs	r3, #0
  40dac6:	626b      	str	r3, [r5, #36]	; 0x24
  40dac8:	bd38      	pop	{r3, r4, r5, pc}
            lv_fs_close(&user_data->f);
  40daca:	4620      	mov	r0, r4
  40dacc:	4b02      	ldr	r3, [pc, #8]	; (40dad8 <lv_img_decoder_built_in_close+0x38>)
  40dace:	4798      	blx	r3
  40dad0:	e7ed      	b.n	40daae <lv_img_decoder_built_in_close+0xe>
  40dad2:	bf00      	nop
  40dad4:	004110e1 	.word	0x004110e1
  40dad8:	00410ba9 	.word	0x00410ba9

0040dadc <lv_img_decoder_built_in_open>:
{
  40dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40dae0:	b086      	sub	sp, #24
  40dae2:	4605      	mov	r5, r0
  40dae4:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  40dae6:	7c0b      	ldrb	r3, [r1, #16]
  40dae8:	2b01      	cmp	r3, #1
  40daea:	d016      	beq.n	40db1a <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  40daec:	2b00      	cmp	r3, #0
  40daee:	f040 8134 	bne.w	40dd5a <lv_img_decoder_built_in_open+0x27e>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  40daf2:	684b      	ldr	r3, [r1, #4]
  40daf4:	689b      	ldr	r3, [r3, #8]
  40daf6:	2b00      	cmp	r3, #0
  40daf8:	f000 8129 	beq.w	40dd4e <lv_img_decoder_built_in_open+0x272>
    lv_img_cf_t cf = dsc->header.cf;
  40dafc:	7d08      	ldrb	r0, [r1, #20]
  40dafe:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  40db02:	1f03      	subs	r3, r0, #4
  40db04:	b2db      	uxtb	r3, r3
  40db06:	2b02      	cmp	r3, #2
  40db08:	f200 812e 	bhi.w	40dd68 <lv_img_decoder_built_in_open+0x28c>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  40db0c:	6863      	ldr	r3, [r4, #4]
  40db0e:	689b      	ldr	r3, [r3, #8]
  40db10:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
  40db12:	2001      	movs	r0, #1
}
  40db14:	b006      	add	sp, #24
  40db16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  40db1a:	6848      	ldr	r0, [r1, #4]
  40db1c:	4b98      	ldr	r3, [pc, #608]	; (40dd80 <lv_img_decoder_built_in_open+0x2a4>)
  40db1e:	4798      	blx	r3
  40db20:	4998      	ldr	r1, [pc, #608]	; (40dd84 <lv_img_decoder_built_in_open+0x2a8>)
  40db22:	4b99      	ldr	r3, [pc, #612]	; (40dd88 <lv_img_decoder_built_in_open+0x2ac>)
  40db24:	4798      	blx	r3
  40db26:	b108      	cbz	r0, 40db2c <lv_img_decoder_built_in_open+0x50>
  40db28:	2000      	movs	r0, #0
  40db2a:	e7f3      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  40db2c:	2202      	movs	r2, #2
  40db2e:	6861      	ldr	r1, [r4, #4]
  40db30:	a804      	add	r0, sp, #16
  40db32:	4b96      	ldr	r3, [pc, #600]	; (40dd8c <lv_img_decoder_built_in_open+0x2b0>)
  40db34:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  40db36:	b9c8      	cbnz	r0, 40db6c <lv_img_decoder_built_in_open+0x90>
        if(dsc->user_data == NULL) {
  40db38:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40db3a:	b30b      	cbz	r3, 40db80 <lv_img_decoder_built_in_open+0xa4>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  40db3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40db3e:	f10d 020f 	add.w	r2, sp, #15
  40db42:	f103 0108 	add.w	r1, r3, #8
  40db46:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40db4a:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
  40db4e:	428b      	cmp	r3, r1
  40db50:	d1f9      	bne.n	40db46 <lv_img_decoder_built_in_open+0x6a>
    lv_img_cf_t cf = dsc->header.cf;
  40db52:	7d20      	ldrb	r0, [r4, #20]
  40db54:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  40db58:	1f03      	subs	r3, r0, #4
  40db5a:	b2db      	uxtb	r3, r3
  40db5c:	2b02      	cmp	r3, #2
  40db5e:	f200 8103 	bhi.w	40dd68 <lv_img_decoder_built_in_open+0x28c>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  40db62:	7c23      	ldrb	r3, [r4, #16]
  40db64:	2b00      	cmp	r3, #0
  40db66:	d0d1      	beq.n	40db0c <lv_img_decoder_built_in_open+0x30>
            return LV_RES_OK;
  40db68:	2001      	movs	r0, #1
  40db6a:	e7d3      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
            LV_LOG_WARN("Built-in image decoder can't open the file");
  40db6c:	4b88      	ldr	r3, [pc, #544]	; (40dd90 <lv_img_decoder_built_in_open+0x2b4>)
  40db6e:	9300      	str	r3, [sp, #0]
  40db70:	4b88      	ldr	r3, [pc, #544]	; (40dd94 <lv_img_decoder_built_in_open+0x2b8>)
  40db72:	f44f 72a8 	mov.w	r2, #336	; 0x150
  40db76:	4988      	ldr	r1, [pc, #544]	; (40dd98 <lv_img_decoder_built_in_open+0x2bc>)
  40db78:	2002      	movs	r0, #2
  40db7a:	4c88      	ldr	r4, [pc, #544]	; (40dd9c <lv_img_decoder_built_in_open+0x2c0>)
  40db7c:	47a0      	blx	r4
            return LV_RES_INV;
  40db7e:	e7d3      	b.n	40db28 <lv_img_decoder_built_in_open+0x4c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  40db80:	2010      	movs	r0, #16
  40db82:	4b87      	ldr	r3, [pc, #540]	; (40dda0 <lv_img_decoder_built_in_open+0x2c4>)
  40db84:	4798      	blx	r3
  40db86:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
  40db88:	b968      	cbnz	r0, 40dba6 <lv_img_decoder_built_in_open+0xca>
  40db8a:	4b86      	ldr	r3, [pc, #536]	; (40dda4 <lv_img_decoder_built_in_open+0x2c8>)
  40db8c:	9302      	str	r3, [sp, #8]
  40db8e:	4b86      	ldr	r3, [pc, #536]	; (40dda8 <lv_img_decoder_built_in_open+0x2cc>)
  40db90:	9301      	str	r3, [sp, #4]
  40db92:	4b86      	ldr	r3, [pc, #536]	; (40ddac <lv_img_decoder_built_in_open+0x2d0>)
  40db94:	9300      	str	r3, [sp, #0]
  40db96:	4b7f      	ldr	r3, [pc, #508]	; (40dd94 <lv_img_decoder_built_in_open+0x2b8>)
  40db98:	f240 1257 	movw	r2, #343	; 0x157
  40db9c:	497e      	ldr	r1, [pc, #504]	; (40dd98 <lv_img_decoder_built_in_open+0x2bc>)
  40db9e:	2003      	movs	r0, #3
  40dba0:	4c7e      	ldr	r4, [pc, #504]	; (40dd9c <lv_img_decoder_built_in_open+0x2c0>)
  40dba2:	47a0      	blx	r4
  40dba4:	e7fe      	b.n	40dba4 <lv_img_decoder_built_in_open+0xc8>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  40dba6:	2110      	movs	r1, #16
  40dba8:	4b81      	ldr	r3, [pc, #516]	; (40ddb0 <lv_img_decoder_built_in_open+0x2d4>)
  40dbaa:	4798      	blx	r3
  40dbac:	e7c6      	b.n	40db3c <lv_img_decoder_built_in_open+0x60>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  40dbae:	4b81      	ldr	r3, [pc, #516]	; (40ddb4 <lv_img_decoder_built_in_open+0x2d8>)
  40dbb0:	4798      	blx	r3
  40dbb2:	4680      	mov	r8, r0
        uint32_t palette_size = 1 << px_size;
  40dbb4:	2701      	movs	r7, #1
  40dbb6:	4087      	lsls	r7, r0
        if(dsc->user_data == NULL) {
  40dbb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40dbba:	2b00      	cmp	r3, #0
  40dbbc:	d040      	beq.n	40dc40 <lv_img_decoder_built_in_open+0x164>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  40dbbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  40dbc0:	2002      	movs	r0, #2
  40dbc2:	fa00 f008 	lsl.w	r0, r0, r8
  40dbc6:	4b76      	ldr	r3, [pc, #472]	; (40dda0 <lv_img_decoder_built_in_open+0x2c4>)
  40dbc8:	4798      	blx	r3
  40dbca:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(user_data->palette);
  40dbcc:	2800      	cmp	r0, #0
  40dbce:	d04e      	beq.n	40dc6e <lv_img_decoder_built_in_open+0x192>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  40dbd0:	4638      	mov	r0, r7
  40dbd2:	4b73      	ldr	r3, [pc, #460]	; (40dda0 <lv_img_decoder_built_in_open+0x2c4>)
  40dbd4:	4798      	blx	r3
  40dbd6:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->opa);
  40dbd8:	2800      	cmp	r0, #0
  40dbda:	d056      	beq.n	40dc8a <lv_img_decoder_built_in_open+0x1ae>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  40dbdc:	68b3      	ldr	r3, [r6, #8]
  40dbde:	2b00      	cmp	r3, #0
  40dbe0:	d061      	beq.n	40dca6 <lv_img_decoder_built_in_open+0x1ca>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  40dbe2:	7c23      	ldrb	r3, [r4, #16]
  40dbe4:	2b01      	cmp	r3, #1
  40dbe6:	d06d      	beq.n	40dcc4 <lv_img_decoder_built_in_open+0x1e8>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  40dbe8:	6863      	ldr	r3, [r4, #4]
  40dbea:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  40dbec:	2f00      	cmp	r7, #0
  40dbee:	f000 80b0 	beq.w	40dd52 <lv_img_decoder_built_in_open+0x276>
  40dbf2:	2300      	movs	r3, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  40dbf4:	68b5      	ldr	r5, [r6, #8]
  40dbf6:	eb05 0e43 	add.w	lr, r5, r3, lsl #1
  40dbfa:	7850      	ldrb	r0, [r2, #1]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
  40dbfc:	f892 c002 	ldrb.w	ip, [r2, #2]
  40dc00:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  40dc04:	7814      	ldrb	r4, [r2, #0]
  40dc06:	08e4      	lsrs	r4, r4, #3
  40dc08:	ea4f 1850 	mov.w	r8, r0, lsr #5
  40dc0c:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
  40dc10:	f368 0102 	bfi	r1, r8, #0, #3
  40dc14:	f36c 01c7 	bfi	r1, ip, #3, #5
  40dc18:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
  40dc1c:	f89e 1001 	ldrb.w	r1, [lr, #1]
  40dc20:	f364 0104 	bfi	r1, r4, #0, #5
  40dc24:	0880      	lsrs	r0, r0, #2
  40dc26:	f360 1147 	bfi	r1, r0, #5, #3
  40dc2a:	f88e 1001 	strb.w	r1, [lr, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  40dc2e:	78d0      	ldrb	r0, [r2, #3]
  40dc30:	68f1      	ldr	r1, [r6, #12]
  40dc32:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
  40dc34:	3301      	adds	r3, #1
  40dc36:	3204      	adds	r2, #4
  40dc38:	429f      	cmp	r7, r3
  40dc3a:	d1db      	bne.n	40dbf4 <lv_img_decoder_built_in_open+0x118>
        return LV_RES_OK;
  40dc3c:	2001      	movs	r0, #1
  40dc3e:	e769      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  40dc40:	2010      	movs	r0, #16
  40dc42:	4b57      	ldr	r3, [pc, #348]	; (40dda0 <lv_img_decoder_built_in_open+0x2c4>)
  40dc44:	4798      	blx	r3
  40dc46:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
  40dc48:	b118      	cbz	r0, 40dc52 <lv_img_decoder_built_in_open+0x176>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  40dc4a:	2110      	movs	r1, #16
  40dc4c:	4b58      	ldr	r3, [pc, #352]	; (40ddb0 <lv_img_decoder_built_in_open+0x2d4>)
  40dc4e:	4798      	blx	r3
  40dc50:	e7b5      	b.n	40dbbe <lv_img_decoder_built_in_open+0xe2>
            LV_ASSERT_MALLOC(dsc->user_data);
  40dc52:	4b54      	ldr	r3, [pc, #336]	; (40dda4 <lv_img_decoder_built_in_open+0x2c8>)
  40dc54:	9302      	str	r3, [sp, #8]
  40dc56:	4b54      	ldr	r3, [pc, #336]	; (40dda8 <lv_img_decoder_built_in_open+0x2cc>)
  40dc58:	9301      	str	r3, [sp, #4]
  40dc5a:	4b54      	ldr	r3, [pc, #336]	; (40ddac <lv_img_decoder_built_in_open+0x2d0>)
  40dc5c:	9300      	str	r3, [sp, #0]
  40dc5e:	4b4d      	ldr	r3, [pc, #308]	; (40dd94 <lv_img_decoder_built_in_open+0x2b8>)
  40dc60:	f240 1281 	movw	r2, #385	; 0x181
  40dc64:	494c      	ldr	r1, [pc, #304]	; (40dd98 <lv_img_decoder_built_in_open+0x2bc>)
  40dc66:	2003      	movs	r0, #3
  40dc68:	4c4c      	ldr	r4, [pc, #304]	; (40dd9c <lv_img_decoder_built_in_open+0x2c0>)
  40dc6a:	47a0      	blx	r4
  40dc6c:	e7fe      	b.n	40dc6c <lv_img_decoder_built_in_open+0x190>
        LV_ASSERT_MALLOC(user_data->palette);
  40dc6e:	4b4d      	ldr	r3, [pc, #308]	; (40dda4 <lv_img_decoder_built_in_open+0x2c8>)
  40dc70:	9302      	str	r3, [sp, #8]
  40dc72:	4b51      	ldr	r3, [pc, #324]	; (40ddb8 <lv_img_decoder_built_in_open+0x2dc>)
  40dc74:	9301      	str	r3, [sp, #4]
  40dc76:	4b4d      	ldr	r3, [pc, #308]	; (40ddac <lv_img_decoder_built_in_open+0x2d0>)
  40dc78:	9300      	str	r3, [sp, #0]
  40dc7a:	4b46      	ldr	r3, [pc, #280]	; (40dd94 <lv_img_decoder_built_in_open+0x2b8>)
  40dc7c:	f240 128b 	movw	r2, #395	; 0x18b
  40dc80:	4945      	ldr	r1, [pc, #276]	; (40dd98 <lv_img_decoder_built_in_open+0x2bc>)
  40dc82:	2003      	movs	r0, #3
  40dc84:	4c45      	ldr	r4, [pc, #276]	; (40dd9c <lv_img_decoder_built_in_open+0x2c0>)
  40dc86:	47a0      	blx	r4
  40dc88:	e7fe      	b.n	40dc88 <lv_img_decoder_built_in_open+0x1ac>
        LV_ASSERT_MALLOC(user_data->opa);
  40dc8a:	4b46      	ldr	r3, [pc, #280]	; (40dda4 <lv_img_decoder_built_in_open+0x2c8>)
  40dc8c:	9302      	str	r3, [sp, #8]
  40dc8e:	4b4b      	ldr	r3, [pc, #300]	; (40ddbc <lv_img_decoder_built_in_open+0x2e0>)
  40dc90:	9301      	str	r3, [sp, #4]
  40dc92:	4b46      	ldr	r3, [pc, #280]	; (40ddac <lv_img_decoder_built_in_open+0x2d0>)
  40dc94:	9300      	str	r3, [sp, #0]
  40dc96:	4b3f      	ldr	r3, [pc, #252]	; (40dd94 <lv_img_decoder_built_in_open+0x2b8>)
  40dc98:	f240 128d 	movw	r2, #397	; 0x18d
  40dc9c:	493e      	ldr	r1, [pc, #248]	; (40dd98 <lv_img_decoder_built_in_open+0x2bc>)
  40dc9e:	2003      	movs	r0, #3
  40dca0:	4c3e      	ldr	r4, [pc, #248]	; (40dd9c <lv_img_decoder_built_in_open+0x2c0>)
  40dca2:	47a0      	blx	r4
  40dca4:	e7fe      	b.n	40dca4 <lv_img_decoder_built_in_open+0x1c8>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
  40dca6:	4b46      	ldr	r3, [pc, #280]	; (40ddc0 <lv_img_decoder_built_in_open+0x2e4>)
  40dca8:	9300      	str	r3, [sp, #0]
  40dcaa:	4b3a      	ldr	r3, [pc, #232]	; (40dd94 <lv_img_decoder_built_in_open+0x2b8>)
  40dcac:	f240 128f 	movw	r2, #399	; 0x18f
  40dcb0:	4939      	ldr	r1, [pc, #228]	; (40dd98 <lv_img_decoder_built_in_open+0x2bc>)
  40dcb2:	2003      	movs	r0, #3
  40dcb4:	4e39      	ldr	r6, [pc, #228]	; (40dd9c <lv_img_decoder_built_in_open+0x2c0>)
  40dcb6:	47b0      	blx	r6
            lv_img_decoder_built_in_close(decoder, dsc);
  40dcb8:	4621      	mov	r1, r4
  40dcba:	4628      	mov	r0, r5
  40dcbc:	4b41      	ldr	r3, [pc, #260]	; (40ddc4 <lv_img_decoder_built_in_open+0x2e8>)
  40dcbe:	4798      	blx	r3
            return LV_RES_INV;
  40dcc0:	2000      	movs	r0, #0
  40dcc2:	e727      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
  40dcc4:	46b1      	mov	r9, r6
  40dcc6:	2200      	movs	r2, #0
  40dcc8:	2104      	movs	r1, #4
  40dcca:	4630      	mov	r0, r6
  40dccc:	4b3e      	ldr	r3, [pc, #248]	; (40ddc8 <lv_img_decoder_built_in_open+0x2ec>)
  40dcce:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  40dcd0:	b367      	cbz	r7, 40dd2c <lv_img_decoder_built_in_open+0x250>
  40dcd2:	2400      	movs	r4, #0
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  40dcd4:	46a0      	mov	r8, r4
  40dcd6:	4d3d      	ldr	r5, [pc, #244]	; (40ddcc <lv_img_decoder_built_in_open+0x2f0>)
  40dcd8:	4643      	mov	r3, r8
  40dcda:	2204      	movs	r2, #4
  40dcdc:	a904      	add	r1, sp, #16
  40dcde:	4648      	mov	r0, r9
  40dce0:	47a8      	blx	r5
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  40dce2:	f8d6 e008 	ldr.w	lr, [r6, #8]
  40dce6:	eb0e 0044 	add.w	r0, lr, r4, lsl #1
  40dcea:	f89d 2011 	ldrb.w	r2, [sp, #17]
  40dcee:	f89d c012 	ldrb.w	ip, [sp, #18]
  40dcf2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  40dcf6:	f89d 1010 	ldrb.w	r1, [sp, #16]
  40dcfa:	08c9      	lsrs	r1, r1, #3
  40dcfc:	ea4f 1a52 	mov.w	sl, r2, lsr #5
  40dd00:	f81e 3014 	ldrb.w	r3, [lr, r4, lsl #1]
  40dd04:	f36a 0302 	bfi	r3, sl, #0, #3
  40dd08:	f36c 03c7 	bfi	r3, ip, #3, #5
  40dd0c:	f80e 3014 	strb.w	r3, [lr, r4, lsl #1]
  40dd10:	7843      	ldrb	r3, [r0, #1]
  40dd12:	f361 0304 	bfi	r3, r1, #0, #5
  40dd16:	0892      	lsrs	r2, r2, #2
  40dd18:	f362 1347 	bfi	r3, r2, #5, #3
  40dd1c:	7043      	strb	r3, [r0, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  40dd1e:	f89d 2013 	ldrb.w	r2, [sp, #19]
  40dd22:	68f3      	ldr	r3, [r6, #12]
  40dd24:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
  40dd26:	3401      	adds	r4, #1
  40dd28:	42a7      	cmp	r7, r4
  40dd2a:	d1d5      	bne.n	40dcd8 <lv_img_decoder_built_in_open+0x1fc>
        return LV_RES_OK;
  40dd2c:	2001      	movs	r0, #1
  40dd2e:	e6f1      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  40dd30:	4621      	mov	r1, r4
  40dd32:	4628      	mov	r0, r5
  40dd34:	4b23      	ldr	r3, [pc, #140]	; (40ddc4 <lv_img_decoder_built_in_open+0x2e8>)
  40dd36:	4798      	blx	r3
        LV_LOG_WARN("Image decoder open: unknown color format");
  40dd38:	4b25      	ldr	r3, [pc, #148]	; (40ddd0 <lv_img_decoder_built_in_open+0x2f4>)
  40dd3a:	9300      	str	r3, [sp, #0]
  40dd3c:	4b15      	ldr	r3, [pc, #84]	; (40dd94 <lv_img_decoder_built_in_open+0x2b8>)
  40dd3e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
  40dd42:	4915      	ldr	r1, [pc, #84]	; (40dd98 <lv_img_decoder_built_in_open+0x2bc>)
  40dd44:	2002      	movs	r0, #2
  40dd46:	4c15      	ldr	r4, [pc, #84]	; (40dd9c <lv_img_decoder_built_in_open+0x2c0>)
  40dd48:	47a0      	blx	r4
        return LV_RES_INV;
  40dd4a:	2000      	movs	r0, #0
  40dd4c:	e6e2      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  40dd4e:	2000      	movs	r0, #0
  40dd50:	e6e0      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
        return LV_RES_OK;
  40dd52:	2001      	movs	r0, #1
  40dd54:	e6de      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_OK;
  40dd56:	2001      	movs	r0, #1
  40dd58:	e6dc      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
    lv_img_cf_t cf = dsc->header.cf;
  40dd5a:	7d08      	ldrb	r0, [r1, #20]
  40dd5c:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  40dd60:	1f03      	subs	r3, r0, #4
  40dd62:	b2db      	uxtb	r3, r3
  40dd64:	2b02      	cmp	r3, #2
  40dd66:	d9f6      	bls.n	40dd56 <lv_img_decoder_built_in_open+0x27a>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  40dd68:	1fc3      	subs	r3, r0, #7
  40dd6a:	b2db      	uxtb	r3, r3
  40dd6c:	2b03      	cmp	r3, #3
  40dd6e:	f67f af1e 	bls.w	40dbae <lv_img_decoder_built_in_open+0xd2>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  40dd72:	f1a0 030b 	sub.w	r3, r0, #11
  40dd76:	b2db      	uxtb	r3, r3
  40dd78:	2b03      	cmp	r3, #3
  40dd7a:	d8d9      	bhi.n	40dd30 <lv_img_decoder_built_in_open+0x254>
        return LV_RES_OK; /*Nothing to process*/
  40dd7c:	2001      	movs	r0, #1
  40dd7e:	e6c9      	b.n	40db14 <lv_img_decoder_built_in_open+0x38>
  40dd80:	00410d25 	.word	0x00410d25
  40dd84:	0041ca24 	.word	0x0041ca24
  40dd88:	00419749 	.word	0x00419749
  40dd8c:	00410c65 	.word	0x00410c65
  40dd90:	0041caac 	.word	0x0041caac
  40dd94:	0041c9b8 	.word	0x0041c9b8
  40dd98:	0041ca28 	.word	0x0041ca28
  40dd9c:	00410edd 	.word	0x00410edd
  40dda0:	004114b5 	.word	0x004114b5
  40dda4:	0041c064 	.word	0x0041c064
  40dda8:	0041cad8 	.word	0x0041cad8
  40ddac:	0041c098 	.word	0x0041c098
  40ddb0:	004116ed 	.word	0x004116ed
  40ddb4:	00407f95 	.word	0x00407f95
  40ddb8:	0041caf0 	.word	0x0041caf0
  40ddbc:	0041cb0c 	.word	0x0041cb0c
  40ddc0:	0041cb24 	.word	0x0041cb24
  40ddc4:	0040daa1 	.word	0x0040daa1
  40ddc8:	00410c07 	.word	0x00410c07
  40ddcc:	00410bcb 	.word	0x00410bcb
  40ddd0:	0041cb50 	.word	0x0041cb50

0040ddd4 <lv_img_decoder_built_in_read_line>:
{
  40ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ddd8:	b08b      	sub	sp, #44	; 0x2c
  40ddda:	460d      	mov	r5, r1
  40dddc:	4614      	mov	r4, r2
  40ddde:	4698      	mov	r8, r3
  40dde0:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  40dde4:	7d0b      	ldrb	r3, [r1, #20]
  40dde6:	f003 031f 	and.w	r3, r3, #31
  40ddea:	1f1a      	subs	r2, r3, #4
  40ddec:	b2d2      	uxtb	r2, r2
  40ddee:	2a02      	cmp	r2, #2
  40ddf0:	d845      	bhi.n	40de7e <lv_img_decoder_built_in_read_line+0xaa>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  40ddf2:	7c0b      	ldrb	r3, [r1, #16]
  40ddf4:	2b01      	cmp	r3, #1
  40ddf6:	d003      	beq.n	40de00 <lv_img_decoder_built_in_read_line+0x2c>
    lv_res_t res = LV_RES_INV;
  40ddf8:	2000      	movs	r0, #0
}
  40ddfa:	b00b      	add	sp, #44	; 0x2c
  40ddfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  40de00:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  40de04:	7d08      	ldrb	r0, [r1, #20]
  40de06:	f000 001f 	and.w	r0, r0, #31
  40de0a:	4bb0      	ldr	r3, [pc, #704]	; (40e0cc <lv_img_decoder_built_in_read_line+0x2f8>)
  40de0c:	4798      	blx	r3
  40de0e:	4607      	mov	r7, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  40de10:	6969      	ldr	r1, [r5, #20]
  40de12:	f3c1 218a 	ubfx	r1, r1, #10, #11
  40de16:	fb08 4801 	mla	r8, r8, r1, r4
  40de1a:	fb00 f108 	mul.w	r1, r0, r8
  40de1e:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
  40de20:	2200      	movs	r2, #0
  40de22:	3104      	adds	r1, #4
  40de24:	4648      	mov	r0, r9
  40de26:	4baa      	ldr	r3, [pc, #680]	; (40e0d0 <lv_img_decoder_built_in_read_line+0x2fc>)
  40de28:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  40de2a:	b9d8      	cbnz	r0, 40de64 <lv_img_decoder_built_in_read_line+0x90>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
  40de2c:	f3c7 07c7 	ubfx	r7, r7, #3, #8
  40de30:	fb06 f607 	mul.w	r6, r6, r7
    uint32_t br  = 0;
  40de34:	ab0a      	add	r3, sp, #40	; 0x28
  40de36:	2200      	movs	r2, #0
  40de38:	f843 2d10 	str.w	r2, [r3, #-16]!
    res = lv_fs_read(&user_data->f, buf, btr, &br);
  40de3c:	4632      	mov	r2, r6
  40de3e:	9915      	ldr	r1, [sp, #84]	; 0x54
  40de40:	4648      	mov	r0, r9
  40de42:	4ca4      	ldr	r4, [pc, #656]	; (40e0d4 <lv_img_decoder_built_in_read_line+0x300>)
  40de44:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  40de46:	b910      	cbnz	r0, 40de4e <lv_img_decoder_built_in_read_line+0x7a>
  40de48:	9b06      	ldr	r3, [sp, #24]
  40de4a:	429e      	cmp	r6, r3
  40de4c:	d015      	beq.n	40de7a <lv_img_decoder_built_in_read_line+0xa6>
        LV_LOG_WARN("Built-in image decoder read failed");
  40de4e:	4ba2      	ldr	r3, [pc, #648]	; (40e0d8 <lv_img_decoder_built_in_read_line+0x304>)
  40de50:	9300      	str	r3, [sp, #0]
  40de52:	4ba2      	ldr	r3, [pc, #648]	; (40e0dc <lv_img_decoder_built_in_read_line+0x308>)
  40de54:	f240 2211 	movw	r2, #529	; 0x211
  40de58:	49a1      	ldr	r1, [pc, #644]	; (40e0e0 <lv_img_decoder_built_in_read_line+0x30c>)
  40de5a:	2002      	movs	r0, #2
  40de5c:	4ca1      	ldr	r4, [pc, #644]	; (40e0e4 <lv_img_decoder_built_in_read_line+0x310>)
  40de5e:	47a0      	blx	r4
        return LV_RES_INV;
  40de60:	2000      	movs	r0, #0
  40de62:	e7ca      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
        LV_LOG_WARN("Built-in image decoder seek failed");
  40de64:	4ba0      	ldr	r3, [pc, #640]	; (40e0e8 <lv_img_decoder_built_in_read_line+0x314>)
  40de66:	9300      	str	r3, [sp, #0]
  40de68:	4b9c      	ldr	r3, [pc, #624]	; (40e0dc <lv_img_decoder_built_in_read_line+0x308>)
  40de6a:	f240 220a 	movw	r2, #522	; 0x20a
  40de6e:	499c      	ldr	r1, [pc, #624]	; (40e0e0 <lv_img_decoder_built_in_read_line+0x30c>)
  40de70:	2002      	movs	r0, #2
  40de72:	4c9c      	ldr	r4, [pc, #624]	; (40e0e4 <lv_img_decoder_built_in_read_line+0x310>)
  40de74:	47a0      	blx	r4
        return LV_RES_INV;
  40de76:	2000      	movs	r0, #0
  40de78:	e7bf      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
    }

    return LV_RES_OK;
  40de7a:	2001      	movs	r0, #1
  40de7c:	e7bd      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  40de7e:	f1a3 020b 	sub.w	r2, r3, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  40de82:	b2d2      	uxtb	r2, r2
  40de84:	2a03      	cmp	r2, #3
  40de86:	d90f      	bls.n	40dea8 <lv_img_decoder_built_in_read_line+0xd4>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  40de88:	3b07      	subs	r3, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  40de8a:	b2db      	uxtb	r3, r3
  40de8c:	2b03      	cmp	r3, #3
  40de8e:	f240 80cd 	bls.w	40e02c <lv_img_decoder_built_in_read_line+0x258>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
  40de92:	4b96      	ldr	r3, [pc, #600]	; (40e0ec <lv_img_decoder_built_in_read_line+0x318>)
  40de94:	9300      	str	r3, [sp, #0]
  40de96:	4b96      	ldr	r3, [pc, #600]	; (40e0f0 <lv_img_decoder_built_in_read_line+0x31c>)
  40de98:	f44f 72ef 	mov.w	r2, #478	; 0x1de
  40de9c:	4990      	ldr	r1, [pc, #576]	; (40e0e0 <lv_img_decoder_built_in_read_line+0x30c>)
  40de9e:	2002      	movs	r0, #2
  40dea0:	4c90      	ldr	r4, [pc, #576]	; (40e0e4 <lv_img_decoder_built_in_read_line+0x310>)
  40dea2:	47a0      	blx	r4
        return LV_RES_INV;
  40dea4:	2000      	movs	r0, #0
  40dea6:	e7a8      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  40dea8:	2200      	movs	r2, #0
  40deaa:	f88d 2010 	strb.w	r2, [sp, #16]
  40deae:	23ff      	movs	r3, #255	; 0xff
  40deb0:	f88d 3011 	strb.w	r3, [sp, #17]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  40deb4:	f88d 2014 	strb.w	r2, [sp, #20]
  40deb8:	2255      	movs	r2, #85	; 0x55
  40deba:	f88d 2015 	strb.w	r2, [sp, #21]
  40debe:	22aa      	movs	r2, #170	; 0xaa
  40dec0:	f88d 2016 	strb.w	r2, [sp, #22]
  40dec4:	f88d 3017 	strb.w	r3, [sp, #23]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  40dec8:	4b8a      	ldr	r3, [pc, #552]	; (40e0f4 <lv_img_decoder_built_in_read_line+0x320>)
  40deca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40decc:	af0a      	add	r7, sp, #40	; 0x28
  40dece:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  40ded2:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  40ded4:	2e00      	cmp	r6, #0
  40ded6:	dd0c      	ble.n	40def2 <lv_img_decoder_built_in_read_line+0x11e>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  40ded8:	0a08      	lsrs	r0, r1, #8
  40deda:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40dedc:	1e72      	subs	r2, r6, #1
  40dede:	b292      	uxth	r2, r2
  40dee0:	3201      	adds	r2, #1
  40dee2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40dee6:	441a      	add	r2, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  40dee8:	7019      	strb	r1, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  40deea:	7058      	strb	r0, [r3, #1]
  40deec:	3303      	adds	r3, #3
    for(i = 0; i < len; i++) {
  40deee:	429a      	cmp	r2, r3
  40def0:	d1fa      	bne.n	40dee8 <lv_img_decoder_built_in_read_line+0x114>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  40def2:	7d28      	ldrb	r0, [r5, #20]
  40def4:	f000 001f 	and.w	r0, r0, #31
  40def8:	4b74      	ldr	r3, [pc, #464]	; (40e0cc <lv_img_decoder_built_in_read_line+0x2f8>)
  40defa:	4798      	blx	r3
  40defc:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  40defe:	2701      	movs	r7, #1
  40df00:	4087      	lsls	r7, r0
  40df02:	3f01      	subs	r7, #1
  40df04:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  40df06:	7d2b      	ldrb	r3, [r5, #20]
  40df08:	f003 031f 	and.w	r3, r3, #31
  40df0c:	3b0b      	subs	r3, #11
  40df0e:	2b03      	cmp	r3, #3
  40df10:	d853      	bhi.n	40dfba <lv_img_decoder_built_in_read_line+0x1e6>
  40df12:	e8df f003 	tbb	[pc, r3]
  40df16:	2a02      	.short	0x2a02
  40df18:	4839      	.short	0x4839
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
  40df1a:	696b      	ldr	r3, [r5, #20]
  40df1c:	f3c3 208a 	ubfx	r0, r3, #10, #11
  40df20:	3007      	adds	r0, #7
  40df22:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
  40df24:	10e3      	asrs	r3, r4, #3
  40df26:	fb08 3800 	mla	r8, r8, r0, r3
            pos = 7 - (x & 0x7);
  40df2a:	43e4      	mvns	r4, r4
  40df2c:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  40df30:	f10d 0a10 	add.w	sl, sp, #16
            ofs += w * y + x;  /*First pixel*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  40df34:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    uint8_t * fs_buf = lv_mem_buf_get(w);
  40df38:	9003      	str	r0, [sp, #12]
  40df3a:	4b6f      	ldr	r3, [pc, #444]	; (40e0f8 <lv_img_decoder_built_in_read_line+0x324>)
  40df3c:	4798      	blx	r3
    if(fs_buf == NULL) return LV_RES_INV;
  40df3e:	9002      	str	r0, [sp, #8]
  40df40:	2800      	cmp	r0, #0
  40df42:	d071      	beq.n	40e028 <lv_img_decoder_built_in_read_line+0x254>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  40df44:	7c2b      	ldrb	r3, [r5, #16]
  40df46:	2b00      	cmp	r3, #0
  40df48:	d140      	bne.n	40dfcc <lv_img_decoder_built_in_read_line+0x1f8>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
  40df4a:	686b      	ldr	r3, [r5, #4]
  40df4c:	689b      	ldr	r3, [r3, #8]
  40df4e:	4498      	add	r8, r3
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    for(i = 0; i < len; i++) {
  40df50:	2e00      	cmp	r6, #0
  40df52:	dd64      	ble.n	40e01e <lv_img_decoder_built_in_read_line+0x24a>
  40df54:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40df56:	1e71      	subs	r1, r6, #1
  40df58:	b289      	uxth	r1, r1
  40df5a:	3101      	adds	r1, #1
  40df5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40df60:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
  40df62:	f1c9 0008 	rsb	r0, r9, #8
  40df66:	b240      	sxtb	r0, r0
  40df68:	e043      	b.n	40dff2 <lv_img_decoder_built_in_read_line+0x21e>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  40df6a:	696b      	ldr	r3, [r5, #20]
  40df6c:	f3c3 208a 	ubfx	r0, r3, #10, #11
  40df70:	3003      	adds	r0, #3
  40df72:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
  40df74:	10a3      	asrs	r3, r4, #2
  40df76:	fb08 3800 	mla	r8, r8, r0, r3
            pos = 6 - (x & 0x3) * 2;
  40df7a:	43e4      	mvns	r4, r4
  40df7c:	f004 0403 	and.w	r4, r4, #3
  40df80:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  40df82:	f10d 0a14 	add.w	sl, sp, #20
  40df86:	e7d5      	b.n	40df34 <lv_img_decoder_built_in_read_line+0x160>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  40df88:	696b      	ldr	r3, [r5, #20]
  40df8a:	f3c3 208a 	ubfx	r0, r3, #10, #11
  40df8e:	3001      	adds	r0, #1
  40df90:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  40df92:	1063      	asrs	r3, r4, #1
  40df94:	fb08 3800 	mla	r8, r8, r0, r3
            pos = 4 - (x & 0x1) * 4;
  40df98:	f014 0f01 	tst.w	r4, #1
  40df9c:	d012      	beq.n	40dfc4 <lv_img_decoder_built_in_read_line+0x1f0>
  40df9e:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  40dfa0:	f10d 0a18 	add.w	sl, sp, #24
  40dfa4:	e7c6      	b.n	40df34 <lv_img_decoder_built_in_read_line+0x160>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  40dfa6:	6968      	ldr	r0, [r5, #20]
  40dfa8:	f3c0 208a 	ubfx	r0, r0, #10, #11
  40dfac:	b283      	uxth	r3, r0
  40dfae:	b200      	sxth	r0, r0
            ofs += w * y + x;  /*First pixel*/
  40dfb0:	fb08 4803 	mla	r8, r8, r3, r4
            pos = 0;
  40dfb4:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  40dfb6:	46a2      	mov	sl, r4
  40dfb8:	e7bc      	b.n	40df34 <lv_img_decoder_built_in_read_line+0x160>
    int8_t pos   = 0;
  40dfba:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  40dfbc:	46a0      	mov	r8, r4
    lv_coord_t w = 0;
  40dfbe:	4620      	mov	r0, r4
    const lv_opa_t * opa_table = NULL;
  40dfc0:	46a2      	mov	sl, r4
  40dfc2:	e7b7      	b.n	40df34 <lv_img_decoder_built_in_read_line+0x160>
            pos = 4 - (x & 0x1) * 4;
  40dfc4:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  40dfc6:	f10d 0a18 	add.w	sl, sp, #24
  40dfca:	e7b3      	b.n	40df34 <lv_img_decoder_built_in_read_line+0x160>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
  40dfcc:	2200      	movs	r2, #0
  40dfce:	f108 0104 	add.w	r1, r8, #4
  40dfd2:	4658      	mov	r0, fp
  40dfd4:	4b3e      	ldr	r3, [pc, #248]	; (40e0d0 <lv_img_decoder_built_in_read_line+0x2fc>)
  40dfd6:	4798      	blx	r3
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
  40dfd8:	2300      	movs	r3, #0
  40dfda:	9a03      	ldr	r2, [sp, #12]
  40dfdc:	9902      	ldr	r1, [sp, #8]
  40dfde:	4658      	mov	r0, fp
  40dfe0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 40e0d4 <lv_img_decoder_built_in_read_line+0x300>
  40dfe4:	47c0      	blx	r8
        data_tmp = fs_buf;
  40dfe6:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40dfea:	e7b1      	b.n	40df50 <lv_img_decoder_built_in_read_line+0x17c>
  40dfec:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
  40dfee:	4291      	cmp	r1, r2
  40dff0:	d015      	beq.n	40e01e <lv_img_decoder_built_in_read_line+0x24a>
        uint8_t val_act = (*data_tmp >> pos) & mask;
  40dff2:	f898 3000 	ldrb.w	r3, [r8]
  40dff6:	4123      	asrs	r3, r4
  40dff8:	403b      	ands	r3, r7
  40dffa:	b2db      	uxtb	r3, r3
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  40dffc:	7d2e      	ldrb	r6, [r5, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  40dffe:	f006 061f 	and.w	r6, r6, #31
  40e002:	2e0e      	cmp	r6, #14
  40e004:	bf18      	it	ne
  40e006:	f81a 3003 	ldrbne.w	r3, [sl, r3]
  40e00a:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
  40e00c:	eba4 0409 	sub.w	r4, r4, r9
  40e010:	b264      	sxtb	r4, r4
        if(pos < 0) {
  40e012:	2c00      	cmp	r4, #0
  40e014:	daea      	bge.n	40dfec <lv_img_decoder_built_in_read_line+0x218>
            pos = 8 - px_size;
  40e016:	4604      	mov	r4, r0
            data_tmp++;
  40e018:	f108 0801 	add.w	r8, r8, #1
  40e01c:	e7e6      	b.n	40dfec <lv_img_decoder_built_in_read_line+0x218>
        }
    }
    lv_mem_buf_release(fs_buf);
  40e01e:	9802      	ldr	r0, [sp, #8]
  40e020:	4b36      	ldr	r3, [pc, #216]	; (40e0fc <lv_img_decoder_built_in_read_line+0x328>)
  40e022:	4798      	blx	r3
    return LV_RES_OK;
  40e024:	2001      	movs	r0, #1
  40e026:	e6e8      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
    if(fs_buf == NULL) return LV_RES_INV;
  40e028:	2000      	movs	r0, #0
  40e02a:	e6e6      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
}

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  40e02c:	7d08      	ldrb	r0, [r1, #20]
  40e02e:	f000 001f 	and.w	r0, r0, #31
  40e032:	4b26      	ldr	r3, [pc, #152]	; (40e0cc <lv_img_decoder_built_in_read_line+0x2f8>)
  40e034:	4798      	blx	r3
  40e036:	4682      	mov	sl, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  40e038:	f04f 0901 	mov.w	r9, #1
  40e03c:	fa09 f900 	lsl.w	r9, r9, r0
  40e040:	f109 39ff 	add.w	r9, r9, #4294967295
  40e044:	fa1f f989 	uxth.w	r9, r9

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  40e048:	7d2b      	ldrb	r3, [r5, #20]
  40e04a:	f003 031f 	and.w	r3, r3, #31
  40e04e:	3b07      	subs	r3, #7
  40e050:	2b03      	cmp	r3, #3
  40e052:	d871      	bhi.n	40e138 <lv_img_decoder_built_in_read_line+0x364>
  40e054:	e8df f003 	tbb	[pc, r3]
  40e058:	65542a02 	.word	0x65542a02
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
  40e05c:	696b      	ldr	r3, [r5, #20]
  40e05e:	f3c3 208a 	ubfx	r0, r3, #10, #11
  40e062:	3007      	adds	r0, #7
  40e064:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
  40e066:	10e3      	asrs	r3, r4, #3
  40e068:	fb08 3800 	mla	r8, r8, r0, r3
            ofs += 8;                /*Skip the palette*/
  40e06c:	f108 0808 	add.w	r8, r8, #8
            pos = 7 - (x & 0x7);
  40e070:	43e4      	mvns	r4, r4
  40e072:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  40e076:	6a6f      	ldr	r7, [r5, #36]	; 0x24

    uint8_t * fs_buf = lv_mem_buf_get(w);
  40e078:	9002      	str	r0, [sp, #8]
  40e07a:	4b1f      	ldr	r3, [pc, #124]	; (40e0f8 <lv_img_decoder_built_in_read_line+0x324>)
  40e07c:	4798      	blx	r3
    if(fs_buf == NULL) return LV_RES_INV;
  40e07e:	4683      	mov	fp, r0
  40e080:	2800      	cmp	r0, #0
  40e082:	f000 808c 	beq.w	40e19e <lv_img_decoder_built_in_read_line+0x3ca>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  40e086:	7c2b      	ldrb	r3, [r5, #16]
  40e088:	2b00      	cmp	r3, #0
  40e08a:	d15a      	bne.n	40e142 <lv_img_decoder_built_in_read_line+0x36e>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
  40e08c:	686b      	ldr	r3, [r5, #4]
  40e08e:	689b      	ldr	r3, [r3, #8]
  40e090:	4498      	add	r8, r3
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  40e092:	2e00      	cmp	r6, #0
  40e094:	dd7e      	ble.n	40e194 <lv_img_decoder_built_in_read_line+0x3c0>
  40e096:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40e098:	1e71      	subs	r1, r6, #1
  40e09a:	b289      	uxth	r1, r1
  40e09c:	3101      	adds	r1, #1
  40e09e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40e0a2:	4411      	add	r1, r2
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
  40e0a4:	f1ca 0508 	rsb	r5, sl, #8
  40e0a8:	b26d      	sxtb	r5, r5
  40e0aa:	e05b      	b.n	40e164 <lv_img_decoder_built_in_read_line+0x390>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  40e0ac:	696b      	ldr	r3, [r5, #20]
  40e0ae:	f3c3 208a 	ubfx	r0, r3, #10, #11
  40e0b2:	3003      	adds	r0, #3
  40e0b4:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
  40e0b6:	10a3      	asrs	r3, r4, #2
  40e0b8:	fb08 3800 	mla	r8, r8, r0, r3
            ofs += 16;               /*Skip the palette*/
  40e0bc:	f108 0810 	add.w	r8, r8, #16
            pos = 6 - (x & 0x3) * 2;
  40e0c0:	43e4      	mvns	r4, r4
  40e0c2:	f004 0403 	and.w	r4, r4, #3
  40e0c6:	0064      	lsls	r4, r4, #1
  40e0c8:	e7d5      	b.n	40e076 <lv_img_decoder_built_in_read_line+0x2a2>
  40e0ca:	bf00      	nop
  40e0cc:	00407f95 	.word	0x00407f95
  40e0d0:	00410c07 	.word	0x00410c07
  40e0d4:	00410bcb 	.word	0x00410bcb
  40e0d8:	0041cba0 	.word	0x0041cba0
  40e0dc:	0041c9fc 	.word	0x0041c9fc
  40e0e0:	0041ca28 	.word	0x0041ca28
  40e0e4:	00410edd 	.word	0x00410edd
  40e0e8:	0041cb7c 	.word	0x0041cb7c
  40e0ec:	0041cbc4 	.word	0x0041cbc4
  40e0f0:	0041c9d8 	.word	0x0041c9d8
  40e0f4:	0041c944 	.word	0x0041c944
  40e0f8:	004115a9 	.word	0x004115a9
  40e0fc:	00411105 	.word	0x00411105
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  40e100:	696b      	ldr	r3, [r5, #20]
  40e102:	f3c3 208a 	ubfx	r0, r3, #10, #11
  40e106:	3001      	adds	r0, #1
  40e108:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  40e10a:	1063      	asrs	r3, r4, #1
  40e10c:	fb08 3800 	mla	r8, r8, r0, r3
            ofs += 64;               /*Skip the palette*/
  40e110:	f108 0840 	add.w	r8, r8, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
  40e114:	f004 0401 	and.w	r4, r4, #1
  40e118:	2c00      	cmp	r4, #0
  40e11a:	bf0c      	ite	eq
  40e11c:	2404      	moveq	r4, #4
  40e11e:	2400      	movne	r4, #0
  40e120:	e7a9      	b.n	40e076 <lv_img_decoder_built_in_read_line+0x2a2>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  40e122:	6968      	ldr	r0, [r5, #20]
  40e124:	f3c0 208a 	ubfx	r0, r0, #10, #11
  40e128:	b283      	uxth	r3, r0
  40e12a:	b200      	sxth	r0, r0
            ofs += w * y + x;  /*First pixel*/
  40e12c:	fb08 4803 	mla	r8, r8, r3, r4
            ofs += 1024;       /*Skip the palette*/
  40e130:	f508 6880 	add.w	r8, r8, #1024	; 0x400
            pos = 0;
  40e134:	2400      	movs	r4, #0
  40e136:	e79e      	b.n	40e076 <lv_img_decoder_built_in_read_line+0x2a2>
    uint32_t ofs = 0;
  40e138:	f04f 0800 	mov.w	r8, #0
    int8_t pos   = 0;
  40e13c:	4644      	mov	r4, r8
    lv_coord_t w = 0;
  40e13e:	4640      	mov	r0, r8
  40e140:	e799      	b.n	40e076 <lv_img_decoder_built_in_read_line+0x2a2>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
  40e142:	2200      	movs	r2, #0
  40e144:	f108 0104 	add.w	r1, r8, #4
  40e148:	4638      	mov	r0, r7
  40e14a:	4b16      	ldr	r3, [pc, #88]	; (40e1a4 <lv_img_decoder_built_in_read_line+0x3d0>)
  40e14c:	4798      	blx	r3
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
  40e14e:	2300      	movs	r3, #0
  40e150:	9a02      	ldr	r2, [sp, #8]
  40e152:	4659      	mov	r1, fp
  40e154:	4638      	mov	r0, r7
  40e156:	4d14      	ldr	r5, [pc, #80]	; (40e1a8 <lv_img_decoder_built_in_read_line+0x3d4>)
  40e158:	47a8      	blx	r5
        data_tmp = fs_buf;
  40e15a:	46d8      	mov	r8, fp
  40e15c:	e799      	b.n	40e092 <lv_img_decoder_built_in_read_line+0x2be>
  40e15e:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
  40e160:	428a      	cmp	r2, r1
  40e162:	d017      	beq.n	40e194 <lv_img_decoder_built_in_read_line+0x3c0>
        uint8_t val_act = (*data_tmp >> pos) & mask;
  40e164:	f898 3000 	ldrb.w	r3, [r8]
  40e168:	4123      	asrs	r3, r4
  40e16a:	ea03 0309 	and.w	r3, r3, r9
        lv_color_t color = user_data->palette[val_act];
  40e16e:	b2db      	uxtb	r3, r3
  40e170:	68b8      	ldr	r0, [r7, #8]
  40e172:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  40e176:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  40e178:	0a00      	lsrs	r0, r0, #8
  40e17a:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  40e17c:	68f8      	ldr	r0, [r7, #12]
  40e17e:	5cc3      	ldrb	r3, [r0, r3]
  40e180:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
  40e182:	eba4 040a 	sub.w	r4, r4, sl
  40e186:	b264      	sxtb	r4, r4
        if(pos < 0) {
  40e188:	2c00      	cmp	r4, #0
  40e18a:	dae8      	bge.n	40e15e <lv_img_decoder_built_in_read_line+0x38a>
            pos = 8 - px_size;
  40e18c:	462c      	mov	r4, r5
            data_tmp++;
  40e18e:	f108 0801 	add.w	r8, r8, #1
  40e192:	e7e4      	b.n	40e15e <lv_img_decoder_built_in_read_line+0x38a>
        }
    }
    lv_mem_buf_release(fs_buf);
  40e194:	4658      	mov	r0, fp
  40e196:	4b05      	ldr	r3, [pc, #20]	; (40e1ac <lv_img_decoder_built_in_read_line+0x3d8>)
  40e198:	4798      	blx	r3
    return LV_RES_OK;
  40e19a:	2001      	movs	r0, #1
  40e19c:	e62d      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
    if(fs_buf == NULL) return LV_RES_INV;
  40e19e:	2000      	movs	r0, #0
  40e1a0:	e62b      	b.n	40ddfa <lv_img_decoder_built_in_read_line+0x26>
  40e1a2:	bf00      	nop
  40e1a4:	00410c07 	.word	0x00410c07
  40e1a8:	00410bcb 	.word	0x00410bcb
  40e1ac:	00411105 	.word	0x00411105

0040e1b0 <lv_img_decoder_get_info>:
{
  40e1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e1b4:	4606      	mov	r6, r0
  40e1b6:	4688      	mov	r8, r1
    lv_memset_00(header, sizeof(lv_img_header_t));
  40e1b8:	2104      	movs	r1, #4
  40e1ba:	4640      	mov	r0, r8
  40e1bc:	4b15      	ldr	r3, [pc, #84]	; (40e214 <lv_img_decoder_get_info+0x64>)
  40e1be:	4798      	blx	r3
    if(src == NULL) return LV_RES_INV;
  40e1c0:	b30e      	cbz	r6, 40e206 <lv_img_decoder_get_info+0x56>
    lv_img_src_t src_type = lv_img_src_get_type(src);
  40e1c2:	4630      	mov	r0, r6
  40e1c4:	4b14      	ldr	r3, [pc, #80]	; (40e218 <lv_img_decoder_get_info+0x68>)
  40e1c6:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  40e1c8:	b908      	cbnz	r0, 40e1ce <lv_img_decoder_get_info+0x1e>
        if(img_dsc->data == NULL) return LV_RES_INV;
  40e1ca:	68b3      	ldr	r3, [r6, #8]
  40e1cc:	b1eb      	cbz	r3, 40e20a <lv_img_decoder_get_info+0x5a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
  40e1ce:	4813      	ldr	r0, [pc, #76]	; (40e21c <lv_img_decoder_get_info+0x6c>)
  40e1d0:	4b13      	ldr	r3, [pc, #76]	; (40e220 <lv_img_decoder_get_info+0x70>)
  40e1d2:	4798      	blx	r3
  40e1d4:	4604      	mov	r4, r0
  40e1d6:	b1d0      	cbz	r0, 40e20e <lv_img_decoder_get_info+0x5e>
  40e1d8:	2500      	movs	r5, #0
  40e1da:	f8df 9040 	ldr.w	r9, [pc, #64]	; 40e21c <lv_img_decoder_get_info+0x6c>
  40e1de:	4f11      	ldr	r7, [pc, #68]	; (40e224 <lv_img_decoder_get_info+0x74>)
  40e1e0:	e004      	b.n	40e1ec <lv_img_decoder_get_info+0x3c>
  40e1e2:	4621      	mov	r1, r4
  40e1e4:	4648      	mov	r0, r9
  40e1e6:	47b8      	blx	r7
  40e1e8:	4604      	mov	r4, r0
  40e1ea:	b148      	cbz	r0, 40e200 <lv_img_decoder_get_info+0x50>
        if(d->info_cb) {
  40e1ec:	6823      	ldr	r3, [r4, #0]
  40e1ee:	2b00      	cmp	r3, #0
  40e1f0:	d0f7      	beq.n	40e1e2 <lv_img_decoder_get_info+0x32>
            res = d->info_cb(d, src, header);
  40e1f2:	4642      	mov	r2, r8
  40e1f4:	4631      	mov	r1, r6
  40e1f6:	4620      	mov	r0, r4
  40e1f8:	4798      	blx	r3
  40e1fa:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  40e1fc:	2801      	cmp	r0, #1
  40e1fe:	d1f0      	bne.n	40e1e2 <lv_img_decoder_get_info+0x32>
}
  40e200:	4628      	mov	r0, r5
  40e202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(src == NULL) return LV_RES_INV;
  40e206:	2500      	movs	r5, #0
  40e208:	e7fa      	b.n	40e200 <lv_img_decoder_get_info+0x50>
        if(img_dsc->data == NULL) return LV_RES_INV;
  40e20a:	2500      	movs	r5, #0
  40e20c:	e7f8      	b.n	40e200 <lv_img_decoder_get_info+0x50>
    lv_res_t res = LV_RES_INV;
  40e20e:	2500      	movs	r5, #0
  40e210:	e7f6      	b.n	40e200 <lv_img_decoder_get_info+0x50>
  40e212:	bf00      	nop
  40e214:	004116ed 	.word	0x004116ed
  40e218:	004082ad 	.word	0x004082ad
  40e21c:	20439e90 	.word	0x20439e90
  40e220:	00410ea1 	.word	0x00410ea1
  40e224:	00410eb5 	.word	0x00410eb5

0040e228 <lv_img_decoder_open>:
{
  40e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e22c:	b085      	sub	sp, #20
  40e22e:	4606      	mov	r6, r0
  40e230:	468a      	mov	sl, r1
  40e232:	4615      	mov	r5, r2
  40e234:	461c      	mov	r4, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
  40e236:	2128      	movs	r1, #40	; 0x28
  40e238:	4b39      	ldr	r3, [pc, #228]	; (40e320 <lv_img_decoder_open+0xf8>)
  40e23a:	4798      	blx	r3
    if(src == NULL) return LV_RES_INV;
  40e23c:	f1ba 0f00 	cmp.w	sl, #0
  40e240:	d06a      	beq.n	40e318 <lv_img_decoder_open+0xf0>
    lv_img_src_t src_type = lv_img_src_get_type(src);
  40e242:	4650      	mov	r0, sl
  40e244:	4b37      	ldr	r3, [pc, #220]	; (40e324 <lv_img_decoder_open+0xfc>)
  40e246:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  40e248:	b9b8      	cbnz	r0, 40e27a <lv_img_decoder_open+0x52>
        if(img_dsc->data == NULL) return LV_RES_INV;
  40e24a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e24e:	2b00      	cmp	r3, #0
  40e250:	d064      	beq.n	40e31c <lv_img_decoder_open+0xf4>
    dsc->color    = color;
  40e252:	8135      	strh	r5, [r6, #8]
    dsc->src_type = src_type;
  40e254:	2300      	movs	r3, #0
  40e256:	7433      	strb	r3, [r6, #16]
    dsc->frame_id = frame_id;
  40e258:	60f4      	str	r4, [r6, #12]
        dsc->src = src;
  40e25a:	f8c6 a004 	str.w	sl, [r6, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
  40e25e:	4832      	ldr	r0, [pc, #200]	; (40e328 <lv_img_decoder_open+0x100>)
  40e260:	4b32      	ldr	r3, [pc, #200]	; (40e32c <lv_img_decoder_open+0x104>)
  40e262:	4798      	blx	r3
  40e264:	4604      	mov	r4, r0
  40e266:	2800      	cmp	r0, #0
  40e268:	d04a      	beq.n	40e300 <lv_img_decoder_open+0xd8>
  40e26a:	2500      	movs	r5, #0
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
  40e26c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 40e320 <lv_img_decoder_open+0xf8>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
  40e270:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 40e328 <lv_img_decoder_open+0x100>
  40e274:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 40e358 <lv_img_decoder_open+0x130>
  40e278:	e022      	b.n	40e2c0 <lv_img_decoder_open+0x98>
    dsc->color    = color;
  40e27a:	8135      	strh	r5, [r6, #8]
    dsc->src_type = src_type;
  40e27c:	7430      	strb	r0, [r6, #16]
    dsc->frame_id = frame_id;
  40e27e:	60f4      	str	r4, [r6, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  40e280:	2801      	cmp	r0, #1
  40e282:	d1ea      	bne.n	40e25a <lv_img_decoder_open+0x32>
        size_t fnlen = strlen(src);
  40e284:	4650      	mov	r0, sl
  40e286:	4b2a      	ldr	r3, [pc, #168]	; (40e330 <lv_img_decoder_open+0x108>)
  40e288:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  40e28a:	3001      	adds	r0, #1
  40e28c:	4b29      	ldr	r3, [pc, #164]	; (40e334 <lv_img_decoder_open+0x10c>)
  40e28e:	4798      	blx	r3
  40e290:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MALLOC(dsc->src);
  40e292:	b118      	cbz	r0, 40e29c <lv_img_decoder_open+0x74>
        strcpy((char *)dsc->src, src);
  40e294:	4651      	mov	r1, sl
  40e296:	4b28      	ldr	r3, [pc, #160]	; (40e338 <lv_img_decoder_open+0x110>)
  40e298:	4798      	blx	r3
  40e29a:	e7e0      	b.n	40e25e <lv_img_decoder_open+0x36>
        LV_ASSERT_MALLOC(dsc->src);
  40e29c:	4b27      	ldr	r3, [pc, #156]	; (40e33c <lv_img_decoder_open+0x114>)
  40e29e:	9302      	str	r3, [sp, #8]
  40e2a0:	4b27      	ldr	r3, [pc, #156]	; (40e340 <lv_img_decoder_open+0x118>)
  40e2a2:	9301      	str	r3, [sp, #4]
  40e2a4:	4b27      	ldr	r3, [pc, #156]	; (40e344 <lv_img_decoder_open+0x11c>)
  40e2a6:	9300      	str	r3, [sp, #0]
  40e2a8:	4b27      	ldr	r3, [pc, #156]	; (40e348 <lv_img_decoder_open+0x120>)
  40e2aa:	227d      	movs	r2, #125	; 0x7d
  40e2ac:	4927      	ldr	r1, [pc, #156]	; (40e34c <lv_img_decoder_open+0x124>)
  40e2ae:	2003      	movs	r0, #3
  40e2b0:	4c27      	ldr	r4, [pc, #156]	; (40e350 <lv_img_decoder_open+0x128>)
  40e2b2:	47a0      	blx	r4
  40e2b4:	e7fe      	b.n	40e2b4 <lv_img_decoder_open+0x8c>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
  40e2b6:	4621      	mov	r1, r4
  40e2b8:	4648      	mov	r0, r9
  40e2ba:	47c0      	blx	r8
  40e2bc:	4604      	mov	r4, r0
  40e2be:	b300      	cbz	r0, 40e302 <lv_img_decoder_open+0xda>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
  40e2c0:	6823      	ldr	r3, [r4, #0]
  40e2c2:	2b00      	cmp	r3, #0
  40e2c4:	d0f7      	beq.n	40e2b6 <lv_img_decoder_open+0x8e>
  40e2c6:	6862      	ldr	r2, [r4, #4]
  40e2c8:	2a00      	cmp	r2, #0
  40e2ca:	d0f4      	beq.n	40e2b6 <lv_img_decoder_open+0x8e>
        res = decoder->info_cb(decoder, src, &dsc->header);
  40e2cc:	f106 0714 	add.w	r7, r6, #20
  40e2d0:	463a      	mov	r2, r7
  40e2d2:	4651      	mov	r1, sl
  40e2d4:	4620      	mov	r0, r4
  40e2d6:	4798      	blx	r3
  40e2d8:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  40e2da:	2801      	cmp	r0, #1
  40e2dc:	d1eb      	bne.n	40e2b6 <lv_img_decoder_open+0x8e>
        dsc->decoder = decoder;
  40e2de:	6034      	str	r4, [r6, #0]
        res = decoder->open_cb(decoder, dsc);
  40e2e0:	6863      	ldr	r3, [r4, #4]
  40e2e2:	4631      	mov	r1, r6
  40e2e4:	4620      	mov	r0, r4
  40e2e6:	4798      	blx	r3
  40e2e8:	4605      	mov	r5, r0
        if(res == LV_RES_OK) return res;
  40e2ea:	2801      	cmp	r0, #1
  40e2ec:	d00c      	beq.n	40e308 <lv_img_decoder_open+0xe0>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
  40e2ee:	2104      	movs	r1, #4
  40e2f0:	4638      	mov	r0, r7
  40e2f2:	47d8      	blx	fp
        dsc->error_msg = NULL;
  40e2f4:	2300      	movs	r3, #0
  40e2f6:	6233      	str	r3, [r6, #32]
        dsc->img_data  = NULL;
  40e2f8:	61b3      	str	r3, [r6, #24]
        dsc->user_data = NULL;
  40e2fa:	6273      	str	r3, [r6, #36]	; 0x24
        dsc->time_to_open = 0;
  40e2fc:	61f3      	str	r3, [r6, #28]
  40e2fe:	e7da      	b.n	40e2b6 <lv_img_decoder_open+0x8e>
    lv_res_t res = LV_RES_INV;
  40e300:	2500      	movs	r5, #0
    if(dsc->src_type == LV_IMG_SRC_FILE)
  40e302:	7c33      	ldrb	r3, [r6, #16]
  40e304:	2b01      	cmp	r3, #1
  40e306:	d003      	beq.n	40e310 <lv_img_decoder_open+0xe8>
}
  40e308:	4628      	mov	r0, r5
  40e30a:	b005      	add	sp, #20
  40e30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_mem_free((void *)dsc->src);
  40e310:	6870      	ldr	r0, [r6, #4]
  40e312:	4b10      	ldr	r3, [pc, #64]	; (40e354 <lv_img_decoder_open+0x12c>)
  40e314:	4798      	blx	r3
  40e316:	e7f7      	b.n	40e308 <lv_img_decoder_open+0xe0>
    if(src == NULL) return LV_RES_INV;
  40e318:	2500      	movs	r5, #0
  40e31a:	e7f5      	b.n	40e308 <lv_img_decoder_open+0xe0>
        if(img_dsc->data == NULL) return LV_RES_INV;
  40e31c:	2500      	movs	r5, #0
  40e31e:	e7f3      	b.n	40e308 <lv_img_decoder_open+0xe0>
  40e320:	004116ed 	.word	0x004116ed
  40e324:	004082ad 	.word	0x004082ad
  40e328:	20439e90 	.word	0x20439e90
  40e32c:	00410ea1 	.word	0x00410ea1
  40e330:	00419b01 	.word	0x00419b01
  40e334:	004114b5 	.word	0x004114b5
  40e338:	00419a1d 	.word	0x00419a1d
  40e33c:	0041c064 	.word	0x0041c064
  40e340:	0041cc10 	.word	0x0041cc10
  40e344:	0041c098 	.word	0x0041c098
  40e348:	0041c96c 	.word	0x0041c96c
  40e34c:	0041ca28 	.word	0x0041ca28
  40e350:	00410edd 	.word	0x00410edd
  40e354:	004110e1 	.word	0x004110e1
  40e358:	00410eb5 	.word	0x00410eb5

0040e35c <lv_img_decoder_read_line>:
{
  40e35c:	b570      	push	{r4, r5, r6, lr}
  40e35e:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  40e360:	6806      	ldr	r6, [r0, #0]
  40e362:	68b4      	ldr	r4, [r6, #8]
  40e364:	b154      	cbz	r4, 40e37c <lv_img_decoder_read_line+0x20>
  40e366:	461d      	mov	r5, r3
  40e368:	4613      	mov	r3, r2
  40e36a:	460a      	mov	r2, r1
  40e36c:	4601      	mov	r1, r0
  40e36e:	9806      	ldr	r0, [sp, #24]
  40e370:	9001      	str	r0, [sp, #4]
  40e372:	9500      	str	r5, [sp, #0]
  40e374:	4630      	mov	r0, r6
  40e376:	47a0      	blx	r4
}
  40e378:	b002      	add	sp, #8
  40e37a:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  40e37c:	2000      	movs	r0, #0
  40e37e:	e7fb      	b.n	40e378 <lv_img_decoder_read_line+0x1c>

0040e380 <lv_img_decoder_close>:
    if(dsc->decoder) {
  40e380:	6803      	ldr	r3, [r0, #0]
  40e382:	b183      	cbz	r3, 40e3a6 <lv_img_decoder_close+0x26>
{
  40e384:	b510      	push	{r4, lr}
  40e386:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  40e388:	68da      	ldr	r2, [r3, #12]
  40e38a:	b112      	cbz	r2, 40e392 <lv_img_decoder_close+0x12>
  40e38c:	4601      	mov	r1, r0
  40e38e:	4618      	mov	r0, r3
  40e390:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  40e392:	7c23      	ldrb	r3, [r4, #16]
  40e394:	2b01      	cmp	r3, #1
  40e396:	d000      	beq.n	40e39a <lv_img_decoder_close+0x1a>
  40e398:	bd10      	pop	{r4, pc}
            lv_mem_free((void *)dsc->src);
  40e39a:	6860      	ldr	r0, [r4, #4]
  40e39c:	4b02      	ldr	r3, [pc, #8]	; (40e3a8 <lv_img_decoder_close+0x28>)
  40e39e:	4798      	blx	r3
            dsc->src = NULL;
  40e3a0:	2300      	movs	r3, #0
  40e3a2:	6063      	str	r3, [r4, #4]
}
  40e3a4:	e7f8      	b.n	40e398 <lv_img_decoder_close+0x18>
  40e3a6:	4770      	bx	lr
  40e3a8:	004110e1 	.word	0x004110e1

0040e3ac <lv_img_decoder_create>:
{
  40e3ac:	b510      	push	{r4, lr}
  40e3ae:	b084      	sub	sp, #16
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
  40e3b0:	480b      	ldr	r0, [pc, #44]	; (40e3e0 <lv_img_decoder_create+0x34>)
  40e3b2:	4b0c      	ldr	r3, [pc, #48]	; (40e3e4 <lv_img_decoder_create+0x38>)
  40e3b4:	4798      	blx	r3
    LV_ASSERT_MALLOC(decoder);
  40e3b6:	b130      	cbz	r0, 40e3c6 <lv_img_decoder_create+0x1a>
  40e3b8:	4604      	mov	r4, r0
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  40e3ba:	2114      	movs	r1, #20
  40e3bc:	4b0a      	ldr	r3, [pc, #40]	; (40e3e8 <lv_img_decoder_create+0x3c>)
  40e3be:	4798      	blx	r3
}
  40e3c0:	4620      	mov	r0, r4
  40e3c2:	b004      	add	sp, #16
  40e3c4:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
  40e3c6:	4b09      	ldr	r3, [pc, #36]	; (40e3ec <lv_img_decoder_create+0x40>)
  40e3c8:	9302      	str	r3, [sp, #8]
  40e3ca:	4b09      	ldr	r3, [pc, #36]	; (40e3f0 <lv_img_decoder_create+0x44>)
  40e3cc:	9301      	str	r3, [sp, #4]
  40e3ce:	4b09      	ldr	r3, [pc, #36]	; (40e3f4 <lv_img_decoder_create+0x48>)
  40e3d0:	9300      	str	r3, [sp, #0]
  40e3d2:	4b09      	ldr	r3, [pc, #36]	; (40e3f8 <lv_img_decoder_create+0x4c>)
  40e3d4:	22d0      	movs	r2, #208	; 0xd0
  40e3d6:	4909      	ldr	r1, [pc, #36]	; (40e3fc <lv_img_decoder_create+0x50>)
  40e3d8:	2003      	movs	r0, #3
  40e3da:	4c09      	ldr	r4, [pc, #36]	; (40e400 <lv_img_decoder_create+0x54>)
  40e3dc:	47a0      	blx	r4
  40e3de:	e7fe      	b.n	40e3de <lv_img_decoder_create+0x32>
  40e3e0:	20439e90 	.word	0x20439e90
  40e3e4:	00410da1 	.word	0x00410da1
  40e3e8:	004116ed 	.word	0x004116ed
  40e3ec:	0041c064 	.word	0x0041c064
  40e3f0:	0041cc00 	.word	0x0041cc00
  40e3f4:	0041c098 	.word	0x0041c098
  40e3f8:	0041c980 	.word	0x0041c980
  40e3fc:	0041ca28 	.word	0x0041ca28
  40e400:	00410edd 	.word	0x00410edd

0040e404 <_lv_img_decoder_init>:
{
  40e404:	b510      	push	{r4, lr}
  40e406:	b084      	sub	sp, #16
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
  40e408:	2114      	movs	r1, #20
  40e40a:	480e      	ldr	r0, [pc, #56]	; (40e444 <_lv_img_decoder_init+0x40>)
  40e40c:	4b0e      	ldr	r3, [pc, #56]	; (40e448 <_lv_img_decoder_init+0x44>)
  40e40e:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  40e410:	4b0e      	ldr	r3, [pc, #56]	; (40e44c <_lv_img_decoder_init+0x48>)
  40e412:	4798      	blx	r3
    LV_ASSERT_MALLOC(decoder);
  40e414:	b148      	cbz	r0, 40e42a <_lv_img_decoder_init+0x26>
    decoder->info_cb = info_cb;
  40e416:	4a0e      	ldr	r2, [pc, #56]	; (40e450 <_lv_img_decoder_init+0x4c>)
  40e418:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
  40e41a:	4a0e      	ldr	r2, [pc, #56]	; (40e454 <_lv_img_decoder_init+0x50>)
  40e41c:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
  40e41e:	4a0e      	ldr	r2, [pc, #56]	; (40e458 <_lv_img_decoder_init+0x54>)
  40e420:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
  40e422:	4a0e      	ldr	r2, [pc, #56]	; (40e45c <_lv_img_decoder_init+0x58>)
  40e424:	60c2      	str	r2, [r0, #12]
}
  40e426:	b004      	add	sp, #16
  40e428:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
  40e42a:	4b0d      	ldr	r3, [pc, #52]	; (40e460 <_lv_img_decoder_init+0x5c>)
  40e42c:	9302      	str	r3, [sp, #8]
  40e42e:	4b0d      	ldr	r3, [pc, #52]	; (40e464 <_lv_img_decoder_init+0x60>)
  40e430:	9301      	str	r3, [sp, #4]
  40e432:	4b0d      	ldr	r3, [pc, #52]	; (40e468 <_lv_img_decoder_init+0x64>)
  40e434:	9300      	str	r3, [sp, #0]
  40e436:	4b0d      	ldr	r3, [pc, #52]	; (40e46c <_lv_img_decoder_init+0x68>)
  40e438:	2240      	movs	r2, #64	; 0x40
  40e43a:	490d      	ldr	r1, [pc, #52]	; (40e470 <_lv_img_decoder_init+0x6c>)
  40e43c:	2003      	movs	r0, #3
  40e43e:	4c0d      	ldr	r4, [pc, #52]	; (40e474 <_lv_img_decoder_init+0x70>)
  40e440:	47a0      	blx	r4
  40e442:	e7fe      	b.n	40e442 <_lv_img_decoder_init+0x3e>
  40e444:	20439e90 	.word	0x20439e90
  40e448:	00410d8f 	.word	0x00410d8f
  40e44c:	0040e3ad 	.word	0x0040e3ad
  40e450:	0040d989 	.word	0x0040d989
  40e454:	0040dadd 	.word	0x0040dadd
  40e458:	0040ddd5 	.word	0x0040ddd5
  40e45c:	0040daa1 	.word	0x0040daa1
  40e460:	0041c064 	.word	0x0041c064
  40e464:	0041cc00 	.word	0x0041cc00
  40e468:	0041c098 	.word	0x0041c098
  40e46c:	0041c954 	.word	0x0041c954
  40e470:	0041ca28 	.word	0x0041ca28
  40e474:	00410edd 	.word	0x00410edd

0040e478 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40e478:	8883      	ldrh	r3, [r0, #4]
  40e47a:	3301      	adds	r3, #1
  40e47c:	8800      	ldrh	r0, [r0, #0]
  40e47e:	1a18      	subs	r0, r3, r0
}
  40e480:	b200      	sxth	r0, r0
  40e482:	4770      	bx	lr

0040e484 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40e484:	88c3      	ldrh	r3, [r0, #6]
  40e486:	3301      	adds	r3, #1
  40e488:	8840      	ldrh	r0, [r0, #2]
  40e48a:	1a18      	subs	r0, r3, r0
}
  40e48c:	b200      	sxth	r0, r0
  40e48e:	4770      	bx	lr

0040e490 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
  40e490:	b470      	push	{r4, r5, r6}
  40e492:	9d03      	ldr	r5, [sp, #12]
  40e494:	9c04      	ldr	r4, [sp, #16]
    if(item_cnt <= 1) {
  40e496:	2b01      	cmp	r3, #1
  40e498:	dd07      	ble.n	40e4aa <place_content+0x1a>
            default:
                break;
        }
    }

    switch(place) {
  40e49a:	3801      	subs	r0, #1
  40e49c:	2804      	cmp	r0, #4
  40e49e:	d83d      	bhi.n	40e51c <place_content+0x8c>
  40e4a0:	e8df f000 	tbb	[pc, r0]
  40e4a4:	20310611 	.word	0x20310611
  40e4a8:	18          	.byte	0x18
  40e4a9:	00          	.byte	0x00
        switch(place) {
  40e4aa:	1ec6      	subs	r6, r0, #3
  40e4ac:	2e02      	cmp	r6, #2
  40e4ae:	d8f4      	bhi.n	40e49a <place_content+0xa>
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
  40e4b0:	2300      	movs	r3, #0
  40e4b2:	8023      	strh	r3, [r4, #0]
            *start_pos += (max_size - content_size) / 2;
  40e4b4:	1a89      	subs	r1, r1, r2
  40e4b6:	bf48      	it	mi
  40e4b8:	3101      	addmi	r1, #1
  40e4ba:	882a      	ldrh	r2, [r5, #0]
  40e4bc:	eb02 0161 	add.w	r1, r2, r1, asr #1
  40e4c0:	8029      	strh	r1, [r5, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
  40e4c2:	bc70      	pop	{r4, r5, r6}
  40e4c4:	4770      	bx	lr
            *gap = 0;
  40e4c6:	2300      	movs	r3, #0
  40e4c8:	8023      	strh	r3, [r4, #0]
            *start_pos += max_size - content_size;
  40e4ca:	1a89      	subs	r1, r1, r2
  40e4cc:	882a      	ldrh	r2, [r5, #0]
  40e4ce:	4411      	add	r1, r2
  40e4d0:	8029      	strh	r1, [r5, #0]
            break;
  40e4d2:	e7f6      	b.n	40e4c2 <place_content+0x32>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
  40e4d4:	1a89      	subs	r1, r1, r2
  40e4d6:	b209      	sxth	r1, r1
  40e4d8:	3b01      	subs	r3, #1
  40e4da:	b21b      	sxth	r3, r3
  40e4dc:	fb91 f1f3 	sdiv	r1, r1, r3
  40e4e0:	8021      	strh	r1, [r4, #0]
            break;
  40e4e2:	e7ee      	b.n	40e4c2 <place_content+0x32>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
  40e4e4:	1a89      	subs	r1, r1, r2
  40e4e6:	b209      	sxth	r1, r1
  40e4e8:	fb91 f3f3 	sdiv	r3, r1, r3
  40e4ec:	8822      	ldrh	r2, [r4, #0]
  40e4ee:	4413      	add	r3, r2
  40e4f0:	b21b      	sxth	r3, r3
  40e4f2:	8023      	strh	r3, [r4, #0]
            *start_pos += *gap / 2;
  40e4f4:	461a      	mov	r2, r3
  40e4f6:	2b00      	cmp	r3, #0
  40e4f8:	bfb8      	it	lt
  40e4fa:	1c5a      	addlt	r2, r3, #1
  40e4fc:	882b      	ldrh	r3, [r5, #0]
  40e4fe:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40e502:	802b      	strh	r3, [r5, #0]
            break;
  40e504:	e7dd      	b.n	40e4c2 <place_content+0x32>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
  40e506:	1a89      	subs	r1, r1, r2
  40e508:	b209      	sxth	r1, r1
  40e50a:	3301      	adds	r3, #1
  40e50c:	b21b      	sxth	r3, r3
  40e50e:	fb91 f1f3 	sdiv	r1, r1, r3
  40e512:	8021      	strh	r1, [r4, #0]
            *start_pos += *gap;
  40e514:	882b      	ldrh	r3, [r5, #0]
  40e516:	4419      	add	r1, r3
  40e518:	8029      	strh	r1, [r5, #0]
            break;
  40e51a:	e7d2      	b.n	40e4c2 <place_content+0x32>
            *gap = 0;
  40e51c:	2300      	movs	r3, #0
  40e51e:	8023      	strh	r3, [r4, #0]
}
  40e520:	e7cf      	b.n	40e4c2 <place_content+0x32>

0040e522 <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
  40e522:	b149      	cbz	r1, 40e538 <get_next_item+0x16>
        (*item_id)--;
  40e524:	6813      	ldr	r3, [r2, #0]
  40e526:	3b01      	subs	r3, #1
  40e528:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
  40e52a:	2b00      	cmp	r3, #0
  40e52c:	db0f      	blt.n	40e54e <get_next_item+0x2c>
  40e52e:	6882      	ldr	r2, [r0, #8]
  40e530:	6812      	ldr	r2, [r2, #0]
  40e532:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  40e536:	4770      	bx	lr
        else return NULL;
    }
    else {
        (*item_id)++;
  40e538:	6813      	ldr	r3, [r2, #0]
  40e53a:	3301      	adds	r3, #1
  40e53c:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
  40e53e:	6882      	ldr	r2, [r0, #8]
  40e540:	6851      	ldr	r1, [r2, #4]
  40e542:	428b      	cmp	r3, r1
  40e544:	da05      	bge.n	40e552 <get_next_item+0x30>
  40e546:	6812      	ldr	r2, [r2, #0]
  40e548:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  40e54c:	4770      	bx	lr
        else return NULL;
  40e54e:	2000      	movs	r0, #0
  40e550:	4770      	bx	lr
        else return NULL;
  40e552:	2000      	movs	r0, #0
    }
}
  40e554:	4770      	bx	lr
	...

0040e558 <find_track_end>:
{
  40e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e55c:	b08d      	sub	sp, #52	; 0x34
  40e55e:	4681      	mov	r9, r0
  40e560:	9004      	str	r0, [sp, #16]
  40e562:	460d      	mov	r5, r1
  40e564:	4616      	mov	r6, r2
  40e566:	9307      	str	r3, [sp, #28]
  40e568:	f9bd b058 	ldrsh.w	fp, [sp, #88]	; 0x58
  40e56c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  40e56e:	f241 0201 	movw	r2, #4097	; 0x1001
  40e572:	2100      	movs	r1, #0
  40e574:	4f9d      	ldr	r7, [pc, #628]	; (40e7ec <find_track_end+0x294>)
  40e576:	47b8      	blx	r7
  40e578:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  40e57a:	f241 0204 	movw	r2, #4100	; 0x1004
  40e57e:	2100      	movs	r1, #0
  40e580:	4648      	mov	r0, r9
  40e582:	47b8      	blx	r7
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
  40e584:	78eb      	ldrb	r3, [r5, #3]
  40e586:	f013 0f02 	tst.w	r3, #2
  40e58a:	d012      	beq.n	40e5b2 <find_track_end+0x5a>
  40e58c:	f003 0301 	and.w	r3, r3, #1
  40e590:	fa0f f788 	sxth.w	r7, r8
  40e594:	f242 72d1 	movw	r2, #10193	; 0x27d1
  40e598:	4297      	cmp	r7, r2
  40e59a:	d100      	bne.n	40e59e <find_track_end+0x46>
  40e59c:	b92b      	cbnz	r3, 40e5aa <find_track_end+0x52>
  40e59e:	b200      	sxth	r0, r0
  40e5a0:	f242 72d1 	movw	r2, #10193	; 0x27d1
  40e5a4:	4290      	cmp	r0, r2
  40e5a6:	d104      	bne.n	40e5b2 <find_track_end+0x5a>
  40e5a8:	b91b      	cbnz	r3, 40e5b2 <find_track_end+0x5a>
        f->wrap = false;
  40e5aa:	78eb      	ldrb	r3, [r5, #3]
  40e5ac:	f36f 0341 	bfc	r3, #1, #1
  40e5b0:	70eb      	strb	r3, [r5, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
  40e5b2:	78eb      	ldrb	r3, [r5, #3]
  40e5b4:	f003 0301 	and.w	r3, r3, #1
  40e5b8:	4a8d      	ldr	r2, [pc, #564]	; (40e7f0 <find_track_end+0x298>)
  40e5ba:	498e      	ldr	r1, [pc, #568]	; (40e7f4 <find_track_end+0x29c>)
  40e5bc:	2b00      	cmp	r3, #0
  40e5be:	bf08      	it	eq
  40e5c0:	4611      	moveq	r1, r2
  40e5c2:	9108      	str	r1, [sp, #32]
  40e5c4:	4a8b      	ldr	r2, [pc, #556]	; (40e7f4 <find_track_end+0x29c>)
  40e5c6:	498a      	ldr	r1, [pc, #552]	; (40e7f0 <find_track_end+0x298>)
  40e5c8:	2b00      	cmp	r3, #0
  40e5ca:	bf08      	it	eq
  40e5cc:	4611      	moveq	r1, r2
  40e5ce:	9105      	str	r1, [sp, #20]
    t->track_main_size = 0;
  40e5d0:	2300      	movs	r3, #0
  40e5d2:	8063      	strh	r3, [r4, #2]
    t->track_fix_main_size = 0;
  40e5d4:	80a3      	strh	r3, [r4, #4]
    t->grow_item_cnt = 0;
  40e5d6:	6123      	str	r3, [r4, #16]
    t->track_cross_size = 0;
  40e5d8:	8023      	strh	r3, [r4, #0]
    t->item_cnt = 0;
  40e5da:	60a3      	str	r3, [r4, #8]
    t->grow_dsc = NULL;
  40e5dc:	60e3      	str	r3, [r4, #12]
    int32_t item_id = item_start_id;
  40e5de:	960b      	str	r6, [sp, #44]	; 0x2c
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
  40e5e0:	4631      	mov	r1, r6
  40e5e2:	9804      	ldr	r0, [sp, #16]
  40e5e4:	4b84      	ldr	r3, [pc, #528]	; (40e7f8 <find_track_end+0x2a0>)
  40e5e6:	4798      	blx	r3
    while(item) {
  40e5e8:	4681      	mov	r9, r0
  40e5ea:	2800      	cmp	r0, #0
  40e5ec:	f000 80ce 	beq.w	40e78c <find_track_end+0x234>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
  40e5f0:	f8df 823c 	ldr.w	r8, [pc, #572]	; 40e830 <find_track_end+0x2d8>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
  40e5f4:	4f81      	ldr	r7, [pc, #516]	; (40e7fc <find_track_end+0x2a4>)
  40e5f6:	e040      	b.n	40e67a <find_track_end+0x122>
                    LV_ASSERT_MALLOC(new_dsc);
  40e5f8:	4b81      	ldr	r3, [pc, #516]	; (40e800 <find_track_end+0x2a8>)
  40e5fa:	9302      	str	r3, [sp, #8]
  40e5fc:	4b81      	ldr	r3, [pc, #516]	; (40e804 <find_track_end+0x2ac>)
  40e5fe:	9301      	str	r3, [sp, #4]
  40e600:	4b81      	ldr	r3, [pc, #516]	; (40e808 <find_track_end+0x2b0>)
  40e602:	9300      	str	r3, [sp, #0]
  40e604:	4b81      	ldr	r3, [pc, #516]	; (40e80c <find_track_end+0x2b4>)
  40e606:	f44f 72af 	mov.w	r2, #350	; 0x15e
  40e60a:	4981      	ldr	r1, [pc, #516]	; (40e810 <find_track_end+0x2b8>)
  40e60c:	2003      	movs	r0, #3
  40e60e:	4c81      	ldr	r4, [pc, #516]	; (40e814 <find_track_end+0x2bc>)
  40e610:	47a0      	blx	r4
  40e612:	e7fe      	b.n	40e612 <find_track_end+0xba>
                lv_coord_t item_size = get_main_size(item);
  40e614:	4648      	mov	r0, r9
  40e616:	9b08      	ldr	r3, [sp, #32]
  40e618:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
  40e61a:	78eb      	ldrb	r3, [r5, #3]
  40e61c:	f013 0f02 	tst.w	r3, #2
  40e620:	d006      	beq.n	40e630 <find_track_end+0xd8>
  40e622:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e626:	4403      	add	r3, r0
  40e628:	9a07      	ldr	r2, [sp, #28]
  40e62a:	4293      	cmp	r3, r2
  40e62c:	f300 80ae 	bgt.w	40e78c <find_track_end+0x234>
                t->track_fix_main_size += item_size + item_gap;
  40e630:	88a3      	ldrh	r3, [r4, #4]
  40e632:	445b      	add	r3, fp
  40e634:	4403      	add	r3, r0
  40e636:	80a3      	strh	r3, [r4, #4]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
  40e638:	4648      	mov	r0, r9
  40e63a:	9b05      	ldr	r3, [sp, #20]
  40e63c:	4798      	blx	r3
  40e63e:	f9b4 3000 	ldrsh.w	r3, [r4]
  40e642:	4298      	cmp	r0, r3
  40e644:	f300 809d 	bgt.w	40e782 <find_track_end+0x22a>
  40e648:	8023      	strh	r3, [r4, #0]
            t->item_cnt++;
  40e64a:	68a3      	ldr	r3, [r4, #8]
  40e64c:	3301      	adds	r3, #1
  40e64e:	60a3      	str	r3, [r4, #8]
        item_id += f->rev ? -1 : +1;
  40e650:	78eb      	ldrb	r3, [r5, #3]
  40e652:	f003 0304 	and.w	r3, r3, #4
  40e656:	2b00      	cmp	r3, #0
  40e658:	bf14      	ite	ne
  40e65a:	f04f 31ff 	movne.w	r1, #4294967295
  40e65e:	2101      	moveq	r1, #1
  40e660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e662:	4419      	add	r1, r3
  40e664:	910b      	str	r1, [sp, #44]	; 0x2c
        if(item_id < 0) break;
  40e666:	2900      	cmp	r1, #0
  40e668:	f2c0 8090 	blt.w	40e78c <find_track_end+0x234>
        item = lv_obj_get_child(cont, item_id);
  40e66c:	9804      	ldr	r0, [sp, #16]
  40e66e:	4b62      	ldr	r3, [pc, #392]	; (40e7f8 <find_track_end+0x2a0>)
  40e670:	4798      	blx	r3
    while(item) {
  40e672:	4681      	mov	r9, r0
  40e674:	2800      	cmp	r0, #0
  40e676:	f000 8089 	beq.w	40e78c <find_track_end+0x234>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
  40e67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e67c:	429e      	cmp	r6, r3
  40e67e:	d005      	beq.n	40e68c <find_track_end+0x134>
  40e680:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  40e684:	4648      	mov	r0, r9
  40e686:	47c0      	blx	r8
  40e688:	2800      	cmp	r0, #0
  40e68a:	d17f      	bne.n	40e78c <find_track_end+0x234>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
  40e68c:	4962      	ldr	r1, [pc, #392]	; (40e818 <find_track_end+0x2c0>)
  40e68e:	4648      	mov	r0, r9
  40e690:	47b8      	blx	r7
  40e692:	2800      	cmp	r0, #0
  40e694:	d1dc      	bne.n	40e650 <find_track_end+0xf8>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
  40e696:	4b61      	ldr	r3, [pc, #388]	; (40e81c <find_track_end+0x2c4>)
  40e698:	881a      	ldrh	r2, [r3, #0]
  40e69a:	2100      	movs	r1, #0
  40e69c:	4648      	mov	r0, r9
  40e69e:	4b53      	ldr	r3, [pc, #332]	; (40e7ec <find_track_end+0x294>)
  40e6a0:	4798      	blx	r3
  40e6a2:	4682      	mov	sl, r0
            if(grow_value) {
  40e6a4:	f010 0fff 	tst.w	r0, #255	; 0xff
  40e6a8:	d0b4      	beq.n	40e614 <find_track_end+0xbc>
                t->grow_item_cnt++;
  40e6aa:	6920      	ldr	r0, [r4, #16]
  40e6ac:	3001      	adds	r0, #1
  40e6ae:	6120      	str	r0, [r4, #16]
                t->track_fix_main_size += item_gap;
  40e6b0:	88a3      	ldrh	r3, [r4, #4]
  40e6b2:	445b      	add	r3, fp
  40e6b4:	80a3      	strh	r3, [r4, #4]
                if(t->grow_dsc_calc) {
  40e6b6:	7d23      	ldrb	r3, [r4, #20]
  40e6b8:	f013 0f01 	tst.w	r3, #1
  40e6bc:	d0bc      	beq.n	40e638 <find_track_end+0xe0>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
  40e6be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40e6c2:	0080      	lsls	r0, r0, #2
  40e6c4:	4b56      	ldr	r3, [pc, #344]	; (40e820 <find_track_end+0x2c8>)
  40e6c6:	4798      	blx	r3
                    LV_ASSERT_MALLOC(new_dsc);
  40e6c8:	9006      	str	r0, [sp, #24]
  40e6ca:	2800      	cmp	r0, #0
  40e6cc:	d094      	beq.n	40e5f8 <find_track_end+0xa0>
                    if(t->grow_dsc) {
  40e6ce:	68e1      	ldr	r1, [r4, #12]
  40e6d0:	b151      	cbz	r1, 40e6e8 <find_track_end+0x190>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
  40e6d2:	6923      	ldr	r3, [r4, #16]
  40e6d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40e6d8:	009a      	lsls	r2, r3, #2
  40e6da:	3a14      	subs	r2, #20
  40e6dc:	9806      	ldr	r0, [sp, #24]
  40e6de:	4b51      	ldr	r3, [pc, #324]	; (40e824 <find_track_end+0x2cc>)
  40e6e0:	4798      	blx	r3
                        lv_mem_buf_release(t->grow_dsc);
  40e6e2:	68e0      	ldr	r0, [r4, #12]
  40e6e4:	4b50      	ldr	r3, [pc, #320]	; (40e828 <find_track_end+0x2d0>)
  40e6e6:	4798      	blx	r3
                    new_dsc[t->grow_item_cnt - 1].item = item;
  40e6e8:	6923      	ldr	r3, [r4, #16]
  40e6ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40e6ee:	9906      	ldr	r1, [sp, #24]
  40e6f0:	460a      	mov	r2, r1
  40e6f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40e6f6:	f843 9c14 	str.w	r9, [r3, #-20]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
  40e6fa:	6923      	ldr	r3, [r4, #16]
  40e6fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40e700:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40e704:	3b14      	subs	r3, #20
  40e706:	9309      	str	r3, [sp, #36]	; 0x24
  40e708:	78eb      	ldrb	r3, [r5, #3]
  40e70a:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
  40e70e:	bf14      	ite	ne
  40e710:	f241 0202 	movwne	r2, #4098	; 0x1002
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
  40e714:	f241 0205 	movweq	r2, #4101	; 0x1005
  40e718:	2100      	movs	r1, #0
  40e71a:	4648      	mov	r0, r9
  40e71c:	4b33      	ldr	r3, [pc, #204]	; (40e7ec <find_track_end+0x294>)
  40e71e:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40e720:	b200      	sxth	r0, r0
  40e722:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e724:	8098      	strh	r0, [r3, #4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
  40e726:	6923      	ldr	r3, [r4, #16]
  40e728:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40e72c:	9a06      	ldr	r2, [sp, #24]
  40e72e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40e732:	3b14      	subs	r3, #20
  40e734:	9309      	str	r3, [sp, #36]	; 0x24
  40e736:	78eb      	ldrb	r3, [r5, #3]
  40e738:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
  40e73c:	bf14      	ite	ne
  40e73e:	f241 0203 	movwne	r2, #4099	; 0x1003
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
  40e742:	f241 0206 	movweq	r2, #4102	; 0x1006
  40e746:	2100      	movs	r1, #0
  40e748:	4648      	mov	r0, r9
  40e74a:	4b28      	ldr	r3, [pc, #160]	; (40e7ec <find_track_end+0x294>)
  40e74c:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40e74e:	b200      	sxth	r0, r0
  40e750:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e752:	80d8      	strh	r0, [r3, #6]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
  40e754:	6923      	ldr	r3, [r4, #16]
  40e756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40e75a:	9806      	ldr	r0, [sp, #24]
  40e75c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  40e760:	fa5f f38a 	uxtb.w	r3, sl
  40e764:	f842 3c08 	str.w	r3, [r2, #-8]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
  40e768:	6923      	ldr	r3, [r4, #16]
  40e76a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40e76e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  40e772:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  40e776:	f36f 0200 	bfc	r2, #0, #1
  40e77a:	f803 2c04 	strb.w	r2, [r3, #-4]
                    t->grow_dsc = new_dsc;
  40e77e:	60e0      	str	r0, [r4, #12]
  40e780:	e75a      	b.n	40e638 <find_track_end+0xe0>
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
  40e782:	4648      	mov	r0, r9
  40e784:	9b05      	ldr	r3, [sp, #20]
  40e786:	4798      	blx	r3
  40e788:	4603      	mov	r3, r0
  40e78a:	e75d      	b.n	40e648 <find_track_end+0xf0>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
  40e78c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e790:	2b00      	cmp	r3, #0
  40e792:	dd02      	ble.n	40e79a <find_track_end+0x242>
  40e794:	eba3 030b 	sub.w	r3, r3, fp
  40e798:	80a3      	strh	r3, [r4, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
  40e79a:	6923      	ldr	r3, [r4, #16]
  40e79c:	b913      	cbnz	r3, 40e7a4 <find_track_end+0x24c>
  40e79e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e7a2:	9307      	str	r3, [sp, #28]
  40e7a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  40e7a8:	8063      	strh	r3, [r4, #2]
    if(item && item_id == item_start_id) {
  40e7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e7ac:	f1b9 0f00 	cmp.w	r9, #0
  40e7b0:	d017      	beq.n	40e7e2 <find_track_end+0x28a>
  40e7b2:	429e      	cmp	r6, r3
  40e7b4:	d115      	bne.n	40e7e2 <find_track_end+0x28a>
        item = cont->spec_attr->children[item_id];
  40e7b6:	9804      	ldr	r0, [sp, #16]
  40e7b8:	6882      	ldr	r2, [r0, #8]
  40e7ba:	6812      	ldr	r2, [r2, #0]
  40e7bc:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
        get_next_item(cont, f->rev, &item_id);
  40e7c0:	78e9      	ldrb	r1, [r5, #3]
  40e7c2:	aa0b      	add	r2, sp, #44	; 0x2c
  40e7c4:	f3c1 0180 	ubfx	r1, r1, #2, #1
  40e7c8:	4b18      	ldr	r3, [pc, #96]	; (40e82c <find_track_end+0x2d4>)
  40e7ca:	4798      	blx	r3
        if(item) {
  40e7cc:	b14e      	cbz	r6, 40e7e2 <find_track_end+0x28a>
            t->track_cross_size = get_cross_size(item);
  40e7ce:	4630      	mov	r0, r6
  40e7d0:	9b05      	ldr	r3, [sp, #20]
  40e7d2:	4798      	blx	r3
  40e7d4:	8020      	strh	r0, [r4, #0]
            t->track_main_size = get_main_size(item);
  40e7d6:	4630      	mov	r0, r6
  40e7d8:	9b08      	ldr	r3, [sp, #32]
  40e7da:	4798      	blx	r3
  40e7dc:	8060      	strh	r0, [r4, #2]
            t->item_cnt = 1;
  40e7de:	2301      	movs	r3, #1
  40e7e0:	60a3      	str	r3, [r4, #8]
}
  40e7e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e7e4:	b00d      	add	sp, #52	; 0x34
  40e7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e7ea:	bf00      	nop
  40e7ec:	00404f1d 	.word	0x00404f1d
  40e7f0:	004022df 	.word	0x004022df
  40e7f4:	004022d3 	.word	0x004022d3
  40e7f8:	00405df7 	.word	0x00405df7
  40e7fc:	004013f3 	.word	0x004013f3
  40e800:	0041c064 	.word	0x0041c064
  40e804:	0041cc74 	.word	0x0041cc74
  40e808:	0041c098 	.word	0x0041c098
  40e80c:	0041cc24 	.word	0x0041cc24
  40e810:	0041cc34 	.word	0x0041cc34
  40e814:	00410edd 	.word	0x00410edd
  40e818:	00018001 	.word	0x00018001
  40e81c:	20439e3a 	.word	0x20439e3a
  40e820:	004115a9 	.word	0x004115a9
  40e824:	00411161 	.word	0x00411161
  40e828:	00411105 	.word	0x00411105
  40e82c:	0040e523 	.word	0x0040e523
  40e830:	004013e5 	.word	0x004013e5

0040e834 <flex_update>:
{
  40e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e838:	b0a1      	sub	sp, #132	; 0x84
  40e83a:	4605      	mov	r5, r0
  40e83c:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
  40e83e:	4baf      	ldr	r3, [pc, #700]	; (40eafc <flex_update+0x2c8>)
  40e840:	881a      	ldrh	r2, [r3, #0]
  40e842:	2100      	movs	r1, #0
  40e844:	4cae      	ldr	r4, [pc, #696]	; (40eb00 <flex_update+0x2cc>)
  40e846:	47a0      	blx	r4
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
  40e848:	f080 0201 	eor.w	r2, r0, #1
  40e84c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40e850:	f362 0300 	bfi	r3, r2, #0, #1
    f.wrap = flow & _LV_FLEX_WRAP ? 1 : 0;
  40e854:	f3c0 0280 	ubfx	r2, r0, #2, #1
  40e858:	f362 0341 	bfi	r3, r2, #1, #1
    f.rev = flow & _LV_FLEX_REVERSE ? 1 : 0;
  40e85c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  40e860:	f360 0382 	bfi	r3, r0, #2, #1
  40e864:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
  40e868:	4ba6      	ldr	r3, [pc, #664]	; (40eb04 <flex_update+0x2d0>)
  40e86a:	881a      	ldrh	r2, [r3, #0]
  40e86c:	2100      	movs	r1, #0
  40e86e:	4628      	mov	r0, r5
  40e870:	47a0      	blx	r4
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
  40e872:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
  40e876:	4ba4      	ldr	r3, [pc, #656]	; (40eb08 <flex_update+0x2d4>)
  40e878:	881a      	ldrh	r2, [r3, #0]
  40e87a:	2100      	movs	r1, #0
  40e87c:	4628      	mov	r0, r5
  40e87e:	47a0      	blx	r4
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
  40e880:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
  40e884:	4ba1      	ldr	r3, [pc, #644]	; (40eb0c <flex_update+0x2d8>)
  40e886:	881a      	ldrh	r2, [r3, #0]
  40e888:	2100      	movs	r1, #0
  40e88a:	4628      	mov	r0, r5
  40e88c:	47a0      	blx	r4
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
  40e88e:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  40e892:	f241 426a 	movw	r2, #5226	; 0x146a
  40e896:	2100      	movs	r1, #0
  40e898:	4628      	mov	r0, r5
  40e89a:	47a0      	blx	r4
    return (lv_base_dir_t)v.num;
  40e89c:	b2c4      	uxtb	r4, r0
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
  40e89e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40e8a2:	f013 0f01 	tst.w	r3, #1
  40e8a6:	f040 80e9 	bne.w	40ea7c <flex_update+0x248>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
  40e8aa:	f641 0215 	movw	r2, #6165	; 0x1815
  40e8ae:	2100      	movs	r1, #0
  40e8b0:	4628      	mov	r0, r5
  40e8b2:	4b93      	ldr	r3, [pc, #588]	; (40eb00 <flex_update+0x2cc>)
  40e8b4:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40e8b6:	b203      	sxth	r3, r0
  40e8b8:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
  40e8ba:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40e8be:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
  40e8c2:	bf14      	ite	ne
  40e8c4:	f641 0215 	movwne	r2, #6165	; 0x1815
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
  40e8c8:	f641 0214 	movweq	r2, #6164	; 0x1814
  40e8cc:	2100      	movs	r1, #0
  40e8ce:	9802      	ldr	r0, [sp, #8]
  40e8d0:	4b8b      	ldr	r3, [pc, #556]	; (40eb00 <flex_update+0x2cc>)
  40e8d2:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40e8d4:	b203      	sxth	r3, r0
  40e8d6:	9304      	str	r3, [sp, #16]
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
  40e8d8:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40e8dc:	f013 0f01 	tst.w	r3, #1
  40e8e0:	9802      	ldr	r0, [sp, #8]
  40e8e2:	bf14      	ite	ne
  40e8e4:	4b8a      	ldrne	r3, [pc, #552]	; (40eb10 <flex_update+0x2dc>)
  40e8e6:	4b8b      	ldreq	r3, [pc, #556]	; (40eb14 <flex_update+0x2e0>)
  40e8e8:	4798      	blx	r3
  40e8ea:	900a      	str	r0, [sp, #40]	; 0x28
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  40e8ec:	f241 0232 	movw	r2, #4146	; 0x1032
  40e8f0:	2100      	movs	r1, #0
  40e8f2:	9d02      	ldr	r5, [sp, #8]
  40e8f4:	4628      	mov	r0, r5
  40e8f6:	4f82      	ldr	r7, [pc, #520]	; (40eb00 <flex_update+0x2cc>)
  40e8f8:	47b8      	blx	r7
  40e8fa:	4606      	mov	r6, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
  40e8fc:	4628      	mov	r0, r5
  40e8fe:	8aed      	ldrh	r5, [r5, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  40e900:	f641 0210 	movw	r2, #6160	; 0x1810
  40e904:	2100      	movs	r1, #0
  40e906:	4680      	mov	r8, r0
  40e908:	47b8      	blx	r7
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
  40e90a:	b2b6      	uxth	r6, r6
  40e90c:	4430      	add	r0, r6
  40e90e:	4405      	add	r5, r0
  40e910:	b2ad      	uxth	r5, r5
  40e912:	4640      	mov	r0, r8
  40e914:	4b80      	ldr	r3, [pc, #512]	; (40eb18 <flex_update+0x2e4>)
  40e916:	4798      	blx	r3
  40e918:	1a28      	subs	r0, r5, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
  40e91a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
  40e91e:	4640      	mov	r0, r8
  40e920:	f8b8 5014 	ldrh.w	r5, [r8, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  40e924:	f641 0212 	movw	r2, #6162	; 0x1812
  40e928:	2100      	movs	r1, #0
  40e92a:	47b8      	blx	r7
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
  40e92c:	4430      	add	r0, r6
  40e92e:	4405      	add	r5, r0
  40e930:	b2ad      	uxth	r5, r5
  40e932:	4640      	mov	r0, r8
  40e934:	4b79      	ldr	r3, [pc, #484]	; (40eb1c <flex_update+0x2e8>)
  40e936:	4798      	blx	r3
  40e938:	1a28      	subs	r0, r5, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
  40e93a:	f8ad 0078 	strh.w	r0, [sp, #120]	; 0x78
    lv_flex_align_t track_cross_place = f.track_place;
  40e93e:	f89d 607e 	ldrb.w	r6, [sp, #126]	; 0x7e
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
  40e942:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40e946:	f013 0f01 	tst.w	r3, #1
  40e94a:	bf0c      	ite	eq
  40e94c:	ab1e      	addeq	r3, sp, #120	; 0x78
  40e94e:	f10d 037a 	addne.w	r3, sp, #122	; 0x7a
  40e952:	930d      	str	r3, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  40e954:	f241 0201 	movw	r2, #4097	; 0x1001
  40e958:	2100      	movs	r1, #0
  40e95a:	9f02      	ldr	r7, [sp, #8]
  40e95c:	4638      	mov	r0, r7
  40e95e:	4d68      	ldr	r5, [pc, #416]	; (40eb00 <flex_update+0x2cc>)
  40e960:	47a8      	blx	r5
    return (lv_coord_t)v.num;
  40e962:	b203      	sxth	r3, r0
  40e964:	9310      	str	r3, [sp, #64]	; 0x40
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  40e966:	f241 0204 	movw	r2, #4100	; 0x1004
  40e96a:	2100      	movs	r1, #0
  40e96c:	4638      	mov	r0, r7
  40e96e:	47a8      	blx	r5
    return (lv_coord_t)v.num;
  40e970:	b200      	sxth	r0, r0
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
  40e972:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
  40e976:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40e97a:	4298      	cmp	r0, r3
  40e97c:	bf14      	ite	ne
  40e97e:	2300      	movne	r3, #0
  40e980:	2301      	moveq	r3, #1
  40e982:	4619      	mov	r1, r3
  40e984:	9311      	str	r3, [sp, #68]	; 0x44
  40e986:	f002 0301 	and.w	r3, r2, #1
  40e98a:	f012 0f01 	tst.w	r2, #1
  40e98e:	d005      	beq.n	40e99c <flex_update+0x168>
  40e990:	b121      	cbz	r1, 40e99c <flex_update+0x168>
  40e992:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
  40e996:	f011 0f02 	tst.w	r1, #2
  40e99a:	d07e      	beq.n	40ea9a <flex_update+0x266>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
  40e99c:	f242 71d1 	movw	r1, #10193	; 0x27d1
  40e9a0:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e9a2:	4288      	cmp	r0, r1
  40e9a4:	d101      	bne.n	40e9aa <flex_update+0x176>
  40e9a6:	2b00      	cmp	r3, #0
  40e9a8:	d071      	beq.n	40ea8e <flex_update+0x25a>
    if(rtl && !f.row) {
  40e9aa:	2c01      	cmp	r4, #1
  40e9ac:	bf14      	ite	ne
  40e9ae:	2100      	movne	r1, #0
  40e9b0:	2101      	moveq	r1, #1
  40e9b2:	910b      	str	r1, [sp, #44]	; 0x2c
  40e9b4:	2b00      	cmp	r3, #0
  40e9b6:	d17a      	bne.n	40eaae <flex_update+0x27a>
  40e9b8:	2900      	cmp	r1, #0
  40e9ba:	d078      	beq.n	40eaae <flex_update+0x27a>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
  40e9bc:	2e00      	cmp	r6, #0
  40e9be:	f000 8348 	beq.w	40f052 <flex_update+0x81e>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
  40e9c2:	2e01      	cmp	r6, #1
  40e9c4:	f000 8349 	beq.w	40f05a <flex_update+0x826>
    lv_coord_t gap = 0;
  40e9c8:	2300      	movs	r3, #0
  40e9ca:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
  40e9ce:	f012 0f04 	tst.w	r2, #4
  40e9d2:	d073      	beq.n	40eabc <flex_update+0x288>
  40e9d4:	9b02      	ldr	r3, [sp, #8]
  40e9d6:	689b      	ldr	r3, [r3, #8]
  40e9d8:	685b      	ldr	r3, [r3, #4]
  40e9da:	3b01      	subs	r3, #1
  40e9dc:	461a      	mov	r2, r3
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
  40e9de:	9802      	ldr	r0, [sp, #8]
  40e9e0:	6881      	ldr	r1, [r0, #8]
  40e9e2:	6849      	ldr	r1, [r1, #4]
  40e9e4:	428b      	cmp	r3, r1
  40e9e6:	da6b      	bge.n	40eac0 <flex_update+0x28c>
  40e9e8:	2b00      	cmp	r3, #0
  40e9ea:	db69      	blt.n	40eac0 <flex_update+0x28c>
  40e9ec:	2400      	movs	r4, #0
  40e9ee:	4625      	mov	r5, r4
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
  40e9f0:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
  40e9f4:	4f4a      	ldr	r7, [pc, #296]	; (40eb20 <flex_update+0x2ec>)
  40e9f6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  40e9fa:	46b3      	mov	fp, r6
  40e9fc:	9e04      	ldr	r6, [sp, #16]
  40e9fe:	4681      	mov	r9, r0
            t.grow_dsc_calc = 0;
  40ea00:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40ea04:	f36f 0300 	bfc	r3, #0, #1
  40ea08:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
  40ea0c:	f8cd 8004 	str.w	r8, [sp, #4]
  40ea10:	9600      	str	r6, [sp, #0]
  40ea12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ea14:	a91f      	add	r1, sp, #124	; 0x7c
  40ea16:	4648      	mov	r0, r9
  40ea18:	47b8      	blx	r7
  40ea1a:	4602      	mov	r2, r0
  40ea1c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
  40ea20:	442b      	add	r3, r5
  40ea22:	b29b      	uxth	r3, r3
            total_track_cross_size += t.track_cross_size + track_gap;
  40ea24:	eb03 050a 	add.w	r5, r3, sl
  40ea28:	b22d      	sxth	r5, r5
            track_cnt++;
  40ea2a:	3401      	adds	r4, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
  40ea2c:	f8d9 1008 	ldr.w	r1, [r9, #8]
  40ea30:	6849      	ldr	r1, [r1, #4]
  40ea32:	2800      	cmp	r0, #0
  40ea34:	bfa8      	it	ge
  40ea36:	4281      	cmpge	r1, r0
  40ea38:	dce2      	bgt.n	40ea00 <flex_update+0x1cc>
  40ea3a:	465e      	mov	r6, fp
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
  40ea3c:	b104      	cbz	r4, 40ea40 <flex_update+0x20c>
  40ea3e:	b21d      	sxth	r5, r3
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
  40ea40:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40ea44:	f013 0f01 	tst.w	r3, #1
  40ea48:	9802      	ldr	r0, [sp, #8]
  40ea4a:	bf14      	ite	ne
  40ea4c:	4b31      	ldrne	r3, [pc, #196]	; (40eb14 <flex_update+0x2e0>)
  40ea4e:	4b30      	ldreq	r3, [pc, #192]	; (40eb10 <flex_update+0x2dc>)
  40ea50:	4798      	blx	r3
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
  40ea52:	f10d 0376 	add.w	r3, sp, #118	; 0x76
  40ea56:	9301      	str	r3, [sp, #4]
  40ea58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ea5a:	9300      	str	r3, [sp, #0]
  40ea5c:	b223      	sxth	r3, r4
  40ea5e:	462a      	mov	r2, r5
  40ea60:	4601      	mov	r1, r0
  40ea62:	4630      	mov	r0, r6
  40ea64:	4c2f      	ldr	r4, [pc, #188]	; (40eb24 <flex_update+0x2f0>)
  40ea66:	47a0      	blx	r4
    track_first_item =  f.rev ? cont->spec_attr->child_cnt - 1 : 0;
  40ea68:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40ea6c:	f013 0f04 	tst.w	r3, #4
  40ea70:	d029      	beq.n	40eac6 <flex_update+0x292>
  40ea72:	9a02      	ldr	r2, [sp, #8]
  40ea74:	6892      	ldr	r2, [r2, #8]
  40ea76:	6854      	ldr	r4, [r2, #4]
  40ea78:	3c01      	subs	r4, #1
  40ea7a:	e025      	b.n	40eac8 <flex_update+0x294>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
  40ea7c:	f641 0214 	movw	r2, #6164	; 0x1814
  40ea80:	2100      	movs	r1, #0
  40ea82:	9802      	ldr	r0, [sp, #8]
  40ea84:	4b1e      	ldr	r3, [pc, #120]	; (40eb00 <flex_update+0x2cc>)
  40ea86:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40ea88:	b203      	sxth	r3, r0
  40ea8a:	930e      	str	r3, [sp, #56]	; 0x38
  40ea8c:	e715      	b.n	40e8ba <flex_update+0x86>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
  40ea8e:	9902      	ldr	r1, [sp, #8]
  40ea90:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  40ea94:	f011 0f04 	tst.w	r1, #4
  40ea98:	d187      	bne.n	40e9aa <flex_update+0x176>
    if(rtl && !f.row) {
  40ea9a:	2c01      	cmp	r4, #1
  40ea9c:	bf14      	ite	ne
  40ea9e:	2100      	movne	r1, #0
  40eaa0:	2101      	moveq	r1, #1
  40eaa2:	910b      	str	r1, [sp, #44]	; 0x2c
  40eaa4:	b913      	cbnz	r3, 40eaac <flex_update+0x278>
  40eaa6:	2900      	cmp	r1, #0
  40eaa8:	f040 82d5 	bne.w	40f056 <flex_update+0x822>
  40eaac:	2600      	movs	r6, #0
    lv_coord_t gap = 0;
  40eaae:	2300      	movs	r3, #0
  40eab0:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    if(track_cross_place != LV_FLEX_ALIGN_START) {
  40eab4:	2e00      	cmp	r6, #0
  40eab6:	d18a      	bne.n	40e9ce <flex_update+0x19a>
    lv_coord_t total_track_cross_size = 0;
  40eab8:	2500      	movs	r5, #0
  40eaba:	e7d5      	b.n	40ea68 <flex_update+0x234>
  40eabc:	2300      	movs	r3, #0
  40eabe:	e78d      	b.n	40e9dc <flex_update+0x1a8>
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
  40eac0:	2400      	movs	r4, #0
  40eac2:	4625      	mov	r5, r4
  40eac4:	e7bc      	b.n	40ea40 <flex_update+0x20c>
  40eac6:	2400      	movs	r4, #0
    if(rtl && !f.row) {
  40eac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40eaca:	b972      	cbnz	r2, 40eaea <flex_update+0x2b6>
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
  40eacc:	9b02      	ldr	r3, [sp, #8]
  40eace:	689b      	ldr	r3, [r3, #8]
  40ead0:	685b      	ldr	r3, [r3, #4]
  40ead2:	429c      	cmp	r4, r3
  40ead4:	bfac      	ite	ge
  40ead6:	2300      	movge	r3, #0
  40ead8:	2301      	movlt	r3, #1
  40eada:	2c00      	cmp	r4, #0
  40eadc:	bfb8      	it	lt
  40eade:	2300      	movlt	r3, #0
  40eae0:	2b00      	cmp	r3, #0
  40eae2:	f000 82a3 	beq.w	40f02c <flex_update+0x7f8>
                    grow_reiterate = true;
  40eae6:	930f      	str	r3, [sp, #60]	; 0x3c
  40eae8:	e256      	b.n	40ef98 <flex_update+0x764>
    if(rtl && !f.row) {
  40eaea:	f013 0f01 	tst.w	r3, #1
  40eaee:	d1ed      	bne.n	40eacc <flex_update+0x298>
        *cross_pos += total_track_cross_size;
  40eaf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40eaf2:	8813      	ldrh	r3, [r2, #0]
  40eaf4:	441d      	add	r5, r3
  40eaf6:	8015      	strh	r5, [r2, #0]
  40eaf8:	e7e8      	b.n	40eacc <flex_update+0x298>
  40eafa:	bf00      	nop
  40eafc:	20439e38 	.word	0x20439e38
  40eb00:	00404f1d 	.word	0x00404f1d
  40eb04:	20439e3c 	.word	0x20439e3c
  40eb08:	20439e34 	.word	0x20439e34
  40eb0c:	20439e36 	.word	0x20439e36
  40eb10:	004022ed 	.word	0x004022ed
  40eb14:	0040232d 	.word	0x0040232d
  40eb18:	00403a0d 	.word	0x00403a0d
  40eb1c:	004039d9 	.word	0x004039d9
  40eb20:	0040e559 	.word	0x0040e559
  40eb24:	0040e491 	.word	0x0040e491
        if(rtl && !f.row) {
  40eb28:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40eb2c:	f013 0f01 	tst.w	r3, #1
  40eb30:	f040 82ba 	bne.w	40f0a8 <flex_update+0x874>
            *cross_pos -= t.track_cross_size;
  40eb34:	990d      	ldr	r1, [sp, #52]	; 0x34
  40eb36:	880b      	ldrh	r3, [r1, #0]
  40eb38:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
  40eb3c:	1a9b      	subs	r3, r3, r2
  40eb3e:	800b      	strh	r3, [r1, #0]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
  40eb40:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
  40eb44:	9305      	str	r3, [sp, #20]
  40eb46:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
  40eb4a:	9306      	str	r3, [sp, #24]
  40eb4c:	9414      	str	r4, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
  40eb4e:	4b71      	ldr	r3, [pc, #452]	; (40ed14 <flex_update+0x4e0>)
  40eb50:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
  40eb52:	4b71      	ldr	r3, [pc, #452]	; (40ed18 <flex_update+0x4e4>)
  40eb54:	9303      	str	r3, [sp, #12]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
  40eb56:	4b71      	ldr	r3, [pc, #452]	; (40ed1c <flex_update+0x4e8>)
  40eb58:	9307      	str	r3, [sp, #28]
  40eb5a:	e24e      	b.n	40effa <flex_update+0x7c6>
                grow_max_size -= t->grow_dsc[i].final_size;
  40eb5c:	8918      	ldrh	r0, [r3, #8]
  40eb5e:	1a09      	subs	r1, r1, r0
  40eb60:	b209      	sxth	r1, r1
  40eb62:	3314      	adds	r3, #20
        for(i = 0; i < t->grow_item_cnt; i++) {
  40eb64:	429c      	cmp	r4, r3
  40eb66:	d007      	beq.n	40eb78 <flex_update+0x344>
            if(t->grow_dsc[i].clamped == 0) {
  40eb68:	7c18      	ldrb	r0, [r3, #16]
  40eb6a:	f010 0f01 	tst.w	r0, #1
  40eb6e:	d1f5      	bne.n	40eb5c <flex_update+0x328>
                grow_value_sum += t->grow_dsc[i].grow_value;
  40eb70:	68d8      	ldr	r0, [r3, #12]
  40eb72:	4402      	add	r2, r0
  40eb74:	b212      	sxth	r2, r2
  40eb76:	e7f4      	b.n	40eb62 <flex_update+0x32e>
        for(i = 0; i < t->grow_item_cnt; i++) {
  40eb78:	2400      	movs	r4, #0
  40eb7a:	4626      	mov	r6, r4
  40eb7c:	4625      	mov	r5, r4
  40eb7e:	e00e      	b.n	40eb9e <flex_update+0x36a>
                t->grow_dsc[i].final_size = size_clamp;
  40eb80:	f8a3 c008 	strh.w	ip, [r3, #8]
                grow_value_sum -= t->grow_dsc[i].grow_value;
  40eb84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40eb86:	4423      	add	r3, r4
  40eb88:	68d8      	ldr	r0, [r3, #12]
  40eb8a:	1a12      	subs	r2, r2, r0
  40eb8c:	b212      	sxth	r2, r2
                grow_max_size  -= t->grow_dsc[i].final_size;
  40eb8e:	891b      	ldrh	r3, [r3, #8]
  40eb90:	1ac9      	subs	r1, r1, r3
  40eb92:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
  40eb94:	3501      	adds	r5, #1
  40eb96:	3414      	adds	r4, #20
  40eb98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40eb9a:	429d      	cmp	r5, r3
  40eb9c:	d21d      	bcs.n	40ebda <flex_update+0x3a6>
            if(t->grow_dsc[i].clamped == 0) {
  40eb9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40eba0:	4423      	add	r3, r4
  40eba2:	7c18      	ldrb	r0, [r3, #16]
  40eba4:	f010 0f01 	tst.w	r0, #1
  40eba8:	d1f4      	bne.n	40eb94 <flex_update+0x360>
                grow_unit = grow_max_size / grow_value_sum;
  40ebaa:	fb91 fcf2 	sdiv	ip, r1, r2
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
  40ebae:	68d8      	ldr	r0, [r3, #12]
  40ebb0:	fb1c f000 	smulbb	r0, ip, r0
  40ebb4:	b200      	sxth	r0, r0
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
  40ebb6:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
  40ebba:	4584      	cmp	ip, r0
  40ebbc:	bfa8      	it	ge
  40ebbe:	4684      	movge	ip, r0
  40ebc0:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
  40ebc4:	45cc      	cmp	ip, r9
  40ebc6:	bfb8      	it	lt
  40ebc8:	46cc      	movlt	ip, r9
                if(size_clamp != size) {
  40ebca:	4560      	cmp	r0, ip
  40ebcc:	d0d8      	beq.n	40eb80 <flex_update+0x34c>
                    t->grow_dsc[i].clamped = 1;
  40ebce:	7c18      	ldrb	r0, [r3, #16]
  40ebd0:	f040 0001 	orr.w	r0, r0, #1
  40ebd4:	7418      	strb	r0, [r3, #16]
                    grow_reiterate = true;
  40ebd6:	4676      	mov	r6, lr
  40ebd8:	e7d2      	b.n	40eb80 <flex_update+0x34c>
    while(grow_reiterate) {
  40ebda:	b14e      	cbz	r6, 40ebf0 <flex_update+0x3bc>
        for(i = 0; i < t->grow_item_cnt; i++) {
  40ebdc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40ebde:	b13c      	cbz	r4, 40ebf0 <flex_update+0x3bc>
            if(t->grow_dsc[i].clamped == 0) {
  40ebe0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40ebe2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40ebe6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  40ebea:	4639      	mov	r1, r7
  40ebec:	4642      	mov	r2, r8
  40ebee:	e7bb      	b.n	40eb68 <flex_update+0x334>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  40ebf0:	f241 426a 	movw	r2, #5226	; 0x146a
  40ebf4:	2100      	movs	r1, #0
  40ebf6:	9802      	ldr	r0, [sp, #8]
  40ebf8:	4b49      	ldr	r3, [pc, #292]	; (40ed20 <flex_update+0x4ec>)
  40ebfa:	4798      	blx	r3
    return (lv_base_dir_t)v.num;
  40ebfc:	b2c3      	uxtb	r3, r0
  40ebfe:	461d      	mov	r5, r3
  40ec00:	9308      	str	r3, [sp, #32]
    lv_coord_t main_pos = 0;
  40ec02:	2300      	movs	r3, #0
  40ec04:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    lv_coord_t place_gap = 0;
  40ec08:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
  40ec0c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
  40ec10:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
  40ec14:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
  40ec18:	f10d 014e 	add.w	r1, sp, #78	; 0x4e
  40ec1c:	9101      	str	r1, [sp, #4]
  40ec1e:	a913      	add	r1, sp, #76	; 0x4c
  40ec20:	9100      	str	r1, [sp, #0]
  40ec22:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ec24:	4c3f      	ldr	r4, [pc, #252]	; (40ed24 <flex_update+0x4f0>)
  40ec26:	47a0      	blx	r4
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
  40ec28:	462b      	mov	r3, r5
  40ec2a:	2d01      	cmp	r5, #1
  40ec2c:	bf14      	ite	ne
  40ec2e:	2300      	movne	r3, #0
  40ec30:	2301      	moveq	r3, #1
  40ec32:	461a      	mov	r2, r3
  40ec34:	9309      	str	r3, [sp, #36]	; 0x24
  40ec36:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40ec3a:	f013 0f01 	tst.w	r3, #1
  40ec3e:	d000      	beq.n	40ec42 <flex_update+0x40e>
  40ec40:	b92a      	cbnz	r2, 40ec4e <flex_update+0x41a>
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
  40ec42:	9914      	ldr	r1, [sp, #80]	; 0x50
  40ec44:	9802      	ldr	r0, [sp, #8]
  40ec46:	4b38      	ldr	r3, [pc, #224]	; (40ed28 <flex_update+0x4f4>)
  40ec48:	4798      	blx	r3
  40ec4a:	4680      	mov	r8, r0
  40ec4c:	e0ff      	b.n	40ee4e <flex_update+0x61a>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
  40ec4e:	9802      	ldr	r0, [sp, #8]
  40ec50:	4b36      	ldr	r3, [pc, #216]	; (40ed2c <flex_update+0x4f8>)
  40ec52:	4798      	blx	r3
  40ec54:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40ec58:	4403      	add	r3, r0
  40ec5a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  40ec5e:	e7f0      	b.n	40ec42 <flex_update+0x40e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
  40ec60:	4b33      	ldr	r3, [pc, #204]	; (40ed30 <flex_update+0x4fc>)
  40ec62:	881a      	ldrh	r2, [r3, #0]
  40ec64:	2100      	movs	r1, #0
  40ec66:	4640      	mov	r0, r8
  40ec68:	4b2d      	ldr	r3, [pc, #180]	; (40ed20 <flex_update+0x4ec>)
  40ec6a:	4798      	blx	r3
    return (uint8_t)v.num;
  40ec6c:	b2c0      	uxtb	r0, r0
        if(grow_size) {
  40ec6e:	2800      	cmp	r0, #0
  40ec70:	d066      	beq.n	40ed40 <flex_update+0x50c>
            for(i = 0; i < t->grow_item_cnt; i++) {
  40ec72:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40ec74:	2c00      	cmp	r4, #0
  40ec76:	d04b      	beq.n	40ed10 <flex_update+0x4dc>
                if(t->grow_dsc[i].item == item) {
  40ec78:	981a      	ldr	r0, [sp, #104]	; 0x68
  40ec7a:	6803      	ldr	r3, [r0, #0]
  40ec7c:	4598      	cmp	r8, r3
  40ec7e:	d00a      	beq.n	40ec96 <flex_update+0x462>
  40ec80:	f100 0214 	add.w	r2, r0, #20
  40ec84:	2300      	movs	r3, #0
            for(i = 0; i < t->grow_item_cnt; i++) {
  40ec86:	3301      	adds	r3, #1
  40ec88:	42a3      	cmp	r3, r4
  40ec8a:	d03f      	beq.n	40ed0c <flex_update+0x4d8>
                if(t->grow_dsc[i].item == item) {
  40ec8c:	4610      	mov	r0, r2
  40ec8e:	f852 1b14 	ldr.w	r1, [r2], #20
  40ec92:	4588      	cmp	r8, r1
  40ec94:	d1f7      	bne.n	40ec86 <flex_update+0x452>
                    s = t->grow_dsc[i].final_size;
  40ec96:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
            if(f->row) item->w_layout = 1;
  40ec9a:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40ec9e:	f013 0f01 	tst.w	r3, #1
  40eca2:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
  40eca6:	bf14      	ite	ne
  40eca8:	f043 0304 	orrne.w	r3, r3, #4
            else item->h_layout = 1;
  40ecac:	f043 0302 	orreq.w	r3, r3, #2
  40ecb0:	f888 3023 	strb.w	r3, [r8, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
  40ecb4:	f108 0414 	add.w	r4, r8, #20
  40ecb8:	4620      	mov	r0, r4
  40ecba:	9b03      	ldr	r3, [sp, #12]
  40ecbc:	4798      	blx	r3
  40ecbe:	42a8      	cmp	r0, r5
  40ecc0:	d046      	beq.n	40ed50 <flex_update+0x51c>
                lv_obj_invalidate(item);
  40ecc2:	4640      	mov	r0, r8
  40ecc4:	4e1b      	ldr	r6, [pc, #108]	; (40ed34 <flex_update+0x500>)
  40ecc6:	47b0      	blx	r6
    dest->x1 = src->x1;
  40ecc8:	f8b8 3014 	ldrh.w	r3, [r8, #20]
  40eccc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    dest->y1 = src->y1;
  40ecd0:	f8b8 3016 	ldrh.w	r3, [r8, #22]
  40ecd4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    dest->x2 = src->x2;
  40ecd8:	f8b8 3018 	ldrh.w	r3, [r8, #24]
  40ecdc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    dest->y2 = src->y2;
  40ece0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
  40ece4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
                area_set_main_size(&item->coords, s);
  40ece8:	4629      	mov	r1, r5
  40ecea:	4620      	mov	r0, r4
  40ecec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ecee:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
  40ecf0:	aa15      	add	r2, sp, #84	; 0x54
  40ecf2:	2127      	movs	r1, #39	; 0x27
  40ecf4:	4640      	mov	r0, r8
  40ecf6:	4c10      	ldr	r4, [pc, #64]	; (40ed38 <flex_update+0x504>)
  40ecf8:	47a0      	blx	r4
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
  40ecfa:	4640      	mov	r0, r8
  40ecfc:	4b0f      	ldr	r3, [pc, #60]	; (40ed3c <flex_update+0x508>)
  40ecfe:	4798      	blx	r3
  40ed00:	4642      	mov	r2, r8
  40ed02:	2122      	movs	r1, #34	; 0x22
  40ed04:	47a0      	blx	r4
                lv_obj_invalidate(item);
  40ed06:	4640      	mov	r0, r8
  40ed08:	47b0      	blx	r6
  40ed0a:	e021      	b.n	40ed50 <flex_update+0x51c>
            lv_coord_t s = 0;
  40ed0c:	2500      	movs	r5, #0
  40ed0e:	e7c4      	b.n	40ec9a <flex_update+0x466>
  40ed10:	2500      	movs	r5, #0
  40ed12:	e7c2      	b.n	40ec9a <flex_update+0x466>
  40ed14:	0041076b 	.word	0x0041076b
  40ed18:	0040e485 	.word	0x0040e485
  40ed1c:	0040e479 	.word	0x0040e479
  40ed20:	00404f1d 	.word	0x00404f1d
  40ed24:	0040e491 	.word	0x0040e491
  40ed28:	00405df7 	.word	0x00405df7
  40ed2c:	004022ed 	.word	0x004022ed
  40ed30:	20439e3a 	.word	0x20439e3a
  40ed34:	0040262d 	.word	0x0040262d
  40ed38:	00400491 	.word	0x00400491
  40ed3c:	00405ded 	.word	0x00405ded
            item->w_layout = 0;
  40ed40:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
            item->h_layout = 0;
  40ed44:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  40ed48:	f36f 0341 	bfc	r3, #1, #1
  40ed4c:	f888 3023 	strb.w	r3, [r8, #35]	; 0x23
        switch(f->cross_place) {
  40ed50:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
  40ed54:	2b01      	cmp	r3, #1
  40ed56:	f000 8093 	beq.w	40ee80 <flex_update+0x64c>
  40ed5a:	2b02      	cmp	r3, #2
  40ed5c:	f040 8099 	bne.w	40ee92 <flex_update+0x65e>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
  40ed60:	f9bd 405c 	ldrsh.w	r4, [sp, #92]	; 0x5c
  40ed64:	3401      	adds	r4, #1
  40ed66:	f024 0401 	bic.w	r4, r4, #1
  40ed6a:	f108 0014 	add.w	r0, r8, #20
  40ed6e:	9b07      	ldr	r3, [sp, #28]
  40ed70:	4798      	blx	r3
  40ed72:	1a20      	subs	r0, r4, r0
  40ed74:	bf48      	it	mi
  40ed76:	3001      	addmi	r0, #1
  40ed78:	f340 064f 	sbfx	r6, r0, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
  40ed7c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40ed80:	f013 0f01 	tst.w	r3, #1
  40ed84:	d003      	beq.n	40ed8e <flex_update+0x55a>
  40ed86:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ed88:	2b00      	cmp	r3, #0
  40ed8a:	f040 8084 	bne.w	40ee96 <flex_update+0x662>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
  40ed8e:	f243 020c 	movw	r2, #12300	; 0x300c
  40ed92:	2100      	movs	r1, #0
  40ed94:	4640      	mov	r0, r8
  40ed96:	4db3      	ldr	r5, [pc, #716]	; (40f064 <flex_update+0x830>)
  40ed98:	47a8      	blx	r5
  40ed9a:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
  40ed9c:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
  40ed9e:	f243 020d 	movw	r2, #12301	; 0x300d
  40eda2:	2100      	movs	r1, #0
  40eda4:	4640      	mov	r0, r8
  40eda6:	47a8      	blx	r5
  40eda8:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
  40edaa:	b207      	sxth	r7, r0
        lv_coord_t w = lv_obj_get_width(item);
  40edac:	4640      	mov	r0, r8
  40edae:	4bae      	ldr	r3, [pc, #696]	; (40f068 <flex_update+0x834>)
  40edb0:	4798      	blx	r3
  40edb2:	4681      	mov	r9, r0
        lv_coord_t h = lv_obj_get_height(item);
  40edb4:	4640      	mov	r0, r8
  40edb6:	4bad      	ldr	r3, [pc, #692]	; (40f06c <flex_update+0x838>)
  40edb8:	4798      	blx	r3
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
  40edba:	f40a 43c0 	and.w	r3, sl, #24576	; 0x6000
  40edbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  40edc2:	d072      	beq.n	40eeaa <flex_update+0x676>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
  40edc4:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
  40edc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  40edcc:	f000 8082 	beq.w	40eed4 <flex_update+0x6a0>
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
  40edd0:	f8b8 3014 	ldrh.w	r3, [r8, #20]
  40edd4:	9a05      	ldr	r2, [sp, #20]
  40edd6:	1ad3      	subs	r3, r2, r3
  40edd8:	4423      	add	r3, r4
  40edda:	b29b      	uxth	r3, r3
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
  40eddc:	f8b8 4016 	ldrh.w	r4, [r8, #22]
  40ede0:	9a06      	ldr	r2, [sp, #24]
  40ede2:	1b14      	subs	r4, r2, r4
  40ede4:	443c      	add	r4, r7
  40ede6:	b2a4      	uxth	r4, r4
        diff_x += f->row ? main_pos : cross_pos;
  40ede8:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
  40edec:	f012 0f01 	tst.w	r2, #1
  40edf0:	f000 8085 	beq.w	40eefe <flex_update+0x6ca>
  40edf4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
  40edf8:	442b      	add	r3, r5
  40edfa:	b29d      	uxth	r5, r3
  40edfc:	b22f      	sxth	r7, r5
        diff_y += f->row ? cross_pos : main_pos;
  40edfe:	b2b6      	uxth	r6, r6
  40ee00:	4434      	add	r4, r6
  40ee02:	b2a4      	uxth	r4, r4
  40ee04:	b226      	sxth	r6, r4
        if(diff_x || diff_y) {
  40ee06:	2f00      	cmp	r7, #0
  40ee08:	d17f      	bne.n	40ef0a <flex_update+0x6d6>
  40ee0a:	2e00      	cmp	r6, #0
  40ee0c:	d17d      	bne.n	40ef0a <flex_update+0x6d6>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
  40ee0e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40ee12:	f013 0f01 	tst.w	r3, #1
  40ee16:	d003      	beq.n	40ee20 <flex_update+0x5ec>
  40ee18:	9b08      	ldr	r3, [sp, #32]
  40ee1a:	2b01      	cmp	r3, #1
  40ee1c:	f000 8096 	beq.w	40ef4c <flex_update+0x718>
  40ee20:	f108 0014 	add.w	r0, r8, #20
  40ee24:	9b03      	ldr	r3, [sp, #12]
  40ee26:	4798      	blx	r3
  40ee28:	9b04      	ldr	r3, [sp, #16]
  40ee2a:	18c3      	adds	r3, r0, r3
  40ee2c:	f9bd 004e 	ldrsh.w	r0, [sp, #78]	; 0x4e
  40ee30:	4403      	add	r3, r0
  40ee32:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  40ee36:	4413      	add	r3, r2
  40ee38:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        item = get_next_item(cont, f->rev, &item_first_id);
  40ee3c:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
  40ee40:	aa14      	add	r2, sp, #80	; 0x50
  40ee42:	f3c1 0180 	ubfx	r1, r1, #2, #1
  40ee46:	9802      	ldr	r0, [sp, #8]
  40ee48:	4b89      	ldr	r3, [pc, #548]	; (40f070 <flex_update+0x83c>)
  40ee4a:	4798      	blx	r3
  40ee4c:	4680      	mov	r8, r0
    while(item && item_first_id != item_last_id) {
  40ee4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ee50:	455b      	cmp	r3, fp
  40ee52:	f000 8085 	beq.w	40ef60 <flex_update+0x72c>
  40ee56:	f1b8 0f00 	cmp.w	r8, #0
  40ee5a:	f000 8081 	beq.w	40ef60 <flex_update+0x72c>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
  40ee5e:	4985      	ldr	r1, [pc, #532]	; (40f074 <flex_update+0x840>)
  40ee60:	4640      	mov	r0, r8
  40ee62:	4b85      	ldr	r3, [pc, #532]	; (40f078 <flex_update+0x844>)
  40ee64:	4798      	blx	r3
  40ee66:	2800      	cmp	r0, #0
  40ee68:	f43f aefa 	beq.w	40ec60 <flex_update+0x42c>
            item = get_next_item(cont, f->rev, &item_first_id);
  40ee6c:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
  40ee70:	aa14      	add	r2, sp, #80	; 0x50
  40ee72:	f3c1 0180 	ubfx	r1, r1, #2, #1
  40ee76:	9802      	ldr	r0, [sp, #8]
  40ee78:	4b7d      	ldr	r3, [pc, #500]	; (40f070 <flex_update+0x83c>)
  40ee7a:	4798      	blx	r3
  40ee7c:	4680      	mov	r8, r0
  40ee7e:	e7e6      	b.n	40ee4e <flex_update+0x61a>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
  40ee80:	f8bd 405c 	ldrh.w	r4, [sp, #92]	; 0x5c
  40ee84:	f108 0014 	add.w	r0, r8, #20
  40ee88:	9b07      	ldr	r3, [sp, #28]
  40ee8a:	4798      	blx	r3
  40ee8c:	1a20      	subs	r0, r4, r0
  40ee8e:	b206      	sxth	r6, r0
  40ee90:	e774      	b.n	40ed7c <flex_update+0x548>
        lv_coord_t cross_pos = 0;
  40ee92:	2600      	movs	r6, #0
  40ee94:	e772      	b.n	40ed7c <flex_update+0x548>
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
  40ee96:	f108 0014 	add.w	r0, r8, #20
  40ee9a:	9b03      	ldr	r3, [sp, #12]
  40ee9c:	4798      	blx	r3
  40ee9e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40eea2:	1a1b      	subs	r3, r3, r0
  40eea4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  40eea8:	e771      	b.n	40ed8e <flex_update+0x55a>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
  40eeaa:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
  40eeae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40eeb2:	dc87      	bgt.n	40edc4 <flex_update+0x590>
  40eeb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40eeb8:	bfc8      	it	gt
  40eeba:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  40eebe:	fb03 f909 	mul.w	r9, r3, r9
  40eec2:	4b6e      	ldr	r3, [pc, #440]	; (40f07c <flex_update+0x848>)
  40eec4:	fb83 2309 	smull	r2, r3, r3, r9
  40eec8:	ea4f 79e9 	mov.w	r9, r9, asr #31
  40eecc:	ebc9 1363 	rsb	r3, r9, r3, asr #5
  40eed0:	b21c      	sxth	r4, r3
  40eed2:	e777      	b.n	40edc4 <flex_update+0x590>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
  40eed4:	f427 43c0 	bic.w	r3, r7, #24576	; 0x6000
  40eed8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40eedc:	f73f af78 	bgt.w	40edd0 <flex_update+0x59c>
  40eee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40eee4:	bfc8      	it	gt
  40eee6:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  40eeea:	fb03 f300 	mul.w	r3, r3, r0
  40eeee:	4a63      	ldr	r2, [pc, #396]	; (40f07c <flex_update+0x848>)
  40eef0:	fb82 1203 	smull	r1, r2, r2, r3
  40eef4:	17df      	asrs	r7, r3, #31
  40eef6:	ebc7 1762 	rsb	r7, r7, r2, asr #5
  40eefa:	b23f      	sxth	r7, r7
  40eefc:	e768      	b.n	40edd0 <flex_update+0x59c>
        diff_x += f->row ? main_pos : cross_pos;
  40eefe:	4433      	add	r3, r6
  40ef00:	b29d      	uxth	r5, r3
  40ef02:	b22f      	sxth	r7, r5
        diff_y += f->row ? cross_pos : main_pos;
  40ef04:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
  40ef08:	e77a      	b.n	40ee00 <flex_update+0x5cc>
            lv_obj_invalidate(item);
  40ef0a:	4640      	mov	r0, r8
  40ef0c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 40f0a4 <flex_update+0x870>
  40ef10:	47c8      	blx	r9
            item->coords.x1 += diff_x;
  40ef12:	f8b8 3014 	ldrh.w	r3, [r8, #20]
  40ef16:	442b      	add	r3, r5
  40ef18:	f8a8 3014 	strh.w	r3, [r8, #20]
            item->coords.x2 += diff_x;
  40ef1c:	f8b8 3018 	ldrh.w	r3, [r8, #24]
  40ef20:	441d      	add	r5, r3
  40ef22:	f8a8 5018 	strh.w	r5, [r8, #24]
            item->coords.y1 += diff_y;
  40ef26:	f8b8 3016 	ldrh.w	r3, [r8, #22]
  40ef2a:	4423      	add	r3, r4
  40ef2c:	f8a8 3016 	strh.w	r3, [r8, #22]
            item->coords.y2 += diff_y;
  40ef30:	f8b8 301a 	ldrh.w	r3, [r8, #26]
  40ef34:	441c      	add	r4, r3
  40ef36:	f8a8 401a 	strh.w	r4, [r8, #26]
            lv_obj_invalidate(item);
  40ef3a:	4640      	mov	r0, r8
  40ef3c:	47c8      	blx	r9
            lv_obj_move_children_by(item, diff_x, diff_y, true);
  40ef3e:	2301      	movs	r3, #1
  40ef40:	4632      	mov	r2, r6
  40ef42:	4639      	mov	r1, r7
  40ef44:	4640      	mov	r0, r8
  40ef46:	4c4e      	ldr	r4, [pc, #312]	; (40f080 <flex_update+0x84c>)
  40ef48:	47a0      	blx	r4
  40ef4a:	e760      	b.n	40ee0e <flex_update+0x5da>
        else main_pos -= item_gap + place_gap;
  40ef4c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40ef50:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  40ef54:	1a9b      	subs	r3, r3, r2
  40ef56:	9a04      	ldr	r2, [sp, #16]
  40ef58:	1a9b      	subs	r3, r3, r2
  40ef5a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  40ef5e:	e76d      	b.n	40ee3c <flex_update+0x608>
        lv_mem_buf_release(t.grow_dsc);
  40ef60:	981a      	ldr	r0, [sp, #104]	; 0x68
  40ef62:	4b48      	ldr	r3, [pc, #288]	; (40f084 <flex_update+0x850>)
  40ef64:	4798      	blx	r3
        t.grow_dsc = NULL;
  40ef66:	2300      	movs	r3, #0
  40ef68:	931a      	str	r3, [sp, #104]	; 0x68
        if(rtl && !f.row) {
  40ef6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ef6c:	2b00      	cmp	r3, #0
  40ef6e:	d14f      	bne.n	40f010 <flex_update+0x7dc>
            *cross_pos += t.track_cross_size + gap + track_gap;
  40ef70:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
  40ef74:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
  40ef78:	4413      	add	r3, r2
  40ef7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ef7c:	4413      	add	r3, r2
  40ef7e:	990d      	ldr	r1, [sp, #52]	; 0x34
  40ef80:	880a      	ldrh	r2, [r1, #0]
  40ef82:	4413      	add	r3, r2
  40ef84:	800b      	strh	r3, [r1, #0]
        track_first_item = next_track_first_item;
  40ef86:	465c      	mov	r4, fp
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
  40ef88:	9b02      	ldr	r3, [sp, #8]
  40ef8a:	689b      	ldr	r3, [r3, #8]
  40ef8c:	685b      	ldr	r3, [r3, #4]
  40ef8e:	455b      	cmp	r3, fp
  40ef90:	dd4c      	ble.n	40f02c <flex_update+0x7f8>
  40ef92:	f1bb 0f00 	cmp.w	fp, #0
  40ef96:	db49      	blt.n	40f02c <flex_update+0x7f8>
        t.grow_dsc_calc = 1;
  40ef98:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40ef9c:	f043 0301 	orr.w	r3, r3, #1
  40efa0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
  40efa4:	ab17      	add	r3, sp, #92	; 0x5c
  40efa6:	9301      	str	r3, [sp, #4]
  40efa8:	9b04      	ldr	r3, [sp, #16]
  40efaa:	9300      	str	r3, [sp, #0]
  40efac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40efae:	4622      	mov	r2, r4
  40efb0:	a91f      	add	r1, sp, #124	; 0x7c
  40efb2:	9802      	ldr	r0, [sp, #8]
  40efb4:	4d34      	ldr	r5, [pc, #208]	; (40f088 <flex_update+0x854>)
  40efb6:	47a8      	blx	r5
  40efb8:	4683      	mov	fp, r0
        if(rtl && !f.row) {
  40efba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40efbc:	2b00      	cmp	r3, #0
  40efbe:	f47f adb3 	bne.w	40eb28 <flex_update+0x2f4>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
  40efc2:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
  40efc6:	9305      	str	r3, [sp, #20]
  40efc8:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
  40efcc:	9306      	str	r3, [sp, #24]
  40efce:	9414      	str	r4, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
  40efd0:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40efd4:	f013 0301 	ands.w	r3, r3, #1
  40efd8:	4a2c      	ldr	r2, [pc, #176]	; (40f08c <flex_update+0x858>)
  40efda:	492d      	ldr	r1, [pc, #180]	; (40f090 <flex_update+0x85c>)
  40efdc:	bf18      	it	ne
  40efde:	460a      	movne	r2, r1
  40efe0:	920c      	str	r2, [sp, #48]	; 0x30
  40efe2:	4a2c      	ldr	r2, [pc, #176]	; (40f094 <flex_update+0x860>)
  40efe4:	492c      	ldr	r1, [pc, #176]	; (40f098 <flex_update+0x864>)
  40efe6:	2b00      	cmp	r3, #0
  40efe8:	bf18      	it	ne
  40efea:	4611      	movne	r1, r2
  40efec:	9103      	str	r1, [sp, #12]
  40efee:	4a2a      	ldr	r2, [pc, #168]	; (40f098 <flex_update+0x864>)
  40eff0:	4928      	ldr	r1, [pc, #160]	; (40f094 <flex_update+0x860>)
  40eff2:	2b00      	cmp	r3, #0
  40eff4:	bf18      	it	ne
  40eff6:	4611      	movne	r1, r2
  40eff8:	9107      	str	r1, [sp, #28]
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
  40effa:	f8bd 705e 	ldrh.w	r7, [sp, #94]	; 0x5e
  40effe:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  40f002:	1aff      	subs	r7, r7, r3
            if(t->grow_dsc[i].clamped == 0) {
  40f004:	b23f      	sxth	r7, r7
  40f006:	f04f 0800 	mov.w	r8, #0
  40f00a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
  40f00e:	e5e5      	b.n	40ebdc <flex_update+0x3a8>
        if(rtl && !f.row) {
  40f010:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
  40f014:	f013 0f01 	tst.w	r3, #1
  40f018:	d1aa      	bne.n	40ef70 <flex_update+0x73c>
            *cross_pos -= gap + track_gap;
  40f01a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
  40f01e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40f020:	441a      	add	r2, r3
  40f022:	990d      	ldr	r1, [sp, #52]	; 0x34
  40f024:	880b      	ldrh	r3, [r1, #0]
  40f026:	1a9b      	subs	r3, r3, r2
  40f028:	800b      	strh	r3, [r1, #0]
  40f02a:	e7ac      	b.n	40ef86 <flex_update+0x752>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
  40f02c:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40f030:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40f032:	429a      	cmp	r2, r3
  40f034:	d009      	beq.n	40f04a <flex_update+0x816>
  40f036:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f038:	b93b      	cbnz	r3, 40f04a <flex_update+0x816>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
  40f03a:	2200      	movs	r2, #0
  40f03c:	2129      	movs	r1, #41	; 0x29
  40f03e:	9802      	ldr	r0, [sp, #8]
  40f040:	4b16      	ldr	r3, [pc, #88]	; (40f09c <flex_update+0x868>)
  40f042:	4798      	blx	r3
}
  40f044:	b021      	add	sp, #132	; 0x84
  40f046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
  40f04a:	9802      	ldr	r0, [sp, #8]
  40f04c:	4b14      	ldr	r3, [pc, #80]	; (40f0a0 <flex_update+0x86c>)
  40f04e:	4798      	blx	r3
  40f050:	e7f3      	b.n	40f03a <flex_update+0x806>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
  40f052:	2601      	movs	r6, #1
  40f054:	e4b8      	b.n	40e9c8 <flex_update+0x194>
  40f056:	2601      	movs	r6, #1
  40f058:	e4b6      	b.n	40e9c8 <flex_update+0x194>
    lv_coord_t gap = 0;
  40f05a:	2500      	movs	r5, #0
  40f05c:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
  40f060:	e502      	b.n	40ea68 <flex_update+0x234>
  40f062:	bf00      	nop
  40f064:	00404f1d 	.word	0x00404f1d
  40f068:	004022d3 	.word	0x004022d3
  40f06c:	004022df 	.word	0x004022df
  40f070:	0040e523 	.word	0x0040e523
  40f074:	00018001 	.word	0x00018001
  40f078:	004013f3 	.word	0x004013f3
  40f07c:	51eb851f 	.word	0x51eb851f
  40f080:	00402471 	.word	0x00402471
  40f084:	00411105 	.word	0x00411105
  40f088:	0040e559 	.word	0x0040e559
  40f08c:	0041076b 	.word	0x0041076b
  40f090:	00410761 	.word	0x00410761
  40f094:	0040e479 	.word	0x0040e479
  40f098:	0040e485 	.word	0x0040e485
  40f09c:	00400491 	.word	0x00400491
  40f0a0:	00402bf9 	.word	0x00402bf9
  40f0a4:	0040262d 	.word	0x0040262d
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
  40f0a8:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
  40f0ac:	9305      	str	r3, [sp, #20]
  40f0ae:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
  40f0b2:	9306      	str	r3, [sp, #24]
  40f0b4:	9414      	str	r4, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
  40f0b6:	4b03      	ldr	r3, [pc, #12]	; (40f0c4 <flex_update+0x890>)
  40f0b8:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
  40f0ba:	4b03      	ldr	r3, [pc, #12]	; (40f0c8 <flex_update+0x894>)
  40f0bc:	9303      	str	r3, [sp, #12]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
  40f0be:	4b03      	ldr	r3, [pc, #12]	; (40f0cc <flex_update+0x898>)
  40f0c0:	9307      	str	r3, [sp, #28]
  40f0c2:	e79a      	b.n	40effa <flex_update+0x7c6>
  40f0c4:	00410761 	.word	0x00410761
  40f0c8:	0040e479 	.word	0x0040e479
  40f0cc:	0040e485 	.word	0x0040e485

0040f0d0 <lv_flex_init>:
{
  40f0d0:	b510      	push	{r4, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
  40f0d2:	2100      	movs	r1, #0
  40f0d4:	480c      	ldr	r0, [pc, #48]	; (40f108 <lv_flex_init+0x38>)
  40f0d6:	4b0d      	ldr	r3, [pc, #52]	; (40f10c <lv_flex_init+0x3c>)
  40f0d8:	4798      	blx	r3
  40f0da:	4b0d      	ldr	r3, [pc, #52]	; (40f110 <lv_flex_init+0x40>)
  40f0dc:	6018      	str	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop();
  40f0de:	4c0d      	ldr	r4, [pc, #52]	; (40f114 <lv_flex_init+0x44>)
  40f0e0:	47a0      	blx	r4
  40f0e2:	4b0d      	ldr	r3, [pc, #52]	; (40f118 <lv_flex_init+0x48>)
  40f0e4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40f0e6:	47a0      	blx	r4
  40f0e8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40f0ec:	4b0b      	ldr	r3, [pc, #44]	; (40f11c <lv_flex_init+0x4c>)
  40f0ee:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40f0f0:	47a0      	blx	r4
  40f0f2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40f0f6:	4b0a      	ldr	r3, [pc, #40]	; (40f120 <lv_flex_init+0x50>)
  40f0f8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40f0fa:	47a0      	blx	r4
  40f0fc:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40f100:	4b08      	ldr	r3, [pc, #32]	; (40f124 <lv_flex_init+0x54>)
  40f102:	8018      	strh	r0, [r3, #0]
  40f104:	bd10      	pop	{r4, pc}
  40f106:	bf00      	nop
  40f108:	0040e835 	.word	0x0040e835
  40f10c:	00402219 	.word	0x00402219
  40f110:	20439e40 	.word	0x20439e40
  40f114:	00412231 	.word	0x00412231
  40f118:	20439e38 	.word	0x20439e38
  40f11c:	20439e3c 	.word	0x20439e3c
  40f120:	20439e34 	.word	0x20439e34
  40f124:	20439e36 	.word	0x20439e36

0040f128 <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
  40f128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40f12c:	4604      	mov	r4, r0
  40f12e:	9e07      	ldr	r6, [sp, #28]
  40f130:	9d08      	ldr	r5, [sp, #32]
  40f132:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40f134:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
  40f138:	b3b1      	cbz	r1, 40f1a8 <grid_align+0x80>
        pos_array[0] = 0;
  40f13a:	2200      	movs	r2, #0
  40f13c:	803a      	strh	r2, [r7, #0]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
  40f13e:	f1b6 0801 	subs.w	r8, r6, #1
  40f142:	d00f      	beq.n	40f164 <grid_align+0x3c>
  40f144:	4639      	mov	r1, r7
  40f146:	f1a5 0c02 	sub.w	ip, r5, #2
  40f14a:	2200      	movs	r2, #0
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
  40f14c:	1c50      	adds	r0, r2, #1
  40f14e:	f9b1 9000 	ldrsh.w	r9, [r1]
  40f152:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
  40f156:	441a      	add	r2, r3
  40f158:	444a      	add	r2, r9
  40f15a:	f821 2f02 	strh.w	r2, [r1, #2]!
    for(i = 0; i < track_num - 1; i++) {
  40f15e:	4602      	mov	r2, r0
  40f160:	4540      	cmp	r0, r8
  40f162:	d3f3      	bcc.n	40f14c <grid_align+0x24>
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
  40f164:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f168:	4432      	add	r2, r6
  40f16a:	0053      	lsls	r3, r2, #1
  40f16c:	f837 0012 	ldrh.w	r0, [r7, r2, lsl #1]
  40f170:	8839      	ldrh	r1, [r7, #0]
  40f172:	1a40      	subs	r0, r0, r1
  40f174:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
  40f178:	4410      	add	r0, r2
  40f17a:	b200      	sxth	r0, r0

    if(reverse) {
  40f17c:	f1be 0f00 	cmp.w	lr, #0
  40f180:	f000 808f 	beq.w	40f2a2 <grid_align+0x17a>
        for(i = 0; i < track_num; i++) {
  40f184:	2e00      	cmp	r6, #0
  40f186:	f000 808c 	beq.w	40f2a2 <grid_align+0x17a>
  40f18a:	463a      	mov	r2, r7
  40f18c:	3d02      	subs	r5, #2
  40f18e:	3302      	adds	r3, #2
  40f190:	441f      	add	r7, r3
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
  40f192:	8813      	ldrh	r3, [r2, #0]
  40f194:	1ae3      	subs	r3, r4, r3
  40f196:	f835 1f02 	ldrh.w	r1, [r5, #2]!
  40f19a:	1a5b      	subs	r3, r3, r1
  40f19c:	f822 3b02 	strh.w	r3, [r2], #2
        for(i = 0; i < track_num; i++) {
  40f1a0:	42ba      	cmp	r2, r7
  40f1a2:	d1f6      	bne.n	40f192 <grid_align+0x6a>
  40f1a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
  40f1a8:	1f11      	subs	r1, r2, #4
  40f1aa:	b2c9      	uxtb	r1, r1
  40f1ac:	2902      	cmp	r1, #2
  40f1ae:	d802      	bhi.n	40f1b6 <grid_align+0x8e>
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
  40f1b0:	2e01      	cmp	r6, #1
  40f1b2:	d025      	beq.n	40f200 <grid_align+0xd8>
            gap = 0;
  40f1b4:	2300      	movs	r3, #0
        for(i = 0; i < track_num; i++) {
  40f1b6:	2e00      	cmp	r6, #0
  40f1b8:	d05a      	beq.n	40f270 <grid_align+0x148>
  40f1ba:	f1a5 0802 	sub.w	r8, r5, #2
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
  40f1be:	2000      	movs	r0, #0
  40f1c0:	4601      	mov	r1, r0
  40f1c2:	f838 cf02 	ldrh.w	ip, [r8, #2]!
  40f1c6:	4461      	add	r1, ip
  40f1c8:	fa1f fc81 	uxth.w	ip, r1
            grid_size += size_array[i] + gap;
  40f1cc:	eb0c 0103 	add.w	r1, ip, r3
  40f1d0:	b209      	sxth	r1, r1
        for(i = 0; i < track_num; i++) {
  40f1d2:	3001      	adds	r0, #1
  40f1d4:	4286      	cmp	r6, r0
  40f1d6:	d8f4      	bhi.n	40f1c2 <grid_align+0x9a>
        switch(align) {
  40f1d8:	2a06      	cmp	r2, #6
  40f1da:	d8b0      	bhi.n	40f13e <grid_align+0x16>
  40f1dc:	a101      	add	r1, pc, #4	; (adr r1, 40f1e4 <grid_align+0xbc>)
  40f1de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  40f1e2:	bf00      	nop
  40f1e4:	0040f207 	.word	0x0040f207
  40f1e8:	0040f20d 	.word	0x0040f20d
  40f1ec:	0040f21d 	.word	0x0040f21d
  40f1f0:	0040f13f 	.word	0x0040f13f
  40f1f4:	0040f257 	.word	0x0040f257
  40f1f8:	0040f23b 	.word	0x0040f23b
  40f1fc:	0040f225 	.word	0x0040f225
            gap = 0;
  40f200:	2300      	movs	r3, #0
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
  40f202:	2201      	movs	r2, #1
  40f204:	e7d9      	b.n	40f1ba <grid_align+0x92>
                pos_array[0] = 0;
  40f206:	2200      	movs	r2, #0
  40f208:	803a      	strh	r2, [r7, #0]
                break;
  40f20a:	e798      	b.n	40f13e <grid_align+0x16>
        grid_size -= gap;
  40f20c:	fa0f f18c 	sxth.w	r1, ip
                pos_array[0] = (cont_size - grid_size) / 2;
  40f210:	1a61      	subs	r1, r4, r1
  40f212:	bf48      	it	mi
  40f214:	3101      	addmi	r1, #1
  40f216:	1049      	asrs	r1, r1, #1
  40f218:	8039      	strh	r1, [r7, #0]
                break;
  40f21a:	e790      	b.n	40f13e <grid_align+0x16>
                pos_array[0] = cont_size - grid_size;
  40f21c:	eba4 010c 	sub.w	r1, r4, ip
  40f220:	8039      	strh	r1, [r7, #0]
                break;
  40f222:	e78c      	b.n	40f13e <grid_align+0x16>
                pos_array[0] = 0;
  40f224:	2300      	movs	r3, #0
  40f226:	803b      	strh	r3, [r7, #0]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
  40f228:	eba4 030c 	sub.w	r3, r4, ip
  40f22c:	b21b      	sxth	r3, r3
  40f22e:	1e72      	subs	r2, r6, #1
  40f230:	b212      	sxth	r2, r2
  40f232:	fb93 f3f2 	sdiv	r3, r3, r2
  40f236:	b21b      	sxth	r3, r3
                break;
  40f238:	e781      	b.n	40f13e <grid_align+0x16>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
  40f23a:	eba4 030c 	sub.w	r3, r4, ip
  40f23e:	b21b      	sxth	r3, r3
  40f240:	b232      	sxth	r2, r6
  40f242:	fb93 f3f2 	sdiv	r3, r3, r2
  40f246:	b21b      	sxth	r3, r3
                pos_array[0] = gap / 2;
  40f248:	461a      	mov	r2, r3
  40f24a:	2b00      	cmp	r3, #0
  40f24c:	bfb8      	it	lt
  40f24e:	1c5a      	addlt	r2, r3, #1
  40f250:	1052      	asrs	r2, r2, #1
  40f252:	803a      	strh	r2, [r7, #0]
                break;
  40f254:	e773      	b.n	40f13e <grid_align+0x16>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
  40f256:	eba4 030c 	sub.w	r3, r4, ip
  40f25a:	b21b      	sxth	r3, r3
  40f25c:	1c72      	adds	r2, r6, #1
  40f25e:	b212      	sxth	r2, r2
  40f260:	fb93 f3f2 	sdiv	r3, r3, r2
  40f264:	b21b      	sxth	r3, r3
                pos_array[0] = gap;
  40f266:	803b      	strh	r3, [r7, #0]
                break;
  40f268:	e769      	b.n	40f13e <grid_align+0x16>
    for(i = 0; i < track_num - 1; i++) {
  40f26a:	f04f 38ff 	mov.w	r8, #4294967295
  40f26e:	e769      	b.n	40f144 <grid_align+0x1c>
        grid_size -= gap;
  40f270:	4259      	negs	r1, r3
  40f272:	fa1f fc81 	uxth.w	ip, r1
        switch(align) {
  40f276:	2a06      	cmp	r2, #6
  40f278:	d8f7      	bhi.n	40f26a <grid_align+0x142>
  40f27a:	a101      	add	r1, pc, #4	; (adr r1, 40f280 <grid_align+0x158>)
  40f27c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  40f280:	0040f207 	.word	0x0040f207
  40f284:	0040f29d 	.word	0x0040f29d
  40f288:	0040f21d 	.word	0x0040f21d
  40f28c:	0040f26b 	.word	0x0040f26b
  40f290:	0040f257 	.word	0x0040f257
  40f294:	0040f23b 	.word	0x0040f23b
  40f298:	0040f225 	.word	0x0040f225
        grid_size -= gap;
  40f29c:	fa0f f18c 	sxth.w	r1, ip
  40f2a0:	e7b6      	b.n	40f210 <grid_align+0xe8>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
  40f2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40f2a6:	bf00      	nop

0040f2a8 <grid_update>:
{
  40f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f2ac:	b097      	sub	sp, #92	; 0x5c
  40f2ae:	4683      	mov	fp, r0
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
  40f2b0:	4ba0      	ldr	r3, [pc, #640]	; (40f534 <grid_update+0x28c>)
  40f2b2:	881a      	ldrh	r2, [r3, #0]
  40f2b4:	2100      	movs	r1, #0
  40f2b6:	4da0      	ldr	r5, [pc, #640]	; (40f538 <grid_update+0x290>)
  40f2b8:	47a8      	blx	r5
  40f2ba:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
  40f2bc:	4b9f      	ldr	r3, [pc, #636]	; (40f53c <grid_update+0x294>)
  40f2be:	881a      	ldrh	r2, [r3, #0]
  40f2c0:	2100      	movs	r1, #0
  40f2c2:	4658      	mov	r0, fp
  40f2c4:	47a8      	blx	r5
    if(col_templ == NULL || row_templ == NULL) return;
  40f2c6:	2800      	cmp	r0, #0
  40f2c8:	bf18      	it	ne
  40f2ca:	2c00      	cmpne	r4, #0
  40f2cc:	bf0c      	ite	eq
  40f2ce:	2301      	moveq	r3, #1
  40f2d0:	2300      	movne	r3, #0
  40f2d2:	9306      	str	r3, [sp, #24]
  40f2d4:	d102      	bne.n	40f2dc <grid_update+0x34>
}
  40f2d6:	b017      	add	sp, #92	; 0x5c
  40f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_obj_get_child(cont, 0) == NULL) {
  40f2dc:	2100      	movs	r1, #0
  40f2de:	4658      	mov	r0, fp
  40f2e0:	4b97      	ldr	r3, [pc, #604]	; (40f540 <grid_update+0x298>)
  40f2e2:	4798      	blx	r3
  40f2e4:	b348      	cbz	r0, 40f33a <grid_update+0x92>
  40f2e6:	4b95      	ldr	r3, [pc, #596]	; (40f53c <grid_update+0x294>)
  40f2e8:	881a      	ldrh	r2, [r3, #0]
  40f2ea:	2100      	movs	r1, #0
  40f2ec:	4658      	mov	r0, fp
  40f2ee:	4b92      	ldr	r3, [pc, #584]	; (40f538 <grid_update+0x290>)
  40f2f0:	4798      	blx	r3
  40f2f2:	4602      	mov	r2, r0
  40f2f4:	9007      	str	r0, [sp, #28]

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
  40f2f6:	f9b0 3000 	ldrsh.w	r3, [r0]
  40f2fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
  40f2fe:	d021      	beq.n	40f344 <grid_update+0x9c>
  40f300:	2300      	movs	r3, #0
  40f302:	3301      	adds	r3, #1
  40f304:	0058      	lsls	r0, r3, #1
  40f306:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
  40f30a:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
  40f30e:	d1f8      	bne.n	40f302 <grid_update+0x5a>
    c->row_num = count_tracks(row_templ);
  40f310:	9314      	str	r3, [sp, #80]	; 0x50
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
  40f312:	4c8c      	ldr	r4, [pc, #560]	; (40f544 <grid_update+0x29c>)
  40f314:	47a0      	blx	r4
  40f316:	9010      	str	r0, [sp, #64]	; 0x40
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
  40f318:	9814      	ldr	r0, [sp, #80]	; 0x50
  40f31a:	0040      	lsls	r0, r0, #1
  40f31c:	47a0      	blx	r4
  40f31e:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
  40f320:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40f322:	2c00      	cmp	r4, #0
  40f324:	d078      	beq.n	40f418 <grid_update+0x170>
  40f326:	9b07      	ldr	r3, [sp, #28]
  40f328:	f1a3 0902 	sub.w	r9, r3, #2
  40f32c:	46c8      	mov	r8, r9
  40f32e:	2500      	movs	r5, #0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
  40f330:	4f85      	ldr	r7, [pc, #532]	; (40f548 <grid_update+0x2a0>)
                lv_obj_t * item = lv_obj_get_child(cont, ci);
  40f332:	4e83      	ldr	r6, [pc, #524]	; (40f540 <grid_update+0x298>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  40f334:	f8cd 9020 	str.w	r9, [sp, #32]
  40f338:	e03b      	b.n	40f3b2 <grid_update+0x10a>
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
  40f33a:	211c      	movs	r1, #28
  40f33c:	a80f      	add	r0, sp, #60	; 0x3c
  40f33e:	4b83      	ldr	r3, [pc, #524]	; (40f54c <grid_update+0x2a4>)
  40f340:	4798      	blx	r3
  40f342:	e1fb      	b.n	40f73c <grid_update+0x494>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
  40f344:	2000      	movs	r0, #0
  40f346:	4603      	mov	r3, r0
  40f348:	e7e2      	b.n	40f310 <grid_update+0x68>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
  40f34a:	3401      	adds	r4, #1
  40f34c:	4658      	mov	r0, fp
  40f34e:	47b8      	blx	r7
  40f350:	4284      	cmp	r4, r0
  40f352:	d224      	bcs.n	40f39e <grid_update+0xf6>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
  40f354:	4621      	mov	r1, r4
  40f356:	4658      	mov	r0, fp
  40f358:	47b0      	blx	r6
  40f35a:	9005      	str	r0, [sp, #20]
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  40f35c:	497c      	ldr	r1, [pc, #496]	; (40f550 <grid_update+0x2a8>)
  40f35e:	4b7d      	ldr	r3, [pc, #500]	; (40f554 <grid_update+0x2ac>)
  40f360:	4798      	blx	r3
  40f362:	2800      	cmp	r0, #0
  40f364:	d1f1      	bne.n	40f34a <grid_update+0xa2>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
  40f366:	4b7c      	ldr	r3, [pc, #496]	; (40f558 <grid_update+0x2b0>)
  40f368:	881a      	ldrh	r2, [r3, #0]
  40f36a:	2100      	movs	r1, #0
  40f36c:	9805      	ldr	r0, [sp, #20]
  40f36e:	4b72      	ldr	r3, [pc, #456]	; (40f538 <grid_update+0x290>)
  40f370:	4798      	blx	r3
                if(row_span != 1) continue;
  40f372:	b2c0      	uxtb	r0, r0
  40f374:	2801      	cmp	r0, #1
  40f376:	d1e8      	bne.n	40f34a <grid_update+0xa2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
  40f378:	4b78      	ldr	r3, [pc, #480]	; (40f55c <grid_update+0x2b4>)
  40f37a:	881a      	ldrh	r2, [r3, #0]
  40f37c:	2100      	movs	r1, #0
  40f37e:	9805      	ldr	r0, [sp, #20]
  40f380:	4b6d      	ldr	r3, [pc, #436]	; (40f538 <grid_update+0x290>)
  40f382:	4798      	blx	r3
                uint32_t row_pos = get_row_pos(item);
  40f384:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
  40f386:	42a8      	cmp	r0, r5
  40f388:	d1df      	bne.n	40f34a <grid_update+0xa2>
                size = LV_MAX(size, lv_obj_get_height(item));
  40f38a:	9805      	ldr	r0, [sp, #20]
  40f38c:	4b74      	ldr	r3, [pc, #464]	; (40f560 <grid_update+0x2b8>)
  40f38e:	4798      	blx	r3
  40f390:	4548      	cmp	r0, r9
  40f392:	dbda      	blt.n	40f34a <grid_update+0xa2>
  40f394:	9805      	ldr	r0, [sp, #20]
  40f396:	4b72      	ldr	r3, [pc, #456]	; (40f560 <grid_update+0x2b8>)
  40f398:	4798      	blx	r3
  40f39a:	4681      	mov	r9, r0
  40f39c:	e7d5      	b.n	40f34a <grid_update+0xa2>
            if(size >= 0) c->h[i] = size;
  40f39e:	f1b9 0f00 	cmp.w	r9, #0
  40f3a2:	db12      	blt.n	40f3ca <grid_update+0x122>
  40f3a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f3a6:	f823 900a 	strh.w	r9, [r3, sl]
    for(i = 0; i < c->row_num; i++) {
  40f3aa:	3501      	adds	r5, #1
  40f3ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40f3ae:	42a5      	cmp	r5, r4
  40f3b0:	d210      	bcs.n	40f3d4 <grid_update+0x12c>
  40f3b2:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        if(IS_CONTENT(row_templ[i])) {
  40f3b6:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  40f3ba:	f645 739b 	movw	r3, #24475	; 0x5f9b
  40f3be:	429a      	cmp	r2, r3
  40f3c0:	d1f3      	bne.n	40f3aa <grid_update+0x102>
  40f3c2:	2400      	movs	r4, #0
  40f3c4:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 40f57c <grid_update+0x2d4>
  40f3c8:	e7c0      	b.n	40f34c <grid_update+0xa4>
            else c->h[i] = 0;
  40f3ca:	2200      	movs	r2, #0
  40f3cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f3ce:	f823 200a 	strh.w	r2, [r3, sl]
  40f3d2:	e7ea      	b.n	40f3aa <grid_update+0x102>
  40f3d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
    for(i = 0; i < c->row_num; i++) {
  40f3d8:	2c00      	cmp	r4, #0
  40f3da:	d039      	beq.n	40f450 <grid_update+0x1a8>
  40f3dc:	2500      	movs	r5, #0
  40f3de:	462c      	mov	r4, r5
  40f3e0:	462a      	mov	r2, r5
        if(IS_FR(x)) {
  40f3e2:	f645 719b 	movw	r1, #24475	; 0x5f9b
            row_fr_cnt += GET_FR(x);
  40f3e6:	4e5f      	ldr	r6, [pc, #380]	; (40f564 <grid_update+0x2bc>)
  40f3e8:	e009      	b.n	40f3fe <grid_update+0x156>
        else if(IS_CONTENT(x)) {
  40f3ea:	428b      	cmp	r3, r1
  40f3ec:	d00f      	beq.n	40f40e <grid_update+0x166>
            c->h[i] = x;
  40f3ee:	9812      	ldr	r0, [sp, #72]	; 0x48
  40f3f0:	53c3      	strh	r3, [r0, r7]
            grid_h += x;
  40f3f2:	441d      	add	r5, r3
  40f3f4:	b22d      	sxth	r5, r5
    for(i = 0; i < c->row_num; i++) {
  40f3f6:	3201      	adds	r2, #1
  40f3f8:	9814      	ldr	r0, [sp, #80]	; 0x50
  40f3fa:	4282      	cmp	r2, r0
  40f3fc:	d20d      	bcs.n	40f41a <grid_update+0x172>
  40f3fe:	0057      	lsls	r7, r2, #1
        lv_coord_t x = row_templ[i];
  40f400:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
        if(IS_FR(x)) {
  40f404:	428b      	cmp	r3, r1
  40f406:	ddf0      	ble.n	40f3ea <grid_update+0x142>
            row_fr_cnt += GET_FR(x);
  40f408:	4433      	add	r3, r6
  40f40a:	441c      	add	r4, r3
  40f40c:	e7f3      	b.n	40f3f6 <grid_update+0x14e>
            grid_h += c->h[i];
  40f40e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f410:	5bdb      	ldrh	r3, [r3, r7]
  40f412:	441d      	add	r5, r3
  40f414:	b22d      	sxth	r5, r5
  40f416:	e7ee      	b.n	40f3f6 <grid_update+0x14e>
    for(i = 0; i < c->row_num; i++) {
  40f418:	2500      	movs	r5, #0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_row(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
  40f41a:	f641 0214 	movw	r2, #6164	; 0x1814
  40f41e:	2100      	movs	r1, #0
  40f420:	4658      	mov	r0, fp
  40f422:	4b45      	ldr	r3, [pc, #276]	; (40f538 <grid_update+0x290>)
  40f424:	4798      	blx	r3
    return (lv_coord_t)v.num;
  40f426:	b206      	sxth	r6, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
  40f428:	4658      	mov	r0, fp
  40f42a:	4b4f      	ldr	r3, [pc, #316]	; (40f568 <grid_update+0x2c0>)
  40f42c:	4798      	blx	r3
  40f42e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40f430:	1e53      	subs	r3, r2, #1
  40f432:	fb13 f306 	smulbb	r3, r3, r6
  40f436:	1ac0      	subs	r0, r0, r3
    lv_coord_t free_h = cont_h - grid_h;
  40f438:	1b40      	subs	r0, r0, r5
  40f43a:	b200      	sxth	r0, r0
  40f43c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    for(i = 0; i < c->row_num; i++) {
  40f440:	b1d2      	cbz	r2, 40f478 <grid_update+0x1d0>
  40f442:	9b07      	ldr	r3, [sp, #28]
  40f444:	1e99      	subs	r1, r3, #2
  40f446:	2200      	movs	r2, #0
        if(IS_FR(x)) {
  40f448:	f645 769b 	movw	r6, #24475	; 0x5f9b
            lv_coord_t f = GET_FR(x);
  40f44c:	4f45      	ldr	r7, [pc, #276]	; (40f564 <grid_update+0x2bc>)
  40f44e:	e005      	b.n	40f45c <grid_update+0x1b4>
    for(i = 0; i < c->row_num; i++) {
  40f450:	2500      	movs	r5, #0
  40f452:	e7e2      	b.n	40f41a <grid_update+0x172>
    for(i = 0; i < c->row_num; i++) {
  40f454:	3201      	adds	r2, #1
  40f456:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f458:	429a      	cmp	r2, r3
  40f45a:	d20d      	bcs.n	40f478 <grid_update+0x1d0>
        lv_coord_t x = row_templ[i];
  40f45c:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
        if(IS_FR(x)) {
  40f460:	42b3      	cmp	r3, r6
  40f462:	ddf7      	ble.n	40f454 <grid_update+0x1ac>
            lv_coord_t f = GET_FR(x);
  40f464:	443b      	add	r3, r7
            c->h[i] = (free_h * f) / row_fr_cnt;
  40f466:	b21b      	sxth	r3, r3
  40f468:	fb00 f303 	mul.w	r3, r0, r3
  40f46c:	fbb3 f3f4 	udiv	r3, r3, r4
  40f470:	9d12      	ldr	r5, [sp, #72]	; 0x48
  40f472:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
  40f476:	e7ed      	b.n	40f454 <grid_update+0x1ac>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
  40f478:	4b2e      	ldr	r3, [pc, #184]	; (40f534 <grid_update+0x28c>)
  40f47a:	881a      	ldrh	r2, [r3, #0]
  40f47c:	2100      	movs	r1, #0
  40f47e:	4658      	mov	r0, fp
  40f480:	4b2d      	ldr	r3, [pc, #180]	; (40f538 <grid_update+0x290>)
  40f482:	4798      	blx	r3
  40f484:	4604      	mov	r4, r0
  40f486:	9007      	str	r0, [sp, #28]
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
  40f488:	4658      	mov	r0, fp
  40f48a:	4b38      	ldr	r3, [pc, #224]	; (40f56c <grid_update+0x2c4>)
  40f48c:	4798      	blx	r3
  40f48e:	9008      	str	r0, [sp, #32]
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
  40f490:	f9b4 3000 	ldrsh.w	r3, [r4]
  40f494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
  40f498:	d01e      	beq.n	40f4d8 <grid_update+0x230>
  40f49a:	4622      	mov	r2, r4
  40f49c:	2300      	movs	r3, #0
  40f49e:	3301      	adds	r3, #1
  40f4a0:	0058      	lsls	r0, r3, #1
  40f4a2:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
  40f4a6:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
  40f4aa:	d1f8      	bne.n	40f49e <grid_update+0x1f6>
    c->col_num = count_tracks(col_templ);
  40f4ac:	9313      	str	r3, [sp, #76]	; 0x4c
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
  40f4ae:	4c25      	ldr	r4, [pc, #148]	; (40f544 <grid_update+0x29c>)
  40f4b0:	47a0      	blx	r4
  40f4b2:	900f      	str	r0, [sp, #60]	; 0x3c
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
  40f4b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40f4b6:	0040      	lsls	r0, r0, #1
  40f4b8:	47a0      	blx	r4
  40f4ba:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
  40f4bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40f4be:	2c00      	cmp	r4, #0
  40f4c0:	f000 809b 	beq.w	40f5fa <grid_update+0x352>
  40f4c4:	9b07      	ldr	r3, [sp, #28]
  40f4c6:	f1a3 0902 	sub.w	r9, r3, #2
  40f4ca:	46c8      	mov	r8, r9
  40f4cc:	2500      	movs	r5, #0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
  40f4ce:	4f1e      	ldr	r7, [pc, #120]	; (40f548 <grid_update+0x2a0>)
                lv_obj_t * item = lv_obj_get_child(cont, ci);
  40f4d0:	4e1b      	ldr	r6, [pc, #108]	; (40f540 <grid_update+0x298>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  40f4d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  40f4d6:	e05d      	b.n	40f594 <grid_update+0x2ec>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
  40f4d8:	2000      	movs	r0, #0
  40f4da:	4603      	mov	r3, r0
  40f4dc:	e7e6      	b.n	40f4ac <grid_update+0x204>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
  40f4de:	3401      	adds	r4, #1
  40f4e0:	4658      	mov	r0, fp
  40f4e2:	47b8      	blx	r7
  40f4e4:	4284      	cmp	r4, r0
  40f4e6:	d24b      	bcs.n	40f580 <grid_update+0x2d8>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
  40f4e8:	4621      	mov	r1, r4
  40f4ea:	4658      	mov	r0, fp
  40f4ec:	47b0      	blx	r6
  40f4ee:	9005      	str	r0, [sp, #20]
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
  40f4f0:	4917      	ldr	r1, [pc, #92]	; (40f550 <grid_update+0x2a8>)
  40f4f2:	4b18      	ldr	r3, [pc, #96]	; (40f554 <grid_update+0x2ac>)
  40f4f4:	4798      	blx	r3
  40f4f6:	2800      	cmp	r0, #0
  40f4f8:	d1f1      	bne.n	40f4de <grid_update+0x236>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
  40f4fa:	4b1d      	ldr	r3, [pc, #116]	; (40f570 <grid_update+0x2c8>)
  40f4fc:	881a      	ldrh	r2, [r3, #0]
  40f4fe:	2100      	movs	r1, #0
  40f500:	9805      	ldr	r0, [sp, #20]
  40f502:	4b0d      	ldr	r3, [pc, #52]	; (40f538 <grid_update+0x290>)
  40f504:	4798      	blx	r3
                if(col_span != 1) continue;
  40f506:	b2c0      	uxtb	r0, r0
  40f508:	2801      	cmp	r0, #1
  40f50a:	d1e8      	bne.n	40f4de <grid_update+0x236>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
  40f50c:	4b19      	ldr	r3, [pc, #100]	; (40f574 <grid_update+0x2cc>)
  40f50e:	881a      	ldrh	r2, [r3, #0]
  40f510:	2100      	movs	r1, #0
  40f512:	9805      	ldr	r0, [sp, #20]
  40f514:	4b08      	ldr	r3, [pc, #32]	; (40f538 <grid_update+0x290>)
  40f516:	4798      	blx	r3
                uint32_t col_pos = get_col_pos(item);
  40f518:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
  40f51a:	42a8      	cmp	r0, r5
  40f51c:	d1df      	bne.n	40f4de <grid_update+0x236>
                size = LV_MAX(size, lv_obj_get_width(item));
  40f51e:	9805      	ldr	r0, [sp, #20]
  40f520:	4b15      	ldr	r3, [pc, #84]	; (40f578 <grid_update+0x2d0>)
  40f522:	4798      	blx	r3
  40f524:	4548      	cmp	r0, r9
  40f526:	dbda      	blt.n	40f4de <grid_update+0x236>
  40f528:	9805      	ldr	r0, [sp, #20]
  40f52a:	4b13      	ldr	r3, [pc, #76]	; (40f578 <grid_update+0x2d0>)
  40f52c:	4798      	blx	r3
  40f52e:	4681      	mov	r9, r0
  40f530:	e7d5      	b.n	40f4de <grid_update+0x236>
  40f532:	bf00      	nop
  40f534:	20439e54 	.word	0x20439e54
  40f538:	00404f1d 	.word	0x00404f1d
  40f53c:	20439e48 	.word	0x20439e48
  40f540:	00405df7 	.word	0x00405df7
  40f544:	004115a9 	.word	0x004115a9
  40f548:	00405e25 	.word	0x00405e25
  40f54c:	004116ed 	.word	0x004116ed
  40f550:	00018001 	.word	0x00018001
  40f554:	004013f3 	.word	0x004013f3
  40f558:	20439e50 	.word	0x20439e50
  40f55c:	20439e56 	.word	0x20439e56
  40f560:	004022df 	.word	0x004022df
  40f564:	ffffa064 	.word	0xffffa064
  40f568:	0040232d 	.word	0x0040232d
  40f56c:	004022ed 	.word	0x004022ed
  40f570:	20439e44 	.word	0x20439e44
  40f574:	20439e4a 	.word	0x20439e4a
  40f578:	004022d3 	.word	0x004022d3
  40f57c:	ffffa000 	.word	0xffffa000
            if(size >= 0) c->w[i] = size;
  40f580:	f1b9 0f00 	cmp.w	r9, #0
  40f584:	db12      	blt.n	40f5ac <grid_update+0x304>
  40f586:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f588:	f823 900a 	strh.w	r9, [r3, sl]
    for(i = 0; i < c->col_num; i++) {
  40f58c:	3501      	adds	r5, #1
  40f58e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40f590:	42a5      	cmp	r5, r4
  40f592:	d210      	bcs.n	40f5b6 <grid_update+0x30e>
  40f594:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        if(IS_CONTENT(col_templ[i])) {
  40f598:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  40f59c:	f645 739b 	movw	r3, #24475	; 0x5f9b
  40f5a0:	429a      	cmp	r2, r3
  40f5a2:	d1f3      	bne.n	40f58c <grid_update+0x2e4>
  40f5a4:	2400      	movs	r4, #0
  40f5a6:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 40f86c <grid_update+0x5c4>
  40f5aa:	e799      	b.n	40f4e0 <grid_update+0x238>
            else c->w[i] = 0;
  40f5ac:	2200      	movs	r2, #0
  40f5ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f5b0:	f823 200a 	strh.w	r2, [r3, sl]
  40f5b4:	e7ea      	b.n	40f58c <grid_update+0x2e4>
  40f5b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    for(i = 0; i < c->col_num; i++) {
  40f5ba:	2c00      	cmp	r4, #0
  40f5bc:	d03a      	beq.n	40f634 <grid_update+0x38c>
  40f5be:	2500      	movs	r5, #0
  40f5c0:	462c      	mov	r4, r5
  40f5c2:	462a      	mov	r2, r5
        if(IS_FR(x)) {
  40f5c4:	f645 719b 	movw	r1, #24475	; 0x5f9b
            col_fr_cnt += GET_FR(x);
  40f5c8:	4e9d      	ldr	r6, [pc, #628]	; (40f840 <grid_update+0x598>)
  40f5ca:	e009      	b.n	40f5e0 <grid_update+0x338>
        else if(IS_CONTENT(x)) {
  40f5cc:	428b      	cmp	r3, r1
  40f5ce:	d00f      	beq.n	40f5f0 <grid_update+0x348>
            c->w[i] = x;
  40f5d0:	9811      	ldr	r0, [sp, #68]	; 0x44
  40f5d2:	53c3      	strh	r3, [r0, r7]
            grid_w += x;
  40f5d4:	441d      	add	r5, r3
  40f5d6:	b22d      	sxth	r5, r5
    for(i = 0; i < c->col_num; i++) {
  40f5d8:	3201      	adds	r2, #1
  40f5da:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40f5dc:	4282      	cmp	r2, r0
  40f5de:	d20d      	bcs.n	40f5fc <grid_update+0x354>
  40f5e0:	0057      	lsls	r7, r2, #1
        lv_coord_t x = col_templ[i];
  40f5e2:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
        if(IS_FR(x)) {
  40f5e6:	428b      	cmp	r3, r1
  40f5e8:	ddf0      	ble.n	40f5cc <grid_update+0x324>
            col_fr_cnt += GET_FR(x);
  40f5ea:	4433      	add	r3, r6
  40f5ec:	441c      	add	r4, r3
  40f5ee:	e7f3      	b.n	40f5d8 <grid_update+0x330>
            grid_w += c->w[i];
  40f5f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f5f2:	5bdb      	ldrh	r3, [r3, r7]
  40f5f4:	441d      	add	r5, r3
  40f5f6:	b22d      	sxth	r5, r5
  40f5f8:	e7ee      	b.n	40f5d8 <grid_update+0x330>
    for(i = 0; i < c->col_num; i++) {
  40f5fa:	2500      	movs	r5, #0
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
  40f5fc:	f641 0215 	movw	r2, #6165	; 0x1815
  40f600:	2100      	movs	r1, #0
  40f602:	4658      	mov	r0, fp
  40f604:	4b8f      	ldr	r3, [pc, #572]	; (40f844 <grid_update+0x59c>)
  40f606:	4798      	blx	r3
    cont_w -= col_gap * (c->col_num - 1);
  40f608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40f60a:	1e53      	subs	r3, r2, #1
  40f60c:	fb13 f000 	smulbb	r0, r3, r0
  40f610:	9b08      	ldr	r3, [sp, #32]
  40f612:	1a18      	subs	r0, r3, r0
    lv_coord_t free_w = cont_w - grid_w;
  40f614:	1b45      	subs	r5, r0, r5
  40f616:	b22d      	sxth	r5, r5
  40f618:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    for(i = 0; i < c->col_num; i++) {
  40f61c:	b362      	cbz	r2, 40f678 <grid_update+0x3d0>
  40f61e:	9b07      	ldr	r3, [sp, #28]
  40f620:	1e98      	subs	r0, r3, #2
  40f622:	2200      	movs	r2, #0
  40f624:	f04f 3eff 	mov.w	lr, #4294967295
  40f628:	4611      	mov	r1, r2
        if(IS_FR(x)) {
  40f62a:	f645 769b 	movw	r6, #24475	; 0x5f9b
            lv_coord_t f = GET_FR(x);
  40f62e:	f8df c210 	ldr.w	ip, [pc, #528]	; 40f840 <grid_update+0x598>
  40f632:	e005      	b.n	40f640 <grid_update+0x398>
    for(i = 0; i < c->col_num; i++) {
  40f634:	2500      	movs	r5, #0
  40f636:	e7e1      	b.n	40f5fc <grid_update+0x354>
    for(i = 0; i < c->col_num; i++) {
  40f638:	3101      	adds	r1, #1
  40f63a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40f63c:	4299      	cmp	r1, r3
  40f63e:	d20f      	bcs.n	40f660 <grid_update+0x3b8>
        lv_coord_t x = col_templ[i];
  40f640:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
        if(IS_FR(x)) {
  40f644:	42b3      	cmp	r3, r6
  40f646:	ddf7      	ble.n	40f638 <grid_update+0x390>
            lv_coord_t f = GET_FR(x);
  40f648:	4463      	add	r3, ip
            c->w[i] = (free_w * f) / col_fr_cnt;
  40f64a:	b21b      	sxth	r3, r3
  40f64c:	fb03 f205 	mul.w	r2, r3, r5
  40f650:	fbb2 f2f4 	udiv	r2, r2, r4
  40f654:	9f11      	ldr	r7, [sp, #68]	; 0x44
  40f656:	f827 2011 	strh.w	r2, [r7, r1, lsl #1]
            last_fr_i = i;
  40f65a:	468e      	mov	lr, r1
            last_fr_x = f;
  40f65c:	461a      	mov	r2, r3
  40f65e:	e7eb      	b.n	40f638 <grid_update+0x390>
    if(last_fr_i >= 0) {
  40f660:	f1be 0f00 	cmp.w	lr, #0
  40f664:	db08      	blt.n	40f678 <grid_update+0x3d0>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
  40f666:	1aa3      	subs	r3, r4, r2
  40f668:	fb05 f303 	mul.w	r3, r5, r3
  40f66c:	fbb3 f4f4 	udiv	r4, r3, r4
  40f670:	1b2c      	subs	r4, r5, r4
  40f672:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f674:	f823 401e 	strh.w	r4, [r3, lr, lsl #1]
  40f678:	f641 0215 	movw	r2, #6165	; 0x1815
  40f67c:	2100      	movs	r1, #0
  40f67e:	4658      	mov	r0, fp
  40f680:	4c70      	ldr	r4, [pc, #448]	; (40f844 <grid_update+0x59c>)
  40f682:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  40f684:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
  40f688:	f641 0214 	movw	r2, #6164	; 0x1814
  40f68c:	2100      	movs	r1, #0
  40f68e:	4658      	mov	r0, fp
  40f690:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  40f692:	b206      	sxth	r6, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  40f694:	f241 426a 	movw	r2, #5226	; 0x146a
  40f698:	2100      	movs	r1, #0
  40f69a:	4658      	mov	r0, fp
  40f69c:	47a0      	blx	r4
    return (lv_base_dir_t)v.num;
  40f69e:	b2c0      	uxtb	r0, r0
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
  40f6a0:	2801      	cmp	r0, #1
  40f6a2:	bf14      	ite	ne
  40f6a4:	2500      	movne	r5, #0
  40f6a6:	2501      	moveq	r5, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  40f6a8:	f241 0201 	movw	r2, #4097	; 0x1001
  40f6ac:	2100      	movs	r1, #0
  40f6ae:	4658      	mov	r0, fp
  40f6b0:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  40f6b2:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  40f6b6:	f241 0204 	movw	r2, #4100	; 0x1004
  40f6ba:	2100      	movs	r1, #0
  40f6bc:	4658      	mov	r0, fp
  40f6be:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  40f6c0:	b207      	sxth	r7, r0
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
  40f6c2:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40f6c6:	4599      	cmp	r9, r3
  40f6c8:	d071      	beq.n	40f7ae <grid_update+0x506>
  40f6ca:	9c06      	ldr	r4, [sp, #24]
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
  40f6cc:	4658      	mov	r0, fp
  40f6ce:	4b5e      	ldr	r3, [pc, #376]	; (40f848 <grid_update+0x5a0>)
  40f6d0:	4798      	blx	r3
  40f6d2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
  40f6d4:	4b5d      	ldr	r3, [pc, #372]	; (40f84c <grid_update+0x5a4>)
  40f6d6:	881a      	ldrh	r2, [r3, #0]
  40f6d8:	2100      	movs	r1, #0
  40f6da:	4658      	mov	r0, fp
  40f6dc:	4b59      	ldr	r3, [pc, #356]	; (40f844 <grid_update+0x59c>)
  40f6de:	4798      	blx	r3
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
  40f6e0:	9503      	str	r5, [sp, #12]
  40f6e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40f6e4:	9302      	str	r3, [sp, #8]
  40f6e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f6e8:	9301      	str	r3, [sp, #4]
  40f6ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40f6ec:	9300      	str	r3, [sp, #0]
  40f6ee:	4643      	mov	r3, r8
  40f6f0:	b2c2      	uxtb	r2, r0
  40f6f2:	f004 0101 	and.w	r1, r4, #1
  40f6f6:	4648      	mov	r0, r9
  40f6f8:	4c55      	ldr	r4, [pc, #340]	; (40f850 <grid_update+0x5a8>)
  40f6fa:	47a0      	blx	r4
  40f6fc:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
  40f700:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40f704:	429f      	cmp	r7, r3
  40f706:	d059      	beq.n	40f7bc <grid_update+0x514>
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
  40f708:	4658      	mov	r0, fp
  40f70a:	4b52      	ldr	r3, [pc, #328]	; (40f854 <grid_update+0x5ac>)
  40f70c:	4798      	blx	r3
  40f70e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
  40f710:	4b51      	ldr	r3, [pc, #324]	; (40f858 <grid_update+0x5b0>)
  40f712:	881a      	ldrh	r2, [r3, #0]
  40f714:	2100      	movs	r1, #0
  40f716:	4658      	mov	r0, fp
  40f718:	4b4a      	ldr	r3, [pc, #296]	; (40f844 <grid_update+0x59c>)
  40f71a:	4798      	blx	r3
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
  40f71c:	2300      	movs	r3, #0
  40f71e:	9303      	str	r3, [sp, #12]
  40f720:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f722:	9302      	str	r3, [sp, #8]
  40f724:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40f726:	9301      	str	r3, [sp, #4]
  40f728:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f72a:	9300      	str	r3, [sp, #0]
  40f72c:	4633      	mov	r3, r6
  40f72e:	b2c2      	uxtb	r2, r0
  40f730:	9906      	ldr	r1, [sp, #24]
  40f732:	4620      	mov	r0, r4
  40f734:	4c46      	ldr	r4, [pc, #280]	; (40f850 <grid_update+0x5a8>)
  40f736:	47a0      	blx	r4
  40f738:	f8ad 0056 	strh.w	r0, [sp, #86]	; 0x56
    lv_memset_00(&hint, sizeof(hint));
  40f73c:	210c      	movs	r1, #12
  40f73e:	a80c      	add	r0, sp, #48	; 0x30
  40f740:	4b46      	ldr	r3, [pc, #280]	; (40f85c <grid_update+0x5b4>)
  40f742:	4798      	blx	r3
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
  40f744:	f241 0232 	movw	r2, #4146	; 0x1032
  40f748:	2100      	movs	r1, #0
  40f74a:	4658      	mov	r0, fp
  40f74c:	4e3d      	ldr	r6, [pc, #244]	; (40f844 <grid_update+0x59c>)
  40f74e:	47b0      	blx	r6
  40f750:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  40f752:	f641 0212 	movw	r2, #6162	; 0x1812
  40f756:	2100      	movs	r1, #0
  40f758:	4658      	mov	r0, fp
  40f75a:	47b0      	blx	r6
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
  40f75c:	b2ad      	uxth	r5, r5
  40f75e:	182c      	adds	r4, r5, r0
  40f760:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  40f762:	f641 0210 	movw	r2, #6160	; 0x1810
  40f766:	2100      	movs	r1, #0
  40f768:	4658      	mov	r0, fp
  40f76a:	47b0      	blx	r6
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
  40f76c:	4405      	add	r5, r0
  40f76e:	b2ad      	uxth	r5, r5
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
  40f770:	f8bb 3014 	ldrh.w	r3, [fp, #20]
  40f774:	441c      	add	r4, r3
  40f776:	b2a4      	uxth	r4, r4
  40f778:	4658      	mov	r0, fp
  40f77a:	4b39      	ldr	r3, [pc, #228]	; (40f860 <grid_update+0x5b8>)
  40f77c:	4798      	blx	r3
  40f77e:	1a20      	subs	r0, r4, r0
  40f780:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
  40f784:	f8bb 4016 	ldrh.w	r4, [fp, #22]
  40f788:	442c      	add	r4, r5
  40f78a:	b2a4      	uxth	r4, r4
  40f78c:	4658      	mov	r0, fp
  40f78e:	4b35      	ldr	r3, [pc, #212]	; (40f864 <grid_update+0x5bc>)
  40f790:	4798      	blx	r3
  40f792:	1a20      	subs	r0, r4, r0
  40f794:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
  40f798:	f8db 3008 	ldr.w	r3, [fp, #8]
  40f79c:	685a      	ldr	r2, [r3, #4]
  40f79e:	2a00      	cmp	r2, #0
  40f7a0:	f000 8214 	beq.w	40fbcc <grid_update+0x924>
  40f7a4:	f04f 0900 	mov.w	r9, #0
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
  40f7a8:	f8cd b014 	str.w	fp, [sp, #20]
  40f7ac:	e0df      	b.n	40f96e <grid_update+0x6c6>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
  40f7ae:	f89b 4023 	ldrb.w	r4, [fp, #35]	; 0x23
  40f7b2:	f084 0404 	eor.w	r4, r4, #4
  40f7b6:	f3c4 0480 	ubfx	r4, r4, #2, #1
  40f7ba:	e787      	b.n	40f6cc <grid_update+0x424>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
  40f7bc:	f89b 3023 	ldrb.w	r3, [fp, #35]	; 0x23
  40f7c0:	f083 0302 	eor.w	r3, r3, #2
  40f7c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
  40f7c8:	9306      	str	r3, [sp, #24]
  40f7ca:	e79d      	b.n	40f708 <grid_update+0x460>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
  40f7cc:	f1bb 0f00 	cmp.w	fp, #0
  40f7d0:	d005      	beq.n	40f7de <grid_update+0x536>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
  40f7d2:	f1bb 0f02 	cmp.w	fp, #2
  40f7d6:	bf08      	it	eq
  40f7d8:	f04f 0b00 	moveq.w	fp, #0
  40f7dc:	e127      	b.n	40fa2e <grid_update+0x786>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
  40f7de:	f04f 0b02 	mov.w	fp, #2
  40f7e2:	e124      	b.n	40fa2e <grid_update+0x786>
            x = c->x[col_pos];
  40f7e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40f7e6:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
            item->w_layout = 1;
  40f7ea:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40f7ee:	f043 0304 	orr.w	r3, r3, #4
  40f7f2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_w = col_w;
  40f7f6:	9f07      	ldr	r7, [sp, #28]
  40f7f8:	e13c      	b.n	40fa74 <grid_update+0x7cc>
            x = c->x[col_pos] + (col_w - item_w) / 2;
  40f7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40f7fc:	9b07      	ldr	r3, [sp, #28]
  40f7fe:	1bdb      	subs	r3, r3, r7
  40f800:	bf48      	it	mi
  40f802:	3301      	addmi	r3, #1
  40f804:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
  40f808:	eb06 0363 	add.w	r3, r6, r3, asr #1
  40f80c:	b21e      	sxth	r6, r3
            item->w_layout = 0;
  40f80e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40f812:	f36f 0382 	bfc	r3, #2, #1
  40f816:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  40f81a:	e12b      	b.n	40fa74 <grid_update+0x7cc>
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
  40f81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40f81e:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
  40f822:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40f824:	4433      	add	r3, r6
  40f826:	b29e      	uxth	r6, r3
  40f828:	4620      	mov	r0, r4
  40f82a:	4b0f      	ldr	r3, [pc, #60]	; (40f868 <grid_update+0x5c0>)
  40f82c:	4798      	blx	r3
  40f82e:	1a36      	subs	r6, r6, r0
  40f830:	b236      	sxth	r6, r6
            item->w_layout = 0;
  40f832:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40f836:	f36f 0382 	bfc	r3, #2, #1
  40f83a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  40f83e:	e119      	b.n	40fa74 <grid_update+0x7cc>
  40f840:	ffffa064 	.word	0xffffa064
  40f844:	00404f1d 	.word	0x00404f1d
  40f848:	004022ed 	.word	0x004022ed
  40f84c:	20439e4e 	.word	0x20439e4e
  40f850:	0040f129 	.word	0x0040f129
  40f854:	0040232d 	.word	0x0040232d
  40f858:	20439e46 	.word	0x20439e46
  40f85c:	004116ed 	.word	0x004116ed
  40f860:	004039d9 	.word	0x004039d9
  40f864:	00403a0d 	.word	0x00403a0d
  40f868:	004022d3 	.word	0x004022d3
  40f86c:	ffffa000 	.word	0xffffa000
            y = c->y[row_pos];
  40f870:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f872:	f933 501a 	ldrsh.w	r5, [r3, sl, lsl #1]
            item->h_layout = 1;
  40f876:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40f87a:	f043 0302 	orr.w	r3, r3, #2
  40f87e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_h = row_h;
  40f882:	f8dd 8020 	ldr.w	r8, [sp, #32]
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
  40f886:	4620      	mov	r0, r4
  40f888:	4bbd      	ldr	r3, [pc, #756]	; (40fb80 <grid_update+0x8d8>)
  40f88a:	4798      	blx	r3
  40f88c:	42b8      	cmp	r0, r7
  40f88e:	f000 8127 	beq.w	40fae0 <grid_update+0x838>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
  40f892:	8aa3      	ldrh	r3, [r4, #20]
  40f894:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
  40f898:	8ae3      	ldrh	r3, [r4, #22]
  40f89a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
  40f89e:	8b23      	ldrh	r3, [r4, #24]
  40f8a0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
  40f8a4:	8b63      	ldrh	r3, [r4, #26]
  40f8a6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_obj_invalidate(item);
  40f8aa:	4620      	mov	r0, r4
  40f8ac:	f8df a310 	ldr.w	sl, [pc, #784]	; 40fbc0 <grid_update+0x918>
  40f8b0:	47d0      	blx	sl
        lv_area_set_width(&item->coords, item_w);
  40f8b2:	f104 0314 	add.w	r3, r4, #20
  40f8b6:	4639      	mov	r1, r7
  40f8b8:	461f      	mov	r7, r3
  40f8ba:	4618      	mov	r0, r3
  40f8bc:	4bb1      	ldr	r3, [pc, #708]	; (40fb84 <grid_update+0x8dc>)
  40f8be:	4798      	blx	r3
        lv_area_set_height(&item->coords, item_h);
  40f8c0:	4641      	mov	r1, r8
  40f8c2:	4638      	mov	r0, r7
  40f8c4:	4bb0      	ldr	r3, [pc, #704]	; (40fb88 <grid_update+0x8e0>)
  40f8c6:	4798      	blx	r3
        lv_obj_invalidate(item);
  40f8c8:	4620      	mov	r0, r4
  40f8ca:	47d0      	blx	sl
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
  40f8cc:	aa0a      	add	r2, sp, #40	; 0x28
  40f8ce:	2127      	movs	r1, #39	; 0x27
  40f8d0:	4620      	mov	r0, r4
  40f8d2:	4fae      	ldr	r7, [pc, #696]	; (40fb8c <grid_update+0x8e4>)
  40f8d4:	47b8      	blx	r7
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
  40f8d6:	4620      	mov	r0, r4
  40f8d8:	4bad      	ldr	r3, [pc, #692]	; (40fb90 <grid_update+0x8e8>)
  40f8da:	4798      	blx	r3
  40f8dc:	4622      	mov	r2, r4
  40f8de:	2122      	movs	r1, #34	; 0x22
  40f8e0:	47b8      	blx	r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
  40f8e2:	f243 020c 	movw	r2, #12300	; 0x300c
  40f8e6:	2100      	movs	r1, #0
  40f8e8:	4620      	mov	r0, r4
  40f8ea:	4faa      	ldr	r7, [pc, #680]	; (40fb94 <grid_update+0x8ec>)
  40f8ec:	47b8      	blx	r7
  40f8ee:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
  40f8f0:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
  40f8f4:	f243 020d 	movw	r2, #12301	; 0x300d
  40f8f8:	2100      	movs	r1, #0
  40f8fa:	4620      	mov	r0, r4
  40f8fc:	47b8      	blx	r7
  40f8fe:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
  40f900:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(item);
  40f904:	4620      	mov	r0, r4
  40f906:	4b9e      	ldr	r3, [pc, #632]	; (40fb80 <grid_update+0x8d8>)
  40f908:	4798      	blx	r3
  40f90a:	9006      	str	r0, [sp, #24]
    lv_coord_t h = lv_obj_get_height(item);
  40f90c:	4620      	mov	r0, r4
  40f90e:	4ba2      	ldr	r3, [pc, #648]	; (40fb98 <grid_update+0x8f0>)
  40f910:	4798      	blx	r3
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
  40f912:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
  40f916:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
  40f91a:	f000 80e8 	beq.w	40faee <grid_update+0x846>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
  40f91e:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
  40f922:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
  40f926:	f000 80fa 	beq.w	40fb1e <grid_update+0x876>
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
  40f92a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  40f92e:	8aa2      	ldrh	r2, [r4, #20]
  40f930:	1a9b      	subs	r3, r3, r2
  40f932:	441e      	add	r6, r3
  40f934:	44b3      	add	fp, r6
  40f936:	fa1f fb8b 	uxth.w	fp, fp
  40f93a:	fa0f f68b 	sxth.w	r6, fp
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
  40f93e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  40f942:	8ae2      	ldrh	r2, [r4, #22]
  40f944:	1a9b      	subs	r3, r3, r2
  40f946:	441d      	add	r5, r3
  40f948:	44aa      	add	sl, r5
  40f94a:	fa1f fa8a 	uxth.w	sl, sl
  40f94e:	fa0f f58a 	sxth.w	r5, sl
    if(diff_x || diff_y) {
  40f952:	2e00      	cmp	r6, #0
  40f954:	f040 80fa 	bne.w	40fb4c <grid_update+0x8a4>
  40f958:	2d00      	cmp	r5, #0
  40f95a:	f040 80f7 	bne.w	40fb4c <grid_update+0x8a4>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
  40f95e:	f109 0901 	add.w	r9, r9, #1
  40f962:	9b05      	ldr	r3, [sp, #20]
  40f964:	689b      	ldr	r3, [r3, #8]
  40f966:	685a      	ldr	r2, [r3, #4]
  40f968:	454a      	cmp	r2, r9
  40f96a:	f240 812d 	bls.w	40fbc8 <grid_update+0x920>
        lv_obj_t * item = cont->spec_attr->children[i];
  40f96e:	681b      	ldr	r3, [r3, #0]
  40f970:	f853 4029 	ldr.w	r4, [r3, r9, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
  40f974:	4989      	ldr	r1, [pc, #548]	; (40fb9c <grid_update+0x8f4>)
  40f976:	4620      	mov	r0, r4
  40f978:	4b89      	ldr	r3, [pc, #548]	; (40fba0 <grid_update+0x8f8>)
  40f97a:	4798      	blx	r3
  40f97c:	2800      	cmp	r0, #0
  40f97e:	d1ee      	bne.n	40f95e <grid_update+0x6b6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
  40f980:	4b88      	ldr	r3, [pc, #544]	; (40fba4 <grid_update+0x8fc>)
  40f982:	881a      	ldrh	r2, [r3, #0]
  40f984:	2100      	movs	r1, #0
  40f986:	4620      	mov	r0, r4
  40f988:	4d82      	ldr	r5, [pc, #520]	; (40fb94 <grid_update+0x8ec>)
  40f98a:	47a8      	blx	r5
    uint32_t col_span = get_col_span(item);
  40f98c:	b2c7      	uxtb	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
  40f98e:	4b86      	ldr	r3, [pc, #536]	; (40fba8 <grid_update+0x900>)
  40f990:	881a      	ldrh	r2, [r3, #0]
  40f992:	2100      	movs	r1, #0
  40f994:	4620      	mov	r0, r4
  40f996:	47a8      	blx	r5
    uint32_t row_span = get_row_span(item);
  40f998:	b2c5      	uxtb	r5, r0
    if(row_span == 0 || col_span == 0) return;
  40f99a:	2d00      	cmp	r5, #0
  40f99c:	d0df      	beq.n	40f95e <grid_update+0x6b6>
  40f99e:	2f00      	cmp	r7, #0
  40f9a0:	d0dd      	beq.n	40f95e <grid_update+0x6b6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
  40f9a2:	4b82      	ldr	r3, [pc, #520]	; (40fbac <grid_update+0x904>)
  40f9a4:	881a      	ldrh	r2, [r3, #0]
  40f9a6:	2100      	movs	r1, #0
  40f9a8:	4620      	mov	r0, r4
  40f9aa:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 40fb94 <grid_update+0x8ec>
  40f9ae:	47c0      	blx	r8
    uint32_t col_pos = get_col_pos(item);
  40f9b0:	b2c6      	uxtb	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
  40f9b2:	4b7f      	ldr	r3, [pc, #508]	; (40fbb0 <grid_update+0x908>)
  40f9b4:	881a      	ldrh	r2, [r3, #0]
  40f9b6:	2100      	movs	r1, #0
  40f9b8:	4620      	mov	r0, r4
  40f9ba:	47c0      	blx	r8
    uint32_t row_pos = get_row_pos(item);
  40f9bc:	fa5f fa80 	uxtb.w	sl, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
  40f9c0:	4b7c      	ldr	r3, [pc, #496]	; (40fbb4 <grid_update+0x90c>)
  40f9c2:	881a      	ldrh	r2, [r3, #0]
  40f9c4:	2100      	movs	r1, #0
  40f9c6:	4620      	mov	r0, r4
  40f9c8:	47c0      	blx	r8
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
  40f9ca:	fa5f fb80 	uxtb.w	fp, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
  40f9ce:	4b7a      	ldr	r3, [pc, #488]	; (40fbb8 <grid_update+0x910>)
  40f9d0:	881a      	ldrh	r2, [r3, #0]
  40f9d2:	2100      	movs	r1, #0
  40f9d4:	4620      	mov	r0, r4
  40f9d6:	47c0      	blx	r8
  40f9d8:	9006      	str	r0, [sp, #24]
    lv_coord_t col_x1 = c->x[col_pos];
  40f9da:	990f      	ldr	r1, [sp, #60]	; 0x3c
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
  40f9dc:	4437      	add	r7, r6
  40f9de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f9e2:	4417      	add	r7, r2
  40f9e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40f9e6:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
  40f9ea:	f831 0017 	ldrh.w	r0, [r1, r7, lsl #1]
  40f9ee:	4403      	add	r3, r0
    lv_coord_t col_w = col_x2 - col_x1;
  40f9f0:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
  40f9f4:	1a5b      	subs	r3, r3, r1
  40f9f6:	b29b      	uxth	r3, r3
  40f9f8:	9309      	str	r3, [sp, #36]	; 0x24
  40f9fa:	b21b      	sxth	r3, r3
  40f9fc:	9307      	str	r3, [sp, #28]
    lv_coord_t row_y1 = c->y[row_pos];
  40f9fe:	9910      	ldr	r1, [sp, #64]	; 0x40
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
  40fa00:	4455      	add	r5, sl
  40fa02:	4415      	add	r5, r2
  40fa04:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40fa06:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  40fa0a:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
  40fa0e:	441d      	add	r5, r3
    lv_coord_t row_h = row_y2 - row_y1;
  40fa10:	f831 301a 	ldrh.w	r3, [r1, sl, lsl #1]
  40fa14:	1aed      	subs	r5, r5, r3
  40fa16:	b2ad      	uxth	r5, r5
  40fa18:	b22b      	sxth	r3, r5
  40fa1a:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
  40fa1c:	f241 426a 	movw	r2, #5226	; 0x146a
  40fa20:	2100      	movs	r1, #0
  40fa22:	4620      	mov	r0, r4
  40fa24:	47c0      	blx	r8
    return (lv_base_dir_t)v.num;
  40fa26:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
  40fa28:	2801      	cmp	r0, #1
  40fa2a:	f43f aecf 	beq.w	40f7cc <grid_update+0x524>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fa2e:	8b27      	ldrh	r7, [r4, #24]
  40fa30:	3701      	adds	r7, #1
  40fa32:	8aa3      	ldrh	r3, [r4, #20]
  40fa34:	1aff      	subs	r7, r7, r3
  40fa36:	b23f      	sxth	r7, r7
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fa38:	f8b4 801a 	ldrh.w	r8, [r4, #26]
  40fa3c:	f108 0801 	add.w	r8, r8, #1
  40fa40:	8ae3      	ldrh	r3, [r4, #22]
  40fa42:	eba8 0803 	sub.w	r8, r8, r3
  40fa46:	fa0f f888 	sxth.w	r8, r8
    switch(col_align) {
  40fa4a:	f1bb 0f02 	cmp.w	fp, #2
  40fa4e:	f43f aee5 	beq.w	40f81c <grid_update+0x574>
  40fa52:	f1bb 0f03 	cmp.w	fp, #3
  40fa56:	f43f aec5 	beq.w	40f7e4 <grid_update+0x53c>
  40fa5a:	f1bb 0f01 	cmp.w	fp, #1
  40fa5e:	f43f aecc 	beq.w	40f7fa <grid_update+0x552>
            x = c->x[col_pos];
  40fa62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40fa64:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
            item->w_layout = 0;
  40fa68:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40fa6c:	f36f 0382 	bfc	r3, #2, #1
  40fa70:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    switch(row_align) {
  40fa74:	f89d 3018 	ldrb.w	r3, [sp, #24]
  40fa78:	2b02      	cmp	r3, #2
  40fa7a:	d020      	beq.n	40fabe <grid_update+0x816>
  40fa7c:	2b03      	cmp	r3, #3
  40fa7e:	f43f aef7 	beq.w	40f870 <grid_update+0x5c8>
  40fa82:	2b01      	cmp	r3, #1
  40fa84:	d009      	beq.n	40fa9a <grid_update+0x7f2>
            y = c->y[row_pos];
  40fa86:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40fa88:	f933 501a 	ldrsh.w	r5, [r3, sl, lsl #1]
            item->h_layout = 0;
  40fa8c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40fa90:	f36f 0341 	bfc	r3, #1, #1
  40fa94:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  40fa98:	e6f5      	b.n	40f886 <grid_update+0x5de>
            y = c->y[row_pos] + (row_h - item_h) / 2;
  40fa9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40fa9c:	9b08      	ldr	r3, [sp, #32]
  40fa9e:	ebb3 0308 	subs.w	r3, r3, r8
  40faa2:	bf48      	it	mi
  40faa4:	3301      	addmi	r3, #1
  40faa6:	f832 501a 	ldrh.w	r5, [r2, sl, lsl #1]
  40faaa:	eb05 0363 	add.w	r3, r5, r3, asr #1
  40faae:	b21d      	sxth	r5, r3
            item->h_layout = 0;
  40fab0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40fab4:	f36f 0341 	bfc	r3, #1, #1
  40fab8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  40fabc:	e6e3      	b.n	40f886 <grid_update+0x5de>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
  40fabe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40fac0:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
  40fac4:	441d      	add	r5, r3
  40fac6:	b2ad      	uxth	r5, r5
  40fac8:	4620      	mov	r0, r4
  40faca:	4b33      	ldr	r3, [pc, #204]	; (40fb98 <grid_update+0x8f0>)
  40facc:	4798      	blx	r3
  40face:	1a2d      	subs	r5, r5, r0
  40fad0:	b22d      	sxth	r5, r5
            item->h_layout = 0;
  40fad2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  40fad6:	f36f 0341 	bfc	r3, #1, #1
  40fada:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  40fade:	e6d2      	b.n	40f886 <grid_update+0x5de>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
  40fae0:	4620      	mov	r0, r4
  40fae2:	4b2d      	ldr	r3, [pc, #180]	; (40fb98 <grid_update+0x8f0>)
  40fae4:	4798      	blx	r3
  40fae6:	4540      	cmp	r0, r8
  40fae8:	f47f aed3 	bne.w	40f892 <grid_update+0x5ea>
  40faec:	e6f9      	b.n	40f8e2 <grid_update+0x63a>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
  40faee:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
  40faf2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40faf6:	f73f af12 	bgt.w	40f91e <grid_update+0x676>
  40fafa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40fafe:	bfc8      	it	gt
  40fb00:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  40fb04:	9a06      	ldr	r2, [sp, #24]
  40fb06:	fb03 f302 	mul.w	r3, r3, r2
  40fb0a:	4a2c      	ldr	r2, [pc, #176]	; (40fbbc <grid_update+0x914>)
  40fb0c:	fb82 1203 	smull	r1, r2, r2, r3
  40fb10:	ea4f 7be3 	mov.w	fp, r3, asr #31
  40fb14:	ebcb 1b62 	rsb	fp, fp, r2, asr #5
  40fb18:	fa0f fb8b 	sxth.w	fp, fp
  40fb1c:	e6ff      	b.n	40f91e <grid_update+0x676>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
  40fb1e:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
  40fb22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40fb26:	f73f af00 	bgt.w	40f92a <grid_update+0x682>
  40fb2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40fb2e:	bfc8      	it	gt
  40fb30:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
  40fb34:	fb03 f300 	mul.w	r3, r3, r0
  40fb38:	4a20      	ldr	r2, [pc, #128]	; (40fbbc <grid_update+0x914>)
  40fb3a:	fb82 1203 	smull	r1, r2, r2, r3
  40fb3e:	ea4f 7ae3 	mov.w	sl, r3, asr #31
  40fb42:	ebca 1a62 	rsb	sl, sl, r2, asr #5
  40fb46:	fa0f fa8a 	sxth.w	sl, sl
  40fb4a:	e6ee      	b.n	40f92a <grid_update+0x682>
        lv_obj_invalidate(item);
  40fb4c:	4620      	mov	r0, r4
  40fb4e:	4f1c      	ldr	r7, [pc, #112]	; (40fbc0 <grid_update+0x918>)
  40fb50:	47b8      	blx	r7
        item->coords.x1 += diff_x;
  40fb52:	8aa3      	ldrh	r3, [r4, #20]
  40fb54:	445b      	add	r3, fp
  40fb56:	82a3      	strh	r3, [r4, #20]
        item->coords.x2 += diff_x;
  40fb58:	8b23      	ldrh	r3, [r4, #24]
  40fb5a:	449b      	add	fp, r3
  40fb5c:	f8a4 b018 	strh.w	fp, [r4, #24]
        item->coords.y1 += diff_y;
  40fb60:	8ae3      	ldrh	r3, [r4, #22]
  40fb62:	4453      	add	r3, sl
  40fb64:	82e3      	strh	r3, [r4, #22]
        item->coords.y2 += diff_y;
  40fb66:	8b63      	ldrh	r3, [r4, #26]
  40fb68:	449a      	add	sl, r3
  40fb6a:	f8a4 a01a 	strh.w	sl, [r4, #26]
        lv_obj_invalidate(item);
  40fb6e:	4620      	mov	r0, r4
  40fb70:	47b8      	blx	r7
        lv_obj_move_children_by(item, diff_x, diff_y, true);
  40fb72:	2301      	movs	r3, #1
  40fb74:	462a      	mov	r2, r5
  40fb76:	4631      	mov	r1, r6
  40fb78:	4620      	mov	r0, r4
  40fb7a:	4c12      	ldr	r4, [pc, #72]	; (40fbc4 <grid_update+0x91c>)
  40fb7c:	47a0      	blx	r4
  40fb7e:	e6ee      	b.n	40f95e <grid_update+0x6b6>
  40fb80:	004022d3 	.word	0x004022d3
  40fb84:	00410761 	.word	0x00410761
  40fb88:	0041076b 	.word	0x0041076b
  40fb8c:	00400491 	.word	0x00400491
  40fb90:	00405ded 	.word	0x00405ded
  40fb94:	00404f1d 	.word	0x00404f1d
  40fb98:	004022df 	.word	0x004022df
  40fb9c:	00018001 	.word	0x00018001
  40fba0:	004013f3 	.word	0x004013f3
  40fba4:	20439e44 	.word	0x20439e44
  40fba8:	20439e50 	.word	0x20439e50
  40fbac:	20439e4a 	.word	0x20439e4a
  40fbb0:	20439e56 	.word	0x20439e56
  40fbb4:	20439e52 	.word	0x20439e52
  40fbb8:	20439e4c 	.word	0x20439e4c
  40fbbc:	51eb851f 	.word	0x51eb851f
  40fbc0:	0040262d 	.word	0x0040262d
  40fbc4:	00402471 	.word	0x00402471
  40fbc8:	f8dd b014 	ldr.w	fp, [sp, #20]
    lv_mem_buf_release(calc->x);
  40fbcc:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40fbce:	4c13      	ldr	r4, [pc, #76]	; (40fc1c <grid_update+0x974>)
  40fbd0:	47a0      	blx	r4
    lv_mem_buf_release(calc->y);
  40fbd2:	9810      	ldr	r0, [sp, #64]	; 0x40
  40fbd4:	47a0      	blx	r4
    lv_mem_buf_release(calc->w);
  40fbd6:	9811      	ldr	r0, [sp, #68]	; 0x44
  40fbd8:	47a0      	blx	r4
    lv_mem_buf_release(calc->h);
  40fbda:	9812      	ldr	r0, [sp, #72]	; 0x48
  40fbdc:	47a0      	blx	r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  40fbde:	f241 0201 	movw	r2, #4097	; 0x1001
  40fbe2:	2100      	movs	r1, #0
  40fbe4:	4658      	mov	r0, fp
  40fbe6:	4c0e      	ldr	r4, [pc, #56]	; (40fc20 <grid_update+0x978>)
  40fbe8:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  40fbea:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
  40fbec:	f241 0204 	movw	r2, #4100	; 0x1004
  40fbf0:	2100      	movs	r1, #0
  40fbf2:	4658      	mov	r0, fp
  40fbf4:	47a0      	blx	r4
    return (lv_coord_t)v.num;
  40fbf6:	b200      	sxth	r0, r0
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
  40fbf8:	f242 73d1 	movw	r3, #10193	; 0x27d1
  40fbfc:	429d      	cmp	r5, r3
  40fbfe:	d008      	beq.n	40fc12 <grid_update+0x96a>
  40fc00:	4298      	cmp	r0, r3
  40fc02:	d006      	beq.n	40fc12 <grid_update+0x96a>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
  40fc04:	2200      	movs	r2, #0
  40fc06:	2129      	movs	r1, #41	; 0x29
  40fc08:	4658      	mov	r0, fp
  40fc0a:	4b06      	ldr	r3, [pc, #24]	; (40fc24 <grid_update+0x97c>)
  40fc0c:	4798      	blx	r3
  40fc0e:	f7ff bb62 	b.w	40f2d6 <grid_update+0x2e>
        lv_obj_refr_size(cont);
  40fc12:	4658      	mov	r0, fp
  40fc14:	4b04      	ldr	r3, [pc, #16]	; (40fc28 <grid_update+0x980>)
  40fc16:	4798      	blx	r3
  40fc18:	e7f4      	b.n	40fc04 <grid_update+0x95c>
  40fc1a:	bf00      	nop
  40fc1c:	00411105 	.word	0x00411105
  40fc20:	00404f1d 	.word	0x00404f1d
  40fc24:	00400491 	.word	0x00400491
  40fc28:	00402bf9 	.word	0x00402bf9

0040fc2c <lv_grid_init>:
{
  40fc2c:	b510      	push	{r4, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
  40fc2e:	2100      	movs	r1, #0
  40fc30:	481c      	ldr	r0, [pc, #112]	; (40fca4 <lv_grid_init+0x78>)
  40fc32:	4b1d      	ldr	r3, [pc, #116]	; (40fca8 <lv_grid_init+0x7c>)
  40fc34:	4798      	blx	r3
  40fc36:	4b1d      	ldr	r3, [pc, #116]	; (40fcac <lv_grid_init+0x80>)
  40fc38:	6018      	str	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc3a:	4c1d      	ldr	r4, [pc, #116]	; (40fcb0 <lv_grid_init+0x84>)
  40fc3c:	47a0      	blx	r4
  40fc3e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc42:	4b1c      	ldr	r3, [pc, #112]	; (40fcb4 <lv_grid_init+0x88>)
  40fc44:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc46:	47a0      	blx	r4
  40fc48:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc4c:	4b1a      	ldr	r3, [pc, #104]	; (40fcb8 <lv_grid_init+0x8c>)
  40fc4e:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc50:	47a0      	blx	r4
  40fc52:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc56:	4b19      	ldr	r3, [pc, #100]	; (40fcbc <lv_grid_init+0x90>)
  40fc58:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc5a:	47a0      	blx	r4
  40fc5c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc60:	4b17      	ldr	r3, [pc, #92]	; (40fcc0 <lv_grid_init+0x94>)
  40fc62:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc64:	47a0      	blx	r4
  40fc66:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc6a:	4b16      	ldr	r3, [pc, #88]	; (40fcc4 <lv_grid_init+0x98>)
  40fc6c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc6e:	47a0      	blx	r4
  40fc70:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc74:	4b14      	ldr	r3, [pc, #80]	; (40fcc8 <lv_grid_init+0x9c>)
  40fc76:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc78:	47a0      	blx	r4
  40fc7a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc7e:	4b13      	ldr	r3, [pc, #76]	; (40fccc <lv_grid_init+0xa0>)
  40fc80:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc82:	47a0      	blx	r4
  40fc84:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc88:	4b11      	ldr	r3, [pc, #68]	; (40fcd0 <lv_grid_init+0xa4>)
  40fc8a:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc8c:	47a0      	blx	r4
  40fc8e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc92:	4b10      	ldr	r3, [pc, #64]	; (40fcd4 <lv_grid_init+0xa8>)
  40fc94:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
  40fc96:	47a0      	blx	r4
  40fc98:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  40fc9c:	4b0e      	ldr	r3, [pc, #56]	; (40fcd8 <lv_grid_init+0xac>)
  40fc9e:	8018      	strh	r0, [r3, #0]
  40fca0:	bd10      	pop	{r4, pc}
  40fca2:	bf00      	nop
  40fca4:	0040f2a9 	.word	0x0040f2a9
  40fca8:	00402219 	.word	0x00402219
  40fcac:	20439e58 	.word	0x20439e58
  40fcb0:	00412231 	.word	0x00412231
  40fcb4:	20439e54 	.word	0x20439e54
  40fcb8:	20439e48 	.word	0x20439e48
  40fcbc:	20439e4e 	.word	0x20439e4e
  40fcc0:	20439e46 	.word	0x20439e46
  40fcc4:	20439e50 	.word	0x20439e50
  40fcc8:	20439e56 	.word	0x20439e56
  40fccc:	20439e44 	.word	0x20439e44
  40fcd0:	20439e4a 	.word	0x20439e4a
  40fcd4:	20439e52 	.word	0x20439e52
  40fcd8:	20439e4c 	.word	0x20439e4c

0040fcdc <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
  40fcdc:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
  40fcde:	4b02      	ldr	r3, [pc, #8]	; (40fce8 <lv_extra_init+0xc>)
  40fce0:	4798      	blx	r3
#endif

#if LV_USE_GRID
    lv_grid_init();
  40fce2:	4b02      	ldr	r3, [pc, #8]	; (40fcec <lv_extra_init+0x10>)
  40fce4:	4798      	blx	r3
  40fce6:	bd08      	pop	{r3, pc}
  40fce8:	0040f0d1 	.word	0x0040f0d1
  40fcec:	0040fc2d 	.word	0x0040fc2d

0040fcf0 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
  40fcf0:	b510      	push	{r4, lr}
  40fcf2:	b084      	sub	sp, #16
    LV_ASSERT_NULL(font_p);
  40fcf4:	b118      	cbz	r0, 40fcfe <lv_font_get_glyph_bitmap+0xe>
    return font_p->get_glyph_bitmap(font_p, letter);
  40fcf6:	6842      	ldr	r2, [r0, #4]
  40fcf8:	4790      	blx	r2
}
  40fcfa:	b004      	add	sp, #16
  40fcfc:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(font_p);
  40fcfe:	4b06      	ldr	r3, [pc, #24]	; (40fd18 <lv_font_get_glyph_bitmap+0x28>)
  40fd00:	9302      	str	r3, [sp, #8]
  40fd02:	4b06      	ldr	r3, [pc, #24]	; (40fd1c <lv_font_get_glyph_bitmap+0x2c>)
  40fd04:	9301      	str	r3, [sp, #4]
  40fd06:	4b06      	ldr	r3, [pc, #24]	; (40fd20 <lv_font_get_glyph_bitmap+0x30>)
  40fd08:	9300      	str	r3, [sp, #0]
  40fd0a:	4b06      	ldr	r3, [pc, #24]	; (40fd24 <lv_font_get_glyph_bitmap+0x34>)
  40fd0c:	2233      	movs	r2, #51	; 0x33
  40fd0e:	4906      	ldr	r1, [pc, #24]	; (40fd28 <lv_font_get_glyph_bitmap+0x38>)
  40fd10:	2003      	movs	r0, #3
  40fd12:	4c06      	ldr	r4, [pc, #24]	; (40fd2c <lv_font_get_glyph_bitmap+0x3c>)
  40fd14:	47a0      	blx	r4
  40fd16:	e7fe      	b.n	40fd16 <lv_font_get_glyph_bitmap+0x26>
  40fd18:	0041cd00 	.word	0x0041cd00
  40fd1c:	0041cd10 	.word	0x0041cd10
  40fd20:	0041c098 	.word	0x0041c098
  40fd24:	0041cc84 	.word	0x0041cc84
  40fd28:	0041ccd0 	.word	0x0041ccd0
  40fd2c:	00410edd 	.word	0x00410edd

0040fd30 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
  40fd30:	b530      	push	{r4, r5, lr}
  40fd32:	b085      	sub	sp, #20
    LV_ASSERT_NULL(font_p);
  40fd34:	b118      	cbz	r0, 40fd3e <lv_font_get_glyph_dsc+0xe>
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
  40fd36:	6805      	ldr	r5, [r0, #0]
  40fd38:	47a8      	blx	r5
}
  40fd3a:	b005      	add	sp, #20
  40fd3c:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_NULL(font_p);
  40fd3e:	4b06      	ldr	r3, [pc, #24]	; (40fd58 <lv_font_get_glyph_dsc+0x28>)
  40fd40:	9302      	str	r3, [sp, #8]
  40fd42:	4b06      	ldr	r3, [pc, #24]	; (40fd5c <lv_font_get_glyph_dsc+0x2c>)
  40fd44:	9301      	str	r3, [sp, #4]
  40fd46:	4b06      	ldr	r3, [pc, #24]	; (40fd60 <lv_font_get_glyph_dsc+0x30>)
  40fd48:	9300      	str	r3, [sp, #0]
  40fd4a:	4b06      	ldr	r3, [pc, #24]	; (40fd64 <lv_font_get_glyph_dsc+0x34>)
  40fd4c:	2242      	movs	r2, #66	; 0x42
  40fd4e:	4906      	ldr	r1, [pc, #24]	; (40fd68 <lv_font_get_glyph_dsc+0x38>)
  40fd50:	2003      	movs	r0, #3
  40fd52:	4c06      	ldr	r4, [pc, #24]	; (40fd6c <lv_font_get_glyph_dsc+0x3c>)
  40fd54:	47a0      	blx	r4
  40fd56:	e7fe      	b.n	40fd56 <lv_font_get_glyph_dsc+0x26>
  40fd58:	0041cd00 	.word	0x0041cd00
  40fd5c:	0041cd10 	.word	0x0041cd10
  40fd60:	0041c098 	.word	0x0041c098
  40fd64:	0041cca0 	.word	0x0041cca0
  40fd68:	0041ccd0 	.word	0x0041ccd0
  40fd6c:	00410edd 	.word	0x00410edd

0040fd70 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
  40fd70:	b510      	push	{r4, lr}
  40fd72:	b088      	sub	sp, #32
    LV_ASSERT_NULL(font);
  40fd74:	b148      	cbz	r0, 40fd8a <lv_font_get_glyph_width+0x1a>
  40fd76:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
  40fd78:	460a      	mov	r2, r1
  40fd7a:	a905      	add	r1, sp, #20
  40fd7c:	4c0a      	ldr	r4, [pc, #40]	; (40fda8 <lv_font_get_glyph_width+0x38>)
  40fd7e:	47a0      	blx	r4
    if(ret) return g.adv_w;
  40fd80:	b180      	cbz	r0, 40fda4 <lv_font_get_glyph_width+0x34>
  40fd82:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    else return 0;
}
  40fd86:	b008      	add	sp, #32
  40fd88:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(font);
  40fd8a:	4b08      	ldr	r3, [pc, #32]	; (40fdac <lv_font_get_glyph_width+0x3c>)
  40fd8c:	9302      	str	r3, [sp, #8]
  40fd8e:	4b08      	ldr	r3, [pc, #32]	; (40fdb0 <lv_font_get_glyph_width+0x40>)
  40fd90:	9301      	str	r3, [sp, #4]
  40fd92:	4b08      	ldr	r3, [pc, #32]	; (40fdb4 <lv_font_get_glyph_width+0x44>)
  40fd94:	9300      	str	r3, [sp, #0]
  40fd96:	4b08      	ldr	r3, [pc, #32]	; (40fdb8 <lv_font_get_glyph_width+0x48>)
  40fd98:	224f      	movs	r2, #79	; 0x4f
  40fd9a:	4908      	ldr	r1, [pc, #32]	; (40fdbc <lv_font_get_glyph_width+0x4c>)
  40fd9c:	2003      	movs	r0, #3
  40fd9e:	4c08      	ldr	r4, [pc, #32]	; (40fdc0 <lv_font_get_glyph_width+0x50>)
  40fda0:	47a0      	blx	r4
  40fda2:	e7fe      	b.n	40fda2 <lv_font_get_glyph_width+0x32>
    else return 0;
  40fda4:	2000      	movs	r0, #0
  40fda6:	e7ee      	b.n	40fd86 <lv_font_get_glyph_width+0x16>
  40fda8:	0040fd31 	.word	0x0040fd31
  40fdac:	0041cd00 	.word	0x0041cd00
  40fdb0:	0041cd20 	.word	0x0041cd20
  40fdb4:	0041c098 	.word	0x0041c098
  40fdb8:	0041ccb8 	.word	0x0041ccb8
  40fdbc:	0041ccd0 	.word	0x0041ccd0
  40fdc0:	00410edd 	.word	0x00410edd

0040fdc4 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  40fdc4:	7803      	ldrb	r3, [r0, #0]
  40fdc6:	780a      	ldrb	r2, [r1, #0]
  40fdc8:	4293      	cmp	r3, r2
  40fdca:	d001      	beq.n	40fdd0 <kern_pair_8_compare+0xc>
  40fdcc:	1a98      	subs	r0, r3, r2
  40fdce:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  40fdd0:	7840      	ldrb	r0, [r0, #1]
  40fdd2:	784b      	ldrb	r3, [r1, #1]
  40fdd4:	1ac0      	subs	r0, r0, r3

}
  40fdd6:	4770      	bx	lr

0040fdd8 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  40fdd8:	8803      	ldrh	r3, [r0, #0]
  40fdda:	880a      	ldrh	r2, [r1, #0]
  40fddc:	4293      	cmp	r3, r2
  40fdde:	d001      	beq.n	40fde4 <kern_pair_16_compare+0xc>
  40fde0:	1a98      	subs	r0, r3, r2
  40fde2:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  40fde4:	8840      	ldrh	r0, [r0, #2]
  40fde6:	884b      	ldrh	r3, [r1, #2]
  40fde8:	1ac0      	subs	r0, r0, r3
}
  40fdea:	4770      	bx	lr

0040fdec <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  40fdec:	8800      	ldrh	r0, [r0, #0]
  40fdee:	880b      	ldrh	r3, [r1, #0]
}
  40fdf0:	1ac0      	subs	r0, r0, r3
  40fdf2:	4770      	bx	lr

0040fdf4 <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  40fdf4:	460b      	mov	r3, r1
  40fdf6:	2900      	cmp	r1, #0
  40fdf8:	d07a      	beq.n	40fef0 <get_glyph_dsc_id+0xfc>
{
  40fdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fdfe:	b084      	sub	sp, #16
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
  40fe00:	6904      	ldr	r4, [r0, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
  40fe02:	6966      	ldr	r6, [r4, #20]
  40fe04:	2e00      	cmp	r6, #0
  40fe06:	d077      	beq.n	40fef8 <get_glyph_dsc_id+0x104>
  40fe08:	6832      	ldr	r2, [r6, #0]
  40fe0a:	4291      	cmp	r1, r2
  40fe0c:	d01f      	beq.n	40fe4e <get_glyph_dsc_id+0x5a>
    for(i = 0; i < fdsc->cmap_num; i++) {
  40fe0e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
  40fe12:	f3cc 0c08 	ubfx	ip, ip, #0, #9
  40fe16:	f1bc 0f00 	cmp.w	ip, #0
  40fe1a:	d064      	beq.n	40fee6 <get_glyph_dsc_id+0xf2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  40fe1c:	68a1      	ldr	r1, [r4, #8]
  40fe1e:	6808      	ldr	r0, [r1, #0]
  40fe20:	1a1a      	subs	r2, r3, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
  40fe22:	8888      	ldrh	r0, [r1, #4]
  40fe24:	4282      	cmp	r2, r0
  40fe26:	d814      	bhi.n	40fe52 <get_glyph_dsc_id+0x5e>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  40fe28:	f04f 0800 	mov.w	r8, #0
  40fe2c:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  40fe2e:	7c8b      	ldrb	r3, [r1, #18]
  40fe30:	2b02      	cmp	r3, #2
  40fe32:	d020      	beq.n	40fe76 <get_glyph_dsc_id+0x82>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  40fe34:	bb13      	cbnz	r3, 40fe7c <get_glyph_dsc_id+0x88>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  40fe36:	68cb      	ldr	r3, [r1, #12]
  40fe38:	5c98      	ldrb	r0, [r3, r2]
  40fe3a:	88cb      	ldrh	r3, [r1, #6]
  40fe3c:	4418      	add	r0, r3
        if(fdsc->cache) {
  40fe3e:	6963      	ldr	r3, [r4, #20]
  40fe40:	b113      	cbz	r3, 40fe48 <get_glyph_dsc_id+0x54>
            fdsc->cache->last_letter = letter;
  40fe42:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
  40fe44:	6963      	ldr	r3, [r4, #20]
  40fe46:	6058      	str	r0, [r3, #4]
}
  40fe48:	b004      	add	sp, #16
  40fe4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
  40fe4e:	6870      	ldr	r0, [r6, #4]
  40fe50:	e7fa      	b.n	40fe48 <get_glyph_dsc_id+0x54>
        if(rcp > fdsc->cmaps[i].range_length) continue;
  40fe52:	2500      	movs	r5, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  40fe54:	3501      	adds	r5, #1
  40fe56:	b2ad      	uxth	r5, r5
  40fe58:	4565      	cmp	r5, ip
  40fe5a:	da43      	bge.n	40fee4 <get_glyph_dsc_id+0xf0>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  40fe5c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
  40fe60:	0082      	lsls	r2, r0, #2
  40fe62:	4690      	mov	r8, r2
  40fe64:	188f      	adds	r7, r1, r2
  40fe66:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
  40fe6a:	1a9a      	subs	r2, r3, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
  40fe6c:	88b8      	ldrh	r0, [r7, #4]
  40fe6e:	4282      	cmp	r2, r0
  40fe70:	d8f0      	bhi.n	40fe54 <get_glyph_dsc_id+0x60>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  40fe72:	4639      	mov	r1, r7
  40fe74:	e7da      	b.n	40fe2c <get_glyph_dsc_id+0x38>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  40fe76:	88c8      	ldrh	r0, [r1, #6]
  40fe78:	4410      	add	r0, r2
  40fe7a:	e7e0      	b.n	40fe3e <get_glyph_dsc_id+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  40fe7c:	2b03      	cmp	r3, #3
  40fe7e:	d003      	beq.n	40fe88 <get_glyph_dsc_id+0x94>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  40fe80:	2b01      	cmp	r3, #1
  40fe82:	d018      	beq.n	40feb6 <get_glyph_dsc_id+0xc2>
        uint32_t glyph_id = 0;
  40fe84:	2000      	movs	r0, #0
  40fe86:	e7da      	b.n	40fe3e <get_glyph_dsc_id+0x4a>
            uint16_t key = rcp;
  40fe88:	a804      	add	r0, sp, #16
  40fe8a:	f820 2d02 	strh.w	r2, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  40fe8e:	8a0a      	ldrh	r2, [r1, #16]
  40fe90:	6889      	ldr	r1, [r1, #8]
  40fe92:	4b1e      	ldr	r3, [pc, #120]	; (40ff0c <get_glyph_dsc_id+0x118>)
  40fe94:	9300      	str	r3, [sp, #0]
  40fe96:	2302      	movs	r3, #2
  40fe98:	4f1d      	ldr	r7, [pc, #116]	; (40ff10 <get_glyph_dsc_id+0x11c>)
  40fe9a:	47b8      	blx	r7
            if(p) {
  40fe9c:	4603      	mov	r3, r0
  40fe9e:	b140      	cbz	r0, 40feb2 <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  40fea0:	68a2      	ldr	r2, [r4, #8]
  40fea2:	eb02 0608 	add.w	r6, r2, r8
  40fea6:	68b0      	ldr	r0, [r6, #8]
  40fea8:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  40feaa:	88f3      	ldrh	r3, [r6, #6]
  40feac:	eb03 0060 	add.w	r0, r3, r0, asr #1
  40feb0:	e7c5      	b.n	40fe3e <get_glyph_dsc_id+0x4a>
        uint32_t glyph_id = 0;
  40feb2:	2000      	movs	r0, #0
  40feb4:	e7c3      	b.n	40fe3e <get_glyph_dsc_id+0x4a>
            uint16_t key = rcp;
  40feb6:	a804      	add	r0, sp, #16
  40feb8:	f820 2d02 	strh.w	r2, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  40febc:	8a0a      	ldrh	r2, [r1, #16]
  40febe:	6889      	ldr	r1, [r1, #8]
  40fec0:	4b12      	ldr	r3, [pc, #72]	; (40ff0c <get_glyph_dsc_id+0x118>)
  40fec2:	9300      	str	r3, [sp, #0]
  40fec4:	2302      	movs	r3, #2
  40fec6:	4f12      	ldr	r7, [pc, #72]	; (40ff10 <get_glyph_dsc_id+0x11c>)
  40fec8:	47b8      	blx	r7
            if(p) {
  40feca:	b148      	cbz	r0, 40fee0 <get_glyph_dsc_id+0xec>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  40fecc:	68a3      	ldr	r3, [r4, #8]
  40fece:	eb03 0608 	add.w	r6, r3, r8
  40fed2:	68b3      	ldr	r3, [r6, #8]
  40fed4:	1ac2      	subs	r2, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  40fed6:	68f3      	ldr	r3, [r6, #12]
  40fed8:	5a98      	ldrh	r0, [r3, r2]
  40feda:	88f3      	ldrh	r3, [r6, #6]
  40fedc:	4418      	add	r0, r3
  40fede:	e7ae      	b.n	40fe3e <get_glyph_dsc_id+0x4a>
  40fee0:	2000      	movs	r0, #0
  40fee2:	e7ac      	b.n	40fe3e <get_glyph_dsc_id+0x4a>
    if(fdsc->cache) {
  40fee4:	b136      	cbz	r6, 40fef4 <get_glyph_dsc_id+0x100>
        fdsc->cache->last_letter = letter;
  40fee6:	6033      	str	r3, [r6, #0]
        fdsc->cache->last_glyph_id = 0;
  40fee8:	6963      	ldr	r3, [r4, #20]
  40feea:	2000      	movs	r0, #0
  40feec:	6058      	str	r0, [r3, #4]
  40feee:	e7ab      	b.n	40fe48 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  40fef0:	4608      	mov	r0, r1
  40fef2:	4770      	bx	lr
    return 0;
  40fef4:	2000      	movs	r0, #0
  40fef6:	e7a7      	b.n	40fe48 <get_glyph_dsc_id+0x54>
    for(i = 0; i < fdsc->cmap_num; i++) {
  40fef8:	f8b4 c012 	ldrh.w	ip, [r4, #18]
  40fefc:	f3cc 0c08 	ubfx	ip, ip, #0, #9
  40ff00:	f1bc 0f00 	cmp.w	ip, #0
  40ff04:	d18a      	bne.n	40fe1c <get_glyph_dsc_id+0x28>
    return 0;
  40ff06:	2000      	movs	r0, #0
  40ff08:	e79e      	b.n	40fe48 <get_glyph_dsc_id+0x54>
  40ff0a:	bf00      	nop
  40ff0c:	0040fded 	.word	0x0040fded
  40ff10:	00413a65 	.word	0x00413a65

0040ff14 <lv_font_get_bitmap_fmt_txt>:
{
  40ff14:	b510      	push	{r4, lr}
  40ff16:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  40ff18:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
  40ff1a:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  40ff1c:	bf08      	it	eq
  40ff1e:	2120      	moveq	r1, #32
  40ff20:	4b0d      	ldr	r3, [pc, #52]	; (40ff58 <lv_font_get_bitmap_fmt_txt+0x44>)
  40ff22:	4798      	blx	r3
    if(!gid) return NULL;
  40ff24:	b1b0      	cbz	r0, 40ff54 <lv_font_get_bitmap_fmt_txt+0x40>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  40ff26:	6861      	ldr	r1, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  40ff28:	7ce2      	ldrb	r2, [r4, #19]
  40ff2a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
  40ff2e:	d107      	bne.n	40ff40 <lv_font_get_bitmap_fmt_txt+0x2c>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  40ff30:	f851 3030 	ldr.w	r3, [r1, r0, lsl #3]
  40ff34:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40ff38:	6820      	ldr	r0, [r4, #0]
  40ff3a:	4418      	add	r0, r3
}
  40ff3c:	b002      	add	sp, #8
  40ff3e:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
  40ff40:	4b06      	ldr	r3, [pc, #24]	; (40ff5c <lv_font_get_bitmap_fmt_txt+0x48>)
  40ff42:	9300      	str	r3, [sp, #0]
  40ff44:	4b06      	ldr	r3, [pc, #24]	; (40ff60 <lv_font_get_bitmap_fmt_txt+0x4c>)
  40ff46:	2283      	movs	r2, #131	; 0x83
  40ff48:	4906      	ldr	r1, [pc, #24]	; (40ff64 <lv_font_get_bitmap_fmt_txt+0x50>)
  40ff4a:	2002      	movs	r0, #2
  40ff4c:	4c06      	ldr	r4, [pc, #24]	; (40ff68 <lv_font_get_bitmap_fmt_txt+0x54>)
  40ff4e:	47a0      	blx	r4
        return NULL;
  40ff50:	2000      	movs	r0, #0
  40ff52:	e7f3      	b.n	40ff3c <lv_font_get_bitmap_fmt_txt+0x28>
    if(!gid) return NULL;
  40ff54:	2000      	movs	r0, #0
  40ff56:	e7f1      	b.n	40ff3c <lv_font_get_bitmap_fmt_txt+0x28>
  40ff58:	0040fdf5 	.word	0x0040fdf5
  40ff5c:	0041cd84 	.word	0x0041cd84
  40ff60:	0041cd30 	.word	0x0041cd30
  40ff64:	0041cd4c 	.word	0x0041cd4c
  40ff68:	00410edd 	.word	0x00410edd

0040ff6c <lv_font_get_glyph_dsc_fmt_txt>:
{
  40ff6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ff70:	b084      	sub	sp, #16
  40ff72:	4607      	mov	r7, r0
  40ff74:	460c      	mov	r4, r1
  40ff76:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  40ff78:	2a09      	cmp	r2, #9
  40ff7a:	d036      	beq.n	40ffea <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    bool is_tab = false;
  40ff7c:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
  40ff7e:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  40ff80:	4611      	mov	r1, r2
  40ff82:	4638      	mov	r0, r7
  40ff84:	4b49      	ldr	r3, [pc, #292]	; (4100ac <lv_font_get_glyph_dsc_fmt_txt+0x140>)
  40ff86:	4798      	blx	r3
    if(!gid) return false;
  40ff88:	4680      	mov	r8, r0
  40ff8a:	2800      	cmp	r0, #0
  40ff8c:	f000 8087 	beq.w	41009e <lv_font_get_glyph_dsc_fmt_txt+0x132>
    if(fdsc->kern_dsc) {
  40ff90:	68f3      	ldr	r3, [r6, #12]
  40ff92:	2b00      	cmp	r3, #0
  40ff94:	d07f      	beq.n	410096 <lv_font_get_glyph_dsc_fmt_txt+0x12a>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  40ff96:	4649      	mov	r1, r9
  40ff98:	4638      	mov	r0, r7
  40ff9a:	4b44      	ldr	r3, [pc, #272]	; (4100ac <lv_font_get_glyph_dsc_fmt_txt+0x140>)
  40ff9c:	4798      	blx	r3
        if(gid_next) {
  40ff9e:	4603      	mov	r3, r0
  40ffa0:	bb30      	cbnz	r0, 40fff0 <lv_font_get_glyph_dsc_fmt_txt+0x84>
    int8_t kvalue = 0;
  40ffa2:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  40ffa4:	6870      	ldr	r0, [r6, #4]
  40ffa6:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  40ffaa:	8a32      	ldrh	r2, [r6, #16]
  40ffac:	fb03 f302 	mul.w	r3, r3, r2
  40ffb0:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  40ffb2:	8842      	ldrh	r2, [r0, #2]
  40ffb4:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
  40ffb8:	b105      	cbz	r5, 40ffbc <lv_font_get_glyph_dsc_fmt_txt+0x50>
  40ffba:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
  40ffbc:	3308      	adds	r3, #8
  40ffbe:	4413      	add	r3, r2
  40ffc0:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  40ffc2:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  40ffc4:	7943      	ldrb	r3, [r0, #5]
  40ffc6:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  40ffc8:	7902      	ldrb	r2, [r0, #4]
  40ffca:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  40ffcc:	f990 3006 	ldrsb.w	r3, [r0, #6]
  40ffd0:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  40ffd2:	f990 3007 	ldrsb.w	r3, [r0, #7]
  40ffd6:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  40ffd8:	7cf3      	ldrb	r3, [r6, #19]
  40ffda:	f3c3 0343 	ubfx	r3, r3, #1, #4
  40ffde:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  40ffe0:	2d00      	cmp	r5, #0
  40ffe2:	d061      	beq.n	4100a8 <lv_font_get_glyph_dsc_fmt_txt+0x13c>
  40ffe4:	0052      	lsls	r2, r2, #1
  40ffe6:	8062      	strh	r2, [r4, #2]
  40ffe8:	e05a      	b.n	4100a0 <lv_font_get_glyph_dsc_fmt_txt+0x134>
        is_tab = true;
  40ffea:	2501      	movs	r5, #1
        unicode_letter = ' ';
  40ffec:	2220      	movs	r2, #32
  40ffee:	e7c6      	b.n	40ff7e <lv_font_get_glyph_dsc_fmt_txt+0x12>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
  40fff0:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
  40fff2:	7cd1      	ldrb	r1, [r2, #19]
  40fff4:	f011 0f20 	tst.w	r1, #32
  40fff8:	d13c      	bne.n	410074 <lv_font_get_glyph_dsc_fmt_txt+0x108>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  40fffa:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
  40fffc:	7afa      	ldrb	r2, [r7, #11]
  40fffe:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
  410002:	d003      	beq.n	41000c <lv_font_get_glyph_dsc_fmt_txt+0xa0>
        else if(kdsc->glyph_ids_size == 1) {
  410004:	2a40      	cmp	r2, #64	; 0x40
  410006:	d01b      	beq.n	410040 <lv_font_get_glyph_dsc_fmt_txt+0xd4>
    int8_t value = 0;
  410008:	2300      	movs	r3, #0
  41000a:	e7cb      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint16_t * g_ids = kdsc->glyph_ids;
  41000c:	f8d7 9000 	ldr.w	r9, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  410010:	eb08 2300 	add.w	r3, r8, r0, lsl #8
  410014:	a804      	add	r0, sp, #16
  410016:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  41001a:	68ba      	ldr	r2, [r7, #8]
  41001c:	4b24      	ldr	r3, [pc, #144]	; (4100b0 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
  41001e:	9300      	str	r3, [sp, #0]
  410020:	2302      	movs	r3, #2
  410022:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  410026:	4649      	mov	r1, r9
  410028:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4100b8 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
  41002c:	47d0      	blx	sl
            if(kid_p) {
  41002e:	b128      	cbz	r0, 41003c <lv_font_get_glyph_dsc_fmt_txt+0xd0>
                lv_uintptr_t ofs = kid_p - g_ids;
  410030:	eba0 0309 	sub.w	r3, r0, r9
  410034:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  410036:	687a      	ldr	r2, [r7, #4]
  410038:	56d3      	ldrsb	r3, [r2, r3]
  41003a:	e7b3      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t value = 0;
  41003c:	2300      	movs	r3, #0
  41003e:	e7b1      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint32_t * g_ids = kdsc->glyph_ids;
  410040:	f8d7 9000 	ldr.w	r9, [r7]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  410044:	eb08 4300 	add.w	r3, r8, r0, lsl #16
  410048:	a804      	add	r0, sp, #16
  41004a:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  41004e:	68ba      	ldr	r2, [r7, #8]
  410050:	4b18      	ldr	r3, [pc, #96]	; (4100b4 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
  410052:	9300      	str	r3, [sp, #0]
  410054:	2304      	movs	r3, #4
  410056:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  41005a:	4649      	mov	r1, r9
  41005c:	f8df a058 	ldr.w	sl, [pc, #88]	; 4100b8 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
  410060:	47d0      	blx	sl
            if(kid_p) {
  410062:	b128      	cbz	r0, 410070 <lv_font_get_glyph_dsc_fmt_txt+0x104>
                lv_uintptr_t ofs = kid_p - g_ids;
  410064:	eba0 0309 	sub.w	r3, r0, r9
  410068:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  41006a:	687a      	ldr	r2, [r7, #4]
  41006c:	56d3      	ldrsb	r3, [r2, r3]
  41006e:	e799      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t value = 0;
  410070:	2300      	movs	r3, #0
  410072:	e797      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  410074:	68d1      	ldr	r1, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  410076:	684a      	ldr	r2, [r1, #4]
  410078:	f812 2008 	ldrb.w	r2, [r2, r8]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  41007c:	6888      	ldr	r0, [r1, #8]
  41007e:	5cc0      	ldrb	r0, [r0, r3]
        if(left_class > 0 && right_class > 0) {
  410080:	b15a      	cbz	r2, 41009a <lv_font_get_glyph_dsc_fmt_txt+0x12e>
  410082:	b150      	cbz	r0, 41009a <lv_font_get_glyph_dsc_fmt_txt+0x12e>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  410084:	3a01      	subs	r2, #1
  410086:	7b4f      	ldrb	r7, [r1, #13]
  410088:	680b      	ldr	r3, [r1, #0]
  41008a:	4403      	add	r3, r0
  41008c:	fb07 3202 	mla	r2, r7, r2, r3
  410090:	f912 3c01 	ldrsb.w	r3, [r2, #-1]
  410094:	e786      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t kvalue = 0;
  410096:	2300      	movs	r3, #0
  410098:	e784      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t value = 0;
  41009a:	2300      	movs	r3, #0
  41009c:	e782      	b.n	40ffa4 <lv_font_get_glyph_dsc_fmt_txt+0x38>
    if(!gid) return false;
  41009e:	2500      	movs	r5, #0
}
  4100a0:	4628      	mov	r0, r5
  4100a2:	b004      	add	sp, #16
  4100a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return true;
  4100a8:	2501      	movs	r5, #1
  4100aa:	e7f9      	b.n	4100a0 <lv_font_get_glyph_dsc_fmt_txt+0x134>
  4100ac:	0040fdf5 	.word	0x0040fdf5
  4100b0:	0040fdc5 	.word	0x0040fdc5
  4100b4:	0040fdd9 	.word	0x0040fdd9
  4100b8:	00413a65 	.word	0x00413a65

004100bc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  4100bc:	b510      	push	{r4, lr}
  4100be:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
  4100c0:	2140      	movs	r1, #64	; 0x40
  4100c2:	4b12      	ldr	r3, [pc, #72]	; (41010c <lv_disp_drv_init+0x50>)
  4100c4:	4798      	blx	r3

    driver->hor_res          = 320;
  4100c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4100ca:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = 240;
  4100cc:	23f0      	movs	r3, #240	; 0xf0
  4100ce:	8063      	strh	r3, [r4, #2]
    driver->physical_hor_res = -1;
  4100d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4100d4:	80a3      	strh	r3, [r4, #4]
    driver->physical_ver_res = -1;
  4100d6:	80e3      	strh	r3, [r4, #6]
    driver->offset_x         = 0;
  4100d8:	2200      	movs	r2, #0
  4100da:	8122      	strh	r2, [r4, #8]
    driver->offset_y         = 0;
  4100dc:	8162      	strh	r2, [r4, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
  4100de:	7c23      	ldrb	r3, [r4, #16]
    driver->screen_transp    = LV_COLOR_SCREEN_TRANSP;
  4100e0:	f043 0304 	orr.w	r3, r3, #4
  4100e4:	f362 1345 	bfi	r3, r2, #5, #1
  4100e8:	7423      	strb	r3, [r4, #16]
    driver->dpi              = LV_DPI_DEF;
  4100ea:	8a23      	ldrh	r3, [r4, #16]
  4100ec:	2182      	movs	r1, #130	; 0x82
  4100ee:	f361 138f 	bfi	r3, r1, #6, #10
  4100f2:	8223      	strh	r3, [r4, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
  4100f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  4100f8:	f043 0307 	orr.w	r3, r3, #7
  4100fc:	f362 03c7 	bfi	r3, r2, #3, #5
  410100:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  410104:	23e0      	movs	r3, #224	; 0xe0
  410106:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  41010a:	bd10      	pop	{r4, pc}
  41010c:	004116ed 	.word	0x004116ed

00410110 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  410110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410112:	4604      	mov	r4, r0
  410114:	460d      	mov	r5, r1
  410116:	4617      	mov	r7, r2
  410118:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
  41011a:	2124      	movs	r1, #36	; 0x24
  41011c:	4b03      	ldr	r3, [pc, #12]	; (41012c <lv_disp_draw_buf_init+0x1c>)
  41011e:	4798      	blx	r3

    draw_buf->buf1    = buf1;
  410120:	6025      	str	r5, [r4, #0]
    draw_buf->buf2    = buf2;
  410122:	6067      	str	r7, [r4, #4]
    draw_buf->buf_act = draw_buf->buf1;
  410124:	60a5      	str	r5, [r4, #8]
    draw_buf->size    = size_in_px_cnt;
  410126:	60e6      	str	r6, [r4, #12]
  410128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41012a:	bf00      	nop
  41012c:	004116ed 	.word	0x004116ed

00410130 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  410130:	4b01      	ldr	r3, [pc, #4]	; (410138 <lv_disp_get_default+0x8>)
  410132:	6818      	ldr	r0, [r3, #0]
  410134:	4770      	bx	lr
  410136:	bf00      	nop
  410138:	20400b34 	.word	0x20400b34

0041013c <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
  41013c:	4603      	mov	r3, r0
  41013e:	b150      	cbz	r0, 410156 <lv_disp_get_hor_res+0x1a>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
  410140:	681a      	ldr	r2, [r3, #0]
  410142:	7c13      	ldrb	r3, [r2, #16]
  410144:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  410148:	2b01      	cmp	r3, #1
  41014a:	d00a      	beq.n	410162 <lv_disp_get_hor_res+0x26>
  41014c:	2b03      	cmp	r3, #3
  41014e:	d008      	beq.n	410162 <lv_disp_get_hor_res+0x26>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
            default:
                return disp->driver->hor_res;
  410150:	f9b2 0000 	ldrsh.w	r0, [r2]
  410154:	4770      	bx	lr
    return disp_def;
  410156:	4b04      	ldr	r3, [pc, #16]	; (410168 <lv_disp_get_hor_res+0x2c>)
  410158:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
  41015a:	2b00      	cmp	r3, #0
  41015c:	d1f0      	bne.n	410140 <lv_disp_get_hor_res+0x4>
        return 0;
  41015e:	2000      	movs	r0, #0
        }
    }
}
  410160:	4770      	bx	lr
                return disp->driver->ver_res;
  410162:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
  410166:	4770      	bx	lr
  410168:	20400b34 	.word	0x20400b34

0041016c <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
  41016c:	4603      	mov	r3, r0
  41016e:	b150      	cbz	r0, 410186 <lv_disp_get_ver_res+0x1a>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
  410170:	681a      	ldr	r2, [r3, #0]
  410172:	7c13      	ldrb	r3, [r2, #16]
  410174:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  410178:	2b01      	cmp	r3, #1
  41017a:	d00a      	beq.n	410192 <lv_disp_get_ver_res+0x26>
  41017c:	2b03      	cmp	r3, #3
  41017e:	d008      	beq.n	410192 <lv_disp_get_ver_res+0x26>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
            default:
                return disp->driver->ver_res;
  410180:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
  410184:	4770      	bx	lr
    return disp_def;
  410186:	4b04      	ldr	r3, [pc, #16]	; (410198 <lv_disp_get_ver_res+0x2c>)
  410188:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
  41018a:	2b00      	cmp	r3, #0
  41018c:	d1f0      	bne.n	410170 <lv_disp_get_ver_res+0x4>
        return 0;
  41018e:	2000      	movs	r0, #0
        }
    }
}
  410190:	4770      	bx	lr
                return disp->driver->hor_res;
  410192:	f9b2 0000 	ldrsh.w	r0, [r2]
  410196:	4770      	bx	lr
  410198:	20400b34 	.word	0x20400b34

0041019c <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
  41019c:	4603      	mov	r3, r0
  41019e:	b120      	cbz	r0, 4101aa <lv_disp_get_dpi+0xe>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
    return disp->driver->dpi;
  4101a0:	681b      	ldr	r3, [r3, #0]
  4101a2:	8a18      	ldrh	r0, [r3, #16]
  4101a4:	f3c0 1089 	ubfx	r0, r0, #6, #10
  4101a8:	4770      	bx	lr
    return disp_def;
  4101aa:	4b03      	ldr	r3, [pc, #12]	; (4101b8 <lv_disp_get_dpi+0x1c>)
  4101ac:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
  4101ae:	2b00      	cmp	r3, #0
  4101b0:	d1f6      	bne.n	4101a0 <lv_disp_get_dpi+0x4>
  4101b2:	2082      	movs	r0, #130	; 0x82
}
  4101b4:	4770      	bx	lr
  4101b6:	bf00      	nop
  4101b8:	20400b34 	.word	0x20400b34

004101bc <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        lv_memset_00(disp_drv->draw_buf->buf_act, disp_drv->draw_buf->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->draw_buf->flushing = 0;
  4101bc:	68c2      	ldr	r2, [r0, #12]
  4101be:	2300      	movs	r3, #0
  4101c0:	6193      	str	r3, [r2, #24]
    disp_drv->draw_buf->flushing_last = 0;
  4101c2:	68c2      	ldr	r2, [r0, #12]
  4101c4:	61d3      	str	r3, [r2, #28]
  4101c6:	4770      	bx	lr

004101c8 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
  4101c8:	6803      	ldr	r3, [r0, #0]
}
  4101ca:	68d8      	ldr	r0, [r3, #12]
  4101cc:	4770      	bx	lr
	...

004101d0 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  4101d0:	b510      	push	{r4, lr}
  4101d2:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
  4101d4:	2120      	movs	r1, #32
  4101d6:	4b08      	ldr	r3, [pc, #32]	; (4101f8 <lv_indev_drv_init+0x28>)
  4101d8:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  4101da:	2300      	movs	r3, #0
  4101dc:	7023      	strb	r3, [r4, #0]
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
  4101de:	230a      	movs	r3, #10
  4101e0:	7623      	strb	r3, [r4, #24]
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
  4101e2:	7663      	strb	r3, [r4, #25]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  4101e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4101e8:	83a3      	strh	r3, [r4, #28]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  4101ea:	2364      	movs	r3, #100	; 0x64
  4101ec:	83e3      	strh	r3, [r4, #30]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  4101ee:	2332      	movs	r3, #50	; 0x32
  4101f0:	76e3      	strb	r3, [r4, #27]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  4101f2:	2303      	movs	r3, #3
  4101f4:	76a3      	strb	r3, [r4, #26]
  4101f6:	bd10      	pop	{r4, pc}
  4101f8:	004116ed 	.word	0x004116ed

004101fc <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  4101fc:	b508      	push	{r3, lr}
    if(indev == NULL)
  4101fe:	b120      	cbz	r0, 41020a <lv_indev_get_next+0xe>
  410200:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  410202:	4804      	ldr	r0, [pc, #16]	; (410214 <lv_indev_get_next+0x18>)
  410204:	4b04      	ldr	r3, [pc, #16]	; (410218 <lv_indev_get_next+0x1c>)
  410206:	4798      	blx	r3
}
  410208:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  41020a:	4802      	ldr	r0, [pc, #8]	; (410214 <lv_indev_get_next+0x18>)
  41020c:	4b03      	ldr	r3, [pc, #12]	; (41021c <lv_indev_get_next+0x20>)
  41020e:	4798      	blx	r3
  410210:	bd08      	pop	{r3, pc}
  410212:	bf00      	nop
  410214:	20439e60 	.word	0x20439e60
  410218:	00410eb5 	.word	0x00410eb5
  41021c:	00410ea1 	.word	0x00410ea1

00410220 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
  410220:	2200      	movs	r2, #0
  410222:	4b03      	ldr	r3, [pc, #12]	; (410230 <lv_tick_inc+0x10>)
  410224:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
  410226:	4a03      	ldr	r2, [pc, #12]	; (410234 <lv_tick_inc+0x14>)
  410228:	6813      	ldr	r3, [r2, #0]
  41022a:	4418      	add	r0, r3
  41022c:	6010      	str	r0, [r2, #0]
  41022e:	4770      	bx	lr
  410230:	20400b3c 	.word	0x20400b3c
  410234:	20400b38 	.word	0x20400b38

00410238 <lv_tick_get>:
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
  410238:	4b04      	ldr	r3, [pc, #16]	; (41024c <lv_tick_get+0x14>)
  41023a:	f04f 0101 	mov.w	r1, #1
  41023e:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
  410240:	781a      	ldrb	r2, [r3, #0]
  410242:	2a00      	cmp	r2, #0
  410244:	d0fb      	beq.n	41023e <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
  410246:	4b02      	ldr	r3, [pc, #8]	; (410250 <lv_tick_get+0x18>)
  410248:	6818      	ldr	r0, [r3, #0]
  41024a:	4770      	bx	lr
  41024c:	20400b3c 	.word	0x20400b3c
  410250:	20400b38 	.word	0x20400b38

00410254 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
  410254:	b510      	push	{r4, lr}
  410256:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
  410258:	4b01      	ldr	r3, [pc, #4]	; (410260 <lv_tick_elaps+0xc>)
  41025a:	4798      	blx	r3
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
  41025c:	1b00      	subs	r0, r0, r4
  41025e:	bd10      	pop	{r4, pc}
  410260:	00410239 	.word	0x00410239

00410264 <anim_mark_list_change>:
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
        }
    }
}
static void anim_mark_list_change(void)
{
  410264:	b508      	push	{r3, lr}
    anim_list_changed = true;
  410266:	2201      	movs	r2, #1
  410268:	4b07      	ldr	r3, [pc, #28]	; (410288 <anim_mark_list_change+0x24>)
  41026a:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  41026c:	4807      	ldr	r0, [pc, #28]	; (41028c <anim_mark_list_change+0x28>)
  41026e:	4b08      	ldr	r3, [pc, #32]	; (410290 <anim_mark_list_change+0x2c>)
  410270:	4798      	blx	r3
  410272:	b120      	cbz	r0, 41027e <anim_mark_list_change+0x1a>
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
  410274:	4b07      	ldr	r3, [pc, #28]	; (410294 <anim_mark_list_change+0x30>)
  410276:	6818      	ldr	r0, [r3, #0]
  410278:	4b07      	ldr	r3, [pc, #28]	; (410298 <anim_mark_list_change+0x34>)
  41027a:	4798      	blx	r3
  41027c:	bd08      	pop	{r3, pc}
        lv_timer_pause(_lv_anim_tmr);
  41027e:	4b05      	ldr	r3, [pc, #20]	; (410294 <anim_mark_list_change+0x30>)
  410280:	6818      	ldr	r0, [r3, #0]
  410282:	4b06      	ldr	r3, [pc, #24]	; (41029c <anim_mark_list_change+0x38>)
  410284:	4798      	blx	r3
  410286:	bd08      	pop	{r3, pc}
  410288:	20400b44 	.word	0x20400b44
  41028c:	20439ed0 	.word	0x20439ed0
  410290:	00410ea1 	.word	0x00410ea1
  410294:	20400b40 	.word	0x20400b40
  410298:	004128fb 	.word	0x004128fb
  41029c:	004128f1 	.word	0x004128f1

004102a0 <anim_timer>:
{
  4102a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4102a4:	b093      	sub	sp, #76	; 0x4c
    uint32_t elaps = lv_tick_elaps(last_timer_run);
  4102a6:	4b64      	ldr	r3, [pc, #400]	; (410438 <anim_timer+0x198>)
  4102a8:	6818      	ldr	r0, [r3, #0]
  4102aa:	4b64      	ldr	r3, [pc, #400]	; (41043c <anim_timer+0x19c>)
  4102ac:	4798      	blx	r3
  4102ae:	4606      	mov	r6, r0
    anim_run_round = anim_run_round ? false : true;
  4102b0:	4a63      	ldr	r2, [pc, #396]	; (410440 <anim_timer+0x1a0>)
  4102b2:	7813      	ldrb	r3, [r2, #0]
  4102b4:	f083 0301 	eor.w	r3, r3, #1
  4102b8:	7013      	strb	r3, [r2, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4102ba:	4862      	ldr	r0, [pc, #392]	; (410444 <anim_timer+0x1a4>)
  4102bc:	4b62      	ldr	r3, [pc, #392]	; (410448 <anim_timer+0x1a8>)
  4102be:	4798      	blx	r3
    while(a != NULL) {
  4102c0:	2800      	cmp	r0, #0
  4102c2:	f000 80a7 	beq.w	410414 <anim_timer+0x174>
  4102c6:	4604      	mov	r4, r0
        anim_list_changed = false;
  4102c8:	4d60      	ldr	r5, [pc, #384]	; (41044c <anim_timer+0x1ac>)
  4102ca:	f04f 0900 	mov.w	r9, #0
        if(a->run_round != anim_run_round) {
  4102ce:	f8df 8170 	ldr.w	r8, [pc, #368]	; 410440 <anim_timer+0x1a0>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4102d2:	4f5c      	ldr	r7, [pc, #368]	; (410444 <anim_timer+0x1a4>)
  4102d4:	e02b      	b.n	41032e <anim_timer+0x8e>
                if(a->start_cb) a->start_cb(a);
  4102d6:	68a3      	ldr	r3, [r4, #8]
  4102d8:	b10b      	cbz	r3, 4102de <anim_timer+0x3e>
  4102da:	4620      	mov	r0, r4
  4102dc:	4798      	blx	r3
                a->start_cb_called = 1;
  4102de:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  4102e2:	f043 0308 	orr.w	r3, r3, #8
  4102e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            a->act_time += elaps;
  4102ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4102ec:	4433      	add	r3, r6
  4102ee:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
  4102f0:	2b00      	cmp	r3, #0
  4102f2:	db13      	blt.n	41031c <anim_timer+0x7c>
                if(a->act_time > a->time) a->act_time = a->time;
  4102f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4102f6:	4293      	cmp	r3, r2
  4102f8:	bfc8      	it	gt
  4102fa:	62e2      	strgt	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
  4102fc:	69a3      	ldr	r3, [r4, #24]
  4102fe:	4620      	mov	r0, r4
  410300:	4798      	blx	r3
                if(new_value != a->current_value) {
  410302:	6a23      	ldr	r3, [r4, #32]
  410304:	4298      	cmp	r0, r3
  410306:	d005      	beq.n	410314 <anim_timer+0x74>
                    a->current_value = new_value;
  410308:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  41030a:	6863      	ldr	r3, [r4, #4]
  41030c:	b113      	cbz	r3, 410314 <anim_timer+0x74>
  41030e:	4601      	mov	r1, r0
  410310:	6820      	ldr	r0, [r4, #0]
  410312:	4798      	blx	r3
                if(a->act_time >= a->time) {
  410314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  410316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  410318:	429a      	cmp	r2, r3
  41031a:	da34      	bge.n	410386 <anim_timer+0xe6>
        if(anim_list_changed)
  41031c:	782b      	ldrb	r3, [r5, #0]
  41031e:	2b00      	cmp	r3, #0
  410320:	d072      	beq.n	410408 <anim_timer+0x168>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  410322:	4638      	mov	r0, r7
  410324:	4b48      	ldr	r3, [pc, #288]	; (410448 <anim_timer+0x1a8>)
  410326:	4798      	blx	r3
  410328:	4604      	mov	r4, r0
    while(a != NULL) {
  41032a:	2c00      	cmp	r4, #0
  41032c:	d072      	beq.n	410414 <anim_timer+0x174>
        anim_list_changed = false;
  41032e:	f885 9000 	strb.w	r9, [r5]
        if(a->run_round != anim_run_round) {
  410332:	f898 2000 	ldrb.w	r2, [r8]
  410336:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  41033a:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41033e:	4293      	cmp	r3, r2
  410340:	d062      	beq.n	410408 <anim_timer+0x168>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
  410342:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  410346:	f362 0382 	bfi	r3, r2, #2, #1
  41034a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            int32_t new_act_time = a->act_time + elaps;
  41034e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
  410350:	b2db      	uxtb	r3, r3
  410352:	f083 0008 	eor.w	r0, r3, #8
  410356:	2a00      	cmp	r2, #0
  410358:	bfcc      	ite	gt
  41035a:	2100      	movgt	r1, #0
  41035c:	2101      	movle	r1, #1
  41035e:	ea11 01d0 	ands.w	r1, r1, r0, lsr #3
  410362:	d0c2      	beq.n	4102ea <anim_timer+0x4a>
  410364:	42f2      	cmn	r2, r6
  410366:	d4c0      	bmi.n	4102ea <anim_timer+0x4a>
                if(a->early_apply == 0 && a->get_value_cb) {
  410368:	f013 0f01 	tst.w	r3, #1
  41036c:	d1b3      	bne.n	4102d6 <anim_timer+0x36>
  41036e:	6923      	ldr	r3, [r4, #16]
  410370:	2b00      	cmp	r3, #0
  410372:	d0b0      	beq.n	4102d6 <anim_timer+0x36>
                    int32_t v_ofs  = a->get_value_cb(a);
  410374:	4620      	mov	r0, r4
  410376:	4798      	blx	r3
                    a->start_value += v_ofs;
  410378:	69e2      	ldr	r2, [r4, #28]
  41037a:	4402      	add	r2, r0
  41037c:	61e2      	str	r2, [r4, #28]
                    a->end_value += v_ofs;
  41037e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  410380:	4403      	add	r3, r0
  410382:	6263      	str	r3, [r4, #36]	; 0x24
  410384:	e7a7      	b.n	4102d6 <anim_timer+0x36>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  410386:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  41038a:	f013 0102 	ands.w	r1, r3, #2
  41038e:	d148      	bne.n	410422 <anim_timer+0x182>
  410390:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  410392:	3b01      	subs	r3, #1
  410394:	b29b      	uxth	r3, r3
  410396:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  41039a:	4293      	cmp	r3, r2
        a->repeat_cnt--;
  41039c:	bf98      	it	ls
  41039e:	87a3      	strhls	r3, [r4, #60]	; 0x3c
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  4103a0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  4103a2:	b90b      	cbnz	r3, 4103a8 <anim_timer+0x108>
  4103a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4103a6:	b1db      	cbz	r3, 4103e0 <anim_timer+0x140>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  4103a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4103aa:	4252      	negs	r2, r2
  4103ac:	62e2      	str	r2, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
  4103ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
  4103b0:	2a00      	cmp	r2, #0
  4103b2:	d0b3      	beq.n	41031c <anim_timer+0x7c>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  4103b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4103b6:	425b      	negs	r3, r3
  4103b8:	62e3      	str	r3, [r4, #44]	; 0x2c
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  4103ba:	fab1 f381 	clz	r3, r1
  4103be:	095b      	lsrs	r3, r3, #5
  4103c0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  4103c4:	f363 0141 	bfi	r1, r3, #1, #1
  4103c8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
            tmp      = a->start_value;
  4103cc:	69e3      	ldr	r3, [r4, #28]
            a->start_value = a->end_value;
  4103ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
  4103d0:	61e0      	str	r0, [r4, #28]
            a->end_value   = tmp;
  4103d2:	6263      	str	r3, [r4, #36]	; 0x24
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  4103d4:	f011 0f02 	tst.w	r1, #2
  4103d8:	bf08      	it	eq
  4103da:	6c22      	ldreq	r2, [r4, #64]	; 0x40
  4103dc:	62a2      	str	r2, [r4, #40]	; 0x28
  4103de:	e79d      	b.n	41031c <anim_timer+0x7c>
        lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  4103e0:	2244      	movs	r2, #68	; 0x44
  4103e2:	4621      	mov	r1, r4
  4103e4:	a801      	add	r0, sp, #4
  4103e6:	4b1a      	ldr	r3, [pc, #104]	; (410450 <anim_timer+0x1b0>)
  4103e8:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  4103ea:	4621      	mov	r1, r4
  4103ec:	4638      	mov	r0, r7
  4103ee:	4b19      	ldr	r3, [pc, #100]	; (410454 <anim_timer+0x1b4>)
  4103f0:	4798      	blx	r3
        lv_mem_free(a);
  4103f2:	4620      	mov	r0, r4
  4103f4:	4b18      	ldr	r3, [pc, #96]	; (410458 <anim_timer+0x1b8>)
  4103f6:	4798      	blx	r3
        anim_mark_list_change();
  4103f8:	4b18      	ldr	r3, [pc, #96]	; (41045c <anim_timer+0x1bc>)
  4103fa:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  4103fc:	9b04      	ldr	r3, [sp, #16]
  4103fe:	2b00      	cmp	r3, #0
  410400:	d08c      	beq.n	41031c <anim_timer+0x7c>
  410402:	a801      	add	r0, sp, #4
  410404:	4798      	blx	r3
  410406:	e789      	b.n	41031c <anim_timer+0x7c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  410408:	4621      	mov	r1, r4
  41040a:	4638      	mov	r0, r7
  41040c:	4b14      	ldr	r3, [pc, #80]	; (410460 <anim_timer+0x1c0>)
  41040e:	4798      	blx	r3
  410410:	4604      	mov	r4, r0
  410412:	e78a      	b.n	41032a <anim_timer+0x8a>
    last_timer_run = lv_tick_get();
  410414:	4b13      	ldr	r3, [pc, #76]	; (410464 <anim_timer+0x1c4>)
  410416:	4798      	blx	r3
  410418:	4b07      	ldr	r3, [pc, #28]	; (410438 <anim_timer+0x198>)
  41041a:	6018      	str	r0, [r3, #0]
}
  41041c:	b013      	add	sp, #76	; 0x4c
  41041e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  410422:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
  410424:	2b00      	cmp	r3, #0
  410426:	d0db      	beq.n	4103e0 <anim_timer+0x140>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  410428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  41042a:	425b      	negs	r3, r3
  41042c:	62e3      	str	r3, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
  41042e:	6b62      	ldr	r2, [r4, #52]	; 0x34
  410430:	2a00      	cmp	r2, #0
  410432:	d1c2      	bne.n	4103ba <anim_timer+0x11a>
  410434:	e772      	b.n	41031c <anim_timer+0x7c>
  410436:	bf00      	nop
  410438:	20400b48 	.word	0x20400b48
  41043c:	00410255 	.word	0x00410255
  410440:	20400b45 	.word	0x20400b45
  410444:	20439ed0 	.word	0x20439ed0
  410448:	00410ea1 	.word	0x00410ea1
  41044c:	20400b44 	.word	0x20400b44
  410450:	00411161 	.word	0x00411161
  410454:	00410e39 	.word	0x00410e39
  410458:	004110e1 	.word	0x004110e1
  41045c:	00410265 	.word	0x00410265
  410460:	00410eb5 	.word	0x00410eb5
  410464:	00410239 	.word	0x00410239

00410468 <lv_anim_path_linear>:
{
  410468:	b530      	push	{r4, r5, lr}
  41046a:	b083      	sub	sp, #12
  41046c:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
  41046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  410472:	9300      	str	r3, [sp, #0]
  410474:	2300      	movs	r3, #0
  410476:	6a82      	ldr	r2, [r0, #40]	; 0x28
  410478:	4619      	mov	r1, r3
  41047a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  41047c:	4d05      	ldr	r5, [pc, #20]	; (410494 <lv_anim_path_linear+0x2c>)
  41047e:	47a8      	blx	r5
    new_value = step * (a->end_value - a->start_value);
  410480:	69e2      	ldr	r2, [r4, #28]
  410482:	6a63      	ldr	r3, [r4, #36]	; 0x24
  410484:	1a9b      	subs	r3, r3, r2
  410486:	fb00 f003 	mul.w	r0, r0, r3
}
  41048a:	eb02 20a0 	add.w	r0, r2, r0, asr #10
  41048e:	b003      	add	sp, #12
  410490:	bd30      	pop	{r4, r5, pc}
  410492:	bf00      	nop
  410494:	00411077 	.word	0x00411077

00410498 <_lv_anim_core_init>:
{
  410498:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  41049a:	2144      	movs	r1, #68	; 0x44
  41049c:	4807      	ldr	r0, [pc, #28]	; (4104bc <_lv_anim_core_init+0x24>)
  41049e:	4b08      	ldr	r3, [pc, #32]	; (4104c0 <_lv_anim_core_init+0x28>)
  4104a0:	4798      	blx	r3
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
  4104a2:	2200      	movs	r2, #0
  4104a4:	2132      	movs	r1, #50	; 0x32
  4104a6:	4807      	ldr	r0, [pc, #28]	; (4104c4 <_lv_anim_core_init+0x2c>)
  4104a8:	4b07      	ldr	r3, [pc, #28]	; (4104c8 <_lv_anim_core_init+0x30>)
  4104aa:	4798      	blx	r3
  4104ac:	4b07      	ldr	r3, [pc, #28]	; (4104cc <_lv_anim_core_init+0x34>)
  4104ae:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
  4104b0:	4b07      	ldr	r3, [pc, #28]	; (4104d0 <_lv_anim_core_init+0x38>)
  4104b2:	4798      	blx	r3
    anim_list_changed = false;
  4104b4:	2200      	movs	r2, #0
  4104b6:	4b07      	ldr	r3, [pc, #28]	; (4104d4 <_lv_anim_core_init+0x3c>)
  4104b8:	701a      	strb	r2, [r3, #0]
  4104ba:	bd08      	pop	{r3, pc}
  4104bc:	20439ed0 	.word	0x20439ed0
  4104c0:	00410d8f 	.word	0x00410d8f
  4104c4:	004102a1 	.word	0x004102a1
  4104c8:	00412655 	.word	0x00412655
  4104cc:	20400b40 	.word	0x20400b40
  4104d0:	00410265 	.word	0x00410265
  4104d4:	20400b44 	.word	0x20400b44

004104d8 <lv_anim_init>:
{
  4104d8:	b510      	push	{r4, lr}
  4104da:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
  4104dc:	2144      	movs	r1, #68	; 0x44
  4104de:	4b0a      	ldr	r3, [pc, #40]	; (410508 <lv_anim_init+0x30>)
  4104e0:	4798      	blx	r3
    a->time    = 500;
  4104e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4104e6:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value   = 0;
  4104e8:	2300      	movs	r3, #0
  4104ea:	61e3      	str	r3, [r4, #28]
    a->end_value     = 100;
  4104ec:	2364      	movs	r3, #100	; 0x64
  4104ee:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
  4104f0:	2301      	movs	r3, #1
  4104f2:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
  4104f4:	4b05      	ldr	r3, [pc, #20]	; (41050c <lv_anim_init+0x34>)
  4104f6:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
  4104f8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  4104fc:	f043 0301 	orr.w	r3, r3, #1
  410500:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  410504:	bd10      	pop	{r4, pc}
  410506:	bf00      	nop
  410508:	004116ed 	.word	0x004116ed
  41050c:	00410469 	.word	0x00410469

00410510 <lv_anim_del>:
{
  410510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410514:	b083      	sub	sp, #12
  410516:	4606      	mov	r6, r0
  410518:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  41051a:	481a      	ldr	r0, [pc, #104]	; (410584 <lv_anim_del+0x74>)
  41051c:	4b1a      	ldr	r3, [pc, #104]	; (410588 <lv_anim_del+0x78>)
  41051e:	4798      	blx	r3
    while(a != NULL) {
  410520:	b350      	cbz	r0, 410578 <lv_anim_del+0x68>
  410522:	4604      	mov	r4, r0
  410524:	2300      	movs	r3, #0
  410526:	9301      	str	r3, [sp, #4]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  410528:	f8df 9058 	ldr.w	r9, [pc, #88]	; 410584 <lv_anim_del+0x74>
  41052c:	f8df a064 	ldr.w	sl, [pc, #100]	; 410594 <lv_anim_del+0x84>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  410530:	f8df b064 	ldr.w	fp, [pc, #100]	; 410598 <lv_anim_del+0x88>
  410534:	e00b      	b.n	41054e <lv_anim_del+0x3e>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  410536:	6863      	ldr	r3, [r4, #4]
  410538:	2f00      	cmp	r7, #0
  41053a:	bf18      	it	ne
  41053c:	42bb      	cmpne	r3, r7
  41053e:	bf0c      	ite	eq
  410540:	f04f 0801 	moveq.w	r8, #1
  410544:	f04f 0800 	movne.w	r8, #0
  410548:	d00b      	beq.n	410562 <lv_anim_del+0x52>
  41054a:	462c      	mov	r4, r5
    while(a != NULL) {
  41054c:	b1b5      	cbz	r5, 41057c <lv_anim_del+0x6c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  41054e:	4621      	mov	r1, r4
  410550:	4648      	mov	r0, r9
  410552:	47d0      	blx	sl
  410554:	4605      	mov	r5, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  410556:	6823      	ldr	r3, [r4, #0]
  410558:	42b3      	cmp	r3, r6
  41055a:	d0ec      	beq.n	410536 <lv_anim_del+0x26>
  41055c:	2e00      	cmp	r6, #0
  41055e:	d1f4      	bne.n	41054a <lv_anim_del+0x3a>
  410560:	e7e9      	b.n	410536 <lv_anim_del+0x26>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  410562:	4621      	mov	r1, r4
  410564:	4648      	mov	r0, r9
  410566:	47d8      	blx	fp
            lv_mem_free(a);
  410568:	4620      	mov	r0, r4
  41056a:	4b08      	ldr	r3, [pc, #32]	; (41058c <lv_anim_del+0x7c>)
  41056c:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
  41056e:	4b08      	ldr	r3, [pc, #32]	; (410590 <lv_anim_del+0x80>)
  410570:	4798      	blx	r3
            del = true;
  410572:	f8cd 8004 	str.w	r8, [sp, #4]
  410576:	e7e8      	b.n	41054a <lv_anim_del+0x3a>
    bool del = false;
  410578:	2300      	movs	r3, #0
  41057a:	9301      	str	r3, [sp, #4]
}
  41057c:	9801      	ldr	r0, [sp, #4]
  41057e:	b003      	add	sp, #12
  410580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410584:	20439ed0 	.word	0x20439ed0
  410588:	00410ea1 	.word	0x00410ea1
  41058c:	004110e1 	.word	0x004110e1
  410590:	00410265 	.word	0x00410265
  410594:	00410eb5 	.word	0x00410eb5
  410598:	00410e39 	.word	0x00410e39

0041059c <lv_anim_start>:
{
  41059c:	b530      	push	{r4, r5, lr}
  41059e:	b085      	sub	sp, #20
  4105a0:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
  4105a2:	6841      	ldr	r1, [r0, #4]
  4105a4:	b111      	cbz	r1, 4105ac <lv_anim_start+0x10>
  4105a6:	6800      	ldr	r0, [r0, #0]
  4105a8:	4b24      	ldr	r3, [pc, #144]	; (41063c <lv_anim_start+0xa0>)
  4105aa:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  4105ac:	4824      	ldr	r0, [pc, #144]	; (410640 <lv_anim_start+0xa4>)
  4105ae:	4b25      	ldr	r3, [pc, #148]	; (410644 <lv_anim_start+0xa8>)
  4105b0:	4798      	blx	r3
  4105b2:	2800      	cmp	r0, #0
  4105b4:	d12f      	bne.n	410616 <lv_anim_start+0x7a>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  4105b6:	4822      	ldr	r0, [pc, #136]	; (410640 <lv_anim_start+0xa4>)
  4105b8:	4b23      	ldr	r3, [pc, #140]	; (410648 <lv_anim_start+0xac>)
  4105ba:	4798      	blx	r3
    LV_ASSERT_MALLOC(new_anim);
  4105bc:	4604      	mov	r4, r0
  4105be:	2800      	cmp	r0, #0
  4105c0:	d02e      	beq.n	410620 <lv_anim_start+0x84>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  4105c2:	2244      	movs	r2, #68	; 0x44
  4105c4:	4629      	mov	r1, r5
  4105c6:	4b21      	ldr	r3, [pc, #132]	; (41064c <lv_anim_start+0xb0>)
  4105c8:	4798      	blx	r3
    if(a->var == a) new_anim->var = new_anim;
  4105ca:	682b      	ldr	r3, [r5, #0]
  4105cc:	429d      	cmp	r5, r3
  4105ce:	bf08      	it	eq
  4105d0:	6024      	streq	r4, [r4, #0]
    new_anim->time_orig = a->time;
  4105d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4105d4:	6423      	str	r3, [r4, #64]	; 0x40
    new_anim->run_round = anim_run_round;
  4105d6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
  4105da:	4a1d      	ldr	r2, [pc, #116]	; (410650 <lv_anim_start+0xb4>)
  4105dc:	7812      	ldrb	r2, [r2, #0]
  4105de:	f362 0382 	bfi	r3, r2, #2, #1
  4105e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if(new_anim->early_apply) {
  4105e6:	f013 0f01 	tst.w	r3, #1
  4105ea:	d00f      	beq.n	41060c <lv_anim_start+0x70>
        if(new_anim->get_value_cb) {
  4105ec:	6923      	ldr	r3, [r4, #16]
  4105ee:	b13b      	cbz	r3, 410600 <lv_anim_start+0x64>
            int32_t v_ofs  = new_anim->get_value_cb(new_anim);
  4105f0:	4620      	mov	r0, r4
  4105f2:	4798      	blx	r3
            new_anim->start_value += v_ofs;
  4105f4:	69e3      	ldr	r3, [r4, #28]
  4105f6:	4403      	add	r3, r0
  4105f8:	61e3      	str	r3, [r4, #28]
            new_anim->end_value += v_ofs;
  4105fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4105fc:	4403      	add	r3, r0
  4105fe:	6263      	str	r3, [r4, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
  410600:	6863      	ldr	r3, [r4, #4]
  410602:	b11b      	cbz	r3, 41060c <lv_anim_start+0x70>
  410604:	6820      	ldr	r0, [r4, #0]
  410606:	b108      	cbz	r0, 41060c <lv_anim_start+0x70>
  410608:	69e1      	ldr	r1, [r4, #28]
  41060a:	4798      	blx	r3
    anim_mark_list_change();
  41060c:	4b11      	ldr	r3, [pc, #68]	; (410654 <lv_anim_start+0xb8>)
  41060e:	4798      	blx	r3
}
  410610:	4620      	mov	r0, r4
  410612:	b005      	add	sp, #20
  410614:	bd30      	pop	{r4, r5, pc}
        last_timer_run = lv_tick_get();
  410616:	4b10      	ldr	r3, [pc, #64]	; (410658 <lv_anim_start+0xbc>)
  410618:	4798      	blx	r3
  41061a:	4b10      	ldr	r3, [pc, #64]	; (41065c <lv_anim_start+0xc0>)
  41061c:	6018      	str	r0, [r3, #0]
  41061e:	e7ca      	b.n	4105b6 <lv_anim_start+0x1a>
    LV_ASSERT_MALLOC(new_anim);
  410620:	4b0f      	ldr	r3, [pc, #60]	; (410660 <lv_anim_start+0xc4>)
  410622:	9302      	str	r3, [sp, #8]
  410624:	4b0f      	ldr	r3, [pc, #60]	; (410664 <lv_anim_start+0xc8>)
  410626:	9301      	str	r3, [sp, #4]
  410628:	4b0f      	ldr	r3, [pc, #60]	; (410668 <lv_anim_start+0xcc>)
  41062a:	9300      	str	r3, [sp, #0]
  41062c:	4b0f      	ldr	r3, [pc, #60]	; (41066c <lv_anim_start+0xd0>)
  41062e:	225c      	movs	r2, #92	; 0x5c
  410630:	490f      	ldr	r1, [pc, #60]	; (410670 <lv_anim_start+0xd4>)
  410632:	2003      	movs	r0, #3
  410634:	4c0f      	ldr	r4, [pc, #60]	; (410674 <lv_anim_start+0xd8>)
  410636:	47a0      	blx	r4
  410638:	e7fe      	b.n	410638 <lv_anim_start+0x9c>
  41063a:	bf00      	nop
  41063c:	00410511 	.word	0x00410511
  410640:	20439ed0 	.word	0x20439ed0
  410644:	00410ec3 	.word	0x00410ec3
  410648:	00410da1 	.word	0x00410da1
  41064c:	00411161 	.word	0x00411161
  410650:	20400b45 	.word	0x20400b45
  410654:	00410265 	.word	0x00410265
  410658:	00410239 	.word	0x00410239
  41065c:	20400b48 	.word	0x20400b48
  410660:	0041c064 	.word	0x0041c064
  410664:	00420358 	.word	0x00420358
  410668:	0041c098 	.word	0x0041c098
  41066c:	00420318 	.word	0x00420318
  410670:	00420328 	.word	0x00420328
  410674:	00410edd 	.word	0x00410edd

00410678 <lv_anim_get>:
{
  410678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41067a:	4604      	mov	r4, r0
  41067c:	460f      	mov	r7, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
  41067e:	480b      	ldr	r0, [pc, #44]	; (4106ac <lv_anim_get+0x34>)
  410680:	4b0b      	ldr	r3, [pc, #44]	; (4106b0 <lv_anim_get+0x38>)
  410682:	4798      	blx	r3
  410684:	4601      	mov	r1, r0
  410686:	b170      	cbz	r0, 4106a6 <lv_anim_get+0x2e>
  410688:	4e08      	ldr	r6, [pc, #32]	; (4106ac <lv_anim_get+0x34>)
  41068a:	4d0a      	ldr	r5, [pc, #40]	; (4106b4 <lv_anim_get+0x3c>)
  41068c:	e003      	b.n	410696 <lv_anim_get+0x1e>
  41068e:	4630      	mov	r0, r6
  410690:	47a8      	blx	r5
  410692:	4601      	mov	r1, r0
  410694:	b138      	cbz	r0, 4106a6 <lv_anim_get+0x2e>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  410696:	680b      	ldr	r3, [r1, #0]
  410698:	42a3      	cmp	r3, r4
  41069a:	d1f8      	bne.n	41068e <lv_anim_get+0x16>
  41069c:	684b      	ldr	r3, [r1, #4]
  41069e:	42bb      	cmp	r3, r7
  4106a0:	d001      	beq.n	4106a6 <lv_anim_get+0x2e>
  4106a2:	2f00      	cmp	r7, #0
  4106a4:	d1f3      	bne.n	41068e <lv_anim_get+0x16>
}
  4106a6:	4608      	mov	r0, r1
  4106a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4106aa:	bf00      	nop
  4106ac:	20439ed0 	.word	0x20439ed0
  4106b0:	00410ea1 	.word	0x00410ea1
  4106b4:	00410eb5 	.word	0x00410eb5

004106b8 <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
  4106b8:	1a89      	subs	r1, r1, r2
  4106ba:	2900      	cmp	r1, #0
  4106bc:	bfb8      	it	lt
  4106be:	4249      	neglt	r1, r1
    uint32_t time = (d * 1000) / speed;
  4106c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4106c4:	fb02 f201 	mul.w	r2, r2, r1
  4106c8:	fbb2 f0f0 	udiv	r0, r2, r0
        time++;
  4106cc:	2800      	cmp	r0, #0
}
  4106ce:	bf08      	it	eq
  4106d0:	2001      	moveq	r0, #1
  4106d2:	4770      	bx	lr

004106d4 <lv_anim_path_ease_out>:
{
  4106d4:	b570      	push	{r4, r5, r6, lr}
  4106d6:	b082      	sub	sp, #8
  4106d8:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, 1024);
  4106da:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4106de:	9500      	str	r5, [sp, #0]
  4106e0:	2300      	movs	r3, #0
  4106e2:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4106e4:	4619      	mov	r1, r3
  4106e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4106e8:	4e09      	ldr	r6, [pc, #36]	; (410710 <lv_anim_path_ease_out+0x3c>)
  4106ea:	47b0      	blx	r6
    int32_t step = lv_bezier3(t, 0, 900, 950, 1024);
  4106ec:	9500      	str	r5, [sp, #0]
  4106ee:	f240 33b6 	movw	r3, #950	; 0x3b6
  4106f2:	f44f 7261 	mov.w	r2, #900	; 0x384
  4106f6:	2100      	movs	r1, #0
  4106f8:	4d06      	ldr	r5, [pc, #24]	; (410714 <lv_anim_path_ease_out+0x40>)
  4106fa:	47a8      	blx	r5
    new_value = step * (a->end_value - a->start_value);
  4106fc:	69e2      	ldr	r2, [r4, #28]
  4106fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  410700:	1a9b      	subs	r3, r3, r2
  410702:	fb00 f003 	mul.w	r0, r0, r3
}
  410706:	eb02 20a0 	add.w	r0, r2, r0, asr #10
  41070a:	b002      	add	sp, #8
  41070c:	bd70      	pop	{r4, r5, r6, pc}
  41070e:	bf00      	nop
  410710:	00411077 	.word	0x00411077
  410714:	00411025 	.word	0x00411025

00410718 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
  410718:	b430      	push	{r4, r5}
    lv_coord_t r = (area->x2 - area->x1) / 2;
  41071a:	f9b0 4000 	ldrsh.w	r4, [r0]
  41071e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  410722:	1b1b      	subs	r3, r3, r4
  410724:	bf48      	it	mi
  410726:	3301      	addmi	r3, #1
  410728:	105b      	asrs	r3, r3, #1

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
  41072a:	b29d      	uxth	r5, r3
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
  41072c:	880a      	ldrh	r2, [r1, #0]
  41072e:	1b12      	subs	r2, r2, r4
  410730:	1b52      	subs	r2, r2, r5
    lv_coord_t py = p->y - cy;
  410732:	8849      	ldrh	r1, [r1, #2]
  410734:	8840      	ldrh	r0, [r0, #2]
  410736:	1a08      	subs	r0, r1, r0
  410738:	1b40      	subs	r0, r0, r5

    uint32_t r_sqrd = r * r;
  41073a:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
  41073e:	fb10 f000 	smulbb	r0, r0, r0
  410742:	fb12 0202 	smlabb	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
  410746:	4293      	cmp	r3, r2
  410748:	bf34      	ite	cc
  41074a:	2000      	movcc	r0, #0
  41074c:	2001      	movcs	r0, #1
  41074e:	bc30      	pop	{r4, r5}
  410750:	4770      	bx	lr

00410752 <lv_area_set>:
    area_p->x1 = x1;
  410752:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
  410754:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
  410756:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
  410758:	f9bd 3000 	ldrsh.w	r3, [sp]
  41075c:	80c3      	strh	r3, [r0, #6]
  41075e:	4770      	bx	lr

00410760 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
  410760:	3901      	subs	r1, #1
  410762:	8803      	ldrh	r3, [r0, #0]
  410764:	4419      	add	r1, r3
  410766:	8081      	strh	r1, [r0, #4]
  410768:	4770      	bx	lr

0041076a <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
  41076a:	3901      	subs	r1, #1
  41076c:	8843      	ldrh	r3, [r0, #2]
  41076e:	4419      	add	r1, r3
  410770:	80c1      	strh	r1, [r0, #6]
  410772:	4770      	bx	lr

00410774 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
  410774:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  410778:	f9b0 3000 	ldrsh.w	r3, [r0]
  41077c:	1ad2      	subs	r2, r2, r3
  41077e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  410782:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  410786:	1a18      	subs	r0, r3, r0
  410788:	3001      	adds	r0, #1
}
  41078a:	fb02 0000 	mla	r0, r2, r0, r0
  41078e:	4770      	bx	lr

00410790 <lv_area_increase>:
    area->x1 -= w_extra;
  410790:	b289      	uxth	r1, r1
  410792:	8803      	ldrh	r3, [r0, #0]
  410794:	1a5b      	subs	r3, r3, r1
  410796:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
  410798:	8883      	ldrh	r3, [r0, #4]
  41079a:	4419      	add	r1, r3
  41079c:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
  41079e:	b292      	uxth	r2, r2
  4107a0:	8843      	ldrh	r3, [r0, #2]
  4107a2:	1a9b      	subs	r3, r3, r2
  4107a4:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
  4107a6:	88c3      	ldrh	r3, [r0, #6]
  4107a8:	441a      	add	r2, r3
  4107aa:	80c2      	strh	r2, [r0, #6]
  4107ac:	4770      	bx	lr

004107ae <lv_area_move>:
    area->x1 += x_ofs;
  4107ae:	b289      	uxth	r1, r1
  4107b0:	8803      	ldrh	r3, [r0, #0]
  4107b2:	440b      	add	r3, r1
  4107b4:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
  4107b6:	8883      	ldrh	r3, [r0, #4]
  4107b8:	4419      	add	r1, r3
  4107ba:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
  4107bc:	b292      	uxth	r2, r2
  4107be:	8843      	ldrh	r3, [r0, #2]
  4107c0:	4413      	add	r3, r2
  4107c2:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
  4107c4:	88c3      	ldrh	r3, [r0, #6]
  4107c6:	441a      	add	r2, r3
  4107c8:	80c2      	strh	r2, [r0, #6]
  4107ca:	4770      	bx	lr

004107cc <_lv_area_intersect>:
{
  4107cc:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
  4107ce:	f9b2 5000 	ldrsh.w	r5, [r2]
  4107d2:	f9b1 3000 	ldrsh.w	r3, [r1]
  4107d6:	429d      	cmp	r5, r3
  4107d8:	bfb8      	it	lt
  4107da:	461d      	movlt	r5, r3
  4107dc:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
  4107de:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  4107e2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  4107e6:	42a3      	cmp	r3, r4
  4107e8:	bfb8      	it	lt
  4107ea:	4623      	movlt	r3, r4
  4107ec:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
  4107ee:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
  4107f2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  4107f6:	42b4      	cmp	r4, r6
  4107f8:	bfa8      	it	ge
  4107fa:	4634      	movge	r4, r6
  4107fc:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
  4107fe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  410802:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  410806:	428a      	cmp	r2, r1
  410808:	bfa8      	it	ge
  41080a:	460a      	movge	r2, r1
  41080c:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
  41080e:	42a5      	cmp	r5, r4
  410810:	bfd8      	it	le
  410812:	4293      	cmple	r3, r2
  410814:	bfcc      	ite	gt
  410816:	2001      	movgt	r0, #1
  410818:	2000      	movle	r0, #0
}
  41081a:	f080 0001 	eor.w	r0, r0, #1
  41081e:	bc70      	pop	{r4, r5, r6}
  410820:	4770      	bx	lr
	...

00410824 <_lv_area_is_point_on>:
{
  410824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410828:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
  41082a:	f9b1 4000 	ldrsh.w	r4, [r1]
  41082e:	f9b0 3000 	ldrsh.w	r3, [r0]
  410832:	429c      	cmp	r4, r3
  410834:	f2c0 809c 	blt.w	410970 <_lv_area_is_point_on+0x14c>
  410838:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
  41083c:	4544      	cmp	r4, r8
  41083e:	f300 809b 	bgt.w	410978 <_lv_area_is_point_on+0x154>
  410842:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  410846:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
  41084a:	4554      	cmp	r4, sl
  41084c:	f2c0 8096 	blt.w	41097c <_lv_area_is_point_on+0x158>
  410850:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  410854:	9001      	str	r0, [sp, #4]
    if(!is_on_rect)
  410856:	4284      	cmp	r4, r0
  410858:	f300 8092 	bgt.w	410980 <_lv_area_is_point_on+0x15c>
    if(radius <= 0) {
  41085c:	2a00      	cmp	r2, #0
  41085e:	f340 8091 	ble.w	410984 <_lv_area_is_point_on+0x160>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410862:	fa1f f988 	uxth.w	r9, r8
  410866:	b29d      	uxth	r5, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410868:	b287      	uxth	r7, r0
  41086a:	fa1f f68a 	uxth.w	r6, sl
    corner_area.x1 = a_p->x1;
  41086e:	f8ad 3008 	strh.w	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410872:	f109 0001 	add.w	r0, r9, #1
  410876:	1b40      	subs	r0, r0, r5
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  410878:	b200      	sxth	r0, r0
  41087a:	2800      	cmp	r0, #0
  41087c:	bfb8      	it	lt
  41087e:	3001      	addlt	r0, #1
  410880:	1040      	asrs	r0, r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410882:	1c7b      	adds	r3, r7, #1
  410884:	1b9b      	subs	r3, r3, r6
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  410886:	b21b      	sxth	r3, r3
  410888:	2b00      	cmp	r3, #0
  41088a:	bfb8      	it	lt
  41088c:	3301      	addlt	r3, #1
    lv_coord_t max_radius = LV_MIN(w, h);
  41088e:	b200      	sxth	r0, r0
  410890:	105c      	asrs	r4, r3, #1
    corner_area.x2 = a_p->x1 + radius;
  410892:	4284      	cmp	r4, r0
  410894:	bfa8      	it	ge
  410896:	4604      	movge	r4, r0
  410898:	4294      	cmp	r4, r2
  41089a:	bfa8      	it	ge
  41089c:	4614      	movge	r4, r2
  41089e:	b2a4      	uxth	r4, r4
  4108a0:	4425      	add	r5, r4
  4108a2:	b2ad      	uxth	r5, r5
  4108a4:	f8ad 500c 	strh.w	r5, [sp, #12]
    corner_area.y1 = a_p->y1;
  4108a8:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
  4108ac:	4426      	add	r6, r4
  4108ae:	b2b6      	uxth	r6, r6
  4108b0:	fa0f fb86 	sxth.w	fp, r6
  4108b4:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4108b8:	2200      	movs	r2, #0
  4108ba:	9100      	str	r1, [sp, #0]
  4108bc:	a802      	add	r0, sp, #8
  4108be:	f7ff ffb1 	bl	410824 <_lv_area_is_point_on>
  4108c2:	b150      	cbz	r0, 4108da <_lv_area_is_point_on+0xb6>
        corner_area.x2 += radius;
  4108c4:	4425      	add	r5, r4
  4108c6:	f8ad 500c 	strh.w	r5, [sp, #12]
        corner_area.y2 += radius;
  4108ca:	4434      	add	r4, r6
  4108cc:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
  4108d0:	9900      	ldr	r1, [sp, #0]
  4108d2:	a802      	add	r0, sp, #8
  4108d4:	4b2d      	ldr	r3, [pc, #180]	; (41098c <_lv_area_is_point_on+0x168>)
  4108d6:	4798      	blx	r3
  4108d8:	e04b      	b.n	410972 <_lv_area_is_point_on+0x14e>
    corner_area.y1 = a_p->y2 - radius;
  4108da:	1b3f      	subs	r7, r7, r4
  4108dc:	b2bf      	uxth	r7, r7
  4108de:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y2;
  4108e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4108e6:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4108ea:	2200      	movs	r2, #0
  4108ec:	9900      	ldr	r1, [sp, #0]
  4108ee:	a802      	add	r0, sp, #8
  4108f0:	f7ff ff98 	bl	410824 <_lv_area_is_point_on>
  4108f4:	b150      	cbz	r0, 41090c <_lv_area_is_point_on+0xe8>
        corner_area.x2 += radius;
  4108f6:	4425      	add	r5, r4
  4108f8:	f8ad 500c 	strh.w	r5, [sp, #12]
        corner_area.y1 -= radius;
  4108fc:	1b3c      	subs	r4, r7, r4
  4108fe:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
  410902:	9900      	ldr	r1, [sp, #0]
  410904:	a802      	add	r0, sp, #8
  410906:	4b21      	ldr	r3, [pc, #132]	; (41098c <_lv_area_is_point_on+0x168>)
  410908:	4798      	blx	r3
  41090a:	e032      	b.n	410972 <_lv_area_is_point_on+0x14e>
    corner_area.x1 = a_p->x2 - radius;
  41090c:	eba9 0904 	sub.w	r9, r9, r4
  410910:	fa1f f989 	uxth.w	r9, r9
  410914:	f8ad 9008 	strh.w	r9, [sp, #8]
    corner_area.x2 = a_p->x2;
  410918:	f8ad 800c 	strh.w	r8, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  41091c:	2200      	movs	r2, #0
  41091e:	9d00      	ldr	r5, [sp, #0]
  410920:	4629      	mov	r1, r5
  410922:	a802      	add	r0, sp, #8
  410924:	f7ff ff7e 	bl	410824 <_lv_area_is_point_on>
  410928:	b158      	cbz	r0, 410942 <_lv_area_is_point_on+0x11e>
        corner_area.x1 -= radius;
  41092a:	eba9 0904 	sub.w	r9, r9, r4
  41092e:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y1 -= radius;
  410932:	1b3c      	subs	r4, r7, r4
  410934:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
  410938:	4629      	mov	r1, r5
  41093a:	a802      	add	r0, sp, #8
  41093c:	4b13      	ldr	r3, [pc, #76]	; (41098c <_lv_area_is_point_on+0x168>)
  41093e:	4798      	blx	r3
  410940:	e017      	b.n	410972 <_lv_area_is_point_on+0x14e>
    corner_area.y1 = a_p->y1;
  410942:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
  410946:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  41094a:	2200      	movs	r2, #0
  41094c:	9d00      	ldr	r5, [sp, #0]
  41094e:	4629      	mov	r1, r5
  410950:	a802      	add	r0, sp, #8
  410952:	f7ff ff67 	bl	410824 <_lv_area_is_point_on>
  410956:	b1b8      	cbz	r0, 410988 <_lv_area_is_point_on+0x164>
        corner_area.x1 -= radius;
  410958:	eba9 0904 	sub.w	r9, r9, r4
  41095c:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y2 += radius;
  410960:	4434      	add	r4, r6
  410962:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
  410966:	4629      	mov	r1, r5
  410968:	a802      	add	r0, sp, #8
  41096a:	4b08      	ldr	r3, [pc, #32]	; (41098c <_lv_area_is_point_on+0x168>)
  41096c:	4798      	blx	r3
  41096e:	e000      	b.n	410972 <_lv_area_is_point_on+0x14e>
        return false;
  410970:	2000      	movs	r0, #0
}
  410972:	b005      	add	sp, #20
  410974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
  410978:	2000      	movs	r0, #0
  41097a:	e7fa      	b.n	410972 <_lv_area_is_point_on+0x14e>
  41097c:	2000      	movs	r0, #0
  41097e:	e7f8      	b.n	410972 <_lv_area_is_point_on+0x14e>
  410980:	2000      	movs	r0, #0
  410982:	e7f6      	b.n	410972 <_lv_area_is_point_on+0x14e>
        return true;
  410984:	2001      	movs	r0, #1
  410986:	e7f4      	b.n	410972 <_lv_area_is_point_on+0x14e>
    return true;
  410988:	2001      	movs	r0, #1
  41098a:	e7f2      	b.n	410972 <_lv_area_is_point_on+0x14e>
  41098c:	00410719 	.word	0x00410719

00410990 <_lv_area_is_in>:
{
  410990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410994:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  410996:	f9b0 6000 	ldrsh.w	r6, [r0]
  41099a:	f9b1 3000 	ldrsh.w	r3, [r1]
  41099e:	42b3      	cmp	r3, r6
  4109a0:	dc3d      	bgt.n	410a1e <_lv_area_is_in+0x8e>
  4109a2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  4109a6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  4109aa:	429c      	cmp	r4, r3
  4109ac:	dc3c      	bgt.n	410a28 <_lv_area_is_in+0x98>
  4109ae:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
  4109b2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  4109b6:	42bc      	cmp	r4, r7
  4109b8:	db38      	blt.n	410a2c <_lv_area_is_in+0x9c>
       ain_p->y2 <= aholder_p->y2) {
  4109ba:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(!is_in) return false;
  4109be:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
  4109c2:	4540      	cmp	r0, r8
  4109c4:	db34      	blt.n	410a30 <_lv_area_is_in+0xa0>
    if(radius == 0) return true;
  4109c6:	b90a      	cbnz	r2, 4109cc <_lv_area_is_in+0x3c>
  4109c8:	2301      	movs	r3, #1
  4109ca:	e029      	b.n	410a20 <_lv_area_is_in+0x90>
  4109cc:	4615      	mov	r5, r2
  4109ce:	460c      	mov	r4, r1
    p.x = ain_p->x1;
  4109d0:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y1;
  4109d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4109d8:	a901      	add	r1, sp, #4
  4109da:	4620      	mov	r0, r4
  4109dc:	4b15      	ldr	r3, [pc, #84]	; (410a34 <_lv_area_is_in+0xa4>)
  4109de:	4798      	blx	r3
  4109e0:	4603      	mov	r3, r0
  4109e2:	b1e8      	cbz	r0, 410a20 <_lv_area_is_in+0x90>
    p.x = ain_p->x2;
  4109e4:	a902      	add	r1, sp, #8
  4109e6:	f821 7d04 	strh.w	r7, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4109ea:	462a      	mov	r2, r5
  4109ec:	4620      	mov	r0, r4
  4109ee:	4b11      	ldr	r3, [pc, #68]	; (410a34 <_lv_area_is_in+0xa4>)
  4109f0:	4798      	blx	r3
  4109f2:	4603      	mov	r3, r0
  4109f4:	b1a0      	cbz	r0, 410a20 <_lv_area_is_in+0x90>
    p.x = ain_p->x1;
  4109f6:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y2;
  4109fa:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4109fe:	462a      	mov	r2, r5
  410a00:	a901      	add	r1, sp, #4
  410a02:	4620      	mov	r0, r4
  410a04:	4b0b      	ldr	r3, [pc, #44]	; (410a34 <_lv_area_is_in+0xa4>)
  410a06:	4798      	blx	r3
  410a08:	4603      	mov	r3, r0
  410a0a:	b148      	cbz	r0, 410a20 <_lv_area_is_in+0x90>
    p.x = ain_p->x2;
  410a0c:	a902      	add	r1, sp, #8
  410a0e:	f821 7d04 	strh.w	r7, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  410a12:	462a      	mov	r2, r5
  410a14:	4620      	mov	r0, r4
  410a16:	4b07      	ldr	r3, [pc, #28]	; (410a34 <_lv_area_is_in+0xa4>)
  410a18:	4798      	blx	r3
  410a1a:	4603      	mov	r3, r0
  410a1c:	e000      	b.n	410a20 <_lv_area_is_in+0x90>
    if(!is_in) return false;
  410a1e:	2300      	movs	r3, #0
}
  410a20:	4618      	mov	r0, r3
  410a22:	b002      	add	sp, #8
  410a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!is_in) return false;
  410a28:	2300      	movs	r3, #0
  410a2a:	e7f9      	b.n	410a20 <_lv_area_is_in+0x90>
  410a2c:	2300      	movs	r3, #0
  410a2e:	e7f7      	b.n	410a20 <_lv_area_is_in+0x90>
  410a30:	2300      	movs	r3, #0
  410a32:	e7f5      	b.n	410a20 <_lv_area_is_in+0x90>
  410a34:	00410825 	.word	0x00410825

00410a38 <_lv_area_is_out>:
{
  410a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  410a3c:	b082      	sub	sp, #8
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
  410a3e:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
  410a42:	f9b1 3000 	ldrsh.w	r3, [r1]
  410a46:	42ab      	cmp	r3, r5
  410a48:	dc43      	bgt.n	410ad2 <_lv_area_is_out+0x9a>
  410a4a:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
  410a4e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  410a52:	42bb      	cmp	r3, r7
  410a54:	dc42      	bgt.n	410adc <_lv_area_is_out+0xa4>
  410a56:	f9b0 8000 	ldrsh.w	r8, [r0]
  410a5a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  410a5e:	4543      	cmp	r3, r8
  410a60:	db3e      	blt.n	410ae0 <_lv_area_is_out+0xa8>
       aout_p->y1 > aholder_p->y2) {
  410a62:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
  410a66:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
    if(radius == 0) return true;
  410a6a:	fab2 f482 	clz	r4, r2
  410a6e:	0964      	lsrs	r4, r4, #5
  410a70:	4298      	cmp	r0, r3
  410a72:	bfb8      	it	lt
  410a74:	f044 0401 	orrlt.w	r4, r4, #1
  410a78:	bb64      	cbnz	r4, 410ad4 <_lv_area_is_out+0x9c>
  410a7a:	4616      	mov	r6, r2
  410a7c:	4689      	mov	r9, r1
    p.x = aout_p->x1;
  410a7e:	f8ad 8004 	strh.w	r8, [sp, #4]
    p.y = aout_p->y1;
  410a82:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
  410a86:	a901      	add	r1, sp, #4
  410a88:	4648      	mov	r0, r9
  410a8a:	4b16      	ldr	r3, [pc, #88]	; (410ae4 <_lv_area_is_out+0xac>)
  410a8c:	4798      	blx	r3
  410a8e:	4682      	mov	sl, r0
  410a90:	bb00      	cbnz	r0, 410ad4 <_lv_area_is_out+0x9c>
    p.x = aout_p->x2;
  410a92:	a902      	add	r1, sp, #8
  410a94:	f821 5d04 	strh.w	r5, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
  410a98:	4632      	mov	r2, r6
  410a9a:	4648      	mov	r0, r9
  410a9c:	4b11      	ldr	r3, [pc, #68]	; (410ae4 <_lv_area_is_out+0xac>)
  410a9e:	4798      	blx	r3
  410aa0:	4604      	mov	r4, r0
  410aa2:	b108      	cbz	r0, 410aa8 <_lv_area_is_out+0x70>
  410aa4:	4654      	mov	r4, sl
  410aa6:	e015      	b.n	410ad4 <_lv_area_is_out+0x9c>
    p.x = aout_p->x1;
  410aa8:	f8ad 8004 	strh.w	r8, [sp, #4]
    p.y = aout_p->y2;
  410aac:	f8ad 7006 	strh.w	r7, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
  410ab0:	4632      	mov	r2, r6
  410ab2:	a901      	add	r1, sp, #4
  410ab4:	4648      	mov	r0, r9
  410ab6:	4b0b      	ldr	r3, [pc, #44]	; (410ae4 <_lv_area_is_out+0xac>)
  410ab8:	4798      	blx	r3
  410aba:	b958      	cbnz	r0, 410ad4 <_lv_area_is_out+0x9c>
    p.x = aout_p->x2;
  410abc:	a902      	add	r1, sp, #8
  410abe:	f821 5d04 	strh.w	r5, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
  410ac2:	4632      	mov	r2, r6
  410ac4:	4648      	mov	r0, r9
  410ac6:	4b07      	ldr	r3, [pc, #28]	; (410ae4 <_lv_area_is_out+0xac>)
  410ac8:	4798      	blx	r3
  410aca:	f080 0001 	eor.w	r0, r0, #1
  410ace:	b2c4      	uxtb	r4, r0
  410ad0:	e000      	b.n	410ad4 <_lv_area_is_out+0x9c>
        return true;
  410ad2:	2401      	movs	r4, #1
}
  410ad4:	4620      	mov	r0, r4
  410ad6:	b002      	add	sp, #8
  410ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
  410adc:	2401      	movs	r4, #1
  410ade:	e7f9      	b.n	410ad4 <_lv_area_is_out+0x9c>
  410ae0:	2401      	movs	r4, #1
  410ae2:	e7f7      	b.n	410ad4 <_lv_area_is_out+0x9c>
  410ae4:	00410825 	.word	0x00410825

00410ae8 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
  410ae8:	b430      	push	{r4, r5}
  410aea:	b28d      	uxth	r5, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  410aec:	f010 0f03 	tst.w	r0, #3
  410af0:	d002      	beq.n	410af8 <lv_color_fill+0x10>
        *buf = color;
  410af2:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  410af6:	3a01      	subs	r2, #1
    }

    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
  410af8:	eb05 4105 	add.w	r1, r5, r5, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  410afc:	2a10      	cmp	r2, #16
  410afe:	d921      	bls.n	410b44 <lv_color_fill+0x5c>
  410b00:	f100 0320 	add.w	r3, r0, #32
  410b04:	4614      	mov	r4, r2
        *buf32 = c32;
  410b06:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
  410b0a:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
  410b0e:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
  410b12:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
  410b16:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
  410b1a:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
  410b1e:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
  410b22:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
  410b26:	3c10      	subs	r4, #16
  410b28:	3320      	adds	r3, #32
    while(px_num > 16) {
  410b2a:	2c10      	cmp	r4, #16
  410b2c:	d8eb      	bhi.n	410b06 <lv_color_fill+0x1e>
  410b2e:	f1a2 0311 	sub.w	r3, r2, #17
  410b32:	091b      	lsrs	r3, r3, #4
  410b34:	1c59      	adds	r1, r3, #1
  410b36:	3a10      	subs	r2, #16
  410b38:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
  410b3c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
        buf32++;
  410b40:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
  410b44:	b11a      	cbz	r2, 410b4e <lv_color_fill+0x66>
        *buf = color;
  410b46:	f820 5b02 	strh.w	r5, [r0], #2
    while(px_num) {
  410b4a:	3a01      	subs	r2, #1
  410b4c:	d1fb      	bne.n	410b46 <lv_color_fill+0x5e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  410b4e:	bc30      	pop	{r4, r5}
  410b50:	4770      	bx	lr
	...

00410b54 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
  410b54:	2812      	cmp	r0, #18
  410b56:	d803      	bhi.n	410b60 <lv_palette_main+0xc>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
  410b58:	4b09      	ldr	r3, [pc, #36]	; (410b80 <lv_palette_main+0x2c>)
  410b5a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  410b5e:	4770      	bx	lr
{
  410b60:	b510      	push	{r4, lr}
  410b62:	b082      	sub	sp, #8
        LV_LOG_WARN("Invalid palette: %d", p);
  410b64:	9001      	str	r0, [sp, #4]
  410b66:	4b07      	ldr	r3, [pc, #28]	; (410b84 <lv_palette_main+0x30>)
  410b68:	9300      	str	r3, [sp, #0]
  410b6a:	4b07      	ldr	r3, [pc, #28]	; (410b88 <lv_palette_main+0x34>)
  410b6c:	f240 121d 	movw	r2, #285	; 0x11d
  410b70:	4906      	ldr	r1, [pc, #24]	; (410b8c <lv_palette_main+0x38>)
  410b72:	2002      	movs	r0, #2
  410b74:	4c06      	ldr	r4, [pc, #24]	; (410b90 <lv_palette_main+0x3c>)
  410b76:	47a0      	blx	r4
  410b78:	f04f 0000 	mov.w	r0, #0

}
  410b7c:	b002      	add	sp, #8
  410b7e:	bd10      	pop	{r4, pc}
  410b80:	0042037c 	.word	0x0042037c
  410b84:	004203d4 	.word	0x004203d4
  410b88:	0042036c 	.word	0x0042036c
  410b8c:	004203a4 	.word	0x004203a4
  410b90:	00410edd 	.word	0x00410edd

00410b94 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
  410b94:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
  410b96:	2104      	movs	r1, #4
  410b98:	4801      	ldr	r0, [pc, #4]	; (410ba0 <_lv_fs_init+0xc>)
  410b9a:	4b02      	ldr	r3, [pc, #8]	; (410ba4 <_lv_fs_init+0x10>)
  410b9c:	4798      	blx	r3
  410b9e:	bd08      	pop	{r3, pc}
  410ba0:	20439f5c 	.word	0x20439f5c
  410ba4:	00410d8f 	.word	0x00410d8f

00410ba8 <lv_fs_close>:
    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
    if(file_p->drv == NULL) {
  410ba8:	6843      	ldr	r3, [r0, #4]
  410baa:	b153      	cbz	r3, 410bc2 <lv_fs_close+0x1a>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
  410bac:	68da      	ldr	r2, [r3, #12]
  410bae:	b152      	cbz	r2, 410bc6 <lv_fs_close+0x1e>
{
  410bb0:	b510      	push	{r4, lr}
  410bb2:	4604      	mov	r4, r0
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  410bb4:	6801      	ldr	r1, [r0, #0]
  410bb6:	4618      	mov	r0, r3
  410bb8:	4790      	blx	r2

    file_p->file_d = NULL;
  410bba:	2300      	movs	r3, #0
  410bbc:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  410bbe:	6063      	str	r3, [r4, #4]

    return res;
  410bc0:	bd10      	pop	{r4, pc}
        return LV_FS_RES_INV_PARAM;
  410bc2:	200b      	movs	r0, #11
  410bc4:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
  410bc6:	2009      	movs	r0, #9
  410bc8:	4770      	bx	lr

00410bca <lv_fs_read>:
}

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
  410bca:	b5f0      	push	{r4, r5, r6, r7, lr}
  410bcc:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  410bce:	461e      	mov	r6, r3
  410bd0:	b10b      	cbz	r3, 410bd6 <lv_fs_read+0xc>
  410bd2:	2300      	movs	r3, #0
  410bd4:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  410bd6:	6845      	ldr	r5, [r0, #4]
  410bd8:	b18d      	cbz	r5, 410bfe <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  410bda:	692f      	ldr	r7, [r5, #16]
  410bdc:	b18f      	cbz	r7, 410c02 <lv_fs_read+0x38>
  410bde:	4613      	mov	r3, r2
  410be0:	460a      	mov	r2, r1
  410be2:	4604      	mov	r4, r0

    uint32_t br_tmp = 0;
  410be4:	a804      	add	r0, sp, #16
  410be6:	2100      	movs	r1, #0
  410be8:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  410bec:	6821      	ldr	r1, [r4, #0]
  410bee:	9000      	str	r0, [sp, #0]
  410bf0:	4628      	mov	r0, r5
  410bf2:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  410bf4:	b10e      	cbz	r6, 410bfa <lv_fs_read+0x30>
  410bf6:	9b03      	ldr	r3, [sp, #12]
  410bf8:	6033      	str	r3, [r6, #0]

    return res;
}
  410bfa:	b005      	add	sp, #20
  410bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  410bfe:	200b      	movs	r0, #11
  410c00:	e7fb      	b.n	410bfa <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  410c02:	2009      	movs	r0, #9
  410c04:	e7f9      	b.n	410bfa <lv_fs_read+0x30>

00410c06 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
  410c06:	b570      	push	{r4, r5, r6, lr}
    if(file_p->drv == NULL) {
  410c08:	6845      	ldr	r5, [r0, #4]
  410c0a:	b13d      	cbz	r5, 410c1c <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
  410c0c:	69ae      	ldr	r6, [r5, #24]
  410c0e:	b13e      	cbz	r6, 410c20 <lv_fs_seek+0x1a>
  410c10:	4613      	mov	r3, r2
  410c12:	460a      	mov	r2, r1
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
  410c14:	6801      	ldr	r1, [r0, #0]
  410c16:	4628      	mov	r0, r5
  410c18:	47b0      	blx	r6

    return res;
  410c1a:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_INV_PARAM;
  410c1c:	200b      	movs	r0, #11
  410c1e:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_NOT_IMP;
  410c20:	2009      	movs	r0, #9
}
  410c22:	bd70      	pop	{r4, r5, r6, pc}

00410c24 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
  410c24:	b570      	push	{r4, r5, r6, lr}
  410c26:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
  410c28:	480b      	ldr	r0, [pc, #44]	; (410c58 <lv_fs_get_drv+0x34>)
  410c2a:	4b0c      	ldr	r3, [pc, #48]	; (410c5c <lv_fs_get_drv+0x38>)
  410c2c:	4798      	blx	r3
  410c2e:	b180      	cbz	r0, 410c52 <lv_fs_get_drv+0x2e>
  410c30:	4601      	mov	r1, r0
        if((*drv)->letter == letter) {
  410c32:	6800      	ldr	r0, [r0, #0]
  410c34:	7803      	ldrb	r3, [r0, #0]
  410c36:	42a3      	cmp	r3, r4
  410c38:	d009      	beq.n	410c4e <lv_fs_get_drv+0x2a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
  410c3a:	4e07      	ldr	r6, [pc, #28]	; (410c58 <lv_fs_get_drv+0x34>)
  410c3c:	4d08      	ldr	r5, [pc, #32]	; (410c60 <lv_fs_get_drv+0x3c>)
  410c3e:	4630      	mov	r0, r6
  410c40:	47a8      	blx	r5
  410c42:	4601      	mov	r1, r0
  410c44:	b120      	cbz	r0, 410c50 <lv_fs_get_drv+0x2c>
        if((*drv)->letter == letter) {
  410c46:	6808      	ldr	r0, [r1, #0]
  410c48:	7803      	ldrb	r3, [r0, #0]
  410c4a:	42a3      	cmp	r3, r4
  410c4c:	d1f7      	bne.n	410c3e <lv_fs_get_drv+0x1a>
            return *drv;
        }
    }

    return NULL;
}
  410c4e:	bd70      	pop	{r4, r5, r6, pc}
  410c50:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
  410c52:	2000      	movs	r0, #0
  410c54:	e7fb      	b.n	410c4e <lv_fs_get_drv+0x2a>
  410c56:	bf00      	nop
  410c58:	20439f5c 	.word	0x20439f5c
  410c5c:	00410ea1 	.word	0x00410ea1
  410c60:	00410eb5 	.word	0x00410eb5

00410c64 <lv_fs_open>:
{
  410c64:	b5f0      	push	{r4, r5, r6, r7, lr}
  410c66:	b083      	sub	sp, #12
    if(path == NULL) {
  410c68:	b1e9      	cbz	r1, 410ca6 <lv_fs_open+0x42>
  410c6a:	4607      	mov	r7, r0
  410c6c:	4616      	mov	r6, r2
  410c6e:	460c      	mov	r4, r1
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
  410c70:	7808      	ldrb	r0, [r1, #0]
  410c72:	4b24      	ldr	r3, [pc, #144]	; (410d04 <lv_fs_open+0xa0>)
  410c74:	4798      	blx	r3
    if(drv == NULL) {
  410c76:	4605      	mov	r5, r0
  410c78:	b1f8      	cbz	r0, 410cba <lv_fs_open+0x56>
    if(drv->ready_cb) {
  410c7a:	6843      	ldr	r3, [r0, #4]
  410c7c:	b10b      	cbz	r3, 410c82 <lv_fs_open+0x1e>
        if(drv->ready_cb(drv) == false) {
  410c7e:	4798      	blx	r3
  410c80:	b330      	cbz	r0, 410cd0 <lv_fs_open+0x6c>
    if(drv->open_cb == NULL) {
  410c82:	68ab      	ldr	r3, [r5, #8]
  410c84:	2b00      	cmp	r3, #0
  410c86:	d02e      	beq.n	410ce6 <lv_fs_open+0x82>
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
  410c88:	7862      	ldrb	r2, [r4, #1]
  410c8a:	2a3a      	cmp	r2, #58	; 0x3a
    path++; /*Ignore the driver letter*/
  410c8c:	bf14      	ite	ne
  410c8e:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
  410c90:	1ca1      	addeq	r1, r4, #2
    void * file_d = drv->open_cb(drv, real_path, mode);
  410c92:	4632      	mov	r2, r6
  410c94:	4628      	mov	r0, r5
  410c96:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
  410c98:	1e43      	subs	r3, r0, #1
  410c9a:	f113 0f03 	cmn.w	r3, #3
  410c9e:	d92d      	bls.n	410cfc <lv_fs_open+0x98>
        return LV_FS_RES_UNKNOWN;
  410ca0:	200c      	movs	r0, #12
}
  410ca2:	b003      	add	sp, #12
  410ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_LOG_WARN("Can't open file: path is NULL");
  410ca6:	4b18      	ldr	r3, [pc, #96]	; (410d08 <lv_fs_open+0xa4>)
  410ca8:	9300      	str	r3, [sp, #0]
  410caa:	4b18      	ldr	r3, [pc, #96]	; (410d0c <lv_fs_open+0xa8>)
  410cac:	2245      	movs	r2, #69	; 0x45
  410cae:	4918      	ldr	r1, [pc, #96]	; (410d10 <lv_fs_open+0xac>)
  410cb0:	2002      	movs	r0, #2
  410cb2:	4c18      	ldr	r4, [pc, #96]	; (410d14 <lv_fs_open+0xb0>)
  410cb4:	47a0      	blx	r4
        return LV_FS_RES_INV_PARAM;
  410cb6:	200b      	movs	r0, #11
  410cb8:	e7f3      	b.n	410ca2 <lv_fs_open+0x3e>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
  410cba:	9401      	str	r4, [sp, #4]
  410cbc:	4b16      	ldr	r3, [pc, #88]	; (410d18 <lv_fs_open+0xb4>)
  410cbe:	9300      	str	r3, [sp, #0]
  410cc0:	4b12      	ldr	r3, [pc, #72]	; (410d0c <lv_fs_open+0xa8>)
  410cc2:	224d      	movs	r2, #77	; 0x4d
  410cc4:	4912      	ldr	r1, [pc, #72]	; (410d10 <lv_fs_open+0xac>)
  410cc6:	2002      	movs	r0, #2
  410cc8:	4c12      	ldr	r4, [pc, #72]	; (410d14 <lv_fs_open+0xb0>)
  410cca:	47a0      	blx	r4
        return LV_FS_RES_NOT_EX;
  410ccc:	2003      	movs	r0, #3
  410cce:	e7e8      	b.n	410ca2 <lv_fs_open+0x3e>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
  410cd0:	9401      	str	r4, [sp, #4]
  410cd2:	4b12      	ldr	r3, [pc, #72]	; (410d1c <lv_fs_open+0xb8>)
  410cd4:	9300      	str	r3, [sp, #0]
  410cd6:	4b0d      	ldr	r3, [pc, #52]	; (410d0c <lv_fs_open+0xa8>)
  410cd8:	2253      	movs	r2, #83	; 0x53
  410cda:	490d      	ldr	r1, [pc, #52]	; (410d10 <lv_fs_open+0xac>)
  410cdc:	2002      	movs	r0, #2
  410cde:	4c0d      	ldr	r4, [pc, #52]	; (410d14 <lv_fs_open+0xb0>)
  410ce0:	47a0      	blx	r4
            return LV_FS_RES_HW_ERR;
  410ce2:	2001      	movs	r0, #1
  410ce4:	e7dd      	b.n	410ca2 <lv_fs_open+0x3e>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
  410ce6:	9401      	str	r4, [sp, #4]
  410ce8:	4b0d      	ldr	r3, [pc, #52]	; (410d20 <lv_fs_open+0xbc>)
  410cea:	9300      	str	r3, [sp, #0]
  410cec:	4b07      	ldr	r3, [pc, #28]	; (410d0c <lv_fs_open+0xa8>)
  410cee:	2259      	movs	r2, #89	; 0x59
  410cf0:	4907      	ldr	r1, [pc, #28]	; (410d10 <lv_fs_open+0xac>)
  410cf2:	2002      	movs	r0, #2
  410cf4:	4c07      	ldr	r4, [pc, #28]	; (410d14 <lv_fs_open+0xb0>)
  410cf6:	47a0      	blx	r4
        return LV_FS_RES_NOT_IMP;
  410cf8:	2009      	movs	r0, #9
  410cfa:	e7d2      	b.n	410ca2 <lv_fs_open+0x3e>
    file_p->drv = drv;
  410cfc:	607d      	str	r5, [r7, #4]
    file_p->file_d = file_d;
  410cfe:	6038      	str	r0, [r7, #0]
    return LV_FS_RES_OK;
  410d00:	2000      	movs	r0, #0
  410d02:	e7ce      	b.n	410ca2 <lv_fs_open+0x3e>
  410d04:	00410c25 	.word	0x00410c25
  410d08:	00420434 	.word	0x00420434
  410d0c:	004203e8 	.word	0x004203e8
  410d10:	004203f4 	.word	0x004203f4
  410d14:	00410edd 	.word	0x00410edd
  410d18:	00420454 	.word	0x00420454
  410d1c:	00420480 	.word	0x00420480
  410d20:	004204a8 	.word	0x004204a8

00410d24 <lv_fs_get_ext>:
{
  410d24:	b538      	push	{r3, r4, r5, lr}
  410d26:	4605      	mov	r5, r0
    for(i = strlen(fn); i > 0; i--) {
  410d28:	4b11      	ldr	r3, [pc, #68]	; (410d70 <lv_fs_get_ext+0x4c>)
  410d2a:	4798      	blx	r3
  410d2c:	b1d0      	cbz	r0, 410d64 <lv_fs_get_ext+0x40>
  410d2e:	4604      	mov	r4, r0
        if(fn[i - 1] == '.') {
  410d30:	1e42      	subs	r2, r0, #1
  410d32:	18a9      	adds	r1, r5, r2
  410d34:	5cab      	ldrb	r3, [r5, r2]
  410d36:	2b2e      	cmp	r3, #46	; 0x2e
  410d38:	d010      	beq.n	410d5c <lv_fs_get_ext+0x38>
        else if(fn[i - 1] == '/' || fn[i - 1] == '\\') {
  410d3a:	2b2f      	cmp	r3, #47	; 0x2f
  410d3c:	d014      	beq.n	410d68 <lv_fs_get_ext+0x44>
  410d3e:	2b5c      	cmp	r3, #92	; 0x5c
  410d40:	d012      	beq.n	410d68 <lv_fs_get_ext+0x44>
    for(i = strlen(fn); i > 0; i--) {
  410d42:	b16a      	cbz	r2, 410d60 <lv_fs_get_ext+0x3c>
        if(fn[i - 1] == '.') {
  410d44:	1e54      	subs	r4, r2, #1
  410d46:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
  410d4a:	2b2e      	cmp	r3, #46	; 0x2e
  410d4c:	d005      	beq.n	410d5a <lv_fs_get_ext+0x36>
        else if(fn[i - 1] == '/' || fn[i - 1] == '\\') {
  410d4e:	2b2f      	cmp	r3, #47	; 0x2f
  410d50:	d00c      	beq.n	410d6c <lv_fs_get_ext+0x48>
  410d52:	2b5c      	cmp	r3, #92	; 0x5c
  410d54:	d00a      	beq.n	410d6c <lv_fs_get_ext+0x48>
        if(fn[i - 1] == '.') {
  410d56:	4622      	mov	r2, r4
  410d58:	e7f3      	b.n	410d42 <lv_fs_get_ext+0x1e>
  410d5a:	4614      	mov	r4, r2
            return &fn[i];
  410d5c:	1928      	adds	r0, r5, r4
  410d5e:	bd38      	pop	{r3, r4, r5, pc}
    return ""; /*Empty string if no '.' in the file name.*/
  410d60:	4804      	ldr	r0, [pc, #16]	; (410d74 <lv_fs_get_ext+0x50>)
  410d62:	bd38      	pop	{r3, r4, r5, pc}
  410d64:	4803      	ldr	r0, [pc, #12]	; (410d74 <lv_fs_get_ext+0x50>)
  410d66:	bd38      	pop	{r3, r4, r5, pc}
            return ""; /*No extension if a '\' or '/' found*/
  410d68:	4802      	ldr	r0, [pc, #8]	; (410d74 <lv_fs_get_ext+0x50>)
  410d6a:	bd38      	pop	{r3, r4, r5, pc}
  410d6c:	4801      	ldr	r0, [pc, #4]	; (410d74 <lv_fs_get_ext+0x50>)
}
  410d6e:	bd38      	pop	{r3, r4, r5, pc}
  410d70:	00419b01 	.word	0x00419b01
  410d74:	00420f10 	.word	0x00420f10

00410d78 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
  410d78:	460b      	mov	r3, r1
  410d7a:	b109      	cbz	r1, 410d80 <node_set_prev+0x8>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
  410d7c:	6801      	ldr	r1, [r0, #0]
  410d7e:	505a      	str	r2, [r3, r1]
  410d80:	4770      	bx	lr

00410d82 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
  410d82:	460b      	mov	r3, r1
  410d84:	b111      	cbz	r1, 410d8c <node_set_next+0xa>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
  410d86:	6801      	ldr	r1, [r0, #0]
  410d88:	440b      	add	r3, r1
  410d8a:	605a      	str	r2, [r3, #4]
  410d8c:	4770      	bx	lr

00410d8e <_lv_ll_init>:
    ll_p->head = NULL;
  410d8e:	2300      	movs	r3, #0
  410d90:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
  410d92:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
  410d94:	3103      	adds	r1, #3
  410d96:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
  410d9a:	6001      	str	r1, [r0, #0]
  410d9c:	4770      	bx	lr
	...

00410da0 <_lv_ll_ins_head>:
{
  410da0:	b538      	push	{r3, r4, r5, lr}
  410da2:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  410da4:	6800      	ldr	r0, [r0, #0]
  410da6:	3008      	adds	r0, #8
  410da8:	4b0d      	ldr	r3, [pc, #52]	; (410de0 <_lv_ll_ins_head+0x40>)
  410daa:	4798      	blx	r3
    if(n_new != NULL) {
  410dac:	4605      	mov	r5, r0
  410dae:	b190      	cbz	r0, 410dd6 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
  410db0:	2200      	movs	r2, #0
  410db2:	4601      	mov	r1, r0
  410db4:	4620      	mov	r0, r4
  410db6:	4b0b      	ldr	r3, [pc, #44]	; (410de4 <_lv_ll_ins_head+0x44>)
  410db8:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
  410dba:	6862      	ldr	r2, [r4, #4]
  410dbc:	4629      	mov	r1, r5
  410dbe:	4620      	mov	r0, r4
  410dc0:	4b09      	ldr	r3, [pc, #36]	; (410de8 <_lv_ll_ins_head+0x48>)
  410dc2:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
  410dc4:	6861      	ldr	r1, [r4, #4]
  410dc6:	b119      	cbz	r1, 410dd0 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
  410dc8:	462a      	mov	r2, r5
  410dca:	4620      	mov	r0, r4
  410dcc:	4b05      	ldr	r3, [pc, #20]	; (410de4 <_lv_ll_ins_head+0x44>)
  410dce:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
  410dd0:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
  410dd2:	68a3      	ldr	r3, [r4, #8]
  410dd4:	b10b      	cbz	r3, 410dda <_lv_ll_ins_head+0x3a>
}
  410dd6:	4628      	mov	r0, r5
  410dd8:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
  410dda:	60a5      	str	r5, [r4, #8]
  410ddc:	e7fb      	b.n	410dd6 <_lv_ll_ins_head+0x36>
  410dde:	bf00      	nop
  410de0:	004114b5 	.word	0x004114b5
  410de4:	00410d79 	.word	0x00410d79
  410de8:	00410d83 	.word	0x00410d83

00410dec <_lv_ll_ins_tail>:
{
  410dec:	b538      	push	{r3, r4, r5, lr}
  410dee:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  410df0:	6800      	ldr	r0, [r0, #0]
  410df2:	3008      	adds	r0, #8
  410df4:	4b0d      	ldr	r3, [pc, #52]	; (410e2c <_lv_ll_ins_tail+0x40>)
  410df6:	4798      	blx	r3
    if(n_new != NULL) {
  410df8:	4605      	mov	r5, r0
  410dfa:	b190      	cbz	r0, 410e22 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
  410dfc:	2200      	movs	r2, #0
  410dfe:	4601      	mov	r1, r0
  410e00:	4620      	mov	r0, r4
  410e02:	4b0b      	ldr	r3, [pc, #44]	; (410e30 <_lv_ll_ins_tail+0x44>)
  410e04:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
  410e06:	68a2      	ldr	r2, [r4, #8]
  410e08:	4629      	mov	r1, r5
  410e0a:	4620      	mov	r0, r4
  410e0c:	4b09      	ldr	r3, [pc, #36]	; (410e34 <_lv_ll_ins_tail+0x48>)
  410e0e:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
  410e10:	68a1      	ldr	r1, [r4, #8]
  410e12:	b119      	cbz	r1, 410e1c <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
  410e14:	462a      	mov	r2, r5
  410e16:	4620      	mov	r0, r4
  410e18:	4b05      	ldr	r3, [pc, #20]	; (410e30 <_lv_ll_ins_tail+0x44>)
  410e1a:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
  410e1c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
  410e1e:	6863      	ldr	r3, [r4, #4]
  410e20:	b10b      	cbz	r3, 410e26 <_lv_ll_ins_tail+0x3a>
}
  410e22:	4628      	mov	r0, r5
  410e24:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
  410e26:	6065      	str	r5, [r4, #4]
  410e28:	e7fb      	b.n	410e22 <_lv_ll_ins_tail+0x36>
  410e2a:	bf00      	nop
  410e2c:	004114b5 	.word	0x004114b5
  410e30:	00410d83 	.word	0x00410d83
  410e34:	00410d79 	.word	0x00410d79

00410e38 <_lv_ll_remove>:
    if(ll_p == NULL) return;
  410e38:	2800      	cmp	r0, #0
  410e3a:	d02c      	beq.n	410e96 <_lv_ll_remove+0x5e>
{
  410e3c:	b570      	push	{r4, r5, r6, lr}
  410e3e:	4604      	mov	r4, r0
    if(_lv_ll_get_head(ll_p) == node_p) {
  410e40:	6843      	ldr	r3, [r0, #4]
  410e42:	4299      	cmp	r1, r3
  410e44:	d010      	beq.n	410e68 <_lv_ll_remove+0x30>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
  410e46:	6883      	ldr	r3, [r0, #8]
  410e48:	4299      	cmp	r1, r3
  410e4a:	d019      	beq.n	410e80 <_lv_ll_remove+0x48>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
  410e4c:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
  410e4e:	58ce      	ldr	r6, [r1, r3]
    return *((lv_ll_node_t **)n_act_d);
  410e50:	4419      	add	r1, r3
  410e52:	684d      	ldr	r5, [r1, #4]
        node_set_next(ll_p, n_prev, n_next);
  410e54:	462a      	mov	r2, r5
  410e56:	4631      	mov	r1, r6
  410e58:	4b0f      	ldr	r3, [pc, #60]	; (410e98 <_lv_ll_remove+0x60>)
  410e5a:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
  410e5c:	4632      	mov	r2, r6
  410e5e:	4629      	mov	r1, r5
  410e60:	4620      	mov	r0, r4
  410e62:	4b0e      	ldr	r3, [pc, #56]	; (410e9c <_lv_ll_remove+0x64>)
  410e64:	4798      	blx	r3
  410e66:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
  410e68:	6803      	ldr	r3, [r0, #0]
  410e6a:	4419      	add	r1, r3
  410e6c:	6849      	ldr	r1, [r1, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
  410e6e:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
  410e70:	b119      	cbz	r1, 410e7a <_lv_ll_remove+0x42>
            node_set_prev(ll_p, ll_p->head, NULL);
  410e72:	2200      	movs	r2, #0
  410e74:	4b09      	ldr	r3, [pc, #36]	; (410e9c <_lv_ll_remove+0x64>)
  410e76:	4798      	blx	r3
  410e78:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
  410e7a:	2300      	movs	r3, #0
  410e7c:	6083      	str	r3, [r0, #8]
  410e7e:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
  410e80:	6803      	ldr	r3, [r0, #0]
  410e82:	58c9      	ldr	r1, [r1, r3]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
  410e84:	6081      	str	r1, [r0, #8]
        if(ll_p->tail == NULL) {
  410e86:	b119      	cbz	r1, 410e90 <_lv_ll_remove+0x58>
            node_set_next(ll_p, ll_p->tail, NULL);
  410e88:	2200      	movs	r2, #0
  410e8a:	4b03      	ldr	r3, [pc, #12]	; (410e98 <_lv_ll_remove+0x60>)
  410e8c:	4798      	blx	r3
  410e8e:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
  410e90:	2300      	movs	r3, #0
  410e92:	6043      	str	r3, [r0, #4]
  410e94:	bd70      	pop	{r4, r5, r6, pc}
  410e96:	4770      	bx	lr
  410e98:	00410d83 	.word	0x00410d83
  410e9c:	00410d79 	.word	0x00410d79

00410ea0 <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
  410ea0:	b108      	cbz	r0, 410ea6 <_lv_ll_get_head+0x6>
    return ll_p->head;
  410ea2:	6840      	ldr	r0, [r0, #4]
  410ea4:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  410ea6:	2000      	movs	r0, #0
}
  410ea8:	4770      	bx	lr

00410eaa <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
  410eaa:	b108      	cbz	r0, 410eb0 <_lv_ll_get_tail+0x6>
    return ll_p->tail;
  410eac:	6880      	ldr	r0, [r0, #8]
  410eae:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  410eb0:	2000      	movs	r0, #0
}
  410eb2:	4770      	bx	lr

00410eb4 <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
  410eb4:	6803      	ldr	r3, [r0, #0]
  410eb6:	4419      	add	r1, r3
}
  410eb8:	6848      	ldr	r0, [r1, #4]
  410eba:	4770      	bx	lr

00410ebc <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
  410ebc:	6803      	ldr	r3, [r0, #0]
}
  410ebe:	58c8      	ldr	r0, [r1, r3]
  410ec0:	4770      	bx	lr

00410ec2 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
  410ec2:	b140      	cbz	r0, 410ed6 <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  410ec4:	6842      	ldr	r2, [r0, #4]
  410ec6:	b10a      	cbz	r2, 410ecc <_lv_ll_is_empty+0xa>
    return false;
  410ec8:	2000      	movs	r0, #0
}
  410eca:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  410ecc:	6880      	ldr	r0, [r0, #8]
  410ece:	fab0 f080 	clz	r0, r0
  410ed2:	0940      	lsrs	r0, r0, #5
  410ed4:	4770      	bx	lr
    if(ll_p == NULL) return true;
  410ed6:	2001      	movs	r0, #1
  410ed8:	4770      	bx	lr
	...

00410edc <_lv_log_add>:
 * @param func name of the function when the log added
 * @param format printf-like format string
 * @param ... parameters for `format`
 */
void _lv_log_add(lv_log_level_t level, const char * file, int line, const char * func, const char * format, ...)
{
  410edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  410ee0:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    static uint32_t last_log_time = 0;

    if(level >= LV_LOG_LEVEL) {
  410ee4:	1e85      	subs	r5, r0, #2
  410ee6:	b2ed      	uxtb	r5, r5
  410ee8:	2d03      	cmp	r5, #3
  410eea:	d848      	bhi.n	410f7e <_lv_log_add+0xa2>
  410eec:	4698      	mov	r8, r3
  410eee:	4691      	mov	r9, r2
  410ef0:	460f      	mov	r7, r1
  410ef2:	4682      	mov	sl, r0
        va_list args;
        va_start(args, format);
  410ef4:	ab95      	add	r3, sp, #596	; 0x254
  410ef6:	9309      	str	r3, [sp, #36]	; 0x24

        /*Use only the file name not the path*/
        size_t p;
        for(p = strlen(file); p > 0; p--) {
  410ef8:	4608      	mov	r0, r1
  410efa:	4b23      	ldr	r3, [pc, #140]	; (410f88 <_lv_log_add+0xac>)
  410efc:	4798      	blx	r3
  410efe:	4604      	mov	r4, r0
  410f00:	b170      	cbz	r0, 410f20 <_lv_log_add+0x44>
            if(file[p] == '/' || file[p] == '\\') {
  410f02:	183e      	adds	r6, r7, r0
  410f04:	5c3b      	ldrb	r3, [r7, r0]
  410f06:	2b2f      	cmp	r3, #47	; 0x2f
  410f08:	d009      	beq.n	410f1e <_lv_log_add+0x42>
  410f0a:	2b5c      	cmp	r3, #92	; 0x5c
  410f0c:	d007      	beq.n	410f1e <_lv_log_add+0x42>
        for(p = strlen(file); p > 0; p--) {
  410f0e:	3c01      	subs	r4, #1
  410f10:	d006      	beq.n	410f20 <_lv_log_add+0x44>
            if(file[p] == '/' || file[p] == '\\') {
  410f12:	f816 5d01 	ldrb.w	r5, [r6, #-1]!
  410f16:	2d2f      	cmp	r5, #47	; 0x2f
  410f18:	d001      	beq.n	410f1e <_lv_log_add+0x42>
  410f1a:	2d5c      	cmp	r5, #92	; 0x5c
  410f1c:	d1f7      	bne.n	410f0e <_lv_log_add+0x32>
                p++;    /*Skip the slash*/
  410f1e:	3401      	adds	r4, #1
                break;
            }
        }

        uint32_t t = lv_tick_get();
  410f20:	4b1a      	ldr	r3, [pc, #104]	; (410f8c <_lv_log_add+0xb0>)
  410f22:	4798      	blx	r3
  410f24:	4605      	mov	r5, r0
        printf("[%s]\t(%" LV_PRId32 ".%03" LV_PRId32 ", +%" LV_PRId32 ")\t %s: ",
               lvl_prefix[level], t / 1000, t % 1000, t - last_log_time, func);
        vprintf(format, args);
        printf(" \t(in %s line #%d)\n", &file[p], line);
#else
        if (custom_print_cb) {
  410f26:	4b1a      	ldr	r3, [pc, #104]	; (410f90 <_lv_log_add+0xb4>)
  410f28:	681b      	ldr	r3, [r3, #0]
  410f2a:	b333      	cbz	r3, 410f7a <_lv_log_add+0x9e>
            char msg[256];
            lv_vsnprintf(msg, sizeof(msg), format, args);
            lv_snprintf(buf, sizeof(buf), "[%s]\t(%" LV_PRId32 ".%03" LV_PRId32 ", +%" LV_PRId32 ")\t %s: %s \t(in %s line #%d)\n",
                        lvl_prefix[level], t / 1000, t % 1000, t - last_log_time, func, msg, &file[p], line);
#else
            lv_vaformat_t vaf = {format, &args};
  410f2c:	aa0a      	add	r2, sp, #40	; 0x28
  410f2e:	9b94      	ldr	r3, [sp, #592]	; 0x250
  410f30:	930a      	str	r3, [sp, #40]	; 0x28
  410f32:	ab09      	add	r3, sp, #36	; 0x24
  410f34:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_snprintf(buf, sizeof(buf), "[%s]\t(%" LV_PRId32 ".%03" LV_PRId32 ", +%" LV_PRId32 ")\t %s: %pV \t(in %s line #%d)\n",
  410f36:	4b17      	ldr	r3, [pc, #92]	; (410f94 <_lv_log_add+0xb8>)
  410f38:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  410f3c:	f8cd 9018 	str.w	r9, [sp, #24]
  410f40:	443c      	add	r4, r7
  410f42:	9405      	str	r4, [sp, #20]
  410f44:	9204      	str	r2, [sp, #16]
  410f46:	f8cd 800c 	str.w	r8, [sp, #12]
  410f4a:	4a13      	ldr	r2, [pc, #76]	; (410f98 <_lv_log_add+0xbc>)
  410f4c:	6812      	ldr	r2, [r2, #0]
  410f4e:	1a82      	subs	r2, r0, r2
  410f50:	9202      	str	r2, [sp, #8]
  410f52:	4a12      	ldr	r2, [pc, #72]	; (410f9c <_lv_log_add+0xc0>)
  410f54:	fba2 1200 	umull	r1, r2, r2, r0
  410f58:	0992      	lsrs	r2, r2, #6
  410f5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  410f5e:	fb01 0112 	mls	r1, r1, r2, r0
  410f62:	9101      	str	r1, [sp, #4]
  410f64:	9200      	str	r2, [sp, #0]
  410f66:	4a0e      	ldr	r2, [pc, #56]	; (410fa0 <_lv_log_add+0xc4>)
  410f68:	f44f 7100 	mov.w	r1, #512	; 0x200
  410f6c:	a80c      	add	r0, sp, #48	; 0x30
  410f6e:	4c0d      	ldr	r4, [pc, #52]	; (410fa4 <_lv_log_add+0xc8>)
  410f70:	47a0      	blx	r4
                        lvl_prefix[level], t / 1000, t % 1000, t - last_log_time, func, (void *)&vaf, &file[p], line);
#endif
            custom_print_cb(buf);
  410f72:	4b07      	ldr	r3, [pc, #28]	; (410f90 <_lv_log_add+0xb4>)
  410f74:	681b      	ldr	r3, [r3, #0]
  410f76:	a80c      	add	r0, sp, #48	; 0x30
  410f78:	4798      	blx	r3
        }
#endif

        last_log_time = t;
  410f7a:	4b07      	ldr	r3, [pc, #28]	; (410f98 <_lv_log_add+0xbc>)
  410f7c:	601d      	str	r5, [r3, #0]
        va_end(args);
    }
}
  410f7e:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
  410f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  410f86:	bf00      	nop
  410f88:	00419b01 	.word	0x00419b01
  410f8c:	00410239 	.word	0x00410239
  410f90:	20400b4c 	.word	0x20400b4c
  410f94:	0042050c 	.word	0x0042050c
  410f98:	20400b50 	.word	0x20400b50
  410f9c:	10624dd3 	.word	0x10624dd3
  410fa0:	004204d8 	.word	0x004204d8
  410fa4:	00412185 	.word	0x00412185

00410fa8 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
  410fa8:	4b1c      	ldr	r3, [pc, #112]	; (41101c <lv_trigo_sin+0x74>)
  410faa:	fb83 2300 	smull	r2, r3, r3, r0
  410fae:	181a      	adds	r2, r3, r0
  410fb0:	17c3      	asrs	r3, r0, #31
  410fb2:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  410fb6:	f44f 72b4 	mov.w	r2, #360	; 0x168
  410fba:	fb02 0013 	mls	r0, r2, r3, r0
  410fbe:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
  410fc0:	2800      	cmp	r0, #0
  410fc2:	db15      	blt.n	410ff0 <lv_trigo_sin+0x48>

    if(angle < 90) {
  410fc4:	2859      	cmp	r0, #89	; 0x59
  410fc6:	dd16      	ble.n	410ff6 <lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
  410fc8:	b280      	uxth	r0, r0
  410fca:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  410fce:	b29b      	uxth	r3, r3
  410fd0:	2b59      	cmp	r3, #89	; 0x59
  410fd2:	d914      	bls.n	410ffe <lv_trigo_sin+0x56>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
  410fd4:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  410fd8:	b29b      	uxth	r3, r3
  410fda:	2b59      	cmp	r3, #89	; 0x59
  410fdc:	d916      	bls.n	41100c <lv_trigo_sin+0x64>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
  410fde:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
  410fe2:	b200      	sxth	r0, r0
  410fe4:	4b0e      	ldr	r3, [pc, #56]	; (411020 <lv_trigo_sin+0x78>)
  410fe6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  410fea:	4240      	negs	r0, r0
  410fec:	b200      	sxth	r0, r0
    }

    return ret;
}
  410fee:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
  410ff0:	4410      	add	r0, r2
  410ff2:	b200      	sxth	r0, r0
  410ff4:	e7e6      	b.n	410fc4 <lv_trigo_sin+0x1c>
        ret = sin0_90_table[angle];
  410ff6:	4b0a      	ldr	r3, [pc, #40]	; (411020 <lv_trigo_sin+0x78>)
  410ff8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  410ffc:	4770      	bx	lr
        angle = 180 - angle;
  410ffe:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
  411002:	b200      	sxth	r0, r0
  411004:	4b06      	ldr	r3, [pc, #24]	; (411020 <lv_trigo_sin+0x78>)
  411006:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  41100a:	4770      	bx	lr
        ret   = -sin0_90_table[angle];
  41100c:	b21b      	sxth	r3, r3
  41100e:	4a04      	ldr	r2, [pc, #16]	; (411020 <lv_trigo_sin+0x78>)
  411010:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  411014:	4240      	negs	r0, r0
  411016:	b200      	sxth	r0, r0
  411018:	4770      	bx	lr
  41101a:	bf00      	nop
  41101c:	b60b60b7 	.word	0xb60b60b7
  411020:	00420548 	.word	0x00420548

00411024 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
  411024:	b470      	push	{r4, r5, r6}
    uint32_t t_rem  = 1024 - t;
  411026:	f5c0 6680 	rsb	r6, r0, #1024	; 0x400
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
  41102a:	fb06 f406 	mul.w	r4, r6, r6
  41102e:	0aa4      	lsrs	r4, r4, #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
  411030:	fb00 f500 	mul.w	r5, r0, r0
  411034:	0aad      	lsrs	r5, r5, #10
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
  411036:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41103a:	fb00 f202 	mul.w	r2, r0, r2
  41103e:	fb04 f202 	mul.w	r2, r4, r2
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
  411042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  411046:	fb06 f303 	mul.w	r3, r6, r3
  41104a:	fb05 f303 	mul.w	r3, r5, r3
  41104e:	0d1b      	lsrs	r3, r3, #20
    uint32_t v4 = (t3 * u3) >> 10;

    return v1 + v2 + v3 + v4;
  411050:	eb03 5312 	add.w	r3, r3, r2, lsr #20
    uint32_t t3     = (t2 * t) >> 10;
  411054:	fb05 f500 	mul.w	r5, r5, r0
  411058:	0aad      	lsrs	r5, r5, #10
    uint32_t v4 = (t3 * u3) >> 10;
  41105a:	9803      	ldr	r0, [sp, #12]
  41105c:	fb00 f505 	mul.w	r5, r0, r5
    return v1 + v2 + v3 + v4;
  411060:	eb03 2395 	add.w	r3, r3, r5, lsr #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
  411064:	fb04 f006 	mul.w	r0, r4, r6
  411068:	0a80      	lsrs	r0, r0, #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
  41106a:	fb01 f000 	mul.w	r0, r1, r0
}
  41106e:	eb03 2090 	add.w	r0, r3, r0, lsr #10
  411072:	bc70      	pop	{r4, r5, r6}
  411074:	4770      	bx	lr

00411076 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
  411076:	b430      	push	{r4, r5}
    if(x >= max_in) return max_out;
  411078:	4290      	cmp	r0, r2
  41107a:	da0b      	bge.n	411094 <lv_map+0x1e>
    if(x <= min_in) return min_out;
  41107c:	4288      	cmp	r0, r1
  41107e:	dd0c      	ble.n	41109a <lv_map+0x24>
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;
  411080:	9c02      	ldr	r4, [sp, #8]
  411082:	1ae5      	subs	r5, r4, r3

    return ((x - min_in) * delta_out) / delta_in + min_out;
  411084:	1a44      	subs	r4, r0, r1
  411086:	fb04 f405 	mul.w	r4, r4, r5
    int32_t delta_in = max_in - min_in;
  41108a:	1a52      	subs	r2, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
  41108c:	fb94 f2f2 	sdiv	r2, r4, r2
  411090:	18d0      	adds	r0, r2, r3
  411092:	e000      	b.n	411096 <lv_map+0x20>
    if(x >= max_in) return max_out;
  411094:	9802      	ldr	r0, [sp, #8]
}
  411096:	bc30      	pop	{r4, r5}
  411098:	4770      	bx	lr
    if(x <= min_in) return min_out;
  41109a:	4618      	mov	r0, r3
  41109c:	e7fb      	b.n	411096 <lv_map+0x20>

0041109e <lv_mem_walker>:
static void lv_mem_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(ptr);

    lv_mem_monitor_t * mon_p = user;
    if(used) {
  41109e:	b952      	cbnz	r2, 4110b6 <lv_mem_walker+0x18>
        mon_p->used_cnt++;
    }
    else {
        mon_p->free_cnt++;
  4110a0:	685a      	ldr	r2, [r3, #4]
  4110a2:	3201      	adds	r2, #1
  4110a4:	605a      	str	r2, [r3, #4]
        mon_p->free_size += size;
  4110a6:	689a      	ldr	r2, [r3, #8]
  4110a8:	440a      	add	r2, r1
  4110aa:	609a      	str	r2, [r3, #8]
        if(size > mon_p->free_biggest_size)
  4110ac:	68da      	ldr	r2, [r3, #12]
  4110ae:	4291      	cmp	r1, r2
            mon_p->free_biggest_size = size;
  4110b0:	bf88      	it	hi
  4110b2:	60d9      	strhi	r1, [r3, #12]
  4110b4:	4770      	bx	lr
        mon_p->used_cnt++;
  4110b6:	691a      	ldr	r2, [r3, #16]
  4110b8:	3201      	adds	r2, #1
  4110ba:	611a      	str	r2, [r3, #16]
  4110bc:	4770      	bx	lr
	...

004110c0 <lv_mem_init>:
{
  4110c0:	b508      	push	{r3, lr}
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
  4110c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4110c6:	4803      	ldr	r0, [pc, #12]	; (4110d4 <lv_mem_init+0x14>)
  4110c8:	4b03      	ldr	r3, [pc, #12]	; (4110d8 <lv_mem_init+0x18>)
  4110ca:	4798      	blx	r3
  4110cc:	4b03      	ldr	r3, [pc, #12]	; (4110dc <lv_mem_init+0x1c>)
  4110ce:	6018      	str	r0, [r3, #0]
  4110d0:	bd08      	pop	{r3, pc}
  4110d2:	bf00      	nop
  4110d4:	20400b58 	.word	0x20400b58
  4110d8:	004130dd 	.word	0x004130dd
  4110dc:	20400b54 	.word	0x20400b54

004110e0 <lv_mem_free>:
    if(data == NULL) return;
  4110e0:	b148      	cbz	r0, 4110f6 <lv_mem_free+0x16>
{
  4110e2:	b508      	push	{r3, lr}
  4110e4:	4601      	mov	r1, r0
    if(data == NULL) return;
  4110e6:	4b04      	ldr	r3, [pc, #16]	; (4110f8 <lv_mem_free+0x18>)
  4110e8:	4298      	cmp	r0, r3
  4110ea:	d003      	beq.n	4110f4 <lv_mem_free+0x14>
    lv_tlsf_free(tlsf, data);
  4110ec:	4b03      	ldr	r3, [pc, #12]	; (4110fc <lv_mem_free+0x1c>)
  4110ee:	6818      	ldr	r0, [r3, #0]
  4110f0:	4b03      	ldr	r3, [pc, #12]	; (411100 <lv_mem_free+0x20>)
  4110f2:	4798      	blx	r3
  4110f4:	bd08      	pop	{r3, pc}
  4110f6:	4770      	bx	lr
  4110f8:	2040000c 	.word	0x2040000c
  4110fc:	20400b54 	.word	0x20400b54
  411100:	00413139 	.word	0x00413139

00411104 <lv_mem_buf_release>:
{
  411104:	b510      	push	{r4, lr}
  411106:	b082      	sub	sp, #8
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
  411108:	4b10      	ldr	r3, [pc, #64]	; (41114c <lv_mem_buf_release+0x48>)
  41110a:	681b      	ldr	r3, [r3, #0]
  41110c:	4298      	cmp	r0, r3
  41110e:	d014      	beq.n	41113a <lv_mem_buf_release+0x36>
  411110:	2301      	movs	r3, #1
  411112:	490e      	ldr	r1, [pc, #56]	; (41114c <lv_mem_buf_release+0x48>)
  411114:	461c      	mov	r4, r3
  411116:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  41111a:	4282      	cmp	r2, r0
  41111c:	d00e      	beq.n	41113c <lv_mem_buf_release+0x38>
  41111e:	3301      	adds	r3, #1
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  411120:	2b10      	cmp	r3, #16
  411122:	d1f7      	bne.n	411114 <lv_mem_buf_release+0x10>
    LV_LOG_ERROR("p is not a known buffer");
  411124:	4b0a      	ldr	r3, [pc, #40]	; (411150 <lv_mem_buf_release+0x4c>)
  411126:	9300      	str	r3, [sp, #0]
  411128:	4b0a      	ldr	r3, [pc, #40]	; (411154 <lv_mem_buf_release+0x50>)
  41112a:	f44f 72a4 	mov.w	r2, #328	; 0x148
  41112e:	490a      	ldr	r1, [pc, #40]	; (411158 <lv_mem_buf_release+0x54>)
  411130:	2003      	movs	r0, #3
  411132:	4c0a      	ldr	r4, [pc, #40]	; (41115c <lv_mem_buf_release+0x58>)
  411134:	47a0      	blx	r4
}
  411136:	b002      	add	sp, #8
  411138:	bd10      	pop	{r4, pc}
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
  41113a:	2400      	movs	r4, #0
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
  41113c:	4b03      	ldr	r3, [pc, #12]	; (41114c <lv_mem_buf_release+0x48>)
  41113e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  411142:	79a3      	ldrb	r3, [r4, #6]
  411144:	f36f 0300 	bfc	r3, #0, #1
  411148:	71a3      	strb	r3, [r4, #6]
            return;
  41114a:	e7f4      	b.n	411136 <lv_mem_buf_release+0x32>
  41114c:	20439fe4 	.word	0x20439fe4
  411150:	00420768 	.word	0x00420768
  411154:	00420630 	.word	0x00420630
  411158:	0042079c 	.word	0x0042079c
  41115c:	00410edd 	.word	0x00410edd

00411160 <lv_memcpy>:
{
  411160:	b4f0      	push	{r4, r5, r6, r7}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  411162:	f000 0707 	and.w	r7, r0, #7
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  411166:	f001 0407 	and.w	r4, r1, #7
    if(s_align != d_align) {
  41116a:	42a7      	cmp	r7, r4
  41116c:	f000 80a6 	beq.w	4112bc <lv_memcpy+0x15c>
        while(len > 32) {
  411170:	2a20      	cmp	r2, #32
  411172:	f240 80a1 	bls.w	4112b8 <lv_memcpy+0x158>
  411176:	f100 0420 	add.w	r4, r0, #32
  41117a:	f101 0320 	add.w	r3, r1, #32
  41117e:	4615      	mov	r5, r2
            REPEAT8(COPY8);
  411180:	f813 6c20 	ldrb.w	r6, [r3, #-32]
  411184:	f804 6c20 	strb.w	r6, [r4, #-32]
  411188:	f813 6c1f 	ldrb.w	r6, [r3, #-31]
  41118c:	f804 6c1f 	strb.w	r6, [r4, #-31]
  411190:	f813 6c1e 	ldrb.w	r6, [r3, #-30]
  411194:	f804 6c1e 	strb.w	r6, [r4, #-30]
  411198:	f813 6c1d 	ldrb.w	r6, [r3, #-29]
  41119c:	f804 6c1d 	strb.w	r6, [r4, #-29]
  4111a0:	f813 6c1c 	ldrb.w	r6, [r3, #-28]
  4111a4:	f804 6c1c 	strb.w	r6, [r4, #-28]
  4111a8:	f813 6c1b 	ldrb.w	r6, [r3, #-27]
  4111ac:	f804 6c1b 	strb.w	r6, [r4, #-27]
  4111b0:	f813 6c1a 	ldrb.w	r6, [r3, #-26]
  4111b4:	f804 6c1a 	strb.w	r6, [r4, #-26]
  4111b8:	f813 6c19 	ldrb.w	r6, [r3, #-25]
  4111bc:	f804 6c19 	strb.w	r6, [r4, #-25]
            REPEAT8(COPY8);
  4111c0:	f813 6c18 	ldrb.w	r6, [r3, #-24]
  4111c4:	f804 6c18 	strb.w	r6, [r4, #-24]
  4111c8:	f813 6c17 	ldrb.w	r6, [r3, #-23]
  4111cc:	f804 6c17 	strb.w	r6, [r4, #-23]
  4111d0:	f813 6c16 	ldrb.w	r6, [r3, #-22]
  4111d4:	f804 6c16 	strb.w	r6, [r4, #-22]
  4111d8:	f813 6c15 	ldrb.w	r6, [r3, #-21]
  4111dc:	f804 6c15 	strb.w	r6, [r4, #-21]
  4111e0:	f813 6c14 	ldrb.w	r6, [r3, #-20]
  4111e4:	f804 6c14 	strb.w	r6, [r4, #-20]
  4111e8:	f813 6c13 	ldrb.w	r6, [r3, #-19]
  4111ec:	f804 6c13 	strb.w	r6, [r4, #-19]
  4111f0:	f813 6c12 	ldrb.w	r6, [r3, #-18]
  4111f4:	f804 6c12 	strb.w	r6, [r4, #-18]
  4111f8:	f813 6c11 	ldrb.w	r6, [r3, #-17]
  4111fc:	f804 6c11 	strb.w	r6, [r4, #-17]
            REPEAT8(COPY8);
  411200:	f813 6c10 	ldrb.w	r6, [r3, #-16]
  411204:	f804 6c10 	strb.w	r6, [r4, #-16]
  411208:	f813 6c0f 	ldrb.w	r6, [r3, #-15]
  41120c:	f804 6c0f 	strb.w	r6, [r4, #-15]
  411210:	f813 6c0e 	ldrb.w	r6, [r3, #-14]
  411214:	f804 6c0e 	strb.w	r6, [r4, #-14]
  411218:	f813 6c0d 	ldrb.w	r6, [r3, #-13]
  41121c:	f804 6c0d 	strb.w	r6, [r4, #-13]
  411220:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
  411224:	f804 6c0c 	strb.w	r6, [r4, #-12]
  411228:	f813 6c0b 	ldrb.w	r6, [r3, #-11]
  41122c:	f804 6c0b 	strb.w	r6, [r4, #-11]
  411230:	f813 6c0a 	ldrb.w	r6, [r3, #-10]
  411234:	f804 6c0a 	strb.w	r6, [r4, #-10]
  411238:	f813 6c09 	ldrb.w	r6, [r3, #-9]
  41123c:	f804 6c09 	strb.w	r6, [r4, #-9]
            REPEAT8(COPY8);
  411240:	f813 6c08 	ldrb.w	r6, [r3, #-8]
  411244:	f804 6c08 	strb.w	r6, [r4, #-8]
  411248:	f813 6c07 	ldrb.w	r6, [r3, #-7]
  41124c:	f804 6c07 	strb.w	r6, [r4, #-7]
  411250:	f813 6c06 	ldrb.w	r6, [r3, #-6]
  411254:	f804 6c06 	strb.w	r6, [r4, #-6]
  411258:	f813 6c05 	ldrb.w	r6, [r3, #-5]
  41125c:	f804 6c05 	strb.w	r6, [r4, #-5]
  411260:	f813 6c04 	ldrb.w	r6, [r3, #-4]
  411264:	f804 6c04 	strb.w	r6, [r4, #-4]
  411268:	f813 6c03 	ldrb.w	r6, [r3, #-3]
  41126c:	f804 6c03 	strb.w	r6, [r4, #-3]
  411270:	f813 6c02 	ldrb.w	r6, [r3, #-2]
  411274:	f804 6c02 	strb.w	r6, [r4, #-2]
  411278:	f813 6c01 	ldrb.w	r6, [r3, #-1]
  41127c:	f804 6c01 	strb.w	r6, [r4, #-1]
            len -= 32;
  411280:	3d20      	subs	r5, #32
  411282:	3420      	adds	r4, #32
  411284:	3320      	adds	r3, #32
        while(len > 32) {
  411286:	2d20      	cmp	r5, #32
  411288:	f63f af7a 	bhi.w	411180 <lv_memcpy+0x20>
  41128c:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
  411290:	f025 041f 	bic.w	r4, r5, #31
  411294:	3420      	adds	r4, #32
  411296:	1903      	adds	r3, r0, r4
  411298:	4421      	add	r1, r4
  41129a:	3a20      	subs	r2, #32
  41129c:	f025 051f 	bic.w	r5, r5, #31
  4112a0:	1b52      	subs	r2, r2, r5
        while(len) {
  4112a2:	b13a      	cbz	r2, 4112b4 <lv_memcpy+0x154>
  4112a4:	3901      	subs	r1, #1
  4112a6:	441a      	add	r2, r3
            COPY8
  4112a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4112ac:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
  4112b0:	4293      	cmp	r3, r2
  4112b2:	d1f9      	bne.n	4112a8 <lv_memcpy+0x148>
}
  4112b4:	bcf0      	pop	{r4, r5, r6, r7}
  4112b6:	4770      	bx	lr
        while(len > 32) {
  4112b8:	4603      	mov	r3, r0
  4112ba:	e7f2      	b.n	4112a2 <lv_memcpy+0x142>
    if(d_align) {
  4112bc:	b1a7      	cbz	r7, 4112e8 <lv_memcpy+0x188>
        while(d_align && len) {
  4112be:	f1c7 0708 	rsb	r7, r7, #8
  4112c2:	2a00      	cmp	r2, #0
  4112c4:	d069      	beq.n	41139a <lv_memcpy+0x23a>
  4112c6:	460c      	mov	r4, r1
  4112c8:	4603      	mov	r3, r0
  4112ca:	4616      	mov	r6, r2
            COPY8;
  4112cc:	f814 1b01 	ldrb.w	r1, [r4], #1
  4112d0:	f803 1b01 	strb.w	r1, [r3], #1
  4112d4:	4621      	mov	r1, r4
            len--;
  4112d6:	3e01      	subs	r6, #1
        while(d_align && len) {
  4112d8:	1ab5      	subs	r5, r6, r2
  4112da:	42fd      	cmn	r5, r7
  4112dc:	d001      	beq.n	4112e2 <lv_memcpy+0x182>
  4112de:	2e00      	cmp	r6, #0
  4112e0:	d1f4      	bne.n	4112cc <lv_memcpy+0x16c>
            COPY8;
  4112e2:	461d      	mov	r5, r3
            len--;
  4112e4:	4632      	mov	r2, r6
  4112e6:	e000      	b.n	4112ea <lv_memcpy+0x18a>
    uint8_t * d8 = dst;
  4112e8:	4605      	mov	r5, r0
    while(len > 32) {
  4112ea:	2a20      	cmp	r2, #32
  4112ec:	d934      	bls.n	411358 <lv_memcpy+0x1f8>
  4112ee:	f105 0420 	add.w	r4, r5, #32
  4112f2:	f101 0320 	add.w	r3, r1, #32
  4112f6:	4616      	mov	r6, r2
        REPEAT8(COPY32)
  4112f8:	f853 7c20 	ldr.w	r7, [r3, #-32]
  4112fc:	f844 7c20 	str.w	r7, [r4, #-32]
  411300:	f853 7c1c 	ldr.w	r7, [r3, #-28]
  411304:	f844 7c1c 	str.w	r7, [r4, #-28]
  411308:	f853 7c18 	ldr.w	r7, [r3, #-24]
  41130c:	f844 7c18 	str.w	r7, [r4, #-24]
  411310:	f853 7c14 	ldr.w	r7, [r3, #-20]
  411314:	f844 7c14 	str.w	r7, [r4, #-20]
  411318:	f853 7c10 	ldr.w	r7, [r3, #-16]
  41131c:	f844 7c10 	str.w	r7, [r4, #-16]
  411320:	f853 7c0c 	ldr.w	r7, [r3, #-12]
  411324:	f844 7c0c 	str.w	r7, [r4, #-12]
  411328:	f853 7c08 	ldr.w	r7, [r3, #-8]
  41132c:	f844 7c08 	str.w	r7, [r4, #-8]
  411330:	f853 7c04 	ldr.w	r7, [r3, #-4]
  411334:	f844 7c04 	str.w	r7, [r4, #-4]
        len -= 32;
  411338:	3e20      	subs	r6, #32
  41133a:	3420      	adds	r4, #32
  41133c:	3320      	adds	r3, #32
    while(len > 32) {
  41133e:	2e20      	cmp	r6, #32
  411340:	d8da      	bhi.n	4112f8 <lv_memcpy+0x198>
  411342:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
  411346:	f023 041f 	bic.w	r4, r3, #31
  41134a:	3420      	adds	r4, #32
  41134c:	4425      	add	r5, r4
  41134e:	4421      	add	r1, r4
  411350:	3a20      	subs	r2, #32
  411352:	f023 031f 	bic.w	r3, r3, #31
  411356:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
  411358:	2a04      	cmp	r2, #4
  41135a:	d920      	bls.n	41139e <lv_memcpy+0x23e>
  41135c:	1f0e      	subs	r6, r1, #4
  41135e:	462c      	mov	r4, r5
  411360:	4613      	mov	r3, r2
        COPY32;
  411362:	f856 7f04 	ldr.w	r7, [r6, #4]!
  411366:	f844 7b04 	str.w	r7, [r4], #4
        len -= 4;
  41136a:	3b04      	subs	r3, #4
    while(len > 4) {
  41136c:	2b04      	cmp	r3, #4
  41136e:	d8f8      	bhi.n	411362 <lv_memcpy+0x202>
  411370:	1f54      	subs	r4, r2, #5
  411372:	f024 0303 	bic.w	r3, r4, #3
  411376:	3304      	adds	r3, #4
  411378:	3a04      	subs	r2, #4
  41137a:	f024 0403 	bic.w	r4, r4, #3
  41137e:	1b12      	subs	r2, r2, r4
        COPY32;
  411380:	4419      	add	r1, r3
  411382:	442b      	add	r3, r5
    while(len) {
  411384:	2a00      	cmp	r2, #0
  411386:	d095      	beq.n	4112b4 <lv_memcpy+0x154>
  411388:	3901      	subs	r1, #1
  41138a:	441a      	add	r2, r3
        COPY8
  41138c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  411390:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
  411394:	4293      	cmp	r3, r2
  411396:	d1f9      	bne.n	41138c <lv_memcpy+0x22c>
  411398:	e78c      	b.n	4112b4 <lv_memcpy+0x154>
    uint8_t * d8 = dst;
  41139a:	4605      	mov	r5, r0
  41139c:	e7a5      	b.n	4112ea <lv_memcpy+0x18a>
    while(len > 4) {
  41139e:	462b      	mov	r3, r5
  4113a0:	e7f0      	b.n	411384 <lv_memcpy+0x224>

004113a2 <lv_memset>:
{
  4113a2:	b430      	push	{r4, r5}
    if(d_align) {
  4113a4:	f010 0507 	ands.w	r5, r0, #7
  4113a8:	d00c      	beq.n	4113c4 <lv_memset+0x22>
        while(d_align && len) {
  4113aa:	f1c5 0508 	rsb	r5, r5, #8
  4113ae:	b14a      	cbz	r2, 4113c4 <lv_memset+0x22>
  4113b0:	4613      	mov	r3, r2
            SET8(v);
  4113b2:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  4113b6:	3b01      	subs	r3, #1
        while(d_align && len) {
  4113b8:	1a9c      	subs	r4, r3, r2
  4113ba:	42ec      	cmn	r4, r5
  4113bc:	d001      	beq.n	4113c2 <lv_memset+0x20>
  4113be:	2b00      	cmp	r3, #0
  4113c0:	d1f7      	bne.n	4113b2 <lv_memset+0x10>
            len--;
  4113c2:	461a      	mov	r2, r3
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
  4113c4:	040c      	lsls	r4, r1, #16
  4113c6:	eb04 2401 	add.w	r4, r4, r1, lsl #8
  4113ca:	440c      	add	r4, r1
  4113cc:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
  4113d0:	2a20      	cmp	r2, #32
  4113d2:	d920      	bls.n	411416 <lv_memset+0x74>
  4113d4:	f100 0320 	add.w	r3, r0, #32
  4113d8:	4615      	mov	r5, r2
        REPEAT8(SET32(v32));
  4113da:	f843 4c20 	str.w	r4, [r3, #-32]
  4113de:	f843 4c1c 	str.w	r4, [r3, #-28]
  4113e2:	f843 4c18 	str.w	r4, [r3, #-24]
  4113e6:	f843 4c14 	str.w	r4, [r3, #-20]
  4113ea:	f843 4c10 	str.w	r4, [r3, #-16]
  4113ee:	f843 4c0c 	str.w	r4, [r3, #-12]
  4113f2:	f843 4c08 	str.w	r4, [r3, #-8]
  4113f6:	f843 4c04 	str.w	r4, [r3, #-4]
        len -= 32;
  4113fa:	3d20      	subs	r5, #32
  4113fc:	3320      	adds	r3, #32
    while(len > 32) {
  4113fe:	2d20      	cmp	r5, #32
  411400:	d8eb      	bhi.n	4113da <lv_memset+0x38>
  411402:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
  411406:	f025 031f 	bic.w	r3, r5, #31
  41140a:	3320      	adds	r3, #32
  41140c:	4418      	add	r0, r3
  41140e:	3a20      	subs	r2, #32
  411410:	f025 051f 	bic.w	r5, r5, #31
  411414:	1b52      	subs	r2, r2, r5
    while(len > 4) {
  411416:	2a04      	cmp	r2, #4
  411418:	d917      	bls.n	41144a <lv_memset+0xa8>
  41141a:	4605      	mov	r5, r0
  41141c:	4613      	mov	r3, r2
        SET32(v32);
  41141e:	f845 4b04 	str.w	r4, [r5], #4
        len -= 4;
  411422:	3b04      	subs	r3, #4
    while(len > 4) {
  411424:	2b04      	cmp	r3, #4
  411426:	d8fa      	bhi.n	41141e <lv_memset+0x7c>
  411428:	1f54      	subs	r4, r2, #5
  41142a:	f024 0303 	bic.w	r3, r4, #3
  41142e:	3304      	adds	r3, #4
  411430:	3a04      	subs	r2, #4
  411432:	f024 0403 	bic.w	r4, r4, #3
  411436:	1b12      	subs	r2, r2, r4
        SET32(v32);
  411438:	4403      	add	r3, r0
    while(len) {
  41143a:	b122      	cbz	r2, 411446 <lv_memset+0xa4>
  41143c:	441a      	add	r2, r3
        SET8(v);
  41143e:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
  411442:	429a      	cmp	r2, r3
  411444:	d1fb      	bne.n	41143e <lv_memset+0x9c>
}
  411446:	bc30      	pop	{r4, r5}
  411448:	4770      	bx	lr
    while(len > 4) {
  41144a:	4603      	mov	r3, r0
  41144c:	e7f5      	b.n	41143a <lv_memset+0x98>
	...

00411450 <lv_mem_monitor>:
{
  411450:	b510      	push	{r4, lr}
  411452:	4604      	mov	r4, r0
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
  411454:	221c      	movs	r2, #28
  411456:	2100      	movs	r1, #0
  411458:	4b11      	ldr	r3, [pc, #68]	; (4114a0 <lv_mem_monitor+0x50>)
  41145a:	4798      	blx	r3
    lv_tlsf_walk_pool(lv_tlsf_get_pool(tlsf), lv_mem_walker, mon_p);
  41145c:	4b11      	ldr	r3, [pc, #68]	; (4114a4 <lv_mem_monitor+0x54>)
  41145e:	6818      	ldr	r0, [r3, #0]
  411460:	4b11      	ldr	r3, [pc, #68]	; (4114a8 <lv_mem_monitor+0x58>)
  411462:	4798      	blx	r3
  411464:	4622      	mov	r2, r4
  411466:	4911      	ldr	r1, [pc, #68]	; (4114ac <lv_mem_monitor+0x5c>)
  411468:	4b11      	ldr	r3, [pc, #68]	; (4114b0 <lv_mem_monitor+0x60>)
  41146a:	4798      	blx	r3
    mon_p->total_size = LV_MEM_SIZE;
  41146c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  411470:	6023      	str	r3, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
  411472:	68a2      	ldr	r2, [r4, #8]
  411474:	2364      	movs	r3, #100	; 0x64
  411476:	fb03 f302 	mul.w	r3, r3, r2
  41147a:	0bdb      	lsrs	r3, r3, #15
  41147c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  411480:	7623      	strb	r3, [r4, #24]
    if(mon_p->free_size > 0) {
  411482:	b912      	cbnz	r2, 41148a <lv_mem_monitor+0x3a>
        mon_p->frag_pct = 0; /*no fragmentation if all the RAM is used*/
  411484:	2300      	movs	r3, #0
  411486:	7663      	strb	r3, [r4, #25]
  411488:	bd10      	pop	{r4, pc}
        mon_p->frag_pct = mon_p->free_biggest_size * 100U / mon_p->free_size;
  41148a:	68e1      	ldr	r1, [r4, #12]
  41148c:	2364      	movs	r3, #100	; 0x64
  41148e:	fb03 f301 	mul.w	r3, r3, r1
  411492:	fbb3 f2f2 	udiv	r2, r3, r2
        mon_p->frag_pct = 100 - mon_p->frag_pct;
  411496:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
  41149a:	7662      	strb	r2, [r4, #25]
  41149c:	bd10      	pop	{r4, pc}
  41149e:	bf00      	nop
  4114a0:	004113a3 	.word	0x004113a3
  4114a4:	20400b54 	.word	0x20400b54
  4114a8:	00413101 	.word	0x00413101
  4114ac:	0041109f 	.word	0x0041109f
  4114b0:	00412f99 	.word	0x00412f99

004114b4 <lv_mem_alloc>:
{
  4114b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4114b6:	b08f      	sub	sp, #60	; 0x3c
    if(size == 0) {
  4114b8:	b918      	cbnz	r0, 4114c2 <lv_mem_alloc+0xe>
        return &zero_mem;
  4114ba:	4d17      	ldr	r5, [pc, #92]	; (411518 <lv_mem_alloc+0x64>)
}
  4114bc:	4628      	mov	r0, r5
  4114be:	b00f      	add	sp, #60	; 0x3c
  4114c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4114c2:	4604      	mov	r4, r0
    void * alloc = lv_tlsf_malloc(tlsf, size);
  4114c4:	4601      	mov	r1, r0
  4114c6:	4b15      	ldr	r3, [pc, #84]	; (41151c <lv_mem_alloc+0x68>)
  4114c8:	6818      	ldr	r0, [r3, #0]
  4114ca:	4b15      	ldr	r3, [pc, #84]	; (411520 <lv_mem_alloc+0x6c>)
  4114cc:	4798      	blx	r3
    if(alloc == NULL) {
  4114ce:	4605      	mov	r5, r0
  4114d0:	2800      	cmp	r0, #0
  4114d2:	d1f3      	bne.n	4114bc <lv_mem_alloc+0x8>
        LV_LOG_ERROR("couldn't allocate memory (%lu bytes)", (unsigned long)size);
  4114d4:	4f13      	ldr	r7, [pc, #76]	; (411524 <lv_mem_alloc+0x70>)
  4114d6:	4e14      	ldr	r6, [pc, #80]	; (411528 <lv_mem_alloc+0x74>)
  4114d8:	9401      	str	r4, [sp, #4]
  4114da:	4b14      	ldr	r3, [pc, #80]	; (41152c <lv_mem_alloc+0x78>)
  4114dc:	9300      	str	r3, [sp, #0]
  4114de:	463b      	mov	r3, r7
  4114e0:	228e      	movs	r2, #142	; 0x8e
  4114e2:	4631      	mov	r1, r6
  4114e4:	2003      	movs	r0, #3
  4114e6:	4c12      	ldr	r4, [pc, #72]	; (411530 <lv_mem_alloc+0x7c>)
  4114e8:	47a0      	blx	r4
        lv_mem_monitor(&mon);
  4114ea:	a807      	add	r0, sp, #28
  4114ec:	4b11      	ldr	r3, [pc, #68]	; (411534 <lv_mem_alloc+0x80>)
  4114ee:	4798      	blx	r3
        LV_LOG_ERROR("used: %6d (%3d %%), frag: %3d %%, biggest free: %6d",
  4114f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4114f2:	9304      	str	r3, [sp, #16]
  4114f4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  4114f8:	9303      	str	r3, [sp, #12]
  4114fa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  4114fe:	9302      	str	r3, [sp, #8]
  411500:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411502:	9b07      	ldr	r3, [sp, #28]
  411504:	1a9b      	subs	r3, r3, r2
  411506:	9301      	str	r3, [sp, #4]
  411508:	4b0b      	ldr	r3, [pc, #44]	; (411538 <lv_mem_alloc+0x84>)
  41150a:	9300      	str	r3, [sp, #0]
  41150c:	463b      	mov	r3, r7
  41150e:	2293      	movs	r2, #147	; 0x93
  411510:	4631      	mov	r1, r6
  411512:	2003      	movs	r0, #3
  411514:	47a0      	blx	r4
  411516:	e7d1      	b.n	4114bc <lv_mem_alloc+0x8>
  411518:	2040000c 	.word	0x2040000c
  41151c:	20400b54 	.word	0x20400b54
  411520:	00413109 	.word	0x00413109
  411524:	00420600 	.word	0x00420600
  411528:	0042079c 	.word	0x0042079c
  41152c:	00420644 	.word	0x00420644
  411530:	00410edd 	.word	0x00410edd
  411534:	00411451 	.word	0x00411451
  411538:	0042066c 	.word	0x0042066c

0041153c <lv_mem_realloc>:
{
  41153c:	b530      	push	{r4, r5, lr}
  41153e:	b083      	sub	sp, #12
    if(new_size == 0) {
  411540:	b169      	cbz	r1, 41155e <lv_mem_realloc+0x22>
  411542:	460a      	mov	r2, r1
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
  411544:	4b0f      	ldr	r3, [pc, #60]	; (411584 <lv_mem_realloc+0x48>)
  411546:	4298      	cmp	r0, r3
  411548:	d00d      	beq.n	411566 <lv_mem_realloc+0x2a>
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
  41154a:	4601      	mov	r1, r0
  41154c:	4b0e      	ldr	r3, [pc, #56]	; (411588 <lv_mem_realloc+0x4c>)
  41154e:	6818      	ldr	r0, [r3, #0]
  411550:	4b0e      	ldr	r3, [pc, #56]	; (41158c <lv_mem_realloc+0x50>)
  411552:	4798      	blx	r3
    if(new_p == NULL) {
  411554:	4604      	mov	r4, r0
  411556:	b158      	cbz	r0, 411570 <lv_mem_realloc+0x34>
}
  411558:	4620      	mov	r0, r4
  41155a:	b003      	add	sp, #12
  41155c:	bd30      	pop	{r4, r5, pc}
        lv_mem_free(data_p);
  41155e:	4b0c      	ldr	r3, [pc, #48]	; (411590 <lv_mem_realloc+0x54>)
  411560:	4798      	blx	r3
        return &zero_mem;
  411562:	4c08      	ldr	r4, [pc, #32]	; (411584 <lv_mem_realloc+0x48>)
  411564:	e7f8      	b.n	411558 <lv_mem_realloc+0x1c>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
  411566:	4608      	mov	r0, r1
  411568:	4b0a      	ldr	r3, [pc, #40]	; (411594 <lv_mem_realloc+0x58>)
  41156a:	4798      	blx	r3
  41156c:	4604      	mov	r4, r0
  41156e:	e7f3      	b.n	411558 <lv_mem_realloc+0x1c>
        LV_LOG_ERROR("couldn't allocate memory");
  411570:	4b09      	ldr	r3, [pc, #36]	; (411598 <lv_mem_realloc+0x5c>)
  411572:	9300      	str	r3, [sp, #0]
  411574:	4b09      	ldr	r3, [pc, #36]	; (41159c <lv_mem_realloc+0x60>)
  411576:	22c6      	movs	r2, #198	; 0xc6
  411578:	4909      	ldr	r1, [pc, #36]	; (4115a0 <lv_mem_realloc+0x64>)
  41157a:	2003      	movs	r0, #3
  41157c:	4d09      	ldr	r5, [pc, #36]	; (4115a4 <lv_mem_realloc+0x68>)
  41157e:	47a8      	blx	r5
        return NULL;
  411580:	e7ea      	b.n	411558 <lv_mem_realloc+0x1c>
  411582:	bf00      	nop
  411584:	2040000c 	.word	0x2040000c
  411588:	20400b54 	.word	0x20400b54
  41158c:	00413229 	.word	0x00413229
  411590:	004110e1 	.word	0x004110e1
  411594:	004114b5 	.word	0x004114b5
  411598:	00420780 	.word	0x00420780
  41159c:	00420610 	.word	0x00420610
  4115a0:	0042079c 	.word	0x0042079c
  4115a4:	00410edd 	.word	0x00410edd

004115a8 <lv_mem_buf_get>:
    if(size == 0) return NULL;
  4115a8:	2800      	cmp	r0, #0
  4115aa:	f000 8085 	beq.w	4116b8 <lv_mem_buf_get+0x110>
{
  4115ae:	b570      	push	{r4, r5, r6, lr}
  4115b0:	b084      	sub	sp, #16
  4115b2:	4606      	mov	r6, r0
  4115b4:	4a42      	ldr	r2, [pc, #264]	; (4116c0 <lv_mem_buf_get+0x118>)
    if(size == 0) return NULL;
  4115b6:	2300      	movs	r3, #0
  4115b8:	f04f 35ff 	mov.w	r5, #4294967295
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
  4115bc:	4614      	mov	r4, r2
  4115be:	e00e      	b.n	4115de <lv_mem_buf_get+0x36>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
  4115c0:	4a3f      	ldr	r2, [pc, #252]	; (4116c0 <lv_mem_buf_get+0x118>)
  4115c2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4115c6:	798b      	ldrb	r3, [r1, #6]
  4115c8:	f043 0301 	orr.w	r3, r3, #1
  4115cc:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
  4115ce:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  4115d2:	e023      	b.n	41161c <lv_mem_buf_get+0x74>
                i_guess = i;
  4115d4:	b25d      	sxtb	r5, r3
  4115d6:	3301      	adds	r3, #1
  4115d8:	3208      	adds	r2, #8
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4115da:	2b10      	cmp	r3, #16
  4115dc:	d013      	beq.n	411606 <lv_mem_buf_get+0x5e>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
  4115de:	4618      	mov	r0, r3
  4115e0:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
  4115e4:	7989      	ldrb	r1, [r1, #6]
  4115e6:	f011 0f01 	tst.w	r1, #1
  4115ea:	d1f4      	bne.n	4115d6 <lv_mem_buf_get+0x2e>
  4115ec:	8891      	ldrh	r1, [r2, #4]
  4115ee:	428e      	cmp	r6, r1
  4115f0:	d8f1      	bhi.n	4115d6 <lv_mem_buf_get+0x2e>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
  4115f2:	d0e5      	beq.n	4115c0 <lv_mem_buf_get+0x18>
            else if(i_guess < 0) {
  4115f4:	2d00      	cmp	r5, #0
  4115f6:	dbed      	blt.n	4115d4 <lv_mem_buf_get+0x2c>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
  4115f8:	eb04 00c5 	add.w	r0, r4, r5, lsl #3
  4115fc:	8880      	ldrh	r0, [r0, #4]
  4115fe:	4288      	cmp	r0, r1
                i_guess = i;
  411600:	bf88      	it	hi
  411602:	b25d      	sxtbhi	r5, r3
  411604:	e7e7      	b.n	4115d6 <lv_mem_buf_get+0x2e>
    if(i_guess >= 0) {
  411606:	2d00      	cmp	r5, #0
  411608:	db0b      	blt.n	411622 <lv_mem_buf_get+0x7a>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
  41160a:	4a2d      	ldr	r2, [pc, #180]	; (4116c0 <lv_mem_buf_get+0x118>)
  41160c:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
  411610:	798b      	ldrb	r3, [r1, #6]
  411612:	f043 0301 	orr.w	r3, r3, #1
  411616:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
  411618:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
}
  41161c:	4618      	mov	r0, r3
  41161e:	b004      	add	sp, #16
  411620:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
  411622:	4b27      	ldr	r3, [pc, #156]	; (4116c0 <lv_mem_buf_get+0x118>)
  411624:	799b      	ldrb	r3, [r3, #6]
  411626:	f013 0f01 	tst.w	r3, #1
  41162a:	d023      	beq.n	411674 <lv_mem_buf_get+0xcc>
  41162c:	2301      	movs	r3, #1
  41162e:	4a24      	ldr	r2, [pc, #144]	; (4116c0 <lv_mem_buf_get+0x118>)
  411630:	461c      	mov	r4, r3
  411632:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  411636:	7989      	ldrb	r1, [r1, #6]
  411638:	f011 0f01 	tst.w	r1, #1
  41163c:	d01b      	beq.n	411676 <lv_mem_buf_get+0xce>
  41163e:	3301      	adds	r3, #1
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  411640:	2b10      	cmp	r3, #16
  411642:	d1f5      	bne.n	411630 <lv_mem_buf_get+0x88>
    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
  411644:	4e1f      	ldr	r6, [pc, #124]	; (4116c4 <lv_mem_buf_get+0x11c>)
  411646:	4d20      	ldr	r5, [pc, #128]	; (4116c8 <lv_mem_buf_get+0x120>)
  411648:	4b20      	ldr	r3, [pc, #128]	; (4116cc <lv_mem_buf_get+0x124>)
  41164a:	9300      	str	r3, [sp, #0]
  41164c:	4633      	mov	r3, r6
  41164e:	f44f 729a 	mov.w	r2, #308	; 0x134
  411652:	4629      	mov	r1, r5
  411654:	2003      	movs	r0, #3
  411656:	4c1e      	ldr	r4, [pc, #120]	; (4116d0 <lv_mem_buf_get+0x128>)
  411658:	47a0      	blx	r4
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
  41165a:	4b1e      	ldr	r3, [pc, #120]	; (4116d4 <lv_mem_buf_get+0x12c>)
  41165c:	9302      	str	r3, [sp, #8]
  41165e:	4b1e      	ldr	r3, [pc, #120]	; (4116d8 <lv_mem_buf_get+0x130>)
  411660:	9301      	str	r3, [sp, #4]
  411662:	4b1e      	ldr	r3, [pc, #120]	; (4116dc <lv_mem_buf_get+0x134>)
  411664:	9300      	str	r3, [sp, #0]
  411666:	4633      	mov	r3, r6
  411668:	f240 1235 	movw	r2, #309	; 0x135
  41166c:	4629      	mov	r1, r5
  41166e:	2003      	movs	r0, #3
  411670:	47a0      	blx	r4
  411672:	e7fe      	b.n	411672 <lv_mem_buf_get+0xca>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
  411674:	2400      	movs	r4, #0
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
  411676:	4631      	mov	r1, r6
  411678:	4b11      	ldr	r3, [pc, #68]	; (4116c0 <lv_mem_buf_get+0x118>)
  41167a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  41167e:	4b18      	ldr	r3, [pc, #96]	; (4116e0 <lv_mem_buf_get+0x138>)
  411680:	4798      	blx	r3
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
  411682:	4603      	mov	r3, r0
  411684:	b150      	cbz	r0, 41169c <lv_mem_buf_get+0xf4>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
  411686:	480e      	ldr	r0, [pc, #56]	; (4116c0 <lv_mem_buf_get+0x118>)
  411688:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
  41168c:	7991      	ldrb	r1, [r2, #6]
  41168e:	f041 0101 	orr.w	r1, r1, #1
  411692:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
  411694:	8096      	strh	r6, [r2, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
  411696:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
  41169a:	e7bf      	b.n	41161c <lv_mem_buf_get+0x74>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
  41169c:	4b11      	ldr	r3, [pc, #68]	; (4116e4 <lv_mem_buf_get+0x13c>)
  41169e:	9302      	str	r3, [sp, #8]
  4116a0:	4b11      	ldr	r3, [pc, #68]	; (4116e8 <lv_mem_buf_get+0x140>)
  4116a2:	9301      	str	r3, [sp, #4]
  4116a4:	4b0d      	ldr	r3, [pc, #52]	; (4116dc <lv_mem_buf_get+0x134>)
  4116a6:	9300      	str	r3, [sp, #0]
  4116a8:	4b06      	ldr	r3, [pc, #24]	; (4116c4 <lv_mem_buf_get+0x11c>)
  4116aa:	f240 1229 	movw	r2, #297	; 0x129
  4116ae:	4906      	ldr	r1, [pc, #24]	; (4116c8 <lv_mem_buf_get+0x120>)
  4116b0:	2003      	movs	r0, #3
  4116b2:	4c07      	ldr	r4, [pc, #28]	; (4116d0 <lv_mem_buf_get+0x128>)
  4116b4:	47a0      	blx	r4
  4116b6:	e7fe      	b.n	4116b6 <lv_mem_buf_get+0x10e>
    if(size == 0) return NULL;
  4116b8:	2300      	movs	r3, #0
}
  4116ba:	4618      	mov	r0, r3
  4116bc:	4770      	bx	lr
  4116be:	bf00      	nop
  4116c0:	20439fe4 	.word	0x20439fe4
  4116c4:	00420620 	.word	0x00420620
  4116c8:	0042079c 	.word	0x0042079c
  4116cc:	00420700 	.word	0x00420700
  4116d0:	00410edd 	.word	0x00410edd
  4116d4:	00420730 	.word	0x00420730
  4116d8:	00420760 	.word	0x00420760
  4116dc:	0041c098 	.word	0x0041c098
  4116e0:	0041153d 	.word	0x0041153d
  4116e4:	004206a0 	.word	0x004206a0
  4116e8:	004206f4 	.word	0x004206f4

004116ec <lv_memset_00>:
{
  4116ec:	b430      	push	{r4, r5}
    if(d_align) {
  4116ee:	f010 0407 	ands.w	r4, r0, #7
  4116f2:	d00d      	beq.n	411710 <lv_memset_00+0x24>
        while(d_align && len) {
  4116f4:	f1c4 0408 	rsb	r4, r4, #8
  4116f8:	b151      	cbz	r1, 411710 <lv_memset_00+0x24>
  4116fa:	460b      	mov	r3, r1
            SET8(0);
  4116fc:	2500      	movs	r5, #0
  4116fe:	f800 5b01 	strb.w	r5, [r0], #1
            len--;
  411702:	3b01      	subs	r3, #1
        while(d_align && len) {
  411704:	1a5a      	subs	r2, r3, r1
  411706:	42e2      	cmn	r2, r4
  411708:	d001      	beq.n	41170e <lv_memset_00+0x22>
  41170a:	2b00      	cmp	r3, #0
  41170c:	d1f7      	bne.n	4116fe <lv_memset_00+0x12>
            len--;
  41170e:	4619      	mov	r1, r3
    while(len > 32) {
  411710:	2920      	cmp	r1, #32
  411712:	d921      	bls.n	411758 <lv_memset_00+0x6c>
  411714:	f100 0320 	add.w	r3, r0, #32
  411718:	460c      	mov	r4, r1
        REPEAT8(SET32(0));
  41171a:	2200      	movs	r2, #0
  41171c:	f843 2c20 	str.w	r2, [r3, #-32]
  411720:	f843 2c1c 	str.w	r2, [r3, #-28]
  411724:	f843 2c18 	str.w	r2, [r3, #-24]
  411728:	f843 2c14 	str.w	r2, [r3, #-20]
  41172c:	f843 2c10 	str.w	r2, [r3, #-16]
  411730:	f843 2c0c 	str.w	r2, [r3, #-12]
  411734:	f843 2c08 	str.w	r2, [r3, #-8]
  411738:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
  41173c:	3c20      	subs	r4, #32
  41173e:	3320      	adds	r3, #32
    while(len > 32) {
  411740:	2c20      	cmp	r4, #32
  411742:	d8eb      	bhi.n	41171c <lv_memset_00+0x30>
  411744:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
  411748:	f023 021f 	bic.w	r2, r3, #31
  41174c:	3220      	adds	r2, #32
  41174e:	4410      	add	r0, r2
  411750:	3920      	subs	r1, #32
  411752:	f023 031f 	bic.w	r3, r3, #31
  411756:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
  411758:	2904      	cmp	r1, #4
  41175a:	d910      	bls.n	41177e <lv_memset_00+0x92>
  41175c:	4602      	mov	r2, r0
  41175e:	460b      	mov	r3, r1
        SET32(0);
  411760:	2400      	movs	r4, #0
  411762:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
  411766:	3b04      	subs	r3, #4
    while(len > 4) {
  411768:	2b04      	cmp	r3, #4
  41176a:	d8fa      	bhi.n	411762 <lv_memset_00+0x76>
  41176c:	1f4b      	subs	r3, r1, #5
  41176e:	f023 0203 	bic.w	r2, r3, #3
  411772:	3204      	adds	r2, #4
  411774:	3904      	subs	r1, #4
  411776:	f023 0303 	bic.w	r3, r3, #3
  41177a:	1ac9      	subs	r1, r1, r3
        SET32(0);
  41177c:	4410      	add	r0, r2
    while(len) {
  41177e:	b129      	cbz	r1, 41178c <lv_memset_00+0xa0>
  411780:	4401      	add	r1, r0
        SET8(0);
  411782:	2300      	movs	r3, #0
  411784:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
  411788:	4281      	cmp	r1, r0
  41178a:	d1fb      	bne.n	411784 <lv_memset_00+0x98>
}
  41178c:	bc30      	pop	{r4, r5}
  41178e:	4770      	bx	lr

00411790 <lv_memset_ff>:
{
  411790:	b430      	push	{r4, r5}
    if(d_align) {
  411792:	f010 0407 	ands.w	r4, r0, #7
  411796:	d00d      	beq.n	4117b4 <lv_memset_ff+0x24>
        while(d_align && len) {
  411798:	f1c4 0408 	rsb	r4, r4, #8
  41179c:	b151      	cbz	r1, 4117b4 <lv_memset_ff+0x24>
  41179e:	460b      	mov	r3, r1
            SET8(0xFF);
  4117a0:	25ff      	movs	r5, #255	; 0xff
  4117a2:	f800 5b01 	strb.w	r5, [r0], #1
            len--;
  4117a6:	3b01      	subs	r3, #1
        while(d_align && len) {
  4117a8:	1a5a      	subs	r2, r3, r1
  4117aa:	42e2      	cmn	r2, r4
  4117ac:	d001      	beq.n	4117b2 <lv_memset_ff+0x22>
  4117ae:	2b00      	cmp	r3, #0
  4117b0:	d1f7      	bne.n	4117a2 <lv_memset_ff+0x12>
            len--;
  4117b2:	4619      	mov	r1, r3
    while(len > 32) {
  4117b4:	2920      	cmp	r1, #32
  4117b6:	d922      	bls.n	4117fe <lv_memset_ff+0x6e>
  4117b8:	f100 0320 	add.w	r3, r0, #32
  4117bc:	460c      	mov	r4, r1
        REPEAT8(SET32(0xFFFFFFFF));
  4117be:	f04f 32ff 	mov.w	r2, #4294967295
  4117c2:	f843 2c20 	str.w	r2, [r3, #-32]
  4117c6:	f843 2c1c 	str.w	r2, [r3, #-28]
  4117ca:	f843 2c18 	str.w	r2, [r3, #-24]
  4117ce:	f843 2c14 	str.w	r2, [r3, #-20]
  4117d2:	f843 2c10 	str.w	r2, [r3, #-16]
  4117d6:	f843 2c0c 	str.w	r2, [r3, #-12]
  4117da:	f843 2c08 	str.w	r2, [r3, #-8]
  4117de:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
  4117e2:	3c20      	subs	r4, #32
  4117e4:	3320      	adds	r3, #32
    while(len > 32) {
  4117e6:	2c20      	cmp	r4, #32
  4117e8:	d8eb      	bhi.n	4117c2 <lv_memset_ff+0x32>
  4117ea:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
  4117ee:	f023 021f 	bic.w	r2, r3, #31
  4117f2:	3220      	adds	r2, #32
  4117f4:	4410      	add	r0, r2
  4117f6:	3920      	subs	r1, #32
  4117f8:	f023 031f 	bic.w	r3, r3, #31
  4117fc:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
  4117fe:	2904      	cmp	r1, #4
  411800:	d911      	bls.n	411826 <lv_memset_ff+0x96>
  411802:	4602      	mov	r2, r0
  411804:	460b      	mov	r3, r1
        SET32(0xFFFFFFFF);
  411806:	f04f 34ff 	mov.w	r4, #4294967295
  41180a:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
  41180e:	3b04      	subs	r3, #4
    while(len > 4) {
  411810:	2b04      	cmp	r3, #4
  411812:	d8fa      	bhi.n	41180a <lv_memset_ff+0x7a>
  411814:	1f4b      	subs	r3, r1, #5
  411816:	f023 0203 	bic.w	r2, r3, #3
  41181a:	3204      	adds	r2, #4
  41181c:	3904      	subs	r1, #4
  41181e:	f023 0303 	bic.w	r3, r3, #3
  411822:	1ac9      	subs	r1, r1, r3
        SET32(0xFFFFFFFF);
  411824:	4410      	add	r0, r2
    while(len) {
  411826:	b129      	cbz	r1, 411834 <lv_memset_ff+0xa4>
  411828:	4401      	add	r1, r0
        SET8(0xFF);
  41182a:	23ff      	movs	r3, #255	; 0xff
  41182c:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
  411830:	4281      	cmp	r1, r0
  411832:	d1fb      	bne.n	41182c <lv_memset_ff+0x9c>
}
  411834:	bc30      	pop	{r4, r5}
  411836:	4770      	bx	lr

00411838 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
  411838:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
  41183a:	bf38      	it	cc
  41183c:	5488      	strbcc	r0, [r1, r2]
  41183e:	4770      	bx	lr

00411840 <_out_null>:
    }
}

// internal null output
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
{
  411840:	4770      	bx	lr

00411842 <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
  411842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411846:	b083      	sub	sp, #12
  411848:	4607      	mov	r7, r0
  41184a:	9100      	str	r1, [sp, #0]
  41184c:	4692      	mov	sl, r2
  41184e:	4698      	mov	r8, r3
  411850:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  411852:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  411854:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
  411858:	9910      	ldr	r1, [sp, #64]	; 0x40
  41185a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  41185e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
  411860:	f012 0302 	ands.w	r3, r2, #2
  411864:	9301      	str	r3, [sp, #4]
  411866:	d12e      	bne.n	4118c6 <_ntoa_format+0x84>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  411868:	f1b9 0f00 	cmp.w	r9, #0
  41186c:	d00e      	beq.n	41188c <_ntoa_format+0x4a>
  41186e:	f012 0f01 	tst.w	r2, #1
  411872:	f000 80b7 	beq.w	4119e4 <_ntoa_format+0x1a2>
  411876:	b915      	cbnz	r5, 41187e <_ntoa_format+0x3c>
  411878:	f012 0f0c 	tst.w	r2, #12
  41187c:	d001      	beq.n	411882 <_ntoa_format+0x40>
            width--;
  41187e:	f109 39ff 	add.w	r9, r9, #4294967295
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  411882:	428c      	cmp	r4, r1
  411884:	d212      	bcs.n	4118ac <_ntoa_format+0x6a>
  411886:	2c1f      	cmp	r4, #31
  411888:	d904      	bls.n	411894 <_ntoa_format+0x52>
  41188a:	e00f      	b.n	4118ac <_ntoa_format+0x6a>
  41188c:	428c      	cmp	r4, r1
  41188e:	d20a      	bcs.n	4118a6 <_ntoa_format+0x64>
  411890:	2c1f      	cmp	r4, #31
  411892:	d808      	bhi.n	4118a6 <_ntoa_format+0x64>
  411894:	1933      	adds	r3, r6, r4
            buf[len++] = '0';
  411896:	2030      	movs	r0, #48	; 0x30
  411898:	3401      	adds	r4, #1
  41189a:	f803 0b01 	strb.w	r0, [r3], #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  41189e:	42a1      	cmp	r1, r4
  4118a0:	d901      	bls.n	4118a6 <_ntoa_format+0x64>
  4118a2:	2c1f      	cmp	r4, #31
  4118a4:	d9f8      	bls.n	411898 <_ntoa_format+0x56>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4118a6:	f012 0f01 	tst.w	r2, #1
  4118aa:	d00c      	beq.n	4118c6 <_ntoa_format+0x84>
  4118ac:	45a1      	cmp	r9, r4
  4118ae:	d90a      	bls.n	4118c6 <_ntoa_format+0x84>
  4118b0:	2c1f      	cmp	r4, #31
  4118b2:	d808      	bhi.n	4118c6 <_ntoa_format+0x84>
  4118b4:	1933      	adds	r3, r6, r4
            buf[len++] = '0';
  4118b6:	2030      	movs	r0, #48	; 0x30
  4118b8:	3401      	adds	r4, #1
  4118ba:	f803 0b01 	strb.w	r0, [r3], #1
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4118be:	454c      	cmp	r4, r9
  4118c0:	d201      	bcs.n	4118c6 <_ntoa_format+0x84>
  4118c2:	2c1f      	cmp	r4, #31
  4118c4:	d9f8      	bls.n	4118b8 <_ntoa_format+0x76>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
  4118c6:	f012 0f10 	tst.w	r2, #16
  4118ca:	d017      	beq.n	4118fc <_ntoa_format+0xba>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  4118cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
  4118d0:	d104      	bne.n	4118dc <_ntoa_format+0x9a>
  4118d2:	b11c      	cbz	r4, 4118dc <_ntoa_format+0x9a>
  4118d4:	428c      	cmp	r4, r1
  4118d6:	d01e      	beq.n	411916 <_ntoa_format+0xd4>
  4118d8:	454c      	cmp	r4, r9
  4118da:	d01c      	beq.n	411916 <_ntoa_format+0xd4>
            len--;
            if(len && (base == 16U)) {
                len--;
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4118dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4118de:	2b10      	cmp	r3, #16
  4118e0:	d023      	beq.n	41192a <_ntoa_format+0xe8>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4118e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4118e4:	2b02      	cmp	r3, #2
  4118e6:	d104      	bne.n	4118f2 <_ntoa_format+0xb0>
  4118e8:	2c1f      	cmp	r4, #31
  4118ea:	d802      	bhi.n	4118f2 <_ntoa_format+0xb0>
            buf[len++] = 'b';
  4118ec:	2362      	movs	r3, #98	; 0x62
  4118ee:	5533      	strb	r3, [r6, r4]
  4118f0:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
  4118f2:	2c1f      	cmp	r4, #31
  4118f4:	d832      	bhi.n	41195c <_ntoa_format+0x11a>
            buf[len++] = '0';
  4118f6:	2330      	movs	r3, #48	; 0x30
  4118f8:	5533      	strb	r3, [r6, r4]
  4118fa:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
  4118fc:	2c1f      	cmp	r4, #31
  4118fe:	d82d      	bhi.n	41195c <_ntoa_format+0x11a>
        if(negative) {
  411900:	bb4d      	cbnz	r5, 411956 <_ntoa_format+0x114>
            buf[len++] = '-';
        }
        else if(flags & FLAGS_PLUS) {
  411902:	f012 0f04 	tst.w	r2, #4
  411906:	d13c      	bne.n	411982 <_ntoa_format+0x140>
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
  411908:	f012 0f08 	tst.w	r2, #8
  41190c:	d026      	beq.n	41195c <_ntoa_format+0x11a>
            buf[len++] = ' ';
  41190e:	2320      	movs	r3, #32
  411910:	5533      	strb	r3, [r6, r4]
  411912:	3401      	adds	r4, #1
  411914:	e022      	b.n	41195c <_ntoa_format+0x11a>
            if(len && (base == 16U)) {
  411916:	1e63      	subs	r3, r4, #1
  411918:	2c01      	cmp	r4, #1
  41191a:	d004      	beq.n	411926 <_ntoa_format+0xe4>
  41191c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  41191e:	2910      	cmp	r1, #16
  411920:	d101      	bne.n	411926 <_ntoa_format+0xe4>
                len--;
  411922:	3c02      	subs	r4, #2
  411924:	e7da      	b.n	4118dc <_ntoa_format+0x9a>
            len--;
  411926:	461c      	mov	r4, r3
  411928:	e7d8      	b.n	4118dc <_ntoa_format+0x9a>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  41192a:	2c1f      	cmp	r4, #31
  41192c:	bf8c      	ite	hi
  41192e:	2300      	movhi	r3, #0
  411930:	2301      	movls	r3, #1
  411932:	f002 0120 	and.w	r1, r2, #32
  411936:	f012 0f20 	tst.w	r2, #32
  41193a:	d104      	bne.n	411946 <_ntoa_format+0x104>
  41193c:	b11b      	cbz	r3, 411946 <_ntoa_format+0x104>
            buf[len++] = 'x';
  41193e:	2378      	movs	r3, #120	; 0x78
  411940:	5533      	strb	r3, [r6, r4]
  411942:	3401      	adds	r4, #1
  411944:	e7d5      	b.n	4118f2 <_ntoa_format+0xb0>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  411946:	2900      	cmp	r1, #0
  411948:	d0d3      	beq.n	4118f2 <_ntoa_format+0xb0>
  41194a:	2b00      	cmp	r3, #0
  41194c:	d0d1      	beq.n	4118f2 <_ntoa_format+0xb0>
            buf[len++] = 'X';
  41194e:	2358      	movs	r3, #88	; 0x58
  411950:	5533      	strb	r3, [r6, r4]
  411952:	3401      	adds	r4, #1
  411954:	e7cd      	b.n	4118f2 <_ntoa_format+0xb0>
            buf[len++] = '-';
  411956:	232d      	movs	r3, #45	; 0x2d
  411958:	5533      	strb	r3, [r6, r4]
  41195a:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  41195c:	f012 0f03 	tst.w	r2, #3
  411960:	d115      	bne.n	41198e <_ntoa_format+0x14c>
        for(i = len; i < width; i++) {
  411962:	454c      	cmp	r4, r9
  411964:	d211      	bcs.n	41198a <_ntoa_format+0x148>
  411966:	eb09 0b0a 	add.w	fp, r9, sl
  41196a:	ebab 0b04 	sub.w	fp, fp, r4
  41196e:	4652      	mov	r2, sl
            out(' ', buffer, idx++, maxlen);
  411970:	1c55      	adds	r5, r2, #1
  411972:	4643      	mov	r3, r8
  411974:	9900      	ldr	r1, [sp, #0]
  411976:	2020      	movs	r0, #32
  411978:	47b8      	blx	r7
  41197a:	462a      	mov	r2, r5
        for(i = len; i < width; i++) {
  41197c:	455d      	cmp	r5, fp
  41197e:	d1f7      	bne.n	411970 <_ntoa_format+0x12e>
  411980:	e006      	b.n	411990 <_ntoa_format+0x14e>
            buf[len++] = '+';  // ignore the space if the '+' exists
  411982:	232b      	movs	r3, #43	; 0x2b
  411984:	5533      	strb	r3, [r6, r4]
  411986:	3401      	adds	r4, #1
  411988:	e7e8      	b.n	41195c <_ntoa_format+0x11a>
        for(i = len; i < width; i++) {
  41198a:	4655      	mov	r5, sl
  41198c:	e000      	b.n	411990 <_ntoa_format+0x14e>
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  41198e:	4655      	mov	r5, sl
    while(len) {
  411990:	b314      	cbz	r4, 4119d8 <_ntoa_format+0x196>
  411992:	4426      	add	r6, r4
  411994:	442c      	add	r4, r5
  411996:	462a      	mov	r2, r5
        out(buf[--len], buffer, idx++, maxlen);
  411998:	1c55      	adds	r5, r2, #1
  41199a:	4643      	mov	r3, r8
  41199c:	9900      	ldr	r1, [sp, #0]
  41199e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  4119a2:	47b8      	blx	r7
  4119a4:	462a      	mov	r2, r5
    while(len) {
  4119a6:	42a5      	cmp	r5, r4
  4119a8:	d1f6      	bne.n	411998 <_ntoa_format+0x156>
    if(flags & FLAGS_LEFT) {
  4119aa:	9b01      	ldr	r3, [sp, #4]
  4119ac:	b1b3      	cbz	r3, 4119dc <_ntoa_format+0x19a>
        while(idx - start_idx < width) {
  4119ae:	eba4 030a 	sub.w	r3, r4, sl
  4119b2:	4599      	cmp	r9, r3
  4119b4:	d914      	bls.n	4119e0 <_ntoa_format+0x19e>
            out(' ', buffer, idx++, maxlen);
  4119b6:	2620      	movs	r6, #32
  4119b8:	4622      	mov	r2, r4
  4119ba:	9c00      	ldr	r4, [sp, #0]
  4119bc:	1c55      	adds	r5, r2, #1
  4119be:	4643      	mov	r3, r8
  4119c0:	4621      	mov	r1, r4
  4119c2:	4630      	mov	r0, r6
  4119c4:	47b8      	blx	r7
  4119c6:	462a      	mov	r2, r5
        while(idx - start_idx < width) {
  4119c8:	eba5 030a 	sub.w	r3, r5, sl
  4119cc:	4599      	cmp	r9, r3
  4119ce:	d8f5      	bhi.n	4119bc <_ntoa_format+0x17a>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
  4119d0:	4628      	mov	r0, r5
  4119d2:	b003      	add	sp, #12
  4119d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(len) {
  4119d8:	462c      	mov	r4, r5
  4119da:	e7e6      	b.n	4119aa <_ntoa_format+0x168>
    if(flags & FLAGS_LEFT) {
  4119dc:	4625      	mov	r5, r4
  4119de:	e7f7      	b.n	4119d0 <_ntoa_format+0x18e>
        while(idx - start_idx < width) {
  4119e0:	4625      	mov	r5, r4
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  4119e2:	e7f5      	b.n	4119d0 <_ntoa_format+0x18e>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4119e4:	2c1f      	cmp	r4, #31
  4119e6:	f63f af6e 	bhi.w	4118c6 <_ntoa_format+0x84>
  4119ea:	428c      	cmp	r4, r1
  4119ec:	f4ff af52 	bcc.w	411894 <_ntoa_format+0x52>
  4119f0:	e769      	b.n	4118c6 <_ntoa_format+0x84>
	...

004119f4 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  4119f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4119f8:	b090      	sub	sp, #64	; 0x40
  4119fa:	9d16      	ldr	r5, [sp, #88]	; 0x58
  4119fc:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4119fe:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  411a02:	b945      	cbnz	r5, 411a16 <_ntoa_long+0x22>
        flags &= ~FLAGS_HASH;
  411a04:	f028 0410 	bic.w	r4, r8, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  411a08:	f418 6f80 	tst.w	r8, #1024	; 0x400
  411a0c:	d002      	beq.n	411a14 <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
  411a0e:	46a0      	mov	r8, r4
    size_t len = 0U;
  411a10:	2700      	movs	r7, #0
  411a12:	e01d      	b.n	411a50 <_ntoa_long+0x5c>
        flags &= ~FLAGS_HASH;
  411a14:	46a0      	mov	r8, r4
  411a16:	f018 0f20 	tst.w	r8, #32
  411a1a:	f10d 0e1f 	add.w	lr, sp, #31
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  411a1e:	f04f 0700 	mov.w	r7, #0
  411a22:	bf14      	ite	ne
  411a24:	f04f 0c37 	movne.w	ip, #55	; 0x37
  411a28:	f04f 0c57 	moveq.w	ip, #87	; 0x57
            const char digit = (char)(value % base);
  411a2c:	fbb5 f4f6 	udiv	r4, r5, r6
  411a30:	fb06 5414 	mls	r4, r6, r4, r5
  411a34:	b2e4      	uxtb	r4, r4
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  411a36:	3701      	adds	r7, #1
  411a38:	2c09      	cmp	r4, #9
  411a3a:	bf94      	ite	ls
  411a3c:	3430      	addls	r4, #48	; 0x30
  411a3e:	4464      	addhi	r4, ip
  411a40:	b2e4      	uxtb	r4, r4
  411a42:	f80e 4f01 	strb.w	r4, [lr, #1]!
            value /= base;
  411a46:	fbb5 f5f6 	udiv	r5, r5, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  411a4a:	b10d      	cbz	r5, 411a50 <_ntoa_long+0x5c>
  411a4c:	2f1f      	cmp	r7, #31
  411a4e:	d9ed      	bls.n	411a2c <_ntoa_long+0x38>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  411a50:	f8cd 8018 	str.w	r8, [sp, #24]
  411a54:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  411a56:	9405      	str	r4, [sp, #20]
  411a58:	9c19      	ldr	r4, [sp, #100]	; 0x64
  411a5a:	9404      	str	r4, [sp, #16]
  411a5c:	9603      	str	r6, [sp, #12]
  411a5e:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
  411a62:	9402      	str	r4, [sp, #8]
  411a64:	9701      	str	r7, [sp, #4]
  411a66:	ac08      	add	r4, sp, #32
  411a68:	9400      	str	r4, [sp, #0]
  411a6a:	4c02      	ldr	r4, [pc, #8]	; (411a74 <_ntoa_long+0x80>)
  411a6c:	47a0      	blx	r4
}
  411a6e:	b010      	add	sp, #64	; 0x40
  411a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411a74:	00411843 	.word	0x00411843

00411a78 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  411a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411a7c:	b095      	sub	sp, #84	; 0x54
  411a7e:	9008      	str	r0, [sp, #32]
  411a80:	9109      	str	r1, [sp, #36]	; 0x24
  411a82:	920a      	str	r2, [sp, #40]	; 0x28
  411a84:	930b      	str	r3, [sp, #44]	; 0x2c
  411a86:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
  411a8a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
  411a8e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  411a92:	ea54 0305 	orrs.w	r3, r4, r5
  411a96:	d10a      	bne.n	411aae <_ntoa_long_long+0x36>
        flags &= ~FLAGS_HASH;
  411a98:	9b26      	ldr	r3, [sp, #152]	; 0x98
  411a9a:	f023 0310 	bic.w	r3, r3, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  411a9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  411aa0:	f412 6f80 	tst.w	r2, #1024	; 0x400
  411aa4:	d002      	beq.n	411aac <_ntoa_long_long+0x34>
        flags &= ~FLAGS_HASH;
  411aa6:	9326      	str	r3, [sp, #152]	; 0x98
    size_t len = 0U;
  411aa8:	2600      	movs	r6, #0
  411aaa:	e027      	b.n	411afc <_ntoa_long_long+0x84>
        flags &= ~FLAGS_HASH;
  411aac:	9326      	str	r3, [sp, #152]	; 0x98
  411aae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  411ab0:	f013 0f20 	tst.w	r3, #32
  411ab4:	f10d 0a2f 	add.w	sl, sp, #47	; 0x2f
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  411ab8:	f04f 0600 	mov.w	r6, #0
            const char digit = (char)(value % base);
  411abc:	4f1b      	ldr	r7, [pc, #108]	; (411b2c <_ntoa_long_long+0xb4>)
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  411abe:	bf14      	ite	ne
  411ac0:	f04f 0b37 	movne.w	fp, #55	; 0x37
  411ac4:	f04f 0b57 	moveq.w	fp, #87	; 0x57
            const char digit = (char)(value % base);
  411ac8:	464a      	mov	r2, r9
  411aca:	4643      	mov	r3, r8
  411acc:	4620      	mov	r0, r4
  411ace:	4629      	mov	r1, r5
  411ad0:	47b8      	blx	r7
  411ad2:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  411ad4:	3601      	adds	r6, #1
  411ad6:	2a09      	cmp	r2, #9
  411ad8:	bf94      	ite	ls
  411ada:	3230      	addls	r2, #48	; 0x30
  411adc:	445a      	addhi	r2, fp
  411ade:	b2d2      	uxtb	r2, r2
  411ae0:	f80a 2f01 	strb.w	r2, [sl, #1]!
            value /= base;
  411ae4:	464a      	mov	r2, r9
  411ae6:	4643      	mov	r3, r8
  411ae8:	4620      	mov	r0, r4
  411aea:	4629      	mov	r1, r5
  411aec:	47b8      	blx	r7
  411aee:	4604      	mov	r4, r0
  411af0:	460d      	mov	r5, r1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  411af2:	ea50 0301 	orrs.w	r3, r0, r1
  411af6:	d001      	beq.n	411afc <_ntoa_long_long+0x84>
  411af8:	2e1f      	cmp	r6, #31
  411afa:	d9e5      	bls.n	411ac8 <_ntoa_long_long+0x50>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  411afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  411afe:	9306      	str	r3, [sp, #24]
  411b00:	9b25      	ldr	r3, [sp, #148]	; 0x94
  411b02:	9305      	str	r3, [sp, #20]
  411b04:	9b24      	ldr	r3, [sp, #144]	; 0x90
  411b06:	9304      	str	r3, [sp, #16]
  411b08:	f8cd 900c 	str.w	r9, [sp, #12]
  411b0c:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  411b10:	9302      	str	r3, [sp, #8]
  411b12:	9601      	str	r6, [sp, #4]
  411b14:	ab0c      	add	r3, sp, #48	; 0x30
  411b16:	9300      	str	r3, [sp, #0]
  411b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  411b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
  411b1e:	9808      	ldr	r0, [sp, #32]
  411b20:	4c03      	ldr	r4, [pc, #12]	; (411b30 <_ntoa_long_long+0xb8>)
  411b22:	47a0      	blx	r4
}
  411b24:	b015      	add	sp, #84	; 0x54
  411b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411b2a:	bf00      	nop
  411b2c:	004189cd 	.word	0x004189cd
  411b30:	00411843 	.word	0x00411843

00411b34 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
  411b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411b38:	b093      	sub	sp, #76	; 0x4c
  411b3a:	920a      	str	r2, [sp, #40]	; 0x28
  411b3c:	461c      	mov	r4, r3
  411b3e:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
  411b42:	910b      	str	r1, [sp, #44]	; 0x2c
        // use null output function
        out = _out_null;
  411b44:	4fa2      	ldr	r7, [pc, #648]	; (411dd0 <_vsnprintf+0x29c>)
  411b46:	2900      	cmp	r1, #0
  411b48:	bf18      	it	ne
  411b4a:	4607      	movne	r7, r0
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
  411b4c:	f04f 0b00 	mov.w	fp, #0
    while(*format) {
  411b50:	7820      	ldrb	r0, [r4, #0]
  411b52:	2800      	cmp	r0, #0
  411b54:	f000 82d6 	beq.w	412104 <_vsnprintf+0x5d0>
        if(*format != '%') {
  411b58:	2825      	cmp	r0, #37	; 0x25
  411b5a:	d008      	beq.n	411b6e <_vsnprintf+0x3a>
            out(*format, buffer, idx++, maxlen);
  411b5c:	f10b 0501 	add.w	r5, fp, #1
  411b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411b62:	465a      	mov	r2, fp
  411b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411b66:	47b8      	blx	r7
            format++;
  411b68:	3401      	adds	r4, #1
            out(*format, buffer, idx++, maxlen);
  411b6a:	46ab      	mov	fp, r5
            continue;
  411b6c:	e7f0      	b.n	411b50 <_vsnprintf+0x1c>
            format++;
  411b6e:	1c62      	adds	r2, r4, #1
        flags = 0U;
  411b70:	2100      	movs	r1, #0
  411b72:	e001      	b.n	411b78 <_vsnprintf+0x44>
                    flags |= FLAGS_ZEROPAD;
  411b74:	f041 0101 	orr.w	r1, r1, #1
  411b78:	4614      	mov	r4, r2
  411b7a:	3201      	adds	r2, #1
            switch(*format) {
  411b7c:	7823      	ldrb	r3, [r4, #0]
  411b7e:	3b20      	subs	r3, #32
  411b80:	2b10      	cmp	r3, #16
  411b82:	d831      	bhi.n	411be8 <_vsnprintf+0xb4>
  411b84:	a001      	add	r0, pc, #4	; (adr r0, 411b8c <_vsnprintf+0x58>)
  411b86:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
  411b8a:	bf00      	nop
  411b8c:	00411bdd 	.word	0x00411bdd
  411b90:	00411be9 	.word	0x00411be9
  411b94:	00411be9 	.word	0x00411be9
  411b98:	00411be3 	.word	0x00411be3
  411b9c:	00411be9 	.word	0x00411be9
  411ba0:	00411be9 	.word	0x00411be9
  411ba4:	00411be9 	.word	0x00411be9
  411ba8:	00411be9 	.word	0x00411be9
  411bac:	00411be9 	.word	0x00411be9
  411bb0:	00411be9 	.word	0x00411be9
  411bb4:	00411be9 	.word	0x00411be9
  411bb8:	00411bd7 	.word	0x00411bd7
  411bbc:	00411be9 	.word	0x00411be9
  411bc0:	00411bd1 	.word	0x00411bd1
  411bc4:	00411be9 	.word	0x00411be9
  411bc8:	00411be9 	.word	0x00411be9
  411bcc:	00411b75 	.word	0x00411b75
                    flags |= FLAGS_LEFT;
  411bd0:	f041 0102 	orr.w	r1, r1, #2
                    break;
  411bd4:	e7d0      	b.n	411b78 <_vsnprintf+0x44>
                    flags |= FLAGS_PLUS;
  411bd6:	f041 0104 	orr.w	r1, r1, #4
                    break;
  411bda:	e7cd      	b.n	411b78 <_vsnprintf+0x44>
                    flags |= FLAGS_SPACE;
  411bdc:	f041 0108 	orr.w	r1, r1, #8
                    break;
  411be0:	e7ca      	b.n	411b78 <_vsnprintf+0x44>
                    flags |= FLAGS_HASH;
  411be2:	f041 0110 	orr.w	r1, r1, #16
                    break;
  411be6:	e7c7      	b.n	411b78 <_vsnprintf+0x44>
        if(_is_digit(*format)) {
  411be8:	7823      	ldrb	r3, [r4, #0]
    return (ch >= '0') && (ch <= '9');
  411bea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        if(_is_digit(*format)) {
  411bee:	b2d2      	uxtb	r2, r2
  411bf0:	2a09      	cmp	r2, #9
  411bf2:	d916      	bls.n	411c22 <_vsnprintf+0xee>
        else if(*format == '*') {
  411bf4:	2b2a      	cmp	r3, #42	; 0x2a
  411bf6:	d022      	beq.n	411c3e <_vsnprintf+0x10a>
        width = 0U;
  411bf8:	2500      	movs	r5, #0
        if(*format == '.') {
  411bfa:	7823      	ldrb	r3, [r4, #0]
  411bfc:	2b2e      	cmp	r3, #46	; 0x2e
  411bfe:	d02b      	beq.n	411c58 <_vsnprintf+0x124>
        precision = 0U;
  411c00:	2600      	movs	r6, #0
        switch(*format) {
  411c02:	7823      	ldrb	r3, [r4, #0]
  411c04:	3b68      	subs	r3, #104	; 0x68
  411c06:	2b12      	cmp	r3, #18
  411c08:	d864      	bhi.n	411cd4 <_vsnprintf+0x1a0>
  411c0a:	e8df f003 	tbb	[pc, r3]
  411c0e:	6355      	.short	0x6355
  411c10:	634a63bf 	.word	0x634a63bf
  411c14:	63636363 	.word	0x63636363
  411c18:	63606363 	.word	0x63606363
  411c1c:	63636363 	.word	0x63636363
  411c20:	c3          	.byte	0xc3
  411c21:	00          	.byte	0x00
  411c22:	2500      	movs	r5, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  411c24:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  411c28:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  411c2c:	3d30      	subs	r5, #48	; 0x30
    while(_is_digit(**str)) {
  411c2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    return (ch >= '0') && (ch <= '9');
  411c32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
  411c36:	b2d2      	uxtb	r2, r2
  411c38:	2a09      	cmp	r2, #9
  411c3a:	d9f3      	bls.n	411c24 <_vsnprintf+0xf0>
  411c3c:	e7dd      	b.n	411bfa <_vsnprintf+0xc6>
            const int w = va_arg(va, int);
  411c3e:	f109 0304 	add.w	r3, r9, #4
  411c42:	f8d9 5000 	ldr.w	r5, [r9]
            if(w < 0) {
  411c46:	2d00      	cmp	r5, #0
  411c48:	db02      	blt.n	411c50 <_vsnprintf+0x11c>
            format++;
  411c4a:	3401      	adds	r4, #1
            const int w = va_arg(va, int);
  411c4c:	4699      	mov	r9, r3
  411c4e:	e7d4      	b.n	411bfa <_vsnprintf+0xc6>
                flags |= FLAGS_LEFT;    // reverse padding
  411c50:	f041 0102 	orr.w	r1, r1, #2
                width = (unsigned int) - w;
  411c54:	426d      	negs	r5, r5
  411c56:	e7f8      	b.n	411c4a <_vsnprintf+0x116>
            flags |= FLAGS_PRECISION;
  411c58:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
            format++;
  411c5c:	1c60      	adds	r0, r4, #1
            if(_is_digit(*format)) {
  411c5e:	7863      	ldrb	r3, [r4, #1]
    return (ch >= '0') && (ch <= '9');
  411c60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            if(_is_digit(*format)) {
  411c64:	b2d2      	uxtb	r2, r2
  411c66:	2a09      	cmp	r2, #9
  411c68:	d904      	bls.n	411c74 <_vsnprintf+0x140>
            else if(*format == '*') {
  411c6a:	2b2a      	cmp	r3, #42	; 0x2a
  411c6c:	d011      	beq.n	411c92 <_vsnprintf+0x15e>
            format++;
  411c6e:	4604      	mov	r4, r0
        precision = 0U;
  411c70:	2600      	movs	r6, #0
  411c72:	e7c6      	b.n	411c02 <_vsnprintf+0xce>
  411c74:	2600      	movs	r6, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  411c76:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  411c7a:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  411c7e:	3e30      	subs	r6, #48	; 0x30
    while(_is_digit(**str)) {
  411c80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    return (ch >= '0') && (ch <= '9');
  411c84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
  411c88:	b2d2      	uxtb	r2, r2
  411c8a:	2a09      	cmp	r2, #9
  411c8c:	d9f3      	bls.n	411c76 <_vsnprintf+0x142>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  411c8e:	4604      	mov	r4, r0
  411c90:	e7b7      	b.n	411c02 <_vsnprintf+0xce>
                precision = prec > 0 ? (unsigned int)prec : 0U;
  411c92:	f8d9 6000 	ldr.w	r6, [r9]
  411c96:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
                format++;
  411c9a:	3402      	adds	r4, #2
                const int prec = (int)va_arg(va, int);
  411c9c:	f109 0904 	add.w	r9, r9, #4
  411ca0:	e7af      	b.n	411c02 <_vsnprintf+0xce>
                if(*format == 'l') {
  411ca2:	7863      	ldrb	r3, [r4, #1]
  411ca4:	2b6c      	cmp	r3, #108	; 0x6c
  411ca6:	d003      	beq.n	411cb0 <_vsnprintf+0x17c>
                flags |= FLAGS_LONG;
  411ca8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
  411cac:	3401      	adds	r4, #1
  411cae:	e011      	b.n	411cd4 <_vsnprintf+0x1a0>
                    flags |= FLAGS_LONG_LONG;
  411cb0:	f441 7140 	orr.w	r1, r1, #768	; 0x300
                    format++;
  411cb4:	3402      	adds	r4, #2
  411cb6:	e00d      	b.n	411cd4 <_vsnprintf+0x1a0>
                if(*format == 'h') {
  411cb8:	7863      	ldrb	r3, [r4, #1]
  411cba:	2b68      	cmp	r3, #104	; 0x68
  411cbc:	d003      	beq.n	411cc6 <_vsnprintf+0x192>
                flags |= FLAGS_SHORT;
  411cbe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
                format++;
  411cc2:	3401      	adds	r4, #1
  411cc4:	e006      	b.n	411cd4 <_vsnprintf+0x1a0>
                    flags |= FLAGS_CHAR;
  411cc6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
                    format++;
  411cca:	3402      	adds	r4, #2
  411ccc:	e002      	b.n	411cd4 <_vsnprintf+0x1a0>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  411cce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
  411cd2:	3401      	adds	r4, #1
        switch(*format) {
  411cd4:	7820      	ldrb	r0, [r4, #0]
  411cd6:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
  411cda:	2b53      	cmp	r3, #83	; 0x53
  411cdc:	f200 8205 	bhi.w	4120ea <_vsnprintf+0x5b6>
  411ce0:	e8df f013 	tbh	[pc, r3, lsl #1]
  411ce4:	020301f9 	.word	0x020301f9
  411ce8:	02030203 	.word	0x02030203
  411cec:	02030203 	.word	0x02030203
  411cf0:	02030203 	.word	0x02030203
  411cf4:	02030203 	.word	0x02030203
  411cf8:	02030203 	.word	0x02030203
  411cfc:	02030203 	.word	0x02030203
  411d00:	02030203 	.word	0x02030203
  411d04:	02030203 	.word	0x02030203
  411d08:	02030203 	.word	0x02030203
  411d0c:	02030203 	.word	0x02030203
  411d10:	02030203 	.word	0x02030203
  411d14:	02030203 	.word	0x02030203
  411d18:	02030203 	.word	0x02030203
  411d1c:	02030203 	.word	0x02030203
  411d20:	02030203 	.word	0x02030203
  411d24:	02030203 	.word	0x02030203
  411d28:	02030203 	.word	0x02030203
  411d2c:	02030203 	.word	0x02030203
  411d30:	02030203 	.word	0x02030203
  411d34:	02030203 	.word	0x02030203
  411d38:	005c0203 	.word	0x005c0203
  411d3c:	02030203 	.word	0x02030203
  411d40:	02030203 	.word	0x02030203
  411d44:	02030203 	.word	0x02030203
  411d48:	005c0203 	.word	0x005c0203
  411d4c:	02030203 	.word	0x02030203
  411d50:	02030203 	.word	0x02030203
  411d54:	02030203 	.word	0x02030203
  411d58:	02030203 	.word	0x02030203
  411d5c:	005c0203 	.word	0x005c0203
  411d60:	005c0163 	.word	0x005c0163
  411d64:	02030203 	.word	0x02030203
  411d68:	02030203 	.word	0x02030203
  411d6c:	0203005c 	.word	0x0203005c
  411d70:	02030203 	.word	0x02030203
  411d74:	02030203 	.word	0x02030203
  411d78:	005c005c 	.word	0x005c005c
  411d7c:	02030203 	.word	0x02030203
  411d80:	02030188 	.word	0x02030188
  411d84:	0203005c 	.word	0x0203005c
  411d88:	005c0203 	.word	0x005c0203
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  411d8c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
                format++;
  411d90:	3401      	adds	r4, #1
                break;
  411d92:	e79f      	b.n	411cd4 <_vsnprintf+0x1a0>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  411d94:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
  411d98:	3401      	adds	r4, #1
                break;
  411d9a:	e79b      	b.n	411cd4 <_vsnprintf+0x1a0>
                    if(*format == 'x' || *format == 'X') {
  411d9c:	f000 03df 	and.w	r3, r0, #223	; 0xdf
  411da0:	2b58      	cmp	r3, #88	; 0x58
  411da2:	d017      	beq.n	411dd4 <_vsnprintf+0x2a0>
                    else if(*format == 'p' || *format == 'P') {
  411da4:	2b50      	cmp	r3, #80	; 0x50
  411da6:	d109      	bne.n	411dbc <_vsnprintf+0x288>
                            flags |= FLAGS_LONG;
  411da8:	f441 7188 	orr.w	r1, r1, #272	; 0x110
                        if(*(format + 1) == 'V')
  411dac:	7863      	ldrb	r3, [r4, #1]
  411dae:	2b56      	cmp	r3, #86	; 0x56
  411db0:	d001      	beq.n	411db6 <_vsnprintf+0x282>
                        base = 16U;
  411db2:	2310      	movs	r3, #16
  411db4:	e00f      	b.n	411dd6 <_vsnprintf+0x2a2>
                            format++;
  411db6:	3401      	adds	r4, #1
                        base = 16U;
  411db8:	2310      	movs	r3, #16
  411dba:	e00c      	b.n	411dd6 <_vsnprintf+0x2a2>
                    else if(*format == 'o') {
  411dbc:	286f      	cmp	r0, #111	; 0x6f
  411dbe:	f000 81af 	beq.w	412120 <_vsnprintf+0x5ec>
                    else if(*format == 'b') {
  411dc2:	2862      	cmp	r0, #98	; 0x62
  411dc4:	f000 81ae 	beq.w	412124 <_vsnprintf+0x5f0>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
  411dc8:	f021 0110 	bic.w	r1, r1, #16
                        base = 10U;
  411dcc:	230a      	movs	r3, #10
  411dce:	e002      	b.n	411dd6 <_vsnprintf+0x2a2>
  411dd0:	00411841 	.word	0x00411841
                        base = 16U;
  411dd4:	2310      	movs	r3, #16
                    if(*format == 'X' || *format == 'P') {
  411dd6:	7820      	ldrb	r0, [r4, #0]
  411dd8:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
  411ddc:	2a50      	cmp	r2, #80	; 0x50
                        flags |= FLAGS_UPPERCASE;
  411dde:	bf08      	it	eq
  411de0:	f041 0120 	orreq.w	r1, r1, #32
                    if((*format != 'i') && (*format != 'd')) {
  411de4:	2869      	cmp	r0, #105	; 0x69
  411de6:	d003      	beq.n	411df0 <_vsnprintf+0x2bc>
  411de8:	2864      	cmp	r0, #100	; 0x64
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
  411dea:	bf18      	it	ne
  411dec:	f021 010c 	bicne.w	r1, r1, #12
                    if(flags & FLAGS_PRECISION) {
  411df0:	f411 6f80 	tst.w	r1, #1024	; 0x400
                        flags &= ~FLAGS_ZEROPAD;
  411df4:	bf18      	it	ne
  411df6:	f021 0101 	bicne.w	r1, r1, #1
                    if((*format == 'i') || (*format == 'd')) {
  411dfa:	2869      	cmp	r0, #105	; 0x69
  411dfc:	d028      	beq.n	411e50 <_vsnprintf+0x31c>
  411dfe:	2864      	cmp	r0, #100	; 0x64
  411e00:	d026      	beq.n	411e50 <_vsnprintf+0x31c>
                    else if (*format == 'V') {
  411e02:	2856      	cmp	r0, #86	; 0x56
  411e04:	f000 808b 	beq.w	411f1e <_vsnprintf+0x3ea>
                        if(flags & FLAGS_LONG_LONG) {
  411e08:	f411 7f00 	tst.w	r1, #512	; 0x200
  411e0c:	f040 809b 	bne.w	411f46 <_vsnprintf+0x412>
                        else if(flags & FLAGS_LONG) {
  411e10:	f411 7f80 	tst.w	r1, #256	; 0x100
  411e14:	f040 80b0 	bne.w	411f78 <_vsnprintf+0x444>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  411e18:	f011 0f40 	tst.w	r1, #64	; 0x40
  411e1c:	f040 80c0 	bne.w	411fa0 <_vsnprintf+0x46c>
  411e20:	f011 0f80 	tst.w	r1, #128	; 0x80
  411e24:	bf14      	ite	ne
  411e26:	f8b9 2000 	ldrhne.w	r2, [r9]
  411e2a:	f8d9 2000 	ldreq.w	r2, [r9]
  411e2e:	f109 0904 	add.w	r9, r9, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  411e32:	9105      	str	r1, [sp, #20]
  411e34:	9504      	str	r5, [sp, #16]
  411e36:	9603      	str	r6, [sp, #12]
  411e38:	9302      	str	r3, [sp, #8]
  411e3a:	2300      	movs	r3, #0
  411e3c:	9301      	str	r3, [sp, #4]
  411e3e:	9200      	str	r2, [sp, #0]
  411e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411e42:	465a      	mov	r2, fp
  411e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411e46:	4638      	mov	r0, r7
  411e48:	4dac      	ldr	r5, [pc, #688]	; (4120fc <_vsnprintf+0x5c8>)
  411e4a:	47a8      	blx	r5
  411e4c:	4683      	mov	fp, r0
  411e4e:	e022      	b.n	411e96 <_vsnprintf+0x362>
                        if(flags & FLAGS_LONG_LONG) {
  411e50:	f411 7f00 	tst.w	r1, #512	; 0x200
  411e54:	d121      	bne.n	411e9a <_vsnprintf+0x366>
                        else if(flags & FLAGS_LONG) {
  411e56:	f411 7f80 	tst.w	r1, #256	; 0x100
  411e5a:	d144      	bne.n	411ee6 <_vsnprintf+0x3b2>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  411e5c:	f011 0f40 	tst.w	r1, #64	; 0x40
  411e60:	d158      	bne.n	411f14 <_vsnprintf+0x3e0>
                                                                                                                                       int) : va_arg(va, int);
  411e62:	f011 0f80 	tst.w	r1, #128	; 0x80
  411e66:	bf14      	ite	ne
  411e68:	f9b9 2000 	ldrshne.w	r2, [r9]
  411e6c:	f8d9 2000 	ldreq.w	r2, [r9]
  411e70:	f109 0904 	add.w	r9, r9, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
  411e74:	9105      	str	r1, [sp, #20]
  411e76:	9504      	str	r5, [sp, #16]
  411e78:	9603      	str	r6, [sp, #12]
  411e7a:	9302      	str	r3, [sp, #8]
  411e7c:	0fd3      	lsrs	r3, r2, #31
  411e7e:	9301      	str	r3, [sp, #4]
  411e80:	2a00      	cmp	r2, #0
  411e82:	bfb8      	it	lt
  411e84:	4252      	neglt	r2, r2
  411e86:	9200      	str	r2, [sp, #0]
  411e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411e8a:	465a      	mov	r2, fp
  411e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411e8e:	4638      	mov	r0, r7
  411e90:	4d9a      	ldr	r5, [pc, #616]	; (4120fc <_vsnprintf+0x5c8>)
  411e92:	47a8      	blx	r5
  411e94:	4683      	mov	fp, r0
                    format++;
  411e96:	3401      	adds	r4, #1
                    break;
  411e98:	e65a      	b.n	411b50 <_vsnprintf+0x1c>
                            const long long value = va_arg(va, long long);
  411e9a:	f109 0207 	add.w	r2, r9, #7
  411e9e:	f022 0207 	bic.w	r2, r2, #7
  411ea2:	f102 0908 	add.w	r9, r2, #8
  411ea6:	f8d2 e000 	ldr.w	lr, [r2]
  411eaa:	6850      	ldr	r0, [r2, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
  411eac:	9108      	str	r1, [sp, #32]
  411eae:	9507      	str	r5, [sp, #28]
  411eb0:	9606      	str	r6, [sp, #24]
  411eb2:	9304      	str	r3, [sp, #16]
  411eb4:	2300      	movs	r3, #0
  411eb6:	9305      	str	r3, [sp, #20]
  411eb8:	0fc3      	lsrs	r3, r0, #31
  411eba:	9302      	str	r3, [sp, #8]
  411ebc:	4672      	mov	r2, lr
  411ebe:	4603      	mov	r3, r0
  411ec0:	2a00      	cmp	r2, #0
  411ec2:	f170 0100 	sbcs.w	r1, r0, #0
  411ec6:	db09      	blt.n	411edc <_vsnprintf+0x3a8>
  411ec8:	e9cd 2300 	strd	r2, r3, [sp]
  411ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411ece:	465a      	mov	r2, fp
  411ed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411ed2:	4638      	mov	r0, r7
  411ed4:	4d8a      	ldr	r5, [pc, #552]	; (412100 <_vsnprintf+0x5cc>)
  411ed6:	47a8      	blx	r5
  411ed8:	4683      	mov	fp, r0
  411eda:	e7dc      	b.n	411e96 <_vsnprintf+0x362>
  411edc:	f1de 0200 	rsbs	r2, lr, #0
  411ee0:	eb60 0340 	sbc.w	r3, r0, r0, lsl #1
  411ee4:	e7f0      	b.n	411ec8 <_vsnprintf+0x394>
                            const long value = va_arg(va, long);
  411ee6:	f109 0804 	add.w	r8, r9, #4
  411eea:	f8d9 2000 	ldr.w	r2, [r9]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
  411eee:	9105      	str	r1, [sp, #20]
  411ef0:	9504      	str	r5, [sp, #16]
  411ef2:	9603      	str	r6, [sp, #12]
  411ef4:	9302      	str	r3, [sp, #8]
  411ef6:	0fd3      	lsrs	r3, r2, #31
  411ef8:	9301      	str	r3, [sp, #4]
  411efa:	2a00      	cmp	r2, #0
  411efc:	bfb8      	it	lt
  411efe:	4252      	neglt	r2, r2
  411f00:	9200      	str	r2, [sp, #0]
  411f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411f04:	465a      	mov	r2, fp
  411f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411f08:	4638      	mov	r0, r7
  411f0a:	4d7c      	ldr	r5, [pc, #496]	; (4120fc <_vsnprintf+0x5c8>)
  411f0c:	47a8      	blx	r5
  411f0e:	4683      	mov	fp, r0
                            const long value = va_arg(va, long);
  411f10:	46c1      	mov	r9, r8
  411f12:	e7c0      	b.n	411e96 <_vsnprintf+0x362>
  411f14:	f899 2000 	ldrb.w	r2, [r9]
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  411f18:	f109 0904 	add.w	r9, r9, #4
  411f1c:	e7aa      	b.n	411e74 <_vsnprintf+0x340>
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
  411f1e:	f109 0504 	add.w	r5, r9, #4
  411f22:	f8d9 3000 	ldr.w	r3, [r9]
                        va_copy(copy, *vaf->va);
  411f26:	685a      	ldr	r2, [r3, #4]
  411f28:	6812      	ldr	r2, [r2, #0]
  411f2a:	9211      	str	r2, [sp, #68]	; 0x44
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
  411f2c:	681b      	ldr	r3, [r3, #0]
  411f2e:	9200      	str	r2, [sp, #0]
  411f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411f32:	eba2 020b 	sub.w	r2, r2, fp
  411f36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411f38:	4459      	add	r1, fp
  411f3a:	4638      	mov	r0, r7
  411f3c:	f7ff fdfa 	bl	411b34 <_vsnprintf>
  411f40:	4483      	add	fp, r0
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
  411f42:	46a9      	mov	r9, r5
  411f44:	e7a7      	b.n	411e96 <_vsnprintf+0x362>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  411f46:	f109 0207 	add.w	r2, r9, #7
  411f4a:	f022 0207 	bic.w	r2, r2, #7
  411f4e:	f102 0908 	add.w	r9, r2, #8
  411f52:	9108      	str	r1, [sp, #32]
  411f54:	9507      	str	r5, [sp, #28]
  411f56:	9606      	str	r6, [sp, #24]
  411f58:	2100      	movs	r1, #0
  411f5a:	9304      	str	r3, [sp, #16]
  411f5c:	9105      	str	r1, [sp, #20]
  411f5e:	9102      	str	r1, [sp, #8]
  411f60:	e9d2 2300 	ldrd	r2, r3, [r2]
  411f64:	e9cd 2300 	strd	r2, r3, [sp]
  411f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411f6a:	465a      	mov	r2, fp
  411f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411f6e:	4638      	mov	r0, r7
  411f70:	4d63      	ldr	r5, [pc, #396]	; (412100 <_vsnprintf+0x5cc>)
  411f72:	47a8      	blx	r5
  411f74:	4683      	mov	fp, r0
  411f76:	e78e      	b.n	411e96 <_vsnprintf+0x362>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  411f78:	f109 0804 	add.w	r8, r9, #4
  411f7c:	9105      	str	r1, [sp, #20]
  411f7e:	9504      	str	r5, [sp, #16]
  411f80:	9603      	str	r6, [sp, #12]
  411f82:	9302      	str	r3, [sp, #8]
  411f84:	2300      	movs	r3, #0
  411f86:	9301      	str	r3, [sp, #4]
  411f88:	f8d9 3000 	ldr.w	r3, [r9]
  411f8c:	9300      	str	r3, [sp, #0]
  411f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411f90:	465a      	mov	r2, fp
  411f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411f94:	4638      	mov	r0, r7
  411f96:	4d59      	ldr	r5, [pc, #356]	; (4120fc <_vsnprintf+0x5c8>)
  411f98:	47a8      	blx	r5
  411f9a:	4683      	mov	fp, r0
  411f9c:	46c1      	mov	r9, r8
  411f9e:	e77a      	b.n	411e96 <_vsnprintf+0x362>
  411fa0:	f899 2000 	ldrb.w	r2, [r9]
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
  411fa4:	f109 0904 	add.w	r9, r9, #4
  411fa8:	e743      	b.n	411e32 <_vsnprintf+0x2fe>
                    if(!(flags & FLAGS_LEFT)) {
  411faa:	f011 0f02 	tst.w	r1, #2
  411fae:	f040 80bb 	bne.w	412128 <_vsnprintf+0x5f4>
                        while(l++ < width) {
  411fb2:	2d01      	cmp	r5, #1
  411fb4:	f240 80d6 	bls.w	412164 <_vsnprintf+0x630>
  411fb8:	f10b 36ff 	add.w	r6, fp, #4294967295
  411fbc:	442e      	add	r6, r5
                            out(' ', buffer, idx++, maxlen);
  411fbe:	f04f 0820 	mov.w	r8, #32
  411fc2:	465a      	mov	r2, fp
  411fc4:	1c55      	adds	r5, r2, #1
  411fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411fca:	4640      	mov	r0, r8
  411fcc:	47b8      	blx	r7
  411fce:	462a      	mov	r2, r5
                        while(l++ < width) {
  411fd0:	42ae      	cmp	r6, r5
  411fd2:	d1f7      	bne.n	411fc4 <_vsnprintf+0x490>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  411fd4:	f109 0604 	add.w	r6, r9, #4
  411fd8:	f105 0b01 	add.w	fp, r5, #1
  411fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411fde:	462a      	mov	r2, r5
  411fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411fe2:	f899 0000 	ldrb.w	r0, [r9]
  411fe6:	47b8      	blx	r7
  411fe8:	46b1      	mov	r9, r6
                    format++;
  411fea:	3401      	adds	r4, #1
                    break;
  411fec:	e5b0      	b.n	411b50 <_vsnprintf+0x1c>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  411fee:	46c1      	mov	r9, r8
  411ff0:	46b3      	mov	fp, r6
  411ff2:	e7fa      	b.n	411fea <_vsnprintf+0x4b6>
                    const char * p = va_arg(va, char *);
  411ff4:	f109 0304 	add.w	r3, r9, #4
  411ff8:	930e      	str	r3, [sp, #56]	; 0x38
  411ffa:	f8d9 3000 	ldr.w	r3, [r9]
  411ffe:	461a      	mov	r2, r3
  412000:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
  412002:	2e00      	cmp	r6, #0
  412004:	bf14      	ite	ne
  412006:	4633      	movne	r3, r6
  412008:	f04f 33ff 	moveq.w	r3, #4294967295
    for(s = str; *s && maxsize--; ++s);
  41200c:	7810      	ldrb	r0, [r2, #0]
  41200e:	2800      	cmp	r0, #0
  412010:	f000 80aa 	beq.w	412168 <_vsnprintf+0x634>
  412014:	468e      	mov	lr, r1
  412016:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  41201a:	b119      	cbz	r1, 412024 <_vsnprintf+0x4f0>
  41201c:	3b01      	subs	r3, #1
  41201e:	d1fa      	bne.n	412016 <_vsnprintf+0x4e2>
  412020:	4671      	mov	r1, lr
  412022:	e000      	b.n	412026 <_vsnprintf+0x4f2>
  412024:	4671      	mov	r1, lr
    return (unsigned int)(s - str);
  412026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  412028:	1ad3      	subs	r3, r2, r3
  41202a:	930d      	str	r3, [sp, #52]	; 0x34
                    if(flags & FLAGS_PRECISION) {
  41202c:	f411 6a80 	ands.w	sl, r1, #1024	; 0x400
  412030:	d003      	beq.n	41203a <_vsnprintf+0x506>
                        l = (l < precision ? l : precision);
  412032:	42b3      	cmp	r3, r6
  412034:	bf28      	it	cs
  412036:	4633      	movcs	r3, r6
  412038:	930d      	str	r3, [sp, #52]	; 0x34
                    if(!(flags & FLAGS_LEFT)) {
  41203a:	f011 0302 	ands.w	r3, r1, #2
  41203e:	930f      	str	r3, [sp, #60]	; 0x3c
  412040:	f040 8094 	bne.w	41216c <_vsnprintf+0x638>
                        while(l++ < width) {
  412044:	990d      	ldr	r1, [sp, #52]	; 0x34
  412046:	460b      	mov	r3, r1
  412048:	3301      	adds	r3, #1
  41204a:	428d      	cmp	r5, r1
  41204c:	f240 8098 	bls.w	412180 <_vsnprintf+0x64c>
  412050:	eb05 090b 	add.w	r9, r5, fp
  412054:	eba9 0901 	sub.w	r9, r9, r1
                            out(' ', buffer, idx++, maxlen);
  412058:	465a      	mov	r2, fp
  41205a:	f102 0801 	add.w	r8, r2, #1
  41205e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412060:	990b      	ldr	r1, [sp, #44]	; 0x2c
  412062:	2020      	movs	r0, #32
  412064:	47b8      	blx	r7
  412066:	4642      	mov	r2, r8
                        while(l++ < width) {
  412068:	45c1      	cmp	r9, r8
  41206a:	d1f6      	bne.n	41205a <_vsnprintf+0x526>
  41206c:	1c6b      	adds	r3, r5, #1
  41206e:	930d      	str	r3, [sp, #52]	; 0x34
                            out(' ', buffer, idx++, maxlen);
  412070:	46c3      	mov	fp, r8
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  412072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  412074:	7818      	ldrb	r0, [r3, #0]
  412076:	2800      	cmp	r0, #0
  412078:	d179      	bne.n	41216e <_vsnprintf+0x63a>
  41207a:	e024      	b.n	4120c6 <_vsnprintf+0x592>
  41207c:	461e      	mov	r6, r3
                        out(*(p++), buffer, idx++, maxlen);
  41207e:	f102 0801 	add.w	r8, r2, #1
  412082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412084:	990b      	ldr	r1, [sp, #44]	; 0x2c
  412086:	47b8      	blx	r7
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  412088:	f819 0f01 	ldrb.w	r0, [r9, #1]!
  41208c:	b140      	cbz	r0, 4120a0 <_vsnprintf+0x56c>
                        out(*(p++), buffer, idx++, maxlen);
  41208e:	4642      	mov	r2, r8
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  412090:	2c00      	cmp	r4, #0
  412092:	d0f4      	beq.n	41207e <_vsnprintf+0x54a>
  412094:	1e73      	subs	r3, r6, #1
  412096:	2e00      	cmp	r6, #0
  412098:	d1f0      	bne.n	41207c <_vsnprintf+0x548>
  41209a:	4654      	mov	r4, sl
  41209c:	4690      	mov	r8, r2
  41209e:	e000      	b.n	4120a2 <_vsnprintf+0x56e>
  4120a0:	4654      	mov	r4, sl
                    if(flags & FLAGS_LEFT) {
  4120a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4120a4:	b19b      	cbz	r3, 4120ce <_vsnprintf+0x59a>
                        while(l++ < width) {
  4120a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4120a8:	4295      	cmp	r5, r2
  4120aa:	d912      	bls.n	4120d2 <_vsnprintf+0x59e>
  4120ac:	4445      	add	r5, r8
  4120ae:	1aad      	subs	r5, r5, r2
                            out(' ', buffer, idx++, maxlen);
  4120b0:	2620      	movs	r6, #32
  4120b2:	4642      	mov	r2, r8
  4120b4:	f102 0b01 	add.w	fp, r2, #1
  4120b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4120ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4120bc:	4630      	mov	r0, r6
  4120be:	47b8      	blx	r7
  4120c0:	465a      	mov	r2, fp
                        while(l++ < width) {
  4120c2:	455d      	cmp	r5, fp
  4120c4:	d1f6      	bne.n	4120b4 <_vsnprintf+0x580>
                    format++;
  4120c6:	3401      	adds	r4, #1
                    const char * p = va_arg(va, char *);
  4120c8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
                    break;
  4120cc:	e540      	b.n	411b50 <_vsnprintf+0x1c>
  4120ce:	46c3      	mov	fp, r8
  4120d0:	e7f9      	b.n	4120c6 <_vsnprintf+0x592>
                        while(l++ < width) {
  4120d2:	46c3      	mov	fp, r8
  4120d4:	e7f7      	b.n	4120c6 <_vsnprintf+0x592>
                out('%', buffer, idx++, maxlen);
  4120d6:	f10b 0501 	add.w	r5, fp, #1
  4120da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4120dc:	465a      	mov	r2, fp
  4120de:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4120e0:	2025      	movs	r0, #37	; 0x25
  4120e2:	47b8      	blx	r7
                format++;
  4120e4:	3401      	adds	r4, #1
                out('%', buffer, idx++, maxlen);
  4120e6:	46ab      	mov	fp, r5
                break;
  4120e8:	e532      	b.n	411b50 <_vsnprintf+0x1c>

            default :
                out(*format, buffer, idx++, maxlen);
  4120ea:	f10b 0501 	add.w	r5, fp, #1
  4120ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4120f0:	465a      	mov	r2, fp
  4120f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4120f4:	47b8      	blx	r7
                format++;
  4120f6:	3401      	adds	r4, #1
                out(*format, buffer, idx++, maxlen);
  4120f8:	46ab      	mov	fp, r5
                break;
  4120fa:	e529      	b.n	411b50 <_vsnprintf+0x1c>
  4120fc:	004119f5 	.word	0x004119f5
  412100:	00411a79 	.word	0x00411a79
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  412104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  412106:	4593      	cmp	fp, r2
  412108:	bf2c      	ite	cs
  41210a:	f102 32ff 	addcs.w	r2, r2, #4294967295
  41210e:	465a      	movcc	r2, fp
  412110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412112:	990b      	ldr	r1, [sp, #44]	; 0x2c
  412114:	2000      	movs	r0, #0
  412116:	47b8      	blx	r7

    // return written chars without terminating \0
    return (int)idx;
}
  412118:	4658      	mov	r0, fp
  41211a:	b013      	add	sp, #76	; 0x4c
  41211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        base =  8U;
  412120:	2308      	movs	r3, #8
  412122:	e65f      	b.n	411de4 <_vsnprintf+0x2b0>
                        base =  2U;
  412124:	2302      	movs	r3, #2
  412126:	e65d      	b.n	411de4 <_vsnprintf+0x2b0>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  412128:	f109 0304 	add.w	r3, r9, #4
  41212c:	4698      	mov	r8, r3
  41212e:	f10b 0601 	add.w	r6, fp, #1
  412132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412134:	465a      	mov	r2, fp
  412136:	990b      	ldr	r1, [sp, #44]	; 0x2c
  412138:	f899 0000 	ldrb.w	r0, [r9]
  41213c:	47b8      	blx	r7
                        while(l++ < width) {
  41213e:	2d01      	cmp	r5, #1
  412140:	f67f af55 	bls.w	411fee <_vsnprintf+0x4ba>
  412144:	eb05 0a0b 	add.w	sl, r5, fp
                            out(' ', buffer, idx++, maxlen);
  412148:	f04f 0920 	mov.w	r9, #32
  41214c:	4632      	mov	r2, r6
  41214e:	1c56      	adds	r6, r2, #1
  412150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412152:	990b      	ldr	r1, [sp, #44]	; 0x2c
  412154:	4648      	mov	r0, r9
  412156:	47b8      	blx	r7
  412158:	4632      	mov	r2, r6
                        while(l++ < width) {
  41215a:	45b2      	cmp	sl, r6
  41215c:	d1f7      	bne.n	41214e <_vsnprintf+0x61a>
  41215e:	44ab      	add	fp, r5
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  412160:	46c1      	mov	r9, r8
  412162:	e742      	b.n	411fea <_vsnprintf+0x4b6>
                        while(l++ < width) {
  412164:	465d      	mov	r5, fp
  412166:	e735      	b.n	411fd4 <_vsnprintf+0x4a0>
    for(s = str; *s && maxsize--; ++s);
  412168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41216a:	e75c      	b.n	412026 <_vsnprintf+0x4f2>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  41216c:	b130      	cbz	r0, 41217c <_vsnprintf+0x648>
  41216e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  412172:	465a      	mov	r2, fp
  412174:	4623      	mov	r3, r4
  412176:	4654      	mov	r4, sl
  412178:	469a      	mov	sl, r3
  41217a:	e789      	b.n	412090 <_vsnprintf+0x55c>
  41217c:	46d8      	mov	r8, fp
  41217e:	e792      	b.n	4120a6 <_vsnprintf+0x572>
                        while(l++ < width) {
  412180:	930d      	str	r3, [sp, #52]	; 0x34
  412182:	e776      	b.n	412072 <_vsnprintf+0x53e>

00412184 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
  412184:	b40c      	push	{r2, r3}
  412186:	b510      	push	{r4, lr}
  412188:	b084      	sub	sp, #16
  41218a:	aa06      	add	r2, sp, #24
  41218c:	f852 3b04 	ldr.w	r3, [r2], #4
    va_list va;
    va_start(va, format);
  412190:	9203      	str	r2, [sp, #12]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
  412192:	9200      	str	r2, [sp, #0]
  412194:	460a      	mov	r2, r1
  412196:	4601      	mov	r1, r0
  412198:	4803      	ldr	r0, [pc, #12]	; (4121a8 <lv_snprintf+0x24>)
  41219a:	4c04      	ldr	r4, [pc, #16]	; (4121ac <lv_snprintf+0x28>)
  41219c:	47a0      	blx	r4
    va_end(va);
    return ret;
}
  41219e:	b004      	add	sp, #16
  4121a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4121a4:	b002      	add	sp, #8
  4121a6:	4770      	bx	lr
  4121a8:	00411839 	.word	0x00411839
  4121ac:	00411b35 	.word	0x00411b35

004121b0 <lv_vsnprintf>:

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
  4121b0:	b510      	push	{r4, lr}
  4121b2:	b082      	sub	sp, #8
    return _vsnprintf(_out_buffer, buffer, count, format, va);
  4121b4:	9300      	str	r3, [sp, #0]
  4121b6:	4613      	mov	r3, r2
  4121b8:	460a      	mov	r2, r1
  4121ba:	4601      	mov	r1, r0
  4121bc:	4802      	ldr	r0, [pc, #8]	; (4121c8 <lv_vsnprintf+0x18>)
  4121be:	4c03      	ldr	r4, [pc, #12]	; (4121cc <lv_vsnprintf+0x1c>)
  4121c0:	47a0      	blx	r4
}
  4121c2:	b002      	add	sp, #8
  4121c4:	bd10      	pop	{r4, pc}
  4121c6:	bf00      	nop
  4121c8:	00411839 	.word	0x00411839
  4121cc:	00411b35 	.word	0x00411b35

004121d0 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
  4121d0:	b508      	push	{r3, lr}
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
  4121d2:	2108      	movs	r1, #8
  4121d4:	4b01      	ldr	r3, [pc, #4]	; (4121dc <lv_style_init+0xc>)
  4121d6:	4798      	blx	r3
  4121d8:	bd08      	pop	{r3, pc}
  4121da:	bf00      	nop
  4121dc:	004116ed 	.word	0x004116ed

004121e0 <lv_style_reset>:
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}

void lv_style_reset(lv_style_t * style)
{
  4121e0:	b510      	push	{r4, lr}
  4121e2:	b082      	sub	sp, #8
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
  4121e4:	f990 3005 	ldrsb.w	r3, [r0, #5]
  4121e8:	2b00      	cmp	r3, #0
  4121ea:	db0c      	blt.n	412206 <lv_style_reset+0x26>
  4121ec:	4604      	mov	r4, r0
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
  4121ee:	79c3      	ldrb	r3, [r0, #7]
  4121f0:	2b01      	cmp	r3, #1
  4121f2:	d902      	bls.n	4121fa <lv_style_reset+0x1a>
  4121f4:	6800      	ldr	r0, [r0, #0]
  4121f6:	4b08      	ldr	r3, [pc, #32]	; (412218 <lv_style_reset+0x38>)
  4121f8:	4798      	blx	r3
    lv_memset_00(style, sizeof(lv_style_t));
  4121fa:	2108      	movs	r1, #8
  4121fc:	4620      	mov	r0, r4
  4121fe:	4b07      	ldr	r3, [pc, #28]	; (41221c <lv_style_reset+0x3c>)
  412200:	4798      	blx	r3
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif

}
  412202:	b002      	add	sp, #8
  412204:	bd10      	pop	{r4, pc}
        LV_LOG_ERROR("Cannot reset const style");
  412206:	4b06      	ldr	r3, [pc, #24]	; (412220 <lv_style_reset+0x40>)
  412208:	9300      	str	r3, [sp, #0]
  41220a:	4b06      	ldr	r3, [pc, #24]	; (412224 <lv_style_reset+0x44>)
  41220c:	223b      	movs	r2, #59	; 0x3b
  41220e:	4906      	ldr	r1, [pc, #24]	; (412228 <lv_style_reset+0x48>)
  412210:	2003      	movs	r0, #3
  412212:	4c06      	ldr	r4, [pc, #24]	; (41222c <lv_style_reset+0x4c>)
  412214:	47a0      	blx	r4
        return;
  412216:	e7f4      	b.n	412202 <lv_style_reset+0x22>
  412218:	004110e1 	.word	0x004110e1
  41221c:	004116ed 	.word	0x004116ed
  412220:	0042087c 	.word	0x0042087c
  412224:	004207ec 	.word	0x004207ec
  412228:	0042084c 	.word	0x0042084c
  41222c:	00410edd 	.word	0x00410edd

00412230 <lv_style_register_prop>:

lv_style_prop_t lv_style_register_prop(void)
{
    static uint16_t act_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
    act_id++;
  412230:	4b02      	ldr	r3, [pc, #8]	; (41223c <lv_style_register_prop+0xc>)
  412232:	8818      	ldrh	r0, [r3, #0]
  412234:	3001      	adds	r0, #1
  412236:	b280      	uxth	r0, r0
  412238:	8018      	strh	r0, [r3, #0]
    return act_id;
}
  41223a:	4770      	bx	lr
  41223c:	20400010 	.word	0x20400010

00412240 <lv_style_remove_prop>:

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
  412240:	b5f0      	push	{r4, r5, r6, r7, lr}
  412242:	b083      	sub	sp, #12
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
  412244:	f990 3005 	ldrsb.w	r3, [r0, #5]
  412248:	2b00      	cmp	r3, #0
  41224a:	db2d      	blt.n	4122a8 <lv_style_remove_prop+0x68>
  41224c:	4605      	mov	r5, r0
  41224e:	460c      	mov	r4, r1
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
    }

    if(style->prop_cnt == 0)  return false;
  412250:	79c0      	ldrb	r0, [r0, #7]
  412252:	2800      	cmp	r0, #0
  412254:	d062      	beq.n	41231c <lv_style_remove_prop+0xdc>

    if(style->prop_cnt == 1) {
  412256:	2801      	cmp	r0, #1
  412258:	d030      	beq.n	4122bc <lv_style_remove_prop+0x7c>
            return true;
        }
        return false;
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
  41225a:	682f      	ldr	r7, [r5, #0]
  41225c:	4686      	mov	lr, r0
  41225e:	eb07 0680 	add.w	r6, r7, r0, lsl #2
    uint16_t * old_props = (uint16_t *)tmp;
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
  412262:	2800      	cmp	r0, #0
  412264:	d05d      	beq.n	412322 <lv_style_remove_prop+0xe2>
        if(old_props[i] == prop) {
  412266:	f837 3020 	ldrh.w	r3, [r7, r0, lsl #2]
  41226a:	428b      	cmp	r3, r1
  41226c:	d05d      	beq.n	41232a <lv_style_remove_prop+0xea>
  41226e:	4632      	mov	r2, r6
  412270:	2300      	movs	r3, #0
    for(i = 0; i < style->prop_cnt; i++) {
  412272:	3301      	adds	r3, #1
  412274:	459e      	cmp	lr, r3
  412276:	d04f      	beq.n	412318 <lv_style_remove_prop+0xd8>
        if(old_props[i] == prop) {
  412278:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  41227c:	42a1      	cmp	r1, r4
  41227e:	d1f8      	bne.n	412272 <lv_style_remove_prop+0x32>
            lv_style_value_t * old_values = (lv_style_value_t *)style->v_p.values_and_props;

            if(style->prop_cnt == 2) {
  412280:	2802      	cmp	r0, #2
  412282:	d029      	beq.n	4122d8 <lv_style_remove_prop+0x98>
                style->prop_cnt = 1;
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
            }
            else {
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
  412284:	3801      	subs	r0, #1
  412286:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
  41228a:	0040      	lsls	r0, r0, #1
  41228c:	4b2f      	ldr	r3, [pc, #188]	; (41234c <lv_style_remove_prop+0x10c>)
  41228e:	4798      	blx	r3
                if(new_values_and_props == NULL) return false;
  412290:	4686      	mov	lr, r0
  412292:	2800      	cmp	r0, #0
  412294:	d047      	beq.n	412326 <lv_style_remove_prop+0xe6>
                style->v_p.values_and_props = new_values_and_props;
  412296:	6028      	str	r0, [r5, #0]
                style->prop_cnt--;
  412298:	79e8      	ldrb	r0, [r5, #7]
  41229a:	3801      	subs	r0, #1
  41229c:	b2c0      	uxtb	r0, r0
  41229e:	71e8      	strb	r0, [r5, #7]

                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
  4122a0:	0080      	lsls	r0, r0, #2
                uint16_t * new_props = (uint16_t *)tmp;
                lv_style_value_t * new_values = (lv_style_value_t *)new_values_and_props;

                uint32_t j;
                for(i = j = 0; j <= style->prop_cnt;
  4122a2:	2300      	movs	r3, #0
  4122a4:	461a      	mov	r2, r3
  4122a6:	e028      	b.n	4122fa <lv_style_remove_prop+0xba>
        LV_LOG_ERROR("Cannot remove prop from const style");
  4122a8:	4b29      	ldr	r3, [pc, #164]	; (412350 <lv_style_remove_prop+0x110>)
  4122aa:	9300      	str	r3, [sp, #0]
  4122ac:	4b29      	ldr	r3, [pc, #164]	; (412354 <lv_style_remove_prop+0x114>)
  4122ae:	2253      	movs	r2, #83	; 0x53
  4122b0:	4929      	ldr	r1, [pc, #164]	; (412358 <lv_style_remove_prop+0x118>)
  4122b2:	2003      	movs	r0, #3
  4122b4:	4c29      	ldr	r4, [pc, #164]	; (41235c <lv_style_remove_prop+0x11c>)
  4122b6:	47a0      	blx	r4
        return false;
  4122b8:	2000      	movs	r0, #0
  4122ba:	e030      	b.n	41231e <lv_style_remove_prop+0xde>
        if(style->prop1 == prop) {
  4122bc:	88ab      	ldrh	r3, [r5, #4]
  4122be:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4122c2:	428b      	cmp	r3, r1
  4122c4:	d001      	beq.n	4122ca <lv_style_remove_prop+0x8a>
        return false;
  4122c6:	2000      	movs	r0, #0
  4122c8:	e029      	b.n	41231e <lv_style_remove_prop+0xde>
            style->prop1 = LV_STYLE_PROP_INV;
  4122ca:	88ab      	ldrh	r3, [r5, #4]
  4122cc:	f36f 030e 	bfc	r3, #0, #15
  4122d0:	80ab      	strh	r3, [r5, #4]
            style->prop_cnt = 0;
  4122d2:	2300      	movs	r3, #0
  4122d4:	71eb      	strb	r3, [r5, #7]
            return true;
  4122d6:	e022      	b.n	41231e <lv_style_remove_prop+0xde>
                style->prop_cnt = 1;
  4122d8:	2201      	movs	r2, #1
  4122da:	71ea      	strb	r2, [r5, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
  4122dc:	b34b      	cbz	r3, 412332 <lv_style_remove_prop+0xf2>
  4122de:	88ab      	ldrh	r3, [r5, #4]
  4122e0:	f837 2020 	ldrh.w	r2, [r7, r0, lsl #2]
  4122e4:	f362 030e 	bfi	r3, r2, #0, #15
  4122e8:	80ab      	strh	r3, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
  4122ea:	683b      	ldr	r3, [r7, #0]
  4122ec:	602b      	str	r3, [r5, #0]
  4122ee:	e027      	b.n	412340 <lv_style_remove_prop+0x100>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
  4122f0:	3301      	adds	r3, #1
  4122f2:	3602      	adds	r6, #2
                for(i = j = 0; j <= style->prop_cnt;
  4122f4:	79e9      	ldrb	r1, [r5, #7]
  4122f6:	4299      	cmp	r1, r3
  4122f8:	d322      	bcc.n	412340 <lv_style_remove_prop+0x100>
                    if(old_props[j] != prop) {
  4122fa:	8831      	ldrh	r1, [r6, #0]
  4122fc:	42a1      	cmp	r1, r4
  4122fe:	d0f7      	beq.n	4122f0 <lv_style_remove_prop+0xb0>
                        new_values[i] = old_values[j];
  412300:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
  412304:	f84e 1022 	str.w	r1, [lr, r2, lsl #2]
                        new_props[i++] = old_props[j];
  412308:	f8b6 c000 	ldrh.w	ip, [r6]
  41230c:	eb0e 0142 	add.w	r1, lr, r2, lsl #1
  412310:	f821 c000 	strh.w	ip, [r1, r0]
  412314:	3201      	adds	r2, #1
  412316:	e7eb      	b.n	4122f0 <lv_style_remove_prop+0xb0>
            lv_mem_free(old_values);
            return true;
        }
    }

    return false;
  412318:	2000      	movs	r0, #0
  41231a:	e000      	b.n	41231e <lv_style_remove_prop+0xde>
    if(style->prop_cnt == 0)  return false;
  41231c:	2000      	movs	r0, #0
}
  41231e:	b003      	add	sp, #12
  412320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
  412322:	2000      	movs	r0, #0
  412324:	e7fb      	b.n	41231e <lv_style_remove_prop+0xde>
                if(new_values_and_props == NULL) return false;
  412326:	2000      	movs	r0, #0
  412328:	e7f9      	b.n	41231e <lv_style_remove_prop+0xde>
            if(style->prop_cnt == 2) {
  41232a:	2802      	cmp	r0, #2
  41232c:	d1aa      	bne.n	412284 <lv_style_remove_prop+0x44>
                style->prop_cnt = 1;
  41232e:	2301      	movs	r3, #1
  412330:	71eb      	strb	r3, [r5, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
  412332:	88ab      	ldrh	r3, [r5, #4]
  412334:	8872      	ldrh	r2, [r6, #2]
  412336:	f362 030e 	bfi	r3, r2, #0, #15
  41233a:	80ab      	strh	r3, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
  41233c:	687b      	ldr	r3, [r7, #4]
  41233e:	602b      	str	r3, [r5, #0]
            lv_mem_free(old_values);
  412340:	4638      	mov	r0, r7
  412342:	4b07      	ldr	r3, [pc, #28]	; (412360 <lv_style_remove_prop+0x120>)
  412344:	4798      	blx	r3
            return true;
  412346:	2001      	movs	r0, #1
  412348:	e7e9      	b.n	41231e <lv_style_remove_prop+0xde>
  41234a:	bf00      	nop
  41234c:	004114b5 	.word	0x004114b5
  412350:	00420828 	.word	0x00420828
  412354:	004207fc 	.word	0x004207fc
  412358:	0042084c 	.word	0x0042084c
  41235c:	00410edd 	.word	0x00410edd
  412360:	004110e1 	.word	0x004110e1

00412364 <lv_style_get_prop>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
  412364:	f990 3005 	ldrsb.w	r3, [r0, #5]
  412368:	2b00      	cmp	r3, #0
  41236a:	db1d      	blt.n	4123a8 <lv_style_get_prop+0x44>
            }
        }
        return LV_RES_INV;
    }

    if(style->prop_cnt == 0) return LV_RES_INV;
  41236c:	79c3      	ldrb	r3, [r0, #7]
  41236e:	2b00      	cmp	r3, #0
  412370:	d03b      	beq.n	4123ea <lv_style_get_prop+0x86>

    if(style->prop_cnt > 1) {
  412372:	2b01      	cmp	r3, #1
  412374:	d92c      	bls.n	4123d0 <lv_style_get_prop+0x6c>
    uint8_t group = _lv_style_get_prop_group(prop);
    style->has_group |= 1 << group;
}

lv_res_t lv_style_get_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
  412376:	b470      	push	{r4, r5, r6}
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
  412378:	6806      	ldr	r6, [r0, #0]
  41237a:	461d      	mov	r5, r3
  41237c:	0098      	lsls	r0, r3, #2
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
  41237e:	2b00      	cmp	r3, #0
  412380:	d035      	beq.n	4123ee <lv_style_get_prop+0x8a>
            if(props[i] == prop) {
  412382:	4430      	add	r0, r6
  412384:	f836 3023 	ldrh.w	r3, [r6, r3, lsl #2]
  412388:	428b      	cmp	r3, r1
  41238a:	d01d      	beq.n	4123c8 <lv_style_get_prop+0x64>
  41238c:	2300      	movs	r3, #0
        for(i = 0; i < style->prop_cnt; i++) {
  41238e:	3301      	adds	r3, #1
  412390:	429d      	cmp	r5, r3
  412392:	d01b      	beq.n	4123cc <lv_style_get_prop+0x68>
            if(props[i] == prop) {
  412394:	f830 4f02 	ldrh.w	r4, [r0, #2]!
  412398:	428c      	cmp	r4, r1
  41239a:	d1f8      	bne.n	41238e <lv_style_get_prop+0x2a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                *value = values[i];
  41239c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4123a0:	6013      	str	r3, [r2, #0]
                return LV_RES_OK;
  4123a2:	2001      	movs	r0, #1
    return lv_style_get_prop_inlined(style, prop, value);
}
  4123a4:	bc70      	pop	{r4, r5, r6}
  4123a6:	4770      	bx	lr
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
  4123a8:	6800      	ldr	r0, [r0, #0]
  4123aa:	8803      	ldrh	r3, [r0, #0]
  4123ac:	b1db      	cbz	r3, 4123e6 <lv_style_get_prop+0x82>
            if(const_prop->prop == prop) {
  4123ae:	4299      	cmp	r1, r3
  4123b0:	d004      	beq.n	4123bc <lv_style_get_prop+0x58>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
  4123b2:	f830 3f08 	ldrh.w	r3, [r0, #8]!
  4123b6:	b12b      	cbz	r3, 4123c4 <lv_style_get_prop+0x60>
            if(const_prop->prop == prop) {
  4123b8:	4299      	cmp	r1, r3
  4123ba:	d1fa      	bne.n	4123b2 <lv_style_get_prop+0x4e>
                *value = const_prop->value;
  4123bc:	6843      	ldr	r3, [r0, #4]
  4123be:	6013      	str	r3, [r2, #0]
                return LV_RES_OK;
  4123c0:	2001      	movs	r0, #1
  4123c2:	4770      	bx	lr
        return LV_RES_INV;
  4123c4:	2000      	movs	r0, #0
  4123c6:	4770      	bx	lr
        for(i = 0; i < style->prop_cnt; i++) {
  4123c8:	2300      	movs	r3, #0
  4123ca:	e7e7      	b.n	41239c <lv_style_get_prop+0x38>
    }
    else if(style->prop1 == prop) {
        *value = style->v_p.value1;
        return LV_RES_OK;
    }
    return LV_RES_INV;
  4123cc:	2000      	movs	r0, #0
  4123ce:	e7e9      	b.n	4123a4 <lv_style_get_prop+0x40>
    else if(style->prop1 == prop) {
  4123d0:	8883      	ldrh	r3, [r0, #4]
  4123d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4123d6:	428b      	cmp	r3, r1
  4123d8:	d001      	beq.n	4123de <lv_style_get_prop+0x7a>
    return LV_RES_INV;
  4123da:	2000      	movs	r0, #0
  4123dc:	4770      	bx	lr
        *value = style->v_p.value1;
  4123de:	6803      	ldr	r3, [r0, #0]
  4123e0:	6013      	str	r3, [r2, #0]
        return LV_RES_OK;
  4123e2:	2001      	movs	r0, #1
  4123e4:	4770      	bx	lr
        return LV_RES_INV;
  4123e6:	2000      	movs	r0, #0
  4123e8:	4770      	bx	lr
    if(style->prop_cnt == 0) return LV_RES_INV;
  4123ea:	2000      	movs	r0, #0
  4123ec:	4770      	bx	lr
    return LV_RES_INV;
  4123ee:	2000      	movs	r0, #0
  4123f0:	e7d8      	b.n	4123a4 <lv_style_get_prop+0x40>
	...

004123f4 <lv_style_prop_get_default>:
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
  4123f4:	284d      	cmp	r0, #77	; 0x4d
  4123f6:	d00d      	beq.n	412414 <lv_style_prop_get_default+0x20>
  4123f8:	d82a      	bhi.n	412450 <lv_style_prop_get_default+0x5c>
  4123fa:	2831      	cmp	r0, #49	; 0x31
  4123fc:	d04c      	beq.n	412498 <lv_style_prop_get_default+0xa4>
  4123fe:	d818      	bhi.n	412432 <lv_style_prop_get_default+0x3e>
  412400:	2825      	cmp	r0, #37	; 0x25
  412402:	d05a      	beq.n	4124ba <lv_style_prop_get_default+0xc6>
  412404:	d810      	bhi.n	412428 <lv_style_prop_get_default+0x34>
  412406:	2820      	cmp	r0, #32
  412408:	d102      	bne.n	412410 <lv_style_prop_get_default+0x1c>
  41240a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  41240e:	4770      	bx	lr
  412410:	2822      	cmp	r0, #34	; 0x22
  412412:	d150      	bne.n	4124b6 <lv_style_prop_get_default+0xc2>
  412414:	2000      	movs	r0, #0
  412416:	f36f 0002 	bfc	r0, #0, #3
  41241a:	f36f 00c7 	bfc	r0, #3, #5
  41241e:	f36f 200c 	bfc	r0, #8, #5
  412422:	f36f 304f 	bfc	r0, #13, #3
  412426:	4770      	bx	lr
  412428:	2827      	cmp	r0, #39	; 0x27
  41242a:	d035      	beq.n	412498 <lv_style_prop_get_default+0xa4>
  41242c:	2830      	cmp	r0, #48	; 0x30
  41242e:	d0f1      	beq.n	412414 <lv_style_prop_get_default+0x20>
  412430:	e041      	b.n	4124b6 <lv_style_prop_get_default+0xc2>
  412432:	2844      	cmp	r0, #68	; 0x44
  412434:	d0ee      	beq.n	412414 <lv_style_prop_get_default+0x20>
  412436:	d806      	bhi.n	412446 <lv_style_prop_get_default+0x52>
  412438:	2833      	cmp	r0, #51	; 0x33
  41243a:	d101      	bne.n	412440 <lv_style_prop_get_default+0x4c>
            break;
        case LV_STYLE_BG_GRAD_STOP:
            value.num = 255;
            break;
        case LV_STYLE_BORDER_SIDE:
            value.num = LV_BORDER_SIDE_FULL;
  41243c:	200f      	movs	r0, #15
            break;
  41243e:	4770      	bx	lr
    switch(prop) {
  412440:	283b      	cmp	r0, #59	; 0x3b
  412442:	d0e7      	beq.n	412414 <lv_style_prop_get_default+0x20>
  412444:	e037      	b.n	4124b6 <lv_style_prop_get_default+0xc2>
  412446:	2846      	cmp	r0, #70	; 0x46
  412448:	d026      	beq.n	412498 <lv_style_prop_get_default+0xa4>
  41244a:	2847      	cmp	r0, #71	; 0x47
  41244c:	d0e2      	beq.n	412414 <lv_style_prop_get_default+0x20>
  41244e:	e032      	b.n	4124b6 <lv_style_prop_get_default+0xc2>
  412450:	f240 4362 	movw	r3, #1122	; 0x462
  412454:	4298      	cmp	r0, r3
  412456:	d01f      	beq.n	412498 <lv_style_prop_get_default+0xa4>
  412458:	d90f      	bls.n	41247a <lv_style_prop_get_default+0x86>
  41245a:	f241 0303 	movw	r3, #4099	; 0x1003
  41245e:	4298      	cmp	r0, r3
  412460:	d02f      	beq.n	4124c2 <lv_style_prop_get_default+0xce>
  412462:	d91b      	bls.n	41249c <lv_style_prop_get_default+0xa8>
  412464:	f241 4359 	movw	r3, #5209	; 0x1459
  412468:	4298      	cmp	r0, r3
  41246a:	d028      	beq.n	4124be <lv_style_prop_get_default+0xca>
  41246c:	f643 030e 	movw	r3, #14350	; 0x380e
  412470:	4298      	cmp	r0, r3
  412472:	d11c      	bne.n	4124ae <lv_style_prop_get_default+0xba>
            value.num = LV_IMG_ZOOM_NONE;
  412474:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
  412478:	4770      	bx	lr
    switch(prop) {
  41247a:	2853      	cmp	r0, #83	; 0x53
  41247c:	d00c      	beq.n	412498 <lv_style_prop_get_default+0xa4>
  41247e:	d804      	bhi.n	41248a <lv_style_prop_get_default+0x96>
  412480:	284e      	cmp	r0, #78	; 0x4e
  412482:	d009      	beq.n	412498 <lv_style_prop_get_default+0xa4>
  412484:	2852      	cmp	r0, #82	; 0x52
  412486:	d0c5      	beq.n	412414 <lv_style_prop_get_default+0x20>
  412488:	e015      	b.n	4124b6 <lv_style_prop_get_default+0xc2>
  41248a:	f240 4357 	movw	r3, #1111	; 0x457
  41248e:	4298      	cmp	r0, r3
  412490:	d0c0      	beq.n	412414 <lv_style_prop_get_default+0x20>
  412492:	f5b0 6f8b 	cmp.w	r0, #1112	; 0x458
  412496:	d10e      	bne.n	4124b6 <lv_style_prop_get_default+0xc2>
            value.num = LV_OPA_COVER;
  412498:	20ff      	movs	r0, #255	; 0xff
            break;
  41249a:	4770      	bx	lr
    switch(prop) {
  41249c:	f640 033c 	movw	r3, #2108	; 0x83c
  4124a0:	4298      	cmp	r0, r3
  4124a2:	d0f9      	beq.n	412498 <lv_style_prop_get_default+0xa4>
  4124a4:	f640 0345 	movw	r3, #2117	; 0x845
  4124a8:	4298      	cmp	r0, r3
  4124aa:	d104      	bne.n	4124b6 <lv_style_prop_get_default+0xc2>
  4124ac:	e7f4      	b.n	412498 <lv_style_prop_get_default+0xa4>
  4124ae:	f241 0306 	movw	r3, #4102	; 0x1006
  4124b2:	4298      	cmp	r0, r3
  4124b4:	d005      	beq.n	4124c2 <lv_style_prop_get_default+0xce>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
            break;
        default:
            value.ptr = NULL;
  4124b6:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
  4124b8:	4770      	bx	lr
            value.num = 255;
  4124ba:	20ff      	movs	r0, #255	; 0xff
            break;
  4124bc:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
  4124be:	4802      	ldr	r0, [pc, #8]	; (4124c8 <lv_style_prop_get_default+0xd4>)
            break;
  4124c0:	4770      	bx	lr
            value.num = LV_COORD_MAX;
  4124c2:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
            break;
  4124c6:	4770      	bx	lr
  4124c8:	00420284 	.word	0x00420284

004124cc <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    return style->prop_cnt == 0 ? true : false;
  4124cc:	79c0      	ldrb	r0, [r0, #7]
}
  4124ce:	fab0 f080 	clz	r0, r0
  4124d2:	0940      	lsrs	r0, r0, #5
  4124d4:	4770      	bx	lr

004124d6 <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
    uint16_t group = (prop & 0x1FF) >> 4;
  4124d6:	f3c0 1004 	ubfx	r0, r0, #4, #5
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
    return (uint8_t)group;
}
  4124da:	2807      	cmp	r0, #7
  4124dc:	bf28      	it	cs
  4124de:	2007      	movcs	r0, #7
  4124e0:	4770      	bx	lr
	...

004124e4 <lv_style_set_prop>:
{
  4124e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4124e6:	b083      	sub	sp, #12
    if(style->is_const) {
  4124e8:	f990 3005 	ldrsb.w	r3, [r0, #5]
  4124ec:	2b00      	cmp	r3, #0
  4124ee:	db25      	blt.n	41253c <lv_style_set_prop+0x58>
  4124f0:	4605      	mov	r5, r0
  4124f2:	460c      	mov	r4, r1
  4124f4:	4616      	mov	r6, r2
    if(style->prop_cnt > 1) {
  4124f6:	f890 e007 	ldrb.w	lr, [r0, #7]
  4124fa:	f1be 0f01 	cmp.w	lr, #1
  4124fe:	d959      	bls.n	4125b4 <lv_style_set_prop+0xd0>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
  412500:	6800      	ldr	r0, [r0, #0]
  412502:	ea4f 028e 	mov.w	r2, lr, lsl #2
        for(i = style->prop_cnt - 1; i >= 0; i--) {
  412506:	f1be 0301 	subs.w	r3, lr, #1
  41250a:	d420      	bmi.n	41254e <lv_style_set_prop+0x6a>
            if(props[i] == prop) {
  41250c:	461f      	mov	r7, r3
  41250e:	eb00 0143 	add.w	r1, r0, r3, lsl #1
  412512:	f831 102e 	ldrh.w	r1, [r1, lr, lsl #2]
  412516:	42a1      	cmp	r1, r4
  412518:	d00d      	beq.n	412536 <lv_style_set_prop+0x52>
  41251a:	f1ae 0102 	sub.w	r1, lr, #2
  41251e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  412522:	4402      	add	r2, r0
        for(i = style->prop_cnt - 1; i >= 0; i--) {
  412524:	3b01      	subs	r3, #1
  412526:	f1b3 3fff 	cmp.w	r3, #4294967295
  41252a:	d010      	beq.n	41254e <lv_style_set_prop+0x6a>
            if(props[i] == prop) {
  41252c:	461f      	mov	r7, r3
  41252e:	f832 1902 	ldrh.w	r1, [r2], #-2
  412532:	42a1      	cmp	r1, r4
  412534:	d1f6      	bne.n	412524 <lv_style_set_prop+0x40>
                values[i] = value;
  412536:	f840 6027 	str.w	r6, [r0, r7, lsl #2]
                return;
  41253a:	e039      	b.n	4125b0 <lv_style_set_prop+0xcc>
        LV_LOG_ERROR("Cannot set property of constant style");
  41253c:	4b32      	ldr	r3, [pc, #200]	; (412608 <lv_style_set_prop+0x124>)
  41253e:	9300      	str	r3, [sp, #0]
  412540:	4b32      	ldr	r3, [pc, #200]	; (41260c <lv_style_set_prop+0x128>)
  412542:	2290      	movs	r2, #144	; 0x90
  412544:	4932      	ldr	r1, [pc, #200]	; (412610 <lv_style_set_prop+0x12c>)
  412546:	2003      	movs	r0, #3
  412548:	4c32      	ldr	r4, [pc, #200]	; (412614 <lv_style_set_prop+0x130>)
  41254a:	47a0      	blx	r4
        return;
  41254c:	e030      	b.n	4125b0 <lv_style_set_prop+0xcc>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
  41254e:	f10e 0e01 	add.w	lr, lr, #1
  412552:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
  412556:	ea4f 014e 	mov.w	r1, lr, lsl #1
  41255a:	4b2f      	ldr	r3, [pc, #188]	; (412618 <lv_style_set_prop+0x134>)
  41255c:	4798      	blx	r3
        if(values_and_props == NULL) return;
  41255e:	4607      	mov	r7, r0
  412560:	b330      	cbz	r0, 4125b0 <lv_style_set_prop+0xcc>
        style->v_p.values_and_props = values_and_props;
  412562:	6028      	str	r0, [r5, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
  412564:	79eb      	ldrb	r3, [r5, #7]
  412566:	eb00 0183 	add.w	r1, r0, r3, lsl #2
        for(i = style->prop_cnt - 1; i >= 0; i--) {
  41256a:	2b01      	cmp	r3, #1
  41256c:	d406      	bmi.n	41257c <lv_style_set_prop+0x98>
  41256e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
  412572:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
  412576:	809a      	strh	r2, [r3, #4]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
  412578:	4299      	cmp	r1, r3
  41257a:	d1fa      	bne.n	412572 <lv_style_set_prop+0x8e>
        style->prop_cnt++;
  41257c:	79eb      	ldrb	r3, [r5, #7]
  41257e:	3301      	adds	r3, #1
  412580:	b2db      	uxtb	r3, r3
  412582:	71eb      	strb	r3, [r5, #7]
        props[style->prop_cnt - 1] = prop;
  412584:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  412588:	441a      	add	r2, r3
  41258a:	009b      	lsls	r3, r3, #2
  41258c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  412590:	52fc      	strh	r4, [r7, r3]
        values[style->prop_cnt - 1] = value;
  412592:	79ea      	ldrb	r2, [r5, #7]
  412594:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  412598:	4413      	add	r3, r2
  41259a:	f847 6023 	str.w	r6, [r7, r3, lsl #2]
    uint8_t group = _lv_style_get_prop_group(prop);
  41259e:	4620      	mov	r0, r4
  4125a0:	4b1e      	ldr	r3, [pc, #120]	; (41261c <lv_style_set_prop+0x138>)
  4125a2:	4798      	blx	r3
    style->has_group |= 1 << group;
  4125a4:	2301      	movs	r3, #1
  4125a6:	fa03 f000 	lsl.w	r0, r3, r0
  4125aa:	79ab      	ldrb	r3, [r5, #6]
  4125ac:	4318      	orrs	r0, r3
  4125ae:	71a8      	strb	r0, [r5, #6]
}
  4125b0:	b003      	add	sp, #12
  4125b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(style->prop_cnt == 1) {
  4125b4:	f1be 0f01 	cmp.w	lr, #1
  4125b8:	d007      	beq.n	4125ca <lv_style_set_prop+0xe6>
        style->prop_cnt = 1;
  4125ba:	2301      	movs	r3, #1
  4125bc:	71c3      	strb	r3, [r0, #7]
        style->prop1 = prop;
  4125be:	8883      	ldrh	r3, [r0, #4]
  4125c0:	f361 030e 	bfi	r3, r1, #0, #15
  4125c4:	8083      	strh	r3, [r0, #4]
        style->v_p.value1 = value;
  4125c6:	602a      	str	r2, [r5, #0]
  4125c8:	e7e9      	b.n	41259e <lv_style_set_prop+0xba>
        if(style->prop1 == prop) {
  4125ca:	8883      	ldrh	r3, [r0, #4]
  4125cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4125d0:	428b      	cmp	r3, r1
  4125d2:	d016      	beq.n	412602 <lv_style_set_prop+0x11e>
        uint8_t * values_and_props = lv_mem_alloc(size);
  4125d4:	200c      	movs	r0, #12
  4125d6:	4b12      	ldr	r3, [pc, #72]	; (412620 <lv_style_set_prop+0x13c>)
  4125d8:	4798      	blx	r3
        if(values_and_props == NULL) return;
  4125da:	4602      	mov	r2, r0
  4125dc:	2800      	cmp	r0, #0
  4125de:	d0e7      	beq.n	4125b0 <lv_style_set_prop+0xcc>
        lv_style_value_t value_tmp = style->v_p.value1;
  4125e0:	6828      	ldr	r0, [r5, #0]
        style->v_p.values_and_props = values_and_props;
  4125e2:	602a      	str	r2, [r5, #0]
        style->prop_cnt++;
  4125e4:	79eb      	ldrb	r3, [r5, #7]
  4125e6:	3301      	adds	r3, #1
  4125e8:	b2db      	uxtb	r3, r3
  4125ea:	71eb      	strb	r3, [r5, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
  4125ec:	eb02 0783 	add.w	r7, r2, r3, lsl #2
        props[0] = style->prop1;
  4125f0:	88a9      	ldrh	r1, [r5, #4]
  4125f2:	f3c1 010e 	ubfx	r1, r1, #0, #15
  4125f6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
        props[1] = prop;
  4125fa:	807c      	strh	r4, [r7, #2]
        values[0] = value_tmp;
  4125fc:	6010      	str	r0, [r2, #0]
        values[1] = value;
  4125fe:	6056      	str	r6, [r2, #4]
  412600:	e7cd      	b.n	41259e <lv_style_set_prop+0xba>
            style->v_p.value1 = value;
  412602:	602a      	str	r2, [r5, #0]
            return;
  412604:	e7d4      	b.n	4125b0 <lv_style_set_prop+0xcc>
  412606:	bf00      	nop
  412608:	00420898 	.word	0x00420898
  41260c:	00420814 	.word	0x00420814
  412610:	0042084c 	.word	0x0042084c
  412614:	00410edd 	.word	0x00410edd
  412618:	0041153d 	.word	0x0041153d
  41261c:	004124d7 	.word	0x004124d7
  412620:	004114b5 	.word	0x004114b5

00412624 <lv_style_set_bg_color>:
    };
    lv_style_set_prop(style, LV_STYLE_BASE_DIR, v);
}

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
  412624:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
  412626:	b28a      	uxth	r2, r1
  412628:	2120      	movs	r1, #32
  41262a:	4b01      	ldr	r3, [pc, #4]	; (412630 <lv_style_set_bg_color+0xc>)
  41262c:	4798      	blx	r3
  41262e:	bd08      	pop	{r3, pc}
  412630:	004124e5 	.word	0x004124e5

00412634 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
  412634:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
  412636:	2118      	movs	r1, #24
  412638:	4803      	ldr	r0, [pc, #12]	; (412648 <_lv_timer_core_init+0x14>)
  41263a:	4b04      	ldr	r3, [pc, #16]	; (41264c <_lv_timer_core_init+0x18>)
  41263c:	4798      	blx	r3
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
  41263e:	2201      	movs	r2, #1
  412640:	4b03      	ldr	r3, [pc, #12]	; (412650 <_lv_timer_core_init+0x1c>)
  412642:	701a      	strb	r2, [r3, #0]
  412644:	bd08      	pop	{r3, pc}
  412646:	bf00      	nop
  412648:	20439e6c 	.word	0x20439e6c
  41264c:	00410d8f 	.word	0x00410d8f
  412650:	20408b68 	.word	0x20408b68

00412654 <lv_timer_create>:
{
  412654:	b5f0      	push	{r4, r5, r6, r7, lr}
  412656:	b085      	sub	sp, #20
  412658:	4606      	mov	r6, r0
  41265a:	460f      	mov	r7, r1
  41265c:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
  41265e:	4812      	ldr	r0, [pc, #72]	; (4126a8 <lv_timer_create+0x54>)
  412660:	4b12      	ldr	r3, [pc, #72]	; (4126ac <lv_timer_create+0x58>)
  412662:	4798      	blx	r3
    LV_ASSERT_MALLOC(new_timer);
  412664:	b198      	cbz	r0, 41268e <lv_timer_create+0x3a>
  412666:	4604      	mov	r4, r0
    new_timer->period = period;
  412668:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
  41266a:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
  41266c:	f04f 33ff 	mov.w	r3, #4294967295
  412670:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
  412672:	7d03      	ldrb	r3, [r0, #20]
  412674:	f36f 0300 	bfc	r3, #0, #1
  412678:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
  41267a:	4b0d      	ldr	r3, [pc, #52]	; (4126b0 <lv_timer_create+0x5c>)
  41267c:	4798      	blx	r3
  41267e:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
  412680:	60e5      	str	r5, [r4, #12]
    timer_created = true;
  412682:	2201      	movs	r2, #1
  412684:	4b0b      	ldr	r3, [pc, #44]	; (4126b4 <lv_timer_create+0x60>)
  412686:	701a      	strb	r2, [r3, #0]
}
  412688:	4620      	mov	r0, r4
  41268a:	b005      	add	sp, #20
  41268c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
  41268e:	4b0a      	ldr	r3, [pc, #40]	; (4126b8 <lv_timer_create+0x64>)
  412690:	9302      	str	r3, [sp, #8]
  412692:	4b0a      	ldr	r3, [pc, #40]	; (4126bc <lv_timer_create+0x68>)
  412694:	9301      	str	r3, [sp, #4]
  412696:	4b0a      	ldr	r3, [pc, #40]	; (4126c0 <lv_timer_create+0x6c>)
  412698:	9300      	str	r3, [sp, #0]
  41269a:	4b0a      	ldr	r3, [pc, #40]	; (4126c4 <lv_timer_create+0x70>)
  41269c:	22ab      	movs	r2, #171	; 0xab
  41269e:	490a      	ldr	r1, [pc, #40]	; (4126c8 <lv_timer_create+0x74>)
  4126a0:	2003      	movs	r0, #3
  4126a2:	4c0a      	ldr	r4, [pc, #40]	; (4126cc <lv_timer_create+0x78>)
  4126a4:	47a0      	blx	r4
  4126a6:	e7fe      	b.n	4126a6 <lv_timer_create+0x52>
  4126a8:	20439e6c 	.word	0x20439e6c
  4126ac:	00410da1 	.word	0x00410da1
  4126b0:	00410239 	.word	0x00410239
  4126b4:	20408b70 	.word	0x20408b70
  4126b8:	0041c064 	.word	0x0041c064
  4126bc:	00420914 	.word	0x00420914
  4126c0:	0041c098 	.word	0x0041c098
  4126c4:	004208d4 	.word	0x004208d4
  4126c8:	004208e4 	.word	0x004208e4
  4126cc:	00410edd 	.word	0x00410edd

004126d0 <lv_timer_del>:
{
  4126d0:	b510      	push	{r4, lr}
  4126d2:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
  4126d4:	4601      	mov	r1, r0
  4126d6:	4805      	ldr	r0, [pc, #20]	; (4126ec <lv_timer_del+0x1c>)
  4126d8:	4b05      	ldr	r3, [pc, #20]	; (4126f0 <lv_timer_del+0x20>)
  4126da:	4798      	blx	r3
    timer_deleted = true;
  4126dc:	2201      	movs	r2, #1
  4126de:	4b05      	ldr	r3, [pc, #20]	; (4126f4 <lv_timer_del+0x24>)
  4126e0:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
  4126e2:	4620      	mov	r0, r4
  4126e4:	4b04      	ldr	r3, [pc, #16]	; (4126f8 <lv_timer_del+0x28>)
  4126e6:	4798      	blx	r3
  4126e8:	bd10      	pop	{r4, pc}
  4126ea:	bf00      	nop
  4126ec:	20439e6c 	.word	0x20439e6c
  4126f0:	00410e39 	.word	0x00410e39
  4126f4:	20408b71 	.word	0x20408b71
  4126f8:	004110e1 	.word	0x004110e1

004126fc <lv_timer_handler>:
{
  4126fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412700:	b085      	sub	sp, #20
    if(already_running) {
  412702:	4b68      	ldr	r3, [pc, #416]	; (4128a4 <lv_timer_handler+0x1a8>)
  412704:	781b      	ldrb	r3, [r3, #0]
  412706:	2b00      	cmp	r3, #0
  412708:	f040 80c7 	bne.w	41289a <lv_timer_handler+0x19e>
    already_running = true;
  41270c:	2201      	movs	r2, #1
  41270e:	4b65      	ldr	r3, [pc, #404]	; (4128a4 <lv_timer_handler+0x1a8>)
  412710:	701a      	strb	r2, [r3, #0]
    if(lv_timer_run == false) {
  412712:	4b65      	ldr	r3, [pc, #404]	; (4128a8 <lv_timer_handler+0x1ac>)
  412714:	781b      	ldrb	r3, [r3, #0]
  412716:	9302      	str	r3, [sp, #8]
  412718:	b923      	cbnz	r3, 412724 <lv_timer_handler+0x28>
        already_running = false; /*Release mutex*/
  41271a:	2200      	movs	r2, #0
  41271c:	4b61      	ldr	r3, [pc, #388]	; (4128a4 <lv_timer_handler+0x1a8>)
  41271e:	701a      	strb	r2, [r3, #0]
        return 1;
  412720:	2501      	movs	r5, #1
  412722:	e0bb      	b.n	41289c <lv_timer_handler+0x1a0>
    uint32_t handler_start = lv_tick_get();
  412724:	4b61      	ldr	r3, [pc, #388]	; (4128ac <lv_timer_handler+0x1b0>)
  412726:	4798      	blx	r3
    if(handler_start == 0) {
  412728:	9003      	str	r0, [sp, #12]
  41272a:	b930      	cbnz	r0, 41273a <lv_timer_handler+0x3e>
        run_cnt++;
  41272c:	4b60      	ldr	r3, [pc, #384]	; (4128b0 <lv_timer_handler+0x1b4>)
  41272e:	681b      	ldr	r3, [r3, #0]
  412730:	3301      	adds	r3, #1
        if(run_cnt > 100) {
  412732:	2b64      	cmp	r3, #100	; 0x64
  412734:	d809      	bhi.n	41274a <lv_timer_handler+0x4e>
        run_cnt++;
  412736:	4a5e      	ldr	r2, [pc, #376]	; (4128b0 <lv_timer_handler+0x1b4>)
  412738:	6013      	str	r3, [r2, #0]
        timer_deleted             = false;
  41273a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 4128e8 <lv_timer_handler+0x1ec>
  41273e:	f04f 0b00 	mov.w	fp, #0
        timer_created             = false;
  412742:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 4128ec <lv_timer_handler+0x1f0>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
  412746:	4e5b      	ldr	r6, [pc, #364]	; (4128b4 <lv_timer_handler+0x1b8>)
  412748:	e050      	b.n	4127ec <lv_timer_handler+0xf0>
            run_cnt = 0;
  41274a:	2200      	movs	r2, #0
  41274c:	4b58      	ldr	r3, [pc, #352]	; (4128b0 <lv_timer_handler+0x1b4>)
  41274e:	601a      	str	r2, [r3, #0]
            LV_LOG_WARN("It seems lv_tick_inc() is not called.");
  412750:	4b59      	ldr	r3, [pc, #356]	; (4128b8 <lv_timer_handler+0x1bc>)
  412752:	9300      	str	r3, [sp, #0]
  412754:	4b59      	ldr	r3, [pc, #356]	; (4128bc <lv_timer_handler+0x1c0>)
  412756:	225d      	movs	r2, #93	; 0x5d
  412758:	4959      	ldr	r1, [pc, #356]	; (4128c0 <lv_timer_handler+0x1c4>)
  41275a:	2002      	movs	r0, #2
  41275c:	4c59      	ldr	r4, [pc, #356]	; (4128c4 <lv_timer_handler+0x1c8>)
  41275e:	47a0      	blx	r4
  412760:	e7eb      	b.n	41273a <lv_timer_handler+0x3e>
    bool exec = false;
    if(lv_timer_time_remaining(timer) == 0) {
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
  412762:	f8d5 9010 	ldr.w	r9, [r5, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
  412766:	f1b9 0f00 	cmp.w	r9, #0
  41276a:	dd02      	ble.n	412772 <lv_timer_handler+0x76>
  41276c:	f109 33ff 	add.w	r3, r9, #4294967295
  412770:	612b      	str	r3, [r5, #16]
        timer->last_run = lv_tick_get();
  412772:	4b4e      	ldr	r3, [pc, #312]	; (4128ac <lv_timer_handler+0x1b0>)
  412774:	4798      	blx	r3
  412776:	6068      	str	r0, [r5, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
  412778:	68ab      	ldr	r3, [r5, #8]
  41277a:	b113      	cbz	r3, 412782 <lv_timer_handler+0x86>
  41277c:	f1b9 0f00 	cmp.w	r9, #0
  412780:	d12c      	bne.n	4127dc <lv_timer_handler+0xe0>
        TIMER_TRACE("timer callback %p finished", *((void **)&timer->timer_cb));
        LV_ASSERT_MEM_INTEGRITY();
        exec = true;
    }

    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
  412782:	f898 3000 	ldrb.w	r3, [r8]
  412786:	2b00      	cmp	r3, #0
  412788:	d12e      	bne.n	4127e8 <lv_timer_handler+0xec>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
  41278a:	692b      	ldr	r3, [r5, #16]
  41278c:	b34b      	cbz	r3, 4127e2 <lv_timer_handler+0xe6>
                if(timer_created || timer_deleted) {
  41278e:	f89a 3000 	ldrb.w	r3, [sl]
  412792:	bb4b      	cbnz	r3, 4127e8 <lv_timer_handler+0xec>
  412794:	f898 3000 	ldrb.w	r3, [r8]
  412798:	bb33      	cbnz	r3, 4127e8 <lv_timer_handler+0xec>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
  41279a:	6034      	str	r4, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
  41279c:	2c00      	cmp	r4, #0
  41279e:	d031      	beq.n	412804 <lv_timer_handler+0x108>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
  4127a0:	4621      	mov	r1, r4
  4127a2:	4849      	ldr	r0, [pc, #292]	; (4128c8 <lv_timer_handler+0x1cc>)
  4127a4:	47b8      	blx	r7
  4127a6:	4604      	mov	r4, r0
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
  4127a8:	6835      	ldr	r5, [r6, #0]
    if(timer->paused) return false;
  4127aa:	7d2b      	ldrb	r3, [r5, #20]
  4127ac:	f013 0f01 	tst.w	r3, #1
  4127b0:	d1f3      	bne.n	41279a <lv_timer_handler+0x9e>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
  4127b2:	6868      	ldr	r0, [r5, #4]
  4127b4:	4b45      	ldr	r3, [pc, #276]	; (4128cc <lv_timer_handler+0x1d0>)
  4127b6:	4798      	blx	r3
    if(elp >= timer->period)
  4127b8:	682b      	ldr	r3, [r5, #0]
  4127ba:	4298      	cmp	r0, r3
  4127bc:	d2d1      	bcs.n	412762 <lv_timer_handler+0x66>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
  4127be:	f898 9000 	ldrb.w	r9, [r8]
  4127c2:	f1b9 0f00 	cmp.w	r9, #0
  4127c6:	d1e8      	bne.n	41279a <lv_timer_handler+0x9e>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
  4127c8:	692b      	ldr	r3, [r5, #16]
  4127ca:	2b00      	cmp	r3, #0
  4127cc:	d1e5      	bne.n	41279a <lv_timer_handler+0x9e>
            lv_timer_del(timer);
  4127ce:	4628      	mov	r0, r5
  4127d0:	4b3f      	ldr	r3, [pc, #252]	; (4128d0 <lv_timer_handler+0x1d4>)
  4127d2:	4798      	blx	r3
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
  4127d4:	f1b9 0f00 	cmp.w	r9, #0
  4127d8:	d1d9      	bne.n	41278e <lv_timer_handler+0x92>
  4127da:	e7de      	b.n	41279a <lv_timer_handler+0x9e>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
  4127dc:	4628      	mov	r0, r5
  4127de:	4798      	blx	r3
  4127e0:	e7cf      	b.n	412782 <lv_timer_handler+0x86>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
  4127e2:	f8dd 9008 	ldr.w	r9, [sp, #8]
  4127e6:	e7f2      	b.n	4127ce <lv_timer_handler+0xd2>
    } while(LV_GC_ROOT(_lv_timer_act));
  4127e8:	6833      	ldr	r3, [r6, #0]
  4127ea:	b15b      	cbz	r3, 412804 <lv_timer_handler+0x108>
        timer_deleted             = false;
  4127ec:	f888 b000 	strb.w	fp, [r8]
        timer_created             = false;
  4127f0:	f88a b000 	strb.w	fp, [sl]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
  4127f4:	4834      	ldr	r0, [pc, #208]	; (4128c8 <lv_timer_handler+0x1cc>)
  4127f6:	4b37      	ldr	r3, [pc, #220]	; (4128d4 <lv_timer_handler+0x1d8>)
  4127f8:	4798      	blx	r3
  4127fa:	6030      	str	r0, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
  4127fc:	b110      	cbz	r0, 412804 <lv_timer_handler+0x108>
  4127fe:	4604      	mov	r4, r0
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
  412800:	4f35      	ldr	r7, [pc, #212]	; (4128d8 <lv_timer_handler+0x1dc>)
  412802:	e7cd      	b.n	4127a0 <lv_timer_handler+0xa4>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
  412804:	4830      	ldr	r0, [pc, #192]	; (4128c8 <lv_timer_handler+0x1cc>)
  412806:	4b33      	ldr	r3, [pc, #204]	; (4128d4 <lv_timer_handler+0x1d8>)
  412808:	4798      	blx	r3
    while(next) {
  41280a:	4604      	mov	r4, r0
  41280c:	b1d0      	cbz	r0, 412844 <lv_timer_handler+0x148>
  41280e:	f04f 35ff 	mov.w	r5, #4294967295
    uint32_t elp = lv_tick_elaps(timer->last_run);
  412812:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4128cc <lv_timer_handler+0x1d0>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
  412816:	4f2c      	ldr	r7, [pc, #176]	; (4128c8 <lv_timer_handler+0x1cc>)
  412818:	4e2f      	ldr	r6, [pc, #188]	; (4128d8 <lv_timer_handler+0x1dc>)
  41281a:	e004      	b.n	412826 <lv_timer_handler+0x12a>
  41281c:	4621      	mov	r1, r4
  41281e:	4638      	mov	r0, r7
  412820:	47b0      	blx	r6
    while(next) {
  412822:	4604      	mov	r4, r0
  412824:	b180      	cbz	r0, 412848 <lv_timer_handler+0x14c>
        if(!next->paused) {
  412826:	7d23      	ldrb	r3, [r4, #20]
  412828:	f013 0f01 	tst.w	r3, #1
  41282c:	d1f6      	bne.n	41281c <lv_timer_handler+0x120>
    uint32_t elp = lv_tick_elaps(timer->last_run);
  41282e:	6860      	ldr	r0, [r4, #4]
  412830:	47c0      	blx	r8
    if(elp >= timer->period)
  412832:	6823      	ldr	r3, [r4, #0]
  412834:	4298      	cmp	r0, r3
        return 0;
    return timer->period - elp;
  412836:	bf34      	ite	cc
  412838:	1a1b      	subcc	r3, r3, r0
        return 0;
  41283a:	2300      	movcs	r3, #0
  41283c:	429d      	cmp	r5, r3
  41283e:	bf28      	it	cs
  412840:	461d      	movcs	r5, r3
  412842:	e7eb      	b.n	41281c <lv_timer_handler+0x120>
    uint32_t time_till_next = LV_NO_TIMER_READY;
  412844:	f04f 35ff 	mov.w	r5, #4294967295
    busy_time += lv_tick_elaps(handler_start);
  412848:	9803      	ldr	r0, [sp, #12]
  41284a:	4c20      	ldr	r4, [pc, #128]	; (4128cc <lv_timer_handler+0x1d0>)
  41284c:	47a0      	blx	r4
  41284e:	4a23      	ldr	r2, [pc, #140]	; (4128dc <lv_timer_handler+0x1e0>)
  412850:	6813      	ldr	r3, [r2, #0]
  412852:	4403      	add	r3, r0
  412854:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  412856:	4b22      	ldr	r3, [pc, #136]	; (4128e0 <lv_timer_handler+0x1e4>)
  412858:	6818      	ldr	r0, [r3, #0]
  41285a:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  41285c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  412860:	d315      	bcc.n	41288e <lv_timer_handler+0x192>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  412862:	4b1e      	ldr	r3, [pc, #120]	; (4128dc <lv_timer_handler+0x1e0>)
  412864:	681a      	ldr	r2, [r3, #0]
  412866:	2364      	movs	r3, #100	; 0x64
  412868:	fb03 f302 	mul.w	r3, r3, r2
  41286c:	fbb3 f3f0 	udiv	r3, r3, r0
  412870:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  412872:	2b64      	cmp	r3, #100	; 0x64
  412874:	d80f      	bhi.n	412896 <lv_timer_handler+0x19a>
  412876:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  41287a:	b2db      	uxtb	r3, r3
  41287c:	4a19      	ldr	r2, [pc, #100]	; (4128e4 <lv_timer_handler+0x1e8>)
  41287e:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  412880:	2200      	movs	r2, #0
  412882:	4b16      	ldr	r3, [pc, #88]	; (4128dc <lv_timer_handler+0x1e0>)
  412884:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  412886:	4b09      	ldr	r3, [pc, #36]	; (4128ac <lv_timer_handler+0x1b0>)
  412888:	4798      	blx	r3
  41288a:	4b15      	ldr	r3, [pc, #84]	; (4128e0 <lv_timer_handler+0x1e4>)
  41288c:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  41288e:	2200      	movs	r2, #0
  412890:	4b04      	ldr	r3, [pc, #16]	; (4128a4 <lv_timer_handler+0x1a8>)
  412892:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  412894:	e002      	b.n	41289c <lv_timer_handler+0x1a0>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  412896:	2300      	movs	r3, #0
  412898:	e7f0      	b.n	41287c <lv_timer_handler+0x180>
        return 1;
  41289a:	2501      	movs	r5, #1
}
  41289c:	4628      	mov	r0, r5
  41289e:	b005      	add	sp, #20
  4128a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4128a4:	20408b58 	.word	0x20408b58
  4128a8:	20408b68 	.word	0x20408b68
  4128ac:	00410239 	.word	0x00410239
  4128b0:	20408b6c 	.word	0x20408b6c
  4128b4:	20439e5c 	.word	0x20439e5c
  4128b8:	00420928 	.word	0x00420928
  4128bc:	004208c0 	.word	0x004208c0
  4128c0:	004208e4 	.word	0x004208e4
  4128c4:	00410edd 	.word	0x00410edd
  4128c8:	20439e6c 	.word	0x20439e6c
  4128cc:	00410255 	.word	0x00410255
  4128d0:	004126d1 	.word	0x004126d1
  4128d4:	00410ea1 	.word	0x00410ea1
  4128d8:	00410eb5 	.word	0x00410eb5
  4128dc:	20408b5c 	.word	0x20408b5c
  4128e0:	20408b64 	.word	0x20408b64
  4128e4:	20408b60 	.word	0x20408b60
  4128e8:	20408b71 	.word	0x20408b71
  4128ec:	20408b70 	.word	0x20408b70

004128f0 <lv_timer_pause>:
    timer->paused = true;
  4128f0:	7d03      	ldrb	r3, [r0, #20]
  4128f2:	f043 0301 	orr.w	r3, r3, #1
  4128f6:	7503      	strb	r3, [r0, #20]
  4128f8:	4770      	bx	lr

004128fa <lv_timer_resume>:
    timer->paused = false;
  4128fa:	7d03      	ldrb	r3, [r0, #20]
  4128fc:	f36f 0300 	bfc	r3, #0, #1
  412900:	7503      	strb	r3, [r0, #20]
  412902:	4770      	bx	lr

00412904 <default_walker>:
}

#undef tlsf_insist

static void default_walker(void * ptr, size_t size, int used, void * user)
{
  412904:	b510      	push	{r4, lr}
  412906:	b086      	sub	sp, #24
    (void)user;
    printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)block_from_ptr(ptr));
  412908:	4c0b      	ldr	r4, [pc, #44]	; (412938 <default_walker+0x34>)
  41290a:	4b0c      	ldr	r3, [pc, #48]	; (41293c <default_walker+0x38>)
  41290c:	2a00      	cmp	r2, #0
  41290e:	bf14      	ite	ne
  412910:	461a      	movne	r2, r3
  412912:	4622      	moveq	r2, r4
    return tlsf_cast(block_header_t *,
  412914:	f1a0 0308 	sub.w	r3, r0, #8
    printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)block_from_ptr(ptr));
  412918:	9304      	str	r3, [sp, #16]
  41291a:	9103      	str	r1, [sp, #12]
  41291c:	9202      	str	r2, [sp, #8]
  41291e:	9001      	str	r0, [sp, #4]
  412920:	4b07      	ldr	r3, [pc, #28]	; (412940 <default_walker+0x3c>)
  412922:	9300      	str	r3, [sp, #0]
  412924:	4b07      	ldr	r3, [pc, #28]	; (412944 <default_walker+0x40>)
  412926:	f240 327a 	movw	r2, #890	; 0x37a
  41292a:	4907      	ldr	r1, [pc, #28]	; (412948 <default_walker+0x44>)
  41292c:	2003      	movs	r0, #3
  41292e:	4c07      	ldr	r4, [pc, #28]	; (41294c <default_walker+0x48>)
  412930:	47a0      	blx	r4
}
  412932:	b006      	add	sp, #24
  412934:	bd10      	pop	{r4, pc}
  412936:	bf00      	nop
  412938:	00420e14 	.word	0x00420e14
  41293c:	00420e0c 	.word	0x00420e0c
  412940:	00420e4c 	.word	0x00420e4c
  412944:	00420a30 	.word	0x00420a30
  412948:	00420e1c 	.word	0x00420e1c
  41294c:	00410edd 	.word	0x00410edd

00412950 <align_ptr>:
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
  412950:	1e4b      	subs	r3, r1, #1
  412952:	4219      	tst	r1, r3
  412954:	d103      	bne.n	41295e <align_ptr+0xe>
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
  412956:	4418      	add	r0, r3
  412958:	4249      	negs	r1, r1
}
  41295a:	4008      	ands	r0, r1
  41295c:	4770      	bx	lr
{
  41295e:	b510      	push	{r4, lr}
  412960:	b082      	sub	sp, #8
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
  412962:	4b06      	ldr	r3, [pc, #24]	; (41297c <align_ptr+0x2c>)
  412964:	9301      	str	r3, [sp, #4]
  412966:	4b06      	ldr	r3, [pc, #24]	; (412980 <align_ptr+0x30>)
  412968:	9300      	str	r3, [sp, #0]
  41296a:	4b06      	ldr	r3, [pc, #24]	; (412984 <align_ptr+0x34>)
  41296c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  412970:	4905      	ldr	r1, [pc, #20]	; (412988 <align_ptr+0x38>)
  412972:	2003      	movs	r0, #3
  412974:	4c05      	ldr	r4, [pc, #20]	; (41298c <align_ptr+0x3c>)
  412976:	47a0      	blx	r4
  412978:	e7fe      	b.n	412978 <align_ptr+0x28>
  41297a:	bf00      	nop
  41297c:	00420a84 	.word	0x00420a84
  412980:	00420ac4 	.word	0x00420ac4
  412984:	00420968 	.word	0x00420968
  412988:	00420e1c 	.word	0x00420e1c
  41298c:	00410edd 	.word	0x00410edd

00412990 <remove_free_block>:
{
  412990:	b570      	push	{r4, r5, r6, lr}
  412992:	b082      	sub	sp, #8
    block_header_t * prev = block->prev_free;
  412994:	68cd      	ldr	r5, [r1, #12]
    block_header_t * next = block->next_free;
  412996:	688c      	ldr	r4, [r1, #8]
    tlsf_assert(prev && "prev_free field can not be null");
  412998:	b15d      	cbz	r5, 4129b2 <remove_free_block+0x22>
    tlsf_assert(next && "next_free field can not be null");
  41299a:	b1b4      	cbz	r4, 4129ca <remove_free_block+0x3a>
    next->prev_free = prev;
  41299c:	60e5      	str	r5, [r4, #12]
    prev->next_free = next;
  41299e:	60ac      	str	r4, [r5, #8]
  4129a0:	eb03 1542 	add.w	r5, r3, r2, lsl #5
  4129a4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    if(control->blocks[fl][sl] == block) {
  4129a8:	6bae      	ldr	r6, [r5, #56]	; 0x38
  4129aa:	42b1      	cmp	r1, r6
  4129ac:	d019      	beq.n	4129e2 <remove_free_block+0x52>
}
  4129ae:	b002      	add	sp, #8
  4129b0:	bd70      	pop	{r4, r5, r6, pc}
    tlsf_assert(prev && "prev_free field can not be null");
  4129b2:	4b16      	ldr	r3, [pc, #88]	; (412a0c <remove_free_block+0x7c>)
  4129b4:	9301      	str	r3, [sp, #4]
  4129b6:	4b16      	ldr	r3, [pc, #88]	; (412a10 <remove_free_block+0x80>)
  4129b8:	9300      	str	r3, [sp, #0]
  4129ba:	4b16      	ldr	r3, [pc, #88]	; (412a14 <remove_free_block+0x84>)
  4129bc:	f240 224d 	movw	r2, #589	; 0x24d
  4129c0:	4915      	ldr	r1, [pc, #84]	; (412a18 <remove_free_block+0x88>)
  4129c2:	2003      	movs	r0, #3
  4129c4:	4c15      	ldr	r4, [pc, #84]	; (412a1c <remove_free_block+0x8c>)
  4129c6:	47a0      	blx	r4
  4129c8:	e7fe      	b.n	4129c8 <remove_free_block+0x38>
    tlsf_assert(next && "next_free field can not be null");
  4129ca:	4b15      	ldr	r3, [pc, #84]	; (412a20 <remove_free_block+0x90>)
  4129cc:	9301      	str	r3, [sp, #4]
  4129ce:	4b10      	ldr	r3, [pc, #64]	; (412a10 <remove_free_block+0x80>)
  4129d0:	9300      	str	r3, [sp, #0]
  4129d2:	4b10      	ldr	r3, [pc, #64]	; (412a14 <remove_free_block+0x84>)
  4129d4:	f240 224e 	movw	r2, #590	; 0x24e
  4129d8:	490f      	ldr	r1, [pc, #60]	; (412a18 <remove_free_block+0x88>)
  4129da:	2003      	movs	r0, #3
  4129dc:	4c0f      	ldr	r4, [pc, #60]	; (412a1c <remove_free_block+0x8c>)
  4129de:	47a0      	blx	r4
  4129e0:	e7fe      	b.n	4129e0 <remove_free_block+0x50>
        control->blocks[fl][sl] = next;
  4129e2:	63ac      	str	r4, [r5, #56]	; 0x38
        if(next == &control->block_null) {
  4129e4:	4284      	cmp	r4, r0
  4129e6:	d1e2      	bne.n	4129ae <remove_free_block+0x1e>
  4129e8:	eb00 0482 	add.w	r4, r0, r2, lsl #2
            control->sl_bitmap[fl] &= ~(1U << sl);
  4129ec:	2101      	movs	r1, #1
  4129ee:	4099      	lsls	r1, r3
  4129f0:	6963      	ldr	r3, [r4, #20]
  4129f2:	ea23 0301 	bic.w	r3, r3, r1
  4129f6:	6163      	str	r3, [r4, #20]
            if(!control->sl_bitmap[fl]) {
  4129f8:	2b00      	cmp	r3, #0
  4129fa:	d1d8      	bne.n	4129ae <remove_free_block+0x1e>
                control->fl_bitmap &= ~(1U << fl);
  4129fc:	2301      	movs	r3, #1
  4129fe:	fa03 f202 	lsl.w	r2, r3, r2
  412a02:	6903      	ldr	r3, [r0, #16]
  412a04:	ea23 0302 	bic.w	r3, r3, r2
  412a08:	6103      	str	r3, [r0, #16]
}
  412a0a:	e7d0      	b.n	4129ae <remove_free_block+0x1e>
  412a0c:	00420fc0 	.word	0x00420fc0
  412a10:	00420ac4 	.word	0x00420ac4
  412a14:	0042098c 	.word	0x0042098c
  412a18:	00420e1c 	.word	0x00420e1c
  412a1c:	00410edd 	.word	0x00410edd
  412a20:	00420fec 	.word	0x00420fec

00412a24 <adjust_request_size>:
    if(size) {
  412a24:	4603      	mov	r3, r0
  412a26:	b908      	cbnz	r0, 412a2c <adjust_request_size+0x8>
}
  412a28:	4618      	mov	r0, r3
  412a2a:	4770      	bx	lr
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
  412a2c:	1e4a      	subs	r2, r1, #1
  412a2e:	ea11 0002 	ands.w	r0, r1, r2
  412a32:	d109      	bne.n	412a48 <adjust_request_size+0x24>
    return (x + (align - 1)) & ~(align - 1);
  412a34:	4413      	add	r3, r2
  412a36:	4249      	negs	r1, r1
  412a38:	400b      	ands	r3, r1
        if(aligned < block_size_max) {
  412a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  412a3e:	d211      	bcs.n	412a64 <adjust_request_size+0x40>
  412a40:	2b0c      	cmp	r3, #12
  412a42:	bf38      	it	cc
  412a44:	230c      	movcc	r3, #12
  412a46:	e7ef      	b.n	412a28 <adjust_request_size+0x4>
{
  412a48:	b510      	push	{r4, lr}
  412a4a:	b082      	sub	sp, #8
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
  412a4c:	4b06      	ldr	r3, [pc, #24]	; (412a68 <adjust_request_size+0x44>)
  412a4e:	9301      	str	r3, [sp, #4]
  412a50:	4b06      	ldr	r3, [pc, #24]	; (412a6c <adjust_request_size+0x48>)
  412a52:	9300      	str	r3, [sp, #0]
  412a54:	4b06      	ldr	r3, [pc, #24]	; (412a70 <adjust_request_size+0x4c>)
  412a56:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
  412a5a:	4906      	ldr	r1, [pc, #24]	; (412a74 <adjust_request_size+0x50>)
  412a5c:	2003      	movs	r0, #3
  412a5e:	4c06      	ldr	r4, [pc, #24]	; (412a78 <adjust_request_size+0x54>)
  412a60:	47a0      	blx	r4
  412a62:	e7fe      	b.n	412a62 <adjust_request_size+0x3e>
    size_t adjust = 0;
  412a64:	4603      	mov	r3, r0
  412a66:	e7df      	b.n	412a28 <adjust_request_size+0x4>
  412a68:	00420a84 	.word	0x00420a84
  412a6c:	00420ac4 	.word	0x00420ac4
  412a70:	0042095c 	.word	0x0042095c
  412a74:	00420e1c 	.word	0x00420e1c
  412a78:	00410edd 	.word	0x00410edd

00412a7c <mapping_insert>:
    if(size < SMALL_BLOCK_SIZE) {
  412a7c:	287f      	cmp	r0, #127	; 0x7f
  412a7e:	d90f      	bls.n	412aa0 <mapping_insert+0x24>
{
  412a80:	b410      	push	{r4}
    const int bit = word ? 32 - __builtin_clz(word) : 0;
  412a82:	b1b0      	cbz	r0, 412ab2 <mapping_insert+0x36>
  412a84:	fab0 f380 	clz	r3, r0
  412a88:	f1c3 0320 	rsb	r3, r3, #32
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
  412a8c:	1f9c      	subs	r4, r3, #6
  412a8e:	40e0      	lsrs	r0, r4
  412a90:	f080 0020 	eor.w	r0, r0, #32
        fl -= (FL_INDEX_SHIFT - 1);
  412a94:	3b07      	subs	r3, #7
    *fli = fl;
  412a96:	600b      	str	r3, [r1, #0]
    *sli = sl;
  412a98:	6010      	str	r0, [r2, #0]
}
  412a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  412a9e:	4770      	bx	lr
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
  412aa0:	4603      	mov	r3, r0
  412aa2:	2800      	cmp	r0, #0
  412aa4:	bfb8      	it	lt
  412aa6:	1cc3      	addlt	r3, r0, #3
  412aa8:	1098      	asrs	r0, r3, #2
        fl = 0;
  412aaa:	2300      	movs	r3, #0
    *fli = fl;
  412aac:	600b      	str	r3, [r1, #0]
    *sli = sl;
  412aae:	6010      	str	r0, [r2, #0]
  412ab0:	4770      	bx	lr
    const int bit = word ? 32 - __builtin_clz(word) : 0;
  412ab2:	2300      	movs	r3, #0
  412ab4:	e7ea      	b.n	412a8c <mapping_insert+0x10>
	...

00412ab8 <block_remove>:
{
  412ab8:	b530      	push	{r4, r5, lr}
  412aba:	b083      	sub	sp, #12
  412abc:	4605      	mov	r5, r0
  412abe:	460c      	mov	r4, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412ac0:	6848      	ldr	r0, [r1, #4]
    mapping_insert(block_size(block), &fl, &sl);
  412ac2:	466a      	mov	r2, sp
  412ac4:	a901      	add	r1, sp, #4
  412ac6:	f020 0003 	bic.w	r0, r0, #3
  412aca:	4b05      	ldr	r3, [pc, #20]	; (412ae0 <block_remove+0x28>)
  412acc:	4798      	blx	r3
    remove_free_block(control, block, fl, sl);
  412ace:	9b00      	ldr	r3, [sp, #0]
  412ad0:	9a01      	ldr	r2, [sp, #4]
  412ad2:	4621      	mov	r1, r4
  412ad4:	4628      	mov	r0, r5
  412ad6:	4c03      	ldr	r4, [pc, #12]	; (412ae4 <block_remove+0x2c>)
  412ad8:	47a0      	blx	r4
}
  412ada:	b003      	add	sp, #12
  412adc:	bd30      	pop	{r4, r5, pc}
  412ade:	bf00      	nop
  412ae0:	00412a7d 	.word	0x00412a7d
  412ae4:	00412991 	.word	0x00412991

00412ae8 <block_insert>:
{
  412ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412aec:	b085      	sub	sp, #20
  412aee:	4604      	mov	r4, r0
  412af0:	460d      	mov	r5, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412af2:	6848      	ldr	r0, [r1, #4]
    mapping_insert(block_size(block), &fl, &sl);
  412af4:	aa02      	add	r2, sp, #8
  412af6:	a903      	add	r1, sp, #12
  412af8:	f020 0003 	bic.w	r0, r0, #3
  412afc:	4b26      	ldr	r3, [pc, #152]	; (412b98 <block_insert+0xb0>)
  412afe:	4798      	blx	r3
    insert_free_block(control, block, fl, sl);
  412b00:	f8dd 900c 	ldr.w	r9, [sp, #12]
  412b04:	f8dd 8008 	ldr.w	r8, [sp, #8]
  412b08:	eb08 1649 	add.w	r6, r8, r9, lsl #5
  412b0c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    block_header_t * current = control->blocks[fl][sl];
  412b10:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
  412b12:	b1bb      	cbz	r3, 412b44 <block_insert+0x5c>
    tlsf_assert(block && "cannot insert a null entry into the free list");
  412b14:	b315      	cbz	r5, 412b5c <block_insert+0x74>
    block->next_free = current;
  412b16:	60ab      	str	r3, [r5, #8]
    block->prev_free = &control->block_null;
  412b18:	60ec      	str	r4, [r5, #12]
    current->prev_free = block;
  412b1a:	60dd      	str	r5, [r3, #12]
    return tlsf_cast(void *,
  412b1c:	f105 0708 	add.w	r7, r5, #8
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
  412b20:	2104      	movs	r1, #4
  412b22:	4638      	mov	r0, r7
  412b24:	4b1d      	ldr	r3, [pc, #116]	; (412b9c <block_insert+0xb4>)
  412b26:	4798      	blx	r3
  412b28:	4287      	cmp	r7, r0
  412b2a:	d023      	beq.n	412b74 <block_insert+0x8c>
  412b2c:	4b1c      	ldr	r3, [pc, #112]	; (412ba0 <block_insert+0xb8>)
  412b2e:	9301      	str	r3, [sp, #4]
  412b30:	4b1c      	ldr	r3, [pc, #112]	; (412ba4 <block_insert+0xbc>)
  412b32:	9300      	str	r3, [sp, #0]
  412b34:	4b1c      	ldr	r3, [pc, #112]	; (412ba8 <block_insert+0xc0>)
  412b36:	f44f 721b 	mov.w	r2, #620	; 0x26c
  412b3a:	491c      	ldr	r1, [pc, #112]	; (412bac <block_insert+0xc4>)
  412b3c:	2003      	movs	r0, #3
  412b3e:	4c1c      	ldr	r4, [pc, #112]	; (412bb0 <block_insert+0xc8>)
  412b40:	47a0      	blx	r4
  412b42:	e7fe      	b.n	412b42 <block_insert+0x5a>
    tlsf_assert(current && "free list cannot have a null entry");
  412b44:	4b1b      	ldr	r3, [pc, #108]	; (412bb4 <block_insert+0xcc>)
  412b46:	9301      	str	r3, [sp, #4]
  412b48:	4b16      	ldr	r3, [pc, #88]	; (412ba4 <block_insert+0xbc>)
  412b4a:	9300      	str	r3, [sp, #0]
  412b4c:	4b16      	ldr	r3, [pc, #88]	; (412ba8 <block_insert+0xc0>)
  412b4e:	f240 2266 	movw	r2, #614	; 0x266
  412b52:	4916      	ldr	r1, [pc, #88]	; (412bac <block_insert+0xc4>)
  412b54:	2003      	movs	r0, #3
  412b56:	4c16      	ldr	r4, [pc, #88]	; (412bb0 <block_insert+0xc8>)
  412b58:	47a0      	blx	r4
  412b5a:	e7fe      	b.n	412b5a <block_insert+0x72>
    tlsf_assert(block && "cannot insert a null entry into the free list");
  412b5c:	4b16      	ldr	r3, [pc, #88]	; (412bb8 <block_insert+0xd0>)
  412b5e:	9301      	str	r3, [sp, #4]
  412b60:	4b10      	ldr	r3, [pc, #64]	; (412ba4 <block_insert+0xbc>)
  412b62:	9300      	str	r3, [sp, #0]
  412b64:	4b10      	ldr	r3, [pc, #64]	; (412ba8 <block_insert+0xc0>)
  412b66:	f240 2267 	movw	r2, #615	; 0x267
  412b6a:	4910      	ldr	r1, [pc, #64]	; (412bac <block_insert+0xc4>)
  412b6c:	2003      	movs	r0, #3
  412b6e:	4c10      	ldr	r4, [pc, #64]	; (412bb0 <block_insert+0xc8>)
  412b70:	47a0      	blx	r4
  412b72:	e7fe      	b.n	412b72 <block_insert+0x8a>
    control->blocks[fl][sl] = block;
  412b74:	63b5      	str	r5, [r6, #56]	; 0x38
    control->fl_bitmap |= (1U << fl);
  412b76:	2301      	movs	r3, #1
  412b78:	fa03 f109 	lsl.w	r1, r3, r9
  412b7c:	6922      	ldr	r2, [r4, #16]
  412b7e:	430a      	orrs	r2, r1
  412b80:	6122      	str	r2, [r4, #16]
  412b82:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    control->sl_bitmap[fl] |= (1U << sl);
  412b86:	fa03 f308 	lsl.w	r3, r3, r8
  412b8a:	6962      	ldr	r2, [r4, #20]
  412b8c:	4313      	orrs	r3, r2
  412b8e:	6163      	str	r3, [r4, #20]
}
  412b90:	b005      	add	sp, #20
  412b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412b96:	bf00      	nop
  412b98:	00412a7d 	.word	0x00412a7d
  412b9c:	00412951 	.word	0x00412951
  412ba0:	00420b84 	.word	0x00420b84
  412ba4:	00420ac4 	.word	0x00420ac4
  412ba8:	004209a0 	.word	0x004209a0
  412bac:	00420e1c 	.word	0x00420e1c
  412bb0:	00410edd 	.word	0x00410edd
  412bb4:	00420b18 	.word	0x00420b18
  412bb8:	00420b48 	.word	0x00420b48

00412bbc <block_next>:
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412bbc:	6843      	ldr	r3, [r0, #4]
    tlsf_assert(!block_is_last(block));
  412bbe:	f033 0303 	bics.w	r3, r3, #3
  412bc2:	d002      	beq.n	412bca <block_next+0xe>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
  412bc4:	4418      	add	r0, r3
}
  412bc6:	3004      	adds	r0, #4
  412bc8:	4770      	bx	lr
{
  412bca:	b510      	push	{r4, lr}
  412bcc:	b082      	sub	sp, #8
    tlsf_assert(!block_is_last(block));
  412bce:	4b06      	ldr	r3, [pc, #24]	; (412be8 <block_next+0x2c>)
  412bd0:	9301      	str	r3, [sp, #4]
  412bd2:	4b06      	ldr	r3, [pc, #24]	; (412bec <block_next+0x30>)
  412bd4:	9300      	str	r3, [sp, #0]
  412bd6:	4b06      	ldr	r3, [pc, #24]	; (412bf0 <block_next+0x34>)
  412bd8:	f240 12c9 	movw	r2, #457	; 0x1c9
  412bdc:	4905      	ldr	r1, [pc, #20]	; (412bf4 <block_next+0x38>)
  412bde:	2003      	movs	r0, #3
  412be0:	4c05      	ldr	r4, [pc, #20]	; (412bf8 <block_next+0x3c>)
  412be2:	47a0      	blx	r4
  412be4:	e7fe      	b.n	412be4 <block_next+0x28>
  412be6:	bf00      	nop
  412be8:	00420ca4 	.word	0x00420ca4
  412bec:	00420ac4 	.word	0x00420ac4
  412bf0:	00420950 	.word	0x00420950
  412bf4:	00420e1c 	.word	0x00420e1c
  412bf8:	00410edd 	.word	0x00410edd

00412bfc <block_link_next>:
{
  412bfc:	b510      	push	{r4, lr}
  412bfe:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
  412c00:	4b01      	ldr	r3, [pc, #4]	; (412c08 <block_link_next+0xc>)
  412c02:	4798      	blx	r3
    next->prev_phys_block = block;
  412c04:	6004      	str	r4, [r0, #0]
}
  412c06:	bd10      	pop	{r4, pc}
  412c08:	00412bbd 	.word	0x00412bbd

00412c0c <block_split>:
{
  412c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412c10:	b082      	sub	sp, #8
  412c12:	4605      	mov	r5, r0
  412c14:	460e      	mov	r6, r1
    return tlsf_cast(void *,
  412c16:	1844      	adds	r4, r0, r1
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
  412c18:	3404      	adds	r4, #4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412c1a:	6847      	ldr	r7, [r0, #4]
    return tlsf_cast(void *,
  412c1c:	f104 0808 	add.w	r8, r4, #8
    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
  412c20:	2104      	movs	r1, #4
  412c22:	4640      	mov	r0, r8
  412c24:	4b27      	ldr	r3, [pc, #156]	; (412cc4 <block_split+0xb8>)
  412c26:	4798      	blx	r3
  412c28:	4580      	cmp	r8, r0
  412c2a:	d00b      	beq.n	412c44 <block_split+0x38>
  412c2c:	4b26      	ldr	r3, [pc, #152]	; (412cc8 <block_split+0xbc>)
  412c2e:	9301      	str	r3, [sp, #4]
  412c30:	4b26      	ldr	r3, [pc, #152]	; (412ccc <block_split+0xc0>)
  412c32:	9300      	str	r3, [sp, #0]
  412c34:	4b26      	ldr	r3, [pc, #152]	; (412cd0 <block_split+0xc4>)
  412c36:	f240 2295 	movw	r2, #661	; 0x295
  412c3a:	4926      	ldr	r1, [pc, #152]	; (412cd4 <block_split+0xc8>)
  412c3c:	2003      	movs	r0, #3
  412c3e:	4c26      	ldr	r4, [pc, #152]	; (412cd8 <block_split+0xcc>)
  412c40:	47a0      	blx	r4
  412c42:	e7fe      	b.n	412c42 <block_split+0x36>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412c44:	f027 0303 	bic.w	r3, r7, #3
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
  412c48:	1b9b      	subs	r3, r3, r6
    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
  412c4a:	1f19      	subs	r1, r3, #4
  412c4c:	4433      	add	r3, r6
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412c4e:	686a      	ldr	r2, [r5, #4]
  412c50:	f022 0203 	bic.w	r2, r2, #3
    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
  412c54:	4293      	cmp	r3, r2
  412c56:	d00b      	beq.n	412c70 <block_split+0x64>
  412c58:	4b20      	ldr	r3, [pc, #128]	; (412cdc <block_split+0xd0>)
  412c5a:	9301      	str	r3, [sp, #4]
  412c5c:	4b1b      	ldr	r3, [pc, #108]	; (412ccc <block_split+0xc0>)
  412c5e:	9300      	str	r3, [sp, #0]
  412c60:	4b1b      	ldr	r3, [pc, #108]	; (412cd0 <block_split+0xc4>)
  412c62:	f44f 7226 	mov.w	r2, #664	; 0x298
  412c66:	491b      	ldr	r1, [pc, #108]	; (412cd4 <block_split+0xc8>)
  412c68:	2003      	movs	r0, #3
  412c6a:	4c1b      	ldr	r4, [pc, #108]	; (412cd8 <block_split+0xcc>)
  412c6c:	47a0      	blx	r4
  412c6e:	e7fe      	b.n	412c6e <block_split+0x62>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
  412c70:	6863      	ldr	r3, [r4, #4]
  412c72:	f003 0303 	and.w	r3, r3, #3
  412c76:	430b      	orrs	r3, r1
  412c78:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412c7a:	f023 0303 	bic.w	r3, r3, #3
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
  412c7e:	2b0b      	cmp	r3, #11
  412c80:	d80b      	bhi.n	412c9a <block_split+0x8e>
  412c82:	4b17      	ldr	r3, [pc, #92]	; (412ce0 <block_split+0xd4>)
  412c84:	9301      	str	r3, [sp, #4]
  412c86:	4b11      	ldr	r3, [pc, #68]	; (412ccc <block_split+0xc0>)
  412c88:	9300      	str	r3, [sp, #0]
  412c8a:	4b11      	ldr	r3, [pc, #68]	; (412cd0 <block_split+0xc4>)
  412c8c:	f240 229a 	movw	r2, #666	; 0x29a
  412c90:	4910      	ldr	r1, [pc, #64]	; (412cd4 <block_split+0xc8>)
  412c92:	2003      	movs	r0, #3
  412c94:	4c10      	ldr	r4, [pc, #64]	; (412cd8 <block_split+0xcc>)
  412c96:	47a0      	blx	r4
  412c98:	e7fe      	b.n	412c98 <block_split+0x8c>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
  412c9a:	686b      	ldr	r3, [r5, #4]
  412c9c:	f003 0303 	and.w	r3, r3, #3
  412ca0:	431e      	orrs	r6, r3
  412ca2:	606e      	str	r6, [r5, #4]
    block_header_t * next = block_link_next(block);
  412ca4:	4620      	mov	r0, r4
  412ca6:	4b0f      	ldr	r3, [pc, #60]	; (412ce4 <block_split+0xd8>)
  412ca8:	4798      	blx	r3
    block->size |= block_header_prev_free_bit;
  412caa:	6843      	ldr	r3, [r0, #4]
  412cac:	f043 0302 	orr.w	r3, r3, #2
  412cb0:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
  412cb2:	6863      	ldr	r3, [r4, #4]
  412cb4:	f043 0301 	orr.w	r3, r3, #1
  412cb8:	6063      	str	r3, [r4, #4]
}
  412cba:	4620      	mov	r0, r4
  412cbc:	b002      	add	sp, #8
  412cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412cc2:	bf00      	nop
  412cc4:	00412951 	.word	0x00412951
  412cc8:	00420d0c 	.word	0x00420d0c
  412ccc:	00420ac4 	.word	0x00420ac4
  412cd0:	004209b4 	.word	0x004209b4
  412cd4:	00420e1c 	.word	0x00420e1c
  412cd8:	00410edd 	.word	0x00410edd
  412cdc:	00420d80 	.word	0x00420d80
  412ce0:	00420dc0 	.word	0x00420dc0
  412ce4:	00412bfd 	.word	0x00412bfd

00412ce8 <block_absorb>:
{
  412ce8:	b510      	push	{r4, lr}
  412cea:	b082      	sub	sp, #8
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412cec:	6842      	ldr	r2, [r0, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
  412cee:	f032 0303 	bics.w	r3, r2, #3
  412cf2:	d10b      	bne.n	412d0c <block_absorb+0x24>
  412cf4:	4b0b      	ldr	r3, [pc, #44]	; (412d24 <block_absorb+0x3c>)
  412cf6:	9301      	str	r3, [sp, #4]
  412cf8:	4b0b      	ldr	r3, [pc, #44]	; (412d28 <block_absorb+0x40>)
  412cfa:	9300      	str	r3, [sp, #0]
  412cfc:	4b0b      	ldr	r3, [pc, #44]	; (412d2c <block_absorb+0x44>)
  412cfe:	f240 22a5 	movw	r2, #677	; 0x2a5
  412d02:	490b      	ldr	r1, [pc, #44]	; (412d30 <block_absorb+0x48>)
  412d04:	2003      	movs	r0, #3
  412d06:	4c0b      	ldr	r4, [pc, #44]	; (412d34 <block_absorb+0x4c>)
  412d08:	47a0      	blx	r4
  412d0a:	e7fe      	b.n	412d0a <block_absorb+0x22>
  412d0c:	4604      	mov	r4, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412d0e:	684b      	ldr	r3, [r1, #4]
  412d10:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
  412d14:	4413      	add	r3, r2
  412d16:	3304      	adds	r3, #4
  412d18:	6043      	str	r3, [r0, #4]
    block_link_next(prev);
  412d1a:	4b07      	ldr	r3, [pc, #28]	; (412d38 <block_absorb+0x50>)
  412d1c:	4798      	blx	r3
}
  412d1e:	4620      	mov	r0, r4
  412d20:	b002      	add	sp, #8
  412d22:	bd10      	pop	{r4, pc}
  412d24:	00420ae0 	.word	0x00420ae0
  412d28:	00420ac4 	.word	0x00420ac4
  412d2c:	004209c0 	.word	0x004209c0
  412d30:	00420e1c 	.word	0x00420e1c
  412d34:	00410edd 	.word	0x00410edd
  412d38:	00412bfd 	.word	0x00412bfd

00412d3c <block_merge_next>:
{
  412d3c:	b570      	push	{r4, r5, r6, lr}
  412d3e:	b082      	sub	sp, #8
  412d40:	4606      	mov	r6, r0
  412d42:	460c      	mov	r4, r1
    block_header_t * next = block_next(block);
  412d44:	4608      	mov	r0, r1
  412d46:	4b18      	ldr	r3, [pc, #96]	; (412da8 <block_merge_next+0x6c>)
  412d48:	4798      	blx	r3
    tlsf_assert(next && "next physical block can't be null");
  412d4a:	b1a0      	cbz	r0, 412d76 <block_merge_next+0x3a>
  412d4c:	4605      	mov	r5, r0
    return tlsf_cast(int, block->size & block_header_free_bit);
  412d4e:	6843      	ldr	r3, [r0, #4]
    if(block_is_free(next)) {
  412d50:	f013 0f01 	tst.w	r3, #1
  412d54:	d024      	beq.n	412da0 <block_merge_next+0x64>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412d56:	6863      	ldr	r3, [r4, #4]
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
  412d58:	f033 0303 	bics.w	r3, r3, #3
  412d5c:	d117      	bne.n	412d8e <block_merge_next+0x52>
  412d5e:	4b13      	ldr	r3, [pc, #76]	; (412dac <block_merge_next+0x70>)
  412d60:	9301      	str	r3, [sp, #4]
  412d62:	4b13      	ldr	r3, [pc, #76]	; (412db0 <block_merge_next+0x74>)
  412d64:	9300      	str	r3, [sp, #0]
  412d66:	4b13      	ldr	r3, [pc, #76]	; (412db4 <block_merge_next+0x78>)
  412d68:	f240 22c1 	movw	r2, #705	; 0x2c1
  412d6c:	4912      	ldr	r1, [pc, #72]	; (412db8 <block_merge_next+0x7c>)
  412d6e:	2003      	movs	r0, #3
  412d70:	4c12      	ldr	r4, [pc, #72]	; (412dbc <block_merge_next+0x80>)
  412d72:	47a0      	blx	r4
  412d74:	e7fe      	b.n	412d74 <block_merge_next+0x38>
    tlsf_assert(next && "next physical block can't be null");
  412d76:	4b12      	ldr	r3, [pc, #72]	; (412dc0 <block_merge_next+0x84>)
  412d78:	9301      	str	r3, [sp, #4]
  412d7a:	4b0d      	ldr	r3, [pc, #52]	; (412db0 <block_merge_next+0x74>)
  412d7c:	9300      	str	r3, [sp, #0]
  412d7e:	4b0d      	ldr	r3, [pc, #52]	; (412db4 <block_merge_next+0x78>)
  412d80:	f240 22be 	movw	r2, #702	; 0x2be
  412d84:	490c      	ldr	r1, [pc, #48]	; (412db8 <block_merge_next+0x7c>)
  412d86:	2003      	movs	r0, #3
  412d88:	4c0c      	ldr	r4, [pc, #48]	; (412dbc <block_merge_next+0x80>)
  412d8a:	47a0      	blx	r4
  412d8c:	e7fe      	b.n	412d8c <block_merge_next+0x50>
        block_remove(control, next);
  412d8e:	4601      	mov	r1, r0
  412d90:	4630      	mov	r0, r6
  412d92:	4b0c      	ldr	r3, [pc, #48]	; (412dc4 <block_merge_next+0x88>)
  412d94:	4798      	blx	r3
        block = block_absorb(block, next);
  412d96:	4629      	mov	r1, r5
  412d98:	4620      	mov	r0, r4
  412d9a:	4b0b      	ldr	r3, [pc, #44]	; (412dc8 <block_merge_next+0x8c>)
  412d9c:	4798      	blx	r3
  412d9e:	4604      	mov	r4, r0
}
  412da0:	4620      	mov	r0, r4
  412da2:	b002      	add	sp, #8
  412da4:	bd70      	pop	{r4, r5, r6, pc}
  412da6:	bf00      	nop
  412da8:	00412bbd 	.word	0x00412bbd
  412dac:	00420c6c 	.word	0x00420c6c
  412db0:	00420ac4 	.word	0x00420ac4
  412db4:	004209e4 	.word	0x004209e4
  412db8:	00420e1c 	.word	0x00420e1c
  412dbc:	00410edd 	.word	0x00410edd
  412dc0:	00420c40 	.word	0x00420c40
  412dc4:	00412ab9 	.word	0x00412ab9
  412dc8:	00412ce9 	.word	0x00412ce9

00412dcc <block_prepare_used>:
    if(block) {
  412dcc:	2900      	cmp	r1, #0
  412dce:	d045      	beq.n	412e5c <block_prepare_used+0x90>
{
  412dd0:	b570      	push	{r4, r5, r6, lr}
  412dd2:	b082      	sub	sp, #8
  412dd4:	460c      	mov	r4, r1
  412dd6:	4611      	mov	r1, r2
  412dd8:	4605      	mov	r5, r0
        tlsf_assert(size && "size must be non-zero");
  412dda:	b95a      	cbnz	r2, 412df4 <block_prepare_used+0x28>
  412ddc:	4b20      	ldr	r3, [pc, #128]	; (412e60 <block_prepare_used+0x94>)
  412dde:	9301      	str	r3, [sp, #4]
  412de0:	4b20      	ldr	r3, [pc, #128]	; (412e64 <block_prepare_used+0x98>)
  412de2:	9300      	str	r3, [sp, #0]
  412de4:	4b20      	ldr	r3, [pc, #128]	; (412e68 <block_prepare_used+0x9c>)
  412de6:	f240 3211 	movw	r2, #785	; 0x311
  412dea:	4920      	ldr	r1, [pc, #128]	; (412e6c <block_prepare_used+0xa0>)
  412dec:	2003      	movs	r0, #3
  412dee:	4c20      	ldr	r4, [pc, #128]	; (412e70 <block_prepare_used+0xa4>)
  412df0:	47a0      	blx	r4
  412df2:	e7fe      	b.n	412df2 <block_prepare_used+0x26>
    return tlsf_cast(int, block->size & block_header_free_bit);
  412df4:	6863      	ldr	r3, [r4, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
  412df6:	f013 0f01 	tst.w	r3, #1
  412dfa:	d013      	beq.n	412e24 <block_prepare_used+0x58>
    return block_size(block) >= sizeof(block_header_t) + size;
  412dfc:	3210      	adds	r2, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412dfe:	f023 0303 	bic.w	r3, r3, #3
    if(block_can_split(block, size)) {
  412e02:	429a      	cmp	r2, r3
  412e04:	d91a      	bls.n	412e3c <block_prepare_used+0x70>
    block_header_t * next = block_next(block);
  412e06:	4620      	mov	r0, r4
  412e08:	4b1a      	ldr	r3, [pc, #104]	; (412e74 <block_prepare_used+0xa8>)
  412e0a:	4798      	blx	r3
    block->size &= ~block_header_prev_free_bit;
  412e0c:	6843      	ldr	r3, [r0, #4]
  412e0e:	f023 0302 	bic.w	r3, r3, #2
  412e12:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
  412e14:	6863      	ldr	r3, [r4, #4]
  412e16:	f023 0301 	bic.w	r3, r3, #1
  412e1a:	6063      	str	r3, [r4, #4]
    return tlsf_cast(void *,
  412e1c:	f104 0008 	add.w	r0, r4, #8
}
  412e20:	b002      	add	sp, #8
  412e22:	bd70      	pop	{r4, r5, r6, pc}
    tlsf_assert(block_is_free(block) && "block must be free");
  412e24:	4b14      	ldr	r3, [pc, #80]	; (412e78 <block_prepare_used+0xac>)
  412e26:	9301      	str	r3, [sp, #4]
  412e28:	4b0e      	ldr	r3, [pc, #56]	; (412e64 <block_prepare_used+0x98>)
  412e2a:	9300      	str	r3, [sp, #0]
  412e2c:	4b13      	ldr	r3, [pc, #76]	; (412e7c <block_prepare_used+0xb0>)
  412e2e:	f44f 7233 	mov.w	r2, #716	; 0x2cc
  412e32:	490e      	ldr	r1, [pc, #56]	; (412e6c <block_prepare_used+0xa0>)
  412e34:	2003      	movs	r0, #3
  412e36:	4c0e      	ldr	r4, [pc, #56]	; (412e70 <block_prepare_used+0xa4>)
  412e38:	47a0      	blx	r4
  412e3a:	e7fe      	b.n	412e3a <block_prepare_used+0x6e>
        block_header_t * remaining_block = block_split(block, size);
  412e3c:	4620      	mov	r0, r4
  412e3e:	4b10      	ldr	r3, [pc, #64]	; (412e80 <block_prepare_used+0xb4>)
  412e40:	4798      	blx	r3
  412e42:	4606      	mov	r6, r0
        block_link_next(block);
  412e44:	4620      	mov	r0, r4
  412e46:	4b0f      	ldr	r3, [pc, #60]	; (412e84 <block_prepare_used+0xb8>)
  412e48:	4798      	blx	r3
    block->size |= block_header_prev_free_bit;
  412e4a:	6873      	ldr	r3, [r6, #4]
  412e4c:	f043 0302 	orr.w	r3, r3, #2
  412e50:	6073      	str	r3, [r6, #4]
        block_insert(control, remaining_block);
  412e52:	4631      	mov	r1, r6
  412e54:	4628      	mov	r0, r5
  412e56:	4b0c      	ldr	r3, [pc, #48]	; (412e88 <block_prepare_used+0xbc>)
  412e58:	4798      	blx	r3
  412e5a:	e7d4      	b.n	412e06 <block_prepare_used+0x3a>
    void * p = 0;
  412e5c:	2000      	movs	r0, #0
    return p;
  412e5e:	4770      	bx	lr
  412e60:	00420cbc 	.word	0x00420cbc
  412e64:	00420ac4 	.word	0x00420ac4
  412e68:	00420a1c 	.word	0x00420a1c
  412e6c:	00420e1c 	.word	0x00420e1c
  412e70:	00410edd 	.word	0x00410edd
  412e74:	00412bbd 	.word	0x00412bbd
  412e78:	00420cdc 	.word	0x00420cdc
  412e7c:	004209f8 	.word	0x004209f8
  412e80:	00412c0d 	.word	0x00412c0d
  412e84:	00412bfd 	.word	0x00412bfd
  412e88:	00412ae9 	.word	0x00412ae9

00412e8c <block_locate_free>:
{
  412e8c:	b570      	push	{r4, r5, r6, lr}
  412e8e:	b084      	sub	sp, #16
    int fl = 0, sl = 0;
  412e90:	2300      	movs	r3, #0
  412e92:	9303      	str	r3, [sp, #12]
  412e94:	9302      	str	r3, [sp, #8]
    if(size) {
  412e96:	2900      	cmp	r1, #0
  412e98:	d069      	beq.n	412f6e <block_locate_free+0xe2>
  412e9a:	460d      	mov	r5, r1
    if(size >= SMALL_BLOCK_SIZE) {
  412e9c:	297f      	cmp	r1, #127	; 0x7f
  412e9e:	d93b      	bls.n	412f18 <block_locate_free+0x8c>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
  412ea0:	fab1 f381 	clz	r3, r1
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
  412ea4:	f1c3 021a 	rsb	r2, r3, #26
  412ea8:	2301      	movs	r3, #1
  412eaa:	4093      	lsls	r3, r2
  412eac:	3b01      	subs	r3, #1
        size += round;
  412eae:	440b      	add	r3, r1
  412eb0:	4604      	mov	r4, r0
    mapping_insert(size, fli, sli);
  412eb2:	aa02      	add	r2, sp, #8
  412eb4:	a903      	add	r1, sp, #12
  412eb6:	4618      	mov	r0, r3
  412eb8:	4b2e      	ldr	r3, [pc, #184]	; (412f74 <block_locate_free+0xe8>)
  412eba:	4798      	blx	r3
        if(fl < FL_INDEX_COUNT) {
  412ebc:	9903      	ldr	r1, [sp, #12]
  412ebe:	2908      	cmp	r1, #8
  412ec0:	dc55      	bgt.n	412f6e <block_locate_free+0xe2>
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
  412ec2:	9a02      	ldr	r2, [sp, #8]
  412ec4:	f04f 33ff 	mov.w	r3, #4294967295
  412ec8:	4093      	lsls	r3, r2
  412eca:	eb04 0281 	add.w	r2, r4, r1, lsl #2
  412ece:	6952      	ldr	r2, [r2, #20]
    if(!sl_map) {
  412ed0:	4013      	ands	r3, r2
  412ed2:	d123      	bne.n	412f1c <block_locate_free+0x90>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
  412ed4:	1c4a      	adds	r2, r1, #1
  412ed6:	f04f 33ff 	mov.w	r3, #4294967295
  412eda:	fa03 f202 	lsl.w	r2, r3, r2
  412ede:	6923      	ldr	r3, [r4, #16]
        if(!fl_map) {
  412ee0:	401a      	ands	r2, r3
  412ee2:	d044      	beq.n	412f6e <block_locate_free+0xe2>
    return __builtin_ffs(word) - 1;
  412ee4:	fa92 f3a2 	rbit	r3, r2
  412ee8:	fab3 f383 	clz	r3, r3
  412eec:	2a00      	cmp	r2, #0
  412eee:	bf08      	it	eq
  412ef0:	f04f 33ff 	moveq.w	r3, #4294967295
  412ef4:	4619      	mov	r1, r3
        *fli = fl;
  412ef6:	9303      	str	r3, [sp, #12]
        sl_map = control->sl_bitmap[fl];
  412ef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412efc:	695b      	ldr	r3, [r3, #20]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
  412efe:	b96b      	cbnz	r3, 412f1c <block_locate_free+0x90>
  412f00:	4b1d      	ldr	r3, [pc, #116]	; (412f78 <block_locate_free+0xec>)
  412f02:	9301      	str	r3, [sp, #4]
  412f04:	4b1d      	ldr	r3, [pc, #116]	; (412f7c <block_locate_free+0xf0>)
  412f06:	9300      	str	r3, [sp, #0]
  412f08:	4b1d      	ldr	r3, [pc, #116]	; (412f80 <block_locate_free+0xf4>)
  412f0a:	f44f 7210 	mov.w	r2, #576	; 0x240
  412f0e:	491d      	ldr	r1, [pc, #116]	; (412f84 <block_locate_free+0xf8>)
  412f10:	2003      	movs	r0, #3
  412f12:	4c1d      	ldr	r4, [pc, #116]	; (412f88 <block_locate_free+0xfc>)
  412f14:	47a0      	blx	r4
  412f16:	e7fe      	b.n	412f16 <block_locate_free+0x8a>
    if(size >= SMALL_BLOCK_SIZE) {
  412f18:	460b      	mov	r3, r1
  412f1a:	e7c9      	b.n	412eb0 <block_locate_free+0x24>
    return __builtin_ffs(word) - 1;
  412f1c:	fa93 f2a3 	rbit	r2, r3
  412f20:	fab2 f282 	clz	r2, r2
  412f24:	2b00      	cmp	r3, #0
  412f26:	bf08      	it	eq
  412f28:	f04f 32ff 	moveq.w	r2, #4294967295
  412f2c:	4613      	mov	r3, r2
    *sli = sl;
  412f2e:	9202      	str	r2, [sp, #8]
    return control->blocks[fl][sl];
  412f30:	eb02 1241 	add.w	r2, r2, r1, lsl #5
  412f34:	320e      	adds	r2, #14
  412f36:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    if(block) {
  412f3a:	b1ae      	cbz	r6, 412f68 <block_locate_free+0xdc>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412f3c:	6872      	ldr	r2, [r6, #4]
  412f3e:	f022 0203 	bic.w	r2, r2, #3
        tlsf_assert(block_size(block) >= size);
  412f42:	4295      	cmp	r5, r2
  412f44:	d90b      	bls.n	412f5e <block_locate_free+0xd2>
  412f46:	4b11      	ldr	r3, [pc, #68]	; (412f8c <block_locate_free+0x100>)
  412f48:	9301      	str	r3, [sp, #4]
  412f4a:	4b0c      	ldr	r3, [pc, #48]	; (412f7c <block_locate_free+0xf0>)
  412f4c:	9300      	str	r3, [sp, #0]
  412f4e:	4b10      	ldr	r3, [pc, #64]	; (412f90 <block_locate_free+0x104>)
  412f50:	f240 3206 	movw	r2, #774	; 0x306
  412f54:	490b      	ldr	r1, [pc, #44]	; (412f84 <block_locate_free+0xf8>)
  412f56:	2003      	movs	r0, #3
  412f58:	4c0b      	ldr	r4, [pc, #44]	; (412f88 <block_locate_free+0xfc>)
  412f5a:	47a0      	blx	r4
  412f5c:	e7fe      	b.n	412f5c <block_locate_free+0xd0>
        remove_free_block(control, block, fl, sl);
  412f5e:	9a03      	ldr	r2, [sp, #12]
  412f60:	4631      	mov	r1, r6
  412f62:	4620      	mov	r0, r4
  412f64:	4c0b      	ldr	r4, [pc, #44]	; (412f94 <block_locate_free+0x108>)
  412f66:	47a0      	blx	r4
}
  412f68:	4630      	mov	r0, r6
  412f6a:	b004      	add	sp, #16
  412f6c:	bd70      	pop	{r4, r5, r6, pc}
    if(size >= SMALL_BLOCK_SIZE) {
  412f6e:	2600      	movs	r6, #0
  412f70:	e7fa      	b.n	412f68 <block_locate_free+0xdc>
  412f72:	bf00      	nop
  412f74:	00412a7d 	.word	0x00412a7d
  412f78:	00420be8 	.word	0x00420be8
  412f7c:	00420ac4 	.word	0x00420ac4
  412f80:	00420974 	.word	0x00420974
  412f84:	00420e1c 	.word	0x00420e1c
  412f88:	00410edd 	.word	0x00410edd
  412f8c:	00420c24 	.word	0x00420c24
  412f90:	00420a08 	.word	0x00420a08
  412f94:	00412991 	.word	0x00412991

00412f98 <lv_tlsf_walk_pool>:

void lv_tlsf_walk_pool(lv_pool_t pool, lv_tlsf_walker walker, void * user)
{
  412f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_tlsf_walker pool_walker = walker ? walker : default_walker;
  412f9a:	1e0d      	subs	r5, r1, #0
  412f9c:	4b0e      	ldr	r3, [pc, #56]	; (412fd8 <lv_tlsf_walk_pool+0x40>)
  412f9e:	2900      	cmp	r1, #0
  412fa0:	bf08      	it	eq
  412fa2:	461d      	moveq	r5, r3
    block_header_t * block =
        offset_to_block(pool, -(int)block_header_overhead);

    while(block && !block_is_last(block)) {
  412fa4:	1f04      	subs	r4, r0, #4
  412fa6:	d016      	beq.n	412fd6 <lv_tlsf_walk_pool+0x3e>
  412fa8:	4616      	mov	r6, r2
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412faa:	6863      	ldr	r3, [r4, #4]
    while(block && !block_is_last(block)) {
  412fac:	f033 0103 	bics.w	r1, r3, #3
  412fb0:	d011      	beq.n	412fd6 <lv_tlsf_walk_pool+0x3e>
        pool_walker(
            block_to_ptr(block),
            block_size(block),
            !block_is_free(block),
            user);
        block = block_next(block);
  412fb2:	4f0a      	ldr	r7, [pc, #40]	; (412fdc <lv_tlsf_walk_pool+0x44>)
        pool_walker(
  412fb4:	f013 0f01 	tst.w	r3, #1
  412fb8:	4633      	mov	r3, r6
  412fba:	bf0c      	ite	eq
  412fbc:	2201      	moveq	r2, #1
  412fbe:	2200      	movne	r2, #0
  412fc0:	f104 0008 	add.w	r0, r4, #8
  412fc4:	47a8      	blx	r5
        block = block_next(block);
  412fc6:	4620      	mov	r0, r4
  412fc8:	47b8      	blx	r7
    while(block && !block_is_last(block)) {
  412fca:	4604      	mov	r4, r0
  412fcc:	b118      	cbz	r0, 412fd6 <lv_tlsf_walk_pool+0x3e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  412fce:	6843      	ldr	r3, [r0, #4]
    while(block && !block_is_last(block)) {
  412fd0:	f033 0103 	bics.w	r1, r3, #3
  412fd4:	d1ee      	bne.n	412fb4 <lv_tlsf_walk_pool+0x1c>
  412fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412fd8:	00412905 	.word	0x00412905
  412fdc:	00412bbd 	.word	0x00412bbd

00412fe0 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
  412fe0:	b530      	push	{r4, r5, lr}
  412fe2:	b085      	sub	sp, #20
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
  412fe4:	f011 0f03 	tst.w	r1, #3
  412fe8:	d11b      	bne.n	413022 <lv_tlsf_add_pool+0x42>
  412fea:	460c      	mov	r4, r1
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
  412fec:	f1a2 0308 	sub.w	r3, r2, #8
    return x - (x & (align - 1));
  412ff0:	f023 0303 	bic.w	r3, r3, #3
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
  412ff4:	f1a3 010c 	sub.w	r1, r3, #12
  412ff8:	f647 72f4 	movw	r2, #32756	; 0x7ff4
  412ffc:	4291      	cmp	r1, r2
  412ffe:	d81d      	bhi.n	41303c <lv_tlsf_add_pool+0x5c>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
  413000:	4625      	mov	r5, r4
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
  413002:	f855 2904 	ldr.w	r2, [r5], #-4
    block->size &= ~block_header_prev_free_bit;
  413006:	f043 0301 	orr.w	r3, r3, #1
  41300a:	606b      	str	r3, [r5, #4]
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
    block_set_size(block, pool_bytes);
    block_set_free(block);
    block_set_prev_used(block);
    block_insert(tlsf_cast(control_t *, tlsf), block);
  41300c:	4629      	mov	r1, r5
  41300e:	4b13      	ldr	r3, [pc, #76]	; (41305c <lv_tlsf_add_pool+0x7c>)
  413010:	4798      	blx	r3

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
  413012:	4628      	mov	r0, r5
  413014:	4b12      	ldr	r3, [pc, #72]	; (413060 <lv_tlsf_add_pool+0x80>)
  413016:	4798      	blx	r3
    block->size |= block_header_prev_free_bit;
  413018:	2302      	movs	r3, #2
  41301a:	6043      	str	r3, [r0, #4]
    block_set_size(next, 0);
    block_set_used(next);
    block_set_prev_free(next);

    return mem;
  41301c:	4620      	mov	r0, r4
}
  41301e:	b005      	add	sp, #20
  413020:	bd30      	pop	{r4, r5, pc}
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
  413022:	2304      	movs	r3, #4
  413024:	9301      	str	r3, [sp, #4]
  413026:	4b0f      	ldr	r3, [pc, #60]	; (413064 <lv_tlsf_add_pool+0x84>)
  413028:	9300      	str	r3, [sp, #0]
  41302a:	4b0f      	ldr	r3, [pc, #60]	; (413068 <lv_tlsf_add_pool+0x88>)
  41302c:	f44f 7274 	mov.w	r2, #976	; 0x3d0
  413030:	490e      	ldr	r1, [pc, #56]	; (41306c <lv_tlsf_add_pool+0x8c>)
  413032:	2003      	movs	r0, #3
  413034:	4c0e      	ldr	r4, [pc, #56]	; (413070 <lv_tlsf_add_pool+0x90>)
  413036:	47a0      	blx	r4
        return 0;
  413038:	2000      	movs	r0, #0
  41303a:	e7f0      	b.n	41301e <lv_tlsf_add_pool+0x3e>
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
  41303c:	f248 0308 	movw	r3, #32776	; 0x8008
  413040:	9302      	str	r3, [sp, #8]
  413042:	2314      	movs	r3, #20
  413044:	9301      	str	r3, [sp, #4]
  413046:	4b0b      	ldr	r3, [pc, #44]	; (413074 <lv_tlsf_add_pool+0x94>)
  413048:	9300      	str	r3, [sp, #0]
  41304a:	4b07      	ldr	r3, [pc, #28]	; (413068 <lv_tlsf_add_pool+0x88>)
  41304c:	f240 32db 	movw	r2, #987	; 0x3db
  413050:	4906      	ldr	r1, [pc, #24]	; (41306c <lv_tlsf_add_pool+0x8c>)
  413052:	2003      	movs	r0, #3
  413054:	4c06      	ldr	r4, [pc, #24]	; (413070 <lv_tlsf_add_pool+0x90>)
  413056:	47a0      	blx	r4
        return 0;
  413058:	2000      	movs	r0, #0
  41305a:	e7e0      	b.n	41301e <lv_tlsf_add_pool+0x3e>
  41305c:	00412ae9 	.word	0x00412ae9
  413060:	00412bfd 	.word	0x00412bfd
  413064:	00420e64 	.word	0x00420e64
  413068:	00420a40 	.word	0x00420a40
  41306c:	00420e1c 	.word	0x00420e1c
  413070:	00410edd 	.word	0x00410edd
  413074:	00420e9c 	.word	0x00420e9c

00413078 <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
  413078:	b570      	push	{r4, r5, r6, lr}
  41307a:	b082      	sub	sp, #8
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
  41307c:	f010 0f03 	tst.w	r0, #3
  413080:	d117      	bne.n	4130b2 <lv_tlsf_create+0x3a>
    control->block_null.next_free = &control->block_null;
  413082:	4601      	mov	r1, r0
  413084:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
  413086:	60c0      	str	r0, [r0, #12]
    control->fl_bitmap = 0;
  413088:	4604      	mov	r4, r0
  41308a:	2300      	movs	r3, #0
  41308c:	f844 3f10 	str.w	r3, [r4, #16]!
  413090:	f100 0334 	add.w	r3, r0, #52	; 0x34
  413094:	461e      	mov	r6, r3
        control->sl_bitmap[i] = 0;
  413096:	2500      	movs	r5, #0
  413098:	f844 5f04 	str.w	r5, [r4, #4]!
  41309c:	f103 0280 	add.w	r2, r3, #128	; 0x80
            control->blocks[i][j] = &control->block_null;
  4130a0:	f843 1f04 	str.w	r1, [r3, #4]!
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
  4130a4:	4293      	cmp	r3, r2
  4130a6:	d1fb      	bne.n	4130a0 <lv_tlsf_create+0x28>
  4130a8:	4613      	mov	r3, r2
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
  4130aa:	42b4      	cmp	r4, r6
  4130ac:	d1f4      	bne.n	413098 <lv_tlsf_create+0x20>
    }

    control_constructor(tlsf_cast(control_t *, mem));

    return tlsf_cast(lv_tlsf_t, mem);
}
  4130ae:	b002      	add	sp, #8
  4130b0:	bd70      	pop	{r4, r5, r6, pc}
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
  4130b2:	2304      	movs	r3, #4
  4130b4:	9301      	str	r3, [sp, #4]
  4130b6:	4b05      	ldr	r3, [pc, #20]	; (4130cc <lv_tlsf_create+0x54>)
  4130b8:	9300      	str	r3, [sp, #0]
  4130ba:	4b05      	ldr	r3, [pc, #20]	; (4130d0 <lv_tlsf_create+0x58>)
  4130bc:	f240 422d 	movw	r2, #1069	; 0x42d
  4130c0:	4904      	ldr	r1, [pc, #16]	; (4130d4 <lv_tlsf_create+0x5c>)
  4130c2:	2003      	movs	r0, #3
  4130c4:	4c04      	ldr	r4, [pc, #16]	; (4130d8 <lv_tlsf_create+0x60>)
  4130c6:	47a0      	blx	r4
        return 0;
  4130c8:	2000      	movs	r0, #0
  4130ca:	e7f0      	b.n	4130ae <lv_tlsf_create+0x36>
  4130cc:	00420edc 	.word	0x00420edc
  4130d0:	00420a54 	.word	0x00420a54
  4130d4:	00420e1c 	.word	0x00420e1c
  4130d8:	00410edd 	.word	0x00410edd

004130dc <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
  4130dc:	b570      	push	{r4, r5, r6, lr}
  4130de:	4605      	mov	r5, r0
  4130e0:	460e      	mov	r6, r1
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
  4130e2:	4b05      	ldr	r3, [pc, #20]	; (4130f8 <lv_tlsf_create_with_pool+0x1c>)
  4130e4:	4798      	blx	r3
  4130e6:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
  4130e8:	f5a6 6297 	sub.w	r2, r6, #1208	; 0x4b8
  4130ec:	f505 6197 	add.w	r1, r5, #1208	; 0x4b8
  4130f0:	4b02      	ldr	r3, [pc, #8]	; (4130fc <lv_tlsf_create_with_pool+0x20>)
  4130f2:	4798      	blx	r3
    return tlsf;
}
  4130f4:	4620      	mov	r0, r4
  4130f6:	bd70      	pop	{r4, r5, r6, pc}
  4130f8:	00413079 	.word	0x00413079
  4130fc:	00412fe1 	.word	0x00412fe1

00413100 <lv_tlsf_get_pool>:
}

lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}
  413100:	f500 6097 	add.w	r0, r0, #1208	; 0x4b8
  413104:	4770      	bx	lr
	...

00413108 <lv_tlsf_malloc>:

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
  413108:	b538      	push	{r3, r4, r5, lr}
  41310a:	4604      	mov	r4, r0
  41310c:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
  41310e:	2104      	movs	r1, #4
  413110:	4b06      	ldr	r3, [pc, #24]	; (41312c <lv_tlsf_malloc+0x24>)
  413112:	4798      	blx	r3
  413114:	4605      	mov	r5, r0
    block_header_t * block = block_locate_free(control, adjust);
  413116:	4601      	mov	r1, r0
  413118:	4620      	mov	r0, r4
  41311a:	4b05      	ldr	r3, [pc, #20]	; (413130 <lv_tlsf_malloc+0x28>)
  41311c:	4798      	blx	r3
    return block_prepare_used(control, block, adjust);
  41311e:	462a      	mov	r2, r5
  413120:	4601      	mov	r1, r0
  413122:	4620      	mov	r0, r4
  413124:	4b03      	ldr	r3, [pc, #12]	; (413134 <lv_tlsf_malloc+0x2c>)
  413126:	4798      	blx	r3
}
  413128:	bd38      	pop	{r3, r4, r5, pc}
  41312a:	bf00      	nop
  41312c:	00412a25 	.word	0x00412a25
  413130:	00412e8d 	.word	0x00412e8d
  413134:	00412dcd 	.word	0x00412dcd

00413138 <lv_tlsf_free>:
}

void lv_tlsf_free(lv_tlsf_t tlsf, void * ptr)
{
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
  413138:	2900      	cmp	r1, #0
  41313a:	d059      	beq.n	4131f0 <lv_tlsf_free+0xb8>
{
  41313c:	b570      	push	{r4, r5, r6, lr}
  41313e:	b082      	sub	sp, #8
  413140:	460c      	mov	r4, r1
  413142:	4605      	mov	r5, r0
    return tlsf_cast(int, block->size & block_header_free_bit);
  413144:	f851 3c04 	ldr.w	r3, [r1, #-4]
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
  413148:	f013 0f01 	tst.w	r3, #1
  41314c:	d00b      	beq.n	413166 <lv_tlsf_free+0x2e>
  41314e:	4b29      	ldr	r3, [pc, #164]	; (4131f4 <lv_tlsf_free+0xbc>)
  413150:	9301      	str	r3, [sp, #4]
  413152:	4b29      	ldr	r3, [pc, #164]	; (4131f8 <lv_tlsf_free+0xc0>)
  413154:	9300      	str	r3, [sp, #0]
  413156:	4b29      	ldr	r3, [pc, #164]	; (4131fc <lv_tlsf_free+0xc4>)
  413158:	f240 428d 	movw	r2, #1165	; 0x48d
  41315c:	4928      	ldr	r1, [pc, #160]	; (413200 <lv_tlsf_free+0xc8>)
  41315e:	2003      	movs	r0, #3
  413160:	4c28      	ldr	r4, [pc, #160]	; (413204 <lv_tlsf_free+0xcc>)
  413162:	47a0      	blx	r4
  413164:	e7fe      	b.n	413164 <lv_tlsf_free+0x2c>
    return tlsf_cast(block_header_t *,
  413166:	f1a1 0608 	sub.w	r6, r1, #8
    block_header_t * next = block_link_next(block);
  41316a:	4630      	mov	r0, r6
  41316c:	4b26      	ldr	r3, [pc, #152]	; (413208 <lv_tlsf_free+0xd0>)
  41316e:	4798      	blx	r3
    block->size |= block_header_prev_free_bit;
  413170:	6843      	ldr	r3, [r0, #4]
  413172:	f043 0302 	orr.w	r3, r3, #2
  413176:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
  413178:	f854 3c04 	ldr.w	r3, [r4, #-4]
  41317c:	f043 0301 	orr.w	r3, r3, #1
  413180:	f844 3c04 	str.w	r3, [r4, #-4]
    if(block_is_prev_free(block)) {
  413184:	f013 0f02 	tst.w	r3, #2
  413188:	d109      	bne.n	41319e <lv_tlsf_free+0x66>
        block_mark_as_free(block);
        block = block_merge_prev(control, block);
        block = block_merge_next(control, block);
  41318a:	4631      	mov	r1, r6
  41318c:	4628      	mov	r0, r5
  41318e:	4b1f      	ldr	r3, [pc, #124]	; (41320c <lv_tlsf_free+0xd4>)
  413190:	4798      	blx	r3
        block_insert(control, block);
  413192:	4601      	mov	r1, r0
  413194:	4628      	mov	r0, r5
  413196:	4b1e      	ldr	r3, [pc, #120]	; (413210 <lv_tlsf_free+0xd8>)
  413198:	4798      	blx	r3
    }
}
  41319a:	b002      	add	sp, #8
  41319c:	bd70      	pop	{r4, r5, r6, pc}
    return block->prev_phys_block;
  41319e:	f854 4c08 	ldr.w	r4, [r4, #-8]
        tlsf_assert(prev && "prev physical block can't be null");
  4131a2:	b95c      	cbnz	r4, 4131bc <lv_tlsf_free+0x84>
  4131a4:	4b1b      	ldr	r3, [pc, #108]	; (413214 <lv_tlsf_free+0xdc>)
  4131a6:	9301      	str	r3, [sp, #4]
  4131a8:	4b13      	ldr	r3, [pc, #76]	; (4131f8 <lv_tlsf_free+0xc0>)
  4131aa:	9300      	str	r3, [sp, #0]
  4131ac:	4b1a      	ldr	r3, [pc, #104]	; (413218 <lv_tlsf_free+0xe0>)
  4131ae:	f240 22b1 	movw	r2, #689	; 0x2b1
  4131b2:	4913      	ldr	r1, [pc, #76]	; (413200 <lv_tlsf_free+0xc8>)
  4131b4:	2003      	movs	r0, #3
  4131b6:	4c13      	ldr	r4, [pc, #76]	; (413204 <lv_tlsf_free+0xcc>)
  4131b8:	47a0      	blx	r4
  4131ba:	e7fe      	b.n	4131ba <lv_tlsf_free+0x82>
    return tlsf_cast(int, block->size & block_header_free_bit);
  4131bc:	6863      	ldr	r3, [r4, #4]
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
  4131be:	f013 0f01 	tst.w	r3, #1
  4131c2:	d10b      	bne.n	4131dc <lv_tlsf_free+0xa4>
  4131c4:	4b15      	ldr	r3, [pc, #84]	; (41321c <lv_tlsf_free+0xe4>)
  4131c6:	9301      	str	r3, [sp, #4]
  4131c8:	4b0b      	ldr	r3, [pc, #44]	; (4131f8 <lv_tlsf_free+0xc0>)
  4131ca:	9300      	str	r3, [sp, #0]
  4131cc:	4b12      	ldr	r3, [pc, #72]	; (413218 <lv_tlsf_free+0xe0>)
  4131ce:	f240 22b2 	movw	r2, #690	; 0x2b2
  4131d2:	490b      	ldr	r1, [pc, #44]	; (413200 <lv_tlsf_free+0xc8>)
  4131d4:	2003      	movs	r0, #3
  4131d6:	4c0b      	ldr	r4, [pc, #44]	; (413204 <lv_tlsf_free+0xcc>)
  4131d8:	47a0      	blx	r4
  4131da:	e7fe      	b.n	4131da <lv_tlsf_free+0xa2>
        block_remove(control, prev);
  4131dc:	4621      	mov	r1, r4
  4131de:	4628      	mov	r0, r5
  4131e0:	4b0f      	ldr	r3, [pc, #60]	; (413220 <lv_tlsf_free+0xe8>)
  4131e2:	4798      	blx	r3
        block = block_absorb(prev, block);
  4131e4:	4631      	mov	r1, r6
  4131e6:	4620      	mov	r0, r4
  4131e8:	4b0e      	ldr	r3, [pc, #56]	; (413224 <lv_tlsf_free+0xec>)
  4131ea:	4798      	blx	r3
  4131ec:	4606      	mov	r6, r0
  4131ee:	e7cc      	b.n	41318a <lv_tlsf_free+0x52>
  4131f0:	4770      	bx	lr
  4131f2:	bf00      	nop
  4131f4:	00420f14 	.word	0x00420f14
  4131f8:	00420ac4 	.word	0x00420ac4
  4131fc:	00420a64 	.word	0x00420a64
  413200:	00420e1c 	.word	0x00420e1c
  413204:	00410edd 	.word	0x00410edd
  413208:	00412bfd 	.word	0x00412bfd
  41320c:	00412d3d 	.word	0x00412d3d
  413210:	00412ae9 	.word	0x00412ae9
  413214:	00420f4c 	.word	0x00420f4c
  413218:	004209d0 	.word	0x004209d0
  41321c:	00420f78 	.word	0x00420f78
  413220:	00412ab9 	.word	0x00412ab9
  413224:	00412ce9 	.word	0x00412ce9

00413228 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
  413228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41322c:	b083      	sub	sp, #12
  41322e:	4605      	mov	r5, r0
  413230:	4691      	mov	r9, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
  413232:	460c      	mov	r4, r1
  413234:	b109      	cbz	r1, 41323a <lv_tlsf_realloc+0x12>
  413236:	2a00      	cmp	r2, #0
  413238:	d03e      	beq.n	4132b8 <lv_tlsf_realloc+0x90>
        lv_tlsf_free(tlsf, ptr);
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
  41323a:	2c00      	cmp	r4, #0
  41323c:	d040      	beq.n	4132c0 <lv_tlsf_realloc+0x98>
    return tlsf_cast(block_header_t *,
  41323e:	f1a4 0708 	sub.w	r7, r4, #8
        p = lv_tlsf_malloc(tlsf, size);
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
        block_header_t * next = block_next(block);
  413242:	4638      	mov	r0, r7
  413244:	4b3c      	ldr	r3, [pc, #240]	; (413338 <lv_tlsf_realloc+0x110>)
  413246:	4798      	blx	r3
  413248:	4683      	mov	fp, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  41324a:	f854 8c04 	ldr.w	r8, [r4, #-4]
  41324e:	f8d0 a004 	ldr.w	sl, [r0, #4]

        const size_t cursize = block_size(block);
        const size_t combined = cursize + block_size(next) + block_header_overhead;
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
  413252:	2104      	movs	r1, #4
  413254:	4648      	mov	r0, r9
  413256:	4b39      	ldr	r3, [pc, #228]	; (41333c <lv_tlsf_realloc+0x114>)
  413258:	4798      	blx	r3
  41325a:	4606      	mov	r6, r0
    return tlsf_cast(int, block->size & block_header_free_bit);
  41325c:	f854 3c04 	ldr.w	r3, [r4, #-4]

        tlsf_assert(!block_is_free(block) && "block already marked as free");
  413260:	f013 0f01 	tst.w	r3, #1
  413264:	d132      	bne.n	4132cc <lv_tlsf_realloc+0xa4>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  413266:	f028 0803 	bic.w	r8, r8, #3

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
  41326a:	4540      	cmp	r0, r8
  41326c:	d961      	bls.n	413332 <lv_tlsf_realloc+0x10a>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  41326e:	f02a 0303 	bic.w	r3, sl, #3
        const size_t combined = cursize + block_size(next) + block_header_overhead;
  413272:	f108 0204 	add.w	r2, r8, #4
  413276:	4413      	add	r3, r2
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
  413278:	4283      	cmp	r3, r0
  41327a:	d333      	bcc.n	4132e4 <lv_tlsf_realloc+0xbc>
  41327c:	f8db 3004 	ldr.w	r3, [fp, #4]
  413280:	f013 0f01 	tst.w	r3, #1
  413284:	d02e      	beq.n	4132e4 <lv_tlsf_realloc+0xbc>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
                block_merge_next(control, block);
  413286:	4639      	mov	r1, r7
  413288:	4628      	mov	r0, r5
  41328a:	4b2d      	ldr	r3, [pc, #180]	; (413340 <lv_tlsf_realloc+0x118>)
  41328c:	4798      	blx	r3
    block_header_t * next = block_next(block);
  41328e:	4638      	mov	r0, r7
  413290:	4b29      	ldr	r3, [pc, #164]	; (413338 <lv_tlsf_realloc+0x110>)
  413292:	4798      	blx	r3
    block->size &= ~block_header_prev_free_bit;
  413294:	6843      	ldr	r3, [r0, #4]
  413296:	f023 0302 	bic.w	r3, r3, #2
  41329a:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
  41329c:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4132a0:	f023 0301 	bic.w	r3, r3, #1
  4132a4:	f844 3c04 	str.w	r3, [r4, #-4]
    return block_size(block) >= sizeof(block_header_t) + size;
  4132a8:	f106 0210 	add.w	r2, r6, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  4132ac:	f023 0303 	bic.w	r3, r3, #3
    if(block_can_split(block, size)) {
  4132b0:	429a      	cmp	r2, r3
  4132b2:	d92c      	bls.n	41330e <lv_tlsf_realloc+0xe6>
                block_mark_as_used(block);
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
            p = ptr;
  4132b4:	4626      	mov	r6, r4
        }
    }

    return p;
  4132b6:	e026      	b.n	413306 <lv_tlsf_realloc+0xde>
        lv_tlsf_free(tlsf, ptr);
  4132b8:	4b22      	ldr	r3, [pc, #136]	; (413344 <lv_tlsf_realloc+0x11c>)
  4132ba:	4798      	blx	r3
    void * p = 0;
  4132bc:	2600      	movs	r6, #0
  4132be:	e022      	b.n	413306 <lv_tlsf_realloc+0xde>
        p = lv_tlsf_malloc(tlsf, size);
  4132c0:	4649      	mov	r1, r9
  4132c2:	4628      	mov	r0, r5
  4132c4:	4b20      	ldr	r3, [pc, #128]	; (413348 <lv_tlsf_realloc+0x120>)
  4132c6:	4798      	blx	r3
  4132c8:	4606      	mov	r6, r0
  4132ca:	e01c      	b.n	413306 <lv_tlsf_realloc+0xde>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
  4132cc:	4b1f      	ldr	r3, [pc, #124]	; (41334c <lv_tlsf_realloc+0x124>)
  4132ce:	9301      	str	r3, [sp, #4]
  4132d0:	4b1f      	ldr	r3, [pc, #124]	; (413350 <lv_tlsf_realloc+0x128>)
  4132d2:	9300      	str	r3, [sp, #0]
  4132d4:	4b1f      	ldr	r3, [pc, #124]	; (413354 <lv_tlsf_realloc+0x12c>)
  4132d6:	f240 42b7 	movw	r2, #1207	; 0x4b7
  4132da:	491f      	ldr	r1, [pc, #124]	; (413358 <lv_tlsf_realloc+0x130>)
  4132dc:	2003      	movs	r0, #3
  4132de:	4c1f      	ldr	r4, [pc, #124]	; (41335c <lv_tlsf_realloc+0x134>)
  4132e0:	47a0      	blx	r4
  4132e2:	e7fe      	b.n	4132e2 <lv_tlsf_realloc+0xba>
            p = lv_tlsf_malloc(tlsf, size);
  4132e4:	4649      	mov	r1, r9
  4132e6:	4628      	mov	r0, r5
  4132e8:	4b17      	ldr	r3, [pc, #92]	; (413348 <lv_tlsf_realloc+0x120>)
  4132ea:	4798      	blx	r3
            if(p) {
  4132ec:	4606      	mov	r6, r0
  4132ee:	b150      	cbz	r0, 413306 <lv_tlsf_realloc+0xde>
                lv_memcpy(p, ptr, minsize);
  4132f0:	464a      	mov	r2, r9
  4132f2:	45c1      	cmp	r9, r8
  4132f4:	bf28      	it	cs
  4132f6:	4642      	movcs	r2, r8
  4132f8:	4621      	mov	r1, r4
  4132fa:	4b19      	ldr	r3, [pc, #100]	; (413360 <lv_tlsf_realloc+0x138>)
  4132fc:	4798      	blx	r3
                lv_tlsf_free(tlsf, ptr);
  4132fe:	4621      	mov	r1, r4
  413300:	4628      	mov	r0, r5
  413302:	4b10      	ldr	r3, [pc, #64]	; (413344 <lv_tlsf_realloc+0x11c>)
  413304:	4798      	blx	r3
}
  413306:	4630      	mov	r0, r6
  413308:	b003      	add	sp, #12
  41330a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        block_header_t * remaining_block = block_split(block, size);
  41330e:	4631      	mov	r1, r6
  413310:	4638      	mov	r0, r7
  413312:	4b14      	ldr	r3, [pc, #80]	; (413364 <lv_tlsf_realloc+0x13c>)
  413314:	4798      	blx	r3
  413316:	4601      	mov	r1, r0
    block->size &= ~block_header_prev_free_bit;
  413318:	6843      	ldr	r3, [r0, #4]
  41331a:	f023 0302 	bic.w	r3, r3, #2
  41331e:	6043      	str	r3, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
  413320:	4628      	mov	r0, r5
  413322:	4b07      	ldr	r3, [pc, #28]	; (413340 <lv_tlsf_realloc+0x118>)
  413324:	4798      	blx	r3
        block_insert(control, remaining_block);
  413326:	4601      	mov	r1, r0
  413328:	4628      	mov	r0, r5
  41332a:	4b0f      	ldr	r3, [pc, #60]	; (413368 <lv_tlsf_realloc+0x140>)
  41332c:	4798      	blx	r3
            p = ptr;
  41332e:	4626      	mov	r6, r4
  413330:	e7e9      	b.n	413306 <lv_tlsf_realloc+0xde>
    return tlsf_cast(int, block->size & block_header_free_bit);
  413332:	f854 3c04 	ldr.w	r3, [r4, #-4]
  413336:	e7b7      	b.n	4132a8 <lv_tlsf_realloc+0x80>
  413338:	00412bbd 	.word	0x00412bbd
  41333c:	00412a25 	.word	0x00412a25
  413340:	00412d3d 	.word	0x00412d3d
  413344:	00413139 	.word	0x00413139
  413348:	00413109 	.word	0x00413109
  41334c:	00420f14 	.word	0x00420f14
  413350:	00420ac4 	.word	0x00420ac4
  413354:	00420a74 	.word	0x00420a74
  413358:	00420e1c 	.word	0x00420e1c
  41335c:	00410edd 	.word	0x00410edd
  413360:	00411161 	.word	0x00411161
  413364:	00412c0d 	.word	0x00412c0d
  413368:	00412ae9 	.word	0x00412ae9

0041336c <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
  41336c:	7803      	ldrb	r3, [r0, #0]
  41336e:	f013 0f80 	tst.w	r3, #128	; 0x80
  413372:	d101      	bne.n	413378 <lv_txt_utf8_size+0xc>
        return 1;
  413374:	2001      	movs	r0, #1
  413376:	4770      	bx	lr
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
  413378:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
  41337c:	2ac0      	cmp	r2, #192	; 0xc0
  41337e:	d00a      	beq.n	413396 <lv_txt_utf8_size+0x2a>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
  413380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  413384:	2ae0      	cmp	r2, #224	; 0xe0
  413386:	d008      	beq.n	41339a <lv_txt_utf8_size+0x2e>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
  413388:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
    return 0;
  41338c:	2bf0      	cmp	r3, #240	; 0xf0
  41338e:	bf0c      	ite	eq
  413390:	2004      	moveq	r0, #4
  413392:	2000      	movne	r0, #0
  413394:	4770      	bx	lr
        return 2;
  413396:	2002      	movs	r0, #2
  413398:	4770      	bx	lr
        return 3;
  41339a:	2003      	movs	r0, #3
}
  41339c:	4770      	bx	lr

0041339e <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  41339e:	b470      	push	{r4, r5, r6}
  4133a0:	b083      	sub	sp, #12
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  4133a2:	2300      	movs	r3, #0
  4133a4:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  4133a6:	460c      	mov	r4, r1
  4133a8:	b151      	cbz	r1, 4133c0 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
  4133aa:	6822      	ldr	r2, [r4, #0]
  4133ac:	5c83      	ldrb	r3, [r0, r2]
  4133ae:	f013 0f80 	tst.w	r3, #128	; 0x80
  4133b2:	d107      	bne.n	4133c4 <lv_txt_utf8_next+0x26>
        result = txt[*i];
  4133b4:	4618      	mov	r0, r3
        (*i)++;
  4133b6:	3201      	adds	r2, #1
  4133b8:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  4133ba:	b003      	add	sp, #12
  4133bc:	bc70      	pop	{r4, r5, r6}
  4133be:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  4133c0:	ac01      	add	r4, sp, #4
  4133c2:	e7f2      	b.n	4133aa <lv_txt_utf8_next+0xc>
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
  4133c4:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  4133c8:	29c0      	cmp	r1, #192	; 0xc0
  4133ca:	d00b      	beq.n	4133e4 <lv_txt_utf8_next+0x46>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
  4133cc:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  4133d0:	29e0      	cmp	r1, #224	; 0xe0
  4133d2:	d019      	beq.n	413408 <lv_txt_utf8_next+0x6a>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
  4133d4:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  4133d8:	29f0      	cmp	r1, #240	; 0xf0
  4133da:	d033      	beq.n	413444 <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  4133dc:	3201      	adds	r2, #1
  4133de:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  4133e0:	2000      	movs	r0, #0
  4133e2:	e7ea      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            (*i)++;
  4133e4:	1c51      	adds	r1, r2, #1
  4133e6:	6021      	str	r1, [r4, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
  4133e8:	5c40      	ldrb	r0, [r0, r1]
  4133ea:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  4133ee:	2980      	cmp	r1, #128	; 0x80
  4133f0:	d001      	beq.n	4133f6 <lv_txt_utf8_next+0x58>
  4133f2:	2000      	movs	r0, #0
  4133f4:	e7e1      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  4133f6:	019b      	lsls	r3, r3, #6
  4133f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
  4133fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  413400:	4418      	add	r0, r3
            (*i)++;
  413402:	3202      	adds	r2, #2
  413404:	6022      	str	r2, [r4, #0]
  413406:	e7d8      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            (*i)++;
  413408:	1c51      	adds	r1, r2, #1
  41340a:	6021      	str	r1, [r4, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
  41340c:	5c41      	ldrb	r1, [r0, r1]
  41340e:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  413412:	2d80      	cmp	r5, #128	; 0x80
  413414:	d001      	beq.n	41341a <lv_txt_utf8_next+0x7c>
  413416:	2000      	movs	r0, #0
  413418:	e7cf      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            (*i)++;
  41341a:	1c95      	adds	r5, r2, #2
  41341c:	6025      	str	r5, [r4, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
  41341e:	5d40      	ldrb	r0, [r0, r5]
  413420:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
  413424:	2d80      	cmp	r5, #128	; 0x80
  413426:	d001      	beq.n	41342c <lv_txt_utf8_next+0x8e>
  413428:	2000      	movs	r0, #0
  41342a:	e7c6      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  41342c:	031b      	lsls	r3, r3, #12
  41342e:	b29b      	uxth	r3, r3
            result += (txt[*i] & 0x3F);
  413430:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  413434:	4403      	add	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  413436:	0188      	lsls	r0, r1, #6
  413438:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
  41343c:	4418      	add	r0, r3
            (*i)++;
  41343e:	3203      	adds	r2, #3
  413440:	6022      	str	r2, [r4, #0]
  413442:	e7ba      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            (*i)++;
  413444:	1c51      	adds	r1, r2, #1
  413446:	6021      	str	r1, [r4, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
  413448:	5c41      	ldrb	r1, [r0, r1]
  41344a:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  41344e:	2d80      	cmp	r5, #128	; 0x80
  413450:	d001      	beq.n	413456 <lv_txt_utf8_next+0xb8>
  413452:	2000      	movs	r0, #0
  413454:	e7b1      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            (*i)++;
  413456:	1c95      	adds	r5, r2, #2
  413458:	6025      	str	r5, [r4, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
  41345a:	5d45      	ldrb	r5, [r0, r5]
  41345c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
  413460:	2e80      	cmp	r6, #128	; 0x80
  413462:	d001      	beq.n	413468 <lv_txt_utf8_next+0xca>
  413464:	2000      	movs	r0, #0
  413466:	e7a8      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            (*i)++;
  413468:	1cd6      	adds	r6, r2, #3
  41346a:	6026      	str	r6, [r4, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
  41346c:	5d86      	ldrb	r6, [r0, r6]
  41346e:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
  413472:	2880      	cmp	r0, #128	; 0x80
  413474:	d001      	beq.n	41347a <lv_txt_utf8_next+0xdc>
  413476:	2000      	movs	r0, #0
  413478:	e79f      	b.n	4133ba <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  41347a:	049b      	lsls	r3, r3, #18
  41347c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  413480:	0309      	lsls	r1, r1, #12
  413482:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
  413486:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  413488:	01a8      	lsls	r0, r5, #6
  41348a:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
  41348e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  413492:	4430      	add	r0, r6
  413494:	4418      	add	r0, r3
            (*i)++;
  413496:	3204      	adds	r2, #4
  413498:	6022      	str	r2, [r4, #0]
  41349a:	e78e      	b.n	4133ba <lv_txt_utf8_next+0x1c>

0041349c <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
  41349c:	b5f0      	push	{r4, r5, r6, r7, lr}
  41349e:	b083      	sub	sp, #12
  4134a0:	4606      	mov	r6, r0
  4134a2:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
  4134a4:	680b      	ldr	r3, [r1, #0]
  4134a6:	3b01      	subs	r3, #1
  4134a8:	600b      	str	r3, [r1, #0]
  4134aa:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
  4134ac:	4f0e      	ldr	r7, [pc, #56]	; (4134e8 <lv_txt_utf8_prev+0x4c>)
  4134ae:	e005      	b.n	4134bc <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
  4134b0:	3801      	subs	r0, #1
  4134b2:	6028      	str	r0, [r5, #0]
  4134b4:	1e63      	subs	r3, r4, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  4134b6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4134ba:	d008      	beq.n	4134ce <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
  4134bc:	6828      	ldr	r0, [r5, #0]
  4134be:	4430      	add	r0, r6
  4134c0:	683b      	ldr	r3, [r7, #0]
  4134c2:	4798      	blx	r3
        if(c_size == 0) {
  4134c4:	b928      	cbnz	r0, 4134d2 <lv_txt_utf8_prev+0x36>
            if(*i != 0)
  4134c6:	6828      	ldr	r0, [r5, #0]
  4134c8:	2800      	cmp	r0, #0
  4134ca:	d1f1      	bne.n	4134b0 <lv_txt_utf8_prev+0x14>
  4134cc:	e009      	b.n	4134e2 <lv_txt_utf8_prev+0x46>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  4134ce:	2000      	movs	r0, #0
  4134d0:	e007      	b.n	4134e2 <lv_txt_utf8_prev+0x46>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
  4134d2:	682b      	ldr	r3, [r5, #0]
  4134d4:	a902      	add	r1, sp, #8
  4134d6:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
  4134da:	4b04      	ldr	r3, [pc, #16]	; (4134ec <lv_txt_utf8_prev+0x50>)
  4134dc:	681b      	ldr	r3, [r3, #0]
  4134de:	4630      	mov	r0, r6
  4134e0:	4798      	blx	r3

    return letter;
}
  4134e2:	b003      	add	sp, #12
  4134e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4134e6:	bf00      	nop
  4134e8:	20400024 	.word	0x20400024
  4134ec:	2040001c 	.word	0x2040001c

004134f0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
  4134f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
  4134f4:	460f      	mov	r7, r1
  4134f6:	b1b9      	cbz	r1, 413528 <lv_txt_utf8_get_byte_id+0x38>
  4134f8:	7803      	ldrb	r3, [r0, #0]
  4134fa:	b1bb      	cbz	r3, 41352c <lv_txt_utf8_get_byte_id+0x3c>
  4134fc:	4606      	mov	r6, r0
  4134fe:	2400      	movs	r4, #0
  413500:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
  413502:	f8df 802c 	ldr.w	r8, [pc, #44]	; 413530 <lv_txt_utf8_get_byte_id+0x40>
  413506:	f8d8 3000 	ldr.w	r3, [r8]
  41350a:	4798      	blx	r3
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
  41350c:	2800      	cmp	r0, #0
  41350e:	bf08      	it	eq
  413510:	2001      	moveq	r0, #1
  413512:	4404      	add	r4, r0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
  413514:	3501      	adds	r5, #1
  413516:	42af      	cmp	r7, r5
  413518:	d003      	beq.n	413522 <lv_txt_utf8_get_byte_id+0x32>
  41351a:	1930      	adds	r0, r6, r4
  41351c:	5d33      	ldrb	r3, [r6, r4]
  41351e:	2b00      	cmp	r3, #0
  413520:	d1f1      	bne.n	413506 <lv_txt_utf8_get_byte_id+0x16>
    }

    return byte_cnt;
}
  413522:	4620      	mov	r0, r4
  413524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
  413528:	460c      	mov	r4, r1
  41352a:	e7fa      	b.n	413522 <lv_txt_utf8_get_byte_id+0x32>
  41352c:	2400      	movs	r4, #0
    return byte_cnt;
  41352e:	e7f8      	b.n	413522 <lv_txt_utf8_get_byte_id+0x32>
  413530:	20400024 	.word	0x20400024

00413534 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  413534:	b5f0      	push	{r4, r5, r6, r7, lr}
  413536:	b083      	sub	sp, #12
    uint32_t i        = 0;
  413538:	2300      	movs	r3, #0
  41353a:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  41353c:	460d      	mov	r5, r1
  41353e:	b169      	cbz	r1, 41355c <lv_txt_utf8_get_char_id+0x28>
  413540:	4606      	mov	r6, r0
  413542:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  413544:	4f06      	ldr	r7, [pc, #24]	; (413560 <lv_txt_utf8_get_char_id+0x2c>)
  413546:	a901      	add	r1, sp, #4
  413548:	4630      	mov	r0, r6
  41354a:	683b      	ldr	r3, [r7, #0]
  41354c:	4798      	blx	r3
        char_cnt++;
  41354e:	3401      	adds	r4, #1
    while(i < byte_id) {
  413550:	9b01      	ldr	r3, [sp, #4]
  413552:	42ab      	cmp	r3, r5
  413554:	d3f7      	bcc.n	413546 <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
  413556:	4620      	mov	r0, r4
  413558:	b003      	add	sp, #12
  41355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
  41355c:	460c      	mov	r4, r1
    return char_cnt;
  41355e:	e7fa      	b.n	413556 <lv_txt_utf8_get_char_id+0x22>
  413560:	2040001c 	.word	0x2040001c

00413564 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
  413564:	b570      	push	{r4, r5, r6, lr}
  413566:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
  413568:	2300      	movs	r3, #0
  41356a:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
  41356c:	7803      	ldrb	r3, [r0, #0]
  41356e:	b173      	cbz	r3, 41358e <lv_txt_utf8_get_length+0x2a>
  413570:	4604      	mov	r4, r0
  413572:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
  413574:	4e07      	ldr	r6, [pc, #28]	; (413594 <lv_txt_utf8_get_length+0x30>)
  413576:	a901      	add	r1, sp, #4
  413578:	4620      	mov	r0, r4
  41357a:	6833      	ldr	r3, [r6, #0]
  41357c:	4798      	blx	r3
        len++;
  41357e:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
  413580:	9b01      	ldr	r3, [sp, #4]
  413582:	5ce3      	ldrb	r3, [r4, r3]
  413584:	2b00      	cmp	r3, #0
  413586:	d1f6      	bne.n	413576 <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
  413588:	4628      	mov	r0, r5
  41358a:	b002      	add	sp, #8
  41358c:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
  41358e:	2500      	movs	r5, #0
    return len;
  413590:	e7fa      	b.n	413588 <lv_txt_utf8_get_length+0x24>
  413592:	bf00      	nop
  413594:	2040001c 	.word	0x2040001c

00413598 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  413598:	2923      	cmp	r1, #35	; 0x23
  41359a:	d004      	beq.n	4135a6 <_lv_txt_is_cmd+0xe>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
  41359c:	7803      	ldrb	r3, [r0, #0]
  41359e:	2b01      	cmp	r3, #1
  4135a0:	d015      	beq.n	4135ce <_lv_txt_is_cmd+0x36>
    bool ret = false;
  4135a2:	2000      	movs	r0, #0
  4135a4:	4770      	bx	lr
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
  4135a6:	7803      	ldrb	r3, [r0, #0]
  4135a8:	b91b      	cbnz	r3, 4135b2 <_lv_txt_is_cmd+0x1a>
            *state = LV_TEXT_CMD_STATE_PAR;
  4135aa:	2301      	movs	r3, #1
  4135ac:	7003      	strb	r3, [r0, #0]
        ret = true;
  4135ae:	4618      	mov	r0, r3
  4135b0:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
  4135b2:	2b01      	cmp	r3, #1
  4135b4:	d003      	beq.n	4135be <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
  4135b6:	2b02      	cmp	r3, #2
  4135b8:	d005      	beq.n	4135c6 <_lv_txt_is_cmd+0x2e>
    bool ret = false;
  4135ba:	2000      	movs	r0, #0
}
  4135bc:	4770      	bx	lr
            *state = LV_TEXT_CMD_STATE_WAIT;
  4135be:	2300      	movs	r3, #0
  4135c0:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  4135c2:	4618      	mov	r0, r3
  4135c4:	4770      	bx	lr
            *state = LV_TEXT_CMD_STATE_WAIT;
  4135c6:	2300      	movs	r3, #0
  4135c8:	7003      	strb	r3, [r0, #0]
            ret    = true;
  4135ca:	2001      	movs	r0, #1
  4135cc:	4770      	bx	lr
        if(c == ' ') {
  4135ce:	2920      	cmp	r1, #32
  4135d0:	d103      	bne.n	4135da <_lv_txt_is_cmd+0x42>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  4135d2:	2302      	movs	r3, #2
  4135d4:	7003      	strb	r3, [r0, #0]
        ret = true;
  4135d6:	2001      	movs	r0, #1
  4135d8:	4770      	bx	lr
  4135da:	2001      	movs	r0, #1
  4135dc:	4770      	bx	lr
	...

004135e0 <_lv_txt_get_next_line>:
{
  4135e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4135e4:	b091      	sub	sp, #68	; 0x44
  4135e6:	9105      	str	r1, [sp, #20]
  4135e8:	9206      	str	r2, [sp, #24]
  4135ea:	9307      	str	r3, [sp, #28]
  4135ec:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
  4135f0:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
  4135f2:	9008      	str	r0, [sp, #32]
  4135f4:	2800      	cmp	r0, #0
  4135f6:	f000 80fd 	beq.w	4137f4 <_lv_txt_get_next_line+0x214>
  4135fa:	461a      	mov	r2, r3
    if(txt[0] == '\0') return 0;
  4135fc:	7803      	ldrb	r3, [r0, #0]
    if(font == NULL) return 0;
  4135fe:	2900      	cmp	r1, #0
  413600:	f000 80fa 	beq.w	4137f8 <_lv_txt_get_next_line+0x218>
  413604:	2b00      	cmp	r3, #0
  413606:	f000 80f7 	beq.w	4137f8 <_lv_txt_get_next_line+0x218>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
  41360a:	f012 0f06 	tst.w	r2, #6
  41360e:	d01d      	beq.n	41364c <_lv_txt_get_next_line+0x6c>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  413610:	2b0d      	cmp	r3, #13
  413612:	d805      	bhi.n	413620 <_lv_txt_get_next_line+0x40>
  413614:	f242 4201 	movw	r2, #9217	; 0x2401
  413618:	40da      	lsrs	r2, r3
  41361a:	f012 0f01 	tst.w	r2, #1
  41361e:	d10f      	bne.n	413640 <_lv_txt_get_next_line+0x60>
  413620:	9a08      	ldr	r2, [sp, #32]
{
  413622:	2000      	movs	r0, #0
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  413624:	f242 4401 	movw	r4, #9217	; 0x2401
  413628:	e004      	b.n	413634 <_lv_txt_get_next_line+0x54>
  41362a:	fa24 f103 	lsr.w	r1, r4, r3
  41362e:	f011 0f01 	tst.w	r1, #1
  413632:	d106      	bne.n	413642 <_lv_txt_get_next_line+0x62>
  413634:	3001      	adds	r0, #1
  413636:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  41363a:	2b0d      	cmp	r3, #13
  41363c:	d8fa      	bhi.n	413634 <_lv_txt_get_next_line+0x54>
  41363e:	e7f4      	b.n	41362a <_lv_txt_get_next_line+0x4a>
  413640:	2000      	movs	r0, #0
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  413642:	2b00      	cmp	r3, #0
  413644:	f000 80cd 	beq.w	4137e2 <_lv_txt_get_next_line+0x202>
  413648:	3001      	adds	r0, #1
  41364a:	e0ca      	b.n	4137e2 <_lv_txt_get_next_line+0x202>
  41364c:	9b04      	ldr	r3, [sp, #16]
  41364e:	f003 0302 	and.w	r3, r3, #2
  413652:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  413654:	2b00      	cmp	r3, #0
  413656:	9b07      	ldr	r3, [sp, #28]
  413658:	bf18      	it	ne
  41365a:	f44f 43c0 	movne.w	r3, #24576	; 0x6000
  41365e:	9307      	str	r3, [sp, #28]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
  413660:	2300      	movs	r3, #0
  413662:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    uint32_t i = 0;                                        /*Iterating index into txt*/
  413666:	930e      	str	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
  413668:	f8df 919c 	ldr.w	r9, [pc, #412]	; 413808 <_lv_txt_get_next_line+0x228>
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  41366c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 41380c <_lv_txt_get_next_line+0x22c>
    while(txt[i] != '\0' && max_width > 0) {
  413670:	e08a      	b.n	413788 <_lv_txt_get_next_line+0x1a8>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  413672:	9a01      	ldr	r2, [sp, #4]
  413674:	4621      	mov	r1, r4
  413676:	9805      	ldr	r0, [sp, #20]
  413678:	4b60      	ldr	r3, [pc, #384]	; (4137fc <_lv_txt_get_next_line+0x21c>)
  41367a:	4798      	blx	r3
        cur_w += letter_w;
  41367c:	4405      	add	r5, r0
  41367e:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
  413680:	b200      	sxth	r0, r0
  413682:	2800      	cmp	r0, #0
  413684:	dd02      	ble.n	41368c <_lv_txt_get_next_line+0xac>
            cur_w += letter_space;
  413686:	9b06      	ldr	r3, [sp, #24]
  413688:	441d      	add	r5, r3
  41368a:	b2ad      	uxth	r5, r5
  41368c:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  41368e:	f1b7 3fff 	cmp.w	r7, #4294967295
  413692:	d03d      	beq.n	413710 <_lv_txt_get_next_line+0x130>
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
  413694:	f1a4 020a 	sub.w	r2, r4, #10
  413698:	2a16      	cmp	r2, #22
  41369a:	d804      	bhi.n	4136a6 <_lv_txt_get_next_line+0xc6>
  41369c:	4b58      	ldr	r3, [pc, #352]	; (413800 <_lv_txt_get_next_line+0x220>)
  41369e:	40d3      	lsrs	r3, r2
  4136a0:	f013 0f01 	tst.w	r3, #1
  4136a4:	d13b      	bne.n	41371e <_lv_txt_get_next_line+0x13e>
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
  4136a6:	f5a4 429c 	sub.w	r2, r4, #19968	; 0x4e00
  4136aa:	f245 13a5 	movw	r3, #20901	; 0x51a5
  4136ae:	429a      	cmp	r2, r3
  4136b0:	d935      	bls.n	41371e <_lv_txt_get_next_line+0x13e>
  4136b2:	2301      	movs	r3, #1
  4136b4:	222c      	movs	r2, #44	; 0x2c
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  4136b6:	4294      	cmp	r4, r2
  4136b8:	d031      	beq.n	41371e <_lv_txt_get_next_line+0x13e>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  4136ba:	3301      	adds	r3, #1
  4136bc:	b2db      	uxtb	r3, r3
  4136be:	f81a 2003 	ldrb.w	r2, [sl, r3]
  4136c2:	2a00      	cmp	r2, #0
  4136c4:	d1f7      	bne.n	4136b6 <_lv_txt_get_next_line+0xd6>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  4136c6:	f1b7 3fff 	cmp.w	r7, #4294967295
  4136ca:	bf08      	it	eq
  4136cc:	46ab      	moveq	fp, r5
        i = i_next;
  4136ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        i_next = i_next_next;
  4136d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4136d2:	930c      	str	r3, [sp, #48]	; 0x30
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  4136d4:	9b03      	ldr	r3, [sp, #12]
  4136d6:	9302      	str	r3, [sp, #8]
  4136d8:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  4136da:	f818 3006 	ldrb.w	r3, [r8, r6]
  4136de:	b33b      	cbz	r3, 413730 <_lv_txt_get_next_line+0x150>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  4136e0:	f8d9 3000 	ldr.w	r3, [r9]
  4136e4:	a90d      	add	r1, sp, #52	; 0x34
  4136e6:	4640      	mov	r0, r8
  4136e8:	4798      	blx	r3
  4136ea:	9001      	str	r0, [sp, #4]
        word_len++;
  4136ec:	9b02      	ldr	r3, [sp, #8]
  4136ee:	3301      	adds	r3, #1
  4136f0:	9303      	str	r3, [sp, #12]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
  4136f2:	9b04      	ldr	r3, [sp, #16]
  4136f4:	f013 0f01 	tst.w	r3, #1
  4136f8:	d0bb      	beq.n	413672 <_lv_txt_get_next_line+0x92>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  4136fa:	4621      	mov	r1, r4
  4136fc:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
  413700:	4b40      	ldr	r3, [pc, #256]	; (413804 <_lv_txt_get_next_line+0x224>)
  413702:	4798      	blx	r3
  413704:	2800      	cmp	r0, #0
  413706:	d0b4      	beq.n	413672 <_lv_txt_get_next_line+0x92>
                i = i_next;
  413708:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                i_next = i_next_next;
  41370a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41370c:	930c      	str	r3, [sp, #48]	; 0x30
  41370e:	e7e1      	b.n	4136d4 <_lv_txt_get_next_line+0xf4>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  413710:	9b06      	ldr	r3, [sp, #24]
  413712:	1aeb      	subs	r3, r5, r3
  413714:	9a09      	ldr	r2, [sp, #36]	; 0x24
  413716:	4293      	cmp	r3, r2
  413718:	bfc8      	it	gt
  41371a:	4637      	movgt	r7, r6
  41371c:	e7ba      	b.n	413694 <_lv_txt_get_next_line+0xb4>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  41371e:	b93e      	cbnz	r6, 413730 <_lv_txt_get_next_line+0x150>
  413720:	f1b7 3fff 	cmp.w	r7, #4294967295
  413724:	bf14      	ite	ne
  413726:	2300      	movne	r3, #0
  413728:	2301      	moveq	r3, #1
  41372a:	2b00      	cmp	r3, #0
  41372c:	bf18      	it	ne
  41372e:	46ab      	movne	fp, r5
    if(break_index == NO_BREAK_FOUND) {
  413730:	f1b7 3fff 	cmp.w	r7, #4294967295
  413734:	d00a      	beq.n	41374c <_lv_txt_get_next_line+0x16c>
    if(force) return break_index;
  413736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  413738:	b183      	cbz	r3, 41375c <_lv_txt_get_next_line+0x17c>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  41373a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41373c:	2b00      	cmp	r3, #0
  41373e:	d14f      	bne.n	4137e0 <_lv_txt_get_next_line+0x200>
  413740:	4b31      	ldr	r3, [pc, #196]	; (413808 <_lv_txt_get_next_line+0x228>)
  413742:	681b      	ldr	r3, [r3, #0]
  413744:	a90e      	add	r1, sp, #56	; 0x38
  413746:	9808      	ldr	r0, [sp, #32]
  413748:	4798      	blx	r3
  41374a:	e047      	b.n	4137dc <_lv_txt_get_next_line+0x1fc>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  41374c:	9b02      	ldr	r3, [sp, #8]
  41374e:	b123      	cbz	r3, 41375a <_lv_txt_get_next_line+0x17a>
  413750:	2c0d      	cmp	r4, #13
  413752:	d13f      	bne.n	4137d4 <_lv_txt_get_next_line+0x1f4>
  413754:	9b01      	ldr	r3, [sp, #4]
  413756:	2b0a      	cmp	r3, #10
  413758:	d13c      	bne.n	4137d4 <_lv_txt_get_next_line+0x1f4>
  41375a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
        max_width -= word_w;
  41375c:	9b07      	ldr	r3, [sp, #28]
  41375e:	eba3 0b0b 	sub.w	fp, r3, fp
  413762:	fa0f f38b 	sxth.w	r3, fp
  413766:	9307      	str	r3, [sp, #28]
        if(advance == 0) {
  413768:	2f00      	cmp	r7, #0
  41376a:	d0e6      	beq.n	41373a <_lv_txt_get_next_line+0x15a>
        i += advance;
  41376c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  41376e:	443e      	add	r6, r7
  413770:	960e      	str	r6, [sp, #56]	; 0x38
        if(txt[0] == '\n' || txt[0] == '\r') break;
  413772:	9a08      	ldr	r2, [sp, #32]
  413774:	7813      	ldrb	r3, [r2, #0]
  413776:	2b0a      	cmp	r3, #10
  413778:	d030      	beq.n	4137dc <_lv_txt_get_next_line+0x1fc>
  41377a:	2b0d      	cmp	r3, #13
  41377c:	d02e      	beq.n	4137dc <_lv_txt_get_next_line+0x1fc>
        if(txt[i] == '\n' || txt[i] == '\r') {
  41377e:	5d93      	ldrb	r3, [r2, r6]
  413780:	2b0a      	cmp	r3, #10
  413782:	d029      	beq.n	4137d8 <_lv_txt_get_next_line+0x1f8>
  413784:	2b0d      	cmp	r3, #13
  413786:	d027      	beq.n	4137d8 <_lv_txt_get_next_line+0x1f8>
    while(txt[i] != '\0' && max_width > 0) {
  413788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41378a:	930a      	str	r3, [sp, #40]	; 0x28
  41378c:	9908      	ldr	r1, [sp, #32]
  41378e:	eb01 0803 	add.w	r8, r1, r3
  413792:	5ccb      	ldrb	r3, [r1, r3]
  413794:	b313      	cbz	r3, 4137dc <_lv_txt_get_next_line+0x1fc>
  413796:	9b07      	ldr	r3, [sp, #28]
  413798:	2b00      	cmp	r3, #0
  41379a:	dd1f      	ble.n	4137dc <_lv_txt_get_next_line+0x1fc>
    if(txt == NULL || txt[0] == '\0') return 0;
  41379c:	f1b8 0f00 	cmp.w	r8, #0
  4137a0:	d0cb      	beq.n	41373a <_lv_txt_get_next_line+0x15a>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  4137a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4137a4:	2b00      	cmp	r3, #0
  4137a6:	9b07      	ldr	r3, [sp, #28]
  4137a8:	bf18      	it	ne
  4137aa:	f44f 43c0 	movne.w	r3, #24576	; 0x6000
  4137ae:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
  4137b0:	2600      	movs	r6, #0
  4137b2:	960c      	str	r6, [sp, #48]	; 0x30
  4137b4:	960d      	str	r6, [sp, #52]	; 0x34
    letter = _lv_txt_encoded_next(txt, &i_next);
  4137b6:	f8d9 3000 	ldr.w	r3, [r9]
  4137ba:	a90c      	add	r1, sp, #48	; 0x30
  4137bc:	4640      	mov	r0, r8
  4137be:	4798      	blx	r3
  4137c0:	4604      	mov	r4, r0
    i_next_next = i_next;
  4137c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4137c4:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t word_w = 0;
  4137c6:	46b3      	mov	fp, r6
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
  4137c8:	f04f 37ff 	mov.w	r7, #4294967295
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
  4137cc:	9602      	str	r6, [sp, #8]
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
  4137ce:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /*Letter at i_next*/
  4137d0:	9601      	str	r6, [sp, #4]
  4137d2:	e782      	b.n	4136da <_lv_txt_get_next_line+0xfa>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  4137d4:	4637      	mov	r7, r6
  4137d6:	e7c1      	b.n	41375c <_lv_txt_get_next_line+0x17c>
            i++;  /*Include the following newline in the current line*/
  4137d8:	3601      	adds	r6, #1
  4137da:	960e      	str	r6, [sp, #56]	; 0x38
    if(i == 0) {
  4137dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4137de:	b11b      	cbz	r3, 4137e8 <_lv_txt_get_next_line+0x208>
    return i;
  4137e0:	980e      	ldr	r0, [sp, #56]	; 0x38
}
  4137e2:	b011      	add	sp, #68	; 0x44
  4137e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_encoded_next(txt, &i);
  4137e8:	4b07      	ldr	r3, [pc, #28]	; (413808 <_lv_txt_get_next_line+0x228>)
  4137ea:	681b      	ldr	r3, [r3, #0]
  4137ec:	a90e      	add	r1, sp, #56	; 0x38
  4137ee:	9808      	ldr	r0, [sp, #32]
  4137f0:	4798      	blx	r3
  4137f2:	e7f5      	b.n	4137e0 <_lv_txt_get_next_line+0x200>
    if(txt == NULL) return 0;
  4137f4:	2000      	movs	r0, #0
  4137f6:	e7f4      	b.n	4137e2 <_lv_txt_get_next_line+0x202>
    if(font == NULL) return 0;
  4137f8:	2000      	movs	r0, #0
  4137fa:	e7f2      	b.n	4137e2 <_lv_txt_get_next_line+0x202>
  4137fc:	0040fd71 	.word	0x0040fd71
  413800:	00400009 	.word	0x00400009
  413804:	00413599 	.word	0x00413599
  413808:	2040001c 	.word	0x2040001c
  41380c:	00421040 	.word	0x00421040

00413810 <_lv_txt_set_text_vfmt>:
{
  413810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  413814:	b086      	sub	sp, #24
  413816:	4607      	mov	r7, r0
  413818:	460d      	mov	r5, r1
    va_copy(ap_copy, ap);
  41381a:	9105      	str	r1, [sp, #20]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
  41381c:	460b      	mov	r3, r1
  41381e:	4602      	mov	r2, r0
  413820:	2100      	movs	r1, #0
  413822:	4608      	mov	r0, r1
  413824:	4c11      	ldr	r4, [pc, #68]	; (41386c <_lv_txt_set_text_vfmt+0x5c>)
  413826:	47a0      	blx	r4
  413828:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
  41382a:	1c46      	adds	r6, r0, #1
  41382c:	4630      	mov	r0, r6
  41382e:	4b10      	ldr	r3, [pc, #64]	; (413870 <_lv_txt_set_text_vfmt+0x60>)
  413830:	4798      	blx	r3
    LV_ASSERT_MALLOC(text);
  413832:	b160      	cbz	r0, 41384e <_lv_txt_set_text_vfmt+0x3e>
  413834:	4604      	mov	r4, r0
    text[len] = 0; /*Ensure NULL termination*/
  413836:	2300      	movs	r3, #0
  413838:	f800 3008 	strb.w	r3, [r0, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
  41383c:	462b      	mov	r3, r5
  41383e:	463a      	mov	r2, r7
  413840:	4631      	mov	r1, r6
  413842:	4d0a      	ldr	r5, [pc, #40]	; (41386c <_lv_txt_set_text_vfmt+0x5c>)
  413844:	47a8      	blx	r5
}
  413846:	4620      	mov	r0, r4
  413848:	b006      	add	sp, #24
  41384a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(text);
  41384e:	4b09      	ldr	r3, [pc, #36]	; (413874 <_lv_txt_set_text_vfmt+0x64>)
  413850:	9302      	str	r3, [sp, #8]
  413852:	4b09      	ldr	r3, [pc, #36]	; (413878 <_lv_txt_set_text_vfmt+0x68>)
  413854:	9301      	str	r3, [sp, #4]
  413856:	4b09      	ldr	r3, [pc, #36]	; (41387c <_lv_txt_set_text_vfmt+0x6c>)
  413858:	9300      	str	r3, [sp, #0]
  41385a:	4b09      	ldr	r3, [pc, #36]	; (413880 <_lv_txt_set_text_vfmt+0x70>)
  41385c:	f240 12d3 	movw	r2, #467	; 0x1d3
  413860:	4908      	ldr	r1, [pc, #32]	; (413884 <_lv_txt_set_text_vfmt+0x74>)
  413862:	2003      	movs	r0, #3
  413864:	4c08      	ldr	r4, [pc, #32]	; (413888 <_lv_txt_set_text_vfmt+0x78>)
  413866:	47a0      	blx	r4
  413868:	e7fe      	b.n	413868 <_lv_txt_set_text_vfmt+0x58>
  41386a:	bf00      	nop
  41386c:	004121b1 	.word	0x004121b1
  413870:	004114b5 	.word	0x004114b5
  413874:	0041c064 	.word	0x0041c064
  413878:	00421078 	.word	0x00421078
  41387c:	0041c098 	.word	0x0041c098
  413880:	00421028 	.word	0x00421028
  413884:	00421048 	.word	0x00421048
  413888:	00410edd 	.word	0x00410edd

0041388c <_lv_txt_encoded_letter_next_2>:
{
  41388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41388e:	4607      	mov	r7, r0
  413890:	460e      	mov	r6, r1
  413892:	4615      	mov	r5, r2
  413894:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
  413896:	4b08      	ldr	r3, [pc, #32]	; (4138b8 <_lv_txt_encoded_letter_next_2+0x2c>)
  413898:	681b      	ldr	r3, [r3, #0]
  41389a:	4621      	mov	r1, r4
  41389c:	4798      	blx	r3
  41389e:	6030      	str	r0, [r6, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
  4138a0:	b910      	cbnz	r0, 4138a8 <_lv_txt_encoded_letter_next_2+0x1c>
  4138a2:	2000      	movs	r0, #0
  4138a4:	6028      	str	r0, [r5, #0]
  4138a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4138a8:	6820      	ldr	r0, [r4, #0]
  4138aa:	4b03      	ldr	r3, [pc, #12]	; (4138b8 <_lv_txt_encoded_letter_next_2+0x2c>)
  4138ac:	681b      	ldr	r3, [r3, #0]
  4138ae:	2100      	movs	r1, #0
  4138b0:	4438      	add	r0, r7
  4138b2:	4798      	blx	r3
  4138b4:	e7f6      	b.n	4138a4 <_lv_txt_encoded_letter_next_2+0x18>
  4138b6:	bf00      	nop
  4138b8:	2040001c 	.word	0x2040001c

004138bc <lv_txt_get_width>:
{
  4138bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4138c0:	b084      	sub	sp, #16
    if(font == NULL) return 0;
  4138c2:	2a00      	cmp	r2, #0
  4138c4:	d03e      	beq.n	413944 <lv_txt_get_width+0x88>
  4138c6:	4690      	mov	r8, r2
  4138c8:	2800      	cmp	r0, #0
  4138ca:	d03b      	beq.n	413944 <lv_txt_get_width+0x88>
    if(txt[0] == '\0') return 0;
  4138cc:	7802      	ldrb	r2, [r0, #0]
  4138ce:	2a00      	cmp	r2, #0
  4138d0:	d03b      	beq.n	41394a <lv_txt_get_width+0x8e>
    uint32_t i                   = 0;
  4138d2:	2200      	movs	r2, #0
  4138d4:	9203      	str	r2, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
  4138d6:	f88d 200b 	strb.w	r2, [sp, #11]
    if(length != 0) {
  4138da:	b159      	cbz	r1, 4138f4 <lv_txt_get_width+0x38>
  4138dc:	461e      	mov	r6, r3
  4138de:	460d      	mov	r5, r1
  4138e0:	4604      	mov	r4, r0
  4138e2:	f04f 0a00 	mov.w	sl, #0
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
  4138e6:	f8df 9078 	ldr.w	r9, [pc, #120]	; 413960 <lv_txt_get_width+0xa4>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
  4138ea:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  4138ee:	f007 0701 	and.w	r7, r7, #1
  4138f2:	e00d      	b.n	413910 <lv_txt_get_width+0x54>
    lv_coord_t width             = 0;
  4138f4:	4692      	mov	sl, r2
  4138f6:	e02a      	b.n	41394e <lv_txt_get_width+0x92>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  4138f8:	9a01      	ldr	r2, [sp, #4]
  4138fa:	9900      	ldr	r1, [sp, #0]
  4138fc:	4640      	mov	r0, r8
  4138fe:	4b16      	ldr	r3, [pc, #88]	; (413958 <lv_txt_get_width+0x9c>)
  413900:	4798      	blx	r3
            if(char_width > 0) {
  413902:	b203      	sxth	r3, r0
  413904:	2b00      	cmp	r3, #0
  413906:	dd03      	ble.n	413910 <lv_txt_get_width+0x54>
                width += letter_space;
  413908:	44b2      	add	sl, r6
  41390a:	4450      	add	r0, sl
  41390c:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  413910:	9b03      	ldr	r3, [sp, #12]
  413912:	429d      	cmp	r5, r3
  413914:	d90e      	bls.n	413934 <lv_txt_get_width+0x78>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
  413916:	ab03      	add	r3, sp, #12
  413918:	aa01      	add	r2, sp, #4
  41391a:	4669      	mov	r1, sp
  41391c:	4620      	mov	r0, r4
  41391e:	47c8      	blx	r9
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
  413920:	2f00      	cmp	r7, #0
  413922:	d0e9      	beq.n	4138f8 <lv_txt_get_width+0x3c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  413924:	9900      	ldr	r1, [sp, #0]
  413926:	f10d 000b 	add.w	r0, sp, #11
  41392a:	4b0c      	ldr	r3, [pc, #48]	; (41395c <lv_txt_get_width+0xa0>)
  41392c:	4798      	blx	r3
  41392e:	2800      	cmp	r0, #0
  413930:	d1ee      	bne.n	413910 <lv_txt_get_width+0x54>
  413932:	e7e1      	b.n	4138f8 <lv_txt_get_width+0x3c>
        if(width > 0) {
  413934:	f1ba 0f00 	cmp.w	sl, #0
  413938:	dd09      	ble.n	41394e <lv_txt_get_width+0x92>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  41393a:	ebaa 0006 	sub.w	r0, sl, r6
  41393e:	fa0f fa80 	sxth.w	sl, r0
  413942:	e004      	b.n	41394e <lv_txt_get_width+0x92>
    if(font == NULL) return 0;
  413944:	f04f 0a00 	mov.w	sl, #0
  413948:	e001      	b.n	41394e <lv_txt_get_width+0x92>
    if(txt[0] == '\0') return 0;
  41394a:	f04f 0a00 	mov.w	sl, #0
}
  41394e:	4650      	mov	r0, sl
  413950:	b004      	add	sp, #16
  413952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413956:	bf00      	nop
  413958:	0040fd71 	.word	0x0040fd71
  41395c:	00413599 	.word	0x00413599
  413960:	0041388d 	.word	0x0041388d

00413964 <lv_txt_get_size>:
{
  413964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413968:	b089      	sub	sp, #36	; 0x24
  41396a:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
  41396e:	9406      	str	r4, [sp, #24]
  413970:	f9bd 504c 	ldrsh.w	r5, [sp, #76]	; 0x4c
  413974:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    size_res->x = 0;
  413978:	2400      	movs	r4, #0
  41397a:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  41397c:	8044      	strh	r4, [r0, #2]
    if(font == NULL) return;
  41397e:	2a00      	cmp	r2, #0
  413980:	d058      	beq.n	413a34 <lv_txt_get_size+0xd0>
  413982:	2900      	cmp	r1, #0
  413984:	d056      	beq.n	413a34 <lv_txt_get_size+0xd0>
  413986:	9203      	str	r2, [sp, #12]
  413988:	9302      	str	r3, [sp, #8]
  41398a:	4604      	mov	r4, r0
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  41398c:	f008 0302 	and.w	r3, r8, #2
  413990:	2b00      	cmp	r3, #0
  413992:	bf18      	it	ne
  413994:	f44f 45c0 	movne.w	r5, #24576	; 0x6000
  413998:	9504      	str	r5, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  41399a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  41399e:	9207      	str	r2, [sp, #28]
    uint16_t letter_height = lv_font_get_line_height(font);
  4139a0:	fa1f fa82 	uxth.w	sl, r2
    while(text[line_start] != '\0') {
  4139a4:	780b      	ldrb	r3, [r1, #0]
  4139a6:	2b00      	cmp	r3, #0
  4139a8:	d04c      	beq.n	413a44 <lv_txt_get_size+0xe0>
  4139aa:	460e      	mov	r6, r1
  4139ac:	2500      	movs	r5, #0
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  4139ae:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 413a60 <lv_txt_get_size+0xfc>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  4139b2:	9b06      	ldr	r3, [sp, #24]
  4139b4:	449a      	add	sl, r3
  4139b6:	fa1f f98a 	uxth.w	r9, sl
  4139ba:	4647      	mov	r7, r8
  4139bc:	4688      	mov	r8, r1
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  4139be:	9700      	str	r7, [sp, #0]
  4139c0:	9b04      	ldr	r3, [sp, #16]
  4139c2:	9a02      	ldr	r2, [sp, #8]
  4139c4:	9903      	ldr	r1, [sp, #12]
  4139c6:	4630      	mov	r0, r6
  4139c8:	47d8      	blx	fp
  4139ca:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  4139cc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  4139d0:	eb0a 0203 	add.w	r2, sl, r3
  4139d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  4139d8:	d224      	bcs.n	413a24 <lv_txt_get_size+0xc0>
  4139da:	f8cd 9014 	str.w	r9, [sp, #20]
            size_res->y += line_space;
  4139de:	444b      	add	r3, r9
  4139e0:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  4139e2:	9700      	str	r7, [sp, #0]
  4139e4:	9b02      	ldr	r3, [sp, #8]
  4139e6:	9a03      	ldr	r2, [sp, #12]
  4139e8:	4601      	mov	r1, r0
  4139ea:	4630      	mov	r0, r6
  4139ec:	4e17      	ldr	r6, [pc, #92]	; (413a4c <lv_txt_get_size+0xe8>)
  4139ee:	47b0      	blx	r6
        size_res->x = LV_MAX(act_line_length, size_res->x);
  4139f0:	f9b4 3000 	ldrsh.w	r3, [r4]
  4139f4:	4298      	cmp	r0, r3
  4139f6:	bfb8      	it	lt
  4139f8:	4618      	movlt	r0, r3
  4139fa:	8020      	strh	r0, [r4, #0]
    while(text[line_start] != '\0') {
  4139fc:	eb08 0605 	add.w	r6, r8, r5
  413a00:	f818 3005 	ldrb.w	r3, [r8, r5]
  413a04:	2b00      	cmp	r3, #0
  413a06:	d1da      	bne.n	4139be <lv_txt_get_size+0x5a>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  413a08:	b12d      	cbz	r5, 413a16 <lv_txt_get_size+0xb2>
  413a0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  413a0e:	2b0a      	cmp	r3, #10
  413a10:	d013      	beq.n	413a3a <lv_txt_get_size+0xd6>
  413a12:	2b0d      	cmp	r3, #13
  413a14:	d011      	beq.n	413a3a <lv_txt_get_size+0xd6>
    if(size_res->y == 0)
  413a16:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  413a1a:	b19b      	cbz	r3, 413a44 <lv_txt_get_size+0xe0>
        size_res->y -= line_space;
  413a1c:	9a06      	ldr	r2, [sp, #24]
  413a1e:	1a9b      	subs	r3, r3, r2
  413a20:	8063      	strh	r3, [r4, #2]
  413a22:	e007      	b.n	413a34 <lv_txt_get_size+0xd0>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
  413a24:	4b0a      	ldr	r3, [pc, #40]	; (413a50 <lv_txt_get_size+0xec>)
  413a26:	9300      	str	r3, [sp, #0]
  413a28:	4b0a      	ldr	r3, [pc, #40]	; (413a54 <lv_txt_get_size+0xf0>)
  413a2a:	226f      	movs	r2, #111	; 0x6f
  413a2c:	490a      	ldr	r1, [pc, #40]	; (413a58 <lv_txt_get_size+0xf4>)
  413a2e:	2002      	movs	r0, #2
  413a30:	4c0a      	ldr	r4, [pc, #40]	; (413a5c <lv_txt_get_size+0xf8>)
  413a32:	47a0      	blx	r4
}
  413a34:	b009      	add	sp, #36	; 0x24
  413a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
  413a3a:	8863      	ldrh	r3, [r4, #2]
  413a3c:	9a05      	ldr	r2, [sp, #20]
  413a3e:	441a      	add	r2, r3
  413a40:	8062      	strh	r2, [r4, #2]
  413a42:	e7e8      	b.n	413a16 <lv_txt_get_size+0xb2>
        size_res->y = letter_height;
  413a44:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  413a48:	8063      	strh	r3, [r4, #2]
  413a4a:	e7f3      	b.n	413a34 <lv_txt_get_size+0xd0>
  413a4c:	004138bd 	.word	0x004138bd
  413a50:	00421088 	.word	0x00421088
  413a54:	00421018 	.word	0x00421018
  413a58:	00421048 	.word	0x00421048
  413a5c:	00410edd 	.word	0x00410edd
  413a60:	004135e1 	.word	0x004135e1

00413a64 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
  413a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  413a68:	4681      	mov	r9, r0
  413a6a:	468a      	mov	sl, r1
  413a6c:	461f      	mov	r7, r3
  413a6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
  413a72:	4614      	mov	r4, r2
  413a74:	b932      	cbnz	r2, 413a84 <_lv_utils_bsearch+0x20>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
  413a76:	2000      	movs	r0, #0
  413a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(c < 0) {
  413a7c:	2800      	cmp	r0, #0
  413a7e:	da14      	bge.n	413aaa <_lv_utils_bsearch+0x46>
            n /= 2;
  413a80:	462c      	mov	r4, r5
    for(middle = base; n != 0;) {
  413a82:	b17c      	cbz	r4, 413aa4 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
  413a84:	0865      	lsrs	r5, r4, #1
  413a86:	fb07 a605 	mla	r6, r7, r5, sl
        if((c = (*cmp)(key, middle)) > 0) {
  413a8a:	4631      	mov	r1, r6
  413a8c:	4648      	mov	r0, r9
  413a8e:	47c0      	blx	r8
  413a90:	2800      	cmp	r0, #0
  413a92:	ddf3      	ble.n	413a7c <_lv_utils_bsearch+0x18>
            n    = (n / 2) - ((n & 1) == 0);
  413a94:	f084 0401 	eor.w	r4, r4, #1
  413a98:	f004 0401 	and.w	r4, r4, #1
  413a9c:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
  413a9e:	eb06 0a07 	add.w	sl, r6, r7
  413aa2:	e7ee      	b.n	413a82 <_lv_utils_bsearch+0x1e>
    return NULL;
  413aa4:	2000      	movs	r0, #0
  413aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
  413aaa:	4630      	mov	r0, r6
}
  413aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00413ab0 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
  413ab0:	b510      	push	{r4, lr}
  413ab2:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
  413ab4:	2110      	movs	r1, #16
  413ab6:	4620      	mov	r0, r4
  413ab8:	4b03      	ldr	r3, [pc, #12]	; (413ac8 <lv_btn_constructor+0x18>)
  413aba:	4798      	blx	r3
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
  413abc:	f44f 7100 	mov.w	r1, #512	; 0x200
  413ac0:	4620      	mov	r0, r4
  413ac2:	4b02      	ldr	r3, [pc, #8]	; (413acc <lv_btn_constructor+0x1c>)
  413ac4:	4798      	blx	r3
  413ac6:	bd10      	pop	{r4, pc}
  413ac8:	00401329 	.word	0x00401329
  413acc:	004012a5 	.word	0x004012a5

00413ad0 <lv_btn_create>:
{
  413ad0:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
  413ad2:	4601      	mov	r1, r0
  413ad4:	4803      	ldr	r0, [pc, #12]	; (413ae4 <lv_btn_create+0x14>)
  413ad6:	4b04      	ldr	r3, [pc, #16]	; (413ae8 <lv_btn_create+0x18>)
  413ad8:	4798      	blx	r3
  413ada:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
  413adc:	4b03      	ldr	r3, [pc, #12]	; (413aec <lv_btn_create+0x1c>)
  413ade:	4798      	blx	r3
}
  413ae0:	4620      	mov	r0, r4
  413ae2:	bd10      	pop	{r4, pc}
  413ae4:	004210c8 	.word	0x004210c8
  413ae8:	00401975 	.word	0x00401975
  413aec:	00401b15 	.word	0x00401b15

00413af0 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
  413af0:	b510      	push	{r4, lr}
  413af2:	4604      	mov	r4, r0
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
  413af4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  413af8:	f013 0f40 	tst.w	r3, #64	; 0x40
  413afc:	d003      	beq.n	413b06 <lv_label_dot_tmp_free+0x16>
  413afe:	6a80      	ldr	r0, [r0, #40]	; 0x28
  413b00:	b108      	cbz	r0, 413b06 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(label->dot.tmp_ptr);
  413b02:	4b05      	ldr	r3, [pc, #20]	; (413b18 <lv_label_dot_tmp_free+0x28>)
  413b04:	4798      	blx	r3
    }
    label->dot_tmp_alloc = false;
  413b06:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  413b0a:	f36f 1386 	bfc	r3, #6, #1
  413b0e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
  413b12:	2300      	movs	r3, #0
  413b14:	62a3      	str	r3, [r4, #40]	; 0x28
  413b16:	bd10      	pop	{r4, pc}
  413b18:	004110e1 	.word	0x004110e1

00413b1c <lv_label_revert_dots>:
{
  413b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
  413b1e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  413b22:	f003 0307 	and.w	r3, r3, #7
  413b26:	2b01      	cmp	r3, #1
  413b28:	d000      	beq.n	413b2c <lv_label_revert_dots+0x10>
  413b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
  413b2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  413b2e:	f1b1 3fff 	cmp.w	r1, #4294967295
  413b32:	d0fa      	beq.n	413b2a <lv_label_revert_dots+0xe>
  413b34:	4604      	mov	r4, r0
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
  413b36:	4b14      	ldr	r3, [pc, #80]	; (413b88 <lv_label_revert_dots+0x6c>)
  413b38:	681b      	ldr	r3, [r3, #0]
  413b3a:	3903      	subs	r1, #3
  413b3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  413b3e:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
  413b40:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  413b44:	f013 0f40 	tst.w	r3, #64	; 0x40
        return label->dot.tmp_ptr;
  413b48:	bf14      	ite	ne
  413b4a:	6aa7      	ldrne	r7, [r4, #40]	; 0x28
        return label->dot.tmp;
  413b4c:	f104 0728 	addeq.w	r7, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
  413b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  413b52:	181e      	adds	r6, r3, r0
  413b54:	5c1b      	ldrb	r3, [r3, r0]
  413b56:	b1ab      	cbz	r3, 413b84 <lv_label_revert_dots+0x68>
  413b58:	2500      	movs	r5, #0
  413b5a:	462b      	mov	r3, r5
        label->text[byte_i + i] = dot_tmp[i];
  413b5c:	5d7a      	ldrb	r2, [r7, r5]
  413b5e:	7032      	strb	r2, [r6, #0]
        i++;
  413b60:	3301      	adds	r3, #1
  413b62:	b2db      	uxtb	r3, r3
    while(label->text[byte_i + i] != '\0') {
  413b64:	461d      	mov	r5, r3
  413b66:	18c2      	adds	r2, r0, r3
  413b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
  413b6a:	188e      	adds	r6, r1, r2
  413b6c:	5c8a      	ldrb	r2, [r1, r2]
  413b6e:	2a00      	cmp	r2, #0
  413b70:	d1f4      	bne.n	413b5c <lv_label_revert_dots+0x40>
    label->text[byte_i + i] = dot_tmp[i];
  413b72:	5d7b      	ldrb	r3, [r7, r5]
  413b74:	7033      	strb	r3, [r6, #0]
    lv_label_dot_tmp_free(obj);
  413b76:	4620      	mov	r0, r4
  413b78:	4b04      	ldr	r3, [pc, #16]	; (413b8c <lv_label_revert_dots+0x70>)
  413b7a:	4798      	blx	r3
    label->dot_end = LV_LABEL_DOT_END_INV;
  413b7c:	f04f 33ff 	mov.w	r3, #4294967295
  413b80:	62e3      	str	r3, [r4, #44]	; 0x2c
  413b82:	e7d2      	b.n	413b2a <lv_label_revert_dots+0xe>
    while(label->text[byte_i + i] != '\0') {
  413b84:	2500      	movs	r5, #0
  413b86:	e7f4      	b.n	413b72 <lv_label_revert_dots+0x56>
  413b88:	20400014 	.word	0x20400014
  413b8c:	00413af1 	.word	0x00413af1

00413b90 <lv_label_destructor>:
{
  413b90:	b510      	push	{r4, lr}
  413b92:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
  413b94:	4608      	mov	r0, r1
  413b96:	4b07      	ldr	r3, [pc, #28]	; (413bb4 <lv_label_destructor+0x24>)
  413b98:	4798      	blx	r3
    if(!label->static_txt) lv_mem_free(label->text);
  413b9a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  413b9e:	f013 0f08 	tst.w	r3, #8
  413ba2:	d002      	beq.n	413baa <lv_label_destructor+0x1a>
    label->text = NULL;
  413ba4:	2300      	movs	r3, #0
  413ba6:	6263      	str	r3, [r4, #36]	; 0x24
  413ba8:	bd10      	pop	{r4, pc}
    if(!label->static_txt) lv_mem_free(label->text);
  413baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
  413bac:	4b02      	ldr	r3, [pc, #8]	; (413bb8 <lv_label_destructor+0x28>)
  413bae:	4798      	blx	r3
  413bb0:	e7f8      	b.n	413ba4 <lv_label_destructor+0x14>
  413bb2:	bf00      	nop
  413bb4:	00413af1 	.word	0x00413af1
  413bb8:	004110e1 	.word	0x004110e1

00413bbc <set_ofs_y_anim>:
    label->offset.x    = v;
    lv_obj_invalidate(obj);
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
  413bbc:	b508      	push	{r3, lr}
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
  413bbe:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
  413bc2:	4b01      	ldr	r3, [pc, #4]	; (413bc8 <set_ofs_y_anim+0xc>)
  413bc4:	4798      	blx	r3
  413bc6:	bd08      	pop	{r3, pc}
  413bc8:	0040262d 	.word	0x0040262d

00413bcc <set_ofs_x_anim>:
{
  413bcc:	b508      	push	{r3, lr}
    label->offset.x    = v;
  413bce:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
  413bd2:	4b01      	ldr	r3, [pc, #4]	; (413bd8 <set_ofs_x_anim+0xc>)
  413bd4:	4798      	blx	r3
  413bd6:	bd08      	pop	{r3, pc}
  413bd8:	0040262d 	.word	0x0040262d

00413bdc <lv_label_create>:
{
  413bdc:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
  413bde:	4601      	mov	r1, r0
  413be0:	4803      	ldr	r0, [pc, #12]	; (413bf0 <lv_label_create+0x14>)
  413be2:	4b04      	ldr	r3, [pc, #16]	; (413bf4 <lv_label_create+0x18>)
  413be4:	4798      	blx	r3
  413be6:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
  413be8:	4b03      	ldr	r3, [pc, #12]	; (413bf8 <lv_label_create+0x1c>)
  413bea:	4798      	blx	r3
}
  413bec:	4620      	mov	r0, r4
  413bee:	bd10      	pop	{r4, pc}
  413bf0:	00421140 	.word	0x00421140
  413bf4:	00401975 	.word	0x00401975
  413bf8:	00401b15 	.word	0x00401b15

00413bfc <lv_label_get_text>:
}
  413bfc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  413bfe:	4770      	bx	lr

00413c00 <lv_label_get_letter_on>:
{
  413c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413c04:	b093      	sub	sp, #76	; 0x4c
    LV_ASSERT_NULL(pos_in);
  413c06:	2900      	cmp	r1, #0
  413c08:	f000 808d 	beq.w	413d26 <lv_label_get_letter_on+0x126>
  413c0c:	4605      	mov	r5, r0
  413c0e:	460c      	mov	r4, r1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
  413c10:	f9b1 3000 	ldrsh.w	r3, [r1]
  413c14:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
  413c16:	f641 0212 	movw	r2, #6162	; 0x1812
  413c1a:	2100      	movs	r1, #0
  413c1c:	4e8d      	ldr	r6, [pc, #564]	; (413e54 <lv_label_get_letter_on+0x254>)
  413c1e:	47b0      	blx	r6
  413c20:	900a      	str	r0, [sp, #40]	; 0x28
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
  413c22:	8864      	ldrh	r4, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
  413c24:	f641 0210 	movw	r2, #6160	; 0x1810
  413c28:	2100      	movs	r1, #0
  413c2a:	4628      	mov	r0, r5
  413c2c:	47b0      	blx	r6
  413c2e:	1a20      	subs	r0, r4, r0
  413c30:	fa0f fa80 	sxth.w	sl, r0
    lv_obj_get_content_coords(obj, &txt_coords);
  413c34:	a910      	add	r1, sp, #64	; 0x40
  413c36:	4628      	mov	r0, r5
  413c38:	4b87      	ldr	r3, [pc, #540]	; (413e58 <lv_label_get_letter_on+0x258>)
  413c3a:	4798      	blx	r3
    return label->text;
  413c3c:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  413c40:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  413c44:	3301      	adds	r3, #1
  413c46:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
  413c4a:	1a9b      	subs	r3, r3, r2
  413c4c:	b21b      	sxth	r3, r3
  413c4e:	9307      	str	r3, [sp, #28]
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
  413c50:	f241 4259 	movw	r2, #5209	; 0x1459
  413c54:	2100      	movs	r1, #0
  413c56:	4628      	mov	r0, r5
  413c58:	47b0      	blx	r6
  413c5a:	4607      	mov	r7, r0
  413c5c:	9004      	str	r0, [sp, #16]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
  413c5e:	f241 425b 	movw	r2, #5211	; 0x145b
  413c62:	2100      	movs	r1, #0
  413c64:	4628      	mov	r0, r5
  413c66:	47b0      	blx	r6
  413c68:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
  413c6a:	f241 425a 	movw	r2, #5210	; 0x145a
  413c6e:	2100      	movs	r1, #0
  413c70:	4628      	mov	r0, r5
  413c72:	47b0      	blx	r6
  413c74:	9009      	str	r0, [sp, #36]	; 0x24
    return (lv_coord_t)v.num;
  413c76:	b203      	sxth	r3, r0
  413c78:	9305      	str	r3, [sp, #20]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  413c7a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
  413c7e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
  413c82:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
  413c86:	f013 0f20 	tst.w	r3, #32
  413c8a:	bf18      	it	ne
  413c8c:	f049 0902 	orrne.w	r9, r9, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  413c90:	f241 0201 	movw	r2, #4097	; 0x1001
  413c94:	2100      	movs	r1, #0
  413c96:	4628      	mov	r0, r5
  413c98:	4b6e      	ldr	r3, [pc, #440]	; (413e54 <lv_label_get_letter_on+0x254>)
  413c9a:	4798      	blx	r3
    return (lv_coord_t)v.num;
  413c9c:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
  413c9e:	f242 73d1 	movw	r3, #10193	; 0x27d1
  413ca2:	4298      	cmp	r0, r3
  413ca4:	d04d      	beq.n	413d42 <lv_label_get_letter_on+0x142>
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
  413ca6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  413ca8:	2100      	movs	r1, #0
  413caa:	4628      	mov	r0, r5
  413cac:	4b6b      	ldr	r3, [pc, #428]	; (413e5c <lv_label_get_letter_on+0x25c>)
  413cae:	4798      	blx	r3
  413cb0:	900b      	str	r0, [sp, #44]	; 0x2c
    while(txt[line_start] != '\0') {
  413cb2:	f898 3000 	ldrb.w	r3, [r8]
  413cb6:	2b00      	cmp	r3, #0
  413cb8:	d05d      	beq.n	413d76 <lv_label_get_letter_on+0x176>
  413cba:	4647      	mov	r7, r8
  413cbc:	2600      	movs	r6, #0
  413cbe:	4635      	mov	r5, r6
        y += letter_height + line_space;
  413cc0:	eb0b 0304 	add.w	r3, fp, r4
  413cc4:	f8cd 9018 	str.w	r9, [sp, #24]
  413cc8:	4699      	mov	r9, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  413cca:	9b06      	ldr	r3, [sp, #24]
  413ccc:	9300      	str	r3, [sp, #0]
  413cce:	9b07      	ldr	r3, [sp, #28]
  413cd0:	9a05      	ldr	r2, [sp, #20]
  413cd2:	9904      	ldr	r1, [sp, #16]
  413cd4:	4638      	mov	r0, r7
  413cd6:	4c62      	ldr	r4, [pc, #392]	; (413e60 <lv_label_get_letter_on+0x260>)
  413cd8:	47a0      	blx	r4
  413cda:	4428      	add	r0, r5
        if(pos.y <= y + letter_height) {
  413cdc:	eb06 030b 	add.w	r3, r6, fp
  413ce0:	459a      	cmp	sl, r3
  413ce2:	dd36      	ble.n	413d52 <lv_label_get_letter_on+0x152>
  413ce4:	444e      	add	r6, r9
  413ce6:	b236      	sxth	r6, r6
    while(txt[line_start] != '\0') {
  413ce8:	eb08 0700 	add.w	r7, r8, r0
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  413cec:	4605      	mov	r5, r0
    while(txt[line_start] != '\0') {
  413cee:	f818 3000 	ldrb.w	r3, [r8, r0]
  413cf2:	2b00      	cmp	r3, #0
  413cf4:	d1e9      	bne.n	413cca <lv_label_get_letter_on+0xca>
  413cf6:	f8dd 9018 	ldr.w	r9, [sp, #24]
  413cfa:	4604      	mov	r4, r0
    if(align == LV_TEXT_ALIGN_CENTER) {
  413cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  413cfe:	2b02      	cmp	r3, #2
  413d00:	d03d      	beq.n	413d7e <lv_label_get_letter_on+0x17e>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
  413d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  413d04:	2b03      	cmp	r3, #3
  413d06:	d055      	beq.n	413db4 <lv_label_get_letter_on+0x1b4>
    lv_coord_t x = 0;
  413d08:	2600      	movs	r6, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
  413d0a:	2300      	movs	r3, #0
  413d0c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    uint32_t i = 0;
  413d10:	930e      	str	r3, [sp, #56]	; 0x38
    if(new_line_start > 0) {
  413d12:	2c00      	cmp	r4, #0
  413d14:	f000 8090 	beq.w	413e38 <lv_label_get_letter_on+0x238>
  413d18:	f04f 0a00 	mov.w	sl, #0
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
  413d1c:	f8df b170 	ldr.w	fp, [pc, #368]	; 413e90 <lv_label_get_letter_on+0x290>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
  413d20:	f009 0901 	and.w	r9, r9, #1
  413d24:	e071      	b.n	413e0a <lv_label_get_letter_on+0x20a>
    LV_ASSERT_NULL(pos_in);
  413d26:	4b4f      	ldr	r3, [pc, #316]	; (413e64 <lv_label_get_letter_on+0x264>)
  413d28:	9302      	str	r3, [sp, #8]
  413d2a:	4b4f      	ldr	r3, [pc, #316]	; (413e68 <lv_label_get_letter_on+0x268>)
  413d2c:	9301      	str	r3, [sp, #4]
  413d2e:	4b4f      	ldr	r3, [pc, #316]	; (413e6c <lv_label_get_letter_on+0x26c>)
  413d30:	9300      	str	r3, [sp, #0]
  413d32:	4b4f      	ldr	r3, [pc, #316]	; (413e70 <lv_label_get_letter_on+0x270>)
  413d34:	f44f 72c8 	mov.w	r2, #400	; 0x190
  413d38:	494e      	ldr	r1, [pc, #312]	; (413e74 <lv_label_get_letter_on+0x274>)
  413d3a:	2003      	movs	r0, #3
  413d3c:	4c4e      	ldr	r4, [pc, #312]	; (413e78 <lv_label_get_letter_on+0x278>)
  413d3e:	47a0      	blx	r4
  413d40:	e7fe      	b.n	413d40 <lv_label_get_letter_on+0x140>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
  413d42:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  413d46:	f013 0f04 	tst.w	r3, #4
  413d4a:	bf08      	it	eq
  413d4c:	f049 0904 	orreq.w	r9, r9, #4
  413d50:	e7a9      	b.n	413ca6 <lv_label_get_letter_on+0xa6>
  413d52:	f8dd 9018 	ldr.w	r9, [sp, #24]
  413d56:	4604      	mov	r4, r0
            uint32_t tmp = new_line_start;
  413d58:	a912      	add	r1, sp, #72	; 0x48
  413d5a:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
  413d5e:	4b47      	ldr	r3, [pc, #284]	; (413e7c <lv_label_get_letter_on+0x27c>)
  413d60:	681b      	ldr	r3, [r3, #0]
  413d62:	4640      	mov	r0, r8
  413d64:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
  413d66:	280a      	cmp	r0, #10
  413d68:	d0c8      	beq.n	413cfc <lv_label_get_letter_on+0xfc>
  413d6a:	f818 3004 	ldrb.w	r3, [r8, r4]
  413d6e:	2b00      	cmp	r3, #0
  413d70:	d1c4      	bne.n	413cfc <lv_label_get_letter_on+0xfc>
  413d72:	3401      	adds	r4, #1
  413d74:	e7c2      	b.n	413cfc <lv_label_get_letter_on+0xfc>
    while(txt[line_start] != '\0') {
  413d76:	4647      	mov	r7, r8
    uint32_t line_start      = 0;
  413d78:	2500      	movs	r5, #0
  413d7a:	462c      	mov	r4, r5
  413d7c:	e7be      	b.n	413cfc <lv_label_get_letter_on+0xfc>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  413d7e:	f8cd 9000 	str.w	r9, [sp]
  413d82:	9b05      	ldr	r3, [sp, #20]
  413d84:	9a04      	ldr	r2, [sp, #16]
  413d86:	1b61      	subs	r1, r4, r5
  413d88:	4638      	mov	r0, r7
  413d8a:	4e3d      	ldr	r6, [pc, #244]	; (413e80 <lv_label_get_letter_on+0x280>)
  413d8c:	47b0      	blx	r6
  413d8e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  413d92:	3301      	adds	r3, #1
  413d94:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
  413d98:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
  413d9a:	b21b      	sxth	r3, r3
  413d9c:	2b00      	cmp	r3, #0
  413d9e:	bfb8      	it	lt
  413da0:	3301      	addlt	r3, #1
  413da2:	105e      	asrs	r6, r3, #1
  413da4:	4603      	mov	r3, r0
  413da6:	2800      	cmp	r0, #0
  413da8:	bfb8      	it	lt
  413daa:	1c43      	addlt	r3, r0, #1
  413dac:	eba6 0663 	sub.w	r6, r6, r3, asr #1
  413db0:	b236      	sxth	r6, r6
  413db2:	e7aa      	b.n	413d0a <lv_label_get_letter_on+0x10a>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  413db4:	f8cd 9000 	str.w	r9, [sp]
  413db8:	9b05      	ldr	r3, [sp, #20]
  413dba:	9a04      	ldr	r2, [sp, #16]
  413dbc:	1b61      	subs	r1, r4, r5
  413dbe:	4638      	mov	r0, r7
  413dc0:	4e2f      	ldr	r6, [pc, #188]	; (413e80 <lv_label_get_letter_on+0x280>)
  413dc2:	47b0      	blx	r6
  413dc4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  413dc8:	3301      	adds	r3, #1
  413dca:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
  413dce:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
  413dd0:	1a1b      	subs	r3, r3, r0
  413dd2:	b21e      	sxth	r6, r3
  413dd4:	e799      	b.n	413d0a <lv_label_get_letter_on+0x10a>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
  413dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  413dd8:	990c      	ldr	r1, [sp, #48]	; 0x30
  413dda:	9804      	ldr	r0, [sp, #16]
  413ddc:	4b29      	ldr	r3, [pc, #164]	; (413e84 <lv_label_get_letter_on+0x284>)
  413dde:	4798      	blx	r3
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
  413de0:	9b08      	ldr	r3, [sp, #32]
  413de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  413de4:	1a9b      	subs	r3, r3, r2
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
  413de6:	b21b      	sxth	r3, r3
  413de8:	fa06 f280 	sxtah	r2, r6, r0
  413dec:	4293      	cmp	r3, r2
  413dee:	db21      	blt.n	413e34 <lv_label_get_letter_on+0x234>
  413df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  413df2:	195a      	adds	r2, r3, r5
  413df4:	4294      	cmp	r4, r2
  413df6:	d01d      	beq.n	413e34 <lv_label_get_letter_on+0x234>
  413df8:	eb08 020a 	add.w	r2, r8, sl
  413dfc:	5d52      	ldrb	r2, [r2, r5]
  413dfe:	b1ca      	cbz	r2, 413e34 <lv_label_get_letter_on+0x234>
            x += letter_space;
  413e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
  413e02:	4416      	add	r6, r2
  413e04:	4430      	add	r0, r6
  413e06:	b206      	sxth	r6, r0
            i_act = i;
  413e08:	469a      	mov	sl, r3
        while(i + line_start < new_line_start) {
  413e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  413e0c:	442b      	add	r3, r5
  413e0e:	429c      	cmp	r4, r3
  413e10:	d912      	bls.n	413e38 <lv_label_get_letter_on+0x238>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
  413e12:	ab0e      	add	r3, sp, #56	; 0x38
  413e14:	aa0d      	add	r2, sp, #52	; 0x34
  413e16:	a90c      	add	r1, sp, #48	; 0x30
  413e18:	4638      	mov	r0, r7
  413e1a:	47d8      	blx	fp
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
  413e1c:	f1b9 0f00 	cmp.w	r9, #0
  413e20:	d0d9      	beq.n	413dd6 <lv_label_get_letter_on+0x1d6>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
  413e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  413e24:	5cf9      	ldrb	r1, [r7, r3]
  413e26:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
  413e2a:	4b17      	ldr	r3, [pc, #92]	; (413e88 <lv_label_get_letter_on+0x288>)
  413e2c:	4798      	blx	r3
  413e2e:	2800      	cmp	r0, #0
  413e30:	d1eb      	bne.n	413e0a <lv_label_get_letter_on+0x20a>
  413e32:	e7d0      	b.n	413dd6 <lv_label_get_letter_on+0x1d6>
                i = i_act;
  413e34:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
  413e38:	4c14      	ldr	r4, [pc, #80]	; (413e8c <lv_label_get_letter_on+0x28c>)
  413e3a:	6823      	ldr	r3, [r4, #0]
  413e3c:	990e      	ldr	r1, [sp, #56]	; 0x38
  413e3e:	4638      	mov	r0, r7
  413e40:	4798      	blx	r3
  413e42:	4606      	mov	r6, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
  413e44:	6823      	ldr	r3, [r4, #0]
  413e46:	4629      	mov	r1, r5
  413e48:	4640      	mov	r0, r8
  413e4a:	4798      	blx	r3
}
  413e4c:	4430      	add	r0, r6
  413e4e:	b013      	add	sp, #76	; 0x4c
  413e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413e54:	00404f1d 	.word	0x00404f1d
  413e58:	0040236d 	.word	0x0040236d
  413e5c:	00405ca9 	.word	0x00405ca9
  413e60:	004135e1 	.word	0x004135e1
  413e64:	0041cd00 	.word	0x0041cd00
  413e68:	00421164 	.word	0x00421164
  413e6c:	0041c098 	.word	0x0041c098
  413e70:	00421128 	.word	0x00421128
  413e74:	00421174 	.word	0x00421174
  413e78:	00410edd 	.word	0x00410edd
  413e7c:	20400020 	.word	0x20400020
  413e80:	004138bd 	.word	0x004138bd
  413e84:	0040fd71 	.word	0x0040fd71
  413e88:	00413599 	.word	0x00413599
  413e8c:	20400018 	.word	0x20400018
  413e90:	0041388d 	.word	0x0041388d

00413e94 <lv_label_refr_text>:
    if(label->text == NULL) return;
  413e94:	6a43      	ldr	r3, [r0, #36]	; 0x24
  413e96:	2b00      	cmp	r3, #0
  413e98:	f000 828c 	beq.w	4143b4 <lv_label_refr_text+0x520>
{
  413e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413ea0:	b09d      	sub	sp, #116	; 0x74
  413ea2:	4604      	mov	r4, r0
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
  413ea4:	f04f 33ff 	mov.w	r3, #4294967295
  413ea8:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
  413eaa:	a91a      	add	r1, sp, #104	; 0x68
  413eac:	4ba8      	ldr	r3, [pc, #672]	; (414150 <lv_label_refr_text+0x2bc>)
  413eae:	4798      	blx	r3
  413eb0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
  413eb4:	3501      	adds	r5, #1
  413eb6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  413eba:	1aed      	subs	r5, r5, r3
  413ebc:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
  413ebe:	f241 4259 	movw	r2, #5209	; 0x1459
  413ec2:	2100      	movs	r1, #0
  413ec4:	4620      	mov	r0, r4
  413ec6:	4ea3      	ldr	r6, [pc, #652]	; (414154 <lv_label_refr_text+0x2c0>)
  413ec8:	47b0      	blx	r6
  413eca:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
  413ecc:	f241 425b 	movw	r2, #5211	; 0x145b
  413ed0:	2100      	movs	r1, #0
  413ed2:	4620      	mov	r0, r4
  413ed4:	47b0      	blx	r6
  413ed6:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
  413ed8:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
  413edc:	f241 425a 	movw	r2, #5210	; 0x145a
  413ee0:	2100      	movs	r1, #0
  413ee2:	4620      	mov	r0, r4
  413ee4:	47b0      	blx	r6
    return (lv_coord_t)v.num;
  413ee6:	b206      	sxth	r6, r0
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
  413ee8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
  413eec:	f3c3 1a00 	ubfx	sl, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
  413ef0:	f013 0f20 	tst.w	r3, #32
  413ef4:	bf18      	it	ne
  413ef6:	f04a 0a02 	orrne.w	sl, sl, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  413efa:	f241 0201 	movw	r2, #4097	; 0x1001
  413efe:	2100      	movs	r1, #0
  413f00:	4620      	mov	r0, r4
  413f02:	4b94      	ldr	r3, [pc, #592]	; (414154 <lv_label_refr_text+0x2c0>)
  413f04:	4798      	blx	r3
    return (lv_coord_t)v.num;
  413f06:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
  413f08:	f242 73d1 	movw	r3, #10193	; 0x27d1
  413f0c:	4298      	cmp	r0, r3
  413f0e:	d01f      	beq.n	413f50 <lv_label_refr_text+0xbc>
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
  413f10:	f8cd a008 	str.w	sl, [sp, #8]
  413f14:	9501      	str	r5, [sp, #4]
  413f16:	f8cd 8000 	str.w	r8, [sp]
  413f1a:	4633      	mov	r3, r6
  413f1c:	463a      	mov	r2, r7
  413f1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  413f20:	a819      	add	r0, sp, #100	; 0x64
  413f22:	4d8d      	ldr	r5, [pc, #564]	; (414158 <lv_label_refr_text+0x2c4>)
  413f24:	47a8      	blx	r5
    lv_obj_refresh_self_size(obj);
  413f26:	4620      	mov	r0, r4
  413f28:	4b8c      	ldr	r3, [pc, #560]	; (41415c <lv_label_refr_text+0x2c8>)
  413f2a:	4798      	blx	r3
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
  413f2c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  413f30:	f003 0307 	and.w	r3, r3, #7
  413f34:	2b02      	cmp	r3, #2
  413f36:	d013      	beq.n	413f60 <lv_label_refr_text+0xcc>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
  413f38:	2b03      	cmp	r3, #3
  413f3a:	f000 80be 	beq.w	4140ba <lv_label_refr_text+0x226>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
  413f3e:	2b01      	cmp	r3, #1
  413f40:	f000 8169 	beq.w	414216 <lv_label_refr_text+0x382>
    lv_obj_invalidate(obj);
  413f44:	4620      	mov	r0, r4
  413f46:	4b86      	ldr	r3, [pc, #536]	; (414160 <lv_label_refr_text+0x2cc>)
  413f48:	4798      	blx	r3
}
  413f4a:	b01d      	add	sp, #116	; 0x74
  413f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
  413f50:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  413f54:	f013 0f04 	tst.w	r3, #4
  413f58:	bf08      	it	eq
  413f5a:	f04a 0a04 	orreq.w	sl, sl, #4
  413f5e:	e7d7      	b.n	413f10 <lv_label_refr_text+0x7c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
  413f60:	2266      	movs	r2, #102	; 0x66
  413f62:	2100      	movs	r1, #0
  413f64:	4620      	mov	r0, r4
  413f66:	4b7b      	ldr	r3, [pc, #492]	; (414154 <lv_label_refr_text+0x2c0>)
  413f68:	4798      	blx	r3
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
  413f6a:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  413f6c:	2d00      	cmp	r5, #0
  413f6e:	d04d      	beq.n	41400c <lv_label_refr_text+0x178>
        lv_anim_init(&a);
  413f70:	a808      	add	r0, sp, #32
  413f72:	4b7c      	ldr	r3, [pc, #496]	; (414164 <lv_label_refr_text+0x2d0>)
  413f74:	4798      	blx	r3
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
  413f76:	9408      	str	r4, [sp, #32]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
  413f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
  413f7c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    a->playback_delay = delay;
  413f80:	f44f 7396 	mov.w	r3, #300	; 0x12c
  413f84:	9314      	str	r3, [sp, #80]	; 0x50
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
  413f86:	9316      	str	r3, [sp, #88]	; 0x58
        if(size.x > lv_area_get_width(&txt_coords)) {
  413f88:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
  413f8c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  413f90:	3301      	adds	r3, #1
  413f92:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
  413f96:	1a5b      	subs	r3, r3, r1
  413f98:	b21b      	sxth	r3, r3
  413f9a:	429a      	cmp	r2, r3
  413f9c:	dd46      	ble.n	41402c <lv_label_refr_text+0x198>
    a->start_value = start;
  413f9e:	2100      	movs	r1, #0
  413fa0:	910f      	str	r1, [sp, #60]	; 0x3c
    a->current_value = start;
  413fa2:	9110      	str	r1, [sp, #64]	; 0x40
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
  413fa4:	1a9b      	subs	r3, r3, r2
    a->end_value = end;
  413fa6:	9311      	str	r3, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
  413fa8:	496f      	ldr	r1, [pc, #444]	; (414168 <lv_label_refr_text+0x2d4>)
  413faa:	9109      	str	r1, [sp, #36]	; 0x24
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
  413fac:	4620      	mov	r0, r4
  413fae:	4b6f      	ldr	r3, [pc, #444]	; (41416c <lv_label_refr_text+0x2d8>)
  413fb0:	4798      	blx	r3
            if(anim_cur) {
  413fb2:	2800      	cmp	r0, #0
  413fb4:	d037      	beq.n	414026 <lv_label_refr_text+0x192>
                act_time = anim_cur->act_time;
  413fb6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
  413fb8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  413fbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
  413fc0:	9912      	ldr	r1, [sp, #72]	; 0x48
  413fc2:	428a      	cmp	r2, r1
  413fc4:	da10      	bge.n	413fe8 <lv_label_refr_text+0x154>
                a.act_time = act_time;      /*To keep the old position*/
  413fc6:	9213      	str	r2, [sp, #76]	; 0x4c
                a.early_apply = 0;
  413fc8:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
  413fcc:	f36f 0200 	bfc	r2, #0, #1
  413fd0:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
                if(playback_now) {
  413fd4:	b143      	cbz	r3, 413fe8 <lv_label_refr_text+0x154>
                    a.playback_now = 1;
  413fd6:	b2d3      	uxtb	r3, r2
  413fd8:	f043 0302 	orr.w	r3, r3, #2
  413fdc:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                    tmp      = a.start_value;
  413fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    a.start_value = a.end_value;
  413fe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  413fe4:	920f      	str	r2, [sp, #60]	; 0x3c
                    a.end_value   = tmp;
  413fe6:	9311      	str	r3, [sp, #68]	; 0x44
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
  413fe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  413fea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  413fec:	4628      	mov	r0, r5
  413fee:	4b60      	ldr	r3, [pc, #384]	; (414170 <lv_label_refr_text+0x2dc>)
  413ff0:	4798      	blx	r3
    a->time = duration;
  413ff2:	9012      	str	r0, [sp, #72]	; 0x48
    a->playback_time = time;
  413ff4:	9015      	str	r0, [sp, #84]	; 0x54
            lv_anim_start(&a);
  413ff6:	a808      	add	r0, sp, #32
  413ff8:	4b5e      	ldr	r3, [pc, #376]	; (414174 <lv_label_refr_text+0x2e0>)
  413ffa:	4798      	blx	r3
            lv_anim_del(obj, set_ofs_y_anim);
  413ffc:	495e      	ldr	r1, [pc, #376]	; (414178 <lv_label_refr_text+0x2e4>)
  413ffe:	4620      	mov	r0, r4
  414000:	4b5e      	ldr	r3, [pc, #376]	; (41417c <lv_label_refr_text+0x2e8>)
  414002:	4798      	blx	r3
            label->offset.y = 0;
  414004:	2300      	movs	r3, #0
  414006:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  41400a:	e79b      	b.n	413f44 <lv_label_refr_text+0xb0>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  41400c:	4620      	mov	r0, r4
  41400e:	4b5c      	ldr	r3, [pc, #368]	; (414180 <lv_label_refr_text+0x2ec>)
  414010:	4798      	blx	r3
  414012:	4b5c      	ldr	r3, [pc, #368]	; (414184 <lv_label_refr_text+0x2f0>)
  414014:	4798      	blx	r3
  414016:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
  41401a:	fb85 3500 	smull	r3, r5, r5, r0
  41401e:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
  414022:	b2ad      	uxth	r5, r5
  414024:	e7a4      	b.n	413f70 <lv_label_refr_text+0xdc>
            bool playback_now = false;
  414026:	2300      	movs	r3, #0
            int32_t act_time = 0;
  414028:	461a      	mov	r2, r3
  41402a:	e7c9      	b.n	413fc0 <lv_label_refr_text+0x12c>
            lv_anim_del(obj, set_ofs_x_anim);
  41402c:	494e      	ldr	r1, [pc, #312]	; (414168 <lv_label_refr_text+0x2d4>)
  41402e:	4620      	mov	r0, r4
  414030:	4b52      	ldr	r3, [pc, #328]	; (41417c <lv_label_refr_text+0x2e8>)
  414032:	4798      	blx	r3
            label->offset.x = 0;
  414034:	2300      	movs	r3, #0
  414036:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41403a:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41403e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  414042:	3301      	adds	r3, #1
  414044:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
  414048:	1a5b      	subs	r3, r3, r1
  41404a:	b21b      	sxth	r3, r3
  41404c:	429a      	cmp	r2, r3
  41404e:	ddd5      	ble.n	413ffc <lv_label_refr_text+0x168>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
  414050:	1a9b      	subs	r3, r3, r2
  414052:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
  414056:	1a9b      	subs	r3, r3, r2
    a->start_value = start;
  414058:	2200      	movs	r2, #0
  41405a:	920f      	str	r2, [sp, #60]	; 0x3c
    a->current_value = start;
  41405c:	9210      	str	r2, [sp, #64]	; 0x40
    a->end_value = end;
  41405e:	9311      	str	r3, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
  414060:	4945      	ldr	r1, [pc, #276]	; (414178 <lv_label_refr_text+0x2e4>)
  414062:	9109      	str	r1, [sp, #36]	; 0x24
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
  414064:	4620      	mov	r0, r4
  414066:	4b41      	ldr	r3, [pc, #260]	; (41416c <lv_label_refr_text+0x2d8>)
  414068:	4798      	blx	r3
            if(anim_cur) {
  41406a:	b318      	cbz	r0, 4140b4 <lv_label_refr_text+0x220>
                act_time = anim_cur->act_time;
  41406c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
  41406e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  414072:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
  414076:	9912      	ldr	r1, [sp, #72]	; 0x48
  414078:	428a      	cmp	r2, r1
  41407a:	da10      	bge.n	41409e <lv_label_refr_text+0x20a>
                a.act_time = act_time;      /*To keep the old position*/
  41407c:	9213      	str	r2, [sp, #76]	; 0x4c
                a.early_apply = 0;
  41407e:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
  414082:	f36f 0200 	bfc	r2, #0, #1
  414086:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
                if(playback_now) {
  41408a:	b143      	cbz	r3, 41409e <lv_label_refr_text+0x20a>
                    a.playback_now = 1;
  41408c:	b2d3      	uxtb	r3, r2
  41408e:	f043 0302 	orr.w	r3, r3, #2
  414092:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
                    tmp      = a.start_value;
  414096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    a.start_value = a.end_value;
  414098:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41409a:	920f      	str	r2, [sp, #60]	; 0x3c
                    a.end_value   = tmp;
  41409c:	9311      	str	r3, [sp, #68]	; 0x44
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
  41409e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4140a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4140a2:	4628      	mov	r0, r5
  4140a4:	4b32      	ldr	r3, [pc, #200]	; (414170 <lv_label_refr_text+0x2dc>)
  4140a6:	4798      	blx	r3
    a->time = duration;
  4140a8:	9012      	str	r0, [sp, #72]	; 0x48
    a->playback_time = time;
  4140aa:	9015      	str	r0, [sp, #84]	; 0x54
            lv_anim_start(&a);
  4140ac:	a808      	add	r0, sp, #32
  4140ae:	4b31      	ldr	r3, [pc, #196]	; (414174 <lv_label_refr_text+0x2e0>)
  4140b0:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  4140b2:	e747      	b.n	413f44 <lv_label_refr_text+0xb0>
            bool playback_now = false;
  4140b4:	2300      	movs	r3, #0
            int32_t act_time = 0;
  4140b6:	461a      	mov	r2, r3
  4140b8:	e7dd      	b.n	414076 <lv_label_refr_text+0x1e2>
  4140ba:	2266      	movs	r2, #102	; 0x66
  4140bc:	2100      	movs	r1, #0
  4140be:	4620      	mov	r0, r4
  4140c0:	4b24      	ldr	r3, [pc, #144]	; (414154 <lv_label_refr_text+0x2c0>)
  4140c2:	4798      	blx	r3
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
  4140c4:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  4140c6:	2d00      	cmp	r5, #0
  4140c8:	d060      	beq.n	41418c <lv_label_refr_text+0x2f8>
        lv_anim_init(&a);
  4140ca:	a808      	add	r0, sp, #32
  4140cc:	4b25      	ldr	r3, [pc, #148]	; (414164 <lv_label_refr_text+0x2d0>)
  4140ce:	4798      	blx	r3
    a->var = var;
  4140d0:	9408      	str	r4, [sp, #32]
    a->repeat_cnt = cnt;
  4140d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4140d6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4140da:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  4140de:	3301      	adds	r3, #1
  4140e0:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
  4140e4:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
  4140e6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
  4140ea:	b21b      	sxth	r3, r3
  4140ec:	429a      	cmp	r2, r3
  4140ee:	dd5c      	ble.n	4141aa <lv_label_refr_text+0x316>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
  4140f0:	2220      	movs	r2, #32
  4140f2:	4611      	mov	r1, r2
  4140f4:	4638      	mov	r0, r7
  4140f6:	4b24      	ldr	r3, [pc, #144]	; (414188 <lv_label_refr_text+0x2f4>)
  4140f8:	4798      	blx	r3
  4140fa:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  4140fe:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
  414102:	1a82      	subs	r2, r0, r2
    a->start_value = start;
  414104:	2100      	movs	r1, #0
  414106:	910f      	str	r1, [sp, #60]	; 0x3c
    a->current_value = start;
  414108:	9110      	str	r1, [sp, #64]	; 0x40
    a->end_value = end;
  41410a:	9211      	str	r2, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
  41410c:	4e16      	ldr	r6, [pc, #88]	; (414168 <lv_label_refr_text+0x2d4>)
  41410e:	9609      	str	r6, [sp, #36]	; 0x24
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
  414110:	4628      	mov	r0, r5
  414112:	4b17      	ldr	r3, [pc, #92]	; (414170 <lv_label_refr_text+0x2dc>)
  414114:	4798      	blx	r3
    a->time = duration;
  414116:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
  414118:	4631      	mov	r1, r6
  41411a:	4620      	mov	r0, r4
  41411c:	4b13      	ldr	r3, [pc, #76]	; (41416c <lv_label_refr_text+0x2d8>)
  41411e:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  414120:	2800      	cmp	r0, #0
  414122:	d040      	beq.n	4141a6 <lv_label_refr_text+0x312>
  414124:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            if(act_time < a.time) {
  414126:	9a12      	ldr	r2, [sp, #72]	; 0x48
  414128:	4293      	cmp	r3, r2
  41412a:	da06      	bge.n	41413a <lv_label_refr_text+0x2a6>
                a.act_time = act_time;      /*To keep the old position*/
  41412c:	9313      	str	r3, [sp, #76]	; 0x4c
                a.early_apply = 0;
  41412e:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
  414132:	f36f 0300 	bfc	r3, #0, #1
  414136:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
            lv_anim_start(&a);
  41413a:	a808      	add	r0, sp, #32
  41413c:	4b0d      	ldr	r3, [pc, #52]	; (414174 <lv_label_refr_text+0x2e0>)
  41413e:	4798      	blx	r3
            lv_anim_del(obj, set_ofs_y_anim);
  414140:	490d      	ldr	r1, [pc, #52]	; (414178 <lv_label_refr_text+0x2e4>)
  414142:	4620      	mov	r0, r4
  414144:	4b0d      	ldr	r3, [pc, #52]	; (41417c <lv_label_refr_text+0x2e8>)
  414146:	4798      	blx	r3
            label->offset.y = 0;
  414148:	2300      	movs	r3, #0
  41414a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  41414e:	e6f9      	b.n	413f44 <lv_label_refr_text+0xb0>
  414150:	0040236d 	.word	0x0040236d
  414154:	00404f1d 	.word	0x00404f1d
  414158:	00413965 	.word	0x00413965
  41415c:	00402431 	.word	0x00402431
  414160:	0040262d 	.word	0x0040262d
  414164:	004104d9 	.word	0x004104d9
  414168:	00413bcd 	.word	0x00413bcd
  41416c:	00410679 	.word	0x00410679
  414170:	004106b9 	.word	0x004106b9
  414174:	0041059d 	.word	0x0041059d
  414178:	00413bbd 	.word	0x00413bbd
  41417c:	00410511 	.word	0x00410511
  414180:	00405d6d 	.word	0x00405d6d
  414184:	0041019d 	.word	0x0041019d
  414188:	0040fd71 	.word	0x0040fd71
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  41418c:	4620      	mov	r0, r4
  41418e:	4b8a      	ldr	r3, [pc, #552]	; (4143b8 <lv_label_refr_text+0x524>)
  414190:	4798      	blx	r3
  414192:	4b8a      	ldr	r3, [pc, #552]	; (4143bc <lv_label_refr_text+0x528>)
  414194:	4798      	blx	r3
  414196:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
  41419a:	fb85 3500 	smull	r3, r5, r5, r0
  41419e:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
  4141a2:	b2ad      	uxth	r5, r5
  4141a4:	e791      	b.n	4140ca <lv_label_refr_text+0x236>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  4141a6:	2300      	movs	r3, #0
  4141a8:	e7bd      	b.n	414126 <lv_label_refr_text+0x292>
            lv_anim_del(obj, set_ofs_x_anim);
  4141aa:	4985      	ldr	r1, [pc, #532]	; (4143c0 <lv_label_refr_text+0x52c>)
  4141ac:	4620      	mov	r0, r4
  4141ae:	4b85      	ldr	r3, [pc, #532]	; (4143c4 <lv_label_refr_text+0x530>)
  4141b0:	4798      	blx	r3
            label->offset.x = 0;
  4141b2:	2300      	movs	r3, #0
  4141b4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  4141b8:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4141bc:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  4141c0:	3301      	adds	r3, #1
  4141c2:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
  4141c6:	1a5b      	subs	r3, r3, r1
  4141c8:	b21b      	sxth	r3, r3
  4141ca:	429a      	cmp	r2, r3
  4141cc:	ddb8      	ble.n	414140 <lv_label_refr_text+0x2ac>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
  4141ce:	4252      	negs	r2, r2
  4141d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
  4141d4:	1ad2      	subs	r2, r2, r3
    a->start_value = start;
  4141d6:	2100      	movs	r1, #0
  4141d8:	910f      	str	r1, [sp, #60]	; 0x3c
    a->current_value = start;
  4141da:	9110      	str	r1, [sp, #64]	; 0x40
    a->end_value = end;
  4141dc:	9211      	str	r2, [sp, #68]	; 0x44
    a->exec_cb = exec_cb;
  4141de:	4e7a      	ldr	r6, [pc, #488]	; (4143c8 <lv_label_refr_text+0x534>)
  4141e0:	9609      	str	r6, [sp, #36]	; 0x24
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
  4141e2:	4628      	mov	r0, r5
  4141e4:	4b79      	ldr	r3, [pc, #484]	; (4143cc <lv_label_refr_text+0x538>)
  4141e6:	4798      	blx	r3
    a->time = duration;
  4141e8:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
  4141ea:	4631      	mov	r1, r6
  4141ec:	4620      	mov	r0, r4
  4141ee:	4b78      	ldr	r3, [pc, #480]	; (4143d0 <lv_label_refr_text+0x53c>)
  4141f0:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  4141f2:	b170      	cbz	r0, 414212 <lv_label_refr_text+0x37e>
  4141f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            if(act_time < a.time) {
  4141f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4141f8:	4293      	cmp	r3, r2
  4141fa:	da06      	bge.n	41420a <lv_label_refr_text+0x376>
                a.act_time = act_time;      /*To keep the old position*/
  4141fc:	9313      	str	r3, [sp, #76]	; 0x4c
                a.early_apply = 0;
  4141fe:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
  414202:	f36f 0300 	bfc	r3, #0, #1
  414206:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
            lv_anim_start(&a);
  41420a:	a808      	add	r0, sp, #32
  41420c:	4b71      	ldr	r3, [pc, #452]	; (4143d4 <lv_label_refr_text+0x540>)
  41420e:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  414210:	e698      	b.n	413f44 <lv_label_refr_text+0xb0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  414212:	2300      	movs	r3, #0
  414214:	e7ef      	b.n	4141f6 <lv_label_refr_text+0x362>
  414216:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  41421a:	3301      	adds	r3, #1
  41421c:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  414220:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
  414222:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
  414226:	b21b      	sxth	r3, r3
  414228:	429a      	cmp	r2, r3
  41422a:	dc03      	bgt.n	414234 <lv_label_refr_text+0x3a0>
            label->dot_end = LV_LABEL_DOT_END_INV;
  41422c:	f04f 33ff 	mov.w	r3, #4294967295
  414230:	62e3      	str	r3, [r4, #44]	; 0x2c
  414232:	e687      	b.n	413f44 <lv_label_refr_text+0xb0>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
  414234:	4b68      	ldr	r3, [pc, #416]	; (4143d8 <lv_label_refr_text+0x544>)
  414236:	681b      	ldr	r3, [r3, #0]
  414238:	6a60      	ldr	r0, [r4, #36]	; 0x24
  41423a:	4798      	blx	r3
  41423c:	2803      	cmp	r0, #3
  41423e:	d803      	bhi.n	414248 <lv_label_refr_text+0x3b4>
            label->dot_end = LV_LABEL_DOT_END_INV;
  414240:	f04f 33ff 	mov.w	r3, #4294967295
  414244:	62e3      	str	r3, [r4, #44]	; 0x2c
  414246:	e67d      	b.n	413f44 <lv_label_refr_text+0xb0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414248:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
  41424c:	3501      	adds	r5, #1
  41424e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  414252:	1aed      	subs	r5, r5, r3
  414254:	b2ad      	uxth	r5, r5
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
  414256:	222e      	movs	r2, #46	; 0x2e
  414258:	4611      	mov	r1, r2
  41425a:	4638      	mov	r0, r7
  41425c:	4b5f      	ldr	r3, [pc, #380]	; (4143dc <lv_label_refr_text+0x548>)
  41425e:	4798      	blx	r3
  414260:	4430      	add	r0, r6
            p.x = lv_area_get_width(&txt_coords) -
  414262:	ebc0 3680 	rsb	r6, r0, r0, lsl #14
  414266:	eb00 0086 	add.w	r0, r0, r6, lsl #2
  41426a:	4428      	add	r0, r5
  41426c:	f8ad 001c 	strh.w	r0, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414270:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  414274:	3301      	adds	r3, #1
  414276:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  41427a:	1a9b      	subs	r3, r3, r2
  41427c:	b29b      	uxth	r3, r3
  41427e:	b219      	sxth	r1, r3
            p.y = lv_area_get_height(&txt_coords);
  414280:	f8ad 101e 	strh.w	r1, [sp, #30]
  414284:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
  414288:	4480      	add	r8, r0
            y_overed = p.y %
  41428a:	fb91 f2f8 	sdiv	r2, r1, r8
  41428e:	fb08 1812 	mls	r8, r8, r2, r1
            if(y_overed >= lv_font_get_line_height(font)) {
  414292:	fa0f f288 	sxth.w	r2, r8
  414296:	4282      	cmp	r2, r0
  414298:	db62      	blt.n	414360 <lv_label_refr_text+0x4cc>
                p.y += lv_font_get_line_height(font);
  41429a:	4403      	add	r3, r0
  41429c:	eba3 0308 	sub.w	r3, r3, r8
  4142a0:	f8ad 301e 	strh.w	r3, [sp, #30]
            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
  4142a4:	a907      	add	r1, sp, #28
  4142a6:	4620      	mov	r0, r4
  4142a8:	4b4d      	ldr	r3, [pc, #308]	; (4143e0 <lv_label_refr_text+0x54c>)
  4142aa:	4798      	blx	r3
  4142ac:	4606      	mov	r6, r0
            size_t txt_len = strlen(label->text);
  4142ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4142b0:	4628      	mov	r0, r5
  4142b2:	4b4c      	ldr	r3, [pc, #304]	; (4143e4 <lv_label_refr_text+0x550>)
  4142b4:	4798      	blx	r3
  4142b6:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
  4142b8:	4b4b      	ldr	r3, [pc, #300]	; (4143e8 <lv_label_refr_text+0x554>)
  4142ba:	681b      	ldr	r3, [r3, #0]
  4142bc:	4631      	mov	r1, r6
  4142be:	4628      	mov	r0, r5
  4142c0:	4798      	blx	r3
  4142c2:	4605      	mov	r5, r0
  4142c4:	9008      	str	r0, [sp, #32]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  4142c6:	1cc7      	adds	r7, r0, #3
  4142c8:	45b9      	cmp	r9, r7
  4142ca:	d20b      	bcs.n	4142e4 <lv_label_refr_text+0x450>
                _lv_txt_encoded_prev(label->text, &byte_id);
  4142cc:	f8df 8138 	ldr.w	r8, [pc, #312]	; 414408 <lv_label_refr_text+0x574>
  4142d0:	a908      	add	r1, sp, #32
  4142d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  4142d4:	f8d8 3000 	ldr.w	r3, [r8]
  4142d8:	4798      	blx	r3
                letter_id--;
  4142da:	3e01      	subs	r6, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  4142dc:	9d08      	ldr	r5, [sp, #32]
  4142de:	1cef      	adds	r7, r5, #3
  4142e0:	45b9      	cmp	r9, r7
  4142e2:	d3f5      	bcc.n	4142d0 <lv_label_refr_text+0x43c>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  4142e4:	2304      	movs	r3, #4
  4142e6:	9305      	str	r3, [sp, #20]
  4142e8:	f04f 0800 	mov.w	r8, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
  4142ec:	f8df b11c 	ldr.w	fp, [pc, #284]	; 41440c <lv_label_refr_text+0x578>
                _lv_txt_encoded_next(label->text, &byte_id);
  4142f0:	f8df a11c 	ldr.w	sl, [pc, #284]	; 414410 <lv_label_refr_text+0x57c>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
  4142f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
  4142f6:	9b08      	ldr	r3, [sp, #32]
  4142f8:	4418      	add	r0, r3
  4142fa:	f8db 3000 	ldr.w	r3, [fp]
  4142fe:	4798      	blx	r3
  414300:	4480      	add	r8, r0
  414302:	fa5f f888 	uxtb.w	r8, r8
                _lv_txt_encoded_next(label->text, &byte_id);
  414306:	a908      	add	r1, sp, #32
  414308:	6a60      	ldr	r0, [r4, #36]	; 0x24
  41430a:	f8da 3000 	ldr.w	r3, [sl]
  41430e:	4798      	blx	r3
                if (len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
  414310:	f1b8 0f03 	cmp.w	r8, #3
  414314:	d806      	bhi.n	414324 <lv_label_refr_text+0x490>
  414316:	9b08      	ldr	r3, [sp, #32]
  414318:	4599      	cmp	r9, r3
  41431a:	d303      	bcc.n	414324 <lv_label_refr_text+0x490>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
  41431c:	9b05      	ldr	r3, [sp, #20]
  41431e:	3b01      	subs	r3, #1
  414320:	9305      	str	r3, [sp, #20]
  414322:	d1e7      	bne.n	4142f4 <lv_label_refr_text+0x460>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
  414324:	6a63      	ldr	r3, [r4, #36]	; 0x24
  414326:	eb03 0905 	add.w	r9, r3, r5
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
  41432a:	4620      	mov	r0, r4
  41432c:	4b2f      	ldr	r3, [pc, #188]	; (4143ec <lv_label_refr_text+0x558>)
  41432e:	4798      	blx	r3
    if(len > sizeof(char *)) {
  414330:	f1b8 0f04 	cmp.w	r8, #4
  414334:	d925      	bls.n	414382 <lv_label_refr_text+0x4ee>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
  414336:	f108 0001 	add.w	r0, r8, #1
  41433a:	4b2d      	ldr	r3, [pc, #180]	; (4143f0 <lv_label_refr_text+0x55c>)
  41433c:	4798      	blx	r3
  41433e:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
  414340:	b1a8      	cbz	r0, 41436e <lv_label_refr_text+0x4da>
        lv_memcpy(label->dot.tmp_ptr, data, len);
  414342:	4642      	mov	r2, r8
  414344:	4649      	mov	r1, r9
  414346:	4b2b      	ldr	r3, [pc, #172]	; (4143f4 <lv_label_refr_text+0x560>)
  414348:	4798      	blx	r3
        label->dot.tmp_ptr[len] = '\0';
  41434a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  41434c:	2200      	movs	r2, #0
  41434e:	f803 2008 	strb.w	r2, [r3, r8]
        label->dot_tmp_alloc    = true;
  414352:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  414356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41435a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  41435e:	e01c      	b.n	41439a <lv_label_refr_text+0x506>
                p.y -= y_overed;
  414360:	eba3 0308 	sub.w	r3, r3, r8
                p.y -= line_space;
  414364:	eba3 0909 	sub.w	r9, r3, r9
  414368:	f8ad 901e 	strh.w	r9, [sp, #30]
  41436c:	e79a      	b.n	4142a4 <lv_label_refr_text+0x410>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
  41436e:	4b22      	ldr	r3, [pc, #136]	; (4143f8 <lv_label_refr_text+0x564>)
  414370:	9300      	str	r3, [sp, #0]
  414372:	4b22      	ldr	r3, [pc, #136]	; (4143fc <lv_label_refr_text+0x568>)
  414374:	f240 42ac 	movw	r2, #1196	; 0x4ac
  414378:	4921      	ldr	r1, [pc, #132]	; (414400 <lv_label_refr_text+0x56c>)
  41437a:	2003      	movs	r0, #3
  41437c:	4d21      	ldr	r5, [pc, #132]	; (414404 <lv_label_refr_text+0x570>)
  41437e:	47a8      	blx	r5
  414380:	e5e0      	b.n	413f44 <lv_label_refr_text+0xb0>
        label->dot_tmp_alloc = false;
  414382:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  414386:	f36f 1386 	bfc	r3, #6, #1
  41438a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
  41438e:	4642      	mov	r2, r8
  414390:	4649      	mov	r1, r9
  414392:	f104 0028 	add.w	r0, r4, #40	; 0x28
  414396:	4b17      	ldr	r3, [pc, #92]	; (4143f4 <lv_label_refr_text+0x560>)
  414398:	4798      	blx	r3
  41439a:	1ce9      	adds	r1, r5, #3
                    label->text[byte_id_ori + i] = '.';
  41439c:	222e      	movs	r2, #46	; 0x2e
  41439e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4143a0:	555a      	strb	r2, [r3, r5]
  4143a2:	3501      	adds	r5, #1
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  4143a4:	428d      	cmp	r5, r1
  4143a6:	d1fa      	bne.n	41439e <lv_label_refr_text+0x50a>
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
  4143a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4143aa:	2200      	movs	r2, #0
  4143ac:	55da      	strb	r2, [r3, r7]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
  4143ae:	3603      	adds	r6, #3
  4143b0:	62e6      	str	r6, [r4, #44]	; 0x2c
  4143b2:	e5c7      	b.n	413f44 <lv_label_refr_text+0xb0>
  4143b4:	4770      	bx	lr
  4143b6:	bf00      	nop
  4143b8:	00405d6d 	.word	0x00405d6d
  4143bc:	0041019d 	.word	0x0041019d
  4143c0:	00413bcd 	.word	0x00413bcd
  4143c4:	00410511 	.word	0x00410511
  4143c8:	00413bbd 	.word	0x00413bbd
  4143cc:	004106b9 	.word	0x004106b9
  4143d0:	00410679 	.word	0x00410679
  4143d4:	0041059d 	.word	0x0041059d
  4143d8:	20400028 	.word	0x20400028
  4143dc:	0040fd71 	.word	0x0040fd71
  4143e0:	00413c01 	.word	0x00413c01
  4143e4:	00419b01 	.word	0x00419b01
  4143e8:	20400014 	.word	0x20400014
  4143ec:	00413af1 	.word	0x00413af1
  4143f0:	004114b5 	.word	0x004114b5
  4143f4:	00411161 	.word	0x00411161
  4143f8:	004211b4 	.word	0x004211b4
  4143fc:	004210e4 	.word	0x004210e4
  414400:	00421174 	.word	0x00421174
  414404:	00410edd 	.word	0x00410edd
  414408:	20400020 	.word	0x20400020
  41440c:	20400024 	.word	0x20400024
  414410:	2040001c 	.word	0x2040001c

00414414 <lv_label_set_text>:
{
  414414:	b530      	push	{r4, r5, lr}
  414416:	b085      	sub	sp, #20
  414418:	4604      	mov	r4, r0
  41441a:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
  41441c:	4b28      	ldr	r3, [pc, #160]	; (4144c0 <lv_label_set_text+0xac>)
  41441e:	4798      	blx	r3
    if(text == NULL) text = label->text;
  414420:	b1fd      	cbz	r5, 414462 <lv_label_set_text+0x4e>
    if(label->text == text && label->static_txt == 0) {
  414422:	6a60      	ldr	r0, [r4, #36]	; 0x24
  414424:	4285      	cmp	r5, r0
  414426:	d01d      	beq.n	414464 <lv_label_set_text+0x50>
        if(label->text != NULL && label->static_txt == 0) {
  414428:	b120      	cbz	r0, 414434 <lv_label_set_text+0x20>
  41442a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  41442e:	f013 0f08 	tst.w	r3, #8
  414432:	d033      	beq.n	41449c <lv_label_set_text+0x88>
        size_t len = strlen(text) + 1;
  414434:	4628      	mov	r0, r5
  414436:	4b23      	ldr	r3, [pc, #140]	; (4144c4 <lv_label_set_text+0xb0>)
  414438:	4798      	blx	r3
        label->text = lv_mem_alloc(len);
  41443a:	3001      	adds	r0, #1
  41443c:	4b22      	ldr	r3, [pc, #136]	; (4144c8 <lv_label_set_text+0xb4>)
  41443e:	4798      	blx	r3
  414440:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
  414442:	2800      	cmp	r0, #0
  414444:	d02f      	beq.n	4144a6 <lv_label_set_text+0x92>
        strcpy(label->text, text);
  414446:	4629      	mov	r1, r5
  414448:	4b20      	ldr	r3, [pc, #128]	; (4144cc <lv_label_set_text+0xb8>)
  41444a:	4798      	blx	r3
        label->static_txt = 0;
  41444c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  414450:	f36f 03c3 	bfc	r3, #3, #1
  414454:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
  414458:	4620      	mov	r0, r4
  41445a:	4b1d      	ldr	r3, [pc, #116]	; (4144d0 <lv_label_set_text+0xbc>)
  41445c:	4798      	blx	r3
}
  41445e:	b005      	add	sp, #20
  414460:	bd30      	pop	{r4, r5, pc}
    if(text == NULL) text = label->text;
  414462:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(label->text == text && label->static_txt == 0) {
  414464:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  414468:	f013 0f08 	tst.w	r3, #8
  41446c:	d1e2      	bne.n	414434 <lv_label_set_text+0x20>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
  41446e:	4628      	mov	r0, r5
  414470:	4b14      	ldr	r3, [pc, #80]	; (4144c4 <lv_label_set_text+0xb0>)
  414472:	4798      	blx	r3
  414474:	1c41      	adds	r1, r0, #1
  414476:	4628      	mov	r0, r5
  414478:	4b16      	ldr	r3, [pc, #88]	; (4144d4 <lv_label_set_text+0xc0>)
  41447a:	4798      	blx	r3
  41447c:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
  41447e:	2800      	cmp	r0, #0
  414480:	d1ea      	bne.n	414458 <lv_label_set_text+0x44>
  414482:	4b15      	ldr	r3, [pc, #84]	; (4144d8 <lv_label_set_text+0xc4>)
  414484:	9302      	str	r3, [sp, #8]
  414486:	4b15      	ldr	r3, [pc, #84]	; (4144dc <lv_label_set_text+0xc8>)
  414488:	9301      	str	r3, [sp, #4]
  41448a:	4b15      	ldr	r3, [pc, #84]	; (4144e0 <lv_label_set_text+0xcc>)
  41448c:	9300      	str	r3, [sp, #0]
  41448e:	4b15      	ldr	r3, [pc, #84]	; (4144e4 <lv_label_set_text+0xd0>)
  414490:	226e      	movs	r2, #110	; 0x6e
  414492:	4915      	ldr	r1, [pc, #84]	; (4144e8 <lv_label_set_text+0xd4>)
  414494:	2003      	movs	r0, #3
  414496:	4c15      	ldr	r4, [pc, #84]	; (4144ec <lv_label_set_text+0xd8>)
  414498:	47a0      	blx	r4
  41449a:	e7fe      	b.n	41449a <lv_label_set_text+0x86>
            lv_mem_free(label->text);
  41449c:	4b14      	ldr	r3, [pc, #80]	; (4144f0 <lv_label_set_text+0xdc>)
  41449e:	4798      	blx	r3
            label->text = NULL;
  4144a0:	2300      	movs	r3, #0
  4144a2:	6263      	str	r3, [r4, #36]	; 0x24
  4144a4:	e7c6      	b.n	414434 <lv_label_set_text+0x20>
        LV_ASSERT_MALLOC(label->text);
  4144a6:	4b0c      	ldr	r3, [pc, #48]	; (4144d8 <lv_label_set_text+0xc4>)
  4144a8:	9302      	str	r3, [sp, #8]
  4144aa:	4b0c      	ldr	r3, [pc, #48]	; (4144dc <lv_label_set_text+0xc8>)
  4144ac:	9301      	str	r3, [sp, #4]
  4144ae:	4b0c      	ldr	r3, [pc, #48]	; (4144e0 <lv_label_set_text+0xcc>)
  4144b0:	9300      	str	r3, [sp, #0]
  4144b2:	4b0c      	ldr	r3, [pc, #48]	; (4144e4 <lv_label_set_text+0xd0>)
  4144b4:	2287      	movs	r2, #135	; 0x87
  4144b6:	490c      	ldr	r1, [pc, #48]	; (4144e8 <lv_label_set_text+0xd4>)
  4144b8:	2003      	movs	r0, #3
  4144ba:	4c0c      	ldr	r4, [pc, #48]	; (4144ec <lv_label_set_text+0xd8>)
  4144bc:	47a0      	blx	r4
  4144be:	e7fe      	b.n	4144be <lv_label_set_text+0xaa>
  4144c0:	0040262d 	.word	0x0040262d
  4144c4:	00419b01 	.word	0x00419b01
  4144c8:	004114b5 	.word	0x004114b5
  4144cc:	00419a1d 	.word	0x00419a1d
  4144d0:	00413e95 	.word	0x00413e95
  4144d4:	0041153d 	.word	0x0041153d
  4144d8:	0041c064 	.word	0x0041c064
  4144dc:	004211e0 	.word	0x004211e0
  4144e0:	0041c098 	.word	0x0041c098
  4144e4:	004210fc 	.word	0x004210fc
  4144e8:	00421174 	.word	0x00421174
  4144ec:	00410edd 	.word	0x00410edd
  4144f0:	004110e1 	.word	0x004110e1

004144f4 <lv_label_set_text_fmt>:
{
  4144f4:	b40e      	push	{r1, r2, r3}
  4144f6:	b530      	push	{r4, r5, lr}
  4144f8:	b086      	sub	sp, #24
  4144fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
    LV_ASSERT_NULL(fmt);
  4144fc:	b1ed      	cbz	r5, 41453a <lv_label_set_text_fmt+0x46>
  4144fe:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
  414500:	4b17      	ldr	r3, [pc, #92]	; (414560 <lv_label_set_text_fmt+0x6c>)
  414502:	4798      	blx	r3
    if(label->text != NULL && label->static_txt == 0) {
  414504:	6a60      	ldr	r0, [r4, #36]	; 0x24
  414506:	b120      	cbz	r0, 414512 <lv_label_set_text_fmt+0x1e>
  414508:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  41450c:	f013 0f08 	tst.w	r3, #8
  414510:	d020      	beq.n	414554 <lv_label_set_text_fmt+0x60>
    va_start(args, fmt);
  414512:	a90a      	add	r1, sp, #40	; 0x28
  414514:	9105      	str	r1, [sp, #20]
    label->text = _lv_txt_set_text_vfmt(fmt, args);
  414516:	4628      	mov	r0, r5
  414518:	4b12      	ldr	r3, [pc, #72]	; (414564 <lv_label_set_text_fmt+0x70>)
  41451a:	4798      	blx	r3
  41451c:	6260      	str	r0, [r4, #36]	; 0x24
    label->static_txt = 0; /*Now the text is dynamically allocated*/
  41451e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  414522:	f36f 03c3 	bfc	r3, #3, #1
  414526:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
  41452a:	4620      	mov	r0, r4
  41452c:	4b0e      	ldr	r3, [pc, #56]	; (414568 <lv_label_set_text_fmt+0x74>)
  41452e:	4798      	blx	r3
}
  414530:	b006      	add	sp, #24
  414532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  414536:	b003      	add	sp, #12
  414538:	4770      	bx	lr
    LV_ASSERT_NULL(fmt);
  41453a:	4b0c      	ldr	r3, [pc, #48]	; (41456c <lv_label_set_text_fmt+0x78>)
  41453c:	9302      	str	r3, [sp, #8]
  41453e:	4b0c      	ldr	r3, [pc, #48]	; (414570 <lv_label_set_text_fmt+0x7c>)
  414540:	9301      	str	r3, [sp, #4]
  414542:	4b0c      	ldr	r3, [pc, #48]	; (414574 <lv_label_set_text_fmt+0x80>)
  414544:	9300      	str	r3, [sp, #0]
  414546:	4b0c      	ldr	r3, [pc, #48]	; (414578 <lv_label_set_text_fmt+0x84>)
  414548:	2296      	movs	r2, #150	; 0x96
  41454a:	490c      	ldr	r1, [pc, #48]	; (41457c <lv_label_set_text_fmt+0x88>)
  41454c:	2003      	movs	r0, #3
  41454e:	4c0c      	ldr	r4, [pc, #48]	; (414580 <lv_label_set_text_fmt+0x8c>)
  414550:	47a0      	blx	r4
  414552:	e7fe      	b.n	414552 <lv_label_set_text_fmt+0x5e>
        lv_mem_free(label->text);
  414554:	4b0b      	ldr	r3, [pc, #44]	; (414584 <lv_label_set_text_fmt+0x90>)
  414556:	4798      	blx	r3
        label->text = NULL;
  414558:	2300      	movs	r3, #0
  41455a:	6263      	str	r3, [r4, #36]	; 0x24
  41455c:	e7d9      	b.n	414512 <lv_label_set_text_fmt+0x1e>
  41455e:	bf00      	nop
  414560:	0040262d 	.word	0x0040262d
  414564:	00413811 	.word	0x00413811
  414568:	00413e95 	.word	0x00413e95
  41456c:	0041cd00 	.word	0x0041cd00
  414570:	004211f4 	.word	0x004211f4
  414574:	0041c098 	.word	0x0041c098
  414578:	00421110 	.word	0x00421110
  41457c:	00421174 	.word	0x00421174
  414580:	00410edd 	.word	0x00410edd
  414584:	004110e1 	.word	0x004110e1

00414588 <lv_label_set_long_mode>:
{
  414588:	b570      	push	{r4, r5, r6, lr}
  41458a:	4604      	mov	r4, r0
  41458c:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
  41458e:	4917      	ldr	r1, [pc, #92]	; (4145ec <lv_label_set_long_mode+0x64>)
  414590:	4e17      	ldr	r6, [pc, #92]	; (4145f0 <lv_label_set_long_mode+0x68>)
  414592:	47b0      	blx	r6
    lv_anim_del(obj, set_ofs_y_anim);
  414594:	4917      	ldr	r1, [pc, #92]	; (4145f4 <lv_label_set_long_mode+0x6c>)
  414596:	4620      	mov	r0, r4
  414598:	47b0      	blx	r6
    label->offset.x = 0;
  41459a:	2300      	movs	r3, #0
  41459c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    label->offset.y = 0;
  4145a0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
  4145a4:	1eab      	subs	r3, r5, #2
  4145a6:	b2db      	uxtb	r3, r3
  4145a8:	2b02      	cmp	r3, #2
        label->expand = 1;
  4145aa:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4145ae:	bf94      	ite	ls
  4145b0:	f043 0320 	orrls.w	r3, r3, #32
        label->expand = 0;
  4145b4:	f36f 1345 	bfchi	r3, #5, #1
  4145b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
  4145bc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4145c0:	f003 0307 	and.w	r3, r3, #7
  4145c4:	2b01      	cmp	r3, #1
  4145c6:	d009      	beq.n	4145dc <lv_label_set_long_mode+0x54>
    label->long_mode = long_mode;
  4145c8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4145cc:	f365 0302 	bfi	r3, r5, #0, #3
  4145d0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
  4145d4:	4620      	mov	r0, r4
  4145d6:	4b08      	ldr	r3, [pc, #32]	; (4145f8 <lv_label_set_long_mode+0x70>)
  4145d8:	4798      	blx	r3
  4145da:	bd70      	pop	{r4, r5, r6, pc}
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
  4145dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4145de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4145e2:	d0f1      	beq.n	4145c8 <lv_label_set_long_mode+0x40>
        lv_label_revert_dots(obj);
  4145e4:	4620      	mov	r0, r4
  4145e6:	4b05      	ldr	r3, [pc, #20]	; (4145fc <lv_label_set_long_mode+0x74>)
  4145e8:	4798      	blx	r3
  4145ea:	e7ed      	b.n	4145c8 <lv_label_set_long_mode+0x40>
  4145ec:	00413bcd 	.word	0x00413bcd
  4145f0:	00410511 	.word	0x00410511
  4145f4:	00413bbd 	.word	0x00413bbd
  4145f8:	00413e95 	.word	0x00413e95
  4145fc:	00413b1d 	.word	0x00413b1d

00414600 <lv_label_constructor>:
{
  414600:	b538      	push	{r3, r4, r5, lr}
  414602:	460c      	mov	r4, r1
    label->text       = NULL;
  414604:	2500      	movs	r5, #0
  414606:	624d      	str	r5, [r1, #36]	; 0x24
    label->static_txt = 0;
  414608:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
  41460c:	f04f 32ff 	mov.w	r2, #4294967295
  414610:	62ca      	str	r2, [r1, #44]	; 0x2c
    label->offset.x = 0;
  414612:	f8a1 5044 	strh.w	r5, [r1, #68]	; 0x44
    label->offset.y = 0;
  414616:	f8a1 5046 	strh.w	r5, [r1, #70]	; 0x46
    label->hint.line_start = -1;
  41461a:	630a      	str	r2, [r1, #48]	; 0x30
    label->hint.coord_y    = 0;
  41461c:	638d      	str	r5, [r1, #56]	; 0x38
    label->hint.y          = 0;
  41461e:	634d      	str	r5, [r1, #52]	; 0x34
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  414620:	f64f 72ff 	movw	r2, #65535	; 0xffff
  414624:	63ca      	str	r2, [r1, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
  414626:	640a      	str	r2, [r1, #64]	; 0x40
    label->dot.tmp_ptr   = NULL;
  414628:	628d      	str	r5, [r1, #40]	; 0x28
    label->dot_tmp_alloc = 0;
  41462a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  41462e:	f365 1386 	bfi	r3, r5, #6, #1
  414632:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
  414636:	2102      	movs	r1, #2
  414638:	4620      	mov	r0, r4
  41463a:	4b05      	ldr	r3, [pc, #20]	; (414650 <lv_label_constructor+0x50>)
  41463c:	4798      	blx	r3
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
  41463e:	4629      	mov	r1, r5
  414640:	4620      	mov	r0, r4
  414642:	4b04      	ldr	r3, [pc, #16]	; (414654 <lv_label_constructor+0x54>)
  414644:	4798      	blx	r3
    lv_label_set_text(obj, "Text");
  414646:	4904      	ldr	r1, [pc, #16]	; (414658 <lv_label_constructor+0x58>)
  414648:	4620      	mov	r0, r4
  41464a:	4b04      	ldr	r3, [pc, #16]	; (41465c <lv_label_constructor+0x5c>)
  41464c:	4798      	blx	r3
  41464e:	bd38      	pop	{r3, r4, r5, pc}
  414650:	00401329 	.word	0x00401329
  414654:	00414589 	.word	0x00414589
  414658:	0042115c 	.word	0x0042115c
  41465c:	00414415 	.word	0x00414415

00414660 <lv_label_event>:
{
  414660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  414664:	b093      	sub	sp, #76	; 0x4c
  414666:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
  414668:	48b1      	ldr	r0, [pc, #708]	; (414930 <lv_label_event+0x2d0>)
  41466a:	4bb2      	ldr	r3, [pc, #712]	; (414934 <lv_label_event+0x2d4>)
  41466c:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  41466e:	2801      	cmp	r0, #1
  414670:	d002      	beq.n	414678 <lv_label_event+0x18>
}
  414672:	b013      	add	sp, #76	; 0x4c
  414674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
  414678:	4620      	mov	r0, r4
  41467a:	4baf      	ldr	r3, [pc, #700]	; (414938 <lv_label_event+0x2d8>)
  41467c:	4798      	blx	r3
  41467e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
  414680:	4620      	mov	r0, r4
  414682:	4bae      	ldr	r3, [pc, #696]	; (41493c <lv_label_event+0x2dc>)
  414684:	4798      	blx	r3
  414686:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
  414688:	2d28      	cmp	r5, #40	; 0x28
  41468a:	f000 80da 	beq.w	414842 <lv_label_event+0x1e2>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
  41468e:	2d13      	cmp	r5, #19
  414690:	f000 80dd 	beq.w	41484e <lv_label_event+0x1ee>
    else if(code == LV_EVENT_SIZE_CHANGED) {
  414694:	2d27      	cmp	r5, #39	; 0x27
  414696:	f000 80e9 	beq.w	41486c <lv_label_event+0x20c>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
  41469a:	2d2a      	cmp	r5, #42	; 0x2a
  41469c:	f000 80ec 	beq.w	414878 <lv_label_event+0x218>
    else if(code == LV_EVENT_DRAW_MAIN) {
  4146a0:	2d15      	cmp	r5, #21
  4146a2:	d1e6      	bne.n	414672 <lv_label_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
  4146a4:	4620      	mov	r0, r4
  4146a6:	4ba5      	ldr	r3, [pc, #660]	; (41493c <lv_label_event+0x2dc>)
  4146a8:	4798      	blx	r3
  4146aa:	4605      	mov	r5, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
  4146ac:	4620      	mov	r0, r4
  4146ae:	4ba4      	ldr	r3, [pc, #656]	; (414940 <lv_label_event+0x2e0>)
  4146b0:	4798      	blx	r3
  4146b2:	4606      	mov	r6, r0
    lv_obj_get_content_coords(obj, &txt_coords);
  4146b4:	a906      	add	r1, sp, #24
  4146b6:	4628      	mov	r0, r5
  4146b8:	4ba2      	ldr	r3, [pc, #648]	; (414944 <lv_label_event+0x2e4>)
  4146ba:	4798      	blx	r3
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
  4146bc:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
  4146c0:	f3c3 1400 	ubfx	r4, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
  4146c4:	f013 0f20 	tst.w	r3, #32
  4146c8:	bf18      	it	ne
  4146ca:	f044 0402 	orrne.w	r4, r4, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  4146ce:	f241 0201 	movw	r2, #4097	; 0x1001
  4146d2:	2100      	movs	r1, #0
  4146d4:	4628      	mov	r0, r5
  4146d6:	4b9c      	ldr	r3, [pc, #624]	; (414948 <lv_label_event+0x2e8>)
  4146d8:	4798      	blx	r3
    return (lv_coord_t)v.num;
  4146da:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
  4146dc:	f242 73d1 	movw	r3, #10193	; 0x27d1
  4146e0:	4298      	cmp	r0, r3
  4146e2:	f000 811d 	beq.w	414920 <lv_label_event+0x2c0>
    lv_draw_label_dsc_init(&label_draw_dsc);
  4146e6:	a80a      	add	r0, sp, #40	; 0x28
  4146e8:	4b98      	ldr	r3, [pc, #608]	; (41494c <lv_label_event+0x2ec>)
  4146ea:	4798      	blx	r3
    label_draw_dsc.ofs_x = label->offset.x;
  4146ec:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
  4146f0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    label_draw_dsc.ofs_y = label->offset.y;
  4146f4:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
  4146f8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    label_draw_dsc.flag = flag;
  4146fc:	f88d 4045 	strb.w	r4, [sp, #69]	; 0x45
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
  414700:	aa0a      	add	r2, sp, #40	; 0x28
  414702:	2100      	movs	r1, #0
  414704:	4628      	mov	r0, r5
  414706:	4b92      	ldr	r3, [pc, #584]	; (414950 <lv_label_event+0x2f0>)
  414708:	4798      	blx	r3
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
  41470a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  41470e:	b913      	cbnz	r3, 414716 <lv_label_event+0xb6>
  414710:	2301      	movs	r3, #1
  414712:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    return label->sel_start;
  414716:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
  414718:	930b      	str	r3, [sp, #44]	; 0x2c
    return label->sel_end;
  41471a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
  41471c:	920c      	str	r2, [sp, #48]	; 0x30
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  41471e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  414722:	428b      	cmp	r3, r1
  414724:	d011      	beq.n	41474a <lv_label_event+0xea>
  414726:	428a      	cmp	r2, r1
  414728:	d00f      	beq.n	41474a <lv_label_event+0xea>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
  41472a:	f244 4257 	movw	r2, #17495	; 0x4457
  41472e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  414732:	4628      	mov	r0, r5
  414734:	4f84      	ldr	r7, [pc, #528]	; (414948 <lv_label_event+0x2e8>)
  414736:	47b8      	blx	r7
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
  414738:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
  41473c:	2220      	movs	r2, #32
  41473e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  414742:	4628      	mov	r0, r5
  414744:	47b8      	blx	r7
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
  414746:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
  41474a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  41474e:	f003 0307 	and.w	r3, r3, #7
  414752:	3b02      	subs	r3, #2
  414754:	b2db      	uxtb	r3, r3
  414756:	2b01      	cmp	r3, #1
  414758:	f240 810a 	bls.w	414970 <lv_label_event+0x310>
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
  41475c:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  414760:	f003 0307 	and.w	r3, r3, #7
  414764:	2b03      	cmp	r3, #3
  414766:	f000 8128 	beq.w	4149ba <lv_label_event+0x35a>
  41476a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  41476e:	3301      	adds	r3, #1
  414770:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  414774:	1a9b      	subs	r3, r3, r2
  414776:	b21b      	sxth	r3, r3
  414778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  41477c:	f2c0 811f 	blt.w	4149be <lv_label_event+0x35e>
    lv_draw_label_hint_t * hint = &label->hint;
  414780:	f105 0730 	add.w	r7, r5, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, clip_area);
  414784:	4632      	mov	r2, r6
  414786:	a906      	add	r1, sp, #24
  414788:	a808      	add	r0, sp, #32
  41478a:	4b72      	ldr	r3, [pc, #456]	; (414954 <lv_label_event+0x2f4>)
  41478c:	4798      	blx	r3
    if(!is_common) return;
  41478e:	2800      	cmp	r0, #0
  414790:	f43f af6f 	beq.w	414672 <lv_label_event+0x12>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
  414794:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  414798:	f013 0f07 	tst.w	r3, #7
  41479c:	f000 8111 	beq.w	4149c2 <lv_label_event+0x362>
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
  4147a0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  4147a4:	f003 0307 	and.w	r3, r3, #7
  4147a8:	3b02      	subs	r3, #2
  4147aa:	b2db      	uxtb	r3, r3
  4147ac:	2b01      	cmp	r3, #1
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
  4147ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4147b0:	9700      	str	r7, [sp, #0]
  4147b2:	aa0a      	add	r2, sp, #40	; 0x28
  4147b4:	bf94      	ite	ls
  4147b6:	a908      	addls	r1, sp, #32
        lv_draw_label(&txt_coords, clip_area, &label_draw_dsc, label->text, hint);
  4147b8:	4631      	movhi	r1, r6
  4147ba:	a806      	add	r0, sp, #24
  4147bc:	4e66      	ldr	r6, [pc, #408]	; (414958 <lv_label_event+0x2f8>)
  4147be:	47b0      	blx	r6
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
  4147c0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  4147c4:	f003 0307 	and.w	r3, r3, #7
  4147c8:	2b03      	cmp	r3, #3
  4147ca:	f47f af52 	bne.w	414672 <lv_label_event+0x12>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  4147ce:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
  4147d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
  4147d4:	9402      	str	r4, [sp, #8]
  4147d6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  4147da:	9201      	str	r2, [sp, #4]
  4147dc:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  4147e0:	9200      	str	r2, [sp, #0]
  4147e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4147e4:	a805      	add	r0, sp, #20
  4147e6:	4c5d      	ldr	r4, [pc, #372]	; (41495c <lv_label_event+0x2fc>)
  4147e8:	47a0      	blx	r4
        if(size.x > lv_area_get_width(&txt_coords)) {
  4147ea:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4147ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  4147f2:	3301      	adds	r3, #1
  4147f4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
  4147f8:	1a5b      	subs	r3, r3, r1
  4147fa:	b21b      	sxth	r3, r3
  4147fc:	429a      	cmp	r2, r3
  4147fe:	f300 80ed 	bgt.w	4149dc <lv_label_event+0x37c>
        if(size.y > lv_area_get_height(&txt_coords)) {
  414802:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414806:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  41480a:	3301      	adds	r3, #1
  41480c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  414810:	1a5b      	subs	r3, r3, r1
  414812:	b21b      	sxth	r3, r3
  414814:	429a      	cmp	r2, r3
  414816:	f77f af2c 	ble.w	414672 <lv_label_event+0x12>
            label_draw_dsc.ofs_x = label->offset.x;
  41481a:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
  41481e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  414822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
  414824:	891b      	ldrh	r3, [r3, #8]
  414826:	4413      	add	r3, r2
  414828:	f8b5 2046 	ldrh.w	r2, [r5, #70]	; 0x46
  41482c:	4413      	add	r3, r2
  41482e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
  414832:	9700      	str	r7, [sp, #0]
  414834:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  414836:	aa0a      	add	r2, sp, #40	; 0x28
  414838:	a908      	add	r1, sp, #32
  41483a:	a806      	add	r0, sp, #24
  41483c:	4c46      	ldr	r4, [pc, #280]	; (414958 <lv_label_event+0x2f8>)
  41483e:	47a0      	blx	r4
  414840:	e717      	b.n	414672 <lv_label_event+0x12>
        lv_label_revert_dots(obj);
  414842:	4b47      	ldr	r3, [pc, #284]	; (414960 <lv_label_event+0x300>)
  414844:	4798      	blx	r3
        lv_label_refr_text(obj);
  414846:	4630      	mov	r0, r6
  414848:	4b46      	ldr	r3, [pc, #280]	; (414964 <lv_label_event+0x304>)
  41484a:	4798      	blx	r3
  41484c:	e711      	b.n	414672 <lv_label_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
  41484e:	f241 4259 	movw	r2, #5209	; 0x1459
  414852:	2100      	movs	r1, #0
  414854:	4b3c      	ldr	r3, [pc, #240]	; (414948 <lv_label_event+0x2e8>)
  414856:	4798      	blx	r3
        lv_event_set_ext_draw_size(e, font_h / 4);
  414858:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
  41485c:	2900      	cmp	r1, #0
  41485e:	bfb8      	it	lt
  414860:	3103      	addlt	r1, #3
  414862:	1089      	asrs	r1, r1, #2
  414864:	4620      	mov	r0, r4
  414866:	4b40      	ldr	r3, [pc, #256]	; (414968 <lv_label_event+0x308>)
  414868:	4798      	blx	r3
  41486a:	e702      	b.n	414672 <lv_label_event+0x12>
        lv_label_revert_dots(obj);
  41486c:	4b3c      	ldr	r3, [pc, #240]	; (414960 <lv_label_event+0x300>)
  41486e:	4798      	blx	r3
        lv_label_refr_text(obj);
  414870:	4630      	mov	r0, r6
  414872:	4b3c      	ldr	r3, [pc, #240]	; (414964 <lv_label_event+0x304>)
  414874:	4798      	blx	r3
  414876:	e6fc      	b.n	414672 <lv_label_event+0x12>
  414878:	f241 4259 	movw	r2, #5209	; 0x1459
  41487c:	2100      	movs	r1, #0
  41487e:	4d32      	ldr	r5, [pc, #200]	; (414948 <lv_label_event+0x2e8>)
  414880:	47a8      	blx	r5
  414882:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
  414884:	f241 425a 	movw	r2, #5210	; 0x145a
  414888:	2100      	movs	r1, #0
  41488a:	4630      	mov	r0, r6
  41488c:	47a8      	blx	r5
    return (lv_coord_t)v.num;
  41488e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
  414892:	f241 425b 	movw	r2, #5211	; 0x145b
  414896:	2100      	movs	r1, #0
  414898:	4630      	mov	r0, r6
  41489a:	47a8      	blx	r5
    return (lv_coord_t)v.num;
  41489c:	fa0f f980 	sxth.w	r9, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
  4148a0:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
  4148a4:	f3c3 1500 	ubfx	r5, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
  4148a8:	f013 0f20 	tst.w	r3, #32
  4148ac:	bf18      	it	ne
  4148ae:	f045 0502 	orrne.w	r5, r5, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
  4148b2:	4630      	mov	r0, r6
  4148b4:	4b2d      	ldr	r3, [pc, #180]	; (41496c <lv_label_event+0x30c>)
  4148b6:	4798      	blx	r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
  4148b8:	f241 0201 	movw	r2, #4097	; 0x1001
  4148bc:	2100      	movs	r1, #0
  4148be:	4630      	mov	r0, r6
  4148c0:	4b21      	ldr	r3, [pc, #132]	; (414948 <lv_label_event+0x2e8>)
  4148c2:	4798      	blx	r3
    return (lv_coord_t)v.num;
  4148c4:	b200      	sxth	r0, r0
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
  4148c6:	f242 73d1 	movw	r3, #10193	; 0x27d1
  4148ca:	4298      	cmp	r0, r3
  4148cc:	d020      	beq.n	414910 <lv_label_event+0x2b0>
        else w = lv_obj_get_content_width(obj);
  4148ce:	4630      	mov	r0, r6
  4148d0:	4b26      	ldr	r3, [pc, #152]	; (41496c <lv_label_event+0x30c>)
  4148d2:	4798      	blx	r3
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
  4148d4:	6a71      	ldr	r1, [r6, #36]	; 0x24
  4148d6:	9502      	str	r5, [sp, #8]
  4148d8:	9001      	str	r0, [sp, #4]
  4148da:	f8cd 9000 	str.w	r9, [sp]
  4148de:	4643      	mov	r3, r8
  4148e0:	463a      	mov	r2, r7
  4148e2:	a80a      	add	r0, sp, #40	; 0x28
  4148e4:	4d1d      	ldr	r5, [pc, #116]	; (41495c <lv_label_event+0x2fc>)
  4148e6:	47a8      	blx	r5
        lv_point_t * self_size = lv_event_get_param(e);
  4148e8:	4620      	mov	r0, r4
  4148ea:	4b15      	ldr	r3, [pc, #84]	; (414940 <lv_label_event+0x2e0>)
  4148ec:	4798      	blx	r3
        self_size->x = LV_MAX(self_size->x, size.x);
  4148ee:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  4148f2:	f9b0 2000 	ldrsh.w	r2, [r0]
  4148f6:	4293      	cmp	r3, r2
  4148f8:	bfb8      	it	lt
  4148fa:	4613      	movlt	r3, r2
  4148fc:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
  4148fe:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  414902:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  414906:	4293      	cmp	r3, r2
  414908:	bfb8      	it	lt
  41490a:	4613      	movlt	r3, r2
  41490c:	8043      	strh	r3, [r0, #2]
  41490e:	e6b0      	b.n	414672 <lv_label_event+0x12>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
  414910:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  414914:	f013 0f04 	tst.w	r3, #4
  414918:	d1d9      	bne.n	4148ce <lv_label_event+0x26e>
  41491a:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
  41491e:	e7d9      	b.n	4148d4 <lv_label_event+0x274>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
  414920:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  414924:	f013 0f04 	tst.w	r3, #4
  414928:	bf08      	it	eq
  41492a:	f044 0404 	orreq.w	r4, r4, #4
  41492e:	e6da      	b.n	4146e6 <lv_label_event+0x86>
  414930:	00421140 	.word	0x00421140
  414934:	004002ed 	.word	0x004002ed
  414938:	004004d9 	.word	0x004004d9
  41493c:	004004d5 	.word	0x004004d5
  414940:	004004dd 	.word	0x004004dd
  414944:	0040236d 	.word	0x0040236d
  414948:	00404f1d 	.word	0x00404f1d
  41494c:	00408311 	.word	0x00408311
  414950:	00401e71 	.word	0x00401e71
  414954:	004107cd 	.word	0x004107cd
  414958:	004087dd 	.word	0x004087dd
  41495c:	00413965 	.word	0x00413965
  414960:	00413b1d 	.word	0x00413b1d
  414964:	00413e95 	.word	0x00413e95
  414968:	00400601 	.word	0x00400601
  41496c:	004022ed 	.word	0x004022ed
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
  414970:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  414974:	3b02      	subs	r3, #2
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
  414976:	b2db      	uxtb	r3, r3
  414978:	2b01      	cmp	r3, #1
  41497a:	f63f aeef 	bhi.w	41475c <lv_label_event+0xfc>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  41497e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
  414982:	9402      	str	r4, [sp, #8]
  414984:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  414988:	9201      	str	r2, [sp, #4]
  41498a:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  41498e:	9200      	str	r2, [sp, #0]
  414990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  414992:	6a69      	ldr	r1, [r5, #36]	; 0x24
  414994:	a808      	add	r0, sp, #32
  414996:	4f1e      	ldr	r7, [pc, #120]	; (414a10 <lv_label_event+0x3b0>)
  414998:	47b8      	blx	r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41499a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  41499e:	3301      	adds	r3, #1
  4149a0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  4149a4:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
  4149a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
  4149aa:	b21b      	sxth	r3, r3
  4149ac:	429a      	cmp	r2, r3
  4149ae:	f77f aed5 	ble.w	41475c <lv_label_event+0xfc>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
  4149b2:	2301      	movs	r3, #1
  4149b4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  4149b8:	e6d0      	b.n	41475c <lv_label_event+0xfc>
        hint = NULL;
  4149ba:	2700      	movs	r7, #0
  4149bc:	e6e2      	b.n	414784 <lv_label_event+0x124>
  4149be:	2700      	movs	r7, #0
  4149c0:	e6e0      	b.n	414784 <lv_label_event+0x124>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
  4149c2:	4628      	mov	r0, r5
  4149c4:	4b13      	ldr	r3, [pc, #76]	; (414a14 <lv_label_event+0x3b4>)
  4149c6:	4798      	blx	r3
        lv_area_move(&txt_coords, 0, -s);
  4149c8:	4242      	negs	r2, r0
  4149ca:	b212      	sxth	r2, r2
  4149cc:	2100      	movs	r1, #0
  4149ce:	a806      	add	r0, sp, #24
  4149d0:	4b11      	ldr	r3, [pc, #68]	; (414a18 <lv_label_event+0x3b8>)
  4149d2:	4798      	blx	r3
        txt_coords.y2 = obj->coords.y2;
  4149d4:	8b6b      	ldrh	r3, [r5, #26]
  4149d6:	f8ad 301e 	strh.w	r3, [sp, #30]
  4149da:	e6e1      	b.n	4147a0 <lv_label_event+0x140>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
  4149dc:	f8b5 4044 	ldrh.w	r4, [r5, #68]	; 0x44
  4149e0:	4422      	add	r2, r4
  4149e2:	b294      	uxth	r4, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
  4149e4:	2220      	movs	r2, #32
  4149e6:	4611      	mov	r1, r2
  4149e8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4149ea:	4b0c      	ldr	r3, [pc, #48]	; (414a1c <lv_label_event+0x3bc>)
  4149ec:	4798      	blx	r3
  4149ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            label_draw_dsc.ofs_x = label->offset.x + size.x +
  4149f2:	4404      	add	r4, r0
  4149f4:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
            label_draw_dsc.ofs_y = label->offset.y;
  4149f8:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
  4149fc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
  414a00:	9700      	str	r7, [sp, #0]
  414a02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  414a04:	aa0a      	add	r2, sp, #40	; 0x28
  414a06:	a908      	add	r1, sp, #32
  414a08:	a806      	add	r0, sp, #24
  414a0a:	4c05      	ldr	r4, [pc, #20]	; (414a20 <lv_label_event+0x3c0>)
  414a0c:	47a0      	blx	r4
  414a0e:	e6f8      	b.n	414802 <lv_label_event+0x1a2>
  414a10:	00413965 	.word	0x00413965
  414a14:	00403a41 	.word	0x00403a41
  414a18:	004107af 	.word	0x004107af
  414a1c:	0040fd71 	.word	0x0040fd71
  414a20:	004087dd 	.word	0x004087dd

00414a24 <insert_sort>:

static void insert_sort(int array[], uint8_t size) {
  uint8_t j;
  int save;

  for (int i = 1; i < size; i++) {
  414a24:	2901      	cmp	r1, #1
  414a26:	dd23      	ble.n	414a70 <insert_sort+0x4c>
static void insert_sort(int array[], uint8_t size) {
  414a28:	b5f0      	push	{r4, r5, r6, r7, lr}
  414a2a:	4686      	mov	lr, r0
  for (int i = 1; i < size; i++) {
  414a2c:	2701      	movs	r7, #1
    save = array[i];
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  414a2e:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  414a32:	e004      	b.n	414a3e <insert_sort+0x1a>
    array[j] = array[j - 1];
    array[j] = save;
  414a34:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
  for (int i = 1; i < size; i++) {
  414a38:	3701      	adds	r7, #1
  414a3a:	428f      	cmp	r7, r1
  414a3c:	d017      	beq.n	414a6e <insert_sort+0x4a>
    save = array[i];
  414a3e:	f85e 5f04 	ldr.w	r5, [lr, #4]!
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  414a42:	f017 03ff 	ands.w	r3, r7, #255	; 0xff
  414a46:	d0f5      	beq.n	414a34 <insert_sort+0x10>
  414a48:	b2fc      	uxtb	r4, r7
  414a4a:	19a2      	adds	r2, r4, r6
  414a4c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  414a50:	4295      	cmp	r5, r2
  414a52:	daef      	bge.n	414a34 <insert_sort+0x10>
    array[j] = array[j - 1];
  414a54:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  414a58:	3b01      	subs	r3, #1
  414a5a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  414a5e:	d0e9      	beq.n	414a34 <insert_sort+0x10>
  414a60:	461c      	mov	r4, r3
  414a62:	199a      	adds	r2, r3, r6
  414a64:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  414a68:	4295      	cmp	r5, r2
  414a6a:	dbf3      	blt.n	414a54 <insert_sort+0x30>
  414a6c:	e7e2      	b.n	414a34 <insert_sort+0x10>
  414a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  414a70:	4770      	bx	lr
	...

00414a74 <configure_touch>:
void configure_touch(void) {
  414a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414a78:	b089      	sub	sp, #36	; 0x24
  pmc_enable_periph_clk(XM_PIO_ID);
  414a7a:	200c      	movs	r0, #12
  414a7c:	4c24      	ldr	r4, [pc, #144]	; (414b10 <configure_touch+0x9c>)
  414a7e:	47a0      	blx	r4
  pmc_enable_periph_clk(YP_PIO_ID);
  414a80:	2010      	movs	r0, #16
  414a82:	47a0      	blx	r4
  pmc_enable_periph_clk(XP_PIO_ID);
  414a84:	200c      	movs	r0, #12
  414a86:	47a0      	blx	r4
  pmc_enable_periph_clk(YM_PIO_ID);
  414a88:	2010      	movs	r0, #16
  414a8a:	47a0      	blx	r4
  afec_enable(XM_AFEC);
  414a8c:	4c21      	ldr	r4, [pc, #132]	; (414b14 <configure_touch+0xa0>)
  414a8e:	4620      	mov	r0, r4
  414a90:	4e21      	ldr	r6, [pc, #132]	; (414b18 <configure_touch+0xa4>)
  414a92:	47b0      	blx	r6
  afec_enable(YP_AFEC);
  414a94:	4d21      	ldr	r5, [pc, #132]	; (414b1c <configure_touch+0xa8>)
  414a96:	4628      	mov	r0, r5
  414a98:	47b0      	blx	r6
  afec_get_config_defaults(&afec_cfg);
  414a9a:	a802      	add	r0, sp, #8
  414a9c:	f8df b084 	ldr.w	fp, [pc, #132]	; 414b24 <configure_touch+0xb0>
  414aa0:	47d8      	blx	fp
  afec_init(afec, &afec_cfg);
  414aa2:	a902      	add	r1, sp, #8
  414aa4:	4628      	mov	r0, r5
  414aa6:	4b1e      	ldr	r3, [pc, #120]	; (414b20 <configure_touch+0xac>)
  414aa8:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  414aaa:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
  414aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  414ab0:	606b      	str	r3, [r5, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  414ab2:	a801      	add	r0, sp, #4
  414ab4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 414b28 <configure_touch+0xb4>
  414ab8:	47c8      	blx	r9
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  414aba:	2600      	movs	r6, #0
  414abc:	f88d 6005 	strb.w	r6, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  414ac0:	aa01      	add	r2, sp, #4
  414ac2:	4631      	mov	r1, r6
  414ac4:	4628      	mov	r0, r5
  414ac6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 414b2c <configure_touch+0xb8>
  414aca:	47c0      	blx	r8
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  414acc:	666e      	str	r6, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  414ace:	f44f 7a00 	mov.w	sl, #512	; 0x200
  414ad2:	f8c5 a06c 	str.w	sl, [r5, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  414ad6:	2701      	movs	r7, #1
  414ad8:	616f      	str	r7, [r5, #20]
  afec_get_config_defaults(&afec_cfg);
  414ada:	a802      	add	r0, sp, #8
  414adc:	47d8      	blx	fp
  afec_init(afec, &afec_cfg);
  414ade:	a902      	add	r1, sp, #8
  414ae0:	4620      	mov	r0, r4
  414ae2:	4b0f      	ldr	r3, [pc, #60]	; (414b20 <configure_touch+0xac>)
  414ae4:	4798      	blx	r3
	reg = afec->AFEC_MR;
  414ae6:	6863      	ldr	r3, [r4, #4]
		reg |= AFEC_MR_FREERUN_ON;
  414ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	afec->AFEC_MR = reg;
  414aec:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  414aee:	a801      	add	r0, sp, #4
  414af0:	47c8      	blx	r9
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  414af2:	f88d 6005 	strb.w	r6, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  414af6:	aa01      	add	r2, sp, #4
  414af8:	4639      	mov	r1, r7
  414afa:	4620      	mov	r0, r4
  414afc:	47c0      	blx	r8
	afec->AFEC_CSELR = afec_ch;
  414afe:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  414b00:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  414b04:	2302      	movs	r3, #2
  414b06:	6163      	str	r3, [r4, #20]
}
  414b08:	b009      	add	sp, #36	; 0x24
  414b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414b0e:	bf00      	nop
  414b10:	00417bc9 	.word	0x00417bc9
  414b14:	40064000 	.word	0x40064000
  414b18:	00415569 	.word	0x00415569
  414b1c:	4003c000 	.word	0x4003c000
  414b20:	00415479 	.word	0x00415479
  414b24:	0041543d 	.word	0x0041543d
  414b28:	0041546d 	.word	0x0041546d
  414b2c:	0041540d 	.word	0x0041540d

00414b30 <configReadTouchX>:
void configReadTouchX(void){
  414b30:	b538      	push	{r3, r4, r5, lr}
  414b32:	2201      	movs	r2, #1
  414b34:	4b14      	ldr	r3, [pc, #80]	; (414b88 <configReadTouchX+0x58>)
  414b36:	615a      	str	r2, [r3, #20]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  414b38:	2202      	movs	r2, #2
  414b3a:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  414b3e:	619a      	str	r2, [r3, #24]
  pio_configure(XP_PIO, PIO_OUTPUT_1, XP_MASK, PIO_DEFAULT);
  414b40:	4d12      	ldr	r5, [pc, #72]	; (414b8c <configReadTouchX+0x5c>)
  414b42:	2300      	movs	r3, #0
  414b44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  414b48:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  414b4c:	4628      	mov	r0, r5
  414b4e:	4c10      	ldr	r4, [pc, #64]	; (414b90 <configReadTouchX+0x60>)
  414b50:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_OUTPUT_0, XM_MASK, PIO_DEFAULT);
  414b52:	2300      	movs	r3, #0
  414b54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  414b58:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  414b5c:	4628      	mov	r0, r5
  414b5e:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_INPUT, YM_MASK, PIO_DEFAULT);
  414b60:	f505 7500 	add.w	r5, r5, #512	; 0x200
  414b64:	2300      	movs	r3, #0
  414b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
  414b6a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  414b6e:	4628      	mov	r0, r5
  414b70:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  414b72:	2300      	movs	r3, #0
  414b74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  414b78:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  414b7c:	4628      	mov	r0, r5
  414b7e:	47a0      	blx	r4
  delay_ms(5);
  414b80:	4804      	ldr	r0, [pc, #16]	; (414b94 <configReadTouchX+0x64>)
  414b82:	4b05      	ldr	r3, [pc, #20]	; (414b98 <configReadTouchX+0x68>)
  414b84:	4798      	blx	r3
  414b86:	bd38      	pop	{r3, r4, r5, pc}
  414b88:	4003c000 	.word	0x4003c000
  414b8c:	400e1200 	.word	0x400e1200
  414b90:	00417811 	.word	0x00417811
  414b94:	0003dbc2 	.word	0x0003dbc2
  414b98:	20400001 	.word	0x20400001

00414b9c <configReadTouchY>:
void configReadTouchY(void) {
  414b9c:	b538      	push	{r3, r4, r5, lr}
  414b9e:	2201      	movs	r2, #1
  414ba0:	4b14      	ldr	r3, [pc, #80]	; (414bf4 <configReadTouchY+0x58>)
  414ba2:	619a      	str	r2, [r3, #24]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  414ba4:	2202      	movs	r2, #2
  414ba6:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  414baa:	615a      	str	r2, [r3, #20]
  pio_configure(YP_PIO, PIO_OUTPUT_1, YP_MASK, PIO_DEFAULT);
  414bac:	4d12      	ldr	r5, [pc, #72]	; (414bf8 <configReadTouchY+0x5c>)
  414bae:	2300      	movs	r3, #0
  414bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  414bb4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  414bb8:	4628      	mov	r0, r5
  414bba:	4c10      	ldr	r4, [pc, #64]	; (414bfc <configReadTouchY+0x60>)
  414bbc:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_0, YM_MASK, PIO_DEFAULT);
  414bbe:	2300      	movs	r3, #0
  414bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  414bc4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  414bc8:	4628      	mov	r0, r5
  414bca:	47a0      	blx	r4
  pio_configure(XP_PIO, PIO_INPUT, XP_MASK, PIO_DEFAULT);
  414bcc:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  414bd0:	2300      	movs	r3, #0
  414bd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  414bd6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  414bda:	4628      	mov	r0, r5
  414bdc:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  414bde:	2300      	movs	r3, #0
  414be0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  414be4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  414be8:	4628      	mov	r0, r5
  414bea:	47a0      	blx	r4
  delay_ms(5);
  414bec:	4804      	ldr	r0, [pc, #16]	; (414c00 <configReadTouchY+0x64>)
  414bee:	4b05      	ldr	r3, [pc, #20]	; (414c04 <configReadTouchY+0x68>)
  414bf0:	4798      	blx	r3
  414bf2:	bd38      	pop	{r3, r4, r5, pc}
  414bf4:	4003c000 	.word	0x4003c000
  414bf8:	400e1400 	.word	0x400e1400
  414bfc:	00417811 	.word	0x00417811
  414c00:	0003dbc2 	.word	0x0003dbc2
  414c04:	20400001 	.word	0x20400001

00414c08 <readTouchZ>:
int readTouchZ(int rxplate) {
  414c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414c0a:	ed2d 8b02 	vpush	{d8}
  414c0e:	ee08 0a10 	vmov	s16, r0
  pio_configure(XP_PIO, PIO_OUTPUT_0, XP_MASK, PIO_DEFAULT);
  414c12:	4d2f      	ldr	r5, [pc, #188]	; (414cd0 <readTouchZ+0xc8>)
  414c14:	2300      	movs	r3, #0
  414c16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  414c1a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  414c1e:	4628      	mov	r0, r5
  414c20:	4c2c      	ldr	r4, [pc, #176]	; (414cd4 <readTouchZ+0xcc>)
  414c22:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_1, YM_MASK, PIO_DEFAULT);
  414c24:	4e2c      	ldr	r6, [pc, #176]	; (414cd8 <readTouchZ+0xd0>)
  414c26:	2300      	movs	r3, #0
  414c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
  414c2c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  414c30:	4630      	mov	r0, r6
  414c32:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  414c34:	2300      	movs	r3, #0
  414c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  414c3a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  414c3e:	4630      	mov	r0, r6
  414c40:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  414c42:	2300      	movs	r3, #0
  414c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  414c48:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  414c4c:	4628      	mov	r0, r5
  414c4e:	47a0      	blx	r4
  414c50:	4e22      	ldr	r6, [pc, #136]	; (414cdc <readTouchZ+0xd4>)
  414c52:	2701      	movs	r7, #1
  414c54:	6177      	str	r7, [r6, #20]
  414c56:	4c22      	ldr	r4, [pc, #136]	; (414ce0 <readTouchZ+0xd8>)
  414c58:	2302      	movs	r3, #2
  414c5a:	6163      	str	r3, [r4, #20]
  delay_ms(5);
  414c5c:	4821      	ldr	r0, [pc, #132]	; (414ce4 <readTouchZ+0xdc>)
  414c5e:	4b22      	ldr	r3, [pc, #136]	; (414ce8 <readTouchZ+0xe0>)
  414c60:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  414c62:	6667      	str	r7, [r4, #100]	; 0x64
	return afec->AFEC_CDR;
  414c64:	6ea5      	ldr	r5, [r4, #104]	; 0x68
	afec->AFEC_CSELR = afec_ch;
  414c66:	2300      	movs	r3, #0
  414c68:	6673      	str	r3, [r6, #100]	; 0x64
	return afec->AFEC_CDR;
  414c6a:	6eb6      	ldr	r6, [r6, #104]	; 0x68
  configReadTouchX();
  414c6c:	4b1f      	ldr	r3, [pc, #124]	; (414cec <readTouchZ+0xe4>)
  414c6e:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  414c70:	6667      	str	r7, [r4, #100]	; 0x64
	return afec->AFEC_CDR;
  414c72:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
  rtouch = z2;
  414c76:	ee07 6a10 	vmov	s14, r6
  414c7a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
  rtouch /= z1;
  414c7e:	ee07 5a10 	vmov	s14, r5
  414c82:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  414c86:	ee86 7a26 	vdiv.f32	s14, s12, s13
  rtouch -= 1;
  414c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  414c8e:	ee37 7a66 	vsub.f32	s14, s14, s13
  rtouch *= x;
  414c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  414c96:	ee27 7a87 	vmul.f32	s14, s15, s14
  rtouch *= rxplate;
  414c9a:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  414c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
  rtouch /= 1024;
  414ca2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 414cf0 <readTouchZ+0xe8>
  414ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
  if(rtouch < 100.0)
  414caa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 414cf4 <readTouchZ+0xec>
  rtouch = 1024.0;
  414cae:	eef4 7a47 	vcmp.f32	s15, s14
  414cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  414cb6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 414cf8 <readTouchZ+0xf0>
  414cba:	bf48      	it	mi
  414cbc:	eef0 7a47 	vmovmi.f32	s15, s14
}
  414cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  414cc4:	ee17 0a90 	vmov	r0, s15
  414cc8:	ecbd 8b02 	vpop	{d8}
  414ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414cce:	bf00      	nop
  414cd0:	400e1200 	.word	0x400e1200
  414cd4:	00417811 	.word	0x00417811
  414cd8:	400e1400 	.word	0x400e1400
  414cdc:	4003c000 	.word	0x4003c000
  414ce0:	40064000 	.word	0x40064000
  414ce4:	0003dbc2 	.word	0x0003dbc2
  414ce8:	20400001 	.word	0x20400001
  414cec:	00414b31 	.word	0x00414b31
  414cf0:	3a800000 	.word	0x3a800000
  414cf4:	42c80000 	.word	0x42c80000
  414cf8:	44800000 	.word	0x44800000

00414cfc <readRawPoint>:
  }
}

void readRawPoint(int *x, int *y, int *z) {
  414cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  414d00:	b0c3      	sub	sp, #268	; 0x10c
  414d02:	4683      	mov	fp, r0
  414d04:	468a      	mov	sl, r1
  414d06:	9201      	str	r2, [sp, #4]
  int samples[TOUCH_NUMSAMPLES];
  char valid = 0 ;
  
  configReadTouchX();
  414d08:	4b19      	ldr	r3, [pc, #100]	; (414d70 <readRawPoint+0x74>)
  414d0a:	4798      	blx	r3
  414d0c:	ad01      	add	r5, sp, #4
  414d0e:	f50d 7982 	add.w	r9, sp, #260	; 0x104
  414d12:	462c      	mov	r4, r5
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
    delay_us(1);
  414d14:	f04f 0833 	mov.w	r8, #51	; 0x33
  414d18:	4f16      	ldr	r7, [pc, #88]	; (414d74 <readRawPoint+0x78>)
	afec->AFEC_CSELR = afec_ch;
  414d1a:	4e17      	ldr	r6, [pc, #92]	; (414d78 <readRawPoint+0x7c>)
  414d1c:	4640      	mov	r0, r8
  414d1e:	47b8      	blx	r7
  414d20:	2300      	movs	r3, #0
  414d22:	6673      	str	r3, [r6, #100]	; 0x64
	return afec->AFEC_CDR;
  414d24:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    samples[i] = readTouchX();
  414d26:	f844 3f04 	str.w	r3, [r4, #4]!
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  414d2a:	454c      	cmp	r4, r9
  414d2c:	d1f6      	bne.n	414d1c <readRawPoint+0x20>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  414d2e:	2140      	movs	r1, #64	; 0x40
  414d30:	a802      	add	r0, sp, #8
  414d32:	4b12      	ldr	r3, [pc, #72]	; (414d7c <readRawPoint+0x80>)
  414d34:	4798      	blx	r3
  *x = (samples[TOUCH_NUMSAMPLES / 2]);
  414d36:	9b22      	ldr	r3, [sp, #136]	; 0x88
  414d38:	f8cb 3000 	str.w	r3, [fp]
  
  configReadTouchY();
  414d3c:	4b10      	ldr	r3, [pc, #64]	; (414d80 <readRawPoint+0x84>)
  414d3e:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  414d40:	4b10      	ldr	r3, [pc, #64]	; (414d84 <readRawPoint+0x88>)
  414d42:	2101      	movs	r1, #1
  414d44:	6659      	str	r1, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  414d46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
    samples[i] = readTouchY();
  414d48:	f845 2f04 	str.w	r2, [r5, #4]!
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  414d4c:	42a5      	cmp	r5, r4
  414d4e:	d1f9      	bne.n	414d44 <readRawPoint+0x48>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  414d50:	2140      	movs	r1, #64	; 0x40
  414d52:	a802      	add	r0, sp, #8
  414d54:	4b09      	ldr	r3, [pc, #36]	; (414d7c <readRawPoint+0x80>)
  414d56:	4798      	blx	r3
  *y = (samples[TOUCH_NUMSAMPLES / 2]);
  414d58:	9b22      	ldr	r3, [sp, #136]	; 0x88
  414d5a:	f8ca 3000 	str.w	r3, [sl]
  
  *z = readTouchZ(300);
  414d5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
  414d62:	4b09      	ldr	r3, [pc, #36]	; (414d88 <readRawPoint+0x8c>)
  414d64:	4798      	blx	r3
  414d66:	9b01      	ldr	r3, [sp, #4]
  414d68:	6018      	str	r0, [r3, #0]
}
  414d6a:	b043      	add	sp, #268	; 0x10c
  414d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414d70:	00414b31 	.word	0x00414b31
  414d74:	20400001 	.word	0x20400001
  414d78:	4003c000 	.word	0x4003c000
  414d7c:	00414a25 	.word	0x00414a25
  414d80:	00414b9d 	.word	0x00414b9d
  414d84:	40064000 	.word	0x40064000
  414d88:	00414c09 	.word	0x00414c09

00414d8c <pointToCoordinate>:

// returns if valid touch
// checks Z pressure!
int pointToCoordinate(int x, int y, int z, int *px, int *py) {
  414d8c:	b510      	push	{r4, lr}
  int xtemp, ytemp;
  
  xtemp = TOUCH_LCD_WIDTH*(x-TOUCH_X_240)/(TOUCH_X_0-TOUCH_X_240);
  414d8e:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  414d92:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  414d96:	0100      	lsls	r0, r0, #4
  414d98:	4c15      	ldr	r4, [pc, #84]	; (414df0 <pointToCoordinate+0x64>)
  414d9a:	fb84 e400 	smull	lr, r4, r4, r0
  414d9e:	4404      	add	r4, r0
  414da0:	17c0      	asrs	r0, r0, #31
  414da2:	ebc0 20e4 	rsb	r0, r0, r4, asr #11
  414da6:	28f0      	cmp	r0, #240	; 0xf0
  414da8:	bfa8      	it	ge
  414daa:	20f0      	movge	r0, #240	; 0xf0
  if(xtemp > TOUCH_LCD_WIDTH) xtemp=TOUCH_LCD_WIDTH;
  if(xtemp < 0) xtemp=0;
  *py = xtemp;
  414dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  414db0:	9c02      	ldr	r4, [sp, #8]
  414db2:	6020      	str	r0, [r4, #0]
    
  ytemp = TOUCH_LCD_HEIGHT - TOUCH_LCD_HEIGHT*(y-TOUCH_Y_0)/(TOUCH_Y_320-TOUCH_Y_0);
  414db4:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  414db8:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  414dbc:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  414dc0:	0189      	lsls	r1, r1, #6
  414dc2:	480c      	ldr	r0, [pc, #48]	; (414df4 <pointToCoordinate+0x68>)
  414dc4:	fb80 4001 	smull	r4, r0, r0, r1
  414dc8:	4408      	add	r0, r1
  414dca:	17c9      	asrs	r1, r1, #31
  414dcc:	ebc1 21e0 	rsb	r1, r1, r0, asr #11
  414dd0:	f501 71a0 	add.w	r1, r1, #320	; 0x140
  414dd4:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
  414dd8:	bfa8      	it	ge
  414dda:	f44f 71a0 	movge.w	r1, #320	; 0x140
  if(ytemp > TOUCH_LCD_HEIGHT) ytemp=TOUCH_LCD_HEIGHT;
  if(ytemp < 0) ytemp=0;
  *px = ytemp;
  414dde:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  414de2:	6019      	str	r1, [r3, #0]

  if(z < TOUCH_PRESSURE_DETECT) {
    return 1;
  }  
  return 0;
}
  414de4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  414de8:	bfac      	ite	ge
  414dea:	2000      	movge	r0, #0
  414dec:	2001      	movlt	r0, #1
  414dee:	bd10      	pop	{r4, pc}
  414df0:	cd9a6735 	.word	0xcd9a6735
  414df4:	bc97c21f 	.word	0xbc97c21f

00414df8 <readPoint>:

int readPoint(int *px, int *py){
  414df8:	b530      	push	{r4, r5, lr}
  414dfa:	b087      	sub	sp, #28
  414dfc:	4604      	mov	r4, r0
  414dfe:	460d      	mov	r5, r1
  int x, y, z;
  readRawPoint(&x, &y, &z);
  414e00:	aa03      	add	r2, sp, #12
  414e02:	a904      	add	r1, sp, #16
  414e04:	a805      	add	r0, sp, #20
  414e06:	4b05      	ldr	r3, [pc, #20]	; (414e1c <readPoint+0x24>)
  414e08:	4798      	blx	r3
  return(pointToCoordinate(x,y,z, px, py));
  414e0a:	9500      	str	r5, [sp, #0]
  414e0c:	4623      	mov	r3, r4
  414e0e:	9a03      	ldr	r2, [sp, #12]
  414e10:	9904      	ldr	r1, [sp, #16]
  414e12:	9805      	ldr	r0, [sp, #20]
  414e14:	4c02      	ldr	r4, [pc, #8]	; (414e20 <readPoint+0x28>)
  414e16:	47a0      	blx	r4
}
  414e18:	b007      	add	sp, #28
  414e1a:	bd30      	pop	{r4, r5, pc}
  414e1c:	00414cfd 	.word	0x00414cfd
  414e20:	00414d8d 	.word	0x00414d8d

00414e24 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  414e24:	2240      	movs	r2, #64	; 0x40
  414e26:	4b0b      	ldr	r3, [pc, #44]	; (414e54 <ili9341_send_command+0x30>)
  414e28:	635a      	str	r2, [r3, #52]	; 0x34
  414e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  414e2e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  414e32:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414e34:	4a08      	ldr	r2, [pc, #32]	; (414e58 <ili9341_send_command+0x34>)
  414e36:	6913      	ldr	r3, [r2, #16]
 * \brief Helper function to wait for the last send operation to complete
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414e38:	f413 7f00 	tst.w	r3, #512	; 0x200
  414e3c:	d0fb      	beq.n	414e36 <ili9341_send_command+0x12>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414e3e:	4b06      	ldr	r3, [pc, #24]	; (414e58 <ili9341_send_command+0x34>)
  414e40:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414e42:	461a      	mov	r2, r3
  414e44:	6913      	ldr	r3, [r2, #16]
  414e46:	f413 7f00 	tst.w	r3, #512	; 0x200
  414e4a:	d0fb      	beq.n	414e44 <ili9341_send_command+0x20>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  414e4c:	2240      	movs	r2, #64	; 0x40
  414e4e:	4b01      	ldr	r3, [pc, #4]	; (414e54 <ili9341_send_command+0x30>)
  414e50:	631a      	str	r2, [r3, #48]	; 0x30
  414e52:	4770      	bx	lr
  414e54:	400e0e00 	.word	0x400e0e00
  414e58:	40008000 	.word	0x40008000

00414e5c <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  414e5c:	b510      	push	{r4, lr}
  414e5e:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  414e60:	202a      	movs	r0, #42	; 0x2a
  414e62:	4b35      	ldr	r3, [pc, #212]	; (414f38 <ili9341_send_draw_limits+0xdc>)
  414e64:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  414e66:	4b35      	ldr	r3, [pc, #212]	; (414f3c <ili9341_send_draw_limits+0xe0>)
  414e68:	f9b3 1000 	ldrsh.w	r1, [r3]
  414e6c:	f3c1 2007 	ubfx	r0, r1, #8, #8
  414e70:	4a33      	ldr	r2, [pc, #204]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414e72:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414e74:	f413 7f00 	tst.w	r3, #512	; 0x200
  414e78:	d0fb      	beq.n	414e72 <ili9341_send_draw_limits+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414e7a:	4b31      	ldr	r3, [pc, #196]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414e7c:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  414e7e:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414e80:	461a      	mov	r2, r3
  414e82:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414e84:	f413 7f00 	tst.w	r3, #512	; 0x200
  414e88:	d0fb      	beq.n	414e82 <ili9341_send_draw_limits+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414e8a:	4b2d      	ldr	r3, [pc, #180]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414e8c:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
  414e8e:	b19c      	cbz	r4, 414eb8 <ili9341_send_draw_limits+0x5c>
		ili9341_send_byte(limit_end_x >> 8);
  414e90:	4b2c      	ldr	r3, [pc, #176]	; (414f44 <ili9341_send_draw_limits+0xe8>)
  414e92:	f9b3 1000 	ldrsh.w	r1, [r3]
  414e96:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414e9a:	4a29      	ldr	r2, [pc, #164]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414e9c:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414e9e:	f413 7f00 	tst.w	r3, #512	; 0x200
  414ea2:	d0fb      	beq.n	414e9c <ili9341_send_draw_limits+0x40>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414ea4:	4b26      	ldr	r3, [pc, #152]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414ea6:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  414ea8:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414eaa:	461a      	mov	r2, r3
  414eac:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414eae:	f413 7f00 	tst.w	r3, #512	; 0x200
  414eb2:	d0fb      	beq.n	414eac <ili9341_send_draw_limits+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414eb4:	4b22      	ldr	r3, [pc, #136]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414eb6:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414eb8:	4a21      	ldr	r2, [pc, #132]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414eba:	6913      	ldr	r3, [r2, #16]
  414ebc:	f413 7f00 	tst.w	r3, #512	; 0x200
  414ec0:	d0fb      	beq.n	414eba <ili9341_send_draw_limits+0x5e>
  414ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  414ec6:	4b20      	ldr	r3, [pc, #128]	; (414f48 <ili9341_send_draw_limits+0xec>)
  414ec8:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  414eca:	202b      	movs	r0, #43	; 0x2b
  414ecc:	4b1a      	ldr	r3, [pc, #104]	; (414f38 <ili9341_send_draw_limits+0xdc>)
  414ece:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  414ed0:	4b1e      	ldr	r3, [pc, #120]	; (414f4c <ili9341_send_draw_limits+0xf0>)
  414ed2:	f9b3 1000 	ldrsh.w	r1, [r3]
  414ed6:	f3c1 2007 	ubfx	r0, r1, #8, #8
  414eda:	4a19      	ldr	r2, [pc, #100]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414edc:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414ede:	f413 7f00 	tst.w	r3, #512	; 0x200
  414ee2:	d0fb      	beq.n	414edc <ili9341_send_draw_limits+0x80>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414ee4:	4b16      	ldr	r3, [pc, #88]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414ee6:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  414ee8:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414eea:	461a      	mov	r2, r3
  414eec:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414eee:	f413 7f00 	tst.w	r3, #512	; 0x200
  414ef2:	d0fb      	beq.n	414eec <ili9341_send_draw_limits+0x90>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414ef4:	4b12      	ldr	r3, [pc, #72]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414ef6:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
  414ef8:	b19c      	cbz	r4, 414f22 <ili9341_send_draw_limits+0xc6>
		ili9341_send_byte(limit_end_y >> 8);
  414efa:	4b15      	ldr	r3, [pc, #84]	; (414f50 <ili9341_send_draw_limits+0xf4>)
  414efc:	f9b3 1000 	ldrsh.w	r1, [r3]
  414f00:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414f04:	4a0e      	ldr	r2, [pc, #56]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414f06:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414f08:	f413 7f00 	tst.w	r3, #512	; 0x200
  414f0c:	d0fb      	beq.n	414f06 <ili9341_send_draw_limits+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414f0e:	4b0c      	ldr	r3, [pc, #48]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414f10:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  414f12:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414f14:	461a      	mov	r2, r3
  414f16:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414f18:	f413 7f00 	tst.w	r3, #512	; 0x200
  414f1c:	d0fb      	beq.n	414f16 <ili9341_send_draw_limits+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414f1e:	4b08      	ldr	r3, [pc, #32]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414f20:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414f22:	4a07      	ldr	r2, [pc, #28]	; (414f40 <ili9341_send_draw_limits+0xe4>)
  414f24:	6913      	ldr	r3, [r2, #16]
  414f26:	f413 7f00 	tst.w	r3, #512	; 0x200
  414f2a:	d0fb      	beq.n	414f24 <ili9341_send_draw_limits+0xc8>
  414f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  414f30:	4b05      	ldr	r3, [pc, #20]	; (414f48 <ili9341_send_draw_limits+0xec>)
  414f32:	631a      	str	r2, [r3, #48]	; 0x30
  414f34:	bd10      	pop	{r4, pc}
  414f36:	bf00      	nop
  414f38:	00414e25 	.word	0x00414e25
  414f3c:	20408b90 	.word	0x20408b90
  414f40:	40008000 	.word	0x40008000
  414f44:	20408b8c 	.word	0x20408b8c
  414f48:	400e1400 	.word	0x400e1400
  414f4c:	20408b92 	.word	0x20408b92
  414f50:	20408b8e 	.word	0x20408b8e

00414f54 <ili9341_set_top_left_limit>:
 *
 * \param x The x coordinate of the top left corner
 * \param y The y coordinate of the top left corner
 */
void ili9341_set_top_left_limit(ili9341_coord_t x, ili9341_coord_t y)
{
  414f54:	b508      	push	{r3, lr}
	limit_start_x = x;
  414f56:	4b04      	ldr	r3, [pc, #16]	; (414f68 <ili9341_set_top_left_limit+0x14>)
  414f58:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  414f5a:	4b04      	ldr	r3, [pc, #16]	; (414f6c <ili9341_set_top_left_limit+0x18>)
  414f5c:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(false);
  414f5e:	2000      	movs	r0, #0
  414f60:	4b03      	ldr	r3, [pc, #12]	; (414f70 <ili9341_set_top_left_limit+0x1c>)
  414f62:	4798      	blx	r3
  414f64:	bd08      	pop	{r3, pc}
  414f66:	bf00      	nop
  414f68:	20408b90 	.word	0x20408b90
  414f6c:	20408b92 	.word	0x20408b92
  414f70:	00414e5d 	.word	0x00414e5d

00414f74 <ili9341_set_bottom_right_limit>:
 *
 * \param x The x coordinate of the bottom right corner
 * \param y The y coordinate of the bottom right corner
 */
void ili9341_set_bottom_right_limit(ili9341_coord_t x, ili9341_coord_t y)
{
  414f74:	b508      	push	{r3, lr}
	limit_end_x = x;
  414f76:	4b04      	ldr	r3, [pc, #16]	; (414f88 <ili9341_set_bottom_right_limit+0x14>)
  414f78:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  414f7a:	4b04      	ldr	r3, [pc, #16]	; (414f8c <ili9341_set_bottom_right_limit+0x18>)
  414f7c:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(true);
  414f7e:	2001      	movs	r0, #1
  414f80:	4b03      	ldr	r3, [pc, #12]	; (414f90 <ili9341_set_bottom_right_limit+0x1c>)
  414f82:	4798      	blx	r3
  414f84:	bd08      	pop	{r3, pc}
  414f86:	bf00      	nop
  414f88:	20408b8c 	.word	0x20408b8c
  414f8c:	20408b8e 	.word	0x20408b8e
  414f90:	00414e5d 	.word	0x00414e5d

00414f94 <ili9341_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
  414f94:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  414f96:	4c06      	ldr	r4, [pc, #24]	; (414fb0 <ili9341_set_limits+0x1c>)
  414f98:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  414f9a:	4806      	ldr	r0, [pc, #24]	; (414fb4 <ili9341_set_limits+0x20>)
  414f9c:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  414f9e:	4906      	ldr	r1, [pc, #24]	; (414fb8 <ili9341_set_limits+0x24>)
  414fa0:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  414fa2:	4a06      	ldr	r2, [pc, #24]	; (414fbc <ili9341_set_limits+0x28>)
  414fa4:	8013      	strh	r3, [r2, #0]

	ili9341_send_draw_limits(true);
  414fa6:	2001      	movs	r0, #1
  414fa8:	4b05      	ldr	r3, [pc, #20]	; (414fc0 <ili9341_set_limits+0x2c>)
  414faa:	4798      	blx	r3
  414fac:	bd10      	pop	{r4, pc}
  414fae:	bf00      	nop
  414fb0:	20408b90 	.word	0x20408b90
  414fb4:	20408b92 	.word	0x20408b92
  414fb8:	20408b8c 	.word	0x20408b8c
  414fbc:	20408b8e 	.word	0x20408b8e
  414fc0:	00414e5d 	.word	0x00414e5d

00414fc4 <ili9341_copy_pixels_to_screen>:
 *
 * \param pixels Pointer to the pixel data
 * \param count Number of pixels to copy to the screen
 */
void ili9341_copy_pixels_to_screen(const ili9341_color_t *pixels, uint32_t count)
{
  414fc4:	b570      	push	{r4, r5, r6, lr}
  414fc6:	4604      	mov	r4, r0
  414fc8:	460e      	mov	r6, r1
	const ili9341_color_t *pixel = pixels;

	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
  414fca:	202c      	movs	r0, #44	; 0x2c
  414fcc:	4b10      	ldr	r3, [pc, #64]	; (415010 <ili9341_copy_pixels_to_screen+0x4c>)
  414fce:	4798      	blx	r3

  // TODO> usar dma!
	while (count--) {
  414fd0:	b1a6      	cbz	r6, 414ffc <ili9341_copy_pixels_to_screen+0x38>
  414fd2:	1e75      	subs	r5, r6, #1
  414fd4:	1ea0      	subs	r0, r4, #2
  414fd6:	4b0f      	ldr	r3, [pc, #60]	; (415014 <ili9341_copy_pixels_to_screen+0x50>)
		ili9341_send_byte(*pixel);
  414fd8:	7881      	ldrb	r1, [r0, #2]
  414fda:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414fdc:	f412 7f00 	tst.w	r2, #512	; 0x200
  414fe0:	d0fb      	beq.n	414fda <ili9341_copy_pixels_to_screen+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414fe2:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
  414fe4:	f830 1f02 	ldrh.w	r1, [r0, #2]!
  414fe8:	0a09      	lsrs	r1, r1, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414fea:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  414fec:	f412 7f00 	tst.w	r2, #512	; 0x200
  414ff0:	d0fb      	beq.n	414fea <ili9341_copy_pixels_to_screen+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  414ff2:	60d9      	str	r1, [r3, #12]
	while (count--) {
  414ff4:	3d01      	subs	r5, #1
  414ff6:	f1b5 3fff 	cmp.w	r5, #4294967295
  414ffa:	d1ed      	bne.n	414fd8 <ili9341_copy_pixels_to_screen+0x14>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  414ffc:	4a05      	ldr	r2, [pc, #20]	; (415014 <ili9341_copy_pixels_to_screen+0x50>)
  414ffe:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  415000:	f413 7f00 	tst.w	r3, #512	; 0x200
  415004:	d0fb      	beq.n	414ffe <ili9341_copy_pixels_to_screen+0x3a>
  415006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  41500a:	4b03      	ldr	r3, [pc, #12]	; (415018 <ili9341_copy_pixels_to_screen+0x54>)
  41500c:	631a      	str	r2, [r3, #48]	; 0x30
  41500e:	bd70      	pop	{r4, r5, r6, pc}
  415010:	00414e25 	.word	0x00414e25
  415014:	40008000 	.word	0x40008000
  415018:	400e1400 	.word	0x400e1400

0041501c <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  41501c:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  41501e:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  415022:	f000 0301 	and.w	r3, r0, #1
		madctl &= ~(1 << 6);
  415026:	2b00      	cmp	r3, #0
  415028:	bf0c      	ite	eq
  41502a:	2448      	moveq	r4, #72	; 0x48
  41502c:	2408      	movne	r4, #8
	}

	if (flags & ILI9341_FLIP_Y) {
  41502e:	f010 0f02 	tst.w	r0, #2
		madctl |= 1 << 7;
  415032:	bf18      	it	ne
  415034:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  415038:	f010 0f04 	tst.w	r0, #4
		madctl |= 1 << 5;
  41503c:	bf18      	it	ne
  41503e:	f044 0420 	orrne.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  415042:	2036      	movs	r0, #54	; 0x36
  415044:	4b09      	ldr	r3, [pc, #36]	; (41506c <ili9341_set_orientation+0x50>)
  415046:	4798      	blx	r3
  415048:	4a09      	ldr	r2, [pc, #36]	; (415070 <ili9341_set_orientation+0x54>)
  41504a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  41504c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415050:	d0fb      	beq.n	41504a <ili9341_set_orientation+0x2e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415052:	4b07      	ldr	r3, [pc, #28]	; (415070 <ili9341_set_orientation+0x54>)
  415054:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415056:	461a      	mov	r2, r3
  415058:	6913      	ldr	r3, [r2, #16]
  41505a:	f413 7f00 	tst.w	r3, #512	; 0x200
  41505e:	d0fb      	beq.n	415058 <ili9341_set_orientation+0x3c>
  415060:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  415064:	4b03      	ldr	r3, [pc, #12]	; (415074 <ili9341_set_orientation+0x58>)
  415066:	631a      	str	r2, [r3, #48]	; 0x30
  415068:	bd10      	pop	{r4, pc}
  41506a:	bf00      	nop
  41506c:	00414e25 	.word	0x00414e25
  415070:	40008000 	.word	0x40008000
  415074:	400e1400 	.word	0x400e1400

00415078 <ili9341_init>:
{
  415078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41507c:	b084      	sub	sp, #16
	struct spi_device device = { .id = BOARD_ILI9488_SPI_NPCS, };     	// Board specific chip select configuration
  41507e:	2703      	movs	r7, #3
  415080:	ad04      	add	r5, sp, #16
  415082:	f845 7d04 	str.w	r7, [r5, #-4]!
	spi_master_init(CONF_ILI9341_SPI);
  415086:	4ca5      	ldr	r4, [pc, #660]	; (41531c <ili9341_init+0x2a4>)
  415088:	4620      	mov	r0, r4
  41508a:	4ba5      	ldr	r3, [pc, #660]	; (415320 <ili9341_init+0x2a8>)
  41508c:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags, CONF_ILI9341_CLOCK_SPEED, spi_select_id);
  41508e:	2600      	movs	r6, #0
  415090:	9600      	str	r6, [sp, #0]
  415092:	4ba4      	ldr	r3, [pc, #656]	; (415324 <ili9341_init+0x2ac>)
  415094:	4632      	mov	r2, r6
  415096:	4629      	mov	r1, r5
  415098:	4620      	mov	r0, r4
  41509a:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 415344 <ili9341_init+0x2cc>
  41509e:	47c0      	blx	r8
 	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  4150a0:	4632      	mov	r2, r6
  4150a2:	4639      	mov	r1, r7
  4150a4:	4620      	mov	r0, r4
  4150a6:	4ba0      	ldr	r3, [pc, #640]	; (415328 <ili9341_init+0x2b0>)
  4150a8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4150aa:	2601      	movs	r6, #1
  4150ac:	6026      	str	r6, [r4, #0]
  spi_select_device(CONF_ILI9341_SPI, &device);
  4150ae:	4629      	mov	r1, r5
  4150b0:	4620      	mov	r0, r4
  4150b2:	4b9e      	ldr	r3, [pc, #632]	; (41532c <ili9341_init+0x2b4>)
  4150b4:	4798      	blx	r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4150b6:	23f0      	movs	r3, #240	; 0xf0
  4150b8:	60e3      	str	r3, [r4, #12]
  4150ba:	60e6      	str	r6, [r4, #12]
  delay_ms(150);
  4150bc:	4e9c      	ldr	r6, [pc, #624]	; (415330 <ili9341_init+0x2b8>)
  4150be:	4630      	mov	r0, r6
  4150c0:	4c9c      	ldr	r4, [pc, #624]	; (415334 <ili9341_init+0x2bc>)
  4150c2:	47a0      	blx	r4
  4150c4:	4d9c      	ldr	r5, [pc, #624]	; (415338 <ili9341_init+0x2c0>)
  4150c6:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
  4150ca:	632f      	str	r7, [r5, #48]	; 0x30
	delay_ms(10);
  4150cc:	f8df 8278 	ldr.w	r8, [pc, #632]	; 415348 <ili9341_init+0x2d0>
  4150d0:	4640      	mov	r0, r8
  4150d2:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4150d4:	636f      	str	r7, [r5, #52]	; 0x34
	delay_ms(10);
  4150d6:	4640      	mov	r0, r8
  4150d8:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4150da:	632f      	str	r7, [r5, #48]	; 0x30
	delay_ms(150);
  4150dc:	4630      	mov	r0, r6
  4150de:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  4150e0:	2011      	movs	r0, #17
  4150e2:	4d96      	ldr	r5, [pc, #600]	; (41533c <ili9341_init+0x2c4>)
  4150e4:	47a8      	blx	r5
  4150e6:	4f96      	ldr	r7, [pc, #600]	; (415340 <ili9341_init+0x2c8>)
  4150e8:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
  4150ec:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	delay_ms(150);
  4150f0:	4630      	mov	r0, r6
  4150f2:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  4150f4:	2029      	movs	r0, #41	; 0x29
  4150f6:	47a8      	blx	r5
  4150f8:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  4150fc:	20cd      	movs	r0, #205	; 0xcd
  4150fe:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415100:	4a86      	ldr	r2, [pc, #536]	; (41531c <ili9341_init+0x2a4>)
  415102:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  415104:	f413 7f00 	tst.w	r3, #512	; 0x200
  415108:	d0fb      	beq.n	415102 <ili9341_init+0x8a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  41510a:	2239      	movs	r2, #57	; 0x39
  41510c:	4b83      	ldr	r3, [pc, #524]	; (41531c <ili9341_init+0x2a4>)
  41510e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415110:	461a      	mov	r2, r3
  415112:	6913      	ldr	r3, [r2, #16]
  415114:	f413 7f00 	tst.w	r3, #512	; 0x200
  415118:	d0fb      	beq.n	415112 <ili9341_init+0x9a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  41511a:	222c      	movs	r2, #44	; 0x2c
  41511c:	4b7f      	ldr	r3, [pc, #508]	; (41531c <ili9341_init+0x2a4>)
  41511e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415120:	461a      	mov	r2, r3
  415122:	6913      	ldr	r3, [r2, #16]
  415124:	f413 7f00 	tst.w	r3, #512	; 0x200
  415128:	d0fb      	beq.n	415122 <ili9341_init+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  41512a:	2200      	movs	r2, #0
  41512c:	4b7b      	ldr	r3, [pc, #492]	; (41531c <ili9341_init+0x2a4>)
  41512e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415130:	461a      	mov	r2, r3
  415132:	6913      	ldr	r3, [r2, #16]
  415134:	f413 7f00 	tst.w	r3, #512	; 0x200
  415138:	d0fb      	beq.n	415132 <ili9341_init+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  41513a:	2234      	movs	r2, #52	; 0x34
  41513c:	4b77      	ldr	r3, [pc, #476]	; (41531c <ili9341_init+0x2a4>)
  41513e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415140:	461a      	mov	r2, r3
  415142:	6913      	ldr	r3, [r2, #16]
  415144:	f413 7f00 	tst.w	r3, #512	; 0x200
  415148:	d0fb      	beq.n	415142 <ili9341_init+0xca>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  41514a:	2202      	movs	r2, #2
  41514c:	4b73      	ldr	r3, [pc, #460]	; (41531c <ili9341_init+0x2a4>)
  41514e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415150:	461a      	mov	r2, r3
  415152:	6913      	ldr	r3, [r2, #16]
  415154:	f413 7f00 	tst.w	r3, #512	; 0x200
  415158:	d0fb      	beq.n	415152 <ili9341_init+0xda>
  41515a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  41515e:	4b78      	ldr	r3, [pc, #480]	; (415340 <ili9341_init+0x2c8>)
  415160:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  415162:	20cf      	movs	r0, #207	; 0xcf
  415164:	4b75      	ldr	r3, [pc, #468]	; (41533c <ili9341_init+0x2c4>)
  415166:	4798      	blx	r3
  415168:	4a6c      	ldr	r2, [pc, #432]	; (41531c <ili9341_init+0x2a4>)
  41516a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  41516c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415170:	d0fb      	beq.n	41516a <ili9341_init+0xf2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415172:	2200      	movs	r2, #0
  415174:	4b69      	ldr	r3, [pc, #420]	; (41531c <ili9341_init+0x2a4>)
  415176:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415178:	461a      	mov	r2, r3
  41517a:	6913      	ldr	r3, [r2, #16]
  41517c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415180:	d0fb      	beq.n	41517a <ili9341_init+0x102>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415182:	22aa      	movs	r2, #170	; 0xaa
  415184:	4b65      	ldr	r3, [pc, #404]	; (41531c <ili9341_init+0x2a4>)
  415186:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415188:	461a      	mov	r2, r3
  41518a:	6913      	ldr	r3, [r2, #16]
  41518c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415190:	d0fb      	beq.n	41518a <ili9341_init+0x112>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415192:	22b0      	movs	r2, #176	; 0xb0
  415194:	4b61      	ldr	r3, [pc, #388]	; (41531c <ili9341_init+0x2a4>)
  415196:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415198:	461a      	mov	r2, r3
  41519a:	6913      	ldr	r3, [r2, #16]
  41519c:	f413 7f00 	tst.w	r3, #512	; 0x200
  4151a0:	d0fb      	beq.n	41519a <ili9341_init+0x122>
  4151a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4151a6:	4b66      	ldr	r3, [pc, #408]	; (415340 <ili9341_init+0x2c8>)
  4151a8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  4151aa:	20f7      	movs	r0, #247	; 0xf7
  4151ac:	4b63      	ldr	r3, [pc, #396]	; (41533c <ili9341_init+0x2c4>)
  4151ae:	4798      	blx	r3
  4151b0:	4a5a      	ldr	r2, [pc, #360]	; (41531c <ili9341_init+0x2a4>)
  4151b2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4151b4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4151b8:	d0fb      	beq.n	4151b2 <ili9341_init+0x13a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4151ba:	2230      	movs	r2, #48	; 0x30
  4151bc:	4b57      	ldr	r3, [pc, #348]	; (41531c <ili9341_init+0x2a4>)
  4151be:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4151c0:	461a      	mov	r2, r3
  4151c2:	6913      	ldr	r3, [r2, #16]
  4151c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4151c8:	d0fb      	beq.n	4151c2 <ili9341_init+0x14a>
  4151ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4151ce:	4b5c      	ldr	r3, [pc, #368]	; (415340 <ili9341_init+0x2c8>)
  4151d0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  4151d2:	20c0      	movs	r0, #192	; 0xc0
  4151d4:	4b59      	ldr	r3, [pc, #356]	; (41533c <ili9341_init+0x2c4>)
  4151d6:	4798      	blx	r3
  4151d8:	4a50      	ldr	r2, [pc, #320]	; (41531c <ili9341_init+0x2a4>)
  4151da:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4151dc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4151e0:	d0fb      	beq.n	4151da <ili9341_init+0x162>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4151e2:	2225      	movs	r2, #37	; 0x25
  4151e4:	4b4d      	ldr	r3, [pc, #308]	; (41531c <ili9341_init+0x2a4>)
  4151e6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4151e8:	461a      	mov	r2, r3
  4151ea:	6913      	ldr	r3, [r2, #16]
  4151ec:	f413 7f00 	tst.w	r3, #512	; 0x200
  4151f0:	d0fb      	beq.n	4151ea <ili9341_init+0x172>
  4151f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4151f6:	4b52      	ldr	r3, [pc, #328]	; (415340 <ili9341_init+0x2c8>)
  4151f8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  4151fa:	20c1      	movs	r0, #193	; 0xc1
  4151fc:	4b4f      	ldr	r3, [pc, #316]	; (41533c <ili9341_init+0x2c4>)
  4151fe:	4798      	blx	r3
  415200:	4a46      	ldr	r2, [pc, #280]	; (41531c <ili9341_init+0x2a4>)
  415202:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  415204:	f413 7f00 	tst.w	r3, #512	; 0x200
  415208:	d0fb      	beq.n	415202 <ili9341_init+0x18a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  41520a:	2211      	movs	r2, #17
  41520c:	4b43      	ldr	r3, [pc, #268]	; (41531c <ili9341_init+0x2a4>)
  41520e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415210:	461a      	mov	r2, r3
  415212:	6913      	ldr	r3, [r2, #16]
  415214:	f413 7f00 	tst.w	r3, #512	; 0x200
  415218:	d0fb      	beq.n	415212 <ili9341_init+0x19a>
  41521a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  41521e:	4b48      	ldr	r3, [pc, #288]	; (415340 <ili9341_init+0x2c8>)
  415220:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  415222:	20c5      	movs	r0, #197	; 0xc5
  415224:	4b45      	ldr	r3, [pc, #276]	; (41533c <ili9341_init+0x2c4>)
  415226:	4798      	blx	r3
  415228:	4a3c      	ldr	r2, [pc, #240]	; (41531c <ili9341_init+0x2a4>)
  41522a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  41522c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415230:	d0fb      	beq.n	41522a <ili9341_init+0x1b2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415232:	225c      	movs	r2, #92	; 0x5c
  415234:	4b39      	ldr	r3, [pc, #228]	; (41531c <ili9341_init+0x2a4>)
  415236:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415238:	461a      	mov	r2, r3
  41523a:	6913      	ldr	r3, [r2, #16]
  41523c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415240:	d0fb      	beq.n	41523a <ili9341_init+0x1c2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415242:	224c      	movs	r2, #76	; 0x4c
  415244:	4b35      	ldr	r3, [pc, #212]	; (41531c <ili9341_init+0x2a4>)
  415246:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415248:	461a      	mov	r2, r3
  41524a:	6913      	ldr	r3, [r2, #16]
  41524c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415250:	d0fb      	beq.n	41524a <ili9341_init+0x1d2>
  415252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  415256:	4b3a      	ldr	r3, [pc, #232]	; (415340 <ili9341_init+0x2c8>)
  415258:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  41525a:	20c7      	movs	r0, #199	; 0xc7
  41525c:	4b37      	ldr	r3, [pc, #220]	; (41533c <ili9341_init+0x2c4>)
  41525e:	4798      	blx	r3
  415260:	4a2e      	ldr	r2, [pc, #184]	; (41531c <ili9341_init+0x2a4>)
  415262:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  415264:	f413 7f00 	tst.w	r3, #512	; 0x200
  415268:	d0fb      	beq.n	415262 <ili9341_init+0x1ea>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  41526a:	2294      	movs	r2, #148	; 0x94
  41526c:	4b2b      	ldr	r3, [pc, #172]	; (41531c <ili9341_init+0x2a4>)
  41526e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415270:	461a      	mov	r2, r3
  415272:	6913      	ldr	r3, [r2, #16]
  415274:	f413 7f00 	tst.w	r3, #512	; 0x200
  415278:	d0fb      	beq.n	415272 <ili9341_init+0x1fa>
  41527a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  41527e:	4b30      	ldr	r3, [pc, #192]	; (415340 <ili9341_init+0x2c8>)
  415280:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  415282:	20e8      	movs	r0, #232	; 0xe8
  415284:	4b2d      	ldr	r3, [pc, #180]	; (41533c <ili9341_init+0x2c4>)
  415286:	4798      	blx	r3
  415288:	4a24      	ldr	r2, [pc, #144]	; (41531c <ili9341_init+0x2a4>)
  41528a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  41528c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415290:	d0fb      	beq.n	41528a <ili9341_init+0x212>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415292:	2285      	movs	r2, #133	; 0x85
  415294:	4b21      	ldr	r3, [pc, #132]	; (41531c <ili9341_init+0x2a4>)
  415296:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415298:	461a      	mov	r2, r3
  41529a:	6913      	ldr	r3, [r2, #16]
  41529c:	f413 7f00 	tst.w	r3, #512	; 0x200
  4152a0:	d0fb      	beq.n	41529a <ili9341_init+0x222>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4152a2:	2201      	movs	r2, #1
  4152a4:	4b1d      	ldr	r3, [pc, #116]	; (41531c <ili9341_init+0x2a4>)
  4152a6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4152a8:	461a      	mov	r2, r3
  4152aa:	6913      	ldr	r3, [r2, #16]
  4152ac:	f413 7f00 	tst.w	r3, #512	; 0x200
  4152b0:	d0fb      	beq.n	4152aa <ili9341_init+0x232>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4152b2:	2278      	movs	r2, #120	; 0x78
  4152b4:	4b19      	ldr	r3, [pc, #100]	; (41531c <ili9341_init+0x2a4>)
  4152b6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4152b8:	461a      	mov	r2, r3
  4152ba:	6913      	ldr	r3, [r2, #16]
  4152bc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4152c0:	d0fb      	beq.n	4152ba <ili9341_init+0x242>
  4152c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4152c6:	4b1e      	ldr	r3, [pc, #120]	; (415340 <ili9341_init+0x2c8>)
  4152c8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  4152ca:	20ea      	movs	r0, #234	; 0xea
  4152cc:	4b1b      	ldr	r3, [pc, #108]	; (41533c <ili9341_init+0x2c4>)
  4152ce:	4798      	blx	r3
  4152d0:	4a12      	ldr	r2, [pc, #72]	; (41531c <ili9341_init+0x2a4>)
  4152d2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4152d4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4152d8:	d0fb      	beq.n	4152d2 <ili9341_init+0x25a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4152da:	2200      	movs	r2, #0
  4152dc:	4b0f      	ldr	r3, [pc, #60]	; (41531c <ili9341_init+0x2a4>)
  4152de:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4152e0:	461a      	mov	r2, r3
  4152e2:	6913      	ldr	r3, [r2, #16]
  4152e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4152e8:	d0fb      	beq.n	4152e2 <ili9341_init+0x26a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4152ea:	2200      	movs	r2, #0
  4152ec:	4b0b      	ldr	r3, [pc, #44]	; (41531c <ili9341_init+0x2a4>)
  4152ee:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4152f0:	461a      	mov	r2, r3
  4152f2:	6913      	ldr	r3, [r2, #16]
  4152f4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4152f8:	d0fb      	beq.n	4152f2 <ili9341_init+0x27a>
  4152fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4152fe:	4b10      	ldr	r3, [pc, #64]	; (415340 <ili9341_init+0x2c8>)
  415300:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  415302:	203a      	movs	r0, #58	; 0x3a
  415304:	4b0d      	ldr	r3, [pc, #52]	; (41533c <ili9341_init+0x2c4>)
  415306:	4798      	blx	r3
  415308:	4a04      	ldr	r2, [pc, #16]	; (41531c <ili9341_init+0x2a4>)
  41530a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  41530c:	f413 7f00 	tst.w	r3, #512	; 0x200
  415310:	d0fb      	beq.n	41530a <ili9341_init+0x292>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  415312:	2255      	movs	r2, #85	; 0x55
  415314:	4b01      	ldr	r3, [pc, #4]	; (41531c <ili9341_init+0x2a4>)
  415316:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  415318:	461a      	mov	r2, r3
  41531a:	e017      	b.n	41534c <ili9341_init+0x2d4>
  41531c:	40008000 	.word	0x40008000
  415320:	004172d1 	.word	0x004172d1
  415324:	02625a00 	.word	0x02625a00
  415328:	00417c79 	.word	0x00417c79
  41532c:	004173a5 	.word	0x004173a5
  415330:	0073c0b7 	.word	0x0073c0b7
  415334:	20400001 	.word	0x20400001
  415338:	400e0e00 	.word	0x400e0e00
  41533c:	00414e25 	.word	0x00414e25
  415340:	400e1400 	.word	0x400e1400
  415344:	00417325 	.word	0x00417325
  415348:	0007b784 	.word	0x0007b784
  41534c:	6913      	ldr	r3, [r2, #16]
  41534e:	f413 7f00 	tst.w	r3, #512	; 0x200
  415352:	d0fb      	beq.n	41534c <ili9341_init+0x2d4>
  415354:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  415358:	4b07      	ldr	r3, [pc, #28]	; (415378 <ili9341_init+0x300>)
  41535a:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  41535c:	2000      	movs	r0, #0
  41535e:	4b07      	ldr	r3, [pc, #28]	; (41537c <ili9341_init+0x304>)
  415360:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  415362:	23f0      	movs	r3, #240	; 0xf0
  415364:	f44f 72a0 	mov.w	r2, #320	; 0x140
  415368:	2100      	movs	r1, #0
  41536a:	4608      	mov	r0, r1
  41536c:	4c04      	ldr	r4, [pc, #16]	; (415380 <ili9341_init+0x308>)
  41536e:	47a0      	blx	r4
}
  415370:	b004      	add	sp, #16
  415372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415376:	bf00      	nop
  415378:	400e1400 	.word	0x400e1400
  41537c:	0041501d 	.word	0x0041501d
  415380:	00414f95 	.word	0x00414f95

00415384 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  415384:	b570      	push	{r4, r5, r6, lr}
  415386:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  415388:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  41538a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  41538c:	4013      	ands	r3, r2
  41538e:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  415390:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  415392:	4e1c      	ldr	r6, [pc, #112]	; (415404 <afec_process_callback+0x80>)
  415394:	4d1c      	ldr	r5, [pc, #112]	; (415408 <afec_process_callback+0x84>)
  415396:	42a8      	cmp	r0, r5
  415398:	bf14      	ite	ne
  41539a:	2000      	movne	r0, #0
  41539c:	2001      	moveq	r0, #1
  41539e:	0105      	lsls	r5, r0, #4
  4153a0:	e00b      	b.n	4153ba <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4153a2:	2c0e      	cmp	r4, #14
  4153a4:	d81e      	bhi.n	4153e4 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4153a6:	9a01      	ldr	r2, [sp, #4]
  4153a8:	f104 010c 	add.w	r1, r4, #12
  4153ac:	2301      	movs	r3, #1
  4153ae:	408b      	lsls	r3, r1
  4153b0:	4213      	tst	r3, r2
  4153b2:	d110      	bne.n	4153d6 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4153b4:	3401      	adds	r4, #1
  4153b6:	2c10      	cmp	r4, #16
  4153b8:	d022      	beq.n	415400 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4153ba:	2c0b      	cmp	r4, #11
  4153bc:	d8f1      	bhi.n	4153a2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4153be:	9a01      	ldr	r2, [sp, #4]
  4153c0:	2301      	movs	r3, #1
  4153c2:	40a3      	lsls	r3, r4
  4153c4:	4213      	tst	r3, r2
  4153c6:	d0f5      	beq.n	4153b4 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4153c8:	192b      	adds	r3, r5, r4
  4153ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4153ce:	2b00      	cmp	r3, #0
  4153d0:	d0f0      	beq.n	4153b4 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4153d2:	4798      	blx	r3
  4153d4:	e7ee      	b.n	4153b4 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4153d6:	192b      	adds	r3, r5, r4
  4153d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4153dc:	2b00      	cmp	r3, #0
  4153de:	d0e9      	beq.n	4153b4 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4153e0:	4798      	blx	r3
  4153e2:	e7e7      	b.n	4153b4 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4153e4:	9a01      	ldr	r2, [sp, #4]
  4153e6:	f104 010f 	add.w	r1, r4, #15
  4153ea:	2301      	movs	r3, #1
  4153ec:	408b      	lsls	r3, r1
  4153ee:	4213      	tst	r3, r2
  4153f0:	d0e0      	beq.n	4153b4 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4153f2:	192b      	adds	r3, r5, r4
  4153f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4153f8:	2b00      	cmp	r3, #0
  4153fa:	d0db      	beq.n	4153b4 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4153fc:	4798      	blx	r3
  4153fe:	e7d9      	b.n	4153b4 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  415400:	b002      	add	sp, #8
  415402:	bd70      	pop	{r4, r5, r6, pc}
  415404:	2043a06c 	.word	0x2043a06c
  415408:	40064000 	.word	0x40064000

0041540c <afec_ch_set_config>:
{
  41540c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  41540e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  415410:	2301      	movs	r3, #1
  415412:	408b      	lsls	r3, r1
  415414:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  415418:	7815      	ldrb	r5, [r2, #0]
  41541a:	2d00      	cmp	r5, #0
  41541c:	bf08      	it	eq
  41541e:	2300      	moveq	r3, #0
  415420:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  415422:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  415424:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  415426:	004b      	lsls	r3, r1, #1
  415428:	2103      	movs	r1, #3
  41542a:	4099      	lsls	r1, r3
  41542c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  415430:	7851      	ldrb	r1, [r2, #1]
  415432:	4099      	lsls	r1, r3
  415434:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  415436:	6541      	str	r1, [r0, #84]	; 0x54
}
  415438:	bc30      	pop	{r4, r5}
  41543a:	4770      	bx	lr

0041543c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  41543c:	2200      	movs	r2, #0
  41543e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  415440:	4b08      	ldr	r3, [pc, #32]	; (415464 <afec_get_config_defaults+0x28>)
  415442:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  415444:	4b08      	ldr	r3, [pc, #32]	; (415468 <afec_get_config_defaults+0x2c>)
  415446:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  415448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  41544c:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  41544e:	2302      	movs	r3, #2
  415450:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  415452:	2301      	movs	r3, #1
  415454:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  415456:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  415458:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  41545a:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  41545c:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  41545e:	7583      	strb	r3, [r0, #22]
  415460:	4770      	bx	lr
  415462:	bf00      	nop
  415464:	11e1a300 	.word	0x11e1a300
  415468:	005b8d80 	.word	0x005b8d80

0041546c <afec_ch_get_config_defaults>:
	cfg->diff = false;
  41546c:	2300      	movs	r3, #0
  41546e:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  415470:	2301      	movs	r3, #1
  415472:	7043      	strb	r3, [r0, #1]
  415474:	4770      	bx	lr
	...

00415478 <afec_init>:
	return afec->AFEC_ISR;
  415478:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  41547a:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  41547e:	d001      	beq.n	415484 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  415480:	2019      	movs	r0, #25
  415482:	4770      	bx	lr
{
  415484:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  415486:	2301      	movs	r3, #1
  415488:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  41548a:	7ccb      	ldrb	r3, [r1, #19]
  41548c:	2b00      	cmp	r3, #0
  41548e:	bf18      	it	ne
  415490:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  415494:	684b      	ldr	r3, [r1, #4]
  415496:	688c      	ldr	r4, [r1, #8]
  415498:	fbb3 f3f4 	udiv	r3, r3, r4
  41549c:	3b01      	subs	r3, #1
  41549e:	021b      	lsls	r3, r3, #8
  4154a0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4154a2:	68cc      	ldr	r4, [r1, #12]
  4154a4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4154a8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4154aa:	7c0c      	ldrb	r4, [r1, #16]
  4154ac:	0624      	lsls	r4, r4, #24
  4154ae:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4154b2:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  4154b4:	7c4c      	ldrb	r4, [r1, #17]
  4154b6:	0724      	lsls	r4, r4, #28
  4154b8:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4154bc:	4323      	orrs	r3, r4
  4154be:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  4154c0:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4154c2:	7d0b      	ldrb	r3, [r1, #20]
  4154c4:	2b00      	cmp	r3, #0
  4154c6:	bf14      	ite	ne
  4154c8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4154cc:	2300      	moveq	r3, #0
  4154ce:	680a      	ldr	r2, [r1, #0]
  4154d0:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4154d2:	7d4a      	ldrb	r2, [r1, #21]
  4154d4:	2a00      	cmp	r2, #0
  4154d6:	bf14      	ite	ne
  4154d8:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4154dc:	2200      	moveq	r2, #0
			(config->resolution) |
  4154de:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4154e0:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4154e2:	7d8b      	ldrb	r3, [r1, #22]
  4154e4:	021b      	lsls	r3, r3, #8
  4154e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4154ea:	f043 030c 	orr.w	r3, r3, #12
  4154ee:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4154f2:	4b0f      	ldr	r3, [pc, #60]	; (415530 <afec_init+0xb8>)
  4154f4:	4298      	cmp	r0, r3
  4154f6:	d006      	beq.n	415506 <afec_init+0x8e>
	if(afec == AFEC1) {
  4154f8:	4b0e      	ldr	r3, [pc, #56]	; (415534 <afec_init+0xbc>)
  4154fa:	4298      	cmp	r0, r3
  4154fc:	d00d      	beq.n	41551a <afec_init+0xa2>
	return STATUS_OK;
  4154fe:	2000      	movs	r0, #0
}
  415500:	f85d 4b04 	ldr.w	r4, [sp], #4
  415504:	4770      	bx	lr
  415506:	4b0c      	ldr	r3, [pc, #48]	; (415538 <afec_init+0xc0>)
  415508:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  41550c:	2200      	movs	r2, #0
  41550e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  415512:	428b      	cmp	r3, r1
  415514:	d1fb      	bne.n	41550e <afec_init+0x96>
	return STATUS_OK;
  415516:	2000      	movs	r0, #0
  415518:	e7f2      	b.n	415500 <afec_init+0x88>
  41551a:	4b08      	ldr	r3, [pc, #32]	; (41553c <afec_init+0xc4>)
  41551c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  415520:	2200      	movs	r2, #0
  415522:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  415526:	428b      	cmp	r3, r1
  415528:	d1fb      	bne.n	415522 <afec_init+0xaa>
	return STATUS_OK;
  41552a:	2000      	movs	r0, #0
  41552c:	e7e8      	b.n	415500 <afec_init+0x88>
  41552e:	bf00      	nop
  415530:	4003c000 	.word	0x4003c000
  415534:	40064000 	.word	0x40064000
  415538:	2043a068 	.word	0x2043a068
  41553c:	2043a0ac 	.word	0x2043a0ac

00415540 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  415540:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  415542:	4802      	ldr	r0, [pc, #8]	; (41554c <AFEC0_Handler+0xc>)
  415544:	4b02      	ldr	r3, [pc, #8]	; (415550 <AFEC0_Handler+0x10>)
  415546:	4798      	blx	r3
  415548:	bd08      	pop	{r3, pc}
  41554a:	bf00      	nop
  41554c:	4003c000 	.word	0x4003c000
  415550:	00415385 	.word	0x00415385

00415554 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  415554:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  415556:	4802      	ldr	r0, [pc, #8]	; (415560 <AFEC1_Handler+0xc>)
  415558:	4b02      	ldr	r3, [pc, #8]	; (415564 <AFEC1_Handler+0x10>)
  41555a:	4798      	blx	r3
  41555c:	bd08      	pop	{r3, pc}
  41555e:	bf00      	nop
  415560:	40064000 	.word	0x40064000
  415564:	00415385 	.word	0x00415385

00415568 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  415568:	b500      	push	{lr}
  41556a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  41556c:	4b13      	ldr	r3, [pc, #76]	; (4155bc <afec_enable+0x54>)
  41556e:	4298      	cmp	r0, r3
  415570:	bf0c      	ite	eq
  415572:	2028      	moveq	r0, #40	; 0x28
  415574:	201d      	movne	r0, #29
  415576:	4b12      	ldr	r3, [pc, #72]	; (4155c0 <afec_enable+0x58>)
  415578:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  41557a:	4b12      	ldr	r3, [pc, #72]	; (4155c4 <afec_enable+0x5c>)
  41557c:	789b      	ldrb	r3, [r3, #2]
  41557e:	2bff      	cmp	r3, #255	; 0xff
  415580:	d01a      	beq.n	4155b8 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  415582:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  415586:	fab3 f383 	clz	r3, r3
  41558a:	095b      	lsrs	r3, r3, #5
  41558c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  41558e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  415590:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  415594:	2200      	movs	r2, #0
  415596:	4b0c      	ldr	r3, [pc, #48]	; (4155c8 <afec_enable+0x60>)
  415598:	701a      	strb	r2, [r3, #0]
	return flags;
  41559a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  41559c:	4a09      	ldr	r2, [pc, #36]	; (4155c4 <afec_enable+0x5c>)
  41559e:	7893      	ldrb	r3, [r2, #2]
  4155a0:	3301      	adds	r3, #1
  4155a2:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4155a4:	b129      	cbz	r1, 4155b2 <afec_enable+0x4a>
		cpu_irq_enable();
  4155a6:	2201      	movs	r2, #1
  4155a8:	4b07      	ldr	r3, [pc, #28]	; (4155c8 <afec_enable+0x60>)
  4155aa:	701a      	strb	r2, [r3, #0]
  4155ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4155b0:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4155b2:	b003      	add	sp, #12
  4155b4:	f85d fb04 	ldr.w	pc, [sp], #4
  4155b8:	e7fe      	b.n	4155b8 <afec_enable+0x50>
  4155ba:	bf00      	nop
  4155bc:	40064000 	.word	0x40064000
  4155c0:	00417bc9 	.word	0x00417bc9
  4155c4:	2043a064 	.word	0x2043a064
  4155c8:	20400030 	.word	0x20400030

004155cc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4155cc:	f100 0308 	add.w	r3, r0, #8
  4155d0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4155d2:	f04f 32ff 	mov.w	r2, #4294967295
  4155d6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4155d8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4155da:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4155dc:	2300      	movs	r3, #0
  4155de:	6003      	str	r3, [r0, #0]
  4155e0:	4770      	bx	lr

004155e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4155e2:	2300      	movs	r3, #0
  4155e4:	6103      	str	r3, [r0, #16]
  4155e6:	4770      	bx	lr

004155e8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4155e8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4155ea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4155ec:	689a      	ldr	r2, [r3, #8]
  4155ee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4155f0:	689a      	ldr	r2, [r3, #8]
  4155f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4155f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4155f6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4155f8:	6803      	ldr	r3, [r0, #0]
  4155fa:	3301      	adds	r3, #1
  4155fc:	6003      	str	r3, [r0, #0]
  4155fe:	4770      	bx	lr

00415600 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  415600:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  415602:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  415604:	f1b5 3fff 	cmp.w	r5, #4294967295
  415608:	d002      	beq.n	415610 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  41560a:	f100 0208 	add.w	r2, r0, #8
  41560e:	e002      	b.n	415616 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  415610:	6902      	ldr	r2, [r0, #16]
  415612:	e004      	b.n	41561e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  415614:	461a      	mov	r2, r3
  415616:	6853      	ldr	r3, [r2, #4]
  415618:	681c      	ldr	r4, [r3, #0]
  41561a:	42a5      	cmp	r5, r4
  41561c:	d2fa      	bcs.n	415614 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  41561e:	6853      	ldr	r3, [r2, #4]
  415620:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  415622:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  415624:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  415626:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  415628:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  41562a:	6803      	ldr	r3, [r0, #0]
  41562c:	3301      	adds	r3, #1
  41562e:	6003      	str	r3, [r0, #0]
}
  415630:	bc30      	pop	{r4, r5}
  415632:	4770      	bx	lr

00415634 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  415634:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  415636:	6842      	ldr	r2, [r0, #4]
  415638:	6881      	ldr	r1, [r0, #8]
  41563a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  41563c:	6882      	ldr	r2, [r0, #8]
  41563e:	6841      	ldr	r1, [r0, #4]
  415640:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  415642:	685a      	ldr	r2, [r3, #4]
  415644:	4290      	cmp	r0, r2
  415646:	d005      	beq.n	415654 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  415648:	2200      	movs	r2, #0
  41564a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  41564c:	6818      	ldr	r0, [r3, #0]
  41564e:	3801      	subs	r0, #1
  415650:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  415652:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  415654:	6882      	ldr	r2, [r0, #8]
  415656:	605a      	str	r2, [r3, #4]
  415658:	e7f6      	b.n	415648 <uxListRemove+0x14>
	...

0041565c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  41565c:	4b0d      	ldr	r3, [pc, #52]	; (415694 <prvTaskExitError+0x38>)
  41565e:	681b      	ldr	r3, [r3, #0]
  415660:	f1b3 3fff 	cmp.w	r3, #4294967295
  415664:	d00a      	beq.n	41567c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  415666:	f04f 0380 	mov.w	r3, #128	; 0x80
  41566a:	b672      	cpsid	i
  41566c:	f383 8811 	msr	BASEPRI, r3
  415670:	f3bf 8f6f 	isb	sy
  415674:	f3bf 8f4f 	dsb	sy
  415678:	b662      	cpsie	i
  41567a:	e7fe      	b.n	41567a <prvTaskExitError+0x1e>
  41567c:	f04f 0380 	mov.w	r3, #128	; 0x80
  415680:	b672      	cpsid	i
  415682:	f383 8811 	msr	BASEPRI, r3
  415686:	f3bf 8f6f 	isb	sy
  41568a:	f3bf 8f4f 	dsb	sy
  41568e:	b662      	cpsie	i
  415690:	e7fe      	b.n	415690 <prvTaskExitError+0x34>
  415692:	bf00      	nop
  415694:	2040002c 	.word	0x2040002c

00415698 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  415698:	4806      	ldr	r0, [pc, #24]	; (4156b4 <prvPortStartFirstTask+0x1c>)
  41569a:	6800      	ldr	r0, [r0, #0]
  41569c:	6800      	ldr	r0, [r0, #0]
  41569e:	f380 8808 	msr	MSP, r0
  4156a2:	b662      	cpsie	i
  4156a4:	b661      	cpsie	f
  4156a6:	f3bf 8f4f 	dsb	sy
  4156aa:	f3bf 8f6f 	isb	sy
  4156ae:	df00      	svc	0
  4156b0:	bf00      	nop
  4156b2:	0000      	.short	0x0000
  4156b4:	e000ed08 	.word	0xe000ed08

004156b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4156b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4156c8 <vPortEnableVFP+0x10>
  4156bc:	6801      	ldr	r1, [r0, #0]
  4156be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4156c2:	6001      	str	r1, [r0, #0]
  4156c4:	4770      	bx	lr
  4156c6:	0000      	.short	0x0000
  4156c8:	e000ed88 	.word	0xe000ed88

004156cc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4156cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4156d0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4156d4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4156d8:	4b05      	ldr	r3, [pc, #20]	; (4156f0 <pxPortInitialiseStack+0x24>)
  4156da:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4156de:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4156e2:	f06f 0302 	mvn.w	r3, #2
  4156e6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4156ea:	3844      	subs	r0, #68	; 0x44
  4156ec:	4770      	bx	lr
  4156ee:	bf00      	nop
  4156f0:	0041565d 	.word	0x0041565d

004156f4 <SVC_Handler>:
	__asm volatile (
  4156f4:	4b06      	ldr	r3, [pc, #24]	; (415710 <pxCurrentTCBConst2>)
  4156f6:	6819      	ldr	r1, [r3, #0]
  4156f8:	6808      	ldr	r0, [r1, #0]
  4156fa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4156fe:	f380 8809 	msr	PSP, r0
  415702:	f3bf 8f6f 	isb	sy
  415706:	f04f 0000 	mov.w	r0, #0
  41570a:	f380 8811 	msr	BASEPRI, r0
  41570e:	4770      	bx	lr

00415710 <pxCurrentTCBConst2>:
  415710:	204143a4 	.word	0x204143a4
  415714:	4770      	bx	lr
  415716:	bf00      	nop

00415718 <vPortEnterCritical>:
  415718:	f04f 0380 	mov.w	r3, #128	; 0x80
  41571c:	b672      	cpsid	i
  41571e:	f383 8811 	msr	BASEPRI, r3
  415722:	f3bf 8f6f 	isb	sy
  415726:	f3bf 8f4f 	dsb	sy
  41572a:	b662      	cpsie	i
	uxCriticalNesting++;
  41572c:	4a0b      	ldr	r2, [pc, #44]	; (41575c <vPortEnterCritical+0x44>)
  41572e:	6813      	ldr	r3, [r2, #0]
  415730:	3301      	adds	r3, #1
  415732:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  415734:	2b01      	cmp	r3, #1
  415736:	d10f      	bne.n	415758 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  415738:	4b09      	ldr	r3, [pc, #36]	; (415760 <vPortEnterCritical+0x48>)
  41573a:	681b      	ldr	r3, [r3, #0]
  41573c:	f013 0fff 	tst.w	r3, #255	; 0xff
  415740:	d00a      	beq.n	415758 <vPortEnterCritical+0x40>
  415742:	f04f 0380 	mov.w	r3, #128	; 0x80
  415746:	b672      	cpsid	i
  415748:	f383 8811 	msr	BASEPRI, r3
  41574c:	f3bf 8f6f 	isb	sy
  415750:	f3bf 8f4f 	dsb	sy
  415754:	b662      	cpsie	i
  415756:	e7fe      	b.n	415756 <vPortEnterCritical+0x3e>
  415758:	4770      	bx	lr
  41575a:	bf00      	nop
  41575c:	2040002c 	.word	0x2040002c
  415760:	e000ed04 	.word	0xe000ed04

00415764 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  415764:	4b0a      	ldr	r3, [pc, #40]	; (415790 <vPortExitCritical+0x2c>)
  415766:	681b      	ldr	r3, [r3, #0]
  415768:	b953      	cbnz	r3, 415780 <vPortExitCritical+0x1c>
  41576a:	f04f 0380 	mov.w	r3, #128	; 0x80
  41576e:	b672      	cpsid	i
  415770:	f383 8811 	msr	BASEPRI, r3
  415774:	f3bf 8f6f 	isb	sy
  415778:	f3bf 8f4f 	dsb	sy
  41577c:	b662      	cpsie	i
  41577e:	e7fe      	b.n	41577e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  415780:	3b01      	subs	r3, #1
  415782:	4a03      	ldr	r2, [pc, #12]	; (415790 <vPortExitCritical+0x2c>)
  415784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  415786:	b90b      	cbnz	r3, 41578c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  415788:	f383 8811 	msr	BASEPRI, r3
  41578c:	4770      	bx	lr
  41578e:	bf00      	nop
  415790:	2040002c 	.word	0x2040002c

00415794 <PendSV_Handler>:
	__asm volatile
  415794:	f3ef 8009 	mrs	r0, PSP
  415798:	f3bf 8f6f 	isb	sy
  41579c:	4b15      	ldr	r3, [pc, #84]	; (4157f4 <pxCurrentTCBConst>)
  41579e:	681a      	ldr	r2, [r3, #0]
  4157a0:	f01e 0f10 	tst.w	lr, #16
  4157a4:	bf08      	it	eq
  4157a6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4157aa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4157ae:	6010      	str	r0, [r2, #0]
  4157b0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4157b4:	f04f 0080 	mov.w	r0, #128	; 0x80
  4157b8:	b672      	cpsid	i
  4157ba:	f380 8811 	msr	BASEPRI, r0
  4157be:	f3bf 8f4f 	dsb	sy
  4157c2:	f3bf 8f6f 	isb	sy
  4157c6:	b662      	cpsie	i
  4157c8:	f001 f8ac 	bl	416924 <vTaskSwitchContext>
  4157cc:	f04f 0000 	mov.w	r0, #0
  4157d0:	f380 8811 	msr	BASEPRI, r0
  4157d4:	bc08      	pop	{r3}
  4157d6:	6819      	ldr	r1, [r3, #0]
  4157d8:	6808      	ldr	r0, [r1, #0]
  4157da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4157de:	f01e 0f10 	tst.w	lr, #16
  4157e2:	bf08      	it	eq
  4157e4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4157e8:	f380 8809 	msr	PSP, r0
  4157ec:	f3bf 8f6f 	isb	sy
  4157f0:	4770      	bx	lr
  4157f2:	bf00      	nop

004157f4 <pxCurrentTCBConst>:
  4157f4:	204143a4 	.word	0x204143a4
  4157f8:	4770      	bx	lr
  4157fa:	bf00      	nop

004157fc <SysTick_Handler>:
{
  4157fc:	b508      	push	{r3, lr}
	__asm volatile
  4157fe:	f3ef 8311 	mrs	r3, BASEPRI
  415802:	f04f 0280 	mov.w	r2, #128	; 0x80
  415806:	b672      	cpsid	i
  415808:	f382 8811 	msr	BASEPRI, r2
  41580c:	f3bf 8f6f 	isb	sy
  415810:	f3bf 8f4f 	dsb	sy
  415814:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  415816:	4b05      	ldr	r3, [pc, #20]	; (41582c <SysTick_Handler+0x30>)
  415818:	4798      	blx	r3
  41581a:	b118      	cbz	r0, 415824 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  41581c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  415820:	4b03      	ldr	r3, [pc, #12]	; (415830 <SysTick_Handler+0x34>)
  415822:	601a      	str	r2, [r3, #0]
	__asm volatile
  415824:	2300      	movs	r3, #0
  415826:	f383 8811 	msr	BASEPRI, r3
  41582a:	bd08      	pop	{r3, pc}
  41582c:	00416591 	.word	0x00416591
  415830:	e000ed04 	.word	0xe000ed04

00415834 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  415834:	4a03      	ldr	r2, [pc, #12]	; (415844 <vPortSetupTimerInterrupt+0x10>)
  415836:	4b04      	ldr	r3, [pc, #16]	; (415848 <vPortSetupTimerInterrupt+0x14>)
  415838:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  41583a:	2207      	movs	r2, #7
  41583c:	3b04      	subs	r3, #4
  41583e:	601a      	str	r2, [r3, #0]
  415840:	4770      	bx	lr
  415842:	bf00      	nop
  415844:	0003a97f 	.word	0x0003a97f
  415848:	e000e014 	.word	0xe000e014

0041584c <xPortStartScheduler>:
{
  41584c:	b500      	push	{lr}
  41584e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  415850:	4b25      	ldr	r3, [pc, #148]	; (4158e8 <xPortStartScheduler+0x9c>)
  415852:	781a      	ldrb	r2, [r3, #0]
  415854:	b2d2      	uxtb	r2, r2
  415856:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  415858:	22ff      	movs	r2, #255	; 0xff
  41585a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  41585c:	781b      	ldrb	r3, [r3, #0]
  41585e:	b2db      	uxtb	r3, r3
  415860:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  415864:	f89d 3003 	ldrb.w	r3, [sp, #3]
  415868:	f003 0380 	and.w	r3, r3, #128	; 0x80
  41586c:	4a1f      	ldr	r2, [pc, #124]	; (4158ec <xPortStartScheduler+0xa0>)
  41586e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  415870:	2207      	movs	r2, #7
  415872:	4b1f      	ldr	r3, [pc, #124]	; (4158f0 <xPortStartScheduler+0xa4>)
  415874:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  415876:	f89d 3003 	ldrb.w	r3, [sp, #3]
  41587a:	f013 0f80 	tst.w	r3, #128	; 0x80
  41587e:	d010      	beq.n	4158a2 <xPortStartScheduler+0x56>
  415880:	2206      	movs	r2, #6
  415882:	e000      	b.n	415886 <xPortStartScheduler+0x3a>
  415884:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  415886:	f89d 3003 	ldrb.w	r3, [sp, #3]
  41588a:	005b      	lsls	r3, r3, #1
  41588c:	b2db      	uxtb	r3, r3
  41588e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  415892:	f89d 3003 	ldrb.w	r3, [sp, #3]
  415896:	1e51      	subs	r1, r2, #1
  415898:	f013 0f80 	tst.w	r3, #128	; 0x80
  41589c:	d1f2      	bne.n	415884 <xPortStartScheduler+0x38>
  41589e:	4b14      	ldr	r3, [pc, #80]	; (4158f0 <xPortStartScheduler+0xa4>)
  4158a0:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4158a2:	4a13      	ldr	r2, [pc, #76]	; (4158f0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4158a4:	6813      	ldr	r3, [r2, #0]
  4158a6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4158a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4158ac:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4158ae:	9b01      	ldr	r3, [sp, #4]
  4158b0:	b2db      	uxtb	r3, r3
  4158b2:	4a0d      	ldr	r2, [pc, #52]	; (4158e8 <xPortStartScheduler+0x9c>)
  4158b4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4158b6:	4b0f      	ldr	r3, [pc, #60]	; (4158f4 <xPortStartScheduler+0xa8>)
  4158b8:	681a      	ldr	r2, [r3, #0]
  4158ba:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4158be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4158c0:	681a      	ldr	r2, [r3, #0]
  4158c2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4158c6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4158c8:	4b0b      	ldr	r3, [pc, #44]	; (4158f8 <xPortStartScheduler+0xac>)
  4158ca:	4798      	blx	r3
	uxCriticalNesting = 0;
  4158cc:	2200      	movs	r2, #0
  4158ce:	4b0b      	ldr	r3, [pc, #44]	; (4158fc <xPortStartScheduler+0xb0>)
  4158d0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4158d2:	4b0b      	ldr	r3, [pc, #44]	; (415900 <xPortStartScheduler+0xb4>)
  4158d4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4158d6:	4a0b      	ldr	r2, [pc, #44]	; (415904 <xPortStartScheduler+0xb8>)
  4158d8:	6813      	ldr	r3, [r2, #0]
  4158da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4158de:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4158e0:	4b09      	ldr	r3, [pc, #36]	; (415908 <xPortStartScheduler+0xbc>)
  4158e2:	4798      	blx	r3
	prvTaskExitError();
  4158e4:	4b09      	ldr	r3, [pc, #36]	; (41590c <xPortStartScheduler+0xc0>)
  4158e6:	4798      	blx	r3
  4158e8:	e000e400 	.word	0xe000e400
  4158ec:	20408b94 	.word	0x20408b94
  4158f0:	20408b98 	.word	0x20408b98
  4158f4:	e000ed20 	.word	0xe000ed20
  4158f8:	00415835 	.word	0x00415835
  4158fc:	2040002c 	.word	0x2040002c
  415900:	004156b9 	.word	0x004156b9
  415904:	e000ef34 	.word	0xe000ef34
  415908:	00415699 	.word	0x00415699
  41590c:	0041565d 	.word	0x0041565d

00415910 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  415910:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  415914:	2b0f      	cmp	r3, #15
  415916:	d911      	bls.n	41593c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  415918:	4a12      	ldr	r2, [pc, #72]	; (415964 <vPortValidateInterruptPriority+0x54>)
  41591a:	5c9b      	ldrb	r3, [r3, r2]
  41591c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  41591e:	4a12      	ldr	r2, [pc, #72]	; (415968 <vPortValidateInterruptPriority+0x58>)
  415920:	7812      	ldrb	r2, [r2, #0]
  415922:	429a      	cmp	r2, r3
  415924:	d90a      	bls.n	41593c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  415926:	f04f 0380 	mov.w	r3, #128	; 0x80
  41592a:	b672      	cpsid	i
  41592c:	f383 8811 	msr	BASEPRI, r3
  415930:	f3bf 8f6f 	isb	sy
  415934:	f3bf 8f4f 	dsb	sy
  415938:	b662      	cpsie	i
  41593a:	e7fe      	b.n	41593a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  41593c:	4b0b      	ldr	r3, [pc, #44]	; (41596c <vPortValidateInterruptPriority+0x5c>)
  41593e:	681b      	ldr	r3, [r3, #0]
  415940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  415944:	4a0a      	ldr	r2, [pc, #40]	; (415970 <vPortValidateInterruptPriority+0x60>)
  415946:	6812      	ldr	r2, [r2, #0]
  415948:	4293      	cmp	r3, r2
  41594a:	d90a      	bls.n	415962 <vPortValidateInterruptPriority+0x52>
  41594c:	f04f 0380 	mov.w	r3, #128	; 0x80
  415950:	b672      	cpsid	i
  415952:	f383 8811 	msr	BASEPRI, r3
  415956:	f3bf 8f6f 	isb	sy
  41595a:	f3bf 8f4f 	dsb	sy
  41595e:	b662      	cpsie	i
  415960:	e7fe      	b.n	415960 <vPortValidateInterruptPriority+0x50>
  415962:	4770      	bx	lr
  415964:	e000e3f0 	.word	0xe000e3f0
  415968:	20408b94 	.word	0x20408b94
  41596c:	e000ed0c 	.word	0xe000ed0c
  415970:	20408b98 	.word	0x20408b98

00415974 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  415974:	b538      	push	{r3, r4, r5, lr}
  415976:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  415978:	f010 0f07 	tst.w	r0, #7
  41597c:	d002      	beq.n	415984 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  41597e:	f020 0407 	bic.w	r4, r0, #7
  415982:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  415984:	4b11      	ldr	r3, [pc, #68]	; (4159cc <pvPortMalloc+0x58>)
  415986:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  415988:	4b11      	ldr	r3, [pc, #68]	; (4159d0 <pvPortMalloc+0x5c>)
  41598a:	681b      	ldr	r3, [r3, #0]
  41598c:	b193      	cbz	r3, 4159b4 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  41598e:	4b11      	ldr	r3, [pc, #68]	; (4159d4 <pvPortMalloc+0x60>)
  415990:	681b      	ldr	r3, [r3, #0]
  415992:	441c      	add	r4, r3
  415994:	42a3      	cmp	r3, r4
  415996:	d213      	bcs.n	4159c0 <pvPortMalloc+0x4c>
  415998:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  41599c:	4294      	cmp	r4, r2
  41599e:	d80f      	bhi.n	4159c0 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4159a0:	4a0b      	ldr	r2, [pc, #44]	; (4159d0 <pvPortMalloc+0x5c>)
  4159a2:	6815      	ldr	r5, [r2, #0]
  4159a4:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4159a6:	4b0b      	ldr	r3, [pc, #44]	; (4159d4 <pvPortMalloc+0x60>)
  4159a8:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4159aa:	4b0b      	ldr	r3, [pc, #44]	; (4159d8 <pvPortMalloc+0x64>)
  4159ac:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4159ae:	b14d      	cbz	r5, 4159c4 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4159b0:	4628      	mov	r0, r5
  4159b2:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4159b4:	4b09      	ldr	r3, [pc, #36]	; (4159dc <pvPortMalloc+0x68>)
  4159b6:	f023 0307 	bic.w	r3, r3, #7
  4159ba:	4a05      	ldr	r2, [pc, #20]	; (4159d0 <pvPortMalloc+0x5c>)
  4159bc:	6013      	str	r3, [r2, #0]
  4159be:	e7e6      	b.n	41598e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4159c0:	4b05      	ldr	r3, [pc, #20]	; (4159d8 <pvPortMalloc+0x64>)
  4159c2:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4159c4:	4b06      	ldr	r3, [pc, #24]	; (4159e0 <pvPortMalloc+0x6c>)
  4159c6:	4798      	blx	r3
  4159c8:	2500      	movs	r5, #0
	return pvReturn;
  4159ca:	e7f1      	b.n	4159b0 <pvPortMalloc+0x3c>
  4159cc:	00416575 	.word	0x00416575
  4159d0:	20408b9c 	.word	0x20408b9c
  4159d4:	204143a0 	.word	0x204143a0
  4159d8:	004166dd 	.word	0x004166dd
  4159dc:	20408ba8 	.word	0x20408ba8
  4159e0:	004184cf 	.word	0x004184cf

004159e4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4159e4:	b150      	cbz	r0, 4159fc <vPortFree+0x18>
  4159e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4159ea:	b672      	cpsid	i
  4159ec:	f383 8811 	msr	BASEPRI, r3
  4159f0:	f3bf 8f6f 	isb	sy
  4159f4:	f3bf 8f4f 	dsb	sy
  4159f8:	b662      	cpsie	i
  4159fa:	e7fe      	b.n	4159fa <vPortFree+0x16>
  4159fc:	4770      	bx	lr
	...

00415a00 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  415a00:	b538      	push	{r3, r4, r5, lr}
  415a02:	4604      	mov	r4, r0
  415a04:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  415a06:	6c02      	ldr	r2, [r0, #64]	; 0x40
  415a08:	b95a      	cbnz	r2, 415a22 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  415a0a:	6803      	ldr	r3, [r0, #0]
  415a0c:	2b00      	cmp	r3, #0
  415a0e:	d12e      	bne.n	415a6e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  415a10:	6840      	ldr	r0, [r0, #4]
  415a12:	4b1b      	ldr	r3, [pc, #108]	; (415a80 <prvCopyDataToQueue+0x80>)
  415a14:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  415a16:	2300      	movs	r3, #0
  415a18:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  415a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  415a1c:	3301      	adds	r3, #1
  415a1e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  415a20:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  415a22:	b96d      	cbnz	r5, 415a40 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  415a24:	6880      	ldr	r0, [r0, #8]
  415a26:	4b17      	ldr	r3, [pc, #92]	; (415a84 <prvCopyDataToQueue+0x84>)
  415a28:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  415a2a:	68a3      	ldr	r3, [r4, #8]
  415a2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  415a2e:	4413      	add	r3, r2
  415a30:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  415a32:	6862      	ldr	r2, [r4, #4]
  415a34:	4293      	cmp	r3, r2
  415a36:	d31c      	bcc.n	415a72 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  415a38:	6823      	ldr	r3, [r4, #0]
  415a3a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  415a3c:	2000      	movs	r0, #0
  415a3e:	e7ec      	b.n	415a1a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  415a40:	68c0      	ldr	r0, [r0, #12]
  415a42:	4b10      	ldr	r3, [pc, #64]	; (415a84 <prvCopyDataToQueue+0x84>)
  415a44:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  415a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
  415a48:	425b      	negs	r3, r3
  415a4a:	68e2      	ldr	r2, [r4, #12]
  415a4c:	441a      	add	r2, r3
  415a4e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  415a50:	6821      	ldr	r1, [r4, #0]
  415a52:	428a      	cmp	r2, r1
  415a54:	d202      	bcs.n	415a5c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  415a56:	6862      	ldr	r2, [r4, #4]
  415a58:	4413      	add	r3, r2
  415a5a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  415a5c:	2d02      	cmp	r5, #2
  415a5e:	d10a      	bne.n	415a76 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  415a60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  415a62:	b153      	cbz	r3, 415a7a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  415a64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  415a66:	3b01      	subs	r3, #1
  415a68:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  415a6a:	2000      	movs	r0, #0
  415a6c:	e7d5      	b.n	415a1a <prvCopyDataToQueue+0x1a>
  415a6e:	2000      	movs	r0, #0
  415a70:	e7d3      	b.n	415a1a <prvCopyDataToQueue+0x1a>
  415a72:	2000      	movs	r0, #0
  415a74:	e7d1      	b.n	415a1a <prvCopyDataToQueue+0x1a>
  415a76:	2000      	movs	r0, #0
  415a78:	e7cf      	b.n	415a1a <prvCopyDataToQueue+0x1a>
  415a7a:	2000      	movs	r0, #0
  415a7c:	e7cd      	b.n	415a1a <prvCopyDataToQueue+0x1a>
  415a7e:	bf00      	nop
  415a80:	00416d25 	.word	0x00416d25
  415a84:	004192cd 	.word	0x004192cd

00415a88 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  415a88:	b530      	push	{r4, r5, lr}
  415a8a:	b083      	sub	sp, #12
  415a8c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  415a8e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  415a90:	b174      	cbz	r4, 415ab0 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  415a92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  415a94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  415a96:	429a      	cmp	r2, r3
  415a98:	d315      	bcc.n	415ac6 <prvNotifyQueueSetContainer+0x3e>
  415a9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  415a9e:	b672      	cpsid	i
  415aa0:	f383 8811 	msr	BASEPRI, r3
  415aa4:	f3bf 8f6f 	isb	sy
  415aa8:	f3bf 8f4f 	dsb	sy
  415aac:	b662      	cpsie	i
  415aae:	e7fe      	b.n	415aae <prvNotifyQueueSetContainer+0x26>
  415ab0:	f04f 0380 	mov.w	r3, #128	; 0x80
  415ab4:	b672      	cpsid	i
  415ab6:	f383 8811 	msr	BASEPRI, r3
  415aba:	f3bf 8f6f 	isb	sy
  415abe:	f3bf 8f4f 	dsb	sy
  415ac2:	b662      	cpsie	i
  415ac4:	e7fe      	b.n	415ac4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  415ac6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  415ac8:	4293      	cmp	r3, r2
  415aca:	d803      	bhi.n	415ad4 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  415acc:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  415ace:	4628      	mov	r0, r5
  415ad0:	b003      	add	sp, #12
  415ad2:	bd30      	pop	{r4, r5, pc}
  415ad4:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  415ad6:	a901      	add	r1, sp, #4
  415ad8:	4620      	mov	r0, r4
  415ada:	4b0b      	ldr	r3, [pc, #44]	; (415b08 <prvNotifyQueueSetContainer+0x80>)
  415adc:	4798      	blx	r3
  415ade:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  415ae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
  415ae6:	d10a      	bne.n	415afe <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  415ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  415aea:	2b00      	cmp	r3, #0
  415aec:	d0ef      	beq.n	415ace <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  415aee:	f104 0024 	add.w	r0, r4, #36	; 0x24
  415af2:	4b06      	ldr	r3, [pc, #24]	; (415b0c <prvNotifyQueueSetContainer+0x84>)
  415af4:	4798      	blx	r3
  415af6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  415af8:	bf18      	it	ne
  415afa:	2501      	movne	r5, #1
  415afc:	e7e7      	b.n	415ace <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  415afe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415b00:	3301      	adds	r3, #1
  415b02:	64a3      	str	r3, [r4, #72]	; 0x48
  415b04:	e7e3      	b.n	415ace <prvNotifyQueueSetContainer+0x46>
  415b06:	bf00      	nop
  415b08:	00415a01 	.word	0x00415a01
  415b0c:	00416af9 	.word	0x00416af9

00415b10 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  415b10:	6c02      	ldr	r2, [r0, #64]	; 0x40
  415b12:	b172      	cbz	r2, 415b32 <prvCopyDataFromQueue+0x22>
{
  415b14:	b510      	push	{r4, lr}
  415b16:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  415b18:	68c4      	ldr	r4, [r0, #12]
  415b1a:	4414      	add	r4, r2
  415b1c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  415b1e:	6840      	ldr	r0, [r0, #4]
  415b20:	4284      	cmp	r4, r0
  415b22:	d301      	bcc.n	415b28 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  415b24:	6818      	ldr	r0, [r3, #0]
  415b26:	60d8      	str	r0, [r3, #12]
  415b28:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  415b2a:	68d9      	ldr	r1, [r3, #12]
  415b2c:	4b01      	ldr	r3, [pc, #4]	; (415b34 <prvCopyDataFromQueue+0x24>)
  415b2e:	4798      	blx	r3
  415b30:	bd10      	pop	{r4, pc}
  415b32:	4770      	bx	lr
  415b34:	004192cd 	.word	0x004192cd

00415b38 <prvUnlockQueue>:
{
  415b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  415b3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  415b3c:	4b22      	ldr	r3, [pc, #136]	; (415bc8 <prvUnlockQueue+0x90>)
  415b3e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  415b40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415b42:	2b00      	cmp	r3, #0
  415b44:	dd1b      	ble.n	415b7e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  415b46:	4d21      	ldr	r5, [pc, #132]	; (415bcc <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  415b48:	4f21      	ldr	r7, [pc, #132]	; (415bd0 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  415b4a:	4e22      	ldr	r6, [pc, #136]	; (415bd4 <prvUnlockQueue+0x9c>)
  415b4c:	e00b      	b.n	415b66 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  415b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  415b50:	b1ab      	cbz	r3, 415b7e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  415b52:	f104 0024 	add.w	r0, r4, #36	; 0x24
  415b56:	47b0      	blx	r6
  415b58:	b978      	cbnz	r0, 415b7a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  415b5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415b5c:	3b01      	subs	r3, #1
  415b5e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  415b60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415b62:	2b00      	cmp	r3, #0
  415b64:	dd0b      	ble.n	415b7e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  415b66:	6d63      	ldr	r3, [r4, #84]	; 0x54
  415b68:	2b00      	cmp	r3, #0
  415b6a:	d0f0      	beq.n	415b4e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  415b6c:	2100      	movs	r1, #0
  415b6e:	4620      	mov	r0, r4
  415b70:	47a8      	blx	r5
  415b72:	2801      	cmp	r0, #1
  415b74:	d1f1      	bne.n	415b5a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  415b76:	47b8      	blx	r7
  415b78:	e7ef      	b.n	415b5a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  415b7a:	47b8      	blx	r7
  415b7c:	e7ed      	b.n	415b5a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  415b7e:	f04f 33ff 	mov.w	r3, #4294967295
  415b82:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  415b84:	4b14      	ldr	r3, [pc, #80]	; (415bd8 <prvUnlockQueue+0xa0>)
  415b86:	4798      	blx	r3
	taskENTER_CRITICAL();
  415b88:	4b0f      	ldr	r3, [pc, #60]	; (415bc8 <prvUnlockQueue+0x90>)
  415b8a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  415b8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  415b8e:	2b00      	cmp	r3, #0
  415b90:	dd14      	ble.n	415bbc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  415b92:	6923      	ldr	r3, [r4, #16]
  415b94:	b193      	cbz	r3, 415bbc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  415b96:	f104 0610 	add.w	r6, r4, #16
  415b9a:	4d0e      	ldr	r5, [pc, #56]	; (415bd4 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  415b9c:	4f0c      	ldr	r7, [pc, #48]	; (415bd0 <prvUnlockQueue+0x98>)
  415b9e:	e007      	b.n	415bb0 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  415ba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  415ba2:	3b01      	subs	r3, #1
  415ba4:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  415ba6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  415ba8:	2b00      	cmp	r3, #0
  415baa:	dd07      	ble.n	415bbc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  415bac:	6923      	ldr	r3, [r4, #16]
  415bae:	b12b      	cbz	r3, 415bbc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  415bb0:	4630      	mov	r0, r6
  415bb2:	47a8      	blx	r5
  415bb4:	2800      	cmp	r0, #0
  415bb6:	d0f3      	beq.n	415ba0 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  415bb8:	47b8      	blx	r7
  415bba:	e7f1      	b.n	415ba0 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  415bbc:	f04f 33ff 	mov.w	r3, #4294967295
  415bc0:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  415bc2:	4b05      	ldr	r3, [pc, #20]	; (415bd8 <prvUnlockQueue+0xa0>)
  415bc4:	4798      	blx	r3
  415bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  415bc8:	00415719 	.word	0x00415719
  415bcc:	00415a89 	.word	0x00415a89
  415bd0:	00416c55 	.word	0x00416c55
  415bd4:	00416af9 	.word	0x00416af9
  415bd8:	00415765 	.word	0x00415765

00415bdc <xQueueGenericReset>:
{
  415bdc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  415bde:	b308      	cbz	r0, 415c24 <xQueueGenericReset+0x48>
  415be0:	4604      	mov	r4, r0
  415be2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  415be4:	4b1d      	ldr	r3, [pc, #116]	; (415c5c <xQueueGenericReset+0x80>)
  415be6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  415be8:	6822      	ldr	r2, [r4, #0]
  415bea:	6c21      	ldr	r1, [r4, #64]	; 0x40
  415bec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  415bee:	fb03 f301 	mul.w	r3, r3, r1
  415bf2:	18d0      	adds	r0, r2, r3
  415bf4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  415bf6:	2000      	movs	r0, #0
  415bf8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  415bfa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  415bfc:	1a5b      	subs	r3, r3, r1
  415bfe:	4413      	add	r3, r2
  415c00:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  415c02:	f04f 33ff 	mov.w	r3, #4294967295
  415c06:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  415c08:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  415c0a:	b9fd      	cbnz	r5, 415c4c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  415c0c:	6923      	ldr	r3, [r4, #16]
  415c0e:	b12b      	cbz	r3, 415c1c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  415c10:	f104 0010 	add.w	r0, r4, #16
  415c14:	4b12      	ldr	r3, [pc, #72]	; (415c60 <xQueueGenericReset+0x84>)
  415c16:	4798      	blx	r3
  415c18:	2801      	cmp	r0, #1
  415c1a:	d00e      	beq.n	415c3a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  415c1c:	4b11      	ldr	r3, [pc, #68]	; (415c64 <xQueueGenericReset+0x88>)
  415c1e:	4798      	blx	r3
}
  415c20:	2001      	movs	r0, #1
  415c22:	bd38      	pop	{r3, r4, r5, pc}
  415c24:	f04f 0380 	mov.w	r3, #128	; 0x80
  415c28:	b672      	cpsid	i
  415c2a:	f383 8811 	msr	BASEPRI, r3
  415c2e:	f3bf 8f6f 	isb	sy
  415c32:	f3bf 8f4f 	dsb	sy
  415c36:	b662      	cpsie	i
  415c38:	e7fe      	b.n	415c38 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  415c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  415c3e:	4b0a      	ldr	r3, [pc, #40]	; (415c68 <xQueueGenericReset+0x8c>)
  415c40:	601a      	str	r2, [r3, #0]
  415c42:	f3bf 8f4f 	dsb	sy
  415c46:	f3bf 8f6f 	isb	sy
  415c4a:	e7e7      	b.n	415c1c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  415c4c:	f104 0010 	add.w	r0, r4, #16
  415c50:	4d06      	ldr	r5, [pc, #24]	; (415c6c <xQueueGenericReset+0x90>)
  415c52:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  415c54:	f104 0024 	add.w	r0, r4, #36	; 0x24
  415c58:	47a8      	blx	r5
  415c5a:	e7df      	b.n	415c1c <xQueueGenericReset+0x40>
  415c5c:	00415719 	.word	0x00415719
  415c60:	00416af9 	.word	0x00416af9
  415c64:	00415765 	.word	0x00415765
  415c68:	e000ed04 	.word	0xe000ed04
  415c6c:	004155cd 	.word	0x004155cd

00415c70 <xQueueGenericCreate>:
{
  415c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  415c72:	b950      	cbnz	r0, 415c8a <xQueueGenericCreate+0x1a>
  415c74:	f04f 0380 	mov.w	r3, #128	; 0x80
  415c78:	b672      	cpsid	i
  415c7a:	f383 8811 	msr	BASEPRI, r3
  415c7e:	f3bf 8f6f 	isb	sy
  415c82:	f3bf 8f4f 	dsb	sy
  415c86:	b662      	cpsie	i
  415c88:	e7fe      	b.n	415c88 <xQueueGenericCreate+0x18>
  415c8a:	4606      	mov	r6, r0
  415c8c:	4617      	mov	r7, r2
  415c8e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  415c90:	b189      	cbz	r1, 415cb6 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  415c92:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  415c96:	3059      	adds	r0, #89	; 0x59
  415c98:	4b12      	ldr	r3, [pc, #72]	; (415ce4 <xQueueGenericCreate+0x74>)
  415c9a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  415c9c:	4604      	mov	r4, r0
  415c9e:	b9e8      	cbnz	r0, 415cdc <xQueueGenericCreate+0x6c>
  415ca0:	f04f 0380 	mov.w	r3, #128	; 0x80
  415ca4:	b672      	cpsid	i
  415ca6:	f383 8811 	msr	BASEPRI, r3
  415caa:	f3bf 8f6f 	isb	sy
  415cae:	f3bf 8f4f 	dsb	sy
  415cb2:	b662      	cpsie	i
  415cb4:	e7fe      	b.n	415cb4 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  415cb6:	2058      	movs	r0, #88	; 0x58
  415cb8:	4b0a      	ldr	r3, [pc, #40]	; (415ce4 <xQueueGenericCreate+0x74>)
  415cba:	4798      	blx	r3
	if( pxNewQueue != NULL )
  415cbc:	4604      	mov	r4, r0
  415cbe:	2800      	cmp	r0, #0
  415cc0:	d0ee      	beq.n	415ca0 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  415cc2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  415cc4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  415cc6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  415cc8:	2101      	movs	r1, #1
  415cca:	4620      	mov	r0, r4
  415ccc:	4b06      	ldr	r3, [pc, #24]	; (415ce8 <xQueueGenericCreate+0x78>)
  415cce:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  415cd0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  415cd4:	2300      	movs	r3, #0
  415cd6:	6563      	str	r3, [r4, #84]	; 0x54
}
  415cd8:	4620      	mov	r0, r4
  415cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  415cdc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  415ce0:	6003      	str	r3, [r0, #0]
  415ce2:	e7ef      	b.n	415cc4 <xQueueGenericCreate+0x54>
  415ce4:	00415975 	.word	0x00415975
  415ce8:	00415bdd 	.word	0x00415bdd

00415cec <xQueueGenericSend>:
{
  415cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  415cf0:	b085      	sub	sp, #20
  415cf2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  415cf4:	b1b8      	cbz	r0, 415d26 <xQueueGenericSend+0x3a>
  415cf6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  415cf8:	b301      	cbz	r1, 415d3c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  415cfa:	2b02      	cmp	r3, #2
  415cfc:	d02c      	beq.n	415d58 <xQueueGenericSend+0x6c>
  415cfe:	461d      	mov	r5, r3
  415d00:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  415d02:	4b66      	ldr	r3, [pc, #408]	; (415e9c <xQueueGenericSend+0x1b0>)
  415d04:	4798      	blx	r3
  415d06:	2800      	cmp	r0, #0
  415d08:	d134      	bne.n	415d74 <xQueueGenericSend+0x88>
  415d0a:	9b01      	ldr	r3, [sp, #4]
  415d0c:	2b00      	cmp	r3, #0
  415d0e:	d038      	beq.n	415d82 <xQueueGenericSend+0x96>
  415d10:	f04f 0380 	mov.w	r3, #128	; 0x80
  415d14:	b672      	cpsid	i
  415d16:	f383 8811 	msr	BASEPRI, r3
  415d1a:	f3bf 8f6f 	isb	sy
  415d1e:	f3bf 8f4f 	dsb	sy
  415d22:	b662      	cpsie	i
  415d24:	e7fe      	b.n	415d24 <xQueueGenericSend+0x38>
  415d26:	f04f 0380 	mov.w	r3, #128	; 0x80
  415d2a:	b672      	cpsid	i
  415d2c:	f383 8811 	msr	BASEPRI, r3
  415d30:	f3bf 8f6f 	isb	sy
  415d34:	f3bf 8f4f 	dsb	sy
  415d38:	b662      	cpsie	i
  415d3a:	e7fe      	b.n	415d3a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  415d3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  415d3e:	2a00      	cmp	r2, #0
  415d40:	d0db      	beq.n	415cfa <xQueueGenericSend+0xe>
  415d42:	f04f 0380 	mov.w	r3, #128	; 0x80
  415d46:	b672      	cpsid	i
  415d48:	f383 8811 	msr	BASEPRI, r3
  415d4c:	f3bf 8f6f 	isb	sy
  415d50:	f3bf 8f4f 	dsb	sy
  415d54:	b662      	cpsie	i
  415d56:	e7fe      	b.n	415d56 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  415d58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  415d5a:	2a01      	cmp	r2, #1
  415d5c:	d0cf      	beq.n	415cfe <xQueueGenericSend+0x12>
  415d5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  415d62:	b672      	cpsid	i
  415d64:	f383 8811 	msr	BASEPRI, r3
  415d68:	f3bf 8f6f 	isb	sy
  415d6c:	f3bf 8f4f 	dsb	sy
  415d70:	b662      	cpsie	i
  415d72:	e7fe      	b.n	415d72 <xQueueGenericSend+0x86>
  415d74:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  415d76:	4e4a      	ldr	r6, [pc, #296]	; (415ea0 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  415d78:	f8df a150 	ldr.w	sl, [pc, #336]	; 415ecc <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  415d7c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 415eac <xQueueGenericSend+0x1c0>
  415d80:	e042      	b.n	415e08 <xQueueGenericSend+0x11c>
  415d82:	2700      	movs	r7, #0
  415d84:	e7f7      	b.n	415d76 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  415d86:	462a      	mov	r2, r5
  415d88:	4641      	mov	r1, r8
  415d8a:	4620      	mov	r0, r4
  415d8c:	4b45      	ldr	r3, [pc, #276]	; (415ea4 <xQueueGenericSend+0x1b8>)
  415d8e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  415d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
  415d92:	b19b      	cbz	r3, 415dbc <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  415d94:	4629      	mov	r1, r5
  415d96:	4620      	mov	r0, r4
  415d98:	4b43      	ldr	r3, [pc, #268]	; (415ea8 <xQueueGenericSend+0x1bc>)
  415d9a:	4798      	blx	r3
  415d9c:	2801      	cmp	r0, #1
  415d9e:	d107      	bne.n	415db0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  415da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  415da4:	4b41      	ldr	r3, [pc, #260]	; (415eac <xQueueGenericSend+0x1c0>)
  415da6:	601a      	str	r2, [r3, #0]
  415da8:	f3bf 8f4f 	dsb	sy
  415dac:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  415db0:	4b3f      	ldr	r3, [pc, #252]	; (415eb0 <xQueueGenericSend+0x1c4>)
  415db2:	4798      	blx	r3
				return pdPASS;
  415db4:	2001      	movs	r0, #1
}
  415db6:	b005      	add	sp, #20
  415db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  415dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  415dbe:	b173      	cbz	r3, 415dde <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  415dc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  415dc4:	4b3b      	ldr	r3, [pc, #236]	; (415eb4 <xQueueGenericSend+0x1c8>)
  415dc6:	4798      	blx	r3
  415dc8:	2801      	cmp	r0, #1
  415dca:	d1f1      	bne.n	415db0 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  415dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  415dd0:	4b36      	ldr	r3, [pc, #216]	; (415eac <xQueueGenericSend+0x1c0>)
  415dd2:	601a      	str	r2, [r3, #0]
  415dd4:	f3bf 8f4f 	dsb	sy
  415dd8:	f3bf 8f6f 	isb	sy
  415ddc:	e7e8      	b.n	415db0 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  415dde:	2800      	cmp	r0, #0
  415de0:	d0e6      	beq.n	415db0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  415de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  415de6:	4b31      	ldr	r3, [pc, #196]	; (415eac <xQueueGenericSend+0x1c0>)
  415de8:	601a      	str	r2, [r3, #0]
  415dea:	f3bf 8f4f 	dsb	sy
  415dee:	f3bf 8f6f 	isb	sy
  415df2:	e7dd      	b.n	415db0 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  415df4:	4b2e      	ldr	r3, [pc, #184]	; (415eb0 <xQueueGenericSend+0x1c4>)
  415df6:	4798      	blx	r3
					return errQUEUE_FULL;
  415df8:	2000      	movs	r0, #0
  415dfa:	e7dc      	b.n	415db6 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  415dfc:	4620      	mov	r0, r4
  415dfe:	4b2e      	ldr	r3, [pc, #184]	; (415eb8 <xQueueGenericSend+0x1cc>)
  415e00:	4798      	blx	r3
				( void ) xTaskResumeAll();
  415e02:	4b2e      	ldr	r3, [pc, #184]	; (415ebc <xQueueGenericSend+0x1d0>)
  415e04:	4798      	blx	r3
  415e06:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  415e08:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  415e0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  415e0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  415e0e:	429a      	cmp	r2, r3
  415e10:	d3b9      	bcc.n	415d86 <xQueueGenericSend+0x9a>
  415e12:	2d02      	cmp	r5, #2
  415e14:	d0b7      	beq.n	415d86 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  415e16:	9b01      	ldr	r3, [sp, #4]
  415e18:	2b00      	cmp	r3, #0
  415e1a:	d0eb      	beq.n	415df4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  415e1c:	b90f      	cbnz	r7, 415e22 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  415e1e:	a802      	add	r0, sp, #8
  415e20:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  415e22:	4b23      	ldr	r3, [pc, #140]	; (415eb0 <xQueueGenericSend+0x1c4>)
  415e24:	4798      	blx	r3
		vTaskSuspendAll();
  415e26:	4b26      	ldr	r3, [pc, #152]	; (415ec0 <xQueueGenericSend+0x1d4>)
  415e28:	4798      	blx	r3
		prvLockQueue( pxQueue );
  415e2a:	47b0      	blx	r6
  415e2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  415e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
  415e32:	d101      	bne.n	415e38 <xQueueGenericSend+0x14c>
  415e34:	2300      	movs	r3, #0
  415e36:	6463      	str	r3, [r4, #68]	; 0x44
  415e38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
  415e3e:	d101      	bne.n	415e44 <xQueueGenericSend+0x158>
  415e40:	2300      	movs	r3, #0
  415e42:	64a3      	str	r3, [r4, #72]	; 0x48
  415e44:	4b1a      	ldr	r3, [pc, #104]	; (415eb0 <xQueueGenericSend+0x1c4>)
  415e46:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  415e48:	a901      	add	r1, sp, #4
  415e4a:	a802      	add	r0, sp, #8
  415e4c:	4b1d      	ldr	r3, [pc, #116]	; (415ec4 <xQueueGenericSend+0x1d8>)
  415e4e:	4798      	blx	r3
  415e50:	b9e0      	cbnz	r0, 415e8c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  415e52:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  415e54:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  415e58:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  415e5a:	4b15      	ldr	r3, [pc, #84]	; (415eb0 <xQueueGenericSend+0x1c4>)
  415e5c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  415e5e:	45bb      	cmp	fp, r7
  415e60:	d1cc      	bne.n	415dfc <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  415e62:	9901      	ldr	r1, [sp, #4]
  415e64:	f104 0010 	add.w	r0, r4, #16
  415e68:	4b17      	ldr	r3, [pc, #92]	; (415ec8 <xQueueGenericSend+0x1dc>)
  415e6a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  415e6c:	4620      	mov	r0, r4
  415e6e:	4b12      	ldr	r3, [pc, #72]	; (415eb8 <xQueueGenericSend+0x1cc>)
  415e70:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  415e72:	4b12      	ldr	r3, [pc, #72]	; (415ebc <xQueueGenericSend+0x1d0>)
  415e74:	4798      	blx	r3
  415e76:	2800      	cmp	r0, #0
  415e78:	d1c5      	bne.n	415e06 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  415e7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  415e7e:	f8c9 3000 	str.w	r3, [r9]
  415e82:	f3bf 8f4f 	dsb	sy
  415e86:	f3bf 8f6f 	isb	sy
  415e8a:	e7bc      	b.n	415e06 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  415e8c:	4620      	mov	r0, r4
  415e8e:	4b0a      	ldr	r3, [pc, #40]	; (415eb8 <xQueueGenericSend+0x1cc>)
  415e90:	4798      	blx	r3
			( void ) xTaskResumeAll();
  415e92:	4b0a      	ldr	r3, [pc, #40]	; (415ebc <xQueueGenericSend+0x1d0>)
  415e94:	4798      	blx	r3
			return errQUEUE_FULL;
  415e96:	2000      	movs	r0, #0
  415e98:	e78d      	b.n	415db6 <xQueueGenericSend+0xca>
  415e9a:	bf00      	nop
  415e9c:	00416c61 	.word	0x00416c61
  415ea0:	00415719 	.word	0x00415719
  415ea4:	00415a01 	.word	0x00415a01
  415ea8:	00415a89 	.word	0x00415a89
  415eac:	e000ed04 	.word	0xe000ed04
  415eb0:	00415765 	.word	0x00415765
  415eb4:	00416af9 	.word	0x00416af9
  415eb8:	00415b39 	.word	0x00415b39
  415ebc:	004166dd 	.word	0x004166dd
  415ec0:	00416575 	.word	0x00416575
  415ec4:	00416bc1 	.word	0x00416bc1
  415ec8:	004169f5 	.word	0x004169f5
  415ecc:	00416b91 	.word	0x00416b91

00415ed0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  415ed0:	2800      	cmp	r0, #0
  415ed2:	d036      	beq.n	415f42 <xQueueGenericSendFromISR+0x72>
{
  415ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415ed8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  415eda:	2900      	cmp	r1, #0
  415edc:	d03c      	beq.n	415f58 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  415ede:	2b02      	cmp	r3, #2
  415ee0:	d048      	beq.n	415f74 <xQueueGenericSendFromISR+0xa4>
  415ee2:	461e      	mov	r6, r3
  415ee4:	4615      	mov	r5, r2
  415ee6:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  415ee8:	4b35      	ldr	r3, [pc, #212]	; (415fc0 <xQueueGenericSendFromISR+0xf0>)
  415eea:	4798      	blx	r3
	__asm volatile
  415eec:	f3ef 8711 	mrs	r7, BASEPRI
  415ef0:	f04f 0380 	mov.w	r3, #128	; 0x80
  415ef4:	b672      	cpsid	i
  415ef6:	f383 8811 	msr	BASEPRI, r3
  415efa:	f3bf 8f6f 	isb	sy
  415efe:	f3bf 8f4f 	dsb	sy
  415f02:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  415f04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  415f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  415f08:	429a      	cmp	r2, r3
  415f0a:	d301      	bcc.n	415f10 <xQueueGenericSendFromISR+0x40>
  415f0c:	2e02      	cmp	r6, #2
  415f0e:	d14f      	bne.n	415fb0 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  415f10:	4632      	mov	r2, r6
  415f12:	4641      	mov	r1, r8
  415f14:	4620      	mov	r0, r4
  415f16:	4b2b      	ldr	r3, [pc, #172]	; (415fc4 <xQueueGenericSendFromISR+0xf4>)
  415f18:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  415f1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
  415f20:	d141      	bne.n	415fa6 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  415f22:	6d63      	ldr	r3, [r4, #84]	; 0x54
  415f24:	2b00      	cmp	r3, #0
  415f26:	d033      	beq.n	415f90 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  415f28:	4631      	mov	r1, r6
  415f2a:	4620      	mov	r0, r4
  415f2c:	4b26      	ldr	r3, [pc, #152]	; (415fc8 <xQueueGenericSendFromISR+0xf8>)
  415f2e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  415f30:	2d00      	cmp	r5, #0
  415f32:	d03f      	beq.n	415fb4 <xQueueGenericSendFromISR+0xe4>
  415f34:	2801      	cmp	r0, #1
  415f36:	d13d      	bne.n	415fb4 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  415f38:	6028      	str	r0, [r5, #0]
	__asm volatile
  415f3a:	f387 8811 	msr	BASEPRI, r7
}
  415f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  415f42:	f04f 0380 	mov.w	r3, #128	; 0x80
  415f46:	b672      	cpsid	i
  415f48:	f383 8811 	msr	BASEPRI, r3
  415f4c:	f3bf 8f6f 	isb	sy
  415f50:	f3bf 8f4f 	dsb	sy
  415f54:	b662      	cpsie	i
  415f56:	e7fe      	b.n	415f56 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  415f58:	6c00      	ldr	r0, [r0, #64]	; 0x40
  415f5a:	2800      	cmp	r0, #0
  415f5c:	d0bf      	beq.n	415ede <xQueueGenericSendFromISR+0xe>
  415f5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  415f62:	b672      	cpsid	i
  415f64:	f383 8811 	msr	BASEPRI, r3
  415f68:	f3bf 8f6f 	isb	sy
  415f6c:	f3bf 8f4f 	dsb	sy
  415f70:	b662      	cpsie	i
  415f72:	e7fe      	b.n	415f72 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  415f74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  415f76:	2801      	cmp	r0, #1
  415f78:	d0b3      	beq.n	415ee2 <xQueueGenericSendFromISR+0x12>
  415f7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  415f7e:	b672      	cpsid	i
  415f80:	f383 8811 	msr	BASEPRI, r3
  415f84:	f3bf 8f6f 	isb	sy
  415f88:	f3bf 8f4f 	dsb	sy
  415f8c:	b662      	cpsie	i
  415f8e:	e7fe      	b.n	415f8e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  415f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  415f92:	b18b      	cbz	r3, 415fb8 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  415f94:	f104 0024 	add.w	r0, r4, #36	; 0x24
  415f98:	4b0c      	ldr	r3, [pc, #48]	; (415fcc <xQueueGenericSendFromISR+0xfc>)
  415f9a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  415f9c:	b175      	cbz	r5, 415fbc <xQueueGenericSendFromISR+0xec>
  415f9e:	b168      	cbz	r0, 415fbc <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  415fa0:	2001      	movs	r0, #1
  415fa2:	6028      	str	r0, [r5, #0]
  415fa4:	e7c9      	b.n	415f3a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  415fa6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415fa8:	3301      	adds	r3, #1
  415faa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  415fac:	2001      	movs	r0, #1
  415fae:	e7c4      	b.n	415f3a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  415fb0:	2000      	movs	r0, #0
  415fb2:	e7c2      	b.n	415f3a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  415fb4:	2001      	movs	r0, #1
  415fb6:	e7c0      	b.n	415f3a <xQueueGenericSendFromISR+0x6a>
  415fb8:	2001      	movs	r0, #1
  415fba:	e7be      	b.n	415f3a <xQueueGenericSendFromISR+0x6a>
  415fbc:	2001      	movs	r0, #1
  415fbe:	e7bc      	b.n	415f3a <xQueueGenericSendFromISR+0x6a>
  415fc0:	00415911 	.word	0x00415911
  415fc4:	00415a01 	.word	0x00415a01
  415fc8:	00415a89 	.word	0x00415a89
  415fcc:	00416af9 	.word	0x00416af9

00415fd0 <xQueueGenericReceive>:
{
  415fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  415fd4:	b084      	sub	sp, #16
  415fd6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  415fd8:	b198      	cbz	r0, 416002 <xQueueGenericReceive+0x32>
  415fda:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  415fdc:	b1e1      	cbz	r1, 416018 <xQueueGenericReceive+0x48>
  415fde:	4698      	mov	r8, r3
  415fe0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  415fe2:	4b61      	ldr	r3, [pc, #388]	; (416168 <xQueueGenericReceive+0x198>)
  415fe4:	4798      	blx	r3
  415fe6:	bb28      	cbnz	r0, 416034 <xQueueGenericReceive+0x64>
  415fe8:	9b01      	ldr	r3, [sp, #4]
  415fea:	b353      	cbz	r3, 416042 <xQueueGenericReceive+0x72>
  415fec:	f04f 0380 	mov.w	r3, #128	; 0x80
  415ff0:	b672      	cpsid	i
  415ff2:	f383 8811 	msr	BASEPRI, r3
  415ff6:	f3bf 8f6f 	isb	sy
  415ffa:	f3bf 8f4f 	dsb	sy
  415ffe:	b662      	cpsie	i
  416000:	e7fe      	b.n	416000 <xQueueGenericReceive+0x30>
  416002:	f04f 0380 	mov.w	r3, #128	; 0x80
  416006:	b672      	cpsid	i
  416008:	f383 8811 	msr	BASEPRI, r3
  41600c:	f3bf 8f6f 	isb	sy
  416010:	f3bf 8f4f 	dsb	sy
  416014:	b662      	cpsie	i
  416016:	e7fe      	b.n	416016 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  416018:	6c02      	ldr	r2, [r0, #64]	; 0x40
  41601a:	2a00      	cmp	r2, #0
  41601c:	d0df      	beq.n	415fde <xQueueGenericReceive+0xe>
  41601e:	f04f 0380 	mov.w	r3, #128	; 0x80
  416022:	b672      	cpsid	i
  416024:	f383 8811 	msr	BASEPRI, r3
  416028:	f3bf 8f6f 	isb	sy
  41602c:	f3bf 8f4f 	dsb	sy
  416030:	b662      	cpsie	i
  416032:	e7fe      	b.n	416032 <xQueueGenericReceive+0x62>
  416034:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  416036:	4d4d      	ldr	r5, [pc, #308]	; (41616c <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  416038:	f8df a160 	ldr.w	sl, [pc, #352]	; 41619c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  41603c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 41617c <xQueueGenericReceive+0x1ac>
  416040:	e04b      	b.n	4160da <xQueueGenericReceive+0x10a>
  416042:	2600      	movs	r6, #0
  416044:	e7f7      	b.n	416036 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  416046:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  416048:	4639      	mov	r1, r7
  41604a:	4620      	mov	r0, r4
  41604c:	4b48      	ldr	r3, [pc, #288]	; (416170 <xQueueGenericReceive+0x1a0>)
  41604e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  416050:	f1b8 0f00 	cmp.w	r8, #0
  416054:	d11d      	bne.n	416092 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  416056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  416058:	3b01      	subs	r3, #1
  41605a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  41605c:	6823      	ldr	r3, [r4, #0]
  41605e:	b913      	cbnz	r3, 416066 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  416060:	4b44      	ldr	r3, [pc, #272]	; (416174 <xQueueGenericReceive+0x1a4>)
  416062:	4798      	blx	r3
  416064:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  416066:	6923      	ldr	r3, [r4, #16]
  416068:	b16b      	cbz	r3, 416086 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  41606a:	f104 0010 	add.w	r0, r4, #16
  41606e:	4b42      	ldr	r3, [pc, #264]	; (416178 <xQueueGenericReceive+0x1a8>)
  416070:	4798      	blx	r3
  416072:	2801      	cmp	r0, #1
  416074:	d107      	bne.n	416086 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  416076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  41607a:	4b40      	ldr	r3, [pc, #256]	; (41617c <xQueueGenericReceive+0x1ac>)
  41607c:	601a      	str	r2, [r3, #0]
  41607e:	f3bf 8f4f 	dsb	sy
  416082:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  416086:	4b3e      	ldr	r3, [pc, #248]	; (416180 <xQueueGenericReceive+0x1b0>)
  416088:	4798      	blx	r3
				return pdPASS;
  41608a:	2001      	movs	r0, #1
}
  41608c:	b004      	add	sp, #16
  41608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  416092:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  416094:	6a63      	ldr	r3, [r4, #36]	; 0x24
  416096:	2b00      	cmp	r3, #0
  416098:	d0f5      	beq.n	416086 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  41609a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  41609e:	4b36      	ldr	r3, [pc, #216]	; (416178 <xQueueGenericReceive+0x1a8>)
  4160a0:	4798      	blx	r3
  4160a2:	2800      	cmp	r0, #0
  4160a4:	d0ef      	beq.n	416086 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4160a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4160aa:	4b34      	ldr	r3, [pc, #208]	; (41617c <xQueueGenericReceive+0x1ac>)
  4160ac:	601a      	str	r2, [r3, #0]
  4160ae:	f3bf 8f4f 	dsb	sy
  4160b2:	f3bf 8f6f 	isb	sy
  4160b6:	e7e6      	b.n	416086 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4160b8:	4b31      	ldr	r3, [pc, #196]	; (416180 <xQueueGenericReceive+0x1b0>)
  4160ba:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4160bc:	2000      	movs	r0, #0
  4160be:	e7e5      	b.n	41608c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4160c0:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4160c2:	6860      	ldr	r0, [r4, #4]
  4160c4:	4b2f      	ldr	r3, [pc, #188]	; (416184 <xQueueGenericReceive+0x1b4>)
  4160c6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4160c8:	4b2d      	ldr	r3, [pc, #180]	; (416180 <xQueueGenericReceive+0x1b0>)
  4160ca:	4798      	blx	r3
  4160cc:	e030      	b.n	416130 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4160ce:	4620      	mov	r0, r4
  4160d0:	4b2d      	ldr	r3, [pc, #180]	; (416188 <xQueueGenericReceive+0x1b8>)
  4160d2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4160d4:	4b2d      	ldr	r3, [pc, #180]	; (41618c <xQueueGenericReceive+0x1bc>)
  4160d6:	4798      	blx	r3
  4160d8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4160da:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4160dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4160de:	2b00      	cmp	r3, #0
  4160e0:	d1b1      	bne.n	416046 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4160e2:	9b01      	ldr	r3, [sp, #4]
  4160e4:	2b00      	cmp	r3, #0
  4160e6:	d0e7      	beq.n	4160b8 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4160e8:	b90e      	cbnz	r6, 4160ee <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4160ea:	a802      	add	r0, sp, #8
  4160ec:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4160ee:	4b24      	ldr	r3, [pc, #144]	; (416180 <xQueueGenericReceive+0x1b0>)
  4160f0:	4798      	blx	r3
		vTaskSuspendAll();
  4160f2:	4b27      	ldr	r3, [pc, #156]	; (416190 <xQueueGenericReceive+0x1c0>)
  4160f4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4160f6:	47a8      	blx	r5
  4160f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4160fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4160fe:	d101      	bne.n	416104 <xQueueGenericReceive+0x134>
  416100:	2300      	movs	r3, #0
  416102:	6463      	str	r3, [r4, #68]	; 0x44
  416104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  416106:	f1b3 3fff 	cmp.w	r3, #4294967295
  41610a:	d101      	bne.n	416110 <xQueueGenericReceive+0x140>
  41610c:	2300      	movs	r3, #0
  41610e:	64a3      	str	r3, [r4, #72]	; 0x48
  416110:	4b1b      	ldr	r3, [pc, #108]	; (416180 <xQueueGenericReceive+0x1b0>)
  416112:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  416114:	a901      	add	r1, sp, #4
  416116:	a802      	add	r0, sp, #8
  416118:	4b1e      	ldr	r3, [pc, #120]	; (416194 <xQueueGenericReceive+0x1c4>)
  41611a:	4798      	blx	r3
  41611c:	b9e8      	cbnz	r0, 41615a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  41611e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  416120:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  416122:	4b17      	ldr	r3, [pc, #92]	; (416180 <xQueueGenericReceive+0x1b0>)
  416124:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  416126:	2e00      	cmp	r6, #0
  416128:	d1d1      	bne.n	4160ce <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  41612a:	6823      	ldr	r3, [r4, #0]
  41612c:	2b00      	cmp	r3, #0
  41612e:	d0c7      	beq.n	4160c0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  416130:	9901      	ldr	r1, [sp, #4]
  416132:	f104 0024 	add.w	r0, r4, #36	; 0x24
  416136:	4b18      	ldr	r3, [pc, #96]	; (416198 <xQueueGenericReceive+0x1c8>)
  416138:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  41613a:	4620      	mov	r0, r4
  41613c:	4b12      	ldr	r3, [pc, #72]	; (416188 <xQueueGenericReceive+0x1b8>)
  41613e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  416140:	4b12      	ldr	r3, [pc, #72]	; (41618c <xQueueGenericReceive+0x1bc>)
  416142:	4798      	blx	r3
  416144:	2800      	cmp	r0, #0
  416146:	d1c7      	bne.n	4160d8 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  416148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  41614c:	f8c9 3000 	str.w	r3, [r9]
  416150:	f3bf 8f4f 	dsb	sy
  416154:	f3bf 8f6f 	isb	sy
  416158:	e7be      	b.n	4160d8 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  41615a:	4620      	mov	r0, r4
  41615c:	4b0a      	ldr	r3, [pc, #40]	; (416188 <xQueueGenericReceive+0x1b8>)
  41615e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  416160:	4b0a      	ldr	r3, [pc, #40]	; (41618c <xQueueGenericReceive+0x1bc>)
  416162:	4798      	blx	r3
			return errQUEUE_EMPTY;
  416164:	2000      	movs	r0, #0
  416166:	e791      	b.n	41608c <xQueueGenericReceive+0xbc>
  416168:	00416c61 	.word	0x00416c61
  41616c:	00415719 	.word	0x00415719
  416170:	00415b11 	.word	0x00415b11
  416174:	00416de1 	.word	0x00416de1
  416178:	00416af9 	.word	0x00416af9
  41617c:	e000ed04 	.word	0xe000ed04
  416180:	00415765 	.word	0x00415765
  416184:	00416c81 	.word	0x00416c81
  416188:	00415b39 	.word	0x00415b39
  41618c:	004166dd 	.word	0x004166dd
  416190:	00416575 	.word	0x00416575
  416194:	00416bc1 	.word	0x00416bc1
  416198:	004169f5 	.word	0x004169f5
  41619c:	00416b91 	.word	0x00416b91

004161a0 <vQueueAddToRegistry>:
	{
  4161a0:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4161a2:	4b0b      	ldr	r3, [pc, #44]	; (4161d0 <vQueueAddToRegistry+0x30>)
  4161a4:	681b      	ldr	r3, [r3, #0]
  4161a6:	b153      	cbz	r3, 4161be <vQueueAddToRegistry+0x1e>
  4161a8:	2301      	movs	r3, #1
  4161aa:	4c09      	ldr	r4, [pc, #36]	; (4161d0 <vQueueAddToRegistry+0x30>)
  4161ac:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4161b0:	b132      	cbz	r2, 4161c0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4161b2:	3301      	adds	r3, #1
  4161b4:	2b08      	cmp	r3, #8
  4161b6:	d1f9      	bne.n	4161ac <vQueueAddToRegistry+0xc>
	}
  4161b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4161bc:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4161be:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4161c0:	4a03      	ldr	r2, [pc, #12]	; (4161d0 <vQueueAddToRegistry+0x30>)
  4161c2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4161c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4161ca:	6058      	str	r0, [r3, #4]
				break;
  4161cc:	e7f4      	b.n	4161b8 <vQueueAddToRegistry+0x18>
  4161ce:	bf00      	nop
  4161d0:	2043a0ec 	.word	0x2043a0ec

004161d4 <vQueueWaitForMessageRestricted>:
	{
  4161d4:	b570      	push	{r4, r5, r6, lr}
  4161d6:	4604      	mov	r4, r0
  4161d8:	460d      	mov	r5, r1
  4161da:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4161dc:	4b0f      	ldr	r3, [pc, #60]	; (41621c <vQueueWaitForMessageRestricted+0x48>)
  4161de:	4798      	blx	r3
  4161e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4161e2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4161e6:	d00b      	beq.n	416200 <vQueueWaitForMessageRestricted+0x2c>
  4161e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4161ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4161ee:	d00a      	beq.n	416206 <vQueueWaitForMessageRestricted+0x32>
  4161f0:	4b0b      	ldr	r3, [pc, #44]	; (416220 <vQueueWaitForMessageRestricted+0x4c>)
  4161f2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4161f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4161f6:	b14b      	cbz	r3, 41620c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4161f8:	4620      	mov	r0, r4
  4161fa:	4b0a      	ldr	r3, [pc, #40]	; (416224 <vQueueWaitForMessageRestricted+0x50>)
  4161fc:	4798      	blx	r3
  4161fe:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  416200:	2300      	movs	r3, #0
  416202:	6463      	str	r3, [r4, #68]	; 0x44
  416204:	e7f0      	b.n	4161e8 <vQueueWaitForMessageRestricted+0x14>
  416206:	2300      	movs	r3, #0
  416208:	64a3      	str	r3, [r4, #72]	; 0x48
  41620a:	e7f1      	b.n	4161f0 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  41620c:	4632      	mov	r2, r6
  41620e:	4629      	mov	r1, r5
  416210:	f104 0024 	add.w	r0, r4, #36	; 0x24
  416214:	4b04      	ldr	r3, [pc, #16]	; (416228 <vQueueWaitForMessageRestricted+0x54>)
  416216:	4798      	blx	r3
  416218:	e7ee      	b.n	4161f8 <vQueueWaitForMessageRestricted+0x24>
  41621a:	bf00      	nop
  41621c:	00415719 	.word	0x00415719
  416220:	00415765 	.word	0x00415765
  416224:	00415b39 	.word	0x00415b39
  416228:	00416a79 	.word	0x00416a79

0041622c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  41622c:	4b08      	ldr	r3, [pc, #32]	; (416250 <prvResetNextTaskUnblockTime+0x24>)
  41622e:	681b      	ldr	r3, [r3, #0]
  416230:	681b      	ldr	r3, [r3, #0]
  416232:	b13b      	cbz	r3, 416244 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  416234:	4b06      	ldr	r3, [pc, #24]	; (416250 <prvResetNextTaskUnblockTime+0x24>)
  416236:	681b      	ldr	r3, [r3, #0]
  416238:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  41623a:	68db      	ldr	r3, [r3, #12]
  41623c:	685a      	ldr	r2, [r3, #4]
  41623e:	4b05      	ldr	r3, [pc, #20]	; (416254 <prvResetNextTaskUnblockTime+0x28>)
  416240:	601a      	str	r2, [r3, #0]
  416242:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  416244:	f04f 32ff 	mov.w	r2, #4294967295
  416248:	4b02      	ldr	r3, [pc, #8]	; (416254 <prvResetNextTaskUnblockTime+0x28>)
  41624a:	601a      	str	r2, [r3, #0]
  41624c:	4770      	bx	lr
  41624e:	bf00      	nop
  416250:	204143a8 	.word	0x204143a8
  416254:	20414454 	.word	0x20414454

00416258 <prvAddCurrentTaskToDelayedList>:
{
  416258:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  41625a:	4b0f      	ldr	r3, [pc, #60]	; (416298 <prvAddCurrentTaskToDelayedList+0x40>)
  41625c:	681b      	ldr	r3, [r3, #0]
  41625e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  416260:	4b0e      	ldr	r3, [pc, #56]	; (41629c <prvAddCurrentTaskToDelayedList+0x44>)
  416262:	681b      	ldr	r3, [r3, #0]
  416264:	4298      	cmp	r0, r3
  416266:	d30e      	bcc.n	416286 <prvAddCurrentTaskToDelayedList+0x2e>
  416268:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  41626a:	4b0d      	ldr	r3, [pc, #52]	; (4162a0 <prvAddCurrentTaskToDelayedList+0x48>)
  41626c:	6818      	ldr	r0, [r3, #0]
  41626e:	4b0a      	ldr	r3, [pc, #40]	; (416298 <prvAddCurrentTaskToDelayedList+0x40>)
  416270:	6819      	ldr	r1, [r3, #0]
  416272:	3104      	adds	r1, #4
  416274:	4b0b      	ldr	r3, [pc, #44]	; (4162a4 <prvAddCurrentTaskToDelayedList+0x4c>)
  416276:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  416278:	4b0b      	ldr	r3, [pc, #44]	; (4162a8 <prvAddCurrentTaskToDelayedList+0x50>)
  41627a:	681b      	ldr	r3, [r3, #0]
  41627c:	429c      	cmp	r4, r3
  41627e:	d201      	bcs.n	416284 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  416280:	4b09      	ldr	r3, [pc, #36]	; (4162a8 <prvAddCurrentTaskToDelayedList+0x50>)
  416282:	601c      	str	r4, [r3, #0]
  416284:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  416286:	4b09      	ldr	r3, [pc, #36]	; (4162ac <prvAddCurrentTaskToDelayedList+0x54>)
  416288:	6818      	ldr	r0, [r3, #0]
  41628a:	4b03      	ldr	r3, [pc, #12]	; (416298 <prvAddCurrentTaskToDelayedList+0x40>)
  41628c:	6819      	ldr	r1, [r3, #0]
  41628e:	3104      	adds	r1, #4
  416290:	4b04      	ldr	r3, [pc, #16]	; (4162a4 <prvAddCurrentTaskToDelayedList+0x4c>)
  416292:	4798      	blx	r3
  416294:	bd10      	pop	{r4, pc}
  416296:	bf00      	nop
  416298:	204143a4 	.word	0x204143a4
  41629c:	2041449c 	.word	0x2041449c
  4162a0:	204143a8 	.word	0x204143a8
  4162a4:	00415601 	.word	0x00415601
  4162a8:	20414454 	.word	0x20414454
  4162ac:	204143ac 	.word	0x204143ac

004162b0 <xTaskGenericCreate>:
{
  4162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4162b4:	b083      	sub	sp, #12
  4162b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4162b8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4162bc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4162be:	b160      	cbz	r0, 4162da <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4162c0:	2d04      	cmp	r5, #4
  4162c2:	d915      	bls.n	4162f0 <xTaskGenericCreate+0x40>
  4162c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4162c8:	b672      	cpsid	i
  4162ca:	f383 8811 	msr	BASEPRI, r3
  4162ce:	f3bf 8f6f 	isb	sy
  4162d2:	f3bf 8f4f 	dsb	sy
  4162d6:	b662      	cpsie	i
  4162d8:	e7fe      	b.n	4162d8 <xTaskGenericCreate+0x28>
  4162da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4162de:	b672      	cpsid	i
  4162e0:	f383 8811 	msr	BASEPRI, r3
  4162e4:	f3bf 8f6f 	isb	sy
  4162e8:	f3bf 8f4f 	dsb	sy
  4162ec:	b662      	cpsie	i
  4162ee:	e7fe      	b.n	4162ee <xTaskGenericCreate+0x3e>
  4162f0:	9001      	str	r0, [sp, #4]
  4162f2:	4698      	mov	r8, r3
  4162f4:	4691      	mov	r9, r2
  4162f6:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4162f8:	b936      	cbnz	r6, 416308 <xTaskGenericCreate+0x58>
  4162fa:	0090      	lsls	r0, r2, #2
  4162fc:	4b62      	ldr	r3, [pc, #392]	; (416488 <xTaskGenericCreate+0x1d8>)
  4162fe:	4798      	blx	r3
		if( pxStack != NULL )
  416300:	4606      	mov	r6, r0
  416302:	2800      	cmp	r0, #0
  416304:	f000 809e 	beq.w	416444 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  416308:	2058      	movs	r0, #88	; 0x58
  41630a:	4b5f      	ldr	r3, [pc, #380]	; (416488 <xTaskGenericCreate+0x1d8>)
  41630c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  41630e:	4604      	mov	r4, r0
  416310:	2800      	cmp	r0, #0
  416312:	f000 8094 	beq.w	41643e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  416316:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  416318:	ea4f 0289 	mov.w	r2, r9, lsl #2
  41631c:	21a5      	movs	r1, #165	; 0xa5
  41631e:	4630      	mov	r0, r6
  416320:	4b5a      	ldr	r3, [pc, #360]	; (41648c <xTaskGenericCreate+0x1dc>)
  416322:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  416324:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  416328:	444e      	add	r6, r9
  41632a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  41632c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  416330:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  416334:	783b      	ldrb	r3, [r7, #0]
  416336:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  41633a:	783b      	ldrb	r3, [r7, #0]
  41633c:	2b00      	cmp	r3, #0
  41633e:	f040 8084 	bne.w	41644a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  416342:	2700      	movs	r7, #0
  416344:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  416348:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  41634a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  41634c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  41634e:	f104 0904 	add.w	r9, r4, #4
  416352:	4648      	mov	r0, r9
  416354:	f8df b184 	ldr.w	fp, [pc, #388]	; 4164dc <xTaskGenericCreate+0x22c>
  416358:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  41635a:	f104 0018 	add.w	r0, r4, #24
  41635e:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  416360:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  416362:	f1c5 0305 	rsb	r3, r5, #5
  416366:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  416368:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  41636a:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  41636c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  416370:	4642      	mov	r2, r8
  416372:	9901      	ldr	r1, [sp, #4]
  416374:	4630      	mov	r0, r6
  416376:	4b46      	ldr	r3, [pc, #280]	; (416490 <xTaskGenericCreate+0x1e0>)
  416378:	4798      	blx	r3
  41637a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  41637c:	f1ba 0f00 	cmp.w	sl, #0
  416380:	d001      	beq.n	416386 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  416382:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  416386:	4b43      	ldr	r3, [pc, #268]	; (416494 <xTaskGenericCreate+0x1e4>)
  416388:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  41638a:	4a43      	ldr	r2, [pc, #268]	; (416498 <xTaskGenericCreate+0x1e8>)
  41638c:	6813      	ldr	r3, [r2, #0]
  41638e:	3301      	adds	r3, #1
  416390:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  416392:	4b42      	ldr	r3, [pc, #264]	; (41649c <xTaskGenericCreate+0x1ec>)
  416394:	681b      	ldr	r3, [r3, #0]
  416396:	2b00      	cmp	r3, #0
  416398:	d166      	bne.n	416468 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  41639a:	4b40      	ldr	r3, [pc, #256]	; (41649c <xTaskGenericCreate+0x1ec>)
  41639c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  41639e:	6813      	ldr	r3, [r2, #0]
  4163a0:	2b01      	cmp	r3, #1
  4163a2:	d121      	bne.n	4163e8 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4163a4:	4f3e      	ldr	r7, [pc, #248]	; (4164a0 <xTaskGenericCreate+0x1f0>)
  4163a6:	4638      	mov	r0, r7
  4163a8:	4e3e      	ldr	r6, [pc, #248]	; (4164a4 <xTaskGenericCreate+0x1f4>)
  4163aa:	47b0      	blx	r6
  4163ac:	f107 0014 	add.w	r0, r7, #20
  4163b0:	47b0      	blx	r6
  4163b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4163b6:	47b0      	blx	r6
  4163b8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4163bc:	47b0      	blx	r6
  4163be:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4163c2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4163c4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4164e0 <xTaskGenericCreate+0x230>
  4163c8:	4640      	mov	r0, r8
  4163ca:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4163cc:	4f36      	ldr	r7, [pc, #216]	; (4164a8 <xTaskGenericCreate+0x1f8>)
  4163ce:	4638      	mov	r0, r7
  4163d0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4163d2:	4836      	ldr	r0, [pc, #216]	; (4164ac <xTaskGenericCreate+0x1fc>)
  4163d4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4163d6:	4836      	ldr	r0, [pc, #216]	; (4164b0 <xTaskGenericCreate+0x200>)
  4163d8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4163da:	4836      	ldr	r0, [pc, #216]	; (4164b4 <xTaskGenericCreate+0x204>)
  4163dc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4163de:	4b36      	ldr	r3, [pc, #216]	; (4164b8 <xTaskGenericCreate+0x208>)
  4163e0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4163e4:	4b35      	ldr	r3, [pc, #212]	; (4164bc <xTaskGenericCreate+0x20c>)
  4163e6:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4163e8:	4a35      	ldr	r2, [pc, #212]	; (4164c0 <xTaskGenericCreate+0x210>)
  4163ea:	6813      	ldr	r3, [r2, #0]
  4163ec:	3301      	adds	r3, #1
  4163ee:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4163f0:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4163f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4163f4:	4a33      	ldr	r2, [pc, #204]	; (4164c4 <xTaskGenericCreate+0x214>)
  4163f6:	6811      	ldr	r1, [r2, #0]
  4163f8:	2301      	movs	r3, #1
  4163fa:	4083      	lsls	r3, r0
  4163fc:	430b      	orrs	r3, r1
  4163fe:	6013      	str	r3, [r2, #0]
  416400:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  416404:	4649      	mov	r1, r9
  416406:	4b26      	ldr	r3, [pc, #152]	; (4164a0 <xTaskGenericCreate+0x1f0>)
  416408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41640c:	4b2e      	ldr	r3, [pc, #184]	; (4164c8 <xTaskGenericCreate+0x218>)
  41640e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  416410:	4b2e      	ldr	r3, [pc, #184]	; (4164cc <xTaskGenericCreate+0x21c>)
  416412:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  416414:	4b2e      	ldr	r3, [pc, #184]	; (4164d0 <xTaskGenericCreate+0x220>)
  416416:	681b      	ldr	r3, [r3, #0]
  416418:	2b00      	cmp	r3, #0
  41641a:	d031      	beq.n	416480 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  41641c:	4b1f      	ldr	r3, [pc, #124]	; (41649c <xTaskGenericCreate+0x1ec>)
  41641e:	681b      	ldr	r3, [r3, #0]
  416420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  416422:	429d      	cmp	r5, r3
  416424:	d92e      	bls.n	416484 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  416426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  41642a:	4b2a      	ldr	r3, [pc, #168]	; (4164d4 <xTaskGenericCreate+0x224>)
  41642c:	601a      	str	r2, [r3, #0]
  41642e:	f3bf 8f4f 	dsb	sy
  416432:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  416436:	2001      	movs	r0, #1
}
  416438:	b003      	add	sp, #12
  41643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  41643e:	4630      	mov	r0, r6
  416440:	4b25      	ldr	r3, [pc, #148]	; (4164d8 <xTaskGenericCreate+0x228>)
  416442:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  416444:	f04f 30ff 	mov.w	r0, #4294967295
  416448:	e7f6      	b.n	416438 <xTaskGenericCreate+0x188>
  41644a:	463b      	mov	r3, r7
  41644c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  416450:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  416452:	7859      	ldrb	r1, [r3, #1]
  416454:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  416458:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  41645c:	2900      	cmp	r1, #0
  41645e:	f43f af70 	beq.w	416342 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  416462:	42bb      	cmp	r3, r7
  416464:	d1f5      	bne.n	416452 <xTaskGenericCreate+0x1a2>
  416466:	e76c      	b.n	416342 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  416468:	4b19      	ldr	r3, [pc, #100]	; (4164d0 <xTaskGenericCreate+0x220>)
  41646a:	681b      	ldr	r3, [r3, #0]
  41646c:	2b00      	cmp	r3, #0
  41646e:	d1bb      	bne.n	4163e8 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  416470:	4b0a      	ldr	r3, [pc, #40]	; (41649c <xTaskGenericCreate+0x1ec>)
  416472:	681b      	ldr	r3, [r3, #0]
  416474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  416476:	429d      	cmp	r5, r3
  416478:	d3b6      	bcc.n	4163e8 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  41647a:	4b08      	ldr	r3, [pc, #32]	; (41649c <xTaskGenericCreate+0x1ec>)
  41647c:	601c      	str	r4, [r3, #0]
  41647e:	e7b3      	b.n	4163e8 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  416480:	2001      	movs	r0, #1
  416482:	e7d9      	b.n	416438 <xTaskGenericCreate+0x188>
  416484:	2001      	movs	r0, #1
	return xReturn;
  416486:	e7d7      	b.n	416438 <xTaskGenericCreate+0x188>
  416488:	00415975 	.word	0x00415975
  41648c:	004194c9 	.word	0x004194c9
  416490:	004156cd 	.word	0x004156cd
  416494:	00415719 	.word	0x00415719
  416498:	20414414 	.word	0x20414414
  41649c:	204143a4 	.word	0x204143a4
  4164a0:	204143b0 	.word	0x204143b0
  4164a4:	004155cd 	.word	0x004155cd
  4164a8:	20414440 	.word	0x20414440
  4164ac:	2041445c 	.word	0x2041445c
  4164b0:	20414488 	.word	0x20414488
  4164b4:	20414474 	.word	0x20414474
  4164b8:	204143a8 	.word	0x204143a8
  4164bc:	204143ac 	.word	0x204143ac
  4164c0:	20414420 	.word	0x20414420
  4164c4:	20414428 	.word	0x20414428
  4164c8:	004155e9 	.word	0x004155e9
  4164cc:	00415765 	.word	0x00415765
  4164d0:	20414470 	.word	0x20414470
  4164d4:	e000ed04 	.word	0xe000ed04
  4164d8:	004159e5 	.word	0x004159e5
  4164dc:	004155e3 	.word	0x004155e3
  4164e0:	2041442c 	.word	0x2041442c

004164e4 <vTaskStartScheduler>:
{
  4164e4:	b510      	push	{r4, lr}
  4164e6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4164e8:	2300      	movs	r3, #0
  4164ea:	9303      	str	r3, [sp, #12]
  4164ec:	9302      	str	r3, [sp, #8]
  4164ee:	9301      	str	r3, [sp, #4]
  4164f0:	9300      	str	r3, [sp, #0]
  4164f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4164f6:	4917      	ldr	r1, [pc, #92]	; (416554 <vTaskStartScheduler+0x70>)
  4164f8:	4817      	ldr	r0, [pc, #92]	; (416558 <vTaskStartScheduler+0x74>)
  4164fa:	4c18      	ldr	r4, [pc, #96]	; (41655c <vTaskStartScheduler+0x78>)
  4164fc:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4164fe:	2801      	cmp	r0, #1
  416500:	d00b      	beq.n	41651a <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  416502:	bb20      	cbnz	r0, 41654e <vTaskStartScheduler+0x6a>
  416504:	f04f 0380 	mov.w	r3, #128	; 0x80
  416508:	b672      	cpsid	i
  41650a:	f383 8811 	msr	BASEPRI, r3
  41650e:	f3bf 8f6f 	isb	sy
  416512:	f3bf 8f4f 	dsb	sy
  416516:	b662      	cpsie	i
  416518:	e7fe      	b.n	416518 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  41651a:	4b11      	ldr	r3, [pc, #68]	; (416560 <vTaskStartScheduler+0x7c>)
  41651c:	4798      	blx	r3
	if( xReturn == pdPASS )
  41651e:	2801      	cmp	r0, #1
  416520:	d1ef      	bne.n	416502 <vTaskStartScheduler+0x1e>
  416522:	f04f 0380 	mov.w	r3, #128	; 0x80
  416526:	b672      	cpsid	i
  416528:	f383 8811 	msr	BASEPRI, r3
  41652c:	f3bf 8f6f 	isb	sy
  416530:	f3bf 8f4f 	dsb	sy
  416534:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  416536:	f04f 32ff 	mov.w	r2, #4294967295
  41653a:	4b0a      	ldr	r3, [pc, #40]	; (416564 <vTaskStartScheduler+0x80>)
  41653c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  41653e:	2201      	movs	r2, #1
  416540:	4b09      	ldr	r3, [pc, #36]	; (416568 <vTaskStartScheduler+0x84>)
  416542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  416544:	2200      	movs	r2, #0
  416546:	4b09      	ldr	r3, [pc, #36]	; (41656c <vTaskStartScheduler+0x88>)
  416548:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  41654a:	4b09      	ldr	r3, [pc, #36]	; (416570 <vTaskStartScheduler+0x8c>)
  41654c:	4798      	blx	r3
}
  41654e:	b004      	add	sp, #16
  416550:	bd10      	pop	{r4, pc}
  416552:	bf00      	nop
  416554:	00422dc8 	.word	0x00422dc8
  416558:	0041688d 	.word	0x0041688d
  41655c:	004162b1 	.word	0x004162b1
  416560:	00416ecd 	.word	0x00416ecd
  416564:	20414454 	.word	0x20414454
  416568:	20414470 	.word	0x20414470
  41656c:	2041449c 	.word	0x2041449c
  416570:	0041584d 	.word	0x0041584d

00416574 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  416574:	4a02      	ldr	r2, [pc, #8]	; (416580 <vTaskSuspendAll+0xc>)
  416576:	6813      	ldr	r3, [r2, #0]
  416578:	3301      	adds	r3, #1
  41657a:	6013      	str	r3, [r2, #0]
  41657c:	4770      	bx	lr
  41657e:	bf00      	nop
  416580:	2041441c 	.word	0x2041441c

00416584 <xTaskGetTickCount>:
		xTicks = xTickCount;
  416584:	4b01      	ldr	r3, [pc, #4]	; (41658c <xTaskGetTickCount+0x8>)
  416586:	6818      	ldr	r0, [r3, #0]
}
  416588:	4770      	bx	lr
  41658a:	bf00      	nop
  41658c:	2041449c 	.word	0x2041449c

00416590 <xTaskIncrementTick>:
{
  416590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  416594:	4b42      	ldr	r3, [pc, #264]	; (4166a0 <xTaskIncrementTick+0x110>)
  416596:	681b      	ldr	r3, [r3, #0]
  416598:	2b00      	cmp	r3, #0
  41659a:	d178      	bne.n	41668e <xTaskIncrementTick+0xfe>
		++xTickCount;
  41659c:	4b41      	ldr	r3, [pc, #260]	; (4166a4 <xTaskIncrementTick+0x114>)
  41659e:	681a      	ldr	r2, [r3, #0]
  4165a0:	3201      	adds	r2, #1
  4165a2:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4165a4:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4165a6:	b9d6      	cbnz	r6, 4165de <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4165a8:	4b3f      	ldr	r3, [pc, #252]	; (4166a8 <xTaskIncrementTick+0x118>)
  4165aa:	681b      	ldr	r3, [r3, #0]
  4165ac:	681b      	ldr	r3, [r3, #0]
  4165ae:	b153      	cbz	r3, 4165c6 <xTaskIncrementTick+0x36>
  4165b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4165b4:	b672      	cpsid	i
  4165b6:	f383 8811 	msr	BASEPRI, r3
  4165ba:	f3bf 8f6f 	isb	sy
  4165be:	f3bf 8f4f 	dsb	sy
  4165c2:	b662      	cpsie	i
  4165c4:	e7fe      	b.n	4165c4 <xTaskIncrementTick+0x34>
  4165c6:	4a38      	ldr	r2, [pc, #224]	; (4166a8 <xTaskIncrementTick+0x118>)
  4165c8:	6811      	ldr	r1, [r2, #0]
  4165ca:	4b38      	ldr	r3, [pc, #224]	; (4166ac <xTaskIncrementTick+0x11c>)
  4165cc:	6818      	ldr	r0, [r3, #0]
  4165ce:	6010      	str	r0, [r2, #0]
  4165d0:	6019      	str	r1, [r3, #0]
  4165d2:	4a37      	ldr	r2, [pc, #220]	; (4166b0 <xTaskIncrementTick+0x120>)
  4165d4:	6813      	ldr	r3, [r2, #0]
  4165d6:	3301      	adds	r3, #1
  4165d8:	6013      	str	r3, [r2, #0]
  4165da:	4b36      	ldr	r3, [pc, #216]	; (4166b4 <xTaskIncrementTick+0x124>)
  4165dc:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4165de:	4b36      	ldr	r3, [pc, #216]	; (4166b8 <xTaskIncrementTick+0x128>)
  4165e0:	681b      	ldr	r3, [r3, #0]
  4165e2:	429e      	cmp	r6, r3
  4165e4:	d218      	bcs.n	416618 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4165e6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4165e8:	4b34      	ldr	r3, [pc, #208]	; (4166bc <xTaskIncrementTick+0x12c>)
  4165ea:	681b      	ldr	r3, [r3, #0]
  4165ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4165ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4165f2:	4a33      	ldr	r2, [pc, #204]	; (4166c0 <xTaskIncrementTick+0x130>)
  4165f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4165f8:	2b02      	cmp	r3, #2
  4165fa:	bf28      	it	cs
  4165fc:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4165fe:	4b31      	ldr	r3, [pc, #196]	; (4166c4 <xTaskIncrementTick+0x134>)
  416600:	681b      	ldr	r3, [r3, #0]
  416602:	b90b      	cbnz	r3, 416608 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  416604:	4b30      	ldr	r3, [pc, #192]	; (4166c8 <xTaskIncrementTick+0x138>)
  416606:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  416608:	4b30      	ldr	r3, [pc, #192]	; (4166cc <xTaskIncrementTick+0x13c>)
  41660a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  41660c:	2b00      	cmp	r3, #0
}
  41660e:	bf0c      	ite	eq
  416610:	4620      	moveq	r0, r4
  416612:	2001      	movne	r0, #1
  416614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  416618:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  41661a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4166a8 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  41661e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4166d8 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  416622:	4f2b      	ldr	r7, [pc, #172]	; (4166d0 <xTaskIncrementTick+0x140>)
  416624:	e01f      	b.n	416666 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  416626:	f04f 32ff 	mov.w	r2, #4294967295
  41662a:	4b23      	ldr	r3, [pc, #140]	; (4166b8 <xTaskIncrementTick+0x128>)
  41662c:	601a      	str	r2, [r3, #0]
						break;
  41662e:	e7db      	b.n	4165e8 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  416630:	4a21      	ldr	r2, [pc, #132]	; (4166b8 <xTaskIncrementTick+0x128>)
  416632:	6013      	str	r3, [r2, #0]
							break;
  416634:	e7d8      	b.n	4165e8 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  416636:	f105 0018 	add.w	r0, r5, #24
  41663a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  41663c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  41663e:	683a      	ldr	r2, [r7, #0]
  416640:	2301      	movs	r3, #1
  416642:	4083      	lsls	r3, r0
  416644:	4313      	orrs	r3, r2
  416646:	603b      	str	r3, [r7, #0]
  416648:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41664c:	4651      	mov	r1, sl
  41664e:	4b1c      	ldr	r3, [pc, #112]	; (4166c0 <xTaskIncrementTick+0x130>)
  416650:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  416654:	4b1f      	ldr	r3, [pc, #124]	; (4166d4 <xTaskIncrementTick+0x144>)
  416656:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  416658:	4b18      	ldr	r3, [pc, #96]	; (4166bc <xTaskIncrementTick+0x12c>)
  41665a:	681b      	ldr	r3, [r3, #0]
  41665c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  41665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  416660:	429a      	cmp	r2, r3
  416662:	bf28      	it	cs
  416664:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  416666:	f8d9 3000 	ldr.w	r3, [r9]
  41666a:	681b      	ldr	r3, [r3, #0]
  41666c:	2b00      	cmp	r3, #0
  41666e:	d0da      	beq.n	416626 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  416670:	f8d9 3000 	ldr.w	r3, [r9]
  416674:	68db      	ldr	r3, [r3, #12]
  416676:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  416678:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  41667a:	429e      	cmp	r6, r3
  41667c:	d3d8      	bcc.n	416630 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  41667e:	f105 0a04 	add.w	sl, r5, #4
  416682:	4650      	mov	r0, sl
  416684:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  416686:	6aab      	ldr	r3, [r5, #40]	; 0x28
  416688:	2b00      	cmp	r3, #0
  41668a:	d1d4      	bne.n	416636 <xTaskIncrementTick+0xa6>
  41668c:	e7d6      	b.n	41663c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  41668e:	4a0d      	ldr	r2, [pc, #52]	; (4166c4 <xTaskIncrementTick+0x134>)
  416690:	6813      	ldr	r3, [r2, #0]
  416692:	3301      	adds	r3, #1
  416694:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  416696:	4b0c      	ldr	r3, [pc, #48]	; (4166c8 <xTaskIncrementTick+0x138>)
  416698:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  41669a:	2400      	movs	r4, #0
  41669c:	e7b4      	b.n	416608 <xTaskIncrementTick+0x78>
  41669e:	bf00      	nop
  4166a0:	2041441c 	.word	0x2041441c
  4166a4:	2041449c 	.word	0x2041449c
  4166a8:	204143a8 	.word	0x204143a8
  4166ac:	204143ac 	.word	0x204143ac
  4166b0:	20414458 	.word	0x20414458
  4166b4:	0041622d 	.word	0x0041622d
  4166b8:	20414454 	.word	0x20414454
  4166bc:	204143a4 	.word	0x204143a4
  4166c0:	204143b0 	.word	0x204143b0
  4166c4:	20414418 	.word	0x20414418
  4166c8:	004184cd 	.word	0x004184cd
  4166cc:	204144a0 	.word	0x204144a0
  4166d0:	20414428 	.word	0x20414428
  4166d4:	004155e9 	.word	0x004155e9
  4166d8:	00415635 	.word	0x00415635

004166dc <xTaskResumeAll>:
{
  4166dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4166e0:	4b38      	ldr	r3, [pc, #224]	; (4167c4 <xTaskResumeAll+0xe8>)
  4166e2:	681b      	ldr	r3, [r3, #0]
  4166e4:	b953      	cbnz	r3, 4166fc <xTaskResumeAll+0x20>
  4166e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4166ea:	b672      	cpsid	i
  4166ec:	f383 8811 	msr	BASEPRI, r3
  4166f0:	f3bf 8f6f 	isb	sy
  4166f4:	f3bf 8f4f 	dsb	sy
  4166f8:	b662      	cpsie	i
  4166fa:	e7fe      	b.n	4166fa <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4166fc:	4b32      	ldr	r3, [pc, #200]	; (4167c8 <xTaskResumeAll+0xec>)
  4166fe:	4798      	blx	r3
		--uxSchedulerSuspended;
  416700:	4b30      	ldr	r3, [pc, #192]	; (4167c4 <xTaskResumeAll+0xe8>)
  416702:	681a      	ldr	r2, [r3, #0]
  416704:	3a01      	subs	r2, #1
  416706:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  416708:	681b      	ldr	r3, [r3, #0]
  41670a:	2b00      	cmp	r3, #0
  41670c:	d155      	bne.n	4167ba <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  41670e:	4b2f      	ldr	r3, [pc, #188]	; (4167cc <xTaskResumeAll+0xf0>)
  416710:	681b      	ldr	r3, [r3, #0]
  416712:	2b00      	cmp	r3, #0
  416714:	d132      	bne.n	41677c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  416716:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  416718:	4b2d      	ldr	r3, [pc, #180]	; (4167d0 <xTaskResumeAll+0xf4>)
  41671a:	4798      	blx	r3
}
  41671c:	4620      	mov	r0, r4
  41671e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  416722:	68fb      	ldr	r3, [r7, #12]
  416724:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  416726:	f104 0018 	add.w	r0, r4, #24
  41672a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  41672c:	f104 0804 	add.w	r8, r4, #4
  416730:	4640      	mov	r0, r8
  416732:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  416734:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  416736:	682a      	ldr	r2, [r5, #0]
  416738:	2301      	movs	r3, #1
  41673a:	4083      	lsls	r3, r0
  41673c:	4313      	orrs	r3, r2
  41673e:	602b      	str	r3, [r5, #0]
  416740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  416744:	4641      	mov	r1, r8
  416746:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  41674a:	4b22      	ldr	r3, [pc, #136]	; (4167d4 <xTaskResumeAll+0xf8>)
  41674c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  41674e:	4b22      	ldr	r3, [pc, #136]	; (4167d8 <xTaskResumeAll+0xfc>)
  416750:	681b      	ldr	r3, [r3, #0]
  416752:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  416754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  416756:	429a      	cmp	r2, r3
  416758:	d20c      	bcs.n	416774 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  41675a:	683b      	ldr	r3, [r7, #0]
  41675c:	2b00      	cmp	r3, #0
  41675e:	d1e0      	bne.n	416722 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  416760:	4b1e      	ldr	r3, [pc, #120]	; (4167dc <xTaskResumeAll+0x100>)
  416762:	681b      	ldr	r3, [r3, #0]
  416764:	b1db      	cbz	r3, 41679e <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  416766:	4b1d      	ldr	r3, [pc, #116]	; (4167dc <xTaskResumeAll+0x100>)
  416768:	681b      	ldr	r3, [r3, #0]
  41676a:	b1c3      	cbz	r3, 41679e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  41676c:	4e1c      	ldr	r6, [pc, #112]	; (4167e0 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  41676e:	4d1d      	ldr	r5, [pc, #116]	; (4167e4 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  416770:	4c1a      	ldr	r4, [pc, #104]	; (4167dc <xTaskResumeAll+0x100>)
  416772:	e00e      	b.n	416792 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  416774:	2201      	movs	r2, #1
  416776:	4b1b      	ldr	r3, [pc, #108]	; (4167e4 <xTaskResumeAll+0x108>)
  416778:	601a      	str	r2, [r3, #0]
  41677a:	e7ee      	b.n	41675a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  41677c:	4f1a      	ldr	r7, [pc, #104]	; (4167e8 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  41677e:	4e1b      	ldr	r6, [pc, #108]	; (4167ec <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  416780:	4d1b      	ldr	r5, [pc, #108]	; (4167f0 <xTaskResumeAll+0x114>)
  416782:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4167f8 <xTaskResumeAll+0x11c>
  416786:	e7e8      	b.n	41675a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  416788:	6823      	ldr	r3, [r4, #0]
  41678a:	3b01      	subs	r3, #1
  41678c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  41678e:	6823      	ldr	r3, [r4, #0]
  416790:	b12b      	cbz	r3, 41679e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  416792:	47b0      	blx	r6
  416794:	2800      	cmp	r0, #0
  416796:	d0f7      	beq.n	416788 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  416798:	2301      	movs	r3, #1
  41679a:	602b      	str	r3, [r5, #0]
  41679c:	e7f4      	b.n	416788 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  41679e:	4b11      	ldr	r3, [pc, #68]	; (4167e4 <xTaskResumeAll+0x108>)
  4167a0:	681b      	ldr	r3, [r3, #0]
  4167a2:	2b01      	cmp	r3, #1
  4167a4:	d10b      	bne.n	4167be <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4167a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4167aa:	4b12      	ldr	r3, [pc, #72]	; (4167f4 <xTaskResumeAll+0x118>)
  4167ac:	601a      	str	r2, [r3, #0]
  4167ae:	f3bf 8f4f 	dsb	sy
  4167b2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4167b6:	2401      	movs	r4, #1
  4167b8:	e7ae      	b.n	416718 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4167ba:	2400      	movs	r4, #0
  4167bc:	e7ac      	b.n	416718 <xTaskResumeAll+0x3c>
  4167be:	2400      	movs	r4, #0
  4167c0:	e7aa      	b.n	416718 <xTaskResumeAll+0x3c>
  4167c2:	bf00      	nop
  4167c4:	2041441c 	.word	0x2041441c
  4167c8:	00415719 	.word	0x00415719
  4167cc:	20414414 	.word	0x20414414
  4167d0:	00415765 	.word	0x00415765
  4167d4:	004155e9 	.word	0x004155e9
  4167d8:	204143a4 	.word	0x204143a4
  4167dc:	20414418 	.word	0x20414418
  4167e0:	00416591 	.word	0x00416591
  4167e4:	204144a0 	.word	0x204144a0
  4167e8:	2041445c 	.word	0x2041445c
  4167ec:	00415635 	.word	0x00415635
  4167f0:	20414428 	.word	0x20414428
  4167f4:	e000ed04 	.word	0xe000ed04
  4167f8:	204143b0 	.word	0x204143b0

004167fc <vTaskDelay>:
	{
  4167fc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4167fe:	2800      	cmp	r0, #0
  416800:	d029      	beq.n	416856 <vTaskDelay+0x5a>
  416802:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  416804:	4b18      	ldr	r3, [pc, #96]	; (416868 <vTaskDelay+0x6c>)
  416806:	681b      	ldr	r3, [r3, #0]
  416808:	b153      	cbz	r3, 416820 <vTaskDelay+0x24>
  41680a:	f04f 0380 	mov.w	r3, #128	; 0x80
  41680e:	b672      	cpsid	i
  416810:	f383 8811 	msr	BASEPRI, r3
  416814:	f3bf 8f6f 	isb	sy
  416818:	f3bf 8f4f 	dsb	sy
  41681c:	b662      	cpsie	i
  41681e:	e7fe      	b.n	41681e <vTaskDelay+0x22>
			vTaskSuspendAll();
  416820:	4b12      	ldr	r3, [pc, #72]	; (41686c <vTaskDelay+0x70>)
  416822:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  416824:	4b12      	ldr	r3, [pc, #72]	; (416870 <vTaskDelay+0x74>)
  416826:	681b      	ldr	r3, [r3, #0]
  416828:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  41682a:	4b12      	ldr	r3, [pc, #72]	; (416874 <vTaskDelay+0x78>)
  41682c:	6818      	ldr	r0, [r3, #0]
  41682e:	3004      	adds	r0, #4
  416830:	4b11      	ldr	r3, [pc, #68]	; (416878 <vTaskDelay+0x7c>)
  416832:	4798      	blx	r3
  416834:	b948      	cbnz	r0, 41684a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  416836:	4b0f      	ldr	r3, [pc, #60]	; (416874 <vTaskDelay+0x78>)
  416838:	681a      	ldr	r2, [r3, #0]
  41683a:	4910      	ldr	r1, [pc, #64]	; (41687c <vTaskDelay+0x80>)
  41683c:	680b      	ldr	r3, [r1, #0]
  41683e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  416840:	2201      	movs	r2, #1
  416842:	4082      	lsls	r2, r0
  416844:	ea23 0302 	bic.w	r3, r3, r2
  416848:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  41684a:	4620      	mov	r0, r4
  41684c:	4b0c      	ldr	r3, [pc, #48]	; (416880 <vTaskDelay+0x84>)
  41684e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  416850:	4b0c      	ldr	r3, [pc, #48]	; (416884 <vTaskDelay+0x88>)
  416852:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  416854:	b938      	cbnz	r0, 416866 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  416856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  41685a:	4b0b      	ldr	r3, [pc, #44]	; (416888 <vTaskDelay+0x8c>)
  41685c:	601a      	str	r2, [r3, #0]
  41685e:	f3bf 8f4f 	dsb	sy
  416862:	f3bf 8f6f 	isb	sy
  416866:	bd10      	pop	{r4, pc}
  416868:	2041441c 	.word	0x2041441c
  41686c:	00416575 	.word	0x00416575
  416870:	2041449c 	.word	0x2041449c
  416874:	204143a4 	.word	0x204143a4
  416878:	00415635 	.word	0x00415635
  41687c:	20414428 	.word	0x20414428
  416880:	00416259 	.word	0x00416259
  416884:	004166dd 	.word	0x004166dd
  416888:	e000ed04 	.word	0xe000ed04

0041688c <prvIdleTask>:
{
  41688c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  41688e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 416918 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  416892:	4e19      	ldr	r6, [pc, #100]	; (4168f8 <prvIdleTask+0x6c>)
				taskYIELD();
  416894:	f8df 9084 	ldr.w	r9, [pc, #132]	; 41691c <prvIdleTask+0x90>
  416898:	e02a      	b.n	4168f0 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  41689a:	4b18      	ldr	r3, [pc, #96]	; (4168fc <prvIdleTask+0x70>)
  41689c:	681b      	ldr	r3, [r3, #0]
  41689e:	2b01      	cmp	r3, #1
  4168a0:	d81e      	bhi.n	4168e0 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4168a2:	682b      	ldr	r3, [r5, #0]
  4168a4:	2b00      	cmp	r3, #0
  4168a6:	d0f8      	beq.n	41689a <prvIdleTask+0xe>
			vTaskSuspendAll();
  4168a8:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4168aa:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4168ac:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4168ae:	2c00      	cmp	r4, #0
  4168b0:	d0f7      	beq.n	4168a2 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4168b2:	4b13      	ldr	r3, [pc, #76]	; (416900 <prvIdleTask+0x74>)
  4168b4:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4168b6:	68f3      	ldr	r3, [r6, #12]
  4168b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4168ba:	1d20      	adds	r0, r4, #4
  4168bc:	4b11      	ldr	r3, [pc, #68]	; (416904 <prvIdleTask+0x78>)
  4168be:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4168c0:	4a11      	ldr	r2, [pc, #68]	; (416908 <prvIdleTask+0x7c>)
  4168c2:	6813      	ldr	r3, [r2, #0]
  4168c4:	3b01      	subs	r3, #1
  4168c6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4168c8:	682b      	ldr	r3, [r5, #0]
  4168ca:	3b01      	subs	r3, #1
  4168cc:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4168ce:	4b0f      	ldr	r3, [pc, #60]	; (41690c <prvIdleTask+0x80>)
  4168d0:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4168d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4168d4:	f8df a048 	ldr.w	sl, [pc, #72]	; 416920 <prvIdleTask+0x94>
  4168d8:	47d0      	blx	sl
		vPortFree( pxTCB );
  4168da:	4620      	mov	r0, r4
  4168dc:	47d0      	blx	sl
  4168de:	e7e0      	b.n	4168a2 <prvIdleTask+0x16>
				taskYIELD();
  4168e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4168e4:	f8c9 3000 	str.w	r3, [r9]
  4168e8:	f3bf 8f4f 	dsb	sy
  4168ec:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4168f0:	4d07      	ldr	r5, [pc, #28]	; (416910 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4168f2:	4f08      	ldr	r7, [pc, #32]	; (416914 <prvIdleTask+0x88>)
  4168f4:	e7d5      	b.n	4168a2 <prvIdleTask+0x16>
  4168f6:	bf00      	nop
  4168f8:	20414488 	.word	0x20414488
  4168fc:	204143b0 	.word	0x204143b0
  416900:	00415719 	.word	0x00415719
  416904:	00415635 	.word	0x00415635
  416908:	20414414 	.word	0x20414414
  41690c:	00415765 	.word	0x00415765
  416910:	20414424 	.word	0x20414424
  416914:	004166dd 	.word	0x004166dd
  416918:	00416575 	.word	0x00416575
  41691c:	e000ed04 	.word	0xe000ed04
  416920:	004159e5 	.word	0x004159e5

00416924 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  416924:	4b2d      	ldr	r3, [pc, #180]	; (4169dc <vTaskSwitchContext+0xb8>)
  416926:	681b      	ldr	r3, [r3, #0]
  416928:	2b00      	cmp	r3, #0
  41692a:	d12c      	bne.n	416986 <vTaskSwitchContext+0x62>
{
  41692c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  41692e:	2200      	movs	r2, #0
  416930:	4b2b      	ldr	r3, [pc, #172]	; (4169e0 <vTaskSwitchContext+0xbc>)
  416932:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  416934:	4b2b      	ldr	r3, [pc, #172]	; (4169e4 <vTaskSwitchContext+0xc0>)
  416936:	681b      	ldr	r3, [r3, #0]
  416938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41693a:	681a      	ldr	r2, [r3, #0]
  41693c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  416940:	d103      	bne.n	41694a <vTaskSwitchContext+0x26>
  416942:	685a      	ldr	r2, [r3, #4]
  416944:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  416948:	d021      	beq.n	41698e <vTaskSwitchContext+0x6a>
  41694a:	4b26      	ldr	r3, [pc, #152]	; (4169e4 <vTaskSwitchContext+0xc0>)
  41694c:	6818      	ldr	r0, [r3, #0]
  41694e:	6819      	ldr	r1, [r3, #0]
  416950:	3134      	adds	r1, #52	; 0x34
  416952:	4b25      	ldr	r3, [pc, #148]	; (4169e8 <vTaskSwitchContext+0xc4>)
  416954:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  416956:	4b25      	ldr	r3, [pc, #148]	; (4169ec <vTaskSwitchContext+0xc8>)
  416958:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  41695a:	fab3 f383 	clz	r3, r3
  41695e:	b2db      	uxtb	r3, r3
  416960:	f1c3 031f 	rsb	r3, r3, #31
  416964:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  416968:	4a21      	ldr	r2, [pc, #132]	; (4169f0 <vTaskSwitchContext+0xcc>)
  41696a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  41696e:	b9ba      	cbnz	r2, 4169a0 <vTaskSwitchContext+0x7c>
	__asm volatile
  416970:	f04f 0380 	mov.w	r3, #128	; 0x80
  416974:	b672      	cpsid	i
  416976:	f383 8811 	msr	BASEPRI, r3
  41697a:	f3bf 8f6f 	isb	sy
  41697e:	f3bf 8f4f 	dsb	sy
  416982:	b662      	cpsie	i
  416984:	e7fe      	b.n	416984 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  416986:	2201      	movs	r2, #1
  416988:	4b15      	ldr	r3, [pc, #84]	; (4169e0 <vTaskSwitchContext+0xbc>)
  41698a:	601a      	str	r2, [r3, #0]
  41698c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  41698e:	689a      	ldr	r2, [r3, #8]
  416990:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  416994:	d1d9      	bne.n	41694a <vTaskSwitchContext+0x26>
  416996:	68db      	ldr	r3, [r3, #12]
  416998:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  41699c:	d1d5      	bne.n	41694a <vTaskSwitchContext+0x26>
  41699e:	e7da      	b.n	416956 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4169a0:	4a13      	ldr	r2, [pc, #76]	; (4169f0 <vTaskSwitchContext+0xcc>)
  4169a2:	0099      	lsls	r1, r3, #2
  4169a4:	18c8      	adds	r0, r1, r3
  4169a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4169aa:	6844      	ldr	r4, [r0, #4]
  4169ac:	6864      	ldr	r4, [r4, #4]
  4169ae:	6044      	str	r4, [r0, #4]
  4169b0:	4419      	add	r1, r3
  4169b2:	4602      	mov	r2, r0
  4169b4:	3208      	adds	r2, #8
  4169b6:	4294      	cmp	r4, r2
  4169b8:	d009      	beq.n	4169ce <vTaskSwitchContext+0xaa>
  4169ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4169be:	4a0c      	ldr	r2, [pc, #48]	; (4169f0 <vTaskSwitchContext+0xcc>)
  4169c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4169c4:	685b      	ldr	r3, [r3, #4]
  4169c6:	68da      	ldr	r2, [r3, #12]
  4169c8:	4b06      	ldr	r3, [pc, #24]	; (4169e4 <vTaskSwitchContext+0xc0>)
  4169ca:	601a      	str	r2, [r3, #0]
  4169cc:	bd10      	pop	{r4, pc}
  4169ce:	6860      	ldr	r0, [r4, #4]
  4169d0:	4a07      	ldr	r2, [pc, #28]	; (4169f0 <vTaskSwitchContext+0xcc>)
  4169d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4169d6:	6050      	str	r0, [r2, #4]
  4169d8:	e7ef      	b.n	4169ba <vTaskSwitchContext+0x96>
  4169da:	bf00      	nop
  4169dc:	2041441c 	.word	0x2041441c
  4169e0:	204144a0 	.word	0x204144a0
  4169e4:	204143a4 	.word	0x204143a4
  4169e8:	004184b5 	.word	0x004184b5
  4169ec:	20414428 	.word	0x20414428
  4169f0:	204143b0 	.word	0x204143b0

004169f4 <vTaskPlaceOnEventList>:
{
  4169f4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4169f6:	b1e0      	cbz	r0, 416a32 <vTaskPlaceOnEventList+0x3e>
  4169f8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4169fa:	4d17      	ldr	r5, [pc, #92]	; (416a58 <vTaskPlaceOnEventList+0x64>)
  4169fc:	6829      	ldr	r1, [r5, #0]
  4169fe:	3118      	adds	r1, #24
  416a00:	4b16      	ldr	r3, [pc, #88]	; (416a5c <vTaskPlaceOnEventList+0x68>)
  416a02:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  416a04:	6828      	ldr	r0, [r5, #0]
  416a06:	3004      	adds	r0, #4
  416a08:	4b15      	ldr	r3, [pc, #84]	; (416a60 <vTaskPlaceOnEventList+0x6c>)
  416a0a:	4798      	blx	r3
  416a0c:	b940      	cbnz	r0, 416a20 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  416a0e:	682a      	ldr	r2, [r5, #0]
  416a10:	4914      	ldr	r1, [pc, #80]	; (416a64 <vTaskPlaceOnEventList+0x70>)
  416a12:	680b      	ldr	r3, [r1, #0]
  416a14:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  416a16:	2201      	movs	r2, #1
  416a18:	4082      	lsls	r2, r0
  416a1a:	ea23 0302 	bic.w	r3, r3, r2
  416a1e:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  416a20:	f1b4 3fff 	cmp.w	r4, #4294967295
  416a24:	d010      	beq.n	416a48 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  416a26:	4b10      	ldr	r3, [pc, #64]	; (416a68 <vTaskPlaceOnEventList+0x74>)
  416a28:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  416a2a:	4420      	add	r0, r4
  416a2c:	4b0f      	ldr	r3, [pc, #60]	; (416a6c <vTaskPlaceOnEventList+0x78>)
  416a2e:	4798      	blx	r3
  416a30:	bd38      	pop	{r3, r4, r5, pc}
  416a32:	f04f 0380 	mov.w	r3, #128	; 0x80
  416a36:	b672      	cpsid	i
  416a38:	f383 8811 	msr	BASEPRI, r3
  416a3c:	f3bf 8f6f 	isb	sy
  416a40:	f3bf 8f4f 	dsb	sy
  416a44:	b662      	cpsie	i
  416a46:	e7fe      	b.n	416a46 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  416a48:	4b03      	ldr	r3, [pc, #12]	; (416a58 <vTaskPlaceOnEventList+0x64>)
  416a4a:	6819      	ldr	r1, [r3, #0]
  416a4c:	3104      	adds	r1, #4
  416a4e:	4808      	ldr	r0, [pc, #32]	; (416a70 <vTaskPlaceOnEventList+0x7c>)
  416a50:	4b08      	ldr	r3, [pc, #32]	; (416a74 <vTaskPlaceOnEventList+0x80>)
  416a52:	4798      	blx	r3
  416a54:	bd38      	pop	{r3, r4, r5, pc}
  416a56:	bf00      	nop
  416a58:	204143a4 	.word	0x204143a4
  416a5c:	00415601 	.word	0x00415601
  416a60:	00415635 	.word	0x00415635
  416a64:	20414428 	.word	0x20414428
  416a68:	2041449c 	.word	0x2041449c
  416a6c:	00416259 	.word	0x00416259
  416a70:	20414474 	.word	0x20414474
  416a74:	004155e9 	.word	0x004155e9

00416a78 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  416a78:	b1e8      	cbz	r0, 416ab6 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  416a7a:	b570      	push	{r4, r5, r6, lr}
  416a7c:	4615      	mov	r5, r2
  416a7e:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  416a80:	4e16      	ldr	r6, [pc, #88]	; (416adc <vTaskPlaceOnEventListRestricted+0x64>)
  416a82:	6831      	ldr	r1, [r6, #0]
  416a84:	3118      	adds	r1, #24
  416a86:	4b16      	ldr	r3, [pc, #88]	; (416ae0 <vTaskPlaceOnEventListRestricted+0x68>)
  416a88:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  416a8a:	6830      	ldr	r0, [r6, #0]
  416a8c:	3004      	adds	r0, #4
  416a8e:	4b15      	ldr	r3, [pc, #84]	; (416ae4 <vTaskPlaceOnEventListRestricted+0x6c>)
  416a90:	4798      	blx	r3
  416a92:	b940      	cbnz	r0, 416aa6 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  416a94:	6832      	ldr	r2, [r6, #0]
  416a96:	4914      	ldr	r1, [pc, #80]	; (416ae8 <vTaskPlaceOnEventListRestricted+0x70>)
  416a98:	680b      	ldr	r3, [r1, #0]
  416a9a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  416a9c:	2201      	movs	r2, #1
  416a9e:	4082      	lsls	r2, r0
  416aa0:	ea23 0302 	bic.w	r3, r3, r2
  416aa4:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  416aa6:	2d01      	cmp	r5, #1
  416aa8:	d010      	beq.n	416acc <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  416aaa:	4b10      	ldr	r3, [pc, #64]	; (416aec <vTaskPlaceOnEventListRestricted+0x74>)
  416aac:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  416aae:	4420      	add	r0, r4
  416ab0:	4b0f      	ldr	r3, [pc, #60]	; (416af0 <vTaskPlaceOnEventListRestricted+0x78>)
  416ab2:	4798      	blx	r3
  416ab4:	bd70      	pop	{r4, r5, r6, pc}
  416ab6:	f04f 0380 	mov.w	r3, #128	; 0x80
  416aba:	b672      	cpsid	i
  416abc:	f383 8811 	msr	BASEPRI, r3
  416ac0:	f3bf 8f6f 	isb	sy
  416ac4:	f3bf 8f4f 	dsb	sy
  416ac8:	b662      	cpsie	i
  416aca:	e7fe      	b.n	416aca <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  416acc:	4b03      	ldr	r3, [pc, #12]	; (416adc <vTaskPlaceOnEventListRestricted+0x64>)
  416ace:	6819      	ldr	r1, [r3, #0]
  416ad0:	3104      	adds	r1, #4
  416ad2:	4808      	ldr	r0, [pc, #32]	; (416af4 <vTaskPlaceOnEventListRestricted+0x7c>)
  416ad4:	4b02      	ldr	r3, [pc, #8]	; (416ae0 <vTaskPlaceOnEventListRestricted+0x68>)
  416ad6:	4798      	blx	r3
  416ad8:	bd70      	pop	{r4, r5, r6, pc}
  416ada:	bf00      	nop
  416adc:	204143a4 	.word	0x204143a4
  416ae0:	004155e9 	.word	0x004155e9
  416ae4:	00415635 	.word	0x00415635
  416ae8:	20414428 	.word	0x20414428
  416aec:	2041449c 	.word	0x2041449c
  416af0:	00416259 	.word	0x00416259
  416af4:	20414474 	.word	0x20414474

00416af8 <xTaskRemoveFromEventList>:
{
  416af8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  416afa:	68c3      	ldr	r3, [r0, #12]
  416afc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  416afe:	b324      	cbz	r4, 416b4a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  416b00:	f104 0518 	add.w	r5, r4, #24
  416b04:	4628      	mov	r0, r5
  416b06:	4b1a      	ldr	r3, [pc, #104]	; (416b70 <xTaskRemoveFromEventList+0x78>)
  416b08:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  416b0a:	4b1a      	ldr	r3, [pc, #104]	; (416b74 <xTaskRemoveFromEventList+0x7c>)
  416b0c:	681b      	ldr	r3, [r3, #0]
  416b0e:	bb3b      	cbnz	r3, 416b60 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  416b10:	1d25      	adds	r5, r4, #4
  416b12:	4628      	mov	r0, r5
  416b14:	4b16      	ldr	r3, [pc, #88]	; (416b70 <xTaskRemoveFromEventList+0x78>)
  416b16:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  416b18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  416b1a:	4a17      	ldr	r2, [pc, #92]	; (416b78 <xTaskRemoveFromEventList+0x80>)
  416b1c:	6811      	ldr	r1, [r2, #0]
  416b1e:	2301      	movs	r3, #1
  416b20:	4083      	lsls	r3, r0
  416b22:	430b      	orrs	r3, r1
  416b24:	6013      	str	r3, [r2, #0]
  416b26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  416b2a:	4629      	mov	r1, r5
  416b2c:	4b13      	ldr	r3, [pc, #76]	; (416b7c <xTaskRemoveFromEventList+0x84>)
  416b2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  416b32:	4b13      	ldr	r3, [pc, #76]	; (416b80 <xTaskRemoveFromEventList+0x88>)
  416b34:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  416b36:	4b13      	ldr	r3, [pc, #76]	; (416b84 <xTaskRemoveFromEventList+0x8c>)
  416b38:	681b      	ldr	r3, [r3, #0]
  416b3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  416b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  416b3e:	429a      	cmp	r2, r3
  416b40:	d913      	bls.n	416b6a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  416b42:	2001      	movs	r0, #1
  416b44:	4b10      	ldr	r3, [pc, #64]	; (416b88 <xTaskRemoveFromEventList+0x90>)
  416b46:	6018      	str	r0, [r3, #0]
  416b48:	bd38      	pop	{r3, r4, r5, pc}
  416b4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  416b4e:	b672      	cpsid	i
  416b50:	f383 8811 	msr	BASEPRI, r3
  416b54:	f3bf 8f6f 	isb	sy
  416b58:	f3bf 8f4f 	dsb	sy
  416b5c:	b662      	cpsie	i
  416b5e:	e7fe      	b.n	416b5e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  416b60:	4629      	mov	r1, r5
  416b62:	480a      	ldr	r0, [pc, #40]	; (416b8c <xTaskRemoveFromEventList+0x94>)
  416b64:	4b06      	ldr	r3, [pc, #24]	; (416b80 <xTaskRemoveFromEventList+0x88>)
  416b66:	4798      	blx	r3
  416b68:	e7e5      	b.n	416b36 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  416b6a:	2000      	movs	r0, #0
}
  416b6c:	bd38      	pop	{r3, r4, r5, pc}
  416b6e:	bf00      	nop
  416b70:	00415635 	.word	0x00415635
  416b74:	2041441c 	.word	0x2041441c
  416b78:	20414428 	.word	0x20414428
  416b7c:	204143b0 	.word	0x204143b0
  416b80:	004155e9 	.word	0x004155e9
  416b84:	204143a4 	.word	0x204143a4
  416b88:	204144a0 	.word	0x204144a0
  416b8c:	2041445c 	.word	0x2041445c

00416b90 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  416b90:	b130      	cbz	r0, 416ba0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  416b92:	4a09      	ldr	r2, [pc, #36]	; (416bb8 <vTaskSetTimeOutState+0x28>)
  416b94:	6812      	ldr	r2, [r2, #0]
  416b96:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  416b98:	4a08      	ldr	r2, [pc, #32]	; (416bbc <vTaskSetTimeOutState+0x2c>)
  416b9a:	6812      	ldr	r2, [r2, #0]
  416b9c:	6042      	str	r2, [r0, #4]
  416b9e:	4770      	bx	lr
  416ba0:	f04f 0380 	mov.w	r3, #128	; 0x80
  416ba4:	b672      	cpsid	i
  416ba6:	f383 8811 	msr	BASEPRI, r3
  416baa:	f3bf 8f6f 	isb	sy
  416bae:	f3bf 8f4f 	dsb	sy
  416bb2:	b662      	cpsie	i
  416bb4:	e7fe      	b.n	416bb4 <vTaskSetTimeOutState+0x24>
  416bb6:	bf00      	nop
  416bb8:	20414458 	.word	0x20414458
  416bbc:	2041449c 	.word	0x2041449c

00416bc0 <xTaskCheckForTimeOut>:
{
  416bc0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  416bc2:	b1c0      	cbz	r0, 416bf6 <xTaskCheckForTimeOut+0x36>
  416bc4:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  416bc6:	b309      	cbz	r1, 416c0c <xTaskCheckForTimeOut+0x4c>
  416bc8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  416bca:	4b1d      	ldr	r3, [pc, #116]	; (416c40 <xTaskCheckForTimeOut+0x80>)
  416bcc:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  416bce:	4b1d      	ldr	r3, [pc, #116]	; (416c44 <xTaskCheckForTimeOut+0x84>)
  416bd0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  416bd2:	682b      	ldr	r3, [r5, #0]
  416bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
  416bd8:	d02e      	beq.n	416c38 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  416bda:	491b      	ldr	r1, [pc, #108]	; (416c48 <xTaskCheckForTimeOut+0x88>)
  416bdc:	6809      	ldr	r1, [r1, #0]
  416bde:	6820      	ldr	r0, [r4, #0]
  416be0:	4288      	cmp	r0, r1
  416be2:	d002      	beq.n	416bea <xTaskCheckForTimeOut+0x2a>
  416be4:	6861      	ldr	r1, [r4, #4]
  416be6:	428a      	cmp	r2, r1
  416be8:	d228      	bcs.n	416c3c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  416bea:	6861      	ldr	r1, [r4, #4]
  416bec:	1a50      	subs	r0, r2, r1
  416bee:	4283      	cmp	r3, r0
  416bf0:	d817      	bhi.n	416c22 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  416bf2:	2401      	movs	r4, #1
  416bf4:	e01c      	b.n	416c30 <xTaskCheckForTimeOut+0x70>
  416bf6:	f04f 0380 	mov.w	r3, #128	; 0x80
  416bfa:	b672      	cpsid	i
  416bfc:	f383 8811 	msr	BASEPRI, r3
  416c00:	f3bf 8f6f 	isb	sy
  416c04:	f3bf 8f4f 	dsb	sy
  416c08:	b662      	cpsie	i
  416c0a:	e7fe      	b.n	416c0a <xTaskCheckForTimeOut+0x4a>
  416c0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  416c10:	b672      	cpsid	i
  416c12:	f383 8811 	msr	BASEPRI, r3
  416c16:	f3bf 8f6f 	isb	sy
  416c1a:	f3bf 8f4f 	dsb	sy
  416c1e:	b662      	cpsie	i
  416c20:	e7fe      	b.n	416c20 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  416c22:	1a9b      	subs	r3, r3, r2
  416c24:	440b      	add	r3, r1
  416c26:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  416c28:	4620      	mov	r0, r4
  416c2a:	4b08      	ldr	r3, [pc, #32]	; (416c4c <xTaskCheckForTimeOut+0x8c>)
  416c2c:	4798      	blx	r3
			xReturn = pdFALSE;
  416c2e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  416c30:	4b07      	ldr	r3, [pc, #28]	; (416c50 <xTaskCheckForTimeOut+0x90>)
  416c32:	4798      	blx	r3
}
  416c34:	4620      	mov	r0, r4
  416c36:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  416c38:	2400      	movs	r4, #0
  416c3a:	e7f9      	b.n	416c30 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  416c3c:	2401      	movs	r4, #1
  416c3e:	e7f7      	b.n	416c30 <xTaskCheckForTimeOut+0x70>
  416c40:	00415719 	.word	0x00415719
  416c44:	2041449c 	.word	0x2041449c
  416c48:	20414458 	.word	0x20414458
  416c4c:	00416b91 	.word	0x00416b91
  416c50:	00415765 	.word	0x00415765

00416c54 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  416c54:	2201      	movs	r2, #1
  416c56:	4b01      	ldr	r3, [pc, #4]	; (416c5c <vTaskMissedYield+0x8>)
  416c58:	601a      	str	r2, [r3, #0]
  416c5a:	4770      	bx	lr
  416c5c:	204144a0 	.word	0x204144a0

00416c60 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  416c60:	4b05      	ldr	r3, [pc, #20]	; (416c78 <xTaskGetSchedulerState+0x18>)
  416c62:	681b      	ldr	r3, [r3, #0]
  416c64:	b133      	cbz	r3, 416c74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  416c66:	4b05      	ldr	r3, [pc, #20]	; (416c7c <xTaskGetSchedulerState+0x1c>)
  416c68:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  416c6a:	2b00      	cmp	r3, #0
  416c6c:	bf0c      	ite	eq
  416c6e:	2002      	moveq	r0, #2
  416c70:	2000      	movne	r0, #0
  416c72:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  416c74:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  416c76:	4770      	bx	lr
  416c78:	20414470 	.word	0x20414470
  416c7c:	2041441c 	.word	0x2041441c

00416c80 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  416c80:	2800      	cmp	r0, #0
  416c82:	d044      	beq.n	416d0e <vTaskPriorityInherit+0x8e>
	{
  416c84:	b538      	push	{r3, r4, r5, lr}
  416c86:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  416c88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  416c8a:	4921      	ldr	r1, [pc, #132]	; (416d10 <vTaskPriorityInherit+0x90>)
  416c8c:	6809      	ldr	r1, [r1, #0]
  416c8e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  416c90:	428a      	cmp	r2, r1
  416c92:	d214      	bcs.n	416cbe <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  416c94:	6981      	ldr	r1, [r0, #24]
  416c96:	2900      	cmp	r1, #0
  416c98:	db05      	blt.n	416ca6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  416c9a:	491d      	ldr	r1, [pc, #116]	; (416d10 <vTaskPriorityInherit+0x90>)
  416c9c:	6809      	ldr	r1, [r1, #0]
  416c9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  416ca0:	f1c1 0105 	rsb	r1, r1, #5
  416ca4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  416ca6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  416caa:	491a      	ldr	r1, [pc, #104]	; (416d14 <vTaskPriorityInherit+0x94>)
  416cac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  416cb0:	6961      	ldr	r1, [r4, #20]
  416cb2:	4291      	cmp	r1, r2
  416cb4:	d004      	beq.n	416cc0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  416cb6:	4a16      	ldr	r2, [pc, #88]	; (416d10 <vTaskPriorityInherit+0x90>)
  416cb8:	6812      	ldr	r2, [r2, #0]
  416cba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  416cbc:	62e2      	str	r2, [r4, #44]	; 0x2c
  416cbe:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  416cc0:	1d25      	adds	r5, r4, #4
  416cc2:	4628      	mov	r0, r5
  416cc4:	4b14      	ldr	r3, [pc, #80]	; (416d18 <vTaskPriorityInherit+0x98>)
  416cc6:	4798      	blx	r3
  416cc8:	b970      	cbnz	r0, 416ce8 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  416cca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  416ccc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  416cd0:	4a10      	ldr	r2, [pc, #64]	; (416d14 <vTaskPriorityInherit+0x94>)
  416cd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  416cd6:	b93a      	cbnz	r2, 416ce8 <vTaskPriorityInherit+0x68>
  416cd8:	4810      	ldr	r0, [pc, #64]	; (416d1c <vTaskPriorityInherit+0x9c>)
  416cda:	6802      	ldr	r2, [r0, #0]
  416cdc:	2101      	movs	r1, #1
  416cde:	fa01 f303 	lsl.w	r3, r1, r3
  416ce2:	ea22 0303 	bic.w	r3, r2, r3
  416ce6:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  416ce8:	4b09      	ldr	r3, [pc, #36]	; (416d10 <vTaskPriorityInherit+0x90>)
  416cea:	681b      	ldr	r3, [r3, #0]
  416cec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  416cee:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  416cf0:	4a0a      	ldr	r2, [pc, #40]	; (416d1c <vTaskPriorityInherit+0x9c>)
  416cf2:	6811      	ldr	r1, [r2, #0]
  416cf4:	2301      	movs	r3, #1
  416cf6:	4083      	lsls	r3, r0
  416cf8:	430b      	orrs	r3, r1
  416cfa:	6013      	str	r3, [r2, #0]
  416cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  416d00:	4629      	mov	r1, r5
  416d02:	4b04      	ldr	r3, [pc, #16]	; (416d14 <vTaskPriorityInherit+0x94>)
  416d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  416d08:	4b05      	ldr	r3, [pc, #20]	; (416d20 <vTaskPriorityInherit+0xa0>)
  416d0a:	4798      	blx	r3
  416d0c:	bd38      	pop	{r3, r4, r5, pc}
  416d0e:	4770      	bx	lr
  416d10:	204143a4 	.word	0x204143a4
  416d14:	204143b0 	.word	0x204143b0
  416d18:	00415635 	.word	0x00415635
  416d1c:	20414428 	.word	0x20414428
  416d20:	004155e9 	.word	0x004155e9

00416d24 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  416d24:	2800      	cmp	r0, #0
  416d26:	d04d      	beq.n	416dc4 <xTaskPriorityDisinherit+0xa0>
	{
  416d28:	b538      	push	{r3, r4, r5, lr}
  416d2a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  416d2c:	4a27      	ldr	r2, [pc, #156]	; (416dcc <xTaskPriorityDisinherit+0xa8>)
  416d2e:	6812      	ldr	r2, [r2, #0]
  416d30:	4290      	cmp	r0, r2
  416d32:	d00a      	beq.n	416d4a <xTaskPriorityDisinherit+0x26>
  416d34:	f04f 0380 	mov.w	r3, #128	; 0x80
  416d38:	b672      	cpsid	i
  416d3a:	f383 8811 	msr	BASEPRI, r3
  416d3e:	f3bf 8f6f 	isb	sy
  416d42:	f3bf 8f4f 	dsb	sy
  416d46:	b662      	cpsie	i
  416d48:	e7fe      	b.n	416d48 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  416d4a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  416d4c:	b952      	cbnz	r2, 416d64 <xTaskPriorityDisinherit+0x40>
  416d4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  416d52:	b672      	cpsid	i
  416d54:	f383 8811 	msr	BASEPRI, r3
  416d58:	f3bf 8f6f 	isb	sy
  416d5c:	f3bf 8f4f 	dsb	sy
  416d60:	b662      	cpsie	i
  416d62:	e7fe      	b.n	416d62 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  416d64:	3a01      	subs	r2, #1
  416d66:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  416d68:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  416d6a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  416d6c:	4288      	cmp	r0, r1
  416d6e:	d02b      	beq.n	416dc8 <xTaskPriorityDisinherit+0xa4>
  416d70:	bb52      	cbnz	r2, 416dc8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  416d72:	1d25      	adds	r5, r4, #4
  416d74:	4628      	mov	r0, r5
  416d76:	4b16      	ldr	r3, [pc, #88]	; (416dd0 <xTaskPriorityDisinherit+0xac>)
  416d78:	4798      	blx	r3
  416d7a:	b968      	cbnz	r0, 416d98 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  416d7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  416d7e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  416d82:	4b14      	ldr	r3, [pc, #80]	; (416dd4 <xTaskPriorityDisinherit+0xb0>)
  416d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  416d88:	b933      	cbnz	r3, 416d98 <xTaskPriorityDisinherit+0x74>
  416d8a:	4813      	ldr	r0, [pc, #76]	; (416dd8 <xTaskPriorityDisinherit+0xb4>)
  416d8c:	6803      	ldr	r3, [r0, #0]
  416d8e:	2201      	movs	r2, #1
  416d90:	408a      	lsls	r2, r1
  416d92:	ea23 0302 	bic.w	r3, r3, r2
  416d96:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  416d98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  416d9a:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  416d9c:	f1c0 0305 	rsb	r3, r0, #5
  416da0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  416da2:	4a0d      	ldr	r2, [pc, #52]	; (416dd8 <xTaskPriorityDisinherit+0xb4>)
  416da4:	6811      	ldr	r1, [r2, #0]
  416da6:	2401      	movs	r4, #1
  416da8:	fa04 f300 	lsl.w	r3, r4, r0
  416dac:	430b      	orrs	r3, r1
  416dae:	6013      	str	r3, [r2, #0]
  416db0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  416db4:	4629      	mov	r1, r5
  416db6:	4b07      	ldr	r3, [pc, #28]	; (416dd4 <xTaskPriorityDisinherit+0xb0>)
  416db8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  416dbc:	4b07      	ldr	r3, [pc, #28]	; (416ddc <xTaskPriorityDisinherit+0xb8>)
  416dbe:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  416dc0:	4620      	mov	r0, r4
  416dc2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  416dc4:	2000      	movs	r0, #0
  416dc6:	4770      	bx	lr
  416dc8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  416dca:	bd38      	pop	{r3, r4, r5, pc}
  416dcc:	204143a4 	.word	0x204143a4
  416dd0:	00415635 	.word	0x00415635
  416dd4:	204143b0 	.word	0x204143b0
  416dd8:	20414428 	.word	0x20414428
  416ddc:	004155e9 	.word	0x004155e9

00416de0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  416de0:	4b05      	ldr	r3, [pc, #20]	; (416df8 <pvTaskIncrementMutexHeldCount+0x18>)
  416de2:	681b      	ldr	r3, [r3, #0]
  416de4:	b123      	cbz	r3, 416df0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  416de6:	4b04      	ldr	r3, [pc, #16]	; (416df8 <pvTaskIncrementMutexHeldCount+0x18>)
  416de8:	681a      	ldr	r2, [r3, #0]
  416dea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  416dec:	3301      	adds	r3, #1
  416dee:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  416df0:	4b01      	ldr	r3, [pc, #4]	; (416df8 <pvTaskIncrementMutexHeldCount+0x18>)
  416df2:	6818      	ldr	r0, [r3, #0]
	}
  416df4:	4770      	bx	lr
  416df6:	bf00      	nop
  416df8:	204143a4 	.word	0x204143a4

00416dfc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  416dfc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  416dfe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  416e00:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  416e02:	4291      	cmp	r1, r2
  416e04:	d80c      	bhi.n	416e20 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  416e06:	1ad2      	subs	r2, r2, r3
  416e08:	6983      	ldr	r3, [r0, #24]
  416e0a:	429a      	cmp	r2, r3
  416e0c:	d301      	bcc.n	416e12 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  416e0e:	2001      	movs	r0, #1
  416e10:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  416e12:	1d01      	adds	r1, r0, #4
  416e14:	4b09      	ldr	r3, [pc, #36]	; (416e3c <prvInsertTimerInActiveList+0x40>)
  416e16:	6818      	ldr	r0, [r3, #0]
  416e18:	4b09      	ldr	r3, [pc, #36]	; (416e40 <prvInsertTimerInActiveList+0x44>)
  416e1a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  416e1c:	2000      	movs	r0, #0
  416e1e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  416e20:	429a      	cmp	r2, r3
  416e22:	d203      	bcs.n	416e2c <prvInsertTimerInActiveList+0x30>
  416e24:	4299      	cmp	r1, r3
  416e26:	d301      	bcc.n	416e2c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  416e28:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  416e2a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  416e2c:	1d01      	adds	r1, r0, #4
  416e2e:	4b05      	ldr	r3, [pc, #20]	; (416e44 <prvInsertTimerInActiveList+0x48>)
  416e30:	6818      	ldr	r0, [r3, #0]
  416e32:	4b03      	ldr	r3, [pc, #12]	; (416e40 <prvInsertTimerInActiveList+0x44>)
  416e34:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  416e36:	2000      	movs	r0, #0
  416e38:	bd08      	pop	{r3, pc}
  416e3a:	bf00      	nop
  416e3c:	204144a8 	.word	0x204144a8
  416e40:	00415601 	.word	0x00415601
  416e44:	204144a4 	.word	0x204144a4

00416e48 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  416e48:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  416e4a:	4b15      	ldr	r3, [pc, #84]	; (416ea0 <prvCheckForValidListAndQueue+0x58>)
  416e4c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  416e4e:	4b15      	ldr	r3, [pc, #84]	; (416ea4 <prvCheckForValidListAndQueue+0x5c>)
  416e50:	681b      	ldr	r3, [r3, #0]
  416e52:	b113      	cbz	r3, 416e5a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  416e54:	4b14      	ldr	r3, [pc, #80]	; (416ea8 <prvCheckForValidListAndQueue+0x60>)
  416e56:	4798      	blx	r3
  416e58:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  416e5a:	4d14      	ldr	r5, [pc, #80]	; (416eac <prvCheckForValidListAndQueue+0x64>)
  416e5c:	4628      	mov	r0, r5
  416e5e:	4e14      	ldr	r6, [pc, #80]	; (416eb0 <prvCheckForValidListAndQueue+0x68>)
  416e60:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  416e62:	4c14      	ldr	r4, [pc, #80]	; (416eb4 <prvCheckForValidListAndQueue+0x6c>)
  416e64:	4620      	mov	r0, r4
  416e66:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  416e68:	4b13      	ldr	r3, [pc, #76]	; (416eb8 <prvCheckForValidListAndQueue+0x70>)
  416e6a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  416e6c:	4b13      	ldr	r3, [pc, #76]	; (416ebc <prvCheckForValidListAndQueue+0x74>)
  416e6e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  416e70:	2200      	movs	r2, #0
  416e72:	2110      	movs	r1, #16
  416e74:	2005      	movs	r0, #5
  416e76:	4b12      	ldr	r3, [pc, #72]	; (416ec0 <prvCheckForValidListAndQueue+0x78>)
  416e78:	4798      	blx	r3
  416e7a:	4b0a      	ldr	r3, [pc, #40]	; (416ea4 <prvCheckForValidListAndQueue+0x5c>)
  416e7c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  416e7e:	b118      	cbz	r0, 416e88 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  416e80:	4910      	ldr	r1, [pc, #64]	; (416ec4 <prvCheckForValidListAndQueue+0x7c>)
  416e82:	4b11      	ldr	r3, [pc, #68]	; (416ec8 <prvCheckForValidListAndQueue+0x80>)
  416e84:	4798      	blx	r3
  416e86:	e7e5      	b.n	416e54 <prvCheckForValidListAndQueue+0xc>
  416e88:	f04f 0380 	mov.w	r3, #128	; 0x80
  416e8c:	b672      	cpsid	i
  416e8e:	f383 8811 	msr	BASEPRI, r3
  416e92:	f3bf 8f6f 	isb	sy
  416e96:	f3bf 8f4f 	dsb	sy
  416e9a:	b662      	cpsie	i
  416e9c:	e7fe      	b.n	416e9c <prvCheckForValidListAndQueue+0x54>
  416e9e:	bf00      	nop
  416ea0:	00415719 	.word	0x00415719
  416ea4:	204144d8 	.word	0x204144d8
  416ea8:	00415765 	.word	0x00415765
  416eac:	204144ac 	.word	0x204144ac
  416eb0:	004155cd 	.word	0x004155cd
  416eb4:	204144c0 	.word	0x204144c0
  416eb8:	204144a4 	.word	0x204144a4
  416ebc:	204144a8 	.word	0x204144a8
  416ec0:	00415c71 	.word	0x00415c71
  416ec4:	00422dd0 	.word	0x00422dd0
  416ec8:	004161a1 	.word	0x004161a1

00416ecc <xTimerCreateTimerTask>:
{
  416ecc:	b510      	push	{r4, lr}
  416ece:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  416ed0:	4b0f      	ldr	r3, [pc, #60]	; (416f10 <xTimerCreateTimerTask+0x44>)
  416ed2:	4798      	blx	r3
	if( xTimerQueue != NULL )
  416ed4:	4b0f      	ldr	r3, [pc, #60]	; (416f14 <xTimerCreateTimerTask+0x48>)
  416ed6:	681b      	ldr	r3, [r3, #0]
  416ed8:	b173      	cbz	r3, 416ef8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  416eda:	2300      	movs	r3, #0
  416edc:	9303      	str	r3, [sp, #12]
  416ede:	9302      	str	r3, [sp, #8]
  416ee0:	9301      	str	r3, [sp, #4]
  416ee2:	2204      	movs	r2, #4
  416ee4:	9200      	str	r2, [sp, #0]
  416ee6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  416eea:	490b      	ldr	r1, [pc, #44]	; (416f18 <xTimerCreateTimerTask+0x4c>)
  416eec:	480b      	ldr	r0, [pc, #44]	; (416f1c <xTimerCreateTimerTask+0x50>)
  416eee:	4c0c      	ldr	r4, [pc, #48]	; (416f20 <xTimerCreateTimerTask+0x54>)
  416ef0:	47a0      	blx	r4
	configASSERT( xReturn );
  416ef2:	b108      	cbz	r0, 416ef8 <xTimerCreateTimerTask+0x2c>
}
  416ef4:	b004      	add	sp, #16
  416ef6:	bd10      	pop	{r4, pc}
  416ef8:	f04f 0380 	mov.w	r3, #128	; 0x80
  416efc:	b672      	cpsid	i
  416efe:	f383 8811 	msr	BASEPRI, r3
  416f02:	f3bf 8f6f 	isb	sy
  416f06:	f3bf 8f4f 	dsb	sy
  416f0a:	b662      	cpsie	i
  416f0c:	e7fe      	b.n	416f0c <xTimerCreateTimerTask+0x40>
  416f0e:	bf00      	nop
  416f10:	00416e49 	.word	0x00416e49
  416f14:	204144d8 	.word	0x204144d8
  416f18:	00422dd8 	.word	0x00422dd8
  416f1c:	0041704d 	.word	0x0041704d
  416f20:	004162b1 	.word	0x004162b1

00416f24 <xTimerGenericCommand>:
	configASSERT( xTimer );
  416f24:	b1d8      	cbz	r0, 416f5e <xTimerGenericCommand+0x3a>
{
  416f26:	b530      	push	{r4, r5, lr}
  416f28:	b085      	sub	sp, #20
  416f2a:	4615      	mov	r5, r2
  416f2c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  416f2e:	4a15      	ldr	r2, [pc, #84]	; (416f84 <xTimerGenericCommand+0x60>)
  416f30:	6810      	ldr	r0, [r2, #0]
  416f32:	b320      	cbz	r0, 416f7e <xTimerGenericCommand+0x5a>
  416f34:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  416f36:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  416f38:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  416f3a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  416f3c:	2905      	cmp	r1, #5
  416f3e:	dc19      	bgt.n	416f74 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  416f40:	4b11      	ldr	r3, [pc, #68]	; (416f88 <xTimerGenericCommand+0x64>)
  416f42:	4798      	blx	r3
  416f44:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  416f46:	f04f 0300 	mov.w	r3, #0
  416f4a:	bf0c      	ite	eq
  416f4c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  416f4e:	461a      	movne	r2, r3
  416f50:	4669      	mov	r1, sp
  416f52:	480c      	ldr	r0, [pc, #48]	; (416f84 <xTimerGenericCommand+0x60>)
  416f54:	6800      	ldr	r0, [r0, #0]
  416f56:	4c0d      	ldr	r4, [pc, #52]	; (416f8c <xTimerGenericCommand+0x68>)
  416f58:	47a0      	blx	r4
}
  416f5a:	b005      	add	sp, #20
  416f5c:	bd30      	pop	{r4, r5, pc}
  416f5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  416f62:	b672      	cpsid	i
  416f64:	f383 8811 	msr	BASEPRI, r3
  416f68:	f3bf 8f6f 	isb	sy
  416f6c:	f3bf 8f4f 	dsb	sy
  416f70:	b662      	cpsie	i
  416f72:	e7fe      	b.n	416f72 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  416f74:	2300      	movs	r3, #0
  416f76:	4669      	mov	r1, sp
  416f78:	4c05      	ldr	r4, [pc, #20]	; (416f90 <xTimerGenericCommand+0x6c>)
  416f7a:	47a0      	blx	r4
  416f7c:	e7ed      	b.n	416f5a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  416f7e:	2000      	movs	r0, #0
	return xReturn;
  416f80:	e7eb      	b.n	416f5a <xTimerGenericCommand+0x36>
  416f82:	bf00      	nop
  416f84:	204144d8 	.word	0x204144d8
  416f88:	00416c61 	.word	0x00416c61
  416f8c:	00415ced 	.word	0x00415ced
  416f90:	00415ed1 	.word	0x00415ed1

00416f94 <prvSampleTimeNow>:
{
  416f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  416f98:	b082      	sub	sp, #8
  416f9a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  416f9c:	4b24      	ldr	r3, [pc, #144]	; (417030 <prvSampleTimeNow+0x9c>)
  416f9e:	4798      	blx	r3
  416fa0:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  416fa2:	4b24      	ldr	r3, [pc, #144]	; (417034 <prvSampleTimeNow+0xa0>)
  416fa4:	681b      	ldr	r3, [r3, #0]
  416fa6:	4298      	cmp	r0, r3
  416fa8:	d31b      	bcc.n	416fe2 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  416faa:	2300      	movs	r3, #0
  416fac:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  416fb0:	4b20      	ldr	r3, [pc, #128]	; (417034 <prvSampleTimeNow+0xa0>)
  416fb2:	601f      	str	r7, [r3, #0]
}
  416fb4:	4638      	mov	r0, r7
  416fb6:	b002      	add	sp, #8
  416fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  416fbc:	2100      	movs	r1, #0
  416fbe:	9100      	str	r1, [sp, #0]
  416fc0:	460b      	mov	r3, r1
  416fc2:	4652      	mov	r2, sl
  416fc4:	4620      	mov	r0, r4
  416fc6:	4c1c      	ldr	r4, [pc, #112]	; (417038 <prvSampleTimeNow+0xa4>)
  416fc8:	47a0      	blx	r4
				configASSERT( xResult );
  416fca:	b960      	cbnz	r0, 416fe6 <prvSampleTimeNow+0x52>
  416fcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  416fd0:	b672      	cpsid	i
  416fd2:	f383 8811 	msr	BASEPRI, r3
  416fd6:	f3bf 8f6f 	isb	sy
  416fda:	f3bf 8f4f 	dsb	sy
  416fde:	b662      	cpsie	i
  416fe0:	e7fe      	b.n	416fe0 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  416fe2:	4d16      	ldr	r5, [pc, #88]	; (41703c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  416fe4:	4e16      	ldr	r6, [pc, #88]	; (417040 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  416fe6:	682b      	ldr	r3, [r5, #0]
  416fe8:	681a      	ldr	r2, [r3, #0]
  416fea:	b1c2      	cbz	r2, 41701e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  416fec:	68db      	ldr	r3, [r3, #12]
  416fee:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  416ff2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  416ff4:	f104 0904 	add.w	r9, r4, #4
  416ff8:	4648      	mov	r0, r9
  416ffa:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  416ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  416ffe:	4620      	mov	r0, r4
  417000:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  417002:	69e3      	ldr	r3, [r4, #28]
  417004:	2b01      	cmp	r3, #1
  417006:	d1ee      	bne.n	416fe6 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  417008:	69a3      	ldr	r3, [r4, #24]
  41700a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  41700c:	459a      	cmp	sl, r3
  41700e:	d2d5      	bcs.n	416fbc <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  417010:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  417012:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  417014:	4649      	mov	r1, r9
  417016:	6828      	ldr	r0, [r5, #0]
  417018:	4b0a      	ldr	r3, [pc, #40]	; (417044 <prvSampleTimeNow+0xb0>)
  41701a:	4798      	blx	r3
  41701c:	e7e3      	b.n	416fe6 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  41701e:	4a0a      	ldr	r2, [pc, #40]	; (417048 <prvSampleTimeNow+0xb4>)
  417020:	6810      	ldr	r0, [r2, #0]
  417022:	4906      	ldr	r1, [pc, #24]	; (41703c <prvSampleTimeNow+0xa8>)
  417024:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  417026:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  417028:	2301      	movs	r3, #1
  41702a:	f8c8 3000 	str.w	r3, [r8]
  41702e:	e7bf      	b.n	416fb0 <prvSampleTimeNow+0x1c>
  417030:	00416585 	.word	0x00416585
  417034:	204144d4 	.word	0x204144d4
  417038:	00416f25 	.word	0x00416f25
  41703c:	204144a4 	.word	0x204144a4
  417040:	00415635 	.word	0x00415635
  417044:	00415601 	.word	0x00415601
  417048:	204144a8 	.word	0x204144a8

0041704c <prvTimerTask>:
{
  41704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  417050:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  417052:	4e75      	ldr	r6, [pc, #468]	; (417228 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  417054:	4f75      	ldr	r7, [pc, #468]	; (41722c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  417056:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 417254 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  41705a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 417258 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  41705e:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  417060:	681a      	ldr	r2, [r3, #0]
  417062:	2a00      	cmp	r2, #0
  417064:	f000 80ce 	beq.w	417204 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  417068:	68db      	ldr	r3, [r3, #12]
  41706a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  41706c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  41706e:	a804      	add	r0, sp, #16
  417070:	4b6f      	ldr	r3, [pc, #444]	; (417230 <prvTimerTask+0x1e4>)
  417072:	4798      	blx	r3
  417074:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  417076:	9b04      	ldr	r3, [sp, #16]
  417078:	2b00      	cmp	r3, #0
  41707a:	d144      	bne.n	417106 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  41707c:	42a0      	cmp	r0, r4
  41707e:	d212      	bcs.n	4170a6 <prvTimerTask+0x5a>
  417080:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  417082:	1b61      	subs	r1, r4, r5
  417084:	4b6b      	ldr	r3, [pc, #428]	; (417234 <prvTimerTask+0x1e8>)
  417086:	6818      	ldr	r0, [r3, #0]
  417088:	4b6b      	ldr	r3, [pc, #428]	; (417238 <prvTimerTask+0x1ec>)
  41708a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  41708c:	4b6b      	ldr	r3, [pc, #428]	; (41723c <prvTimerTask+0x1f0>)
  41708e:	4798      	blx	r3
  417090:	2800      	cmp	r0, #0
  417092:	d13a      	bne.n	41710a <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  417094:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  417098:	f8c9 3000 	str.w	r3, [r9]
  41709c:	f3bf 8f4f 	dsb	sy
  4170a0:	f3bf 8f6f 	isb	sy
  4170a4:	e031      	b.n	41710a <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4170a6:	4b65      	ldr	r3, [pc, #404]	; (41723c <prvTimerTask+0x1f0>)
  4170a8:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4170aa:	6833      	ldr	r3, [r6, #0]
  4170ac:	68db      	ldr	r3, [r3, #12]
  4170ae:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4170b2:	f10a 0004 	add.w	r0, sl, #4
  4170b6:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4170b8:	f8da 301c 	ldr.w	r3, [sl, #28]
  4170bc:	2b01      	cmp	r3, #1
  4170be:	d004      	beq.n	4170ca <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4170c0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4170c4:	4650      	mov	r0, sl
  4170c6:	4798      	blx	r3
  4170c8:	e01f      	b.n	41710a <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4170ca:	f8da 1018 	ldr.w	r1, [sl, #24]
  4170ce:	4623      	mov	r3, r4
  4170d0:	462a      	mov	r2, r5
  4170d2:	4421      	add	r1, r4
  4170d4:	4650      	mov	r0, sl
  4170d6:	4d5a      	ldr	r5, [pc, #360]	; (417240 <prvTimerTask+0x1f4>)
  4170d8:	47a8      	blx	r5
  4170da:	2801      	cmp	r0, #1
  4170dc:	d1f0      	bne.n	4170c0 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4170de:	2100      	movs	r1, #0
  4170e0:	9100      	str	r1, [sp, #0]
  4170e2:	460b      	mov	r3, r1
  4170e4:	4622      	mov	r2, r4
  4170e6:	4650      	mov	r0, sl
  4170e8:	4c56      	ldr	r4, [pc, #344]	; (417244 <prvTimerTask+0x1f8>)
  4170ea:	47a0      	blx	r4
			configASSERT( xResult );
  4170ec:	2800      	cmp	r0, #0
  4170ee:	d1e7      	bne.n	4170c0 <prvTimerTask+0x74>
  4170f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4170f4:	b672      	cpsid	i
  4170f6:	f383 8811 	msr	BASEPRI, r3
  4170fa:	f3bf 8f6f 	isb	sy
  4170fe:	f3bf 8f4f 	dsb	sy
  417102:	b662      	cpsie	i
  417104:	e7fe      	b.n	417104 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  417106:	4b4d      	ldr	r3, [pc, #308]	; (41723c <prvTimerTask+0x1f0>)
  417108:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  41710a:	4d4a      	ldr	r5, [pc, #296]	; (417234 <prvTimerTask+0x1e8>)
  41710c:	4c4e      	ldr	r4, [pc, #312]	; (417248 <prvTimerTask+0x1fc>)
  41710e:	e006      	b.n	41711e <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  417110:	9907      	ldr	r1, [sp, #28]
  417112:	9806      	ldr	r0, [sp, #24]
  417114:	9b05      	ldr	r3, [sp, #20]
  417116:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  417118:	9b04      	ldr	r3, [sp, #16]
  41711a:	2b00      	cmp	r3, #0
  41711c:	da09      	bge.n	417132 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  41711e:	2300      	movs	r3, #0
  417120:	461a      	mov	r2, r3
  417122:	a904      	add	r1, sp, #16
  417124:	6828      	ldr	r0, [r5, #0]
  417126:	47a0      	blx	r4
  417128:	2800      	cmp	r0, #0
  41712a:	d098      	beq.n	41705e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  41712c:	9b04      	ldr	r3, [sp, #16]
  41712e:	2b00      	cmp	r3, #0
  417130:	dbee      	blt.n	417110 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  417132:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  417136:	f8da 3014 	ldr.w	r3, [sl, #20]
  41713a:	b113      	cbz	r3, 417142 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  41713c:	f10a 0004 	add.w	r0, sl, #4
  417140:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  417142:	a803      	add	r0, sp, #12
  417144:	4b3a      	ldr	r3, [pc, #232]	; (417230 <prvTimerTask+0x1e4>)
  417146:	4798      	blx	r3
			switch( xMessage.xMessageID )
  417148:	9b04      	ldr	r3, [sp, #16]
  41714a:	2b09      	cmp	r3, #9
  41714c:	d8e7      	bhi.n	41711e <prvTimerTask+0xd2>
  41714e:	a201      	add	r2, pc, #4	; (adr r2, 417154 <prvTimerTask+0x108>)
  417150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  417154:	0041717d 	.word	0x0041717d
  417158:	0041717d 	.word	0x0041717d
  41715c:	0041717d 	.word	0x0041717d
  417160:	0041711f 	.word	0x0041711f
  417164:	004171d1 	.word	0x004171d1
  417168:	004171fd 	.word	0x004171fd
  41716c:	0041717d 	.word	0x0041717d
  417170:	0041717d 	.word	0x0041717d
  417174:	0041711f 	.word	0x0041711f
  417178:	004171d1 	.word	0x004171d1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  41717c:	9c05      	ldr	r4, [sp, #20]
  41717e:	f8da 1018 	ldr.w	r1, [sl, #24]
  417182:	4623      	mov	r3, r4
  417184:	4602      	mov	r2, r0
  417186:	4421      	add	r1, r4
  417188:	4650      	mov	r0, sl
  41718a:	4c2d      	ldr	r4, [pc, #180]	; (417240 <prvTimerTask+0x1f4>)
  41718c:	47a0      	blx	r4
  41718e:	2801      	cmp	r0, #1
  417190:	d1bc      	bne.n	41710c <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  417192:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  417196:	4650      	mov	r0, sl
  417198:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  41719a:	f8da 301c 	ldr.w	r3, [sl, #28]
  41719e:	2b01      	cmp	r3, #1
  4171a0:	d1b4      	bne.n	41710c <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4171a2:	f8da 2018 	ldr.w	r2, [sl, #24]
  4171a6:	2100      	movs	r1, #0
  4171a8:	9100      	str	r1, [sp, #0]
  4171aa:	460b      	mov	r3, r1
  4171ac:	9805      	ldr	r0, [sp, #20]
  4171ae:	4402      	add	r2, r0
  4171b0:	4650      	mov	r0, sl
  4171b2:	4c24      	ldr	r4, [pc, #144]	; (417244 <prvTimerTask+0x1f8>)
  4171b4:	47a0      	blx	r4
							configASSERT( xResult );
  4171b6:	2800      	cmp	r0, #0
  4171b8:	d1a8      	bne.n	41710c <prvTimerTask+0xc0>
  4171ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4171be:	b672      	cpsid	i
  4171c0:	f383 8811 	msr	BASEPRI, r3
  4171c4:	f3bf 8f6f 	isb	sy
  4171c8:	f3bf 8f4f 	dsb	sy
  4171cc:	b662      	cpsie	i
  4171ce:	e7fe      	b.n	4171ce <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4171d0:	9905      	ldr	r1, [sp, #20]
  4171d2:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4171d6:	b131      	cbz	r1, 4171e6 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4171d8:	4603      	mov	r3, r0
  4171da:	4602      	mov	r2, r0
  4171dc:	4401      	add	r1, r0
  4171de:	4650      	mov	r0, sl
  4171e0:	4c17      	ldr	r4, [pc, #92]	; (417240 <prvTimerTask+0x1f4>)
  4171e2:	47a0      	blx	r4
  4171e4:	e792      	b.n	41710c <prvTimerTask+0xc0>
  4171e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4171ea:	b672      	cpsid	i
  4171ec:	f383 8811 	msr	BASEPRI, r3
  4171f0:	f3bf 8f6f 	isb	sy
  4171f4:	f3bf 8f4f 	dsb	sy
  4171f8:	b662      	cpsie	i
  4171fa:	e7fe      	b.n	4171fa <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4171fc:	4650      	mov	r0, sl
  4171fe:	4b13      	ldr	r3, [pc, #76]	; (41724c <prvTimerTask+0x200>)
  417200:	4798      	blx	r3
  417202:	e783      	b.n	41710c <prvTimerTask+0xc0>
	vTaskSuspendAll();
  417204:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  417206:	a804      	add	r0, sp, #16
  417208:	4b09      	ldr	r3, [pc, #36]	; (417230 <prvTimerTask+0x1e4>)
  41720a:	4798      	blx	r3
  41720c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  41720e:	9b04      	ldr	r3, [sp, #16]
  417210:	2b00      	cmp	r3, #0
  417212:	f47f af78 	bne.w	417106 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  417216:	4b0e      	ldr	r3, [pc, #56]	; (417250 <prvTimerTask+0x204>)
  417218:	681b      	ldr	r3, [r3, #0]
  41721a:	681a      	ldr	r2, [r3, #0]
  41721c:	fab2 f282 	clz	r2, r2
  417220:	0952      	lsrs	r2, r2, #5
  417222:	2400      	movs	r4, #0
  417224:	e72d      	b.n	417082 <prvTimerTask+0x36>
  417226:	bf00      	nop
  417228:	204144a4 	.word	0x204144a4
  41722c:	00416575 	.word	0x00416575
  417230:	00416f95 	.word	0x00416f95
  417234:	204144d8 	.word	0x204144d8
  417238:	004161d5 	.word	0x004161d5
  41723c:	004166dd 	.word	0x004166dd
  417240:	00416dfd 	.word	0x00416dfd
  417244:	00416f25 	.word	0x00416f25
  417248:	00415fd1 	.word	0x00415fd1
  41724c:	004159e5 	.word	0x004159e5
  417250:	204144a8 	.word	0x204144a8
  417254:	e000ed04 	.word	0xe000ed04
  417258:	00415635 	.word	0x00415635

0041725c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  41725c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  41725e:	4810      	ldr	r0, [pc, #64]	; (4172a0 <sysclk_init+0x44>)
  417260:	4b10      	ldr	r3, [pc, #64]	; (4172a4 <sysclk_init+0x48>)
  417262:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  417264:	213e      	movs	r1, #62	; 0x3e
  417266:	2000      	movs	r0, #0
  417268:	4b0f      	ldr	r3, [pc, #60]	; (4172a8 <sysclk_init+0x4c>)
  41726a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  41726c:	4c0f      	ldr	r4, [pc, #60]	; (4172ac <sysclk_init+0x50>)
  41726e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  417270:	2800      	cmp	r0, #0
  417272:	d0fc      	beq.n	41726e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  417274:	4b0e      	ldr	r3, [pc, #56]	; (4172b0 <sysclk_init+0x54>)
  417276:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  417278:	4a0e      	ldr	r2, [pc, #56]	; (4172b4 <sysclk_init+0x58>)
  41727a:	4b0f      	ldr	r3, [pc, #60]	; (4172b8 <sysclk_init+0x5c>)
  41727c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  41727e:	4c0f      	ldr	r4, [pc, #60]	; (4172bc <sysclk_init+0x60>)
  417280:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  417282:	2800      	cmp	r0, #0
  417284:	d0fc      	beq.n	417280 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  417286:	2002      	movs	r0, #2
  417288:	4b0d      	ldr	r3, [pc, #52]	; (4172c0 <sysclk_init+0x64>)
  41728a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  41728c:	2000      	movs	r0, #0
  41728e:	4b0d      	ldr	r3, [pc, #52]	; (4172c4 <sysclk_init+0x68>)
  417290:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  417292:	4b0d      	ldr	r3, [pc, #52]	; (4172c8 <sysclk_init+0x6c>)
  417294:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  417296:	480d      	ldr	r0, [pc, #52]	; (4172cc <sysclk_init+0x70>)
  417298:	4b02      	ldr	r3, [pc, #8]	; (4172a4 <sysclk_init+0x48>)
  41729a:	4798      	blx	r3
  41729c:	bd10      	pop	{r4, pc}
  41729e:	bf00      	nop
  4172a0:	07270e00 	.word	0x07270e00
  4172a4:	0041803d 	.word	0x0041803d
  4172a8:	00417b45 	.word	0x00417b45
  4172ac:	00417b99 	.word	0x00417b99
  4172b0:	00417ba9 	.word	0x00417ba9
  4172b4:	20183f01 	.word	0x20183f01
  4172b8:	400e0600 	.word	0x400e0600
  4172bc:	00417bb9 	.word	0x00417bb9
  4172c0:	00417aa9 	.word	0x00417aa9
  4172c4:	00417ae1 	.word	0x00417ae1
  4172c8:	00417f31 	.word	0x00417f31
  4172cc:	11e1a300 	.word	0x11e1a300

004172d0 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4172d0:	b510      	push	{r4, lr}
  4172d2:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4172d4:	4b10      	ldr	r3, [pc, #64]	; (417318 <spi_master_init+0x48>)
  4172d6:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  4172d8:	2380      	movs	r3, #128	; 0x80
  4172da:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4172dc:	6863      	ldr	r3, [r4, #4]
  4172de:	f043 0301 	orr.w	r3, r3, #1
  4172e2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4172e4:	6863      	ldr	r3, [r4, #4]
  4172e6:	f043 0310 	orr.w	r3, r3, #16
  4172ea:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4172ec:	6863      	ldr	r3, [r4, #4]
  4172ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4172f2:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4172f4:	2100      	movs	r1, #0
  4172f6:	4620      	mov	r0, r4
  4172f8:	4b08      	ldr	r3, [pc, #32]	; (41731c <spi_master_init+0x4c>)
  4172fa:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4172fc:	6863      	ldr	r3, [r4, #4]
  4172fe:	f023 0302 	bic.w	r3, r3, #2
  417302:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  417304:	6863      	ldr	r3, [r4, #4]
  417306:	f023 0304 	bic.w	r3, r3, #4
  41730a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  41730c:	2100      	movs	r1, #0
  41730e:	4620      	mov	r0, r4
  417310:	4b03      	ldr	r3, [pc, #12]	; (417320 <spi_master_init+0x50>)
  417312:	4798      	blx	r3
  417314:	bd10      	pop	{r4, pc}
  417316:	bf00      	nop
  417318:	00417be9 	.word	0x00417be9
  41731c:	00417c15 	.word	0x00417c15
  417320:	00417c2b 	.word	0x00417c2b

00417324 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  417324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417328:	4604      	mov	r4, r0
  41732a:	460d      	mov	r5, r1
  41732c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  41732e:	4915      	ldr	r1, [pc, #84]	; (417384 <spi_master_setup_device+0x60>)
  417330:	4618      	mov	r0, r3
  417332:	4b15      	ldr	r3, [pc, #84]	; (417388 <spi_master_setup_device+0x64>)
  417334:	4798      	blx	r3
  417336:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  417338:	2300      	movs	r3, #0
  41733a:	461a      	mov	r2, r3
  41733c:	6829      	ldr	r1, [r5, #0]
  41733e:	4620      	mov	r0, r4
  417340:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4173a0 <spi_master_setup_device+0x7c>
  417344:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  417346:	2208      	movs	r2, #8
  417348:	6829      	ldr	r1, [r5, #0]
  41734a:	4620      	mov	r0, r4
  41734c:	4b0f      	ldr	r3, [pc, #60]	; (41738c <spi_master_setup_device+0x68>)
  41734e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  417350:	b2fa      	uxtb	r2, r7
  417352:	6829      	ldr	r1, [r5, #0]
  417354:	4620      	mov	r0, r4
  417356:	4b0e      	ldr	r3, [pc, #56]	; (417390 <spi_master_setup_device+0x6c>)
  417358:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  41735a:	2208      	movs	r2, #8
  41735c:	6829      	ldr	r1, [r5, #0]
  41735e:	4620      	mov	r0, r4
  417360:	4b0c      	ldr	r3, [pc, #48]	; (417394 <spi_master_setup_device+0x70>)
  417362:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  417364:	0872      	lsrs	r2, r6, #1
  417366:	6829      	ldr	r1, [r5, #0]
  417368:	4620      	mov	r0, r4
  41736a:	4b0b      	ldr	r3, [pc, #44]	; (417398 <spi_master_setup_device+0x74>)
  41736c:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  41736e:	f086 0201 	eor.w	r2, r6, #1
  417372:	f002 0201 	and.w	r2, r2, #1
  417376:	6829      	ldr	r1, [r5, #0]
  417378:	4620      	mov	r0, r4
  41737a:	4b08      	ldr	r3, [pc, #32]	; (41739c <spi_master_setup_device+0x78>)
  41737c:	4798      	blx	r3
  41737e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417382:	bf00      	nop
  417384:	08f0d180 	.word	0x08f0d180
  417388:	00417cd3 	.word	0x00417cd3
  41738c:	00417cbf 	.word	0x00417cbf
  417390:	00417ce9 	.word	0x00417ce9
  417394:	00417c79 	.word	0x00417c79
  417398:	00417c3d 	.word	0x00417c3d
  41739c:	00417c5b 	.word	0x00417c5b
  4173a0:	00417d11 	.word	0x00417d11

004173a4 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4173a4:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4173a6:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4173a8:	f013 0f04 	tst.w	r3, #4
  4173ac:	d006      	beq.n	4173bc <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4173ae:	6809      	ldr	r1, [r1, #0]
  4173b0:	290f      	cmp	r1, #15
  4173b2:	d900      	bls.n	4173b6 <spi_select_device+0x12>
  4173b4:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4173b6:	4b06      	ldr	r3, [pc, #24]	; (4173d0 <spi_select_device+0x2c>)
  4173b8:	4798      	blx	r3
  4173ba:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4173bc:	6809      	ldr	r1, [r1, #0]
  4173be:	2903      	cmp	r1, #3
  4173c0:	d8f8      	bhi.n	4173b4 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4173c2:	2301      	movs	r3, #1
  4173c4:	fa03 f101 	lsl.w	r1, r3, r1
  4173c8:	43c9      	mvns	r1, r1
  4173ca:	4b01      	ldr	r3, [pc, #4]	; (4173d0 <spi_select_device+0x2c>)
  4173cc:	4798      	blx	r3
		}
	}
}
  4173ce:	e7f1      	b.n	4173b4 <spi_select_device+0x10>
  4173d0:	00417c15 	.word	0x00417c15

004173d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4173d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4173d8:	b980      	cbnz	r0, 4173fc <_read+0x28>
  4173da:	460c      	mov	r4, r1
  4173dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4173de:	2a00      	cmp	r2, #0
  4173e0:	dd0f      	ble.n	417402 <_read+0x2e>
  4173e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4173e4:	4e08      	ldr	r6, [pc, #32]	; (417408 <_read+0x34>)
  4173e6:	4d09      	ldr	r5, [pc, #36]	; (41740c <_read+0x38>)
  4173e8:	6830      	ldr	r0, [r6, #0]
  4173ea:	4621      	mov	r1, r4
  4173ec:	682b      	ldr	r3, [r5, #0]
  4173ee:	4798      	blx	r3
		ptr++;
  4173f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4173f2:	42bc      	cmp	r4, r7
  4173f4:	d1f8      	bne.n	4173e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4173f6:	4640      	mov	r0, r8
  4173f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4173fc:	f04f 38ff 	mov.w	r8, #4294967295
  417400:	e7f9      	b.n	4173f6 <_read+0x22>
	for (; len > 0; --len) {
  417402:	4680      	mov	r8, r0
  417404:	e7f7      	b.n	4173f6 <_read+0x22>
  417406:	bf00      	nop
  417408:	2043a134 	.word	0x2043a134
  41740c:	2043a12c 	.word	0x2043a12c

00417410 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  417410:	3801      	subs	r0, #1
  417412:	2802      	cmp	r0, #2
  417414:	d815      	bhi.n	417442 <_write+0x32>
{
  417416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41741a:	460e      	mov	r6, r1
  41741c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  41741e:	b19a      	cbz	r2, 417448 <_write+0x38>
  417420:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  417422:	f8df 8038 	ldr.w	r8, [pc, #56]	; 41745c <_write+0x4c>
  417426:	4f0c      	ldr	r7, [pc, #48]	; (417458 <_write+0x48>)
  417428:	f8d8 0000 	ldr.w	r0, [r8]
  41742c:	f815 1b01 	ldrb.w	r1, [r5], #1
  417430:	683b      	ldr	r3, [r7, #0]
  417432:	4798      	blx	r3
  417434:	2800      	cmp	r0, #0
  417436:	db0a      	blt.n	41744e <_write+0x3e>
  417438:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  41743a:	3c01      	subs	r4, #1
  41743c:	d1f4      	bne.n	417428 <_write+0x18>
  41743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  417442:	f04f 30ff 	mov.w	r0, #4294967295
  417446:	4770      	bx	lr
	for (; len != 0; --len) {
  417448:	4610      	mov	r0, r2
  41744a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  41744e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  417452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417456:	bf00      	nop
  417458:	2043a130 	.word	0x2043a130
  41745c:	2043a134 	.word	0x2043a134

00417460 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  417460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  417464:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  417468:	4b9e      	ldr	r3, [pc, #632]	; (4176e4 <board_init+0x284>)
  41746a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  41746c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  417470:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  417474:	4b9c      	ldr	r3, [pc, #624]	; (4176e8 <board_init+0x288>)
  417476:	2200      	movs	r2, #0
  417478:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  41747c:	695a      	ldr	r2, [r3, #20]
  41747e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  417482:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  417484:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  417488:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  41748c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  417490:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  417494:	f007 0007 	and.w	r0, r7, #7
  417498:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  41749a:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  41749e:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4174a2:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4174a6:	f3bf 8f4f 	dsb	sy
  4174aa:	f04f 34ff 	mov.w	r4, #4294967295
  4174ae:	fa04 fc00 	lsl.w	ip, r4, r0
  4174b2:	fa06 f000 	lsl.w	r0, r6, r0
  4174b6:	fa04 f40e 	lsl.w	r4, r4, lr
  4174ba:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4174be:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4174c0:	463a      	mov	r2, r7
  4174c2:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4174c4:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4174c8:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4174cc:	3a01      	subs	r2, #1
  4174ce:	4423      	add	r3, r4
  4174d0:	f1b2 3fff 	cmp.w	r2, #4294967295
  4174d4:	d1f6      	bne.n	4174c4 <board_init+0x64>
        } while(sets--);
  4174d6:	3e01      	subs	r6, #1
  4174d8:	4460      	add	r0, ip
  4174da:	f1b6 3fff 	cmp.w	r6, #4294967295
  4174de:	d1ef      	bne.n	4174c0 <board_init+0x60>
  4174e0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4174e4:	4b80      	ldr	r3, [pc, #512]	; (4176e8 <board_init+0x288>)
  4174e6:	695a      	ldr	r2, [r3, #20]
  4174e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4174ec:	615a      	str	r2, [r3, #20]
  4174ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4174f2:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4174f6:	4a7d      	ldr	r2, [pc, #500]	; (4176ec <board_init+0x28c>)
  4174f8:	497d      	ldr	r1, [pc, #500]	; (4176f0 <board_init+0x290>)
  4174fa:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4174fc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  417500:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  417502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  417506:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  41750a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  41750e:	f022 0201 	bic.w	r2, r2, #1
  417512:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  417516:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  41751a:	f022 0201 	bic.w	r2, r2, #1
  41751e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  417522:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  417526:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  41752a:	200a      	movs	r0, #10
  41752c:	4c71      	ldr	r4, [pc, #452]	; (4176f4 <board_init+0x294>)
  41752e:	47a0      	blx	r4
  417530:	200b      	movs	r0, #11
  417532:	47a0      	blx	r4
  417534:	200c      	movs	r0, #12
  417536:	47a0      	blx	r4
  417538:	2010      	movs	r0, #16
  41753a:	47a0      	blx	r4
  41753c:	2011      	movs	r0, #17
  41753e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  417540:	4e6d      	ldr	r6, [pc, #436]	; (4176f8 <board_init+0x298>)
  417542:	f44f 7880 	mov.w	r8, #256	; 0x100
  417546:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  41754a:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  41754e:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  417552:	4c6a      	ldr	r4, [pc, #424]	; (4176fc <board_init+0x29c>)
  417554:	f44f 6500 	mov.w	r5, #2048	; 0x800
  417558:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  41755a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  41755e:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  417560:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  417564:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  417566:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  417568:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  41756c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  41756e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  417572:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  417574:	6f63      	ldr	r3, [r4, #116]	; 0x74
  417576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41757a:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  41757c:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  417580:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  417584:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  417588:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  41758c:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41758e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  417592:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  417594:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  417596:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41759a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41759c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4175a0:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4175a2:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4175a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4175a8:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4175aa:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4175ac:	4a54      	ldr	r2, [pc, #336]	; (417700 <board_init+0x2a0>)
  4175ae:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4175b2:	f043 0310 	orr.w	r3, r3, #16
  4175b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4175ba:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  4175be:	2310      	movs	r3, #16
  4175c0:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4175c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4175c6:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4175c8:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4175ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4175ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4175d0:	4319      	orrs	r1, r3
  4175d2:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4175d4:	6f51      	ldr	r1, [r2, #116]	; 0x74
  4175d6:	4319      	orrs	r1, r3
  4175d8:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4175da:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  4175dc:	2208      	movs	r2, #8
  4175de:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4175e0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4175e4:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4175e6:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4175e8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4175ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
  4175ee:	f021 0108 	bic.w	r1, r1, #8
  4175f2:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4175f4:	6f61      	ldr	r1, [r4, #116]	; 0x74
  4175f6:	f021 0108 	bic.w	r1, r1, #8
  4175fa:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4175fc:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  4175fe:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  417600:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  417604:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  417606:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  417608:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41760c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41760e:	f022 0210 	bic.w	r2, r2, #16
  417612:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  417614:	6f62      	ldr	r2, [r4, #116]	; 0x74
  417616:	f022 0210 	bic.w	r2, r2, #16
  41761a:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41761c:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  41761e:	2300      	movs	r3, #0
  417620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  417624:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  417628:	4630      	mov	r0, r6
  41762a:	4f36      	ldr	r7, [pc, #216]	; (417704 <board_init+0x2a4>)
  41762c:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  41762e:	2300      	movs	r3, #0
  417630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  417634:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  417638:	4630      	mov	r0, r6
  41763a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  41763c:	2301      	movs	r3, #1
  41763e:	22ff      	movs	r2, #255	; 0xff
  417640:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  417644:	4630      	mov	r0, r6
  417646:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  417648:	2301      	movs	r3, #1
  41764a:	223f      	movs	r2, #63	; 0x3f
  41764c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  417650:	482d      	ldr	r0, [pc, #180]	; (417708 <board_init+0x2a8>)
  417652:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  417654:	2301      	movs	r3, #1
  417656:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  41765a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41765e:	4620      	mov	r0, r4
  417660:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  417662:	2301      	movs	r3, #1
  417664:	4642      	mov	r2, r8
  417666:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41766a:	4630      	mov	r0, r6
  41766c:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  41766e:	2301      	movs	r3, #1
  417670:	462a      	mov	r2, r5
  417672:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  417676:	4630      	mov	r0, r6
  417678:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  41767a:	2301      	movs	r3, #1
  41767c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  417680:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  417684:	4821      	ldr	r0, [pc, #132]	; (41770c <board_init+0x2ac>)
  417686:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  417688:	2300      	movs	r3, #0
  41768a:	f44f 7200 	mov.w	r2, #512	; 0x200
  41768e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  417692:	4630      	mov	r0, r6
  417694:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  417696:	f44f 7100 	mov.w	r1, #512	; 0x200
  41769a:	4630      	mov	r0, r6
  41769c:	4b1c      	ldr	r3, [pc, #112]	; (417710 <board_init+0x2b0>)
  41769e:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  4176a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4176a4:	2074      	movs	r0, #116	; 0x74
  4176a6:	4c1b      	ldr	r4, [pc, #108]	; (417714 <board_init+0x2b4>)
  4176a8:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  4176aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4176ae:	2075      	movs	r0, #117	; 0x75
  4176b0:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  4176b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4176b6:	2076      	movs	r0, #118	; 0x76
  4176b8:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  4176ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4176be:	207b      	movs	r0, #123	; 0x7b
  4176c0:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  4176c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4176c6:	2018      	movs	r0, #24
  4176c8:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  4176ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4176ce:	2006      	movs	r0, #6
  4176d0:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  4176d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4176d6:	2053      	movs	r0, #83	; 0x53
  4176d8:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  4176da:	2053      	movs	r0, #83	; 0x53
  4176dc:	4b0e      	ldr	r3, [pc, #56]	; (417718 <board_init+0x2b8>)
  4176de:	4798      	blx	r3
  4176e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4176e4:	400e1850 	.word	0x400e1850
  4176e8:	e000ed00 	.word	0xe000ed00
  4176ec:	400e0c00 	.word	0x400e0c00
  4176f0:	5a00080c 	.word	0x5a00080c
  4176f4:	00417bc9 	.word	0x00417bc9
  4176f8:	400e1200 	.word	0x400e1200
  4176fc:	400e0e00 	.word	0x400e0e00
  417700:	40088000 	.word	0x40088000
  417704:	00417811 	.word	0x00417811
  417708:	400e1600 	.word	0x400e1600
  41770c:	400e1400 	.word	0x400e1400
  417710:	0041771d 	.word	0x0041771d
  417714:	004178c5 	.word	0x004178c5
  417718:	004178a9 	.word	0x004178a9

0041771c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  41771c:	6301      	str	r1, [r0, #48]	; 0x30
  41771e:	4770      	bx	lr

00417720 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  417720:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  417722:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  417726:	d03a      	beq.n	41779e <pio_set_peripheral+0x7e>
  417728:	d813      	bhi.n	417752 <pio_set_peripheral+0x32>
  41772a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  41772e:	d025      	beq.n	41777c <pio_set_peripheral+0x5c>
  417730:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  417734:	d10a      	bne.n	41774c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  417736:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  417738:	4313      	orrs	r3, r2
  41773a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  41773c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  41773e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  417740:	400b      	ands	r3, r1
  417742:	ea23 0302 	bic.w	r3, r3, r2
  417746:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  417748:	6042      	str	r2, [r0, #4]
  41774a:	4770      	bx	lr
	switch (ul_type) {
  41774c:	2900      	cmp	r1, #0
  41774e:	d1fb      	bne.n	417748 <pio_set_peripheral+0x28>
  417750:	4770      	bx	lr
  417752:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  417756:	d021      	beq.n	41779c <pio_set_peripheral+0x7c>
  417758:	d809      	bhi.n	41776e <pio_set_peripheral+0x4e>
  41775a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  41775e:	d1f3      	bne.n	417748 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  417760:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  417762:	4313      	orrs	r3, r2
  417764:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  417766:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  417768:	4313      	orrs	r3, r2
  41776a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  41776c:	e7ec      	b.n	417748 <pio_set_peripheral+0x28>
	switch (ul_type) {
  41776e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  417772:	d013      	beq.n	41779c <pio_set_peripheral+0x7c>
  417774:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  417778:	d010      	beq.n	41779c <pio_set_peripheral+0x7c>
  41777a:	e7e5      	b.n	417748 <pio_set_peripheral+0x28>
{
  41777c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  41777e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  417780:	6f04      	ldr	r4, [r0, #112]	; 0x70
  417782:	43d3      	mvns	r3, r2
  417784:	4021      	ands	r1, r4
  417786:	461c      	mov	r4, r3
  417788:	4019      	ands	r1, r3
  41778a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  41778c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  41778e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  417790:	400b      	ands	r3, r1
  417792:	4023      	ands	r3, r4
  417794:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  417796:	6042      	str	r2, [r0, #4]
}
  417798:	f85d 4b04 	ldr.w	r4, [sp], #4
  41779c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  41779e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4177a0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4177a2:	400b      	ands	r3, r1
  4177a4:	ea23 0302 	bic.w	r3, r3, r2
  4177a8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4177aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4177ac:	4313      	orrs	r3, r2
  4177ae:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4177b0:	e7ca      	b.n	417748 <pio_set_peripheral+0x28>

004177b2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4177b2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4177b4:	f012 0f01 	tst.w	r2, #1
  4177b8:	d10d      	bne.n	4177d6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4177ba:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4177bc:	f012 0f0a 	tst.w	r2, #10
  4177c0:	d00b      	beq.n	4177da <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4177c2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4177c4:	f012 0f02 	tst.w	r2, #2
  4177c8:	d109      	bne.n	4177de <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4177ca:	f012 0f08 	tst.w	r2, #8
  4177ce:	d008      	beq.n	4177e2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4177d0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4177d4:	e005      	b.n	4177e2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4177d6:	6641      	str	r1, [r0, #100]	; 0x64
  4177d8:	e7f0      	b.n	4177bc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4177da:	6241      	str	r1, [r0, #36]	; 0x24
  4177dc:	e7f2      	b.n	4177c4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4177de:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4177e2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4177e4:	6001      	str	r1, [r0, #0]
  4177e6:	4770      	bx	lr

004177e8 <pio_set_output>:
{
  4177e8:	b410      	push	{r4}
  4177ea:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4177ec:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4177ee:	b94c      	cbnz	r4, 417804 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4177f0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4177f2:	b14b      	cbz	r3, 417808 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4177f4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4177f6:	b94a      	cbnz	r2, 41780c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4177f8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4177fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4177fc:	6001      	str	r1, [r0, #0]
}
  4177fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  417802:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  417804:	6641      	str	r1, [r0, #100]	; 0x64
  417806:	e7f4      	b.n	4177f2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  417808:	6541      	str	r1, [r0, #84]	; 0x54
  41780a:	e7f4      	b.n	4177f6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  41780c:	6301      	str	r1, [r0, #48]	; 0x30
  41780e:	e7f4      	b.n	4177fa <pio_set_output+0x12>

00417810 <pio_configure>:
{
  417810:	b570      	push	{r4, r5, r6, lr}
  417812:	b082      	sub	sp, #8
  417814:	4605      	mov	r5, r0
  417816:	4616      	mov	r6, r2
  417818:	461c      	mov	r4, r3
	switch (ul_type) {
  41781a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  41781e:	d014      	beq.n	41784a <pio_configure+0x3a>
  417820:	d90a      	bls.n	417838 <pio_configure+0x28>
  417822:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  417826:	d024      	beq.n	417872 <pio_configure+0x62>
  417828:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  41782c:	d021      	beq.n	417872 <pio_configure+0x62>
  41782e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  417832:	d017      	beq.n	417864 <pio_configure+0x54>
		return 0;
  417834:	2000      	movs	r0, #0
  417836:	e01a      	b.n	41786e <pio_configure+0x5e>
	switch (ul_type) {
  417838:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  41783c:	d005      	beq.n	41784a <pio_configure+0x3a>
  41783e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  417842:	d002      	beq.n	41784a <pio_configure+0x3a>
  417844:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  417848:	d1f4      	bne.n	417834 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  41784a:	4632      	mov	r2, r6
  41784c:	4628      	mov	r0, r5
  41784e:	4b11      	ldr	r3, [pc, #68]	; (417894 <pio_configure+0x84>)
  417850:	4798      	blx	r3
	if (ul_pull_up_enable) {
  417852:	f014 0f01 	tst.w	r4, #1
  417856:	d102      	bne.n	41785e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  417858:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  41785a:	2001      	movs	r0, #1
  41785c:	e007      	b.n	41786e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  41785e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  417860:	2001      	movs	r0, #1
  417862:	e004      	b.n	41786e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  417864:	461a      	mov	r2, r3
  417866:	4631      	mov	r1, r6
  417868:	4b0b      	ldr	r3, [pc, #44]	; (417898 <pio_configure+0x88>)
  41786a:	4798      	blx	r3
	return 1;
  41786c:	2001      	movs	r0, #1
}
  41786e:	b002      	add	sp, #8
  417870:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  417872:	f004 0301 	and.w	r3, r4, #1
  417876:	9300      	str	r3, [sp, #0]
  417878:	f3c4 0380 	ubfx	r3, r4, #2, #1
  41787c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  417880:	bf14      	ite	ne
  417882:	2200      	movne	r2, #0
  417884:	2201      	moveq	r2, #1
  417886:	4631      	mov	r1, r6
  417888:	4628      	mov	r0, r5
  41788a:	4c04      	ldr	r4, [pc, #16]	; (41789c <pio_configure+0x8c>)
  41788c:	47a0      	blx	r4
	return 1;
  41788e:	2001      	movs	r0, #1
		break;
  417890:	e7ed      	b.n	41786e <pio_configure+0x5e>
  417892:	bf00      	nop
  417894:	00417721 	.word	0x00417721
  417898:	004177b3 	.word	0x004177b3
  41789c:	004177e9 	.word	0x004177e9

004178a0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4178a0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4178a2:	4770      	bx	lr

004178a4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4178a4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4178a6:	4770      	bx	lr

004178a8 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4178a8:	4b05      	ldr	r3, [pc, #20]	; (4178c0 <pio_set_pin_high+0x18>)
  4178aa:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4178ae:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4178b0:	f000 001f 	and.w	r0, r0, #31
  4178b4:	2201      	movs	r2, #1
  4178b6:	fa02 f000 	lsl.w	r0, r2, r0
  4178ba:	6318      	str	r0, [r3, #48]	; 0x30
  4178bc:	4770      	bx	lr
  4178be:	bf00      	nop
  4178c0:	00200707 	.word	0x00200707

004178c4 <pio_configure_pin>:
{
  4178c4:	b570      	push	{r4, r5, r6, lr}
  4178c6:	b082      	sub	sp, #8
  4178c8:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4178ca:	4c46      	ldr	r4, [pc, #280]	; (4179e4 <pio_configure_pin+0x120>)
  4178cc:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4178d0:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4178d2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4178d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4178da:	d059      	beq.n	417990 <pio_configure_pin+0xcc>
  4178dc:	d80a      	bhi.n	4178f4 <pio_configure_pin+0x30>
  4178de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4178e2:	d02f      	beq.n	417944 <pio_configure_pin+0x80>
  4178e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4178e8:	d03f      	beq.n	41796a <pio_configure_pin+0xa6>
  4178ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4178ee:	d016      	beq.n	41791e <pio_configure_pin+0x5a>
		return 0;
  4178f0:	2000      	movs	r0, #0
  4178f2:	e012      	b.n	41791a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4178f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4178f8:	d05d      	beq.n	4179b6 <pio_configure_pin+0xf2>
  4178fa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4178fe:	d05a      	beq.n	4179b6 <pio_configure_pin+0xf2>
  417900:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  417904:	d1f4      	bne.n	4178f0 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  417906:	f000 011f 	and.w	r1, r0, #31
  41790a:	2601      	movs	r6, #1
  41790c:	462a      	mov	r2, r5
  41790e:	fa06 f101 	lsl.w	r1, r6, r1
  417912:	4620      	mov	r0, r4
  417914:	4b34      	ldr	r3, [pc, #208]	; (4179e8 <pio_configure_pin+0x124>)
  417916:	4798      	blx	r3
	return 1;
  417918:	4630      	mov	r0, r6
}
  41791a:	b002      	add	sp, #8
  41791c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  41791e:	f000 001f 	and.w	r0, r0, #31
  417922:	2601      	movs	r6, #1
  417924:	4086      	lsls	r6, r0
  417926:	4632      	mov	r2, r6
  417928:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41792c:	4620      	mov	r0, r4
  41792e:	4b2f      	ldr	r3, [pc, #188]	; (4179ec <pio_configure_pin+0x128>)
  417930:	4798      	blx	r3
	if (ul_pull_up_enable) {
  417932:	f015 0f01 	tst.w	r5, #1
  417936:	d102      	bne.n	41793e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  417938:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  41793a:	2001      	movs	r0, #1
  41793c:	e7ed      	b.n	41791a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  41793e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  417940:	2001      	movs	r0, #1
  417942:	e7ea      	b.n	41791a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  417944:	f000 001f 	and.w	r0, r0, #31
  417948:	2601      	movs	r6, #1
  41794a:	4086      	lsls	r6, r0
  41794c:	4632      	mov	r2, r6
  41794e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  417952:	4620      	mov	r0, r4
  417954:	4b25      	ldr	r3, [pc, #148]	; (4179ec <pio_configure_pin+0x128>)
  417956:	4798      	blx	r3
	if (ul_pull_up_enable) {
  417958:	f015 0f01 	tst.w	r5, #1
  41795c:	d102      	bne.n	417964 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  41795e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  417960:	2001      	movs	r0, #1
  417962:	e7da      	b.n	41791a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  417964:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  417966:	2001      	movs	r0, #1
  417968:	e7d7      	b.n	41791a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  41796a:	f000 001f 	and.w	r0, r0, #31
  41796e:	2601      	movs	r6, #1
  417970:	4086      	lsls	r6, r0
  417972:	4632      	mov	r2, r6
  417974:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  417978:	4620      	mov	r0, r4
  41797a:	4b1c      	ldr	r3, [pc, #112]	; (4179ec <pio_configure_pin+0x128>)
  41797c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  41797e:	f015 0f01 	tst.w	r5, #1
  417982:	d102      	bne.n	41798a <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  417984:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  417986:	2001      	movs	r0, #1
  417988:	e7c7      	b.n	41791a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  41798a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  41798c:	2001      	movs	r0, #1
  41798e:	e7c4      	b.n	41791a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  417990:	f000 001f 	and.w	r0, r0, #31
  417994:	2601      	movs	r6, #1
  417996:	4086      	lsls	r6, r0
  417998:	4632      	mov	r2, r6
  41799a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  41799e:	4620      	mov	r0, r4
  4179a0:	4b12      	ldr	r3, [pc, #72]	; (4179ec <pio_configure_pin+0x128>)
  4179a2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4179a4:	f015 0f01 	tst.w	r5, #1
  4179a8:	d102      	bne.n	4179b0 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4179aa:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4179ac:	2001      	movs	r0, #1
  4179ae:	e7b4      	b.n	41791a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4179b0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4179b2:	2001      	movs	r0, #1
  4179b4:	e7b1      	b.n	41791a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4179b6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4179ba:	f000 011f 	and.w	r1, r0, #31
  4179be:	2601      	movs	r6, #1
  4179c0:	ea05 0306 	and.w	r3, r5, r6
  4179c4:	9300      	str	r3, [sp, #0]
  4179c6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4179ca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4179ce:	bf14      	ite	ne
  4179d0:	2200      	movne	r2, #0
  4179d2:	2201      	moveq	r2, #1
  4179d4:	fa06 f101 	lsl.w	r1, r6, r1
  4179d8:	4620      	mov	r0, r4
  4179da:	4c05      	ldr	r4, [pc, #20]	; (4179f0 <pio_configure_pin+0x12c>)
  4179dc:	47a0      	blx	r4
	return 1;
  4179de:	4630      	mov	r0, r6
		break;
  4179e0:	e79b      	b.n	41791a <pio_configure_pin+0x56>
  4179e2:	bf00      	nop
  4179e4:	00200707 	.word	0x00200707
  4179e8:	004177b3 	.word	0x004177b3
  4179ec:	00417721 	.word	0x00417721
  4179f0:	004177e9 	.word	0x004177e9

004179f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4179f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4179f8:	4604      	mov	r4, r0
  4179fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4179fc:	4b0e      	ldr	r3, [pc, #56]	; (417a38 <pio_handler_process+0x44>)
  4179fe:	4798      	blx	r3
  417a00:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  417a02:	4620      	mov	r0, r4
  417a04:	4b0d      	ldr	r3, [pc, #52]	; (417a3c <pio_handler_process+0x48>)
  417a06:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  417a08:	4005      	ands	r5, r0
  417a0a:	d013      	beq.n	417a34 <pio_handler_process+0x40>
  417a0c:	4c0c      	ldr	r4, [pc, #48]	; (417a40 <pio_handler_process+0x4c>)
  417a0e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  417a12:	e003      	b.n	417a1c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  417a14:	42b4      	cmp	r4, r6
  417a16:	d00d      	beq.n	417a34 <pio_handler_process+0x40>
  417a18:	3410      	adds	r4, #16
		while (status != 0) {
  417a1a:	b15d      	cbz	r5, 417a34 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  417a1c:	6820      	ldr	r0, [r4, #0]
  417a1e:	4540      	cmp	r0, r8
  417a20:	d1f8      	bne.n	417a14 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  417a22:	6861      	ldr	r1, [r4, #4]
  417a24:	4229      	tst	r1, r5
  417a26:	d0f5      	beq.n	417a14 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  417a28:	68e3      	ldr	r3, [r4, #12]
  417a2a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  417a2c:	6863      	ldr	r3, [r4, #4]
  417a2e:	ea25 0503 	bic.w	r5, r5, r3
  417a32:	e7ef      	b.n	417a14 <pio_handler_process+0x20>
  417a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  417a38:	004178a1 	.word	0x004178a1
  417a3c:	004178a5 	.word	0x004178a5
  417a40:	204144dc 	.word	0x204144dc

00417a44 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  417a44:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  417a46:	210a      	movs	r1, #10
  417a48:	4801      	ldr	r0, [pc, #4]	; (417a50 <PIOA_Handler+0xc>)
  417a4a:	4b02      	ldr	r3, [pc, #8]	; (417a54 <PIOA_Handler+0x10>)
  417a4c:	4798      	blx	r3
  417a4e:	bd08      	pop	{r3, pc}
  417a50:	400e0e00 	.word	0x400e0e00
  417a54:	004179f5 	.word	0x004179f5

00417a58 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  417a58:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  417a5a:	210b      	movs	r1, #11
  417a5c:	4801      	ldr	r0, [pc, #4]	; (417a64 <PIOB_Handler+0xc>)
  417a5e:	4b02      	ldr	r3, [pc, #8]	; (417a68 <PIOB_Handler+0x10>)
  417a60:	4798      	blx	r3
  417a62:	bd08      	pop	{r3, pc}
  417a64:	400e1000 	.word	0x400e1000
  417a68:	004179f5 	.word	0x004179f5

00417a6c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  417a6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  417a6e:	210c      	movs	r1, #12
  417a70:	4801      	ldr	r0, [pc, #4]	; (417a78 <PIOC_Handler+0xc>)
  417a72:	4b02      	ldr	r3, [pc, #8]	; (417a7c <PIOC_Handler+0x10>)
  417a74:	4798      	blx	r3
  417a76:	bd08      	pop	{r3, pc}
  417a78:	400e1200 	.word	0x400e1200
  417a7c:	004179f5 	.word	0x004179f5

00417a80 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  417a80:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  417a82:	2110      	movs	r1, #16
  417a84:	4801      	ldr	r0, [pc, #4]	; (417a8c <PIOD_Handler+0xc>)
  417a86:	4b02      	ldr	r3, [pc, #8]	; (417a90 <PIOD_Handler+0x10>)
  417a88:	4798      	blx	r3
  417a8a:	bd08      	pop	{r3, pc}
  417a8c:	400e1400 	.word	0x400e1400
  417a90:	004179f5 	.word	0x004179f5

00417a94 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  417a94:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  417a96:	2111      	movs	r1, #17
  417a98:	4801      	ldr	r0, [pc, #4]	; (417aa0 <PIOE_Handler+0xc>)
  417a9a:	4b02      	ldr	r3, [pc, #8]	; (417aa4 <PIOE_Handler+0x10>)
  417a9c:	4798      	blx	r3
  417a9e:	bd08      	pop	{r3, pc}
  417aa0:	400e1600 	.word	0x400e1600
  417aa4:	004179f5 	.word	0x004179f5

00417aa8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  417aa8:	2803      	cmp	r0, #3
  417aaa:	d011      	beq.n	417ad0 <pmc_mck_set_division+0x28>
  417aac:	2804      	cmp	r0, #4
  417aae:	d012      	beq.n	417ad6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  417ab0:	2802      	cmp	r0, #2
  417ab2:	bf0c      	ite	eq
  417ab4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  417ab8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  417aba:	4a08      	ldr	r2, [pc, #32]	; (417adc <pmc_mck_set_division+0x34>)
  417abc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  417abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  417ac2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  417ac4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  417ac6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  417ac8:	f013 0f08 	tst.w	r3, #8
  417acc:	d0fb      	beq.n	417ac6 <pmc_mck_set_division+0x1e>
}
  417ace:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  417ad0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  417ad4:	e7f1      	b.n	417aba <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  417ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  417ada:	e7ee      	b.n	417aba <pmc_mck_set_division+0x12>
  417adc:	400e0600 	.word	0x400e0600

00417ae0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  417ae0:	4a17      	ldr	r2, [pc, #92]	; (417b40 <pmc_switch_mck_to_pllack+0x60>)
  417ae2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  417ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  417ae8:	4318      	orrs	r0, r3
  417aea:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  417aec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  417aee:	f013 0f08 	tst.w	r3, #8
  417af2:	d10a      	bne.n	417b0a <pmc_switch_mck_to_pllack+0x2a>
  417af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  417af8:	4911      	ldr	r1, [pc, #68]	; (417b40 <pmc_switch_mck_to_pllack+0x60>)
  417afa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  417afc:	f012 0f08 	tst.w	r2, #8
  417b00:	d103      	bne.n	417b0a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  417b02:	3b01      	subs	r3, #1
  417b04:	d1f9      	bne.n	417afa <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  417b06:	2001      	movs	r0, #1
  417b08:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  417b0a:	4a0d      	ldr	r2, [pc, #52]	; (417b40 <pmc_switch_mck_to_pllack+0x60>)
  417b0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  417b0e:	f023 0303 	bic.w	r3, r3, #3
  417b12:	f043 0302 	orr.w	r3, r3, #2
  417b16:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  417b18:	6e93      	ldr	r3, [r2, #104]	; 0x68
  417b1a:	f013 0f08 	tst.w	r3, #8
  417b1e:	d10a      	bne.n	417b36 <pmc_switch_mck_to_pllack+0x56>
  417b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  417b24:	4906      	ldr	r1, [pc, #24]	; (417b40 <pmc_switch_mck_to_pllack+0x60>)
  417b26:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  417b28:	f012 0f08 	tst.w	r2, #8
  417b2c:	d105      	bne.n	417b3a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  417b2e:	3b01      	subs	r3, #1
  417b30:	d1f9      	bne.n	417b26 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  417b32:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  417b34:	4770      	bx	lr
	return 0;
  417b36:	2000      	movs	r0, #0
  417b38:	4770      	bx	lr
  417b3a:	2000      	movs	r0, #0
  417b3c:	4770      	bx	lr
  417b3e:	bf00      	nop
  417b40:	400e0600 	.word	0x400e0600

00417b44 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  417b44:	b9a0      	cbnz	r0, 417b70 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  417b46:	480e      	ldr	r0, [pc, #56]	; (417b80 <pmc_switch_mainck_to_xtal+0x3c>)
  417b48:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  417b4a:	0209      	lsls	r1, r1, #8
  417b4c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  417b4e:	4a0d      	ldr	r2, [pc, #52]	; (417b84 <pmc_switch_mainck_to_xtal+0x40>)
  417b50:	401a      	ands	r2, r3
  417b52:	4b0d      	ldr	r3, [pc, #52]	; (417b88 <pmc_switch_mainck_to_xtal+0x44>)
  417b54:	4313      	orrs	r3, r2
  417b56:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  417b58:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  417b5a:	4602      	mov	r2, r0
  417b5c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  417b5e:	f013 0f01 	tst.w	r3, #1
  417b62:	d0fb      	beq.n	417b5c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  417b64:	4a06      	ldr	r2, [pc, #24]	; (417b80 <pmc_switch_mainck_to_xtal+0x3c>)
  417b66:	6a11      	ldr	r1, [r2, #32]
  417b68:	4b08      	ldr	r3, [pc, #32]	; (417b8c <pmc_switch_mainck_to_xtal+0x48>)
  417b6a:	430b      	orrs	r3, r1
  417b6c:	6213      	str	r3, [r2, #32]
  417b6e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  417b70:	4903      	ldr	r1, [pc, #12]	; (417b80 <pmc_switch_mainck_to_xtal+0x3c>)
  417b72:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  417b74:	4a06      	ldr	r2, [pc, #24]	; (417b90 <pmc_switch_mainck_to_xtal+0x4c>)
  417b76:	401a      	ands	r2, r3
  417b78:	4b06      	ldr	r3, [pc, #24]	; (417b94 <pmc_switch_mainck_to_xtal+0x50>)
  417b7a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  417b7c:	620b      	str	r3, [r1, #32]
  417b7e:	4770      	bx	lr
  417b80:	400e0600 	.word	0x400e0600
  417b84:	ffc8fffc 	.word	0xffc8fffc
  417b88:	00370001 	.word	0x00370001
  417b8c:	01370000 	.word	0x01370000
  417b90:	fec8fffc 	.word	0xfec8fffc
  417b94:	01370002 	.word	0x01370002

00417b98 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  417b98:	4b02      	ldr	r3, [pc, #8]	; (417ba4 <pmc_osc_is_ready_mainck+0xc>)
  417b9a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  417b9c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  417ba0:	4770      	bx	lr
  417ba2:	bf00      	nop
  417ba4:	400e0600 	.word	0x400e0600

00417ba8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  417ba8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  417bac:	4b01      	ldr	r3, [pc, #4]	; (417bb4 <pmc_disable_pllack+0xc>)
  417bae:	629a      	str	r2, [r3, #40]	; 0x28
  417bb0:	4770      	bx	lr
  417bb2:	bf00      	nop
  417bb4:	400e0600 	.word	0x400e0600

00417bb8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  417bb8:	4b02      	ldr	r3, [pc, #8]	; (417bc4 <pmc_is_locked_pllack+0xc>)
  417bba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  417bbc:	f000 0002 	and.w	r0, r0, #2
  417bc0:	4770      	bx	lr
  417bc2:	bf00      	nop
  417bc4:	400e0600 	.word	0x400e0600

00417bc8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  417bc8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  417bcc:	4b05      	ldr	r3, [pc, #20]	; (417be4 <pmc_enable_periph_clk+0x1c>)
  417bce:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  417bd2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  417bd6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  417bda:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  417bde:	2000      	movs	r0, #0
  417be0:	4770      	bx	lr
  417be2:	bf00      	nop
  417be4:	400e0600 	.word	0x400e0600

00417be8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  417be8:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  417bea:	4b07      	ldr	r3, [pc, #28]	; (417c08 <spi_enable_clock+0x20>)
  417bec:	4298      	cmp	r0, r3
  417bee:	d003      	beq.n	417bf8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  417bf0:	4b06      	ldr	r3, [pc, #24]	; (417c0c <spi_enable_clock+0x24>)
  417bf2:	4298      	cmp	r0, r3
  417bf4:	d004      	beq.n	417c00 <spi_enable_clock+0x18>
  417bf6:	bd08      	pop	{r3, pc}
  417bf8:	2015      	movs	r0, #21
  417bfa:	4b05      	ldr	r3, [pc, #20]	; (417c10 <spi_enable_clock+0x28>)
  417bfc:	4798      	blx	r3
  417bfe:	bd08      	pop	{r3, pc}
  417c00:	202a      	movs	r0, #42	; 0x2a
  417c02:	4b03      	ldr	r3, [pc, #12]	; (417c10 <spi_enable_clock+0x28>)
  417c04:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  417c06:	e7f6      	b.n	417bf6 <spi_enable_clock+0xe>
  417c08:	40008000 	.word	0x40008000
  417c0c:	40058000 	.word	0x40058000
  417c10:	00417bc9 	.word	0x00417bc9

00417c14 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  417c14:	6843      	ldr	r3, [r0, #4]
  417c16:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  417c1a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  417c1c:	6843      	ldr	r3, [r0, #4]
  417c1e:	0409      	lsls	r1, r1, #16
  417c20:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  417c24:	4319      	orrs	r1, r3
  417c26:	6041      	str	r1, [r0, #4]
  417c28:	4770      	bx	lr

00417c2a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  417c2a:	6843      	ldr	r3, [r0, #4]
  417c2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  417c30:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  417c32:	6843      	ldr	r3, [r0, #4]
  417c34:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  417c38:	6041      	str	r1, [r0, #4]
  417c3a:	4770      	bx	lr

00417c3c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  417c3c:	b932      	cbnz	r2, 417c4c <spi_set_clock_polarity+0x10>
  417c3e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  417c42:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417c44:	f023 0301 	bic.w	r3, r3, #1
  417c48:	6303      	str	r3, [r0, #48]	; 0x30
  417c4a:	4770      	bx	lr
  417c4c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  417c50:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417c52:	f043 0301 	orr.w	r3, r3, #1
  417c56:	6303      	str	r3, [r0, #48]	; 0x30
  417c58:	4770      	bx	lr

00417c5a <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  417c5a:	b932      	cbnz	r2, 417c6a <spi_set_clock_phase+0x10>
  417c5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  417c60:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417c62:	f023 0302 	bic.w	r3, r3, #2
  417c66:	6303      	str	r3, [r0, #48]	; 0x30
  417c68:	4770      	bx	lr
  417c6a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  417c6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417c70:	f043 0302 	orr.w	r3, r3, #2
  417c74:	6303      	str	r3, [r0, #48]	; 0x30
  417c76:	4770      	bx	lr

00417c78 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  417c78:	2a04      	cmp	r2, #4
  417c7a:	d003      	beq.n	417c84 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  417c7c:	b16a      	cbz	r2, 417c9a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  417c7e:	2a08      	cmp	r2, #8
  417c80:	d016      	beq.n	417cb0 <spi_configure_cs_behavior+0x38>
  417c82:	4770      	bx	lr
  417c84:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  417c88:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417c8a:	f023 0308 	bic.w	r3, r3, #8
  417c8e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  417c90:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417c92:	f043 0304 	orr.w	r3, r3, #4
  417c96:	6303      	str	r3, [r0, #48]	; 0x30
  417c98:	4770      	bx	lr
  417c9a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  417c9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417ca0:	f023 0308 	bic.w	r3, r3, #8
  417ca4:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  417ca6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417ca8:	f023 0304 	bic.w	r3, r3, #4
  417cac:	6303      	str	r3, [r0, #48]	; 0x30
  417cae:	4770      	bx	lr
  417cb0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  417cb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  417cb6:	f043 0308 	orr.w	r3, r3, #8
  417cba:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  417cbc:	e7e1      	b.n	417c82 <spi_configure_cs_behavior+0xa>

00417cbe <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  417cbe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  417cc2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  417cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  417cc8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  417cca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  417ccc:	431a      	orrs	r2, r3
  417cce:	630a      	str	r2, [r1, #48]	; 0x30
  417cd0:	4770      	bx	lr

00417cd2 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  417cd2:	1e43      	subs	r3, r0, #1
  417cd4:	4419      	add	r1, r3
  417cd6:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  417cda:	1e43      	subs	r3, r0, #1
  417cdc:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  417cde:	bf94      	ite	ls
  417ce0:	b200      	sxthls	r0, r0
		return -1;
  417ce2:	f04f 30ff 	movhi.w	r0, #4294967295
}
  417ce6:	4770      	bx	lr

00417ce8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  417ce8:	b17a      	cbz	r2, 417d0a <spi_set_baudrate_div+0x22>
{
  417cea:	b410      	push	{r4}
  417cec:	4614      	mov	r4, r2
  417cee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  417cf2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  417cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  417cf8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  417cfa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  417cfc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  417d00:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  417d02:	2000      	movs	r0, #0
}
  417d04:	f85d 4b04 	ldr.w	r4, [sp], #4
  417d08:	4770      	bx	lr
        return -1;
  417d0a:	f04f 30ff 	mov.w	r0, #4294967295
  417d0e:	4770      	bx	lr

00417d10 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  417d10:	b410      	push	{r4}
  417d12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  417d16:	6b08      	ldr	r0, [r1, #48]	; 0x30
  417d18:	b280      	uxth	r0, r0
  417d1a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  417d1c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  417d1e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  417d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  417d26:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  417d28:	f85d 4b04 	ldr.w	r4, [sp], #4
  417d2c:	4770      	bx	lr

00417d2e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  417d2e:	6943      	ldr	r3, [r0, #20]
  417d30:	f013 0f02 	tst.w	r3, #2
  417d34:	d002      	beq.n	417d3c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  417d36:	61c1      	str	r1, [r0, #28]
	return 0;
  417d38:	2000      	movs	r0, #0
  417d3a:	4770      	bx	lr
		return 1;
  417d3c:	2001      	movs	r0, #1
}
  417d3e:	4770      	bx	lr

00417d40 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  417d40:	6943      	ldr	r3, [r0, #20]
  417d42:	f013 0f01 	tst.w	r3, #1
  417d46:	d003      	beq.n	417d50 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  417d48:	6983      	ldr	r3, [r0, #24]
  417d4a:	700b      	strb	r3, [r1, #0]
	return 0;
  417d4c:	2000      	movs	r0, #0
  417d4e:	4770      	bx	lr
		return 1;
  417d50:	2001      	movs	r0, #1
}
  417d52:	4770      	bx	lr

00417d54 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  417d54:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  417d56:	010b      	lsls	r3, r1, #4
  417d58:	4293      	cmp	r3, r2
  417d5a:	d914      	bls.n	417d86 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  417d5c:	00c9      	lsls	r1, r1, #3
  417d5e:	084b      	lsrs	r3, r1, #1
  417d60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  417d64:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  417d68:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  417d6a:	1e5c      	subs	r4, r3, #1
  417d6c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  417d70:	428c      	cmp	r4, r1
  417d72:	d901      	bls.n	417d78 <usart_set_async_baudrate+0x24>
		return 1;
  417d74:	2001      	movs	r0, #1
  417d76:	e017      	b.n	417da8 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  417d78:	6841      	ldr	r1, [r0, #4]
  417d7a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  417d7e:	6041      	str	r1, [r0, #4]
  417d80:	e00c      	b.n	417d9c <usart_set_async_baudrate+0x48>
		return 1;
  417d82:	2001      	movs	r0, #1
  417d84:	e010      	b.n	417da8 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  417d86:	0859      	lsrs	r1, r3, #1
  417d88:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  417d8c:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  417d90:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  417d92:	1e5c      	subs	r4, r3, #1
  417d94:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  417d98:	428c      	cmp	r4, r1
  417d9a:	d8f2      	bhi.n	417d82 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  417d9c:	0412      	lsls	r2, r2, #16
  417d9e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  417da2:	431a      	orrs	r2, r3
  417da4:	6202      	str	r2, [r0, #32]

	return 0;
  417da6:	2000      	movs	r0, #0
}
  417da8:	f85d 4b04 	ldr.w	r4, [sp], #4
  417dac:	4770      	bx	lr
	...

00417db0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  417db0:	4b08      	ldr	r3, [pc, #32]	; (417dd4 <usart_reset+0x24>)
  417db2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  417db6:	2300      	movs	r3, #0
  417db8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  417dba:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  417dbc:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  417dbe:	2388      	movs	r3, #136	; 0x88
  417dc0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  417dc2:	2324      	movs	r3, #36	; 0x24
  417dc4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  417dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
  417dca:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  417dcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  417dd0:	6003      	str	r3, [r0, #0]
  417dd2:	4770      	bx	lr
  417dd4:	55534100 	.word	0x55534100

00417dd8 <usart_init_rs232>:
{
  417dd8:	b570      	push	{r4, r5, r6, lr}
  417dda:	4605      	mov	r5, r0
  417ddc:	460c      	mov	r4, r1
  417dde:	4616      	mov	r6, r2
	usart_reset(p_usart);
  417de0:	4b0f      	ldr	r3, [pc, #60]	; (417e20 <usart_init_rs232+0x48>)
  417de2:	4798      	blx	r3
	ul_reg_val = 0;
  417de4:	2200      	movs	r2, #0
  417de6:	4b0f      	ldr	r3, [pc, #60]	; (417e24 <usart_init_rs232+0x4c>)
  417de8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  417dea:	b1a4      	cbz	r4, 417e16 <usart_init_rs232+0x3e>
  417dec:	4632      	mov	r2, r6
  417dee:	6821      	ldr	r1, [r4, #0]
  417df0:	4628      	mov	r0, r5
  417df2:	4b0d      	ldr	r3, [pc, #52]	; (417e28 <usart_init_rs232+0x50>)
  417df4:	4798      	blx	r3
  417df6:	4602      	mov	r2, r0
  417df8:	b978      	cbnz	r0, 417e1a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  417dfa:	6863      	ldr	r3, [r4, #4]
  417dfc:	68a1      	ldr	r1, [r4, #8]
  417dfe:	430b      	orrs	r3, r1
  417e00:	6921      	ldr	r1, [r4, #16]
  417e02:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  417e04:	68e1      	ldr	r1, [r4, #12]
  417e06:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  417e08:	4906      	ldr	r1, [pc, #24]	; (417e24 <usart_init_rs232+0x4c>)
  417e0a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  417e0c:	6869      	ldr	r1, [r5, #4]
  417e0e:	430b      	orrs	r3, r1
  417e10:	606b      	str	r3, [r5, #4]
}
  417e12:	4610      	mov	r0, r2
  417e14:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  417e16:	2201      	movs	r2, #1
  417e18:	e7fb      	b.n	417e12 <usart_init_rs232+0x3a>
  417e1a:	2201      	movs	r2, #1
  417e1c:	e7f9      	b.n	417e12 <usart_init_rs232+0x3a>
  417e1e:	bf00      	nop
  417e20:	00417db1 	.word	0x00417db1
  417e24:	2041454c 	.word	0x2041454c
  417e28:	00417d55 	.word	0x00417d55

00417e2c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  417e2c:	2340      	movs	r3, #64	; 0x40
  417e2e:	6003      	str	r3, [r0, #0]
  417e30:	4770      	bx	lr

00417e32 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  417e32:	2310      	movs	r3, #16
  417e34:	6003      	str	r3, [r0, #0]
  417e36:	4770      	bx	lr

00417e38 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  417e38:	6943      	ldr	r3, [r0, #20]
  417e3a:	f013 0f02 	tst.w	r3, #2
  417e3e:	d004      	beq.n	417e4a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  417e40:	f3c1 0108 	ubfx	r1, r1, #0, #9
  417e44:	61c1      	str	r1, [r0, #28]
	return 0;
  417e46:	2000      	movs	r0, #0
  417e48:	4770      	bx	lr
		return 1;
  417e4a:	2001      	movs	r0, #1
}
  417e4c:	4770      	bx	lr

00417e4e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  417e4e:	6943      	ldr	r3, [r0, #20]
  417e50:	f013 0f01 	tst.w	r3, #1
  417e54:	d005      	beq.n	417e62 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  417e56:	6983      	ldr	r3, [r0, #24]
  417e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
  417e5c:	600b      	str	r3, [r1, #0]
	return 0;
  417e5e:	2000      	movs	r0, #0
  417e60:	4770      	bx	lr
		return 1;
  417e62:	2001      	movs	r0, #1
}
  417e64:	4770      	bx	lr

00417e66 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  417e66:	e7fe      	b.n	417e66 <Dummy_Handler>

00417e68 <Reset_Handler>:
{
  417e68:	b500      	push	{lr}
  417e6a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  417e6c:	4b25      	ldr	r3, [pc, #148]	; (417f04 <Reset_Handler+0x9c>)
  417e6e:	4a26      	ldr	r2, [pc, #152]	; (417f08 <Reset_Handler+0xa0>)
  417e70:	429a      	cmp	r2, r3
  417e72:	d010      	beq.n	417e96 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  417e74:	4b25      	ldr	r3, [pc, #148]	; (417f0c <Reset_Handler+0xa4>)
  417e76:	4a23      	ldr	r2, [pc, #140]	; (417f04 <Reset_Handler+0x9c>)
  417e78:	429a      	cmp	r2, r3
  417e7a:	d20c      	bcs.n	417e96 <Reset_Handler+0x2e>
  417e7c:	3b01      	subs	r3, #1
  417e7e:	1a9b      	subs	r3, r3, r2
  417e80:	f023 0303 	bic.w	r3, r3, #3
  417e84:	3304      	adds	r3, #4
  417e86:	4413      	add	r3, r2
  417e88:	491f      	ldr	r1, [pc, #124]	; (417f08 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  417e8a:	f851 0b04 	ldr.w	r0, [r1], #4
  417e8e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  417e92:	429a      	cmp	r2, r3
  417e94:	d1f9      	bne.n	417e8a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  417e96:	4b1e      	ldr	r3, [pc, #120]	; (417f10 <Reset_Handler+0xa8>)
  417e98:	4a1e      	ldr	r2, [pc, #120]	; (417f14 <Reset_Handler+0xac>)
  417e9a:	429a      	cmp	r2, r3
  417e9c:	d20a      	bcs.n	417eb4 <Reset_Handler+0x4c>
  417e9e:	3b01      	subs	r3, #1
  417ea0:	1a9b      	subs	r3, r3, r2
  417ea2:	f023 0303 	bic.w	r3, r3, #3
  417ea6:	3304      	adds	r3, #4
  417ea8:	4413      	add	r3, r2
                *pDest++ = 0;
  417eaa:	2100      	movs	r1, #0
  417eac:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  417eb0:	4293      	cmp	r3, r2
  417eb2:	d1fb      	bne.n	417eac <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  417eb4:	4a18      	ldr	r2, [pc, #96]	; (417f18 <Reset_Handler+0xb0>)
  417eb6:	4b19      	ldr	r3, [pc, #100]	; (417f1c <Reset_Handler+0xb4>)
  417eb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  417ebc:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  417ebe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  417ec2:	fab3 f383 	clz	r3, r3
  417ec6:	095b      	lsrs	r3, r3, #5
  417ec8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  417eca:	b672      	cpsid	i
  __ASM volatile ("dmb");
  417ecc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  417ed0:	2200      	movs	r2, #0
  417ed2:	4b13      	ldr	r3, [pc, #76]	; (417f20 <Reset_Handler+0xb8>)
  417ed4:	701a      	strb	r2, [r3, #0]
	return flags;
  417ed6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  417ed8:	4a12      	ldr	r2, [pc, #72]	; (417f24 <Reset_Handler+0xbc>)
  417eda:	6813      	ldr	r3, [r2, #0]
  417edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  417ee0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  417ee2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  417ee6:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  417eea:	b129      	cbz	r1, 417ef8 <Reset_Handler+0x90>
		cpu_irq_enable();
  417eec:	2201      	movs	r2, #1
  417eee:	4b0c      	ldr	r3, [pc, #48]	; (417f20 <Reset_Handler+0xb8>)
  417ef0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  417ef2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  417ef6:	b662      	cpsie	i
        __libc_init_array();
  417ef8:	4b0b      	ldr	r3, [pc, #44]	; (417f28 <Reset_Handler+0xc0>)
  417efa:	4798      	blx	r3
        main();
  417efc:	4b0b      	ldr	r3, [pc, #44]	; (417f2c <Reset_Handler+0xc4>)
  417efe:	4798      	blx	r3
  417f00:	e7fe      	b.n	417f00 <Reset_Handler+0x98>
  417f02:	bf00      	nop
  417f04:	20400000 	.word	0x20400000
  417f08:	0042302c 	.word	0x0042302c
  417f0c:	204009e8 	.word	0x204009e8
  417f10:	2043a160 	.word	0x2043a160
  417f14:	204009e8 	.word	0x204009e8
  417f18:	e000ed00 	.word	0xe000ed00
  417f1c:	00400000 	.word	0x00400000
  417f20:	20400030 	.word	0x20400030
  417f24:	e000ed88 	.word	0xe000ed88
  417f28:	00418ce5 	.word	0x00418ce5
  417f2c:	0041888d 	.word	0x0041888d

00417f30 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  417f30:	4b3b      	ldr	r3, [pc, #236]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  417f34:	f003 0303 	and.w	r3, r3, #3
  417f38:	2b01      	cmp	r3, #1
  417f3a:	d01d      	beq.n	417f78 <SystemCoreClockUpdate+0x48>
  417f3c:	b183      	cbz	r3, 417f60 <SystemCoreClockUpdate+0x30>
  417f3e:	2b02      	cmp	r3, #2
  417f40:	d036      	beq.n	417fb0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  417f42:	4b37      	ldr	r3, [pc, #220]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  417f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  417f4a:	2b70      	cmp	r3, #112	; 0x70
  417f4c:	d05f      	beq.n	41800e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  417f4e:	4b34      	ldr	r3, [pc, #208]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  417f52:	4934      	ldr	r1, [pc, #208]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417f54:	f3c2 1202 	ubfx	r2, r2, #4, #3
  417f58:	680b      	ldr	r3, [r1, #0]
  417f5a:	40d3      	lsrs	r3, r2
  417f5c:	600b      	str	r3, [r1, #0]
  417f5e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  417f60:	4b31      	ldr	r3, [pc, #196]	; (418028 <SystemCoreClockUpdate+0xf8>)
  417f62:	695b      	ldr	r3, [r3, #20]
  417f64:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  417f68:	bf14      	ite	ne
  417f6a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  417f6e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  417f72:	4b2c      	ldr	r3, [pc, #176]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417f74:	601a      	str	r2, [r3, #0]
  417f76:	e7e4      	b.n	417f42 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  417f78:	4b29      	ldr	r3, [pc, #164]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417f7a:	6a1b      	ldr	r3, [r3, #32]
  417f7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  417f80:	d003      	beq.n	417f8a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  417f82:	4a2a      	ldr	r2, [pc, #168]	; (41802c <SystemCoreClockUpdate+0xfc>)
  417f84:	4b27      	ldr	r3, [pc, #156]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417f86:	601a      	str	r2, [r3, #0]
  417f88:	e7db      	b.n	417f42 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  417f8a:	4a29      	ldr	r2, [pc, #164]	; (418030 <SystemCoreClockUpdate+0x100>)
  417f8c:	4b25      	ldr	r3, [pc, #148]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417f8e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  417f90:	4b23      	ldr	r3, [pc, #140]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417f92:	6a1b      	ldr	r3, [r3, #32]
  417f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
  417f98:	2b10      	cmp	r3, #16
  417f9a:	d005      	beq.n	417fa8 <SystemCoreClockUpdate+0x78>
  417f9c:	2b20      	cmp	r3, #32
  417f9e:	d1d0      	bne.n	417f42 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  417fa0:	4a22      	ldr	r2, [pc, #136]	; (41802c <SystemCoreClockUpdate+0xfc>)
  417fa2:	4b20      	ldr	r3, [pc, #128]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417fa4:	601a      	str	r2, [r3, #0]
          break;
  417fa6:	e7cc      	b.n	417f42 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  417fa8:	4a22      	ldr	r2, [pc, #136]	; (418034 <SystemCoreClockUpdate+0x104>)
  417faa:	4b1e      	ldr	r3, [pc, #120]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417fac:	601a      	str	r2, [r3, #0]
          break;
  417fae:	e7c8      	b.n	417f42 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  417fb0:	4b1b      	ldr	r3, [pc, #108]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417fb2:	6a1b      	ldr	r3, [r3, #32]
  417fb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  417fb8:	d016      	beq.n	417fe8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  417fba:	4a1c      	ldr	r2, [pc, #112]	; (41802c <SystemCoreClockUpdate+0xfc>)
  417fbc:	4b19      	ldr	r3, [pc, #100]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417fbe:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  417fc0:	4b17      	ldr	r3, [pc, #92]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  417fc4:	f003 0303 	and.w	r3, r3, #3
  417fc8:	2b02      	cmp	r3, #2
  417fca:	d1ba      	bne.n	417f42 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  417fcc:	4a14      	ldr	r2, [pc, #80]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417fce:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  417fd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  417fd2:	4814      	ldr	r0, [pc, #80]	; (418024 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  417fd4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  417fd8:	6803      	ldr	r3, [r0, #0]
  417fda:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  417fde:	b2d2      	uxtb	r2, r2
  417fe0:	fbb3 f3f2 	udiv	r3, r3, r2
  417fe4:	6003      	str	r3, [r0, #0]
  417fe6:	e7ac      	b.n	417f42 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  417fe8:	4a11      	ldr	r2, [pc, #68]	; (418030 <SystemCoreClockUpdate+0x100>)
  417fea:	4b0e      	ldr	r3, [pc, #56]	; (418024 <SystemCoreClockUpdate+0xf4>)
  417fec:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  417fee:	4b0c      	ldr	r3, [pc, #48]	; (418020 <SystemCoreClockUpdate+0xf0>)
  417ff0:	6a1b      	ldr	r3, [r3, #32]
  417ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  417ff6:	2b10      	cmp	r3, #16
  417ff8:	d005      	beq.n	418006 <SystemCoreClockUpdate+0xd6>
  417ffa:	2b20      	cmp	r3, #32
  417ffc:	d1e0      	bne.n	417fc0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  417ffe:	4a0b      	ldr	r2, [pc, #44]	; (41802c <SystemCoreClockUpdate+0xfc>)
  418000:	4b08      	ldr	r3, [pc, #32]	; (418024 <SystemCoreClockUpdate+0xf4>)
  418002:	601a      	str	r2, [r3, #0]
          break;
  418004:	e7dc      	b.n	417fc0 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  418006:	4a0b      	ldr	r2, [pc, #44]	; (418034 <SystemCoreClockUpdate+0x104>)
  418008:	4b06      	ldr	r3, [pc, #24]	; (418024 <SystemCoreClockUpdate+0xf4>)
  41800a:	601a      	str	r2, [r3, #0]
          break;
  41800c:	e7d8      	b.n	417fc0 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  41800e:	4a05      	ldr	r2, [pc, #20]	; (418024 <SystemCoreClockUpdate+0xf4>)
  418010:	6813      	ldr	r3, [r2, #0]
  418012:	4909      	ldr	r1, [pc, #36]	; (418038 <SystemCoreClockUpdate+0x108>)
  418014:	fba1 1303 	umull	r1, r3, r1, r3
  418018:	085b      	lsrs	r3, r3, #1
  41801a:	6013      	str	r3, [r2, #0]
  41801c:	4770      	bx	lr
  41801e:	bf00      	nop
  418020:	400e0600 	.word	0x400e0600
  418024:	20400034 	.word	0x20400034
  418028:	400e1810 	.word	0x400e1810
  41802c:	00b71b00 	.word	0x00b71b00
  418030:	003d0900 	.word	0x003d0900
  418034:	007a1200 	.word	0x007a1200
  418038:	aaaaaaab 	.word	0xaaaaaaab

0041803c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  41803c:	4b16      	ldr	r3, [pc, #88]	; (418098 <system_init_flash+0x5c>)
  41803e:	4298      	cmp	r0, r3
  418040:	d913      	bls.n	41806a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  418042:	4b16      	ldr	r3, [pc, #88]	; (41809c <system_init_flash+0x60>)
  418044:	4298      	cmp	r0, r3
  418046:	d915      	bls.n	418074 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  418048:	4b15      	ldr	r3, [pc, #84]	; (4180a0 <system_init_flash+0x64>)
  41804a:	4298      	cmp	r0, r3
  41804c:	d916      	bls.n	41807c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  41804e:	4b15      	ldr	r3, [pc, #84]	; (4180a4 <system_init_flash+0x68>)
  418050:	4298      	cmp	r0, r3
  418052:	d917      	bls.n	418084 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  418054:	4b14      	ldr	r3, [pc, #80]	; (4180a8 <system_init_flash+0x6c>)
  418056:	4298      	cmp	r0, r3
  418058:	d918      	bls.n	41808c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  41805a:	4b14      	ldr	r3, [pc, #80]	; (4180ac <system_init_flash+0x70>)
  41805c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  41805e:	bf94      	ite	ls
  418060:	4a13      	ldrls	r2, [pc, #76]	; (4180b0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  418062:	4a14      	ldrhi	r2, [pc, #80]	; (4180b4 <system_init_flash+0x78>)
  418064:	4b14      	ldr	r3, [pc, #80]	; (4180b8 <system_init_flash+0x7c>)
  418066:	601a      	str	r2, [r3, #0]
  418068:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  41806a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  41806e:	4b12      	ldr	r3, [pc, #72]	; (4180b8 <system_init_flash+0x7c>)
  418070:	601a      	str	r2, [r3, #0]
  418072:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  418074:	4a11      	ldr	r2, [pc, #68]	; (4180bc <system_init_flash+0x80>)
  418076:	4b10      	ldr	r3, [pc, #64]	; (4180b8 <system_init_flash+0x7c>)
  418078:	601a      	str	r2, [r3, #0]
  41807a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  41807c:	4a10      	ldr	r2, [pc, #64]	; (4180c0 <system_init_flash+0x84>)
  41807e:	4b0e      	ldr	r3, [pc, #56]	; (4180b8 <system_init_flash+0x7c>)
  418080:	601a      	str	r2, [r3, #0]
  418082:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  418084:	4a0f      	ldr	r2, [pc, #60]	; (4180c4 <system_init_flash+0x88>)
  418086:	4b0c      	ldr	r3, [pc, #48]	; (4180b8 <system_init_flash+0x7c>)
  418088:	601a      	str	r2, [r3, #0]
  41808a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  41808c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  418090:	4b09      	ldr	r3, [pc, #36]	; (4180b8 <system_init_flash+0x7c>)
  418092:	601a      	str	r2, [r3, #0]
  418094:	4770      	bx	lr
  418096:	bf00      	nop
  418098:	015ef3bf 	.word	0x015ef3bf
  41809c:	02bde77f 	.word	0x02bde77f
  4180a0:	041cdb3f 	.word	0x041cdb3f
  4180a4:	057bceff 	.word	0x057bceff
  4180a8:	06dac2bf 	.word	0x06dac2bf
  4180ac:	0839b67f 	.word	0x0839b67f
  4180b0:	04000500 	.word	0x04000500
  4180b4:	04000600 	.word	0x04000600
  4180b8:	400e0c00 	.word	0x400e0c00
  4180bc:	04000100 	.word	0x04000100
  4180c0:	04000200 	.word	0x04000200
  4180c4:	04000300 	.word	0x04000300

004180c8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4180c8:	4b0a      	ldr	r3, [pc, #40]	; (4180f4 <_sbrk+0x2c>)
  4180ca:	681b      	ldr	r3, [r3, #0]
  4180cc:	b153      	cbz	r3, 4180e4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4180ce:	4b09      	ldr	r3, [pc, #36]	; (4180f4 <_sbrk+0x2c>)
  4180d0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4180d2:	181a      	adds	r2, r3, r0
  4180d4:	4908      	ldr	r1, [pc, #32]	; (4180f8 <_sbrk+0x30>)
  4180d6:	4291      	cmp	r1, r2
  4180d8:	db08      	blt.n	4180ec <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4180da:	4610      	mov	r0, r2
  4180dc:	4a05      	ldr	r2, [pc, #20]	; (4180f4 <_sbrk+0x2c>)
  4180de:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4180e0:	4618      	mov	r0, r3
  4180e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4180e4:	4a05      	ldr	r2, [pc, #20]	; (4180fc <_sbrk+0x34>)
  4180e6:	4b03      	ldr	r3, [pc, #12]	; (4180f4 <_sbrk+0x2c>)
  4180e8:	601a      	str	r2, [r3, #0]
  4180ea:	e7f0      	b.n	4180ce <_sbrk+0x6>
		return (caddr_t) -1;	
  4180ec:	f04f 30ff 	mov.w	r0, #4294967295
}
  4180f0:	4770      	bx	lr
  4180f2:	bf00      	nop
  4180f4:	20414550 	.word	0x20414550
  4180f8:	2045fffc 	.word	0x2045fffc
  4180fc:	2043c360 	.word	0x2043c360

00418100 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  418100:	f04f 30ff 	mov.w	r0, #4294967295
  418104:	4770      	bx	lr

00418106 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  418106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  41810a:	604b      	str	r3, [r1, #4]

	return 0;
}
  41810c:	2000      	movs	r0, #0
  41810e:	4770      	bx	lr

00418110 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  418110:	2001      	movs	r0, #1
  418112:	4770      	bx	lr

00418114 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  418114:	2000      	movs	r0, #0
  418116:	4770      	bx	lr

00418118 <event_handler>:

/************************************************************************/
/* lvgl                                                                 */
/************************************************************************/

static void event_handler(lv_event_t * e) {
  418118:	b510      	push	{r4, lr}
  41811a:	b082      	sub	sp, #8
	lv_event_code_t code = lv_event_get_code(e);
  41811c:	4b0c      	ldr	r3, [pc, #48]	; (418150 <event_handler+0x38>)
  41811e:	4798      	blx	r3

	if(code == LV_EVENT_CLICKED) {
  418120:	2807      	cmp	r0, #7
  418122:	d003      	beq.n	41812c <event_handler+0x14>
		LV_LOG_USER("Clicked");
	}
	else if(code == LV_EVENT_VALUE_CHANGED) {
  418124:	281c      	cmp	r0, #28
  418126:	d00a      	beq.n	41813e <event_handler+0x26>
		LV_LOG_USER("Toggled");
	}
}
  418128:	b002      	add	sp, #8
  41812a:	bd10      	pop	{r4, pc}
		LV_LOG_USER("Clicked");
  41812c:	4b09      	ldr	r3, [pc, #36]	; (418154 <event_handler+0x3c>)
  41812e:	9300      	str	r3, [sp, #0]
  418130:	4b09      	ldr	r3, [pc, #36]	; (418158 <event_handler+0x40>)
  418132:	2242      	movs	r2, #66	; 0x42
  418134:	4909      	ldr	r1, [pc, #36]	; (41815c <event_handler+0x44>)
  418136:	2004      	movs	r0, #4
  418138:	4c09      	ldr	r4, [pc, #36]	; (418160 <event_handler+0x48>)
  41813a:	47a0      	blx	r4
  41813c:	e7f4      	b.n	418128 <event_handler+0x10>
		LV_LOG_USER("Toggled");
  41813e:	4b09      	ldr	r3, [pc, #36]	; (418164 <event_handler+0x4c>)
  418140:	9300      	str	r3, [sp, #0]
  418142:	4b05      	ldr	r3, [pc, #20]	; (418158 <event_handler+0x40>)
  418144:	2245      	movs	r2, #69	; 0x45
  418146:	4905      	ldr	r1, [pc, #20]	; (41815c <event_handler+0x44>)
  418148:	2004      	movs	r0, #4
  41814a:	4c05      	ldr	r4, [pc, #20]	; (418160 <event_handler+0x48>)
  41814c:	47a0      	blx	r4
}
  41814e:	e7eb      	b.n	418128 <event_handler+0x10>
  418150:	004004d9 	.word	0x004004d9
  418154:	00422e24 	.word	0x00422e24
  418158:	00422de0 	.word	0x00422de0
  41815c:	00422e14 	.word	0x00422e14
  418160:	00410edd 	.word	0x00410edd
  418164:	00422e2c 	.word	0x00422e2c

00418168 <clk_handler>:
	else if(code == LV_EVENT_VALUE_CHANGED) {
		LV_LOG_USER("Toggled");
	}
}

static void clk_handler(lv_event_t * e) {
  418168:	b510      	push	{r4, lr}
  41816a:	b082      	sub	sp, #8
	lv_event_code_t code = lv_event_get_code(e);
  41816c:	4b0c      	ldr	r3, [pc, #48]	; (4181a0 <clk_handler+0x38>)
  41816e:	4798      	blx	r3

	if(code == LV_EVENT_CLICKED) {
  418170:	2807      	cmp	r0, #7
  418172:	d003      	beq.n	41817c <clk_handler+0x14>
		LV_LOG_USER("Clicked");
	}
	else if(code == LV_EVENT_VALUE_CHANGED) {
  418174:	281c      	cmp	r0, #28
  418176:	d00a      	beq.n	41818e <clk_handler+0x26>
		LV_LOG_USER("Toggled");
	}
}
  418178:	b002      	add	sp, #8
  41817a:	bd10      	pop	{r4, pc}
		LV_LOG_USER("Clicked");
  41817c:	4b09      	ldr	r3, [pc, #36]	; (4181a4 <clk_handler+0x3c>)
  41817e:	9300      	str	r3, [sp, #0]
  418180:	4b09      	ldr	r3, [pc, #36]	; (4181a8 <clk_handler+0x40>)
  418182:	2258      	movs	r2, #88	; 0x58
  418184:	4909      	ldr	r1, [pc, #36]	; (4181ac <clk_handler+0x44>)
  418186:	2004      	movs	r0, #4
  418188:	4c09      	ldr	r4, [pc, #36]	; (4181b0 <clk_handler+0x48>)
  41818a:	47a0      	blx	r4
  41818c:	e7f4      	b.n	418178 <clk_handler+0x10>
		LV_LOG_USER("Toggled");
  41818e:	4b09      	ldr	r3, [pc, #36]	; (4181b4 <clk_handler+0x4c>)
  418190:	9300      	str	r3, [sp, #0]
  418192:	4b05      	ldr	r3, [pc, #20]	; (4181a8 <clk_handler+0x40>)
  418194:	225b      	movs	r2, #91	; 0x5b
  418196:	4905      	ldr	r1, [pc, #20]	; (4181ac <clk_handler+0x44>)
  418198:	2004      	movs	r0, #4
  41819a:	4c05      	ldr	r4, [pc, #20]	; (4181b0 <clk_handler+0x48>)
  41819c:	47a0      	blx	r4
}
  41819e:	e7eb      	b.n	418178 <clk_handler+0x10>
  4181a0:	004004d9 	.word	0x004004d9
  4181a4:	00422e24 	.word	0x00422e24
  4181a8:	00422e00 	.word	0x00422e00
  4181ac:	00422e14 	.word	0x00422e14
  4181b0:	00410edd 	.word	0x00410edd
  4181b4:	00422e2c 	.word	0x00422e2c

004181b8 <menu_handler>:
static void menu_handler(lv_event_t * e) {
  4181b8:	b510      	push	{r4, lr}
  4181ba:	b082      	sub	sp, #8
	lv_event_code_t code = lv_event_get_code(e);
  4181bc:	4b0c      	ldr	r3, [pc, #48]	; (4181f0 <menu_handler+0x38>)
  4181be:	4798      	blx	r3
	if(code == LV_EVENT_CLICKED) {
  4181c0:	2807      	cmp	r0, #7
  4181c2:	d003      	beq.n	4181cc <menu_handler+0x14>
	else if(code == LV_EVENT_VALUE_CHANGED) {
  4181c4:	281c      	cmp	r0, #28
  4181c6:	d00a      	beq.n	4181de <menu_handler+0x26>
}
  4181c8:	b002      	add	sp, #8
  4181ca:	bd10      	pop	{r4, pc}
		LV_LOG_USER("Clicked");
  4181cc:	4b09      	ldr	r3, [pc, #36]	; (4181f4 <menu_handler+0x3c>)
  4181ce:	9300      	str	r3, [sp, #0]
  4181d0:	4b09      	ldr	r3, [pc, #36]	; (4181f8 <menu_handler+0x40>)
  4181d2:	224d      	movs	r2, #77	; 0x4d
  4181d4:	4909      	ldr	r1, [pc, #36]	; (4181fc <menu_handler+0x44>)
  4181d6:	2004      	movs	r0, #4
  4181d8:	4c09      	ldr	r4, [pc, #36]	; (418200 <menu_handler+0x48>)
  4181da:	47a0      	blx	r4
  4181dc:	e7f4      	b.n	4181c8 <menu_handler+0x10>
		LV_LOG_USER("Toggled");
  4181de:	4b09      	ldr	r3, [pc, #36]	; (418204 <menu_handler+0x4c>)
  4181e0:	9300      	str	r3, [sp, #0]
  4181e2:	4b05      	ldr	r3, [pc, #20]	; (4181f8 <menu_handler+0x40>)
  4181e4:	2250      	movs	r2, #80	; 0x50
  4181e6:	4905      	ldr	r1, [pc, #20]	; (4181fc <menu_handler+0x44>)
  4181e8:	2004      	movs	r0, #4
  4181ea:	4c05      	ldr	r4, [pc, #20]	; (418200 <menu_handler+0x48>)
  4181ec:	47a0      	blx	r4
}
  4181ee:	e7eb      	b.n	4181c8 <menu_handler+0x10>
  4181f0:	004004d9 	.word	0x004004d9
  4181f4:	00422e24 	.word	0x00422e24
  4181f8:	00422df0 	.word	0x00422df0
  4181fc:	00422e14 	.word	0x00422e14
  418200:	00410edd 	.word	0x00410edd
  418204:	00422e2c 	.word	0x00422e2c

00418208 <down_handler>:
		temp = atoi(c);
		lv_label_set_text_fmt(labelSetValue, "%02d", temp + 1);
	}
}

static void down_handler(lv_event_t * e) {
  418208:	b510      	push	{r4, lr}
	lv_event_code_t code = lv_event_get_code(e);
  41820a:	4b08      	ldr	r3, [pc, #32]	; (41822c <down_handler+0x24>)
  41820c:	4798      	blx	r3
	char *c;
	int temp;
	if(code == LV_EVENT_CLICKED) {
  41820e:	2807      	cmp	r0, #7
  418210:	d000      	beq.n	418214 <down_handler+0xc>
  418212:	bd10      	pop	{r4, pc}
		c = lv_label_get_text(labelSetValue);
  418214:	4c06      	ldr	r4, [pc, #24]	; (418230 <down_handler+0x28>)
  418216:	6820      	ldr	r0, [r4, #0]
  418218:	4b06      	ldr	r3, [pc, #24]	; (418234 <down_handler+0x2c>)
  41821a:	4798      	blx	r3
		temp = atoi(c);
  41821c:	4b06      	ldr	r3, [pc, #24]	; (418238 <down_handler+0x30>)
  41821e:	4798      	blx	r3
		lv_label_set_text_fmt(labelSetValue, "%02d", temp - 1);
  418220:	1e42      	subs	r2, r0, #1
  418222:	4906      	ldr	r1, [pc, #24]	; (41823c <down_handler+0x34>)
  418224:	6820      	ldr	r0, [r4, #0]
  418226:	4b06      	ldr	r3, [pc, #24]	; (418240 <down_handler+0x38>)
  418228:	4798      	blx	r3
	}
}
  41822a:	e7f2      	b.n	418212 <down_handler+0xa>
  41822c:	004004d9 	.word	0x004004d9
  418230:	20439df4 	.word	0x20439df4
  418234:	00413bfd 	.word	0x00413bfd
  418238:	00418cdd 	.word	0x00418cdd
  41823c:	00422e0c 	.word	0x00422e0c
  418240:	004144f5 	.word	0x004144f5

00418244 <up_handler>:
static void up_handler(lv_event_t * e) {
  418244:	b510      	push	{r4, lr}
	lv_event_code_t code = lv_event_get_code(e);
  418246:	4b08      	ldr	r3, [pc, #32]	; (418268 <up_handler+0x24>)
  418248:	4798      	blx	r3
	if(code == LV_EVENT_CLICKED) {
  41824a:	2807      	cmp	r0, #7
  41824c:	d000      	beq.n	418250 <up_handler+0xc>
  41824e:	bd10      	pop	{r4, pc}
		c = lv_label_get_text(labelSetValue);
  418250:	4c06      	ldr	r4, [pc, #24]	; (41826c <up_handler+0x28>)
  418252:	6820      	ldr	r0, [r4, #0]
  418254:	4b06      	ldr	r3, [pc, #24]	; (418270 <up_handler+0x2c>)
  418256:	4798      	blx	r3
		temp = atoi(c);
  418258:	4b06      	ldr	r3, [pc, #24]	; (418274 <up_handler+0x30>)
  41825a:	4798      	blx	r3
		lv_label_set_text_fmt(labelSetValue, "%02d", temp + 1);
  41825c:	1c42      	adds	r2, r0, #1
  41825e:	4906      	ldr	r1, [pc, #24]	; (418278 <up_handler+0x34>)
  418260:	6820      	ldr	r0, [r4, #0]
  418262:	4b06      	ldr	r3, [pc, #24]	; (41827c <up_handler+0x38>)
  418264:	4798      	blx	r3
}
  418266:	e7f2      	b.n	41824e <up_handler+0xa>
  418268:	004004d9 	.word	0x004004d9
  41826c:	20439df4 	.word	0x20439df4
  418270:	00413bfd 	.word	0x00413bfd
  418274:	00418cdd 	.word	0x00418cdd
  418278:	00422e0c 	.word	0x00422e0c
  41827c:	004144f5 	.word	0x004144f5

00418280 <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  418280:	b570      	push	{r4, r5, r6, lr}
  418282:	4605      	mov	r5, r0
  418284:	460c      	mov	r4, r1
  418286:	4616      	mov	r6, r2
	ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  418288:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  41828c:	f9b4 0000 	ldrsh.w	r0, [r4]
  418290:	4b0d      	ldr	r3, [pc, #52]	; (4182c8 <my_flush_cb+0x48>)
  418292:	4798      	blx	r3
  418294:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  418298:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  41829c:	4b0b      	ldr	r3, [pc, #44]	; (4182cc <my_flush_cb+0x4c>)
  41829e:	4798      	blx	r3
	ili9341_copy_pixels_to_screen(color_p,  (area->x2 + 1 - area->x1) * (area->y2 + 1 - area->y1));
  4182a0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  4182a4:	f9b4 1000 	ldrsh.w	r1, [r4]
  4182a8:	1a52      	subs	r2, r2, r1
  4182aa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  4182ae:	3301      	adds	r3, #1
  4182b0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
  4182b4:	1a59      	subs	r1, r3, r1
  4182b6:	fb02 1101 	mla	r1, r2, r1, r1
  4182ba:	4630      	mov	r0, r6
  4182bc:	4b04      	ldr	r3, [pc, #16]	; (4182d0 <my_flush_cb+0x50>)
  4182be:	4798      	blx	r3
	
	/* IMPORTANT!!!
	* Inform the graphics library that you are ready with the flushing*/
	lv_disp_flush_ready(disp_drv);
  4182c0:	4628      	mov	r0, r5
  4182c2:	4b04      	ldr	r3, [pc, #16]	; (4182d4 <my_flush_cb+0x54>)
  4182c4:	4798      	blx	r3
  4182c6:	bd70      	pop	{r4, r5, r6, pc}
  4182c8:	00414f55 	.word	0x00414f55
  4182cc:	00414f75 	.word	0x00414f75
  4182d0:	00414fc5 	.word	0x00414fc5
  4182d4:	004101bd 	.word	0x004101bd

004182d8 <my_input_read>:
}

void my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  4182d8:	b510      	push	{r4, lr}
  4182da:	b082      	sub	sp, #8
  4182dc:	460c      	mov	r4, r1
	int px, py;
	
	if (readPoint(&px, &py))
  4182de:	4669      	mov	r1, sp
  4182e0:	a801      	add	r0, sp, #4
  4182e2:	4b07      	ldr	r3, [pc, #28]	; (418300 <my_input_read+0x28>)
  4182e4:	4798      	blx	r3
  4182e6:	b938      	cbnz	r0, 4182f8 <my_input_read+0x20>
		data->state = LV_INDEV_STATE_PRESSED;
	else
		data->state = LV_INDEV_STATE_RELEASED; 
  4182e8:	2300      	movs	r3, #0
  4182ea:	73a3      	strb	r3, [r4, #14]
	
	data->point.x = px;
  4182ec:	9b01      	ldr	r3, [sp, #4]
  4182ee:	8023      	strh	r3, [r4, #0]
	data->point.y = py;
  4182f0:	9b00      	ldr	r3, [sp, #0]
  4182f2:	8063      	strh	r3, [r4, #2]
}
  4182f4:	b002      	add	sp, #8
  4182f6:	bd10      	pop	{r4, pc}
		data->state = LV_INDEV_STATE_PRESSED;
  4182f8:	2301      	movs	r3, #1
  4182fa:	73a3      	strb	r3, [r4, #14]
  4182fc:	e7f6      	b.n	4182ec <my_input_read+0x14>
  4182fe:	bf00      	nop
  418300:	00414df9 	.word	0x00414df9

00418304 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  418304:	b5f0      	push	{r4, r5, r6, r7, lr}
  418306:	b083      	sub	sp, #12
  418308:	4605      	mov	r5, r0
  41830a:	460c      	mov	r4, r1
	uint32_t val = 0;
  41830c:	2300      	movs	r3, #0
  41830e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  418310:	4b2a      	ldr	r3, [pc, #168]	; (4183bc <usart_serial_getchar+0xb8>)
  418312:	4298      	cmp	r0, r3
  418314:	d013      	beq.n	41833e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  418316:	4b2a      	ldr	r3, [pc, #168]	; (4183c0 <usart_serial_getchar+0xbc>)
  418318:	4298      	cmp	r0, r3
  41831a:	d018      	beq.n	41834e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  41831c:	4b29      	ldr	r3, [pc, #164]	; (4183c4 <usart_serial_getchar+0xc0>)
  41831e:	4298      	cmp	r0, r3
  418320:	d01d      	beq.n	41835e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  418322:	4b29      	ldr	r3, [pc, #164]	; (4183c8 <usart_serial_getchar+0xc4>)
  418324:	429d      	cmp	r5, r3
  418326:	d022      	beq.n	41836e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  418328:	4b28      	ldr	r3, [pc, #160]	; (4183cc <usart_serial_getchar+0xc8>)
  41832a:	429d      	cmp	r5, r3
  41832c:	d027      	beq.n	41837e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  41832e:	4b28      	ldr	r3, [pc, #160]	; (4183d0 <usart_serial_getchar+0xcc>)
  418330:	429d      	cmp	r5, r3
  418332:	d02e      	beq.n	418392 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  418334:	4b27      	ldr	r3, [pc, #156]	; (4183d4 <usart_serial_getchar+0xd0>)
  418336:	429d      	cmp	r5, r3
  418338:	d035      	beq.n	4183a6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  41833a:	b003      	add	sp, #12
  41833c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  41833e:	461f      	mov	r7, r3
  418340:	4e25      	ldr	r6, [pc, #148]	; (4183d8 <usart_serial_getchar+0xd4>)
  418342:	4621      	mov	r1, r4
  418344:	4638      	mov	r0, r7
  418346:	47b0      	blx	r6
  418348:	2800      	cmp	r0, #0
  41834a:	d1fa      	bne.n	418342 <usart_serial_getchar+0x3e>
  41834c:	e7e9      	b.n	418322 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  41834e:	461f      	mov	r7, r3
  418350:	4e21      	ldr	r6, [pc, #132]	; (4183d8 <usart_serial_getchar+0xd4>)
  418352:	4621      	mov	r1, r4
  418354:	4638      	mov	r0, r7
  418356:	47b0      	blx	r6
  418358:	2800      	cmp	r0, #0
  41835a:	d1fa      	bne.n	418352 <usart_serial_getchar+0x4e>
  41835c:	e7e4      	b.n	418328 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  41835e:	461f      	mov	r7, r3
  418360:	4e1d      	ldr	r6, [pc, #116]	; (4183d8 <usart_serial_getchar+0xd4>)
  418362:	4621      	mov	r1, r4
  418364:	4638      	mov	r0, r7
  418366:	47b0      	blx	r6
  418368:	2800      	cmp	r0, #0
  41836a:	d1fa      	bne.n	418362 <usart_serial_getchar+0x5e>
  41836c:	e7df      	b.n	41832e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  41836e:	461f      	mov	r7, r3
  418370:	4e19      	ldr	r6, [pc, #100]	; (4183d8 <usart_serial_getchar+0xd4>)
  418372:	4621      	mov	r1, r4
  418374:	4638      	mov	r0, r7
  418376:	47b0      	blx	r6
  418378:	2800      	cmp	r0, #0
  41837a:	d1fa      	bne.n	418372 <usart_serial_getchar+0x6e>
  41837c:	e7da      	b.n	418334 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  41837e:	461e      	mov	r6, r3
  418380:	4d16      	ldr	r5, [pc, #88]	; (4183dc <usart_serial_getchar+0xd8>)
  418382:	a901      	add	r1, sp, #4
  418384:	4630      	mov	r0, r6
  418386:	47a8      	blx	r5
  418388:	2800      	cmp	r0, #0
  41838a:	d1fa      	bne.n	418382 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  41838c:	9b01      	ldr	r3, [sp, #4]
  41838e:	7023      	strb	r3, [r4, #0]
  418390:	e7d3      	b.n	41833a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  418392:	461e      	mov	r6, r3
  418394:	4d11      	ldr	r5, [pc, #68]	; (4183dc <usart_serial_getchar+0xd8>)
  418396:	a901      	add	r1, sp, #4
  418398:	4630      	mov	r0, r6
  41839a:	47a8      	blx	r5
  41839c:	2800      	cmp	r0, #0
  41839e:	d1fa      	bne.n	418396 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4183a0:	9b01      	ldr	r3, [sp, #4]
  4183a2:	7023      	strb	r3, [r4, #0]
  4183a4:	e7c9      	b.n	41833a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4183a6:	461e      	mov	r6, r3
  4183a8:	4d0c      	ldr	r5, [pc, #48]	; (4183dc <usart_serial_getchar+0xd8>)
  4183aa:	a901      	add	r1, sp, #4
  4183ac:	4630      	mov	r0, r6
  4183ae:	47a8      	blx	r5
  4183b0:	2800      	cmp	r0, #0
  4183b2:	d1fa      	bne.n	4183aa <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4183b4:	9b01      	ldr	r3, [sp, #4]
  4183b6:	7023      	strb	r3, [r4, #0]
}
  4183b8:	e7bf      	b.n	41833a <usart_serial_getchar+0x36>
  4183ba:	bf00      	nop
  4183bc:	400e0800 	.word	0x400e0800
  4183c0:	400e0a00 	.word	0x400e0a00
  4183c4:	400e1a00 	.word	0x400e1a00
  4183c8:	400e1c00 	.word	0x400e1c00
  4183cc:	40024000 	.word	0x40024000
  4183d0:	40028000 	.word	0x40028000
  4183d4:	4002c000 	.word	0x4002c000
  4183d8:	00417d41 	.word	0x00417d41
  4183dc:	00417e4f 	.word	0x00417e4f

004183e0 <usart_serial_putchar>:
{
  4183e0:	b570      	push	{r4, r5, r6, lr}
  4183e2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4183e4:	4b2a      	ldr	r3, [pc, #168]	; (418490 <usart_serial_putchar+0xb0>)
  4183e6:	4298      	cmp	r0, r3
  4183e8:	d013      	beq.n	418412 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4183ea:	4b2a      	ldr	r3, [pc, #168]	; (418494 <usart_serial_putchar+0xb4>)
  4183ec:	4298      	cmp	r0, r3
  4183ee:	d019      	beq.n	418424 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4183f0:	4b29      	ldr	r3, [pc, #164]	; (418498 <usart_serial_putchar+0xb8>)
  4183f2:	4298      	cmp	r0, r3
  4183f4:	d01f      	beq.n	418436 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4183f6:	4b29      	ldr	r3, [pc, #164]	; (41849c <usart_serial_putchar+0xbc>)
  4183f8:	4298      	cmp	r0, r3
  4183fa:	d025      	beq.n	418448 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4183fc:	4b28      	ldr	r3, [pc, #160]	; (4184a0 <usart_serial_putchar+0xc0>)
  4183fe:	4298      	cmp	r0, r3
  418400:	d02b      	beq.n	41845a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  418402:	4b28      	ldr	r3, [pc, #160]	; (4184a4 <usart_serial_putchar+0xc4>)
  418404:	4298      	cmp	r0, r3
  418406:	d031      	beq.n	41846c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  418408:	4b27      	ldr	r3, [pc, #156]	; (4184a8 <usart_serial_putchar+0xc8>)
  41840a:	4298      	cmp	r0, r3
  41840c:	d037      	beq.n	41847e <usart_serial_putchar+0x9e>
	return 0;
  41840e:	2000      	movs	r0, #0
}
  418410:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  418412:	461e      	mov	r6, r3
  418414:	4d25      	ldr	r5, [pc, #148]	; (4184ac <usart_serial_putchar+0xcc>)
  418416:	4621      	mov	r1, r4
  418418:	4630      	mov	r0, r6
  41841a:	47a8      	blx	r5
  41841c:	2800      	cmp	r0, #0
  41841e:	d1fa      	bne.n	418416 <usart_serial_putchar+0x36>
		return 1;
  418420:	2001      	movs	r0, #1
  418422:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  418424:	461e      	mov	r6, r3
  418426:	4d21      	ldr	r5, [pc, #132]	; (4184ac <usart_serial_putchar+0xcc>)
  418428:	4621      	mov	r1, r4
  41842a:	4630      	mov	r0, r6
  41842c:	47a8      	blx	r5
  41842e:	2800      	cmp	r0, #0
  418430:	d1fa      	bne.n	418428 <usart_serial_putchar+0x48>
		return 1;
  418432:	2001      	movs	r0, #1
  418434:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  418436:	461e      	mov	r6, r3
  418438:	4d1c      	ldr	r5, [pc, #112]	; (4184ac <usart_serial_putchar+0xcc>)
  41843a:	4621      	mov	r1, r4
  41843c:	4630      	mov	r0, r6
  41843e:	47a8      	blx	r5
  418440:	2800      	cmp	r0, #0
  418442:	d1fa      	bne.n	41843a <usart_serial_putchar+0x5a>
		return 1;
  418444:	2001      	movs	r0, #1
  418446:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  418448:	461e      	mov	r6, r3
  41844a:	4d18      	ldr	r5, [pc, #96]	; (4184ac <usart_serial_putchar+0xcc>)
  41844c:	4621      	mov	r1, r4
  41844e:	4630      	mov	r0, r6
  418450:	47a8      	blx	r5
  418452:	2800      	cmp	r0, #0
  418454:	d1fa      	bne.n	41844c <usart_serial_putchar+0x6c>
		return 1;
  418456:	2001      	movs	r0, #1
  418458:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  41845a:	461e      	mov	r6, r3
  41845c:	4d14      	ldr	r5, [pc, #80]	; (4184b0 <usart_serial_putchar+0xd0>)
  41845e:	4621      	mov	r1, r4
  418460:	4630      	mov	r0, r6
  418462:	47a8      	blx	r5
  418464:	2800      	cmp	r0, #0
  418466:	d1fa      	bne.n	41845e <usart_serial_putchar+0x7e>
		return 1;
  418468:	2001      	movs	r0, #1
  41846a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  41846c:	461e      	mov	r6, r3
  41846e:	4d10      	ldr	r5, [pc, #64]	; (4184b0 <usart_serial_putchar+0xd0>)
  418470:	4621      	mov	r1, r4
  418472:	4630      	mov	r0, r6
  418474:	47a8      	blx	r5
  418476:	2800      	cmp	r0, #0
  418478:	d1fa      	bne.n	418470 <usart_serial_putchar+0x90>
		return 1;
  41847a:	2001      	movs	r0, #1
  41847c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  41847e:	461e      	mov	r6, r3
  418480:	4d0b      	ldr	r5, [pc, #44]	; (4184b0 <usart_serial_putchar+0xd0>)
  418482:	4621      	mov	r1, r4
  418484:	4630      	mov	r0, r6
  418486:	47a8      	blx	r5
  418488:	2800      	cmp	r0, #0
  41848a:	d1fa      	bne.n	418482 <usart_serial_putchar+0xa2>
		return 1;
  41848c:	2001      	movs	r0, #1
  41848e:	bd70      	pop	{r4, r5, r6, pc}
  418490:	400e0800 	.word	0x400e0800
  418494:	400e0a00 	.word	0x400e0a00
  418498:	400e1a00 	.word	0x400e1a00
  41849c:	400e1c00 	.word	0x400e1c00
  4184a0:	40024000 	.word	0x40024000
  4184a4:	40028000 	.word	0x40028000
  4184a8:	4002c000 	.word	0x4002c000
  4184ac:	00417d2f 	.word	0x00417d2f
  4184b0:	00417e39 	.word	0x00417e39

004184b4 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  4184b4:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4184b6:	460a      	mov	r2, r1
  4184b8:	4601      	mov	r1, r0
  4184ba:	4802      	ldr	r0, [pc, #8]	; (4184c4 <vApplicationStackOverflowHook+0x10>)
  4184bc:	4b02      	ldr	r3, [pc, #8]	; (4184c8 <vApplicationStackOverflowHook+0x14>)
  4184be:	4798      	blx	r3
  4184c0:	e7fe      	b.n	4184c0 <vApplicationStackOverflowHook+0xc>
  4184c2:	bf00      	nop
  4184c4:	00422e84 	.word	0x00422e84
  4184c8:	00418d35 	.word	0x00418d35

004184cc <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4184cc:	4770      	bx	lr

004184ce <vApplicationMallocFailedHook>:
  4184ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4184d2:	b672      	cpsid	i
  4184d4:	f383 8811 	msr	BASEPRI, r3
  4184d8:	f3bf 8f6f 	isb	sy
  4184dc:	f3bf 8f4f 	dsb	sy
  4184e0:	b662      	cpsie	i
  4184e2:	e7fe      	b.n	4184e2 <vApplicationMallocFailedHook+0x14>

004184e4 <lv_termostato>:
void lv_termostato(void) {
  4184e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4184e8:	b085      	sub	sp, #20
	lv_style_init(&style);
  4184ea:	489a      	ldr	r0, [pc, #616]	; (418754 <lv_termostato+0x270>)
  4184ec:	4b9a      	ldr	r3, [pc, #616]	; (418758 <lv_termostato+0x274>)
  4184ee:	4798      	blx	r3
	lv_style_set_bg_color(&style, lv_color_black());
  4184f0:	f04f 0100 	mov.w	r1, #0
  4184f4:	4897      	ldr	r0, [pc, #604]	; (418754 <lv_termostato+0x270>)
  4184f6:	4b99      	ldr	r3, [pc, #612]	; (41875c <lv_termostato+0x278>)
  4184f8:	4798      	blx	r3
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  4184fa:	4b99      	ldr	r3, [pc, #612]	; (418760 <lv_termostato+0x27c>)
  4184fc:	4798      	blx	r3
  4184fe:	4b99      	ldr	r3, [pc, #612]	; (418764 <lv_termostato+0x280>)
  418500:	4798      	blx	r3
	lv_obj_t * btn1 = lv_btn_create(lv_scr_act());
  418502:	4b99      	ldr	r3, [pc, #612]	; (418768 <lv_termostato+0x284>)
  418504:	4798      	blx	r3
  418506:	4607      	mov	r7, r0
	lv_obj_add_event_cb(btn1, event_handler, LV_EVENT_ALL, NULL);
  418508:	2300      	movs	r3, #0
  41850a:	461a      	mov	r2, r3
  41850c:	4997      	ldr	r1, [pc, #604]	; (41876c <lv_termostato+0x288>)
  41850e:	4c98      	ldr	r4, [pc, #608]	; (418770 <lv_termostato+0x28c>)
  418510:	47a0      	blx	r4
	lv_obj_align(btn1, LV_ALIGN_BOTTOM_LEFT, 0, 0);
  418512:	2300      	movs	r3, #0
  418514:	461a      	mov	r2, r3
  418516:	2104      	movs	r1, #4
  418518:	4638      	mov	r0, r7
  41851a:	4d96      	ldr	r5, [pc, #600]	; (418774 <lv_termostato+0x290>)
  41851c:	47a8      	blx	r5
	lv_obj_add_style(btn1, &style, 0);
  41851e:	2200      	movs	r2, #0
  418520:	498c      	ldr	r1, [pc, #560]	; (418754 <lv_termostato+0x270>)
  418522:	4638      	mov	r0, r7
  418524:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 4187dc <lv_termostato+0x2f8>
  418528:	47d0      	blx	sl
	lv_obj_set_width(btn1, 60);  lv_obj_set_height(btn1, 60);
  41852a:	213c      	movs	r1, #60	; 0x3c
  41852c:	4638      	mov	r0, r7
  41852e:	4b92      	ldr	r3, [pc, #584]	; (418778 <lv_termostato+0x294>)
  418530:	4798      	blx	r3
  418532:	213c      	movs	r1, #60	; 0x3c
  418534:	4638      	mov	r0, r7
  418536:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 4187e0 <lv_termostato+0x2fc>
  41853a:	47c8      	blx	r9
	labelBtn1 = lv_label_create(btn1);
  41853c:	4638      	mov	r0, r7
  41853e:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 4187e4 <lv_termostato+0x300>
  418542:	47d8      	blx	fp
  418544:	4c8d      	ldr	r4, [pc, #564]	; (41877c <lv_termostato+0x298>)
  418546:	6020      	str	r0, [r4, #0]
	lv_label_set_text(labelBtn1, "[ " LV_SYMBOL_POWER);
  418548:	498d      	ldr	r1, [pc, #564]	; (418780 <lv_termostato+0x29c>)
  41854a:	f8df 829c 	ldr.w	r8, [pc, #668]	; 4187e8 <lv_termostato+0x304>
  41854e:	47c0      	blx	r8
 * @param obj       pointer to an object to align
 * @note            if the parent size changes `obj` needs to be aligned manually again
 */
static inline void lv_obj_center(struct _lv_obj_t * obj)
{
    lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
  418550:	2300      	movs	r3, #0
  418552:	461a      	mov	r2, r3
  418554:	2109      	movs	r1, #9
  418556:	6820      	ldr	r0, [r4, #0]
  418558:	47a8      	blx	r5
  41855a:	4b81      	ldr	r3, [pc, #516]	; (418760 <lv_termostato+0x27c>)
  41855c:	4798      	blx	r3
  41855e:	4b81      	ldr	r3, [pc, #516]	; (418764 <lv_termostato+0x280>)
  418560:	4798      	blx	r3
	lv_obj_t * btn2 = lv_btn_create(lv_scr_act());
  418562:	4b81      	ldr	r3, [pc, #516]	; (418768 <lv_termostato+0x284>)
  418564:	4798      	blx	r3
  418566:	4606      	mov	r6, r0
	lv_obj_add_event_cb(btn2, menu_handler, LV_EVENT_ALL, NULL);
  418568:	2300      	movs	r3, #0
  41856a:	461a      	mov	r2, r3
  41856c:	4985      	ldr	r1, [pc, #532]	; (418784 <lv_termostato+0x2a0>)
  41856e:	4c80      	ldr	r4, [pc, #512]	; (418770 <lv_termostato+0x28c>)
  418570:	47a0      	blx	r4
	lv_obj_align_to(btn2, btn1, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
  418572:	2400      	movs	r4, #0
  418574:	9400      	str	r4, [sp, #0]
  418576:	4623      	mov	r3, r4
  418578:	2213      	movs	r2, #19
  41857a:	4639      	mov	r1, r7
  41857c:	4630      	mov	r0, r6
  41857e:	4f82      	ldr	r7, [pc, #520]	; (418788 <lv_termostato+0x2a4>)
  418580:	47b8      	blx	r7
	lv_obj_add_style(btn2, &style, 0);
  418582:	4622      	mov	r2, r4
  418584:	4973      	ldr	r1, [pc, #460]	; (418754 <lv_termostato+0x270>)
  418586:	4630      	mov	r0, r6
  418588:	47d0      	blx	sl
	lv_obj_set_width(btn2, 60);  lv_obj_set_height(btn2, 60);
  41858a:	213c      	movs	r1, #60	; 0x3c
  41858c:	4630      	mov	r0, r6
  41858e:	4b7a      	ldr	r3, [pc, #488]	; (418778 <lv_termostato+0x294>)
  418590:	4798      	blx	r3
  418592:	213c      	movs	r1, #60	; 0x3c
  418594:	4630      	mov	r0, r6
  418596:	47c8      	blx	r9
	labelBtn2 = lv_label_create(btn2);
  418598:	9603      	str	r6, [sp, #12]
  41859a:	4630      	mov	r0, r6
  41859c:	47d8      	blx	fp
  41859e:	4f7b      	ldr	r7, [pc, #492]	; (41878c <lv_termostato+0x2a8>)
  4185a0:	6038      	str	r0, [r7, #0]
	lv_label_set_text(labelBtn2, "| " LV_SYMBOL_LIST);
  4185a2:	497b      	ldr	r1, [pc, #492]	; (418790 <lv_termostato+0x2ac>)
  4185a4:	47c0      	blx	r8
  4185a6:	4623      	mov	r3, r4
  4185a8:	4622      	mov	r2, r4
  4185aa:	2109      	movs	r1, #9
  4185ac:	6838      	ldr	r0, [r7, #0]
  4185ae:	47a8      	blx	r5
  4185b0:	4b6b      	ldr	r3, [pc, #428]	; (418760 <lv_termostato+0x27c>)
  4185b2:	4798      	blx	r3
  4185b4:	4b6b      	ldr	r3, [pc, #428]	; (418764 <lv_termostato+0x280>)
  4185b6:	4798      	blx	r3
	lv_obj_t * btn3 = lv_btn_create(lv_scr_act());
  4185b8:	4b6b      	ldr	r3, [pc, #428]	; (418768 <lv_termostato+0x284>)
  4185ba:	4798      	blx	r3
  4185bc:	4606      	mov	r6, r0
	lv_obj_add_event_cb(btn3, clk_handler, LV_EVENT_ALL, NULL);
  4185be:	4623      	mov	r3, r4
  4185c0:	4622      	mov	r2, r4
  4185c2:	4974      	ldr	r1, [pc, #464]	; (418794 <lv_termostato+0x2b0>)
  4185c4:	4f6a      	ldr	r7, [pc, #424]	; (418770 <lv_termostato+0x28c>)
  4185c6:	47b8      	blx	r7
	lv_obj_align_to(btn3, btn2, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
  4185c8:	9400      	str	r4, [sp, #0]
  4185ca:	4623      	mov	r3, r4
  4185cc:	2213      	movs	r2, #19
  4185ce:	9903      	ldr	r1, [sp, #12]
  4185d0:	4630      	mov	r0, r6
  4185d2:	4f6d      	ldr	r7, [pc, #436]	; (418788 <lv_termostato+0x2a4>)
  4185d4:	47b8      	blx	r7
	lv_obj_add_style(btn3, &style, 0);
  4185d6:	4622      	mov	r2, r4
  4185d8:	495e      	ldr	r1, [pc, #376]	; (418754 <lv_termostato+0x270>)
  4185da:	4630      	mov	r0, r6
  4185dc:	47d0      	blx	sl
	lv_obj_set_width(btn3, 60);  lv_obj_set_height(btn3, 60);
  4185de:	213c      	movs	r1, #60	; 0x3c
  4185e0:	4630      	mov	r0, r6
  4185e2:	4b65      	ldr	r3, [pc, #404]	; (418778 <lv_termostato+0x294>)
  4185e4:	4798      	blx	r3
  4185e6:	213c      	movs	r1, #60	; 0x3c
  4185e8:	4630      	mov	r0, r6
  4185ea:	47c8      	blx	r9
	labelBtn3 = lv_label_create(btn3);
  4185ec:	9603      	str	r6, [sp, #12]
  4185ee:	4630      	mov	r0, r6
  4185f0:	47d8      	blx	fp
  4185f2:	4f69      	ldr	r7, [pc, #420]	; (418798 <lv_termostato+0x2b4>)
  4185f4:	6038      	str	r0, [r7, #0]
	lv_label_set_text(labelBtn3, "| " LV_SYMBOL_SETTINGS " ]");
  4185f6:	4969      	ldr	r1, [pc, #420]	; (41879c <lv_termostato+0x2b8>)
  4185f8:	47c0      	blx	r8
  4185fa:	4623      	mov	r3, r4
  4185fc:	4622      	mov	r2, r4
  4185fe:	2109      	movs	r1, #9
  418600:	6838      	ldr	r0, [r7, #0]
  418602:	47a8      	blx	r5
  418604:	4b56      	ldr	r3, [pc, #344]	; (418760 <lv_termostato+0x27c>)
  418606:	4798      	blx	r3
  418608:	4b56      	ldr	r3, [pc, #344]	; (418764 <lv_termostato+0x280>)
  41860a:	4798      	blx	r3
	lv_obj_t * btn4 = lv_btn_create(lv_scr_act());
  41860c:	4b56      	ldr	r3, [pc, #344]	; (418768 <lv_termostato+0x284>)
  41860e:	4798      	blx	r3
  418610:	4606      	mov	r6, r0
	lv_obj_add_event_cb(btn4, up_handler, LV_EVENT_ALL, NULL);
  418612:	4623      	mov	r3, r4
  418614:	4622      	mov	r2, r4
  418616:	4962      	ldr	r1, [pc, #392]	; (4187a0 <lv_termostato+0x2bc>)
  418618:	4f55      	ldr	r7, [pc, #340]	; (418770 <lv_termostato+0x28c>)
  41861a:	47b8      	blx	r7
	lv_obj_align_to(btn4, btn3, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
  41861c:	9400      	str	r4, [sp, #0]
  41861e:	4623      	mov	r3, r4
  418620:	2213      	movs	r2, #19
  418622:	9903      	ldr	r1, [sp, #12]
  418624:	4630      	mov	r0, r6
  418626:	4f58      	ldr	r7, [pc, #352]	; (418788 <lv_termostato+0x2a4>)
  418628:	47b8      	blx	r7
	lv_obj_add_style(btn4, &style, 0);
  41862a:	4622      	mov	r2, r4
  41862c:	4949      	ldr	r1, [pc, #292]	; (418754 <lv_termostato+0x270>)
  41862e:	4630      	mov	r0, r6
  418630:	47d0      	blx	sl
	lv_obj_set_width(btn4, 60);  lv_obj_set_height(btn4, 60);
  418632:	213c      	movs	r1, #60	; 0x3c
  418634:	4630      	mov	r0, r6
  418636:	4b50      	ldr	r3, [pc, #320]	; (418778 <lv_termostato+0x294>)
  418638:	4798      	blx	r3
  41863a:	213c      	movs	r1, #60	; 0x3c
  41863c:	4630      	mov	r0, r6
  41863e:	47c8      	blx	r9
	labelBtn4 = lv_label_create(btn4);
  418640:	9603      	str	r6, [sp, #12]
  418642:	4630      	mov	r0, r6
  418644:	47d8      	blx	fp
  418646:	4f57      	ldr	r7, [pc, #348]	; (4187a4 <lv_termostato+0x2c0>)
  418648:	6038      	str	r0, [r7, #0]
	lv_label_set_text(labelBtn4, "[ " LV_SYMBOL_UP);
  41864a:	4957      	ldr	r1, [pc, #348]	; (4187a8 <lv_termostato+0x2c4>)
  41864c:	47c0      	blx	r8
  41864e:	4623      	mov	r3, r4
  418650:	4622      	mov	r2, r4
  418652:	2109      	movs	r1, #9
  418654:	6838      	ldr	r0, [r7, #0]
  418656:	47a8      	blx	r5
  418658:	4b41      	ldr	r3, [pc, #260]	; (418760 <lv_termostato+0x27c>)
  41865a:	4798      	blx	r3
  41865c:	4b41      	ldr	r3, [pc, #260]	; (418764 <lv_termostato+0x280>)
  41865e:	4798      	blx	r3
	lv_obj_t * btn5 = lv_btn_create(lv_scr_act());
  418660:	4b41      	ldr	r3, [pc, #260]	; (418768 <lv_termostato+0x284>)
  418662:	4798      	blx	r3
  418664:	4607      	mov	r7, r0
	lv_obj_add_event_cb(btn5, down_handler, LV_EVENT_ALL, NULL);
  418666:	4623      	mov	r3, r4
  418668:	4622      	mov	r2, r4
  41866a:	4950      	ldr	r1, [pc, #320]	; (4187ac <lv_termostato+0x2c8>)
  41866c:	4e40      	ldr	r6, [pc, #256]	; (418770 <lv_termostato+0x28c>)
  41866e:	47b0      	blx	r6
	lv_obj_align_to(btn5, btn4, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
  418670:	9400      	str	r4, [sp, #0]
  418672:	4623      	mov	r3, r4
  418674:	2213      	movs	r2, #19
  418676:	9903      	ldr	r1, [sp, #12]
  418678:	4638      	mov	r0, r7
  41867a:	4e43      	ldr	r6, [pc, #268]	; (418788 <lv_termostato+0x2a4>)
  41867c:	47b0      	blx	r6
	lv_obj_add_style(btn5, &style, 0);
  41867e:	4622      	mov	r2, r4
  418680:	4934      	ldr	r1, [pc, #208]	; (418754 <lv_termostato+0x270>)
  418682:	4638      	mov	r0, r7
  418684:	47d0      	blx	sl
	lv_obj_set_width(btn5, 60);  lv_obj_set_height(btn5, 60);
  418686:	213c      	movs	r1, #60	; 0x3c
  418688:	4638      	mov	r0, r7
  41868a:	4b3b      	ldr	r3, [pc, #236]	; (418778 <lv_termostato+0x294>)
  41868c:	4798      	blx	r3
  41868e:	213c      	movs	r1, #60	; 0x3c
  418690:	4638      	mov	r0, r7
  418692:	47c8      	blx	r9
	labelBtn5 = lv_label_create(btn5);
  418694:	4638      	mov	r0, r7
  418696:	47d8      	blx	fp
  418698:	4f45      	ldr	r7, [pc, #276]	; (4187b0 <lv_termostato+0x2cc>)
  41869a:	6038      	str	r0, [r7, #0]
	lv_label_set_text(labelBtn5, LV_SYMBOL_DOWN " ]");
  41869c:	4945      	ldr	r1, [pc, #276]	; (4187b4 <lv_termostato+0x2d0>)
  41869e:	47c0      	blx	r8
  4186a0:	4623      	mov	r3, r4
  4186a2:	4622      	mov	r2, r4
  4186a4:	2109      	movs	r1, #9
  4186a6:	6838      	ldr	r0, [r7, #0]
  4186a8:	47a8      	blx	r5
  4186aa:	4b2d      	ldr	r3, [pc, #180]	; (418760 <lv_termostato+0x27c>)
  4186ac:	4798      	blx	r3
  4186ae:	4b2d      	ldr	r3, [pc, #180]	; (418764 <lv_termostato+0x280>)
  4186b0:	4798      	blx	r3
	labelFloor = lv_label_create(lv_scr_act());
  4186b2:	47d8      	blx	fp
  4186b4:	4f40      	ldr	r7, [pc, #256]	; (4187b8 <lv_termostato+0x2d4>)
  4186b6:	6038      	str	r0, [r7, #0]
	lv_obj_align(labelFloor, LV_ALIGN_LEFT_MID, 35 , -25);
  4186b8:	f06f 0318 	mvn.w	r3, #24
  4186bc:	2223      	movs	r2, #35	; 0x23
  4186be:	2107      	movs	r1, #7
  4186c0:	47a8      	blx	r5
	lv_obj_set_style_text_font(labelFloor, &dseg70, LV_STATE_DEFAULT);
  4186c2:	4622      	mov	r2, r4
  4186c4:	493d      	ldr	r1, [pc, #244]	; (4187bc <lv_termostato+0x2d8>)
  4186c6:	6838      	ldr	r0, [r7, #0]
  4186c8:	f8df a120 	ldr.w	sl, [pc, #288]	; 4187ec <lv_termostato+0x308>
  4186cc:	47d0      	blx	sl
	lv_obj_set_style_text_color(labelFloor, lv_color_white(), LV_STATE_DEFAULT);
  4186ce:	4622      	mov	r2, r4
  4186d0:	f04f 31ff 	mov.w	r1, #4294967295
  4186d4:	6838      	ldr	r0, [r7, #0]
  4186d6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 4187f0 <lv_termostato+0x30c>
  4186da:	47c8      	blx	r9
	lv_label_set_text_fmt(labelFloor, "%02d", 23);
  4186dc:	2217      	movs	r2, #23
  4186de:	4938      	ldr	r1, [pc, #224]	; (4187c0 <lv_termostato+0x2dc>)
  4186e0:	6838      	ldr	r0, [r7, #0]
  4186e2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 4187f4 <lv_termostato+0x310>
  4186e6:	47c0      	blx	r8
  4186e8:	4b1d      	ldr	r3, [pc, #116]	; (418760 <lv_termostato+0x27c>)
  4186ea:	4798      	blx	r3
  4186ec:	4b1d      	ldr	r3, [pc, #116]	; (418764 <lv_termostato+0x280>)
  4186ee:	4798      	blx	r3
	labelSetValue = lv_label_create(lv_scr_act());
  4186f0:	47d8      	blx	fp
  4186f2:	4f34      	ldr	r7, [pc, #208]	; (4187c4 <lv_termostato+0x2e0>)
  4186f4:	6038      	str	r0, [r7, #0]
	lv_obj_align(labelSetValue, LV_ALIGN_LEFT_MID, 235 , -35);
  4186f6:	f06f 0322 	mvn.w	r3, #34	; 0x22
  4186fa:	22eb      	movs	r2, #235	; 0xeb
  4186fc:	2107      	movs	r1, #7
  4186fe:	47a8      	blx	r5
	lv_obj_set_style_text_font(labelSetValue, &dseg50, LV_STATE_DEFAULT);
  418700:	4622      	mov	r2, r4
  418702:	4931      	ldr	r1, [pc, #196]	; (4187c8 <lv_termostato+0x2e4>)
  418704:	6838      	ldr	r0, [r7, #0]
  418706:	47d0      	blx	sl
	lv_obj_set_style_text_color(labelSetValue, lv_color_white(), LV_STATE_DEFAULT);
  418708:	4622      	mov	r2, r4
  41870a:	f04f 31ff 	mov.w	r1, #4294967295
  41870e:	6838      	ldr	r0, [r7, #0]
  418710:	47c8      	blx	r9
	lv_label_set_text_fmt(labelSetValue, "%02d", 22);
  418712:	2216      	movs	r2, #22
  418714:	492a      	ldr	r1, [pc, #168]	; (4187c0 <lv_termostato+0x2dc>)
  418716:	6838      	ldr	r0, [r7, #0]
  418718:	47c0      	blx	r8
  41871a:	4b11      	ldr	r3, [pc, #68]	; (418760 <lv_termostato+0x27c>)
  41871c:	4798      	blx	r3
  41871e:	4b11      	ldr	r3, [pc, #68]	; (418764 <lv_termostato+0x280>)
  418720:	4798      	blx	r3
	labelClock = lv_label_create(lv_scr_act());
  418722:	47d8      	blx	fp
  418724:	4e29      	ldr	r6, [pc, #164]	; (4187cc <lv_termostato+0x2e8>)
  418726:	6030      	str	r0, [r6, #0]
	lv_obj_align(labelClock, LV_ALIGN_LEFT_MID, 210 , -95);
  418728:	f06f 035e 	mvn.w	r3, #94	; 0x5e
  41872c:	22d2      	movs	r2, #210	; 0xd2
  41872e:	2107      	movs	r1, #7
  418730:	47a8      	blx	r5
	lv_obj_set_style_text_font(labelClock, &dseg40, LV_STATE_DEFAULT);
  418732:	4622      	mov	r2, r4
  418734:	4926      	ldr	r1, [pc, #152]	; (4187d0 <lv_termostato+0x2ec>)
  418736:	6830      	ldr	r0, [r6, #0]
  418738:	47d0      	blx	sl
	lv_obj_set_style_text_color(labelClock, lv_color_white(), LV_STATE_DEFAULT);
  41873a:	4622      	mov	r2, r4
  41873c:	f04f 31ff 	mov.w	r1, #4294967295
  418740:	6830      	ldr	r0, [r6, #0]
  418742:	47c8      	blx	r9
	lv_label_set_text_fmt(labelClock, "%s", "17:46");
  418744:	4a23      	ldr	r2, [pc, #140]	; (4187d4 <lv_termostato+0x2f0>)
  418746:	4924      	ldr	r1, [pc, #144]	; (4187d8 <lv_termostato+0x2f4>)
  418748:	6830      	ldr	r0, [r6, #0]
  41874a:	47c0      	blx	r8
}
  41874c:	b005      	add	sp, #20
  41874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418752:	bf00      	nop
  418754:	20439df8 	.word	0x20439df8
  418758:	004121d1 	.word	0x004121d1
  41875c:	00412625 	.word	0x00412625
  418760:	00410131 	.word	0x00410131
  418764:	004001d5 	.word	0x004001d5
  418768:	00413ad1 	.word	0x00413ad1
  41876c:	00418119 	.word	0x00418119
  418770:	00400509 	.word	0x00400509
  418774:	00402295 	.word	0x00402295
  418778:	0040212d 	.word	0x0040212d
  41877c:	20439dd8 	.word	0x20439dd8
  418780:	00422e34 	.word	0x00422e34
  418784:	004181b9 	.word	0x004181b9
  418788:	004033dd 	.word	0x004033dd
  41878c:	20439ddc 	.word	0x20439ddc
  418790:	00422e3c 	.word	0x00422e3c
  418794:	00418169 	.word	0x00418169
  418798:	20439de0 	.word	0x20439de0
  41879c:	00422e44 	.word	0x00422e44
  4187a0:	00418245 	.word	0x00418245
  4187a4:	20439de4 	.word	0x20439de4
  4187a8:	00422e4c 	.word	0x00422e4c
  4187ac:	00418209 	.word	0x00418209
  4187b0:	20439de8 	.word	0x20439de8
  4187b4:	00422e54 	.word	0x00422e54
  4187b8:	20439df0 	.word	0x20439df0
  4187bc:	00421f6c 	.word	0x00421f6c
  4187c0:	00422e0c 	.word	0x00422e0c
  4187c4:	20439df4 	.word	0x20439df4
  4187c8:	0042178c 	.word	0x0042178c
  4187cc:	20439dec 	.word	0x20439dec
  4187d0:	00421228 	.word	0x00421228
  4187d4:	00422e5c 	.word	0x00422e5c
  4187d8:	00420adc 	.word	0x00420adc
  4187dc:	00405205 	.word	0x00405205
  4187e0:	00402165 	.word	0x00402165
  4187e4:	00413bdd 	.word	0x00413bdd
  4187e8:	00414415 	.word	0x00414415
  4187ec:	00405d49 	.word	0x00405d49
  4187f0:	00405d35 	.word	0x00405d35
  4187f4:	004144f5 	.word	0x004144f5

004187f8 <task_lcd>:
static void task_lcd(void *pvParameters) {
  4187f8:	b508      	push	{r3, lr}
	lv_termostato();
  4187fa:	4b06      	ldr	r3, [pc, #24]	; (418814 <task_lcd+0x1c>)
  4187fc:	4798      	blx	r3
		lv_tick_inc(50);
  4187fe:	2432      	movs	r4, #50	; 0x32
  418800:	4e05      	ldr	r6, [pc, #20]	; (418818 <task_lcd+0x20>)
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
  418802:	4d06      	ldr	r5, [pc, #24]	; (41881c <task_lcd+0x24>)
  418804:	4620      	mov	r0, r4
  418806:	47b0      	blx	r6
  418808:	47a8      	blx	r5
		vTaskDelay(50);
  41880a:	4620      	mov	r0, r4
  41880c:	4b04      	ldr	r3, [pc, #16]	; (418820 <task_lcd+0x28>)
  41880e:	4798      	blx	r3
  418810:	e7f8      	b.n	418804 <task_lcd+0xc>
  418812:	bf00      	nop
  418814:	004184e5 	.word	0x004184e5
  418818:	00410221 	.word	0x00410221
  41881c:	004126fd 	.word	0x004126fd
  418820:	004167fd 	.word	0x004167fd

00418824 <configure_lvgl>:

void configure_lvgl(void) {
  418824:	b538      	push	{r3, r4, r5, lr}
	lv_init();
  418826:	4b0f      	ldr	r3, [pc, #60]	; (418864 <configure_lvgl+0x40>)
  418828:	4798      	blx	r3
	lv_disp_draw_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);
  41882a:	4d0f      	ldr	r5, [pc, #60]	; (418868 <configure_lvgl+0x44>)
  41882c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  418830:	2200      	movs	r2, #0
  418832:	490e      	ldr	r1, [pc, #56]	; (41886c <configure_lvgl+0x48>)
  418834:	4628      	mov	r0, r5
  418836:	4c0e      	ldr	r4, [pc, #56]	; (418870 <configure_lvgl+0x4c>)
  418838:	47a0      	blx	r4
	
	lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  41883a:	4c0e      	ldr	r4, [pc, #56]	; (418874 <configure_lvgl+0x50>)
  41883c:	4620      	mov	r0, r4
  41883e:	4b0e      	ldr	r3, [pc, #56]	; (418878 <configure_lvgl+0x54>)
  418840:	4798      	blx	r3
	disp_drv.draw_buf = &disp_buf;          /*Set an initialized buffer*/
  418842:	60e5      	str	r5, [r4, #12]
	disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  418844:	4b0d      	ldr	r3, [pc, #52]	; (41887c <configure_lvgl+0x58>)
  418846:	6163      	str	r3, [r4, #20]
	disp_drv.hor_res = LV_HOR_RES_MAX;      /*Set the horizontal resolution in pixels*/
  418848:	f44f 73a0 	mov.w	r3, #320	; 0x140
  41884c:	8023      	strh	r3, [r4, #0]
	disp_drv.ver_res = LV_VER_RES_MAX;      /*Set the vertical resolution in pixels*/
  41884e:	23f0      	movs	r3, #240	; 0xf0
  418850:	8063      	strh	r3, [r4, #2]

	//lv_disp_t * disp;
	
	/* Init input on LVGL */
	lv_indev_drv_init(&indev_drv);
  418852:	4c0b      	ldr	r4, [pc, #44]	; (418880 <configure_lvgl+0x5c>)
  418854:	4620      	mov	r0, r4
  418856:	4b0b      	ldr	r3, [pc, #44]	; (418884 <configure_lvgl+0x60>)
  418858:	4798      	blx	r3
	indev_drv.type = LV_INDEV_TYPE_POINTER;
  41885a:	2301      	movs	r3, #1
  41885c:	7023      	strb	r3, [r4, #0]
	indev_drv.read_cb = my_input_read;
  41885e:	4b0a      	ldr	r3, [pc, #40]	; (418888 <configure_lvgl+0x64>)
  418860:	6063      	str	r3, [r4, #4]
  418862:	bd38      	pop	{r3, r4, r5, pc}
  418864:	00401205 	.word	0x00401205
  418868:	20439d54 	.word	0x20439d54
  41886c:	20414554 	.word	0x20414554
  418870:	00410111 	.word	0x00410111
  418874:	20439d78 	.word	0x20439d78
  418878:	004100bd 	.word	0x004100bd
  41887c:	00418281 	.word	0x00418281
  418880:	20439db8 	.word	0x20439db8
  418884:	004101d1 	.word	0x004101d1
  418888:	004182d9 	.word	0x004182d9

0041888c <main>:
}

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  41888c:	b500      	push	{lr}
  41888e:	b08b      	sub	sp, #44	; 0x2c
	/* board and sys init */
	board_init();
  418890:	4b34      	ldr	r3, [pc, #208]	; (418964 <main+0xd8>)
  418892:	4798      	blx	r3
	sysclk_init();
  418894:	4b34      	ldr	r3, [pc, #208]	; (418968 <main+0xdc>)
  418896:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  418898:	4d34      	ldr	r5, [pc, #208]	; (41896c <main+0xe0>)
  41889a:	4b35      	ldr	r3, [pc, #212]	; (418970 <main+0xe4>)
  41889c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  41889e:	4a35      	ldr	r2, [pc, #212]	; (418974 <main+0xe8>)
  4188a0:	4b35      	ldr	r3, [pc, #212]	; (418978 <main+0xec>)
  4188a2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4188a4:	4a35      	ldr	r2, [pc, #212]	; (41897c <main+0xf0>)
  4188a6:	4b36      	ldr	r3, [pc, #216]	; (418980 <main+0xf4>)
  4188a8:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4188aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4188ae:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4188b0:	23c0      	movs	r3, #192	; 0xc0
  4188b2:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4188b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4188b8:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4188ba:	2400      	movs	r4, #0
  4188bc:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4188be:	9408      	str	r4, [sp, #32]
  4188c0:	200e      	movs	r0, #14
  4188c2:	4b30      	ldr	r3, [pc, #192]	; (418984 <main+0xf8>)
  4188c4:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4188c6:	4a30      	ldr	r2, [pc, #192]	; (418988 <main+0xfc>)
  4188c8:	a904      	add	r1, sp, #16
  4188ca:	4628      	mov	r0, r5
  4188cc:	4b2f      	ldr	r3, [pc, #188]	; (41898c <main+0x100>)
  4188ce:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4188d0:	4628      	mov	r0, r5
  4188d2:	4b2f      	ldr	r3, [pc, #188]	; (418990 <main+0x104>)
  4188d4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4188d6:	4628      	mov	r0, r5
  4188d8:	4b2e      	ldr	r3, [pc, #184]	; (418994 <main+0x108>)
  4188da:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4188dc:	4e2e      	ldr	r6, [pc, #184]	; (418998 <main+0x10c>)
  4188de:	6833      	ldr	r3, [r6, #0]
  4188e0:	4621      	mov	r1, r4
  4188e2:	6898      	ldr	r0, [r3, #8]
  4188e4:	4d2d      	ldr	r5, [pc, #180]	; (41899c <main+0x110>)
  4188e6:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4188e8:	6833      	ldr	r3, [r6, #0]
  4188ea:	4621      	mov	r1, r4
  4188ec:	6858      	ldr	r0, [r3, #4]
  4188ee:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4188f0:	6833      	ldr	r3, [r6, #0]
  4188f2:	4621      	mov	r1, r4
  4188f4:	6898      	ldr	r0, [r3, #8]
  4188f6:	47a8      	blx	r5
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  4188f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4188fc:	2074      	movs	r0, #116	; 0x74
  4188fe:	4d28      	ldr	r5, [pc, #160]	; (4189a0 <main+0x114>)
  418900:	47a8      	blx	r5
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  418902:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  418906:	2075      	movs	r0, #117	; 0x75
  418908:	47a8      	blx	r5
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  41890a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41890e:	2076      	movs	r0, #118	; 0x76
  418910:	47a8      	blx	r5
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  418912:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  418916:	207b      	movs	r0, #123	; 0x7b
  418918:	47a8      	blx	r5
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  41891a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41891e:	2018      	movs	r0, #24
  418920:	47a8      	blx	r5
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  418922:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  418926:	2006      	movs	r0, #6
  418928:	47a8      	blx	r5
	ili9341_init();
  41892a:	4b1e      	ldr	r3, [pc, #120]	; (4189a4 <main+0x118>)
  41892c:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  41892e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  418932:	4b1d      	ldr	r3, [pc, #116]	; (4189a8 <main+0x11c>)
  418934:	631a      	str	r2, [r3, #48]	; 0x30
	configure_console();

	/* LCd, touch and lvgl init*/
	configure_lcd();
	configure_touch();
  418936:	4b1d      	ldr	r3, [pc, #116]	; (4189ac <main+0x120>)
  418938:	4798      	blx	r3
	configure_lvgl();
  41893a:	4b1d      	ldr	r3, [pc, #116]	; (4189b0 <main+0x124>)
  41893c:	4798      	blx	r3

	/* Create task to control oled */
	if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  41893e:	9403      	str	r4, [sp, #12]
  418940:	9402      	str	r4, [sp, #8]
  418942:	9401      	str	r4, [sp, #4]
  418944:	9400      	str	r4, [sp, #0]
  418946:	4623      	mov	r3, r4
  418948:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  41894c:	4919      	ldr	r1, [pc, #100]	; (4189b4 <main+0x128>)
  41894e:	481a      	ldr	r0, [pc, #104]	; (4189b8 <main+0x12c>)
  418950:	4c1a      	ldr	r4, [pc, #104]	; (4189bc <main+0x130>)
  418952:	47a0      	blx	r4
  418954:	2801      	cmp	r0, #1
  418956:	d002      	beq.n	41895e <main+0xd2>
		printf("Failed to create lcd task\r\n");
  418958:	4819      	ldr	r0, [pc, #100]	; (4189c0 <main+0x134>)
  41895a:	4b1a      	ldr	r3, [pc, #104]	; (4189c4 <main+0x138>)
  41895c:	4798      	blx	r3
	}
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  41895e:	4b1a      	ldr	r3, [pc, #104]	; (4189c8 <main+0x13c>)
  418960:	4798      	blx	r3
  418962:	e7fe      	b.n	418962 <main+0xd6>
  418964:	00417461 	.word	0x00417461
  418968:	0041725d 	.word	0x0041725d
  41896c:	40028000 	.word	0x40028000
  418970:	2043a134 	.word	0x2043a134
  418974:	004183e1 	.word	0x004183e1
  418978:	2043a130 	.word	0x2043a130
  41897c:	00418305 	.word	0x00418305
  418980:	2043a12c 	.word	0x2043a12c
  418984:	00417bc9 	.word	0x00417bc9
  418988:	08f0d180 	.word	0x08f0d180
  41898c:	00417dd9 	.word	0x00417dd9
  418990:	00417e2d 	.word	0x00417e2d
  418994:	00417e33 	.word	0x00417e33
  418998:	20400038 	.word	0x20400038
  41899c:	004195a1 	.word	0x004195a1
  4189a0:	004178c5 	.word	0x004178c5
  4189a4:	00415079 	.word	0x00415079
  4189a8:	400e1200 	.word	0x400e1200
  4189ac:	00414a75 	.word	0x00414a75
  4189b0:	00418825 	.word	0x00418825
  4189b4:	00422e64 	.word	0x00422e64
  4189b8:	004187f9 	.word	0x004187f9
  4189bc:	004162b1 	.word	0x004162b1
  4189c0:	00422e68 	.word	0x00422e68
  4189c4:	00418d35 	.word	0x00418d35
  4189c8:	004164e5 	.word	0x004164e5

004189cc <__aeabi_uldivmod>:
  4189cc:	b953      	cbnz	r3, 4189e4 <__aeabi_uldivmod+0x18>
  4189ce:	b94a      	cbnz	r2, 4189e4 <__aeabi_uldivmod+0x18>
  4189d0:	2900      	cmp	r1, #0
  4189d2:	bf08      	it	eq
  4189d4:	2800      	cmpeq	r0, #0
  4189d6:	bf1c      	itt	ne
  4189d8:	f04f 31ff 	movne.w	r1, #4294967295
  4189dc:	f04f 30ff 	movne.w	r0, #4294967295
  4189e0:	f000 b97a 	b.w	418cd8 <__aeabi_idiv0>
  4189e4:	f1ad 0c08 	sub.w	ip, sp, #8
  4189e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4189ec:	f000 f806 	bl	4189fc <__udivmoddi4>
  4189f0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4189f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4189f8:	b004      	add	sp, #16
  4189fa:	4770      	bx	lr

004189fc <__udivmoddi4>:
  4189fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  418a00:	468c      	mov	ip, r1
  418a02:	460d      	mov	r5, r1
  418a04:	4604      	mov	r4, r0
  418a06:	9e08      	ldr	r6, [sp, #32]
  418a08:	2b00      	cmp	r3, #0
  418a0a:	d151      	bne.n	418ab0 <__udivmoddi4+0xb4>
  418a0c:	428a      	cmp	r2, r1
  418a0e:	4617      	mov	r7, r2
  418a10:	d96d      	bls.n	418aee <__udivmoddi4+0xf2>
  418a12:	fab2 fe82 	clz	lr, r2
  418a16:	f1be 0f00 	cmp.w	lr, #0
  418a1a:	d00b      	beq.n	418a34 <__udivmoddi4+0x38>
  418a1c:	f1ce 0c20 	rsb	ip, lr, #32
  418a20:	fa01 f50e 	lsl.w	r5, r1, lr
  418a24:	fa20 fc0c 	lsr.w	ip, r0, ip
  418a28:	fa02 f70e 	lsl.w	r7, r2, lr
  418a2c:	ea4c 0c05 	orr.w	ip, ip, r5
  418a30:	fa00 f40e 	lsl.w	r4, r0, lr
  418a34:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  418a38:	0c25      	lsrs	r5, r4, #16
  418a3a:	fbbc f8fa 	udiv	r8, ip, sl
  418a3e:	fa1f f987 	uxth.w	r9, r7
  418a42:	fb0a cc18 	mls	ip, sl, r8, ip
  418a46:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  418a4a:	fb08 f309 	mul.w	r3, r8, r9
  418a4e:	42ab      	cmp	r3, r5
  418a50:	d90a      	bls.n	418a68 <__udivmoddi4+0x6c>
  418a52:	19ed      	adds	r5, r5, r7
  418a54:	f108 32ff 	add.w	r2, r8, #4294967295
  418a58:	f080 8123 	bcs.w	418ca2 <__udivmoddi4+0x2a6>
  418a5c:	42ab      	cmp	r3, r5
  418a5e:	f240 8120 	bls.w	418ca2 <__udivmoddi4+0x2a6>
  418a62:	f1a8 0802 	sub.w	r8, r8, #2
  418a66:	443d      	add	r5, r7
  418a68:	1aed      	subs	r5, r5, r3
  418a6a:	b2a4      	uxth	r4, r4
  418a6c:	fbb5 f0fa 	udiv	r0, r5, sl
  418a70:	fb0a 5510 	mls	r5, sl, r0, r5
  418a74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  418a78:	fb00 f909 	mul.w	r9, r0, r9
  418a7c:	45a1      	cmp	r9, r4
  418a7e:	d909      	bls.n	418a94 <__udivmoddi4+0x98>
  418a80:	19e4      	adds	r4, r4, r7
  418a82:	f100 33ff 	add.w	r3, r0, #4294967295
  418a86:	f080 810a 	bcs.w	418c9e <__udivmoddi4+0x2a2>
  418a8a:	45a1      	cmp	r9, r4
  418a8c:	f240 8107 	bls.w	418c9e <__udivmoddi4+0x2a2>
  418a90:	3802      	subs	r0, #2
  418a92:	443c      	add	r4, r7
  418a94:	eba4 0409 	sub.w	r4, r4, r9
  418a98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  418a9c:	2100      	movs	r1, #0
  418a9e:	2e00      	cmp	r6, #0
  418aa0:	d061      	beq.n	418b66 <__udivmoddi4+0x16a>
  418aa2:	fa24 f40e 	lsr.w	r4, r4, lr
  418aa6:	2300      	movs	r3, #0
  418aa8:	6034      	str	r4, [r6, #0]
  418aaa:	6073      	str	r3, [r6, #4]
  418aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418ab0:	428b      	cmp	r3, r1
  418ab2:	d907      	bls.n	418ac4 <__udivmoddi4+0xc8>
  418ab4:	2e00      	cmp	r6, #0
  418ab6:	d054      	beq.n	418b62 <__udivmoddi4+0x166>
  418ab8:	2100      	movs	r1, #0
  418aba:	e886 0021 	stmia.w	r6, {r0, r5}
  418abe:	4608      	mov	r0, r1
  418ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418ac4:	fab3 f183 	clz	r1, r3
  418ac8:	2900      	cmp	r1, #0
  418aca:	f040 808e 	bne.w	418bea <__udivmoddi4+0x1ee>
  418ace:	42ab      	cmp	r3, r5
  418ad0:	d302      	bcc.n	418ad8 <__udivmoddi4+0xdc>
  418ad2:	4282      	cmp	r2, r0
  418ad4:	f200 80fa 	bhi.w	418ccc <__udivmoddi4+0x2d0>
  418ad8:	1a84      	subs	r4, r0, r2
  418ada:	eb65 0503 	sbc.w	r5, r5, r3
  418ade:	2001      	movs	r0, #1
  418ae0:	46ac      	mov	ip, r5
  418ae2:	2e00      	cmp	r6, #0
  418ae4:	d03f      	beq.n	418b66 <__udivmoddi4+0x16a>
  418ae6:	e886 1010 	stmia.w	r6, {r4, ip}
  418aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418aee:	b912      	cbnz	r2, 418af6 <__udivmoddi4+0xfa>
  418af0:	2701      	movs	r7, #1
  418af2:	fbb7 f7f2 	udiv	r7, r7, r2
  418af6:	fab7 fe87 	clz	lr, r7
  418afa:	f1be 0f00 	cmp.w	lr, #0
  418afe:	d134      	bne.n	418b6a <__udivmoddi4+0x16e>
  418b00:	1beb      	subs	r3, r5, r7
  418b02:	0c3a      	lsrs	r2, r7, #16
  418b04:	fa1f fc87 	uxth.w	ip, r7
  418b08:	2101      	movs	r1, #1
  418b0a:	fbb3 f8f2 	udiv	r8, r3, r2
  418b0e:	0c25      	lsrs	r5, r4, #16
  418b10:	fb02 3318 	mls	r3, r2, r8, r3
  418b14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  418b18:	fb0c f308 	mul.w	r3, ip, r8
  418b1c:	42ab      	cmp	r3, r5
  418b1e:	d907      	bls.n	418b30 <__udivmoddi4+0x134>
  418b20:	19ed      	adds	r5, r5, r7
  418b22:	f108 30ff 	add.w	r0, r8, #4294967295
  418b26:	d202      	bcs.n	418b2e <__udivmoddi4+0x132>
  418b28:	42ab      	cmp	r3, r5
  418b2a:	f200 80d1 	bhi.w	418cd0 <__udivmoddi4+0x2d4>
  418b2e:	4680      	mov	r8, r0
  418b30:	1aed      	subs	r5, r5, r3
  418b32:	b2a3      	uxth	r3, r4
  418b34:	fbb5 f0f2 	udiv	r0, r5, r2
  418b38:	fb02 5510 	mls	r5, r2, r0, r5
  418b3c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  418b40:	fb0c fc00 	mul.w	ip, ip, r0
  418b44:	45a4      	cmp	ip, r4
  418b46:	d907      	bls.n	418b58 <__udivmoddi4+0x15c>
  418b48:	19e4      	adds	r4, r4, r7
  418b4a:	f100 33ff 	add.w	r3, r0, #4294967295
  418b4e:	d202      	bcs.n	418b56 <__udivmoddi4+0x15a>
  418b50:	45a4      	cmp	ip, r4
  418b52:	f200 80b8 	bhi.w	418cc6 <__udivmoddi4+0x2ca>
  418b56:	4618      	mov	r0, r3
  418b58:	eba4 040c 	sub.w	r4, r4, ip
  418b5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  418b60:	e79d      	b.n	418a9e <__udivmoddi4+0xa2>
  418b62:	4631      	mov	r1, r6
  418b64:	4630      	mov	r0, r6
  418b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418b6a:	f1ce 0420 	rsb	r4, lr, #32
  418b6e:	fa05 f30e 	lsl.w	r3, r5, lr
  418b72:	fa07 f70e 	lsl.w	r7, r7, lr
  418b76:	fa20 f804 	lsr.w	r8, r0, r4
  418b7a:	0c3a      	lsrs	r2, r7, #16
  418b7c:	fa25 f404 	lsr.w	r4, r5, r4
  418b80:	ea48 0803 	orr.w	r8, r8, r3
  418b84:	fbb4 f1f2 	udiv	r1, r4, r2
  418b88:	ea4f 4518 	mov.w	r5, r8, lsr #16
  418b8c:	fb02 4411 	mls	r4, r2, r1, r4
  418b90:	fa1f fc87 	uxth.w	ip, r7
  418b94:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  418b98:	fb01 f30c 	mul.w	r3, r1, ip
  418b9c:	42ab      	cmp	r3, r5
  418b9e:	fa00 f40e 	lsl.w	r4, r0, lr
  418ba2:	d909      	bls.n	418bb8 <__udivmoddi4+0x1bc>
  418ba4:	19ed      	adds	r5, r5, r7
  418ba6:	f101 30ff 	add.w	r0, r1, #4294967295
  418baa:	f080 808a 	bcs.w	418cc2 <__udivmoddi4+0x2c6>
  418bae:	42ab      	cmp	r3, r5
  418bb0:	f240 8087 	bls.w	418cc2 <__udivmoddi4+0x2c6>
  418bb4:	3902      	subs	r1, #2
  418bb6:	443d      	add	r5, r7
  418bb8:	1aeb      	subs	r3, r5, r3
  418bba:	fa1f f588 	uxth.w	r5, r8
  418bbe:	fbb3 f0f2 	udiv	r0, r3, r2
  418bc2:	fb02 3310 	mls	r3, r2, r0, r3
  418bc6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  418bca:	fb00 f30c 	mul.w	r3, r0, ip
  418bce:	42ab      	cmp	r3, r5
  418bd0:	d907      	bls.n	418be2 <__udivmoddi4+0x1e6>
  418bd2:	19ed      	adds	r5, r5, r7
  418bd4:	f100 38ff 	add.w	r8, r0, #4294967295
  418bd8:	d26f      	bcs.n	418cba <__udivmoddi4+0x2be>
  418bda:	42ab      	cmp	r3, r5
  418bdc:	d96d      	bls.n	418cba <__udivmoddi4+0x2be>
  418bde:	3802      	subs	r0, #2
  418be0:	443d      	add	r5, r7
  418be2:	1aeb      	subs	r3, r5, r3
  418be4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  418be8:	e78f      	b.n	418b0a <__udivmoddi4+0x10e>
  418bea:	f1c1 0720 	rsb	r7, r1, #32
  418bee:	fa22 f807 	lsr.w	r8, r2, r7
  418bf2:	408b      	lsls	r3, r1
  418bf4:	fa05 f401 	lsl.w	r4, r5, r1
  418bf8:	ea48 0303 	orr.w	r3, r8, r3
  418bfc:	fa20 fe07 	lsr.w	lr, r0, r7
  418c00:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  418c04:	40fd      	lsrs	r5, r7
  418c06:	ea4e 0e04 	orr.w	lr, lr, r4
  418c0a:	fbb5 f9fc 	udiv	r9, r5, ip
  418c0e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  418c12:	fb0c 5519 	mls	r5, ip, r9, r5
  418c16:	fa1f f883 	uxth.w	r8, r3
  418c1a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  418c1e:	fb09 f408 	mul.w	r4, r9, r8
  418c22:	42ac      	cmp	r4, r5
  418c24:	fa02 f201 	lsl.w	r2, r2, r1
  418c28:	fa00 fa01 	lsl.w	sl, r0, r1
  418c2c:	d908      	bls.n	418c40 <__udivmoddi4+0x244>
  418c2e:	18ed      	adds	r5, r5, r3
  418c30:	f109 30ff 	add.w	r0, r9, #4294967295
  418c34:	d243      	bcs.n	418cbe <__udivmoddi4+0x2c2>
  418c36:	42ac      	cmp	r4, r5
  418c38:	d941      	bls.n	418cbe <__udivmoddi4+0x2c2>
  418c3a:	f1a9 0902 	sub.w	r9, r9, #2
  418c3e:	441d      	add	r5, r3
  418c40:	1b2d      	subs	r5, r5, r4
  418c42:	fa1f fe8e 	uxth.w	lr, lr
  418c46:	fbb5 f0fc 	udiv	r0, r5, ip
  418c4a:	fb0c 5510 	mls	r5, ip, r0, r5
  418c4e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  418c52:	fb00 f808 	mul.w	r8, r0, r8
  418c56:	45a0      	cmp	r8, r4
  418c58:	d907      	bls.n	418c6a <__udivmoddi4+0x26e>
  418c5a:	18e4      	adds	r4, r4, r3
  418c5c:	f100 35ff 	add.w	r5, r0, #4294967295
  418c60:	d229      	bcs.n	418cb6 <__udivmoddi4+0x2ba>
  418c62:	45a0      	cmp	r8, r4
  418c64:	d927      	bls.n	418cb6 <__udivmoddi4+0x2ba>
  418c66:	3802      	subs	r0, #2
  418c68:	441c      	add	r4, r3
  418c6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  418c6e:	eba4 0408 	sub.w	r4, r4, r8
  418c72:	fba0 8902 	umull	r8, r9, r0, r2
  418c76:	454c      	cmp	r4, r9
  418c78:	46c6      	mov	lr, r8
  418c7a:	464d      	mov	r5, r9
  418c7c:	d315      	bcc.n	418caa <__udivmoddi4+0x2ae>
  418c7e:	d012      	beq.n	418ca6 <__udivmoddi4+0x2aa>
  418c80:	b156      	cbz	r6, 418c98 <__udivmoddi4+0x29c>
  418c82:	ebba 030e 	subs.w	r3, sl, lr
  418c86:	eb64 0405 	sbc.w	r4, r4, r5
  418c8a:	fa04 f707 	lsl.w	r7, r4, r7
  418c8e:	40cb      	lsrs	r3, r1
  418c90:	431f      	orrs	r7, r3
  418c92:	40cc      	lsrs	r4, r1
  418c94:	6037      	str	r7, [r6, #0]
  418c96:	6074      	str	r4, [r6, #4]
  418c98:	2100      	movs	r1, #0
  418c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418c9e:	4618      	mov	r0, r3
  418ca0:	e6f8      	b.n	418a94 <__udivmoddi4+0x98>
  418ca2:	4690      	mov	r8, r2
  418ca4:	e6e0      	b.n	418a68 <__udivmoddi4+0x6c>
  418ca6:	45c2      	cmp	sl, r8
  418ca8:	d2ea      	bcs.n	418c80 <__udivmoddi4+0x284>
  418caa:	ebb8 0e02 	subs.w	lr, r8, r2
  418cae:	eb69 0503 	sbc.w	r5, r9, r3
  418cb2:	3801      	subs	r0, #1
  418cb4:	e7e4      	b.n	418c80 <__udivmoddi4+0x284>
  418cb6:	4628      	mov	r0, r5
  418cb8:	e7d7      	b.n	418c6a <__udivmoddi4+0x26e>
  418cba:	4640      	mov	r0, r8
  418cbc:	e791      	b.n	418be2 <__udivmoddi4+0x1e6>
  418cbe:	4681      	mov	r9, r0
  418cc0:	e7be      	b.n	418c40 <__udivmoddi4+0x244>
  418cc2:	4601      	mov	r1, r0
  418cc4:	e778      	b.n	418bb8 <__udivmoddi4+0x1bc>
  418cc6:	3802      	subs	r0, #2
  418cc8:	443c      	add	r4, r7
  418cca:	e745      	b.n	418b58 <__udivmoddi4+0x15c>
  418ccc:	4608      	mov	r0, r1
  418cce:	e708      	b.n	418ae2 <__udivmoddi4+0xe6>
  418cd0:	f1a8 0802 	sub.w	r8, r8, #2
  418cd4:	443d      	add	r5, r7
  418cd6:	e72b      	b.n	418b30 <__udivmoddi4+0x134>

00418cd8 <__aeabi_idiv0>:
  418cd8:	4770      	bx	lr
  418cda:	bf00      	nop

00418cdc <atoi>:
  418cdc:	220a      	movs	r2, #10
  418cde:	2100      	movs	r1, #0
  418ce0:	f001 b810 	b.w	419d04 <strtol>

00418ce4 <__libc_init_array>:
  418ce4:	b570      	push	{r4, r5, r6, lr}
  418ce6:	4e0f      	ldr	r6, [pc, #60]	; (418d24 <__libc_init_array+0x40>)
  418ce8:	4d0f      	ldr	r5, [pc, #60]	; (418d28 <__libc_init_array+0x44>)
  418cea:	1b76      	subs	r6, r6, r5
  418cec:	10b6      	asrs	r6, r6, #2
  418cee:	bf18      	it	ne
  418cf0:	2400      	movne	r4, #0
  418cf2:	d005      	beq.n	418d00 <__libc_init_array+0x1c>
  418cf4:	3401      	adds	r4, #1
  418cf6:	f855 3b04 	ldr.w	r3, [r5], #4
  418cfa:	4798      	blx	r3
  418cfc:	42a6      	cmp	r6, r4
  418cfe:	d1f9      	bne.n	418cf4 <__libc_init_array+0x10>
  418d00:	4e0a      	ldr	r6, [pc, #40]	; (418d2c <__libc_init_array+0x48>)
  418d02:	4d0b      	ldr	r5, [pc, #44]	; (418d30 <__libc_init_array+0x4c>)
  418d04:	1b76      	subs	r6, r6, r5
  418d06:	f00a f97b 	bl	423000 <_init>
  418d0a:	10b6      	asrs	r6, r6, #2
  418d0c:	bf18      	it	ne
  418d0e:	2400      	movne	r4, #0
  418d10:	d006      	beq.n	418d20 <__libc_init_array+0x3c>
  418d12:	3401      	adds	r4, #1
  418d14:	f855 3b04 	ldr.w	r3, [r5], #4
  418d18:	4798      	blx	r3
  418d1a:	42a6      	cmp	r6, r4
  418d1c:	d1f9      	bne.n	418d12 <__libc_init_array+0x2e>
  418d1e:	bd70      	pop	{r4, r5, r6, pc}
  418d20:	bd70      	pop	{r4, r5, r6, pc}
  418d22:	bf00      	nop
  418d24:	0042300c 	.word	0x0042300c
  418d28:	0042300c 	.word	0x0042300c
  418d2c:	00423014 	.word	0x00423014
  418d30:	0042300c 	.word	0x0042300c

00418d34 <iprintf>:
  418d34:	b40f      	push	{r0, r1, r2, r3}
  418d36:	b500      	push	{lr}
  418d38:	4907      	ldr	r1, [pc, #28]	; (418d58 <iprintf+0x24>)
  418d3a:	b083      	sub	sp, #12
  418d3c:	ab04      	add	r3, sp, #16
  418d3e:	6808      	ldr	r0, [r1, #0]
  418d40:	f853 2b04 	ldr.w	r2, [r3], #4
  418d44:	6881      	ldr	r1, [r0, #8]
  418d46:	9301      	str	r3, [sp, #4]
  418d48:	f001 f832 	bl	419db0 <_vfiprintf_r>
  418d4c:	b003      	add	sp, #12
  418d4e:	f85d eb04 	ldr.w	lr, [sp], #4
  418d52:	b004      	add	sp, #16
  418d54:	4770      	bx	lr
  418d56:	bf00      	nop
  418d58:	20400038 	.word	0x20400038

00418d5c <malloc>:
  418d5c:	4b02      	ldr	r3, [pc, #8]	; (418d68 <malloc+0xc>)
  418d5e:	4601      	mov	r1, r0
  418d60:	6818      	ldr	r0, [r3, #0]
  418d62:	f000 b803 	b.w	418d6c <_malloc_r>
  418d66:	bf00      	nop
  418d68:	20400038 	.word	0x20400038

00418d6c <_malloc_r>:
  418d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  418d70:	f101 060b 	add.w	r6, r1, #11
  418d74:	2e16      	cmp	r6, #22
  418d76:	b083      	sub	sp, #12
  418d78:	4605      	mov	r5, r0
  418d7a:	f240 809e 	bls.w	418eba <_malloc_r+0x14e>
  418d7e:	f036 0607 	bics.w	r6, r6, #7
  418d82:	f100 80bd 	bmi.w	418f00 <_malloc_r+0x194>
  418d86:	42b1      	cmp	r1, r6
  418d88:	f200 80ba 	bhi.w	418f00 <_malloc_r+0x194>
  418d8c:	f000 fbea 	bl	419564 <__malloc_lock>
  418d90:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  418d94:	f0c0 8293 	bcc.w	4192be <_malloc_r+0x552>
  418d98:	0a73      	lsrs	r3, r6, #9
  418d9a:	f000 80b8 	beq.w	418f0e <_malloc_r+0x1a2>
  418d9e:	2b04      	cmp	r3, #4
  418da0:	f200 8179 	bhi.w	419096 <_malloc_r+0x32a>
  418da4:	09b3      	lsrs	r3, r6, #6
  418da6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  418daa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  418dae:	00c3      	lsls	r3, r0, #3
  418db0:	4fbf      	ldr	r7, [pc, #764]	; (4190b0 <_malloc_r+0x344>)
  418db2:	443b      	add	r3, r7
  418db4:	f1a3 0108 	sub.w	r1, r3, #8
  418db8:	685c      	ldr	r4, [r3, #4]
  418dba:	42a1      	cmp	r1, r4
  418dbc:	d106      	bne.n	418dcc <_malloc_r+0x60>
  418dbe:	e00c      	b.n	418dda <_malloc_r+0x6e>
  418dc0:	2a00      	cmp	r2, #0
  418dc2:	f280 80aa 	bge.w	418f1a <_malloc_r+0x1ae>
  418dc6:	68e4      	ldr	r4, [r4, #12]
  418dc8:	42a1      	cmp	r1, r4
  418dca:	d006      	beq.n	418dda <_malloc_r+0x6e>
  418dcc:	6863      	ldr	r3, [r4, #4]
  418dce:	f023 0303 	bic.w	r3, r3, #3
  418dd2:	1b9a      	subs	r2, r3, r6
  418dd4:	2a0f      	cmp	r2, #15
  418dd6:	ddf3      	ble.n	418dc0 <_malloc_r+0x54>
  418dd8:	4670      	mov	r0, lr
  418dda:	693c      	ldr	r4, [r7, #16]
  418ddc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4190c4 <_malloc_r+0x358>
  418de0:	4574      	cmp	r4, lr
  418de2:	f000 81ab 	beq.w	41913c <_malloc_r+0x3d0>
  418de6:	6863      	ldr	r3, [r4, #4]
  418de8:	f023 0303 	bic.w	r3, r3, #3
  418dec:	1b9a      	subs	r2, r3, r6
  418dee:	2a0f      	cmp	r2, #15
  418df0:	f300 8190 	bgt.w	419114 <_malloc_r+0x3a8>
  418df4:	2a00      	cmp	r2, #0
  418df6:	f8c7 e014 	str.w	lr, [r7, #20]
  418dfa:	f8c7 e010 	str.w	lr, [r7, #16]
  418dfe:	f280 809d 	bge.w	418f3c <_malloc_r+0x1d0>
  418e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  418e06:	f080 8161 	bcs.w	4190cc <_malloc_r+0x360>
  418e0a:	08db      	lsrs	r3, r3, #3
  418e0c:	f103 0c01 	add.w	ip, r3, #1
  418e10:	1099      	asrs	r1, r3, #2
  418e12:	687a      	ldr	r2, [r7, #4]
  418e14:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  418e18:	f8c4 8008 	str.w	r8, [r4, #8]
  418e1c:	2301      	movs	r3, #1
  418e1e:	408b      	lsls	r3, r1
  418e20:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  418e24:	4313      	orrs	r3, r2
  418e26:	3908      	subs	r1, #8
  418e28:	60e1      	str	r1, [r4, #12]
  418e2a:	607b      	str	r3, [r7, #4]
  418e2c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  418e30:	f8c8 400c 	str.w	r4, [r8, #12]
  418e34:	1082      	asrs	r2, r0, #2
  418e36:	2401      	movs	r4, #1
  418e38:	4094      	lsls	r4, r2
  418e3a:	429c      	cmp	r4, r3
  418e3c:	f200 808b 	bhi.w	418f56 <_malloc_r+0x1ea>
  418e40:	421c      	tst	r4, r3
  418e42:	d106      	bne.n	418e52 <_malloc_r+0xe6>
  418e44:	f020 0003 	bic.w	r0, r0, #3
  418e48:	0064      	lsls	r4, r4, #1
  418e4a:	421c      	tst	r4, r3
  418e4c:	f100 0004 	add.w	r0, r0, #4
  418e50:	d0fa      	beq.n	418e48 <_malloc_r+0xdc>
  418e52:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  418e56:	46cc      	mov	ip, r9
  418e58:	4680      	mov	r8, r0
  418e5a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  418e5e:	459c      	cmp	ip, r3
  418e60:	d107      	bne.n	418e72 <_malloc_r+0x106>
  418e62:	e16d      	b.n	419140 <_malloc_r+0x3d4>
  418e64:	2a00      	cmp	r2, #0
  418e66:	f280 817b 	bge.w	419160 <_malloc_r+0x3f4>
  418e6a:	68db      	ldr	r3, [r3, #12]
  418e6c:	459c      	cmp	ip, r3
  418e6e:	f000 8167 	beq.w	419140 <_malloc_r+0x3d4>
  418e72:	6859      	ldr	r1, [r3, #4]
  418e74:	f021 0103 	bic.w	r1, r1, #3
  418e78:	1b8a      	subs	r2, r1, r6
  418e7a:	2a0f      	cmp	r2, #15
  418e7c:	ddf2      	ble.n	418e64 <_malloc_r+0xf8>
  418e7e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  418e82:	f8d3 8008 	ldr.w	r8, [r3, #8]
  418e86:	9300      	str	r3, [sp, #0]
  418e88:	199c      	adds	r4, r3, r6
  418e8a:	4628      	mov	r0, r5
  418e8c:	f046 0601 	orr.w	r6, r6, #1
  418e90:	f042 0501 	orr.w	r5, r2, #1
  418e94:	605e      	str	r6, [r3, #4]
  418e96:	f8c8 c00c 	str.w	ip, [r8, #12]
  418e9a:	f8cc 8008 	str.w	r8, [ip, #8]
  418e9e:	617c      	str	r4, [r7, #20]
  418ea0:	613c      	str	r4, [r7, #16]
  418ea2:	f8c4 e00c 	str.w	lr, [r4, #12]
  418ea6:	f8c4 e008 	str.w	lr, [r4, #8]
  418eaa:	6065      	str	r5, [r4, #4]
  418eac:	505a      	str	r2, [r3, r1]
  418eae:	f000 fb5f 	bl	419570 <__malloc_unlock>
  418eb2:	9b00      	ldr	r3, [sp, #0]
  418eb4:	f103 0408 	add.w	r4, r3, #8
  418eb8:	e01e      	b.n	418ef8 <_malloc_r+0x18c>
  418eba:	2910      	cmp	r1, #16
  418ebc:	d820      	bhi.n	418f00 <_malloc_r+0x194>
  418ebe:	f000 fb51 	bl	419564 <__malloc_lock>
  418ec2:	2610      	movs	r6, #16
  418ec4:	2318      	movs	r3, #24
  418ec6:	2002      	movs	r0, #2
  418ec8:	4f79      	ldr	r7, [pc, #484]	; (4190b0 <_malloc_r+0x344>)
  418eca:	443b      	add	r3, r7
  418ecc:	f1a3 0208 	sub.w	r2, r3, #8
  418ed0:	685c      	ldr	r4, [r3, #4]
  418ed2:	4294      	cmp	r4, r2
  418ed4:	f000 813d 	beq.w	419152 <_malloc_r+0x3e6>
  418ed8:	6863      	ldr	r3, [r4, #4]
  418eda:	68e1      	ldr	r1, [r4, #12]
  418edc:	68a6      	ldr	r6, [r4, #8]
  418ede:	f023 0303 	bic.w	r3, r3, #3
  418ee2:	4423      	add	r3, r4
  418ee4:	4628      	mov	r0, r5
  418ee6:	685a      	ldr	r2, [r3, #4]
  418ee8:	60f1      	str	r1, [r6, #12]
  418eea:	f042 0201 	orr.w	r2, r2, #1
  418eee:	608e      	str	r6, [r1, #8]
  418ef0:	605a      	str	r2, [r3, #4]
  418ef2:	f000 fb3d 	bl	419570 <__malloc_unlock>
  418ef6:	3408      	adds	r4, #8
  418ef8:	4620      	mov	r0, r4
  418efa:	b003      	add	sp, #12
  418efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418f00:	2400      	movs	r4, #0
  418f02:	230c      	movs	r3, #12
  418f04:	4620      	mov	r0, r4
  418f06:	602b      	str	r3, [r5, #0]
  418f08:	b003      	add	sp, #12
  418f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418f0e:	2040      	movs	r0, #64	; 0x40
  418f10:	f44f 7300 	mov.w	r3, #512	; 0x200
  418f14:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  418f18:	e74a      	b.n	418db0 <_malloc_r+0x44>
  418f1a:	4423      	add	r3, r4
  418f1c:	68e1      	ldr	r1, [r4, #12]
  418f1e:	685a      	ldr	r2, [r3, #4]
  418f20:	68a6      	ldr	r6, [r4, #8]
  418f22:	f042 0201 	orr.w	r2, r2, #1
  418f26:	60f1      	str	r1, [r6, #12]
  418f28:	4628      	mov	r0, r5
  418f2a:	608e      	str	r6, [r1, #8]
  418f2c:	605a      	str	r2, [r3, #4]
  418f2e:	f000 fb1f 	bl	419570 <__malloc_unlock>
  418f32:	3408      	adds	r4, #8
  418f34:	4620      	mov	r0, r4
  418f36:	b003      	add	sp, #12
  418f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418f3c:	4423      	add	r3, r4
  418f3e:	4628      	mov	r0, r5
  418f40:	685a      	ldr	r2, [r3, #4]
  418f42:	f042 0201 	orr.w	r2, r2, #1
  418f46:	605a      	str	r2, [r3, #4]
  418f48:	f000 fb12 	bl	419570 <__malloc_unlock>
  418f4c:	3408      	adds	r4, #8
  418f4e:	4620      	mov	r0, r4
  418f50:	b003      	add	sp, #12
  418f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418f56:	68bc      	ldr	r4, [r7, #8]
  418f58:	6863      	ldr	r3, [r4, #4]
  418f5a:	f023 0803 	bic.w	r8, r3, #3
  418f5e:	45b0      	cmp	r8, r6
  418f60:	d304      	bcc.n	418f6c <_malloc_r+0x200>
  418f62:	eba8 0306 	sub.w	r3, r8, r6
  418f66:	2b0f      	cmp	r3, #15
  418f68:	f300 8085 	bgt.w	419076 <_malloc_r+0x30a>
  418f6c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4190c8 <_malloc_r+0x35c>
  418f70:	4b50      	ldr	r3, [pc, #320]	; (4190b4 <_malloc_r+0x348>)
  418f72:	f8d9 2000 	ldr.w	r2, [r9]
  418f76:	681b      	ldr	r3, [r3, #0]
  418f78:	3201      	adds	r2, #1
  418f7a:	4433      	add	r3, r6
  418f7c:	eb04 0a08 	add.w	sl, r4, r8
  418f80:	f000 8155 	beq.w	41922e <_malloc_r+0x4c2>
  418f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  418f88:	330f      	adds	r3, #15
  418f8a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  418f8e:	f02b 0b0f 	bic.w	fp, fp, #15
  418f92:	4659      	mov	r1, fp
  418f94:	4628      	mov	r0, r5
  418f96:	f000 faf1 	bl	41957c <_sbrk_r>
  418f9a:	1c41      	adds	r1, r0, #1
  418f9c:	4602      	mov	r2, r0
  418f9e:	f000 80fc 	beq.w	41919a <_malloc_r+0x42e>
  418fa2:	4582      	cmp	sl, r0
  418fa4:	f200 80f7 	bhi.w	419196 <_malloc_r+0x42a>
  418fa8:	4b43      	ldr	r3, [pc, #268]	; (4190b8 <_malloc_r+0x34c>)
  418faa:	6819      	ldr	r1, [r3, #0]
  418fac:	4459      	add	r1, fp
  418fae:	6019      	str	r1, [r3, #0]
  418fb0:	f000 814d 	beq.w	41924e <_malloc_r+0x4e2>
  418fb4:	f8d9 0000 	ldr.w	r0, [r9]
  418fb8:	3001      	adds	r0, #1
  418fba:	bf1b      	ittet	ne
  418fbc:	eba2 0a0a 	subne.w	sl, r2, sl
  418fc0:	4451      	addne	r1, sl
  418fc2:	f8c9 2000 	streq.w	r2, [r9]
  418fc6:	6019      	strne	r1, [r3, #0]
  418fc8:	f012 0107 	ands.w	r1, r2, #7
  418fcc:	f000 8115 	beq.w	4191fa <_malloc_r+0x48e>
  418fd0:	f1c1 0008 	rsb	r0, r1, #8
  418fd4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  418fd8:	4402      	add	r2, r0
  418fda:	3108      	adds	r1, #8
  418fdc:	eb02 090b 	add.w	r9, r2, fp
  418fe0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  418fe4:	eba1 0909 	sub.w	r9, r1, r9
  418fe8:	4649      	mov	r1, r9
  418fea:	4628      	mov	r0, r5
  418fec:	9301      	str	r3, [sp, #4]
  418fee:	9200      	str	r2, [sp, #0]
  418ff0:	f000 fac4 	bl	41957c <_sbrk_r>
  418ff4:	1c43      	adds	r3, r0, #1
  418ff6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  418ffa:	f000 8143 	beq.w	419284 <_malloc_r+0x518>
  418ffe:	1a80      	subs	r0, r0, r2
  419000:	4448      	add	r0, r9
  419002:	f040 0001 	orr.w	r0, r0, #1
  419006:	6819      	ldr	r1, [r3, #0]
  419008:	60ba      	str	r2, [r7, #8]
  41900a:	4449      	add	r1, r9
  41900c:	42bc      	cmp	r4, r7
  41900e:	6050      	str	r0, [r2, #4]
  419010:	6019      	str	r1, [r3, #0]
  419012:	d017      	beq.n	419044 <_malloc_r+0x2d8>
  419014:	f1b8 0f0f 	cmp.w	r8, #15
  419018:	f240 80fb 	bls.w	419212 <_malloc_r+0x4a6>
  41901c:	6860      	ldr	r0, [r4, #4]
  41901e:	f1a8 020c 	sub.w	r2, r8, #12
  419022:	f022 0207 	bic.w	r2, r2, #7
  419026:	eb04 0e02 	add.w	lr, r4, r2
  41902a:	f000 0001 	and.w	r0, r0, #1
  41902e:	f04f 0c05 	mov.w	ip, #5
  419032:	4310      	orrs	r0, r2
  419034:	2a0f      	cmp	r2, #15
  419036:	6060      	str	r0, [r4, #4]
  419038:	f8ce c004 	str.w	ip, [lr, #4]
  41903c:	f8ce c008 	str.w	ip, [lr, #8]
  419040:	f200 8117 	bhi.w	419272 <_malloc_r+0x506>
  419044:	4b1d      	ldr	r3, [pc, #116]	; (4190bc <_malloc_r+0x350>)
  419046:	68bc      	ldr	r4, [r7, #8]
  419048:	681a      	ldr	r2, [r3, #0]
  41904a:	4291      	cmp	r1, r2
  41904c:	bf88      	it	hi
  41904e:	6019      	strhi	r1, [r3, #0]
  419050:	4b1b      	ldr	r3, [pc, #108]	; (4190c0 <_malloc_r+0x354>)
  419052:	681a      	ldr	r2, [r3, #0]
  419054:	4291      	cmp	r1, r2
  419056:	6862      	ldr	r2, [r4, #4]
  419058:	bf88      	it	hi
  41905a:	6019      	strhi	r1, [r3, #0]
  41905c:	f022 0203 	bic.w	r2, r2, #3
  419060:	4296      	cmp	r6, r2
  419062:	eba2 0306 	sub.w	r3, r2, r6
  419066:	d801      	bhi.n	41906c <_malloc_r+0x300>
  419068:	2b0f      	cmp	r3, #15
  41906a:	dc04      	bgt.n	419076 <_malloc_r+0x30a>
  41906c:	4628      	mov	r0, r5
  41906e:	f000 fa7f 	bl	419570 <__malloc_unlock>
  419072:	2400      	movs	r4, #0
  419074:	e740      	b.n	418ef8 <_malloc_r+0x18c>
  419076:	19a2      	adds	r2, r4, r6
  419078:	f043 0301 	orr.w	r3, r3, #1
  41907c:	f046 0601 	orr.w	r6, r6, #1
  419080:	6066      	str	r6, [r4, #4]
  419082:	4628      	mov	r0, r5
  419084:	60ba      	str	r2, [r7, #8]
  419086:	6053      	str	r3, [r2, #4]
  419088:	f000 fa72 	bl	419570 <__malloc_unlock>
  41908c:	3408      	adds	r4, #8
  41908e:	4620      	mov	r0, r4
  419090:	b003      	add	sp, #12
  419092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419096:	2b14      	cmp	r3, #20
  419098:	d971      	bls.n	41917e <_malloc_r+0x412>
  41909a:	2b54      	cmp	r3, #84	; 0x54
  41909c:	f200 80a3 	bhi.w	4191e6 <_malloc_r+0x47a>
  4190a0:	0b33      	lsrs	r3, r6, #12
  4190a2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4190a6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4190aa:	00c3      	lsls	r3, r0, #3
  4190ac:	e680      	b.n	418db0 <_malloc_r+0x44>
  4190ae:	bf00      	nop
  4190b0:	20400468 	.word	0x20400468
  4190b4:	20439e30 	.word	0x20439e30
  4190b8:	20439e00 	.word	0x20439e00
  4190bc:	20439e28 	.word	0x20439e28
  4190c0:	20439e2c 	.word	0x20439e2c
  4190c4:	20400470 	.word	0x20400470
  4190c8:	20400870 	.word	0x20400870
  4190cc:	0a5a      	lsrs	r2, r3, #9
  4190ce:	2a04      	cmp	r2, #4
  4190d0:	d95b      	bls.n	41918a <_malloc_r+0x41e>
  4190d2:	2a14      	cmp	r2, #20
  4190d4:	f200 80ae 	bhi.w	419234 <_malloc_r+0x4c8>
  4190d8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4190dc:	00c9      	lsls	r1, r1, #3
  4190de:	325b      	adds	r2, #91	; 0x5b
  4190e0:	eb07 0c01 	add.w	ip, r7, r1
  4190e4:	5879      	ldr	r1, [r7, r1]
  4190e6:	f1ac 0c08 	sub.w	ip, ip, #8
  4190ea:	458c      	cmp	ip, r1
  4190ec:	f000 8088 	beq.w	419200 <_malloc_r+0x494>
  4190f0:	684a      	ldr	r2, [r1, #4]
  4190f2:	f022 0203 	bic.w	r2, r2, #3
  4190f6:	4293      	cmp	r3, r2
  4190f8:	d273      	bcs.n	4191e2 <_malloc_r+0x476>
  4190fa:	6889      	ldr	r1, [r1, #8]
  4190fc:	458c      	cmp	ip, r1
  4190fe:	d1f7      	bne.n	4190f0 <_malloc_r+0x384>
  419100:	f8dc 200c 	ldr.w	r2, [ip, #12]
  419104:	687b      	ldr	r3, [r7, #4]
  419106:	60e2      	str	r2, [r4, #12]
  419108:	f8c4 c008 	str.w	ip, [r4, #8]
  41910c:	6094      	str	r4, [r2, #8]
  41910e:	f8cc 400c 	str.w	r4, [ip, #12]
  419112:	e68f      	b.n	418e34 <_malloc_r+0xc8>
  419114:	19a1      	adds	r1, r4, r6
  419116:	f046 0c01 	orr.w	ip, r6, #1
  41911a:	f042 0601 	orr.w	r6, r2, #1
  41911e:	f8c4 c004 	str.w	ip, [r4, #4]
  419122:	4628      	mov	r0, r5
  419124:	6179      	str	r1, [r7, #20]
  419126:	6139      	str	r1, [r7, #16]
  419128:	f8c1 e00c 	str.w	lr, [r1, #12]
  41912c:	f8c1 e008 	str.w	lr, [r1, #8]
  419130:	604e      	str	r6, [r1, #4]
  419132:	50e2      	str	r2, [r4, r3]
  419134:	f000 fa1c 	bl	419570 <__malloc_unlock>
  419138:	3408      	adds	r4, #8
  41913a:	e6dd      	b.n	418ef8 <_malloc_r+0x18c>
  41913c:	687b      	ldr	r3, [r7, #4]
  41913e:	e679      	b.n	418e34 <_malloc_r+0xc8>
  419140:	f108 0801 	add.w	r8, r8, #1
  419144:	f018 0f03 	tst.w	r8, #3
  419148:	f10c 0c08 	add.w	ip, ip, #8
  41914c:	f47f ae85 	bne.w	418e5a <_malloc_r+0xee>
  419150:	e02d      	b.n	4191ae <_malloc_r+0x442>
  419152:	68dc      	ldr	r4, [r3, #12]
  419154:	42a3      	cmp	r3, r4
  419156:	bf08      	it	eq
  419158:	3002      	addeq	r0, #2
  41915a:	f43f ae3e 	beq.w	418dda <_malloc_r+0x6e>
  41915e:	e6bb      	b.n	418ed8 <_malloc_r+0x16c>
  419160:	4419      	add	r1, r3
  419162:	461c      	mov	r4, r3
  419164:	684a      	ldr	r2, [r1, #4]
  419166:	68db      	ldr	r3, [r3, #12]
  419168:	f854 6f08 	ldr.w	r6, [r4, #8]!
  41916c:	f042 0201 	orr.w	r2, r2, #1
  419170:	604a      	str	r2, [r1, #4]
  419172:	4628      	mov	r0, r5
  419174:	60f3      	str	r3, [r6, #12]
  419176:	609e      	str	r6, [r3, #8]
  419178:	f000 f9fa 	bl	419570 <__malloc_unlock>
  41917c:	e6bc      	b.n	418ef8 <_malloc_r+0x18c>
  41917e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  419182:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  419186:	00c3      	lsls	r3, r0, #3
  419188:	e612      	b.n	418db0 <_malloc_r+0x44>
  41918a:	099a      	lsrs	r2, r3, #6
  41918c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  419190:	00c9      	lsls	r1, r1, #3
  419192:	3238      	adds	r2, #56	; 0x38
  419194:	e7a4      	b.n	4190e0 <_malloc_r+0x374>
  419196:	42bc      	cmp	r4, r7
  419198:	d054      	beq.n	419244 <_malloc_r+0x4d8>
  41919a:	68bc      	ldr	r4, [r7, #8]
  41919c:	6862      	ldr	r2, [r4, #4]
  41919e:	f022 0203 	bic.w	r2, r2, #3
  4191a2:	e75d      	b.n	419060 <_malloc_r+0x2f4>
  4191a4:	f859 3908 	ldr.w	r3, [r9], #-8
  4191a8:	4599      	cmp	r9, r3
  4191aa:	f040 8086 	bne.w	4192ba <_malloc_r+0x54e>
  4191ae:	f010 0f03 	tst.w	r0, #3
  4191b2:	f100 30ff 	add.w	r0, r0, #4294967295
  4191b6:	d1f5      	bne.n	4191a4 <_malloc_r+0x438>
  4191b8:	687b      	ldr	r3, [r7, #4]
  4191ba:	ea23 0304 	bic.w	r3, r3, r4
  4191be:	607b      	str	r3, [r7, #4]
  4191c0:	0064      	lsls	r4, r4, #1
  4191c2:	429c      	cmp	r4, r3
  4191c4:	f63f aec7 	bhi.w	418f56 <_malloc_r+0x1ea>
  4191c8:	2c00      	cmp	r4, #0
  4191ca:	f43f aec4 	beq.w	418f56 <_malloc_r+0x1ea>
  4191ce:	421c      	tst	r4, r3
  4191d0:	4640      	mov	r0, r8
  4191d2:	f47f ae3e 	bne.w	418e52 <_malloc_r+0xe6>
  4191d6:	0064      	lsls	r4, r4, #1
  4191d8:	421c      	tst	r4, r3
  4191da:	f100 0004 	add.w	r0, r0, #4
  4191de:	d0fa      	beq.n	4191d6 <_malloc_r+0x46a>
  4191e0:	e637      	b.n	418e52 <_malloc_r+0xe6>
  4191e2:	468c      	mov	ip, r1
  4191e4:	e78c      	b.n	419100 <_malloc_r+0x394>
  4191e6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4191ea:	d815      	bhi.n	419218 <_malloc_r+0x4ac>
  4191ec:	0bf3      	lsrs	r3, r6, #15
  4191ee:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4191f2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4191f6:	00c3      	lsls	r3, r0, #3
  4191f8:	e5da      	b.n	418db0 <_malloc_r+0x44>
  4191fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4191fe:	e6ed      	b.n	418fdc <_malloc_r+0x270>
  419200:	687b      	ldr	r3, [r7, #4]
  419202:	1092      	asrs	r2, r2, #2
  419204:	2101      	movs	r1, #1
  419206:	fa01 f202 	lsl.w	r2, r1, r2
  41920a:	4313      	orrs	r3, r2
  41920c:	607b      	str	r3, [r7, #4]
  41920e:	4662      	mov	r2, ip
  419210:	e779      	b.n	419106 <_malloc_r+0x39a>
  419212:	2301      	movs	r3, #1
  419214:	6053      	str	r3, [r2, #4]
  419216:	e729      	b.n	41906c <_malloc_r+0x300>
  419218:	f240 5254 	movw	r2, #1364	; 0x554
  41921c:	4293      	cmp	r3, r2
  41921e:	d822      	bhi.n	419266 <_malloc_r+0x4fa>
  419220:	0cb3      	lsrs	r3, r6, #18
  419222:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  419226:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  41922a:	00c3      	lsls	r3, r0, #3
  41922c:	e5c0      	b.n	418db0 <_malloc_r+0x44>
  41922e:	f103 0b10 	add.w	fp, r3, #16
  419232:	e6ae      	b.n	418f92 <_malloc_r+0x226>
  419234:	2a54      	cmp	r2, #84	; 0x54
  419236:	d829      	bhi.n	41928c <_malloc_r+0x520>
  419238:	0b1a      	lsrs	r2, r3, #12
  41923a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  41923e:	00c9      	lsls	r1, r1, #3
  419240:	326e      	adds	r2, #110	; 0x6e
  419242:	e74d      	b.n	4190e0 <_malloc_r+0x374>
  419244:	4b20      	ldr	r3, [pc, #128]	; (4192c8 <_malloc_r+0x55c>)
  419246:	6819      	ldr	r1, [r3, #0]
  419248:	4459      	add	r1, fp
  41924a:	6019      	str	r1, [r3, #0]
  41924c:	e6b2      	b.n	418fb4 <_malloc_r+0x248>
  41924e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  419252:	2800      	cmp	r0, #0
  419254:	f47f aeae 	bne.w	418fb4 <_malloc_r+0x248>
  419258:	eb08 030b 	add.w	r3, r8, fp
  41925c:	68ba      	ldr	r2, [r7, #8]
  41925e:	f043 0301 	orr.w	r3, r3, #1
  419262:	6053      	str	r3, [r2, #4]
  419264:	e6ee      	b.n	419044 <_malloc_r+0x2d8>
  419266:	207f      	movs	r0, #127	; 0x7f
  419268:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  41926c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  419270:	e59e      	b.n	418db0 <_malloc_r+0x44>
  419272:	f104 0108 	add.w	r1, r4, #8
  419276:	4628      	mov	r0, r5
  419278:	9300      	str	r3, [sp, #0]
  41927a:	f001 feb5 	bl	41afe8 <_free_r>
  41927e:	9b00      	ldr	r3, [sp, #0]
  419280:	6819      	ldr	r1, [r3, #0]
  419282:	e6df      	b.n	419044 <_malloc_r+0x2d8>
  419284:	2001      	movs	r0, #1
  419286:	f04f 0900 	mov.w	r9, #0
  41928a:	e6bc      	b.n	419006 <_malloc_r+0x29a>
  41928c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  419290:	d805      	bhi.n	41929e <_malloc_r+0x532>
  419292:	0bda      	lsrs	r2, r3, #15
  419294:	f102 0178 	add.w	r1, r2, #120	; 0x78
  419298:	00c9      	lsls	r1, r1, #3
  41929a:	3277      	adds	r2, #119	; 0x77
  41929c:	e720      	b.n	4190e0 <_malloc_r+0x374>
  41929e:	f240 5154 	movw	r1, #1364	; 0x554
  4192a2:	428a      	cmp	r2, r1
  4192a4:	d805      	bhi.n	4192b2 <_malloc_r+0x546>
  4192a6:	0c9a      	lsrs	r2, r3, #18
  4192a8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4192ac:	00c9      	lsls	r1, r1, #3
  4192ae:	327c      	adds	r2, #124	; 0x7c
  4192b0:	e716      	b.n	4190e0 <_malloc_r+0x374>
  4192b2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4192b6:	227e      	movs	r2, #126	; 0x7e
  4192b8:	e712      	b.n	4190e0 <_malloc_r+0x374>
  4192ba:	687b      	ldr	r3, [r7, #4]
  4192bc:	e780      	b.n	4191c0 <_malloc_r+0x454>
  4192be:	08f0      	lsrs	r0, r6, #3
  4192c0:	f106 0308 	add.w	r3, r6, #8
  4192c4:	e600      	b.n	418ec8 <_malloc_r+0x15c>
  4192c6:	bf00      	nop
  4192c8:	20439e00 	.word	0x20439e00

004192cc <memcpy>:
  4192cc:	4684      	mov	ip, r0
  4192ce:	ea41 0300 	orr.w	r3, r1, r0
  4192d2:	f013 0303 	ands.w	r3, r3, #3
  4192d6:	d16d      	bne.n	4193b4 <memcpy+0xe8>
  4192d8:	3a40      	subs	r2, #64	; 0x40
  4192da:	d341      	bcc.n	419360 <memcpy+0x94>
  4192dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4192e0:	f840 3b04 	str.w	r3, [r0], #4
  4192e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4192e8:	f840 3b04 	str.w	r3, [r0], #4
  4192ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4192f0:	f840 3b04 	str.w	r3, [r0], #4
  4192f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4192f8:	f840 3b04 	str.w	r3, [r0], #4
  4192fc:	f851 3b04 	ldr.w	r3, [r1], #4
  419300:	f840 3b04 	str.w	r3, [r0], #4
  419304:	f851 3b04 	ldr.w	r3, [r1], #4
  419308:	f840 3b04 	str.w	r3, [r0], #4
  41930c:	f851 3b04 	ldr.w	r3, [r1], #4
  419310:	f840 3b04 	str.w	r3, [r0], #4
  419314:	f851 3b04 	ldr.w	r3, [r1], #4
  419318:	f840 3b04 	str.w	r3, [r0], #4
  41931c:	f851 3b04 	ldr.w	r3, [r1], #4
  419320:	f840 3b04 	str.w	r3, [r0], #4
  419324:	f851 3b04 	ldr.w	r3, [r1], #4
  419328:	f840 3b04 	str.w	r3, [r0], #4
  41932c:	f851 3b04 	ldr.w	r3, [r1], #4
  419330:	f840 3b04 	str.w	r3, [r0], #4
  419334:	f851 3b04 	ldr.w	r3, [r1], #4
  419338:	f840 3b04 	str.w	r3, [r0], #4
  41933c:	f851 3b04 	ldr.w	r3, [r1], #4
  419340:	f840 3b04 	str.w	r3, [r0], #4
  419344:	f851 3b04 	ldr.w	r3, [r1], #4
  419348:	f840 3b04 	str.w	r3, [r0], #4
  41934c:	f851 3b04 	ldr.w	r3, [r1], #4
  419350:	f840 3b04 	str.w	r3, [r0], #4
  419354:	f851 3b04 	ldr.w	r3, [r1], #4
  419358:	f840 3b04 	str.w	r3, [r0], #4
  41935c:	3a40      	subs	r2, #64	; 0x40
  41935e:	d2bd      	bcs.n	4192dc <memcpy+0x10>
  419360:	3230      	adds	r2, #48	; 0x30
  419362:	d311      	bcc.n	419388 <memcpy+0xbc>
  419364:	f851 3b04 	ldr.w	r3, [r1], #4
  419368:	f840 3b04 	str.w	r3, [r0], #4
  41936c:	f851 3b04 	ldr.w	r3, [r1], #4
  419370:	f840 3b04 	str.w	r3, [r0], #4
  419374:	f851 3b04 	ldr.w	r3, [r1], #4
  419378:	f840 3b04 	str.w	r3, [r0], #4
  41937c:	f851 3b04 	ldr.w	r3, [r1], #4
  419380:	f840 3b04 	str.w	r3, [r0], #4
  419384:	3a10      	subs	r2, #16
  419386:	d2ed      	bcs.n	419364 <memcpy+0x98>
  419388:	320c      	adds	r2, #12
  41938a:	d305      	bcc.n	419398 <memcpy+0xcc>
  41938c:	f851 3b04 	ldr.w	r3, [r1], #4
  419390:	f840 3b04 	str.w	r3, [r0], #4
  419394:	3a04      	subs	r2, #4
  419396:	d2f9      	bcs.n	41938c <memcpy+0xc0>
  419398:	3204      	adds	r2, #4
  41939a:	d008      	beq.n	4193ae <memcpy+0xe2>
  41939c:	07d2      	lsls	r2, r2, #31
  41939e:	bf1c      	itt	ne
  4193a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4193a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4193a8:	d301      	bcc.n	4193ae <memcpy+0xe2>
  4193aa:	880b      	ldrh	r3, [r1, #0]
  4193ac:	8003      	strh	r3, [r0, #0]
  4193ae:	4660      	mov	r0, ip
  4193b0:	4770      	bx	lr
  4193b2:	bf00      	nop
  4193b4:	2a08      	cmp	r2, #8
  4193b6:	d313      	bcc.n	4193e0 <memcpy+0x114>
  4193b8:	078b      	lsls	r3, r1, #30
  4193ba:	d08d      	beq.n	4192d8 <memcpy+0xc>
  4193bc:	f010 0303 	ands.w	r3, r0, #3
  4193c0:	d08a      	beq.n	4192d8 <memcpy+0xc>
  4193c2:	f1c3 0304 	rsb	r3, r3, #4
  4193c6:	1ad2      	subs	r2, r2, r3
  4193c8:	07db      	lsls	r3, r3, #31
  4193ca:	bf1c      	itt	ne
  4193cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4193d0:	f800 3b01 	strbne.w	r3, [r0], #1
  4193d4:	d380      	bcc.n	4192d8 <memcpy+0xc>
  4193d6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4193da:	f820 3b02 	strh.w	r3, [r0], #2
  4193de:	e77b      	b.n	4192d8 <memcpy+0xc>
  4193e0:	3a04      	subs	r2, #4
  4193e2:	d3d9      	bcc.n	419398 <memcpy+0xcc>
  4193e4:	3a01      	subs	r2, #1
  4193e6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4193ea:	f800 3b01 	strb.w	r3, [r0], #1
  4193ee:	d2f9      	bcs.n	4193e4 <memcpy+0x118>
  4193f0:	780b      	ldrb	r3, [r1, #0]
  4193f2:	7003      	strb	r3, [r0, #0]
  4193f4:	784b      	ldrb	r3, [r1, #1]
  4193f6:	7043      	strb	r3, [r0, #1]
  4193f8:	788b      	ldrb	r3, [r1, #2]
  4193fa:	7083      	strb	r3, [r0, #2]
  4193fc:	4660      	mov	r0, ip
  4193fe:	4770      	bx	lr

00419400 <memmove>:
  419400:	4288      	cmp	r0, r1
  419402:	b5f0      	push	{r4, r5, r6, r7, lr}
  419404:	d90d      	bls.n	419422 <memmove+0x22>
  419406:	188b      	adds	r3, r1, r2
  419408:	4298      	cmp	r0, r3
  41940a:	d20a      	bcs.n	419422 <memmove+0x22>
  41940c:	1884      	adds	r4, r0, r2
  41940e:	2a00      	cmp	r2, #0
  419410:	d051      	beq.n	4194b6 <memmove+0xb6>
  419412:	4622      	mov	r2, r4
  419414:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  419418:	f802 4d01 	strb.w	r4, [r2, #-1]!
  41941c:	4299      	cmp	r1, r3
  41941e:	d1f9      	bne.n	419414 <memmove+0x14>
  419420:	bdf0      	pop	{r4, r5, r6, r7, pc}
  419422:	2a0f      	cmp	r2, #15
  419424:	d948      	bls.n	4194b8 <memmove+0xb8>
  419426:	ea41 0300 	orr.w	r3, r1, r0
  41942a:	079b      	lsls	r3, r3, #30
  41942c:	d146      	bne.n	4194bc <memmove+0xbc>
  41942e:	f100 0410 	add.w	r4, r0, #16
  419432:	f101 0310 	add.w	r3, r1, #16
  419436:	4615      	mov	r5, r2
  419438:	f853 6c10 	ldr.w	r6, [r3, #-16]
  41943c:	f844 6c10 	str.w	r6, [r4, #-16]
  419440:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  419444:	f844 6c0c 	str.w	r6, [r4, #-12]
  419448:	f853 6c08 	ldr.w	r6, [r3, #-8]
  41944c:	f844 6c08 	str.w	r6, [r4, #-8]
  419450:	3d10      	subs	r5, #16
  419452:	f853 6c04 	ldr.w	r6, [r3, #-4]
  419456:	f844 6c04 	str.w	r6, [r4, #-4]
  41945a:	2d0f      	cmp	r5, #15
  41945c:	f103 0310 	add.w	r3, r3, #16
  419460:	f104 0410 	add.w	r4, r4, #16
  419464:	d8e8      	bhi.n	419438 <memmove+0x38>
  419466:	f1a2 0310 	sub.w	r3, r2, #16
  41946a:	f023 030f 	bic.w	r3, r3, #15
  41946e:	f002 0e0f 	and.w	lr, r2, #15
  419472:	3310      	adds	r3, #16
  419474:	f1be 0f03 	cmp.w	lr, #3
  419478:	4419      	add	r1, r3
  41947a:	4403      	add	r3, r0
  41947c:	d921      	bls.n	4194c2 <memmove+0xc2>
  41947e:	1f1e      	subs	r6, r3, #4
  419480:	460d      	mov	r5, r1
  419482:	4674      	mov	r4, lr
  419484:	3c04      	subs	r4, #4
  419486:	f855 7b04 	ldr.w	r7, [r5], #4
  41948a:	f846 7f04 	str.w	r7, [r6, #4]!
  41948e:	2c03      	cmp	r4, #3
  419490:	d8f8      	bhi.n	419484 <memmove+0x84>
  419492:	f1ae 0404 	sub.w	r4, lr, #4
  419496:	f024 0403 	bic.w	r4, r4, #3
  41949a:	3404      	adds	r4, #4
  41949c:	4421      	add	r1, r4
  41949e:	4423      	add	r3, r4
  4194a0:	f002 0203 	and.w	r2, r2, #3
  4194a4:	b162      	cbz	r2, 4194c0 <memmove+0xc0>
  4194a6:	3b01      	subs	r3, #1
  4194a8:	440a      	add	r2, r1
  4194aa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4194ae:	f803 4f01 	strb.w	r4, [r3, #1]!
  4194b2:	428a      	cmp	r2, r1
  4194b4:	d1f9      	bne.n	4194aa <memmove+0xaa>
  4194b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4194b8:	4603      	mov	r3, r0
  4194ba:	e7f3      	b.n	4194a4 <memmove+0xa4>
  4194bc:	4603      	mov	r3, r0
  4194be:	e7f2      	b.n	4194a6 <memmove+0xa6>
  4194c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4194c2:	4672      	mov	r2, lr
  4194c4:	e7ee      	b.n	4194a4 <memmove+0xa4>
  4194c6:	bf00      	nop

004194c8 <memset>:
  4194c8:	b470      	push	{r4, r5, r6}
  4194ca:	0786      	lsls	r6, r0, #30
  4194cc:	d046      	beq.n	41955c <memset+0x94>
  4194ce:	1e54      	subs	r4, r2, #1
  4194d0:	2a00      	cmp	r2, #0
  4194d2:	d041      	beq.n	419558 <memset+0x90>
  4194d4:	b2ca      	uxtb	r2, r1
  4194d6:	4603      	mov	r3, r0
  4194d8:	e002      	b.n	4194e0 <memset+0x18>
  4194da:	f114 34ff 	adds.w	r4, r4, #4294967295
  4194de:	d33b      	bcc.n	419558 <memset+0x90>
  4194e0:	f803 2b01 	strb.w	r2, [r3], #1
  4194e4:	079d      	lsls	r5, r3, #30
  4194e6:	d1f8      	bne.n	4194da <memset+0x12>
  4194e8:	2c03      	cmp	r4, #3
  4194ea:	d92e      	bls.n	41954a <memset+0x82>
  4194ec:	b2cd      	uxtb	r5, r1
  4194ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4194f2:	2c0f      	cmp	r4, #15
  4194f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4194f8:	d919      	bls.n	41952e <memset+0x66>
  4194fa:	f103 0210 	add.w	r2, r3, #16
  4194fe:	4626      	mov	r6, r4
  419500:	3e10      	subs	r6, #16
  419502:	2e0f      	cmp	r6, #15
  419504:	f842 5c10 	str.w	r5, [r2, #-16]
  419508:	f842 5c0c 	str.w	r5, [r2, #-12]
  41950c:	f842 5c08 	str.w	r5, [r2, #-8]
  419510:	f842 5c04 	str.w	r5, [r2, #-4]
  419514:	f102 0210 	add.w	r2, r2, #16
  419518:	d8f2      	bhi.n	419500 <memset+0x38>
  41951a:	f1a4 0210 	sub.w	r2, r4, #16
  41951e:	f022 020f 	bic.w	r2, r2, #15
  419522:	f004 040f 	and.w	r4, r4, #15
  419526:	3210      	adds	r2, #16
  419528:	2c03      	cmp	r4, #3
  41952a:	4413      	add	r3, r2
  41952c:	d90d      	bls.n	41954a <memset+0x82>
  41952e:	461e      	mov	r6, r3
  419530:	4622      	mov	r2, r4
  419532:	3a04      	subs	r2, #4
  419534:	2a03      	cmp	r2, #3
  419536:	f846 5b04 	str.w	r5, [r6], #4
  41953a:	d8fa      	bhi.n	419532 <memset+0x6a>
  41953c:	1f22      	subs	r2, r4, #4
  41953e:	f022 0203 	bic.w	r2, r2, #3
  419542:	3204      	adds	r2, #4
  419544:	4413      	add	r3, r2
  419546:	f004 0403 	and.w	r4, r4, #3
  41954a:	b12c      	cbz	r4, 419558 <memset+0x90>
  41954c:	b2c9      	uxtb	r1, r1
  41954e:	441c      	add	r4, r3
  419550:	f803 1b01 	strb.w	r1, [r3], #1
  419554:	429c      	cmp	r4, r3
  419556:	d1fb      	bne.n	419550 <memset+0x88>
  419558:	bc70      	pop	{r4, r5, r6}
  41955a:	4770      	bx	lr
  41955c:	4614      	mov	r4, r2
  41955e:	4603      	mov	r3, r0
  419560:	e7c2      	b.n	4194e8 <memset+0x20>
  419562:	bf00      	nop

00419564 <__malloc_lock>:
  419564:	4801      	ldr	r0, [pc, #4]	; (41956c <__malloc_lock+0x8>)
  419566:	f001 bfdd 	b.w	41b524 <__retarget_lock_acquire_recursive>
  41956a:	bf00      	nop
  41956c:	2043a148 	.word	0x2043a148

00419570 <__malloc_unlock>:
  419570:	4801      	ldr	r0, [pc, #4]	; (419578 <__malloc_unlock+0x8>)
  419572:	f001 bfd9 	b.w	41b528 <__retarget_lock_release_recursive>
  419576:	bf00      	nop
  419578:	2043a148 	.word	0x2043a148

0041957c <_sbrk_r>:
  41957c:	b538      	push	{r3, r4, r5, lr}
  41957e:	4c07      	ldr	r4, [pc, #28]	; (41959c <_sbrk_r+0x20>)
  419580:	2300      	movs	r3, #0
  419582:	4605      	mov	r5, r0
  419584:	4608      	mov	r0, r1
  419586:	6023      	str	r3, [r4, #0]
  419588:	f7fe fd9e 	bl	4180c8 <_sbrk>
  41958c:	1c43      	adds	r3, r0, #1
  41958e:	d000      	beq.n	419592 <_sbrk_r+0x16>
  419590:	bd38      	pop	{r3, r4, r5, pc}
  419592:	6823      	ldr	r3, [r4, #0]
  419594:	2b00      	cmp	r3, #0
  419596:	d0fb      	beq.n	419590 <_sbrk_r+0x14>
  419598:	602b      	str	r3, [r5, #0]
  41959a:	bd38      	pop	{r3, r4, r5, pc}
  41959c:	2043a15c 	.word	0x2043a15c

004195a0 <setbuf>:
  4195a0:	2900      	cmp	r1, #0
  4195a2:	bf0c      	ite	eq
  4195a4:	2202      	moveq	r2, #2
  4195a6:	2200      	movne	r2, #0
  4195a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4195ac:	f000 b800 	b.w	4195b0 <setvbuf>

004195b0 <setvbuf>:
  4195b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4195b4:	4c61      	ldr	r4, [pc, #388]	; (41973c <setvbuf+0x18c>)
  4195b6:	6825      	ldr	r5, [r4, #0]
  4195b8:	b083      	sub	sp, #12
  4195ba:	4604      	mov	r4, r0
  4195bc:	460f      	mov	r7, r1
  4195be:	4690      	mov	r8, r2
  4195c0:	461e      	mov	r6, r3
  4195c2:	b115      	cbz	r5, 4195ca <setvbuf+0x1a>
  4195c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4195c6:	2b00      	cmp	r3, #0
  4195c8:	d064      	beq.n	419694 <setvbuf+0xe4>
  4195ca:	f1b8 0f02 	cmp.w	r8, #2
  4195ce:	d006      	beq.n	4195de <setvbuf+0x2e>
  4195d0:	f1b8 0f01 	cmp.w	r8, #1
  4195d4:	f200 809f 	bhi.w	419716 <setvbuf+0x166>
  4195d8:	2e00      	cmp	r6, #0
  4195da:	f2c0 809c 	blt.w	419716 <setvbuf+0x166>
  4195de:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4195e0:	07d8      	lsls	r0, r3, #31
  4195e2:	d534      	bpl.n	41964e <setvbuf+0x9e>
  4195e4:	4621      	mov	r1, r4
  4195e6:	4628      	mov	r0, r5
  4195e8:	f001 fb80 	bl	41acec <_fflush_r>
  4195ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4195ee:	b141      	cbz	r1, 419602 <setvbuf+0x52>
  4195f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4195f4:	4299      	cmp	r1, r3
  4195f6:	d002      	beq.n	4195fe <setvbuf+0x4e>
  4195f8:	4628      	mov	r0, r5
  4195fa:	f001 fcf5 	bl	41afe8 <_free_r>
  4195fe:	2300      	movs	r3, #0
  419600:	6323      	str	r3, [r4, #48]	; 0x30
  419602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  419606:	2200      	movs	r2, #0
  419608:	61a2      	str	r2, [r4, #24]
  41960a:	6062      	str	r2, [r4, #4]
  41960c:	061a      	lsls	r2, r3, #24
  41960e:	d43a      	bmi.n	419686 <setvbuf+0xd6>
  419610:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  419614:	f023 0303 	bic.w	r3, r3, #3
  419618:	f1b8 0f02 	cmp.w	r8, #2
  41961c:	81a3      	strh	r3, [r4, #12]
  41961e:	d01d      	beq.n	41965c <setvbuf+0xac>
  419620:	ab01      	add	r3, sp, #4
  419622:	466a      	mov	r2, sp
  419624:	4621      	mov	r1, r4
  419626:	4628      	mov	r0, r5
  419628:	f001 ff80 	bl	41b52c <__swhatbuf_r>
  41962c:	89a3      	ldrh	r3, [r4, #12]
  41962e:	4318      	orrs	r0, r3
  419630:	81a0      	strh	r0, [r4, #12]
  419632:	2e00      	cmp	r6, #0
  419634:	d132      	bne.n	41969c <setvbuf+0xec>
  419636:	9e00      	ldr	r6, [sp, #0]
  419638:	4630      	mov	r0, r6
  41963a:	f7ff fb8f 	bl	418d5c <malloc>
  41963e:	4607      	mov	r7, r0
  419640:	2800      	cmp	r0, #0
  419642:	d06b      	beq.n	41971c <setvbuf+0x16c>
  419644:	89a3      	ldrh	r3, [r4, #12]
  419646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41964a:	81a3      	strh	r3, [r4, #12]
  41964c:	e028      	b.n	4196a0 <setvbuf+0xf0>
  41964e:	89a3      	ldrh	r3, [r4, #12]
  419650:	0599      	lsls	r1, r3, #22
  419652:	d4c7      	bmi.n	4195e4 <setvbuf+0x34>
  419654:	6da0      	ldr	r0, [r4, #88]	; 0x58
  419656:	f001 ff65 	bl	41b524 <__retarget_lock_acquire_recursive>
  41965a:	e7c3      	b.n	4195e4 <setvbuf+0x34>
  41965c:	2500      	movs	r5, #0
  41965e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  419660:	2600      	movs	r6, #0
  419662:	f104 0243 	add.w	r2, r4, #67	; 0x43
  419666:	f043 0302 	orr.w	r3, r3, #2
  41966a:	2001      	movs	r0, #1
  41966c:	60a6      	str	r6, [r4, #8]
  41966e:	07ce      	lsls	r6, r1, #31
  419670:	81a3      	strh	r3, [r4, #12]
  419672:	6022      	str	r2, [r4, #0]
  419674:	6122      	str	r2, [r4, #16]
  419676:	6160      	str	r0, [r4, #20]
  419678:	d401      	bmi.n	41967e <setvbuf+0xce>
  41967a:	0598      	lsls	r0, r3, #22
  41967c:	d53e      	bpl.n	4196fc <setvbuf+0x14c>
  41967e:	4628      	mov	r0, r5
  419680:	b003      	add	sp, #12
  419682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  419686:	6921      	ldr	r1, [r4, #16]
  419688:	4628      	mov	r0, r5
  41968a:	f001 fcad 	bl	41afe8 <_free_r>
  41968e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  419692:	e7bd      	b.n	419610 <setvbuf+0x60>
  419694:	4628      	mov	r0, r5
  419696:	f001 fb81 	bl	41ad9c <__sinit>
  41969a:	e796      	b.n	4195ca <setvbuf+0x1a>
  41969c:	2f00      	cmp	r7, #0
  41969e:	d0cb      	beq.n	419638 <setvbuf+0x88>
  4196a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4196a2:	2b00      	cmp	r3, #0
  4196a4:	d033      	beq.n	41970e <setvbuf+0x15e>
  4196a6:	9b00      	ldr	r3, [sp, #0]
  4196a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4196ac:	6027      	str	r7, [r4, #0]
  4196ae:	429e      	cmp	r6, r3
  4196b0:	bf1c      	itt	ne
  4196b2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4196b6:	81a2      	strhne	r2, [r4, #12]
  4196b8:	f1b8 0f01 	cmp.w	r8, #1
  4196bc:	bf04      	itt	eq
  4196be:	f042 0201 	orreq.w	r2, r2, #1
  4196c2:	81a2      	strheq	r2, [r4, #12]
  4196c4:	b292      	uxth	r2, r2
  4196c6:	f012 0308 	ands.w	r3, r2, #8
  4196ca:	6127      	str	r7, [r4, #16]
  4196cc:	6166      	str	r6, [r4, #20]
  4196ce:	d00e      	beq.n	4196ee <setvbuf+0x13e>
  4196d0:	07d1      	lsls	r1, r2, #31
  4196d2:	d51a      	bpl.n	41970a <setvbuf+0x15a>
  4196d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4196d6:	4276      	negs	r6, r6
  4196d8:	2300      	movs	r3, #0
  4196da:	f015 0501 	ands.w	r5, r5, #1
  4196de:	61a6      	str	r6, [r4, #24]
  4196e0:	60a3      	str	r3, [r4, #8]
  4196e2:	d009      	beq.n	4196f8 <setvbuf+0x148>
  4196e4:	2500      	movs	r5, #0
  4196e6:	4628      	mov	r0, r5
  4196e8:	b003      	add	sp, #12
  4196ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4196ee:	60a3      	str	r3, [r4, #8]
  4196f0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4196f2:	f015 0501 	ands.w	r5, r5, #1
  4196f6:	d1f5      	bne.n	4196e4 <setvbuf+0x134>
  4196f8:	0593      	lsls	r3, r2, #22
  4196fa:	d4c0      	bmi.n	41967e <setvbuf+0xce>
  4196fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4196fe:	f001 ff13 	bl	41b528 <__retarget_lock_release_recursive>
  419702:	4628      	mov	r0, r5
  419704:	b003      	add	sp, #12
  419706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41970a:	60a6      	str	r6, [r4, #8]
  41970c:	e7f0      	b.n	4196f0 <setvbuf+0x140>
  41970e:	4628      	mov	r0, r5
  419710:	f001 fb44 	bl	41ad9c <__sinit>
  419714:	e7c7      	b.n	4196a6 <setvbuf+0xf6>
  419716:	f04f 35ff 	mov.w	r5, #4294967295
  41971a:	e7b0      	b.n	41967e <setvbuf+0xce>
  41971c:	f8dd 9000 	ldr.w	r9, [sp]
  419720:	45b1      	cmp	r9, r6
  419722:	d004      	beq.n	41972e <setvbuf+0x17e>
  419724:	4648      	mov	r0, r9
  419726:	f7ff fb19 	bl	418d5c <malloc>
  41972a:	4607      	mov	r7, r0
  41972c:	b920      	cbnz	r0, 419738 <setvbuf+0x188>
  41972e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  419732:	f04f 35ff 	mov.w	r5, #4294967295
  419736:	e792      	b.n	41965e <setvbuf+0xae>
  419738:	464e      	mov	r6, r9
  41973a:	e783      	b.n	419644 <setvbuf+0x94>
  41973c:	20400038 	.word	0x20400038
  419740:	eba2 0003 	sub.w	r0, r2, r3
  419744:	4770      	bx	lr
  419746:	bf00      	nop

00419748 <strcmp>:
  419748:	7802      	ldrb	r2, [r0, #0]
  41974a:	780b      	ldrb	r3, [r1, #0]
  41974c:	2a01      	cmp	r2, #1
  41974e:	bf28      	it	cs
  419750:	429a      	cmpcs	r2, r3
  419752:	d1f5      	bne.n	419740 <setvbuf+0x190>
  419754:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  419758:	ea40 0401 	orr.w	r4, r0, r1
  41975c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  419760:	f06f 0c00 	mvn.w	ip, #0
  419764:	ea4f 7244 	mov.w	r2, r4, lsl #29
  419768:	b312      	cbz	r2, 4197b0 <strcmp+0x68>
  41976a:	ea80 0401 	eor.w	r4, r0, r1
  41976e:	f014 0f07 	tst.w	r4, #7
  419772:	d16a      	bne.n	41984a <strcmp+0x102>
  419774:	f000 0407 	and.w	r4, r0, #7
  419778:	f020 0007 	bic.w	r0, r0, #7
  41977c:	f004 0503 	and.w	r5, r4, #3
  419780:	f021 0107 	bic.w	r1, r1, #7
  419784:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  419788:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  41978c:	f014 0f04 	tst.w	r4, #4
  419790:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  419794:	fa0c f405 	lsl.w	r4, ip, r5
  419798:	ea62 0204 	orn	r2, r2, r4
  41979c:	ea66 0604 	orn	r6, r6, r4
  4197a0:	d00a      	beq.n	4197b8 <strcmp+0x70>
  4197a2:	ea63 0304 	orn	r3, r3, r4
  4197a6:	4662      	mov	r2, ip
  4197a8:	ea67 0704 	orn	r7, r7, r4
  4197ac:	4666      	mov	r6, ip
  4197ae:	e003      	b.n	4197b8 <strcmp+0x70>
  4197b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4197b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4197b8:	fa82 f54c 	uadd8	r5, r2, ip
  4197bc:	ea82 0406 	eor.w	r4, r2, r6
  4197c0:	faa4 f48c 	sel	r4, r4, ip
  4197c4:	bb6c      	cbnz	r4, 419822 <strcmp+0xda>
  4197c6:	fa83 f54c 	uadd8	r5, r3, ip
  4197ca:	ea83 0507 	eor.w	r5, r3, r7
  4197ce:	faa5 f58c 	sel	r5, r5, ip
  4197d2:	b995      	cbnz	r5, 4197fa <strcmp+0xb2>
  4197d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4197d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4197dc:	fa82 f54c 	uadd8	r5, r2, ip
  4197e0:	ea82 0406 	eor.w	r4, r2, r6
  4197e4:	faa4 f48c 	sel	r4, r4, ip
  4197e8:	fa83 f54c 	uadd8	r5, r3, ip
  4197ec:	ea83 0507 	eor.w	r5, r3, r7
  4197f0:	faa5 f58c 	sel	r5, r5, ip
  4197f4:	4325      	orrs	r5, r4
  4197f6:	d0db      	beq.n	4197b0 <strcmp+0x68>
  4197f8:	b99c      	cbnz	r4, 419822 <strcmp+0xda>
  4197fa:	ba2d      	rev	r5, r5
  4197fc:	fab5 f485 	clz	r4, r5
  419800:	f024 0407 	bic.w	r4, r4, #7
  419804:	fa27 f104 	lsr.w	r1, r7, r4
  419808:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  41980c:	fa23 f304 	lsr.w	r3, r3, r4
  419810:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  419814:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  419818:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41981c:	eba0 0001 	sub.w	r0, r0, r1
  419820:	4770      	bx	lr
  419822:	ba24      	rev	r4, r4
  419824:	fab4 f484 	clz	r4, r4
  419828:	f024 0407 	bic.w	r4, r4, #7
  41982c:	fa26 f104 	lsr.w	r1, r6, r4
  419830:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  419834:	fa22 f204 	lsr.w	r2, r2, r4
  419838:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  41983c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  419840:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  419844:	eba0 0001 	sub.w	r0, r0, r1
  419848:	4770      	bx	lr
  41984a:	f014 0f03 	tst.w	r4, #3
  41984e:	d13c      	bne.n	4198ca <strcmp+0x182>
  419850:	f010 0403 	ands.w	r4, r0, #3
  419854:	d128      	bne.n	4198a8 <strcmp+0x160>
  419856:	f850 2b08 	ldr.w	r2, [r0], #8
  41985a:	f851 3b08 	ldr.w	r3, [r1], #8
  41985e:	fa82 f54c 	uadd8	r5, r2, ip
  419862:	ea82 0503 	eor.w	r5, r2, r3
  419866:	faa5 f58c 	sel	r5, r5, ip
  41986a:	b95d      	cbnz	r5, 419884 <strcmp+0x13c>
  41986c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  419870:	f851 3c04 	ldr.w	r3, [r1, #-4]
  419874:	fa82 f54c 	uadd8	r5, r2, ip
  419878:	ea82 0503 	eor.w	r5, r2, r3
  41987c:	faa5 f58c 	sel	r5, r5, ip
  419880:	2d00      	cmp	r5, #0
  419882:	d0e8      	beq.n	419856 <strcmp+0x10e>
  419884:	ba2d      	rev	r5, r5
  419886:	fab5 f485 	clz	r4, r5
  41988a:	f024 0407 	bic.w	r4, r4, #7
  41988e:	fa23 f104 	lsr.w	r1, r3, r4
  419892:	fa22 f204 	lsr.w	r2, r2, r4
  419896:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  41989a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41989e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4198a2:	eba0 0001 	sub.w	r0, r0, r1
  4198a6:	4770      	bx	lr
  4198a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  4198ac:	f020 0003 	bic.w	r0, r0, #3
  4198b0:	f850 2b08 	ldr.w	r2, [r0], #8
  4198b4:	f021 0103 	bic.w	r1, r1, #3
  4198b8:	f851 3b08 	ldr.w	r3, [r1], #8
  4198bc:	fa0c f404 	lsl.w	r4, ip, r4
  4198c0:	ea62 0204 	orn	r2, r2, r4
  4198c4:	ea63 0304 	orn	r3, r3, r4
  4198c8:	e7c9      	b.n	41985e <strcmp+0x116>
  4198ca:	f010 0403 	ands.w	r4, r0, #3
  4198ce:	d01a      	beq.n	419906 <strcmp+0x1be>
  4198d0:	eba1 0104 	sub.w	r1, r1, r4
  4198d4:	f020 0003 	bic.w	r0, r0, #3
  4198d8:	07e4      	lsls	r4, r4, #31
  4198da:	f850 2b04 	ldr.w	r2, [r0], #4
  4198de:	d006      	beq.n	4198ee <strcmp+0x1a6>
  4198e0:	d20f      	bcs.n	419902 <strcmp+0x1ba>
  4198e2:	788b      	ldrb	r3, [r1, #2]
  4198e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4198e8:	1ae4      	subs	r4, r4, r3
  4198ea:	d106      	bne.n	4198fa <strcmp+0x1b2>
  4198ec:	b12b      	cbz	r3, 4198fa <strcmp+0x1b2>
  4198ee:	78cb      	ldrb	r3, [r1, #3]
  4198f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4198f4:	1ae4      	subs	r4, r4, r3
  4198f6:	d100      	bne.n	4198fa <strcmp+0x1b2>
  4198f8:	b91b      	cbnz	r3, 419902 <strcmp+0x1ba>
  4198fa:	4620      	mov	r0, r4
  4198fc:	f85d 4b10 	ldr.w	r4, [sp], #16
  419900:	4770      	bx	lr
  419902:	f101 0104 	add.w	r1, r1, #4
  419906:	f850 2b04 	ldr.w	r2, [r0], #4
  41990a:	07cc      	lsls	r4, r1, #31
  41990c:	f021 0103 	bic.w	r1, r1, #3
  419910:	f851 3b04 	ldr.w	r3, [r1], #4
  419914:	d848      	bhi.n	4199a8 <strcmp+0x260>
  419916:	d224      	bcs.n	419962 <strcmp+0x21a>
  419918:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  41991c:	fa82 f54c 	uadd8	r5, r2, ip
  419920:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  419924:	faa5 f58c 	sel	r5, r5, ip
  419928:	d10a      	bne.n	419940 <strcmp+0x1f8>
  41992a:	b965      	cbnz	r5, 419946 <strcmp+0x1fe>
  41992c:	f851 3b04 	ldr.w	r3, [r1], #4
  419930:	ea84 0402 	eor.w	r4, r4, r2
  419934:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  419938:	d10e      	bne.n	419958 <strcmp+0x210>
  41993a:	f850 2b04 	ldr.w	r2, [r0], #4
  41993e:	e7eb      	b.n	419918 <strcmp+0x1d0>
  419940:	ea4f 2313 	mov.w	r3, r3, lsr #8
  419944:	e055      	b.n	4199f2 <strcmp+0x2aa>
  419946:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  41994a:	d14d      	bne.n	4199e8 <strcmp+0x2a0>
  41994c:	7808      	ldrb	r0, [r1, #0]
  41994e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  419952:	f1c0 0000 	rsb	r0, r0, #0
  419956:	4770      	bx	lr
  419958:	ea4f 6212 	mov.w	r2, r2, lsr #24
  41995c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  419960:	e047      	b.n	4199f2 <strcmp+0x2aa>
  419962:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  419966:	fa82 f54c 	uadd8	r5, r2, ip
  41996a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  41996e:	faa5 f58c 	sel	r5, r5, ip
  419972:	d10a      	bne.n	41998a <strcmp+0x242>
  419974:	b965      	cbnz	r5, 419990 <strcmp+0x248>
  419976:	f851 3b04 	ldr.w	r3, [r1], #4
  41997a:	ea84 0402 	eor.w	r4, r4, r2
  41997e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  419982:	d10c      	bne.n	41999e <strcmp+0x256>
  419984:	f850 2b04 	ldr.w	r2, [r0], #4
  419988:	e7eb      	b.n	419962 <strcmp+0x21a>
  41998a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  41998e:	e030      	b.n	4199f2 <strcmp+0x2aa>
  419990:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  419994:	d128      	bne.n	4199e8 <strcmp+0x2a0>
  419996:	880b      	ldrh	r3, [r1, #0]
  419998:	ea4f 4212 	mov.w	r2, r2, lsr #16
  41999c:	e029      	b.n	4199f2 <strcmp+0x2aa>
  41999e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4199a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  4199a6:	e024      	b.n	4199f2 <strcmp+0x2aa>
  4199a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  4199ac:	fa82 f54c 	uadd8	r5, r2, ip
  4199b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  4199b4:	faa5 f58c 	sel	r5, r5, ip
  4199b8:	d10a      	bne.n	4199d0 <strcmp+0x288>
  4199ba:	b965      	cbnz	r5, 4199d6 <strcmp+0x28e>
  4199bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4199c0:	ea84 0402 	eor.w	r4, r4, r2
  4199c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  4199c8:	d109      	bne.n	4199de <strcmp+0x296>
  4199ca:	f850 2b04 	ldr.w	r2, [r0], #4
  4199ce:	e7eb      	b.n	4199a8 <strcmp+0x260>
  4199d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  4199d4:	e00d      	b.n	4199f2 <strcmp+0x2aa>
  4199d6:	f015 0fff 	tst.w	r5, #255	; 0xff
  4199da:	d105      	bne.n	4199e8 <strcmp+0x2a0>
  4199dc:	680b      	ldr	r3, [r1, #0]
  4199de:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4199e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4199e6:	e004      	b.n	4199f2 <strcmp+0x2aa>
  4199e8:	f04f 0000 	mov.w	r0, #0
  4199ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4199f0:	4770      	bx	lr
  4199f2:	ba12      	rev	r2, r2
  4199f4:	ba1b      	rev	r3, r3
  4199f6:	fa82 f44c 	uadd8	r4, r2, ip
  4199fa:	ea82 0403 	eor.w	r4, r2, r3
  4199fe:	faa4 f58c 	sel	r5, r4, ip
  419a02:	fab5 f485 	clz	r4, r5
  419a06:	fa02 f204 	lsl.w	r2, r2, r4
  419a0a:	fa03 f304 	lsl.w	r3, r3, r4
  419a0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  419a12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  419a16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  419a1a:	4770      	bx	lr

00419a1c <strcpy>:
  419a1c:	ea80 0201 	eor.w	r2, r0, r1
  419a20:	4684      	mov	ip, r0
  419a22:	f012 0f03 	tst.w	r2, #3
  419a26:	d14f      	bne.n	419ac8 <strcpy+0xac>
  419a28:	f011 0f03 	tst.w	r1, #3
  419a2c:	d132      	bne.n	419a94 <strcpy+0x78>
  419a2e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  419a32:	f011 0f04 	tst.w	r1, #4
  419a36:	f851 3b04 	ldr.w	r3, [r1], #4
  419a3a:	d00b      	beq.n	419a54 <strcpy+0x38>
  419a3c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  419a40:	439a      	bics	r2, r3
  419a42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  419a46:	bf04      	itt	eq
  419a48:	f84c 3b04 	streq.w	r3, [ip], #4
  419a4c:	f851 3b04 	ldreq.w	r3, [r1], #4
  419a50:	d116      	bne.n	419a80 <strcpy+0x64>
  419a52:	bf00      	nop
  419a54:	f851 4b04 	ldr.w	r4, [r1], #4
  419a58:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  419a5c:	439a      	bics	r2, r3
  419a5e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  419a62:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  419a66:	d10b      	bne.n	419a80 <strcpy+0x64>
  419a68:	f84c 3b04 	str.w	r3, [ip], #4
  419a6c:	43a2      	bics	r2, r4
  419a6e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  419a72:	bf04      	itt	eq
  419a74:	f851 3b04 	ldreq.w	r3, [r1], #4
  419a78:	f84c 4b04 	streq.w	r4, [ip], #4
  419a7c:	d0ea      	beq.n	419a54 <strcpy+0x38>
  419a7e:	4623      	mov	r3, r4
  419a80:	f80c 3b01 	strb.w	r3, [ip], #1
  419a84:	f013 0fff 	tst.w	r3, #255	; 0xff
  419a88:	ea4f 2333 	mov.w	r3, r3, ror #8
  419a8c:	d1f8      	bne.n	419a80 <strcpy+0x64>
  419a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  419a92:	4770      	bx	lr
  419a94:	f011 0f01 	tst.w	r1, #1
  419a98:	d006      	beq.n	419aa8 <strcpy+0x8c>
  419a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
  419a9e:	f80c 2b01 	strb.w	r2, [ip], #1
  419aa2:	2a00      	cmp	r2, #0
  419aa4:	bf08      	it	eq
  419aa6:	4770      	bxeq	lr
  419aa8:	f011 0f02 	tst.w	r1, #2
  419aac:	d0bf      	beq.n	419a2e <strcpy+0x12>
  419aae:	f831 2b02 	ldrh.w	r2, [r1], #2
  419ab2:	f012 0fff 	tst.w	r2, #255	; 0xff
  419ab6:	bf16      	itet	ne
  419ab8:	f82c 2b02 	strhne.w	r2, [ip], #2
  419abc:	f88c 2000 	strbeq.w	r2, [ip]
  419ac0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  419ac4:	d1b3      	bne.n	419a2e <strcpy+0x12>
  419ac6:	4770      	bx	lr
  419ac8:	f811 2b01 	ldrb.w	r2, [r1], #1
  419acc:	f80c 2b01 	strb.w	r2, [ip], #1
  419ad0:	2a00      	cmp	r2, #0
  419ad2:	d1f9      	bne.n	419ac8 <strcpy+0xac>
  419ad4:	4770      	bx	lr
  419ad6:	bf00      	nop
	...

00419b00 <strlen>:
  419b00:	f890 f000 	pld	[r0]
  419b04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  419b08:	f020 0107 	bic.w	r1, r0, #7
  419b0c:	f06f 0c00 	mvn.w	ip, #0
  419b10:	f010 0407 	ands.w	r4, r0, #7
  419b14:	f891 f020 	pld	[r1, #32]
  419b18:	f040 8049 	bne.w	419bae <strlen+0xae>
  419b1c:	f04f 0400 	mov.w	r4, #0
  419b20:	f06f 0007 	mvn.w	r0, #7
  419b24:	e9d1 2300 	ldrd	r2, r3, [r1]
  419b28:	f891 f040 	pld	[r1, #64]	; 0x40
  419b2c:	f100 0008 	add.w	r0, r0, #8
  419b30:	fa82 f24c 	uadd8	r2, r2, ip
  419b34:	faa4 f28c 	sel	r2, r4, ip
  419b38:	fa83 f34c 	uadd8	r3, r3, ip
  419b3c:	faa2 f38c 	sel	r3, r2, ip
  419b40:	bb4b      	cbnz	r3, 419b96 <strlen+0x96>
  419b42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  419b46:	fa82 f24c 	uadd8	r2, r2, ip
  419b4a:	f100 0008 	add.w	r0, r0, #8
  419b4e:	faa4 f28c 	sel	r2, r4, ip
  419b52:	fa83 f34c 	uadd8	r3, r3, ip
  419b56:	faa2 f38c 	sel	r3, r2, ip
  419b5a:	b9e3      	cbnz	r3, 419b96 <strlen+0x96>
  419b5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  419b60:	fa82 f24c 	uadd8	r2, r2, ip
  419b64:	f100 0008 	add.w	r0, r0, #8
  419b68:	faa4 f28c 	sel	r2, r4, ip
  419b6c:	fa83 f34c 	uadd8	r3, r3, ip
  419b70:	faa2 f38c 	sel	r3, r2, ip
  419b74:	b97b      	cbnz	r3, 419b96 <strlen+0x96>
  419b76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  419b7a:	f101 0120 	add.w	r1, r1, #32
  419b7e:	fa82 f24c 	uadd8	r2, r2, ip
  419b82:	f100 0008 	add.w	r0, r0, #8
  419b86:	faa4 f28c 	sel	r2, r4, ip
  419b8a:	fa83 f34c 	uadd8	r3, r3, ip
  419b8e:	faa2 f38c 	sel	r3, r2, ip
  419b92:	2b00      	cmp	r3, #0
  419b94:	d0c6      	beq.n	419b24 <strlen+0x24>
  419b96:	2a00      	cmp	r2, #0
  419b98:	bf04      	itt	eq
  419b9a:	3004      	addeq	r0, #4
  419b9c:	461a      	moveq	r2, r3
  419b9e:	ba12      	rev	r2, r2
  419ba0:	fab2 f282 	clz	r2, r2
  419ba4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  419ba8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  419bac:	4770      	bx	lr
  419bae:	e9d1 2300 	ldrd	r2, r3, [r1]
  419bb2:	f004 0503 	and.w	r5, r4, #3
  419bb6:	f1c4 0000 	rsb	r0, r4, #0
  419bba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  419bbe:	f014 0f04 	tst.w	r4, #4
  419bc2:	f891 f040 	pld	[r1, #64]	; 0x40
  419bc6:	fa0c f505 	lsl.w	r5, ip, r5
  419bca:	ea62 0205 	orn	r2, r2, r5
  419bce:	bf1c      	itt	ne
  419bd0:	ea63 0305 	ornne	r3, r3, r5
  419bd4:	4662      	movne	r2, ip
  419bd6:	f04f 0400 	mov.w	r4, #0
  419bda:	e7a9      	b.n	419b30 <strlen+0x30>

00419bdc <_strtol_l.isra.0>:
  419bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  419be0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  419be4:	460f      	mov	r7, r1
  419be6:	4680      	mov	r8, r0
  419be8:	4616      	mov	r6, r2
  419bea:	461d      	mov	r5, r3
  419bec:	468a      	mov	sl, r1
  419bee:	e000      	b.n	419bf2 <_strtol_l.isra.0+0x16>
  419bf0:	46a2      	mov	sl, r4
  419bf2:	4654      	mov	r4, sl
  419bf4:	4648      	mov	r0, r9
  419bf6:	f814 bb01 	ldrb.w	fp, [r4], #1
  419bfa:	f001 fc8b 	bl	41b514 <__locale_ctype_ptr_l>
  419bfe:	4458      	add	r0, fp
  419c00:	7842      	ldrb	r2, [r0, #1]
  419c02:	f012 0208 	ands.w	r2, r2, #8
  419c06:	d1f3      	bne.n	419bf0 <_strtol_l.isra.0+0x14>
  419c08:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  419c0c:	d04f      	beq.n	419cae <_strtol_l.isra.0+0xd2>
  419c0e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  419c12:	bf04      	itt	eq
  419c14:	f894 b000 	ldrbeq.w	fp, [r4]
  419c18:	f10a 0402 	addeq.w	r4, sl, #2
  419c1c:	b11d      	cbz	r5, 419c26 <_strtol_l.isra.0+0x4a>
  419c1e:	2d10      	cmp	r5, #16
  419c20:	d056      	beq.n	419cd0 <_strtol_l.isra.0+0xf4>
  419c22:	46ac      	mov	ip, r5
  419c24:	e004      	b.n	419c30 <_strtol_l.isra.0+0x54>
  419c26:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  419c2a:	d060      	beq.n	419cee <_strtol_l.isra.0+0x112>
  419c2c:	250a      	movs	r5, #10
  419c2e:	46ac      	mov	ip, r5
  419c30:	2a00      	cmp	r2, #0
  419c32:	bf0c      	ite	eq
  419c34:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  419c38:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  419c3c:	2100      	movs	r1, #0
  419c3e:	fbb9 fefc 	udiv	lr, r9, ip
  419c42:	4608      	mov	r0, r1
  419c44:	fb0c 9a1e 	mls	sl, ip, lr, r9
  419c48:	e005      	b.n	419c56 <_strtol_l.isra.0+0x7a>
  419c4a:	d029      	beq.n	419ca0 <_strtol_l.isra.0+0xc4>
  419c4c:	fb0c 3000 	mla	r0, ip, r0, r3
  419c50:	2101      	movs	r1, #1
  419c52:	f814 bb01 	ldrb.w	fp, [r4], #1
  419c56:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  419c5a:	2b09      	cmp	r3, #9
  419c5c:	d905      	bls.n	419c6a <_strtol_l.isra.0+0x8e>
  419c5e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  419c62:	2b19      	cmp	r3, #25
  419c64:	d80b      	bhi.n	419c7e <_strtol_l.isra.0+0xa2>
  419c66:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  419c6a:	429d      	cmp	r5, r3
  419c6c:	dd0f      	ble.n	419c8e <_strtol_l.isra.0+0xb2>
  419c6e:	f1b1 3fff 	cmp.w	r1, #4294967295
  419c72:	d0ee      	beq.n	419c52 <_strtol_l.isra.0+0x76>
  419c74:	4586      	cmp	lr, r0
  419c76:	d2e8      	bcs.n	419c4a <_strtol_l.isra.0+0x6e>
  419c78:	f04f 31ff 	mov.w	r1, #4294967295
  419c7c:	e7e9      	b.n	419c52 <_strtol_l.isra.0+0x76>
  419c7e:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  419c82:	2b19      	cmp	r3, #25
  419c84:	d803      	bhi.n	419c8e <_strtol_l.isra.0+0xb2>
  419c86:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  419c8a:	429d      	cmp	r5, r3
  419c8c:	dcef      	bgt.n	419c6e <_strtol_l.isra.0+0x92>
  419c8e:	1c4b      	adds	r3, r1, #1
  419c90:	d013      	beq.n	419cba <_strtol_l.isra.0+0xde>
  419c92:	b102      	cbz	r2, 419c96 <_strtol_l.isra.0+0xba>
  419c94:	4240      	negs	r0, r0
  419c96:	b146      	cbz	r6, 419caa <_strtol_l.isra.0+0xce>
  419c98:	b9c1      	cbnz	r1, 419ccc <_strtol_l.isra.0+0xf0>
  419c9a:	6037      	str	r7, [r6, #0]
  419c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419ca0:	459a      	cmp	sl, r3
  419ca2:	dad3      	bge.n	419c4c <_strtol_l.isra.0+0x70>
  419ca4:	f04f 31ff 	mov.w	r1, #4294967295
  419ca8:	e7d3      	b.n	419c52 <_strtol_l.isra.0+0x76>
  419caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419cae:	f894 b000 	ldrb.w	fp, [r4]
  419cb2:	2201      	movs	r2, #1
  419cb4:	f10a 0402 	add.w	r4, sl, #2
  419cb8:	e7b0      	b.n	419c1c <_strtol_l.isra.0+0x40>
  419cba:	2322      	movs	r3, #34	; 0x22
  419cbc:	f8c8 3000 	str.w	r3, [r8]
  419cc0:	b1ee      	cbz	r6, 419cfe <_strtol_l.isra.0+0x122>
  419cc2:	1e67      	subs	r7, r4, #1
  419cc4:	4648      	mov	r0, r9
  419cc6:	6037      	str	r7, [r6, #0]
  419cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419ccc:	4681      	mov	r9, r0
  419cce:	e7f8      	b.n	419cc2 <_strtol_l.isra.0+0xe6>
  419cd0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  419cd4:	d1a5      	bne.n	419c22 <_strtol_l.isra.0+0x46>
  419cd6:	7823      	ldrb	r3, [r4, #0]
  419cd8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  419cdc:	2b58      	cmp	r3, #88	; 0x58
  419cde:	d1a0      	bne.n	419c22 <_strtol_l.isra.0+0x46>
  419ce0:	f04f 0c10 	mov.w	ip, #16
  419ce4:	f894 b001 	ldrb.w	fp, [r4, #1]
  419ce8:	4665      	mov	r5, ip
  419cea:	3402      	adds	r4, #2
  419cec:	e7a0      	b.n	419c30 <_strtol_l.isra.0+0x54>
  419cee:	7823      	ldrb	r3, [r4, #0]
  419cf0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  419cf4:	2b58      	cmp	r3, #88	; 0x58
  419cf6:	d0f3      	beq.n	419ce0 <_strtol_l.isra.0+0x104>
  419cf8:	2508      	movs	r5, #8
  419cfa:	46ac      	mov	ip, r5
  419cfc:	e798      	b.n	419c30 <_strtol_l.isra.0+0x54>
  419cfe:	4648      	mov	r0, r9
  419d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419d04 <strtol>:
  419d04:	b530      	push	{r4, r5, lr}
  419d06:	4c08      	ldr	r4, [pc, #32]	; (419d28 <strtol+0x24>)
  419d08:	4b08      	ldr	r3, [pc, #32]	; (419d2c <strtol+0x28>)
  419d0a:	6825      	ldr	r5, [r4, #0]
  419d0c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  419d0e:	b083      	sub	sp, #12
  419d10:	2c00      	cmp	r4, #0
  419d12:	bf08      	it	eq
  419d14:	461c      	moveq	r4, r3
  419d16:	9400      	str	r4, [sp, #0]
  419d18:	4613      	mov	r3, r2
  419d1a:	460a      	mov	r2, r1
  419d1c:	4601      	mov	r1, r0
  419d1e:	4628      	mov	r0, r5
  419d20:	f7ff ff5c 	bl	419bdc <_strtol_l.isra.0>
  419d24:	b003      	add	sp, #12
  419d26:	bd30      	pop	{r4, r5, pc}
  419d28:	20400038 	.word	0x20400038
  419d2c:	2040087c 	.word	0x2040087c

00419d30 <__sprint_r.part.0>:
  419d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  419d34:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  419d36:	049c      	lsls	r4, r3, #18
  419d38:	4693      	mov	fp, r2
  419d3a:	d52f      	bpl.n	419d9c <__sprint_r.part.0+0x6c>
  419d3c:	6893      	ldr	r3, [r2, #8]
  419d3e:	6812      	ldr	r2, [r2, #0]
  419d40:	b353      	cbz	r3, 419d98 <__sprint_r.part.0+0x68>
  419d42:	460e      	mov	r6, r1
  419d44:	4607      	mov	r7, r0
  419d46:	f102 0908 	add.w	r9, r2, #8
  419d4a:	e919 0420 	ldmdb	r9, {r5, sl}
  419d4e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  419d52:	d017      	beq.n	419d84 <__sprint_r.part.0+0x54>
  419d54:	3d04      	subs	r5, #4
  419d56:	2400      	movs	r4, #0
  419d58:	e001      	b.n	419d5e <__sprint_r.part.0+0x2e>
  419d5a:	45a0      	cmp	r8, r4
  419d5c:	d010      	beq.n	419d80 <__sprint_r.part.0+0x50>
  419d5e:	4632      	mov	r2, r6
  419d60:	f855 1f04 	ldr.w	r1, [r5, #4]!
  419d64:	4638      	mov	r0, r7
  419d66:	f001 f8bb 	bl	41aee0 <_fputwc_r>
  419d6a:	1c43      	adds	r3, r0, #1
  419d6c:	f104 0401 	add.w	r4, r4, #1
  419d70:	d1f3      	bne.n	419d5a <__sprint_r.part.0+0x2a>
  419d72:	2300      	movs	r3, #0
  419d74:	f8cb 3008 	str.w	r3, [fp, #8]
  419d78:	f8cb 3004 	str.w	r3, [fp, #4]
  419d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419d80:	f8db 3008 	ldr.w	r3, [fp, #8]
  419d84:	f02a 0a03 	bic.w	sl, sl, #3
  419d88:	eba3 030a 	sub.w	r3, r3, sl
  419d8c:	f8cb 3008 	str.w	r3, [fp, #8]
  419d90:	f109 0908 	add.w	r9, r9, #8
  419d94:	2b00      	cmp	r3, #0
  419d96:	d1d8      	bne.n	419d4a <__sprint_r.part.0+0x1a>
  419d98:	2000      	movs	r0, #0
  419d9a:	e7ea      	b.n	419d72 <__sprint_r.part.0+0x42>
  419d9c:	f001 fa0a 	bl	41b1b4 <__sfvwrite_r>
  419da0:	2300      	movs	r3, #0
  419da2:	f8cb 3008 	str.w	r3, [fp, #8]
  419da6:	f8cb 3004 	str.w	r3, [fp, #4]
  419daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419dae:	bf00      	nop

00419db0 <_vfiprintf_r>:
  419db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  419db4:	b0ad      	sub	sp, #180	; 0xb4
  419db6:	461d      	mov	r5, r3
  419db8:	468b      	mov	fp, r1
  419dba:	4690      	mov	r8, r2
  419dbc:	9307      	str	r3, [sp, #28]
  419dbe:	9006      	str	r0, [sp, #24]
  419dc0:	b118      	cbz	r0, 419dca <_vfiprintf_r+0x1a>
  419dc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  419dc4:	2b00      	cmp	r3, #0
  419dc6:	f000 80f3 	beq.w	419fb0 <_vfiprintf_r+0x200>
  419dca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  419dce:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  419dd2:	07df      	lsls	r7, r3, #31
  419dd4:	b281      	uxth	r1, r0
  419dd6:	d402      	bmi.n	419dde <_vfiprintf_r+0x2e>
  419dd8:	058e      	lsls	r6, r1, #22
  419dda:	f140 80fc 	bpl.w	419fd6 <_vfiprintf_r+0x226>
  419dde:	048c      	lsls	r4, r1, #18
  419de0:	d40a      	bmi.n	419df8 <_vfiprintf_r+0x48>
  419de2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  419de6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  419dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  419dee:	f8ab 100c 	strh.w	r1, [fp, #12]
  419df2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  419df6:	b289      	uxth	r1, r1
  419df8:	0708      	lsls	r0, r1, #28
  419dfa:	f140 80b3 	bpl.w	419f64 <_vfiprintf_r+0x1b4>
  419dfe:	f8db 3010 	ldr.w	r3, [fp, #16]
  419e02:	2b00      	cmp	r3, #0
  419e04:	f000 80ae 	beq.w	419f64 <_vfiprintf_r+0x1b4>
  419e08:	f001 031a 	and.w	r3, r1, #26
  419e0c:	2b0a      	cmp	r3, #10
  419e0e:	f000 80b5 	beq.w	419f7c <_vfiprintf_r+0x1cc>
  419e12:	2300      	movs	r3, #0
  419e14:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  419e18:	930b      	str	r3, [sp, #44]	; 0x2c
  419e1a:	9311      	str	r3, [sp, #68]	; 0x44
  419e1c:	9310      	str	r3, [sp, #64]	; 0x40
  419e1e:	9303      	str	r3, [sp, #12]
  419e20:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  419e24:	46ca      	mov	sl, r9
  419e26:	f8cd b010 	str.w	fp, [sp, #16]
  419e2a:	f898 3000 	ldrb.w	r3, [r8]
  419e2e:	4644      	mov	r4, r8
  419e30:	b1fb      	cbz	r3, 419e72 <_vfiprintf_r+0xc2>
  419e32:	2b25      	cmp	r3, #37	; 0x25
  419e34:	d102      	bne.n	419e3c <_vfiprintf_r+0x8c>
  419e36:	e01c      	b.n	419e72 <_vfiprintf_r+0xc2>
  419e38:	2b25      	cmp	r3, #37	; 0x25
  419e3a:	d003      	beq.n	419e44 <_vfiprintf_r+0x94>
  419e3c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  419e40:	2b00      	cmp	r3, #0
  419e42:	d1f9      	bne.n	419e38 <_vfiprintf_r+0x88>
  419e44:	eba4 0508 	sub.w	r5, r4, r8
  419e48:	b19d      	cbz	r5, 419e72 <_vfiprintf_r+0xc2>
  419e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  419e4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  419e4e:	f8ca 8000 	str.w	r8, [sl]
  419e52:	3301      	adds	r3, #1
  419e54:	442a      	add	r2, r5
  419e56:	2b07      	cmp	r3, #7
  419e58:	f8ca 5004 	str.w	r5, [sl, #4]
  419e5c:	9211      	str	r2, [sp, #68]	; 0x44
  419e5e:	9310      	str	r3, [sp, #64]	; 0x40
  419e60:	dd7a      	ble.n	419f58 <_vfiprintf_r+0x1a8>
  419e62:	2a00      	cmp	r2, #0
  419e64:	f040 84b0 	bne.w	41a7c8 <_vfiprintf_r+0xa18>
  419e68:	9b03      	ldr	r3, [sp, #12]
  419e6a:	9210      	str	r2, [sp, #64]	; 0x40
  419e6c:	442b      	add	r3, r5
  419e6e:	46ca      	mov	sl, r9
  419e70:	9303      	str	r3, [sp, #12]
  419e72:	7823      	ldrb	r3, [r4, #0]
  419e74:	2b00      	cmp	r3, #0
  419e76:	f000 83e0 	beq.w	41a63a <_vfiprintf_r+0x88a>
  419e7a:	2000      	movs	r0, #0
  419e7c:	f04f 0300 	mov.w	r3, #0
  419e80:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  419e84:	f104 0801 	add.w	r8, r4, #1
  419e88:	7862      	ldrb	r2, [r4, #1]
  419e8a:	4605      	mov	r5, r0
  419e8c:	4606      	mov	r6, r0
  419e8e:	4603      	mov	r3, r0
  419e90:	f04f 34ff 	mov.w	r4, #4294967295
  419e94:	f108 0801 	add.w	r8, r8, #1
  419e98:	f1a2 0120 	sub.w	r1, r2, #32
  419e9c:	2958      	cmp	r1, #88	; 0x58
  419e9e:	f200 82de 	bhi.w	41a45e <_vfiprintf_r+0x6ae>
  419ea2:	e8df f011 	tbh	[pc, r1, lsl #1]
  419ea6:	0221      	.short	0x0221
  419ea8:	02dc02dc 	.word	0x02dc02dc
  419eac:	02dc0229 	.word	0x02dc0229
  419eb0:	02dc02dc 	.word	0x02dc02dc
  419eb4:	02dc02dc 	.word	0x02dc02dc
  419eb8:	028902dc 	.word	0x028902dc
  419ebc:	02dc0295 	.word	0x02dc0295
  419ec0:	02bd00a2 	.word	0x02bd00a2
  419ec4:	019f02dc 	.word	0x019f02dc
  419ec8:	01a401a4 	.word	0x01a401a4
  419ecc:	01a401a4 	.word	0x01a401a4
  419ed0:	01a401a4 	.word	0x01a401a4
  419ed4:	01a401a4 	.word	0x01a401a4
  419ed8:	02dc01a4 	.word	0x02dc01a4
  419edc:	02dc02dc 	.word	0x02dc02dc
  419ee0:	02dc02dc 	.word	0x02dc02dc
  419ee4:	02dc02dc 	.word	0x02dc02dc
  419ee8:	02dc02dc 	.word	0x02dc02dc
  419eec:	01b202dc 	.word	0x01b202dc
  419ef0:	02dc02dc 	.word	0x02dc02dc
  419ef4:	02dc02dc 	.word	0x02dc02dc
  419ef8:	02dc02dc 	.word	0x02dc02dc
  419efc:	02dc02dc 	.word	0x02dc02dc
  419f00:	02dc02dc 	.word	0x02dc02dc
  419f04:	02dc0197 	.word	0x02dc0197
  419f08:	02dc02dc 	.word	0x02dc02dc
  419f0c:	02dc02dc 	.word	0x02dc02dc
  419f10:	02dc019b 	.word	0x02dc019b
  419f14:	025302dc 	.word	0x025302dc
  419f18:	02dc02dc 	.word	0x02dc02dc
  419f1c:	02dc02dc 	.word	0x02dc02dc
  419f20:	02dc02dc 	.word	0x02dc02dc
  419f24:	02dc02dc 	.word	0x02dc02dc
  419f28:	02dc02dc 	.word	0x02dc02dc
  419f2c:	021b025a 	.word	0x021b025a
  419f30:	02dc02dc 	.word	0x02dc02dc
  419f34:	026e02dc 	.word	0x026e02dc
  419f38:	02dc021b 	.word	0x02dc021b
  419f3c:	027302dc 	.word	0x027302dc
  419f40:	01f502dc 	.word	0x01f502dc
  419f44:	02090182 	.word	0x02090182
  419f48:	02dc02d7 	.word	0x02dc02d7
  419f4c:	02dc029a 	.word	0x02dc029a
  419f50:	02dc00a7 	.word	0x02dc00a7
  419f54:	022e02dc 	.word	0x022e02dc
  419f58:	f10a 0a08 	add.w	sl, sl, #8
  419f5c:	9b03      	ldr	r3, [sp, #12]
  419f5e:	442b      	add	r3, r5
  419f60:	9303      	str	r3, [sp, #12]
  419f62:	e786      	b.n	419e72 <_vfiprintf_r+0xc2>
  419f64:	4659      	mov	r1, fp
  419f66:	9806      	ldr	r0, [sp, #24]
  419f68:	f000 fdac 	bl	41aac4 <__swsetup_r>
  419f6c:	bb18      	cbnz	r0, 419fb6 <_vfiprintf_r+0x206>
  419f6e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  419f72:	f001 031a 	and.w	r3, r1, #26
  419f76:	2b0a      	cmp	r3, #10
  419f78:	f47f af4b 	bne.w	419e12 <_vfiprintf_r+0x62>
  419f7c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  419f80:	2b00      	cmp	r3, #0
  419f82:	f6ff af46 	blt.w	419e12 <_vfiprintf_r+0x62>
  419f86:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  419f8a:	07db      	lsls	r3, r3, #31
  419f8c:	d405      	bmi.n	419f9a <_vfiprintf_r+0x1ea>
  419f8e:	058f      	lsls	r7, r1, #22
  419f90:	d403      	bmi.n	419f9a <_vfiprintf_r+0x1ea>
  419f92:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  419f96:	f001 fac7 	bl	41b528 <__retarget_lock_release_recursive>
  419f9a:	462b      	mov	r3, r5
  419f9c:	4642      	mov	r2, r8
  419f9e:	4659      	mov	r1, fp
  419fa0:	9806      	ldr	r0, [sp, #24]
  419fa2:	f000 fd4d 	bl	41aa40 <__sbprintf>
  419fa6:	9003      	str	r0, [sp, #12]
  419fa8:	9803      	ldr	r0, [sp, #12]
  419faa:	b02d      	add	sp, #180	; 0xb4
  419fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419fb0:	f000 fef4 	bl	41ad9c <__sinit>
  419fb4:	e709      	b.n	419dca <_vfiprintf_r+0x1a>
  419fb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  419fba:	07d9      	lsls	r1, r3, #31
  419fbc:	d404      	bmi.n	419fc8 <_vfiprintf_r+0x218>
  419fbe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  419fc2:	059a      	lsls	r2, r3, #22
  419fc4:	f140 84aa 	bpl.w	41a91c <_vfiprintf_r+0xb6c>
  419fc8:	f04f 33ff 	mov.w	r3, #4294967295
  419fcc:	9303      	str	r3, [sp, #12]
  419fce:	9803      	ldr	r0, [sp, #12]
  419fd0:	b02d      	add	sp, #180	; 0xb4
  419fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  419fd6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  419fda:	f001 faa3 	bl	41b524 <__retarget_lock_acquire_recursive>
  419fde:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  419fe2:	b281      	uxth	r1, r0
  419fe4:	e6fb      	b.n	419dde <_vfiprintf_r+0x2e>
  419fe6:	4276      	negs	r6, r6
  419fe8:	9207      	str	r2, [sp, #28]
  419fea:	f043 0304 	orr.w	r3, r3, #4
  419fee:	f898 2000 	ldrb.w	r2, [r8]
  419ff2:	e74f      	b.n	419e94 <_vfiprintf_r+0xe4>
  419ff4:	9608      	str	r6, [sp, #32]
  419ff6:	069e      	lsls	r6, r3, #26
  419ff8:	f100 8450 	bmi.w	41a89c <_vfiprintf_r+0xaec>
  419ffc:	9907      	ldr	r1, [sp, #28]
  419ffe:	06dd      	lsls	r5, r3, #27
  41a000:	460a      	mov	r2, r1
  41a002:	f100 83ef 	bmi.w	41a7e4 <_vfiprintf_r+0xa34>
  41a006:	0658      	lsls	r0, r3, #25
  41a008:	f140 83ec 	bpl.w	41a7e4 <_vfiprintf_r+0xa34>
  41a00c:	880e      	ldrh	r6, [r1, #0]
  41a00e:	3104      	adds	r1, #4
  41a010:	2700      	movs	r7, #0
  41a012:	2201      	movs	r2, #1
  41a014:	9107      	str	r1, [sp, #28]
  41a016:	f04f 0100 	mov.w	r1, #0
  41a01a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  41a01e:	2500      	movs	r5, #0
  41a020:	1c61      	adds	r1, r4, #1
  41a022:	f000 8116 	beq.w	41a252 <_vfiprintf_r+0x4a2>
  41a026:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  41a02a:	9102      	str	r1, [sp, #8]
  41a02c:	ea56 0107 	orrs.w	r1, r6, r7
  41a030:	f040 8114 	bne.w	41a25c <_vfiprintf_r+0x4ac>
  41a034:	2c00      	cmp	r4, #0
  41a036:	f040 835c 	bne.w	41a6f2 <_vfiprintf_r+0x942>
  41a03a:	2a00      	cmp	r2, #0
  41a03c:	f040 83b7 	bne.w	41a7ae <_vfiprintf_r+0x9fe>
  41a040:	f013 0301 	ands.w	r3, r3, #1
  41a044:	9305      	str	r3, [sp, #20]
  41a046:	f000 8457 	beq.w	41a8f8 <_vfiprintf_r+0xb48>
  41a04a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  41a04e:	2330      	movs	r3, #48	; 0x30
  41a050:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  41a054:	9b05      	ldr	r3, [sp, #20]
  41a056:	42a3      	cmp	r3, r4
  41a058:	bfb8      	it	lt
  41a05a:	4623      	movlt	r3, r4
  41a05c:	9301      	str	r3, [sp, #4]
  41a05e:	b10d      	cbz	r5, 41a064 <_vfiprintf_r+0x2b4>
  41a060:	3301      	adds	r3, #1
  41a062:	9301      	str	r3, [sp, #4]
  41a064:	9b02      	ldr	r3, [sp, #8]
  41a066:	f013 0302 	ands.w	r3, r3, #2
  41a06a:	9309      	str	r3, [sp, #36]	; 0x24
  41a06c:	d002      	beq.n	41a074 <_vfiprintf_r+0x2c4>
  41a06e:	9b01      	ldr	r3, [sp, #4]
  41a070:	3302      	adds	r3, #2
  41a072:	9301      	str	r3, [sp, #4]
  41a074:	9b02      	ldr	r3, [sp, #8]
  41a076:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  41a07a:	930a      	str	r3, [sp, #40]	; 0x28
  41a07c:	f040 8217 	bne.w	41a4ae <_vfiprintf_r+0x6fe>
  41a080:	9b08      	ldr	r3, [sp, #32]
  41a082:	9a01      	ldr	r2, [sp, #4]
  41a084:	1a9d      	subs	r5, r3, r2
  41a086:	2d00      	cmp	r5, #0
  41a088:	f340 8211 	ble.w	41a4ae <_vfiprintf_r+0x6fe>
  41a08c:	2d10      	cmp	r5, #16
  41a08e:	f340 8490 	ble.w	41a9b2 <_vfiprintf_r+0xc02>
  41a092:	9b10      	ldr	r3, [sp, #64]	; 0x40
  41a094:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a096:	4ec4      	ldr	r6, [pc, #784]	; (41a3a8 <_vfiprintf_r+0x5f8>)
  41a098:	46d6      	mov	lr, sl
  41a09a:	2710      	movs	r7, #16
  41a09c:	46a2      	mov	sl, r4
  41a09e:	4619      	mov	r1, r3
  41a0a0:	9c06      	ldr	r4, [sp, #24]
  41a0a2:	e007      	b.n	41a0b4 <_vfiprintf_r+0x304>
  41a0a4:	f101 0c02 	add.w	ip, r1, #2
  41a0a8:	f10e 0e08 	add.w	lr, lr, #8
  41a0ac:	4601      	mov	r1, r0
  41a0ae:	3d10      	subs	r5, #16
  41a0b0:	2d10      	cmp	r5, #16
  41a0b2:	dd11      	ble.n	41a0d8 <_vfiprintf_r+0x328>
  41a0b4:	1c48      	adds	r0, r1, #1
  41a0b6:	3210      	adds	r2, #16
  41a0b8:	2807      	cmp	r0, #7
  41a0ba:	9211      	str	r2, [sp, #68]	; 0x44
  41a0bc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  41a0c0:	9010      	str	r0, [sp, #64]	; 0x40
  41a0c2:	ddef      	ble.n	41a0a4 <_vfiprintf_r+0x2f4>
  41a0c4:	2a00      	cmp	r2, #0
  41a0c6:	f040 81e4 	bne.w	41a492 <_vfiprintf_r+0x6e2>
  41a0ca:	3d10      	subs	r5, #16
  41a0cc:	2d10      	cmp	r5, #16
  41a0ce:	4611      	mov	r1, r2
  41a0d0:	f04f 0c01 	mov.w	ip, #1
  41a0d4:	46ce      	mov	lr, r9
  41a0d6:	dced      	bgt.n	41a0b4 <_vfiprintf_r+0x304>
  41a0d8:	4654      	mov	r4, sl
  41a0da:	4661      	mov	r1, ip
  41a0dc:	46f2      	mov	sl, lr
  41a0de:	442a      	add	r2, r5
  41a0e0:	2907      	cmp	r1, #7
  41a0e2:	9211      	str	r2, [sp, #68]	; 0x44
  41a0e4:	f8ca 6000 	str.w	r6, [sl]
  41a0e8:	f8ca 5004 	str.w	r5, [sl, #4]
  41a0ec:	9110      	str	r1, [sp, #64]	; 0x40
  41a0ee:	f300 82ec 	bgt.w	41a6ca <_vfiprintf_r+0x91a>
  41a0f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41a0f6:	f10a 0a08 	add.w	sl, sl, #8
  41a0fa:	1c48      	adds	r0, r1, #1
  41a0fc:	2d00      	cmp	r5, #0
  41a0fe:	f040 81de 	bne.w	41a4be <_vfiprintf_r+0x70e>
  41a102:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41a104:	2b00      	cmp	r3, #0
  41a106:	f000 81f8 	beq.w	41a4fa <_vfiprintf_r+0x74a>
  41a10a:	3202      	adds	r2, #2
  41a10c:	a90e      	add	r1, sp, #56	; 0x38
  41a10e:	2302      	movs	r3, #2
  41a110:	2807      	cmp	r0, #7
  41a112:	9211      	str	r2, [sp, #68]	; 0x44
  41a114:	9010      	str	r0, [sp, #64]	; 0x40
  41a116:	e88a 000a 	stmia.w	sl, {r1, r3}
  41a11a:	f340 81ea 	ble.w	41a4f2 <_vfiprintf_r+0x742>
  41a11e:	2a00      	cmp	r2, #0
  41a120:	f040 838c 	bne.w	41a83c <_vfiprintf_r+0xa8c>
  41a124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41a126:	2b80      	cmp	r3, #128	; 0x80
  41a128:	f04f 0001 	mov.w	r0, #1
  41a12c:	4611      	mov	r1, r2
  41a12e:	46ca      	mov	sl, r9
  41a130:	f040 81e7 	bne.w	41a502 <_vfiprintf_r+0x752>
  41a134:	9b08      	ldr	r3, [sp, #32]
  41a136:	9d01      	ldr	r5, [sp, #4]
  41a138:	1b5e      	subs	r6, r3, r5
  41a13a:	2e00      	cmp	r6, #0
  41a13c:	f340 81e1 	ble.w	41a502 <_vfiprintf_r+0x752>
  41a140:	2e10      	cmp	r6, #16
  41a142:	4d9a      	ldr	r5, [pc, #616]	; (41a3ac <_vfiprintf_r+0x5fc>)
  41a144:	f340 8450 	ble.w	41a9e8 <_vfiprintf_r+0xc38>
  41a148:	46d4      	mov	ip, sl
  41a14a:	2710      	movs	r7, #16
  41a14c:	46a2      	mov	sl, r4
  41a14e:	9c06      	ldr	r4, [sp, #24]
  41a150:	e007      	b.n	41a162 <_vfiprintf_r+0x3b2>
  41a152:	f101 0e02 	add.w	lr, r1, #2
  41a156:	f10c 0c08 	add.w	ip, ip, #8
  41a15a:	4601      	mov	r1, r0
  41a15c:	3e10      	subs	r6, #16
  41a15e:	2e10      	cmp	r6, #16
  41a160:	dd11      	ble.n	41a186 <_vfiprintf_r+0x3d6>
  41a162:	1c48      	adds	r0, r1, #1
  41a164:	3210      	adds	r2, #16
  41a166:	2807      	cmp	r0, #7
  41a168:	9211      	str	r2, [sp, #68]	; 0x44
  41a16a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  41a16e:	9010      	str	r0, [sp, #64]	; 0x40
  41a170:	ddef      	ble.n	41a152 <_vfiprintf_r+0x3a2>
  41a172:	2a00      	cmp	r2, #0
  41a174:	f040 829d 	bne.w	41a6b2 <_vfiprintf_r+0x902>
  41a178:	3e10      	subs	r6, #16
  41a17a:	2e10      	cmp	r6, #16
  41a17c:	f04f 0e01 	mov.w	lr, #1
  41a180:	4611      	mov	r1, r2
  41a182:	46cc      	mov	ip, r9
  41a184:	dced      	bgt.n	41a162 <_vfiprintf_r+0x3b2>
  41a186:	4654      	mov	r4, sl
  41a188:	46e2      	mov	sl, ip
  41a18a:	4432      	add	r2, r6
  41a18c:	f1be 0f07 	cmp.w	lr, #7
  41a190:	9211      	str	r2, [sp, #68]	; 0x44
  41a192:	e88a 0060 	stmia.w	sl, {r5, r6}
  41a196:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  41a19a:	f300 8369 	bgt.w	41a870 <_vfiprintf_r+0xac0>
  41a19e:	f10a 0a08 	add.w	sl, sl, #8
  41a1a2:	f10e 0001 	add.w	r0, lr, #1
  41a1a6:	4671      	mov	r1, lr
  41a1a8:	e1ab      	b.n	41a502 <_vfiprintf_r+0x752>
  41a1aa:	9608      	str	r6, [sp, #32]
  41a1ac:	f013 0220 	ands.w	r2, r3, #32
  41a1b0:	f040 838c 	bne.w	41a8cc <_vfiprintf_r+0xb1c>
  41a1b4:	f013 0110 	ands.w	r1, r3, #16
  41a1b8:	f040 831a 	bne.w	41a7f0 <_vfiprintf_r+0xa40>
  41a1bc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  41a1c0:	f000 8316 	beq.w	41a7f0 <_vfiprintf_r+0xa40>
  41a1c4:	9807      	ldr	r0, [sp, #28]
  41a1c6:	460a      	mov	r2, r1
  41a1c8:	4601      	mov	r1, r0
  41a1ca:	3104      	adds	r1, #4
  41a1cc:	8806      	ldrh	r6, [r0, #0]
  41a1ce:	9107      	str	r1, [sp, #28]
  41a1d0:	2700      	movs	r7, #0
  41a1d2:	e720      	b.n	41a016 <_vfiprintf_r+0x266>
  41a1d4:	9608      	str	r6, [sp, #32]
  41a1d6:	f043 0310 	orr.w	r3, r3, #16
  41a1da:	e7e7      	b.n	41a1ac <_vfiprintf_r+0x3fc>
  41a1dc:	9608      	str	r6, [sp, #32]
  41a1de:	f043 0310 	orr.w	r3, r3, #16
  41a1e2:	e708      	b.n	419ff6 <_vfiprintf_r+0x246>
  41a1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41a1e8:	f898 2000 	ldrb.w	r2, [r8]
  41a1ec:	e652      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a1ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41a1f2:	2600      	movs	r6, #0
  41a1f4:	f818 2b01 	ldrb.w	r2, [r8], #1
  41a1f8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  41a1fc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  41a200:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41a204:	2909      	cmp	r1, #9
  41a206:	d9f5      	bls.n	41a1f4 <_vfiprintf_r+0x444>
  41a208:	e646      	b.n	419e98 <_vfiprintf_r+0xe8>
  41a20a:	9608      	str	r6, [sp, #32]
  41a20c:	2800      	cmp	r0, #0
  41a20e:	f040 8408 	bne.w	41aa22 <_vfiprintf_r+0xc72>
  41a212:	f043 0310 	orr.w	r3, r3, #16
  41a216:	069e      	lsls	r6, r3, #26
  41a218:	f100 834c 	bmi.w	41a8b4 <_vfiprintf_r+0xb04>
  41a21c:	06dd      	lsls	r5, r3, #27
  41a21e:	f100 82f3 	bmi.w	41a808 <_vfiprintf_r+0xa58>
  41a222:	0658      	lsls	r0, r3, #25
  41a224:	f140 82f0 	bpl.w	41a808 <_vfiprintf_r+0xa58>
  41a228:	9d07      	ldr	r5, [sp, #28]
  41a22a:	f9b5 6000 	ldrsh.w	r6, [r5]
  41a22e:	462a      	mov	r2, r5
  41a230:	17f7      	asrs	r7, r6, #31
  41a232:	3204      	adds	r2, #4
  41a234:	4630      	mov	r0, r6
  41a236:	4639      	mov	r1, r7
  41a238:	9207      	str	r2, [sp, #28]
  41a23a:	2800      	cmp	r0, #0
  41a23c:	f171 0200 	sbcs.w	r2, r1, #0
  41a240:	f2c0 835d 	blt.w	41a8fe <_vfiprintf_r+0xb4e>
  41a244:	1c61      	adds	r1, r4, #1
  41a246:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41a24a:	f04f 0201 	mov.w	r2, #1
  41a24e:	f47f aeea 	bne.w	41a026 <_vfiprintf_r+0x276>
  41a252:	ea56 0107 	orrs.w	r1, r6, r7
  41a256:	f000 824d 	beq.w	41a6f4 <_vfiprintf_r+0x944>
  41a25a:	9302      	str	r3, [sp, #8]
  41a25c:	2a01      	cmp	r2, #1
  41a25e:	f000 828c 	beq.w	41a77a <_vfiprintf_r+0x9ca>
  41a262:	2a02      	cmp	r2, #2
  41a264:	f040 825c 	bne.w	41a720 <_vfiprintf_r+0x970>
  41a268:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41a26a:	46cb      	mov	fp, r9
  41a26c:	0933      	lsrs	r3, r6, #4
  41a26e:	f006 010f 	and.w	r1, r6, #15
  41a272:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  41a276:	093a      	lsrs	r2, r7, #4
  41a278:	461e      	mov	r6, r3
  41a27a:	4617      	mov	r7, r2
  41a27c:	5c43      	ldrb	r3, [r0, r1]
  41a27e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  41a282:	ea56 0307 	orrs.w	r3, r6, r7
  41a286:	d1f1      	bne.n	41a26c <_vfiprintf_r+0x4bc>
  41a288:	eba9 030b 	sub.w	r3, r9, fp
  41a28c:	9305      	str	r3, [sp, #20]
  41a28e:	e6e1      	b.n	41a054 <_vfiprintf_r+0x2a4>
  41a290:	2800      	cmp	r0, #0
  41a292:	f040 83c0 	bne.w	41aa16 <_vfiprintf_r+0xc66>
  41a296:	0699      	lsls	r1, r3, #26
  41a298:	f100 8367 	bmi.w	41a96a <_vfiprintf_r+0xbba>
  41a29c:	06da      	lsls	r2, r3, #27
  41a29e:	f100 80f1 	bmi.w	41a484 <_vfiprintf_r+0x6d4>
  41a2a2:	065b      	lsls	r3, r3, #25
  41a2a4:	f140 80ee 	bpl.w	41a484 <_vfiprintf_r+0x6d4>
  41a2a8:	9a07      	ldr	r2, [sp, #28]
  41a2aa:	6813      	ldr	r3, [r2, #0]
  41a2ac:	3204      	adds	r2, #4
  41a2ae:	9207      	str	r2, [sp, #28]
  41a2b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  41a2b4:	801a      	strh	r2, [r3, #0]
  41a2b6:	e5b8      	b.n	419e2a <_vfiprintf_r+0x7a>
  41a2b8:	9807      	ldr	r0, [sp, #28]
  41a2ba:	4a3d      	ldr	r2, [pc, #244]	; (41a3b0 <_vfiprintf_r+0x600>)
  41a2bc:	9608      	str	r6, [sp, #32]
  41a2be:	920b      	str	r2, [sp, #44]	; 0x2c
  41a2c0:	6806      	ldr	r6, [r0, #0]
  41a2c2:	2278      	movs	r2, #120	; 0x78
  41a2c4:	2130      	movs	r1, #48	; 0x30
  41a2c6:	3004      	adds	r0, #4
  41a2c8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  41a2cc:	f043 0302 	orr.w	r3, r3, #2
  41a2d0:	9007      	str	r0, [sp, #28]
  41a2d2:	2700      	movs	r7, #0
  41a2d4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  41a2d8:	2202      	movs	r2, #2
  41a2da:	e69c      	b.n	41a016 <_vfiprintf_r+0x266>
  41a2dc:	9608      	str	r6, [sp, #32]
  41a2de:	2800      	cmp	r0, #0
  41a2e0:	d099      	beq.n	41a216 <_vfiprintf_r+0x466>
  41a2e2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41a2e6:	e796      	b.n	41a216 <_vfiprintf_r+0x466>
  41a2e8:	f898 2000 	ldrb.w	r2, [r8]
  41a2ec:	2d00      	cmp	r5, #0
  41a2ee:	f47f add1 	bne.w	419e94 <_vfiprintf_r+0xe4>
  41a2f2:	2001      	movs	r0, #1
  41a2f4:	2520      	movs	r5, #32
  41a2f6:	e5cd      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a2f8:	f043 0301 	orr.w	r3, r3, #1
  41a2fc:	f898 2000 	ldrb.w	r2, [r8]
  41a300:	e5c8      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a302:	9608      	str	r6, [sp, #32]
  41a304:	2800      	cmp	r0, #0
  41a306:	f040 8393 	bne.w	41aa30 <_vfiprintf_r+0xc80>
  41a30a:	4929      	ldr	r1, [pc, #164]	; (41a3b0 <_vfiprintf_r+0x600>)
  41a30c:	910b      	str	r1, [sp, #44]	; 0x2c
  41a30e:	069f      	lsls	r7, r3, #26
  41a310:	f100 82e8 	bmi.w	41a8e4 <_vfiprintf_r+0xb34>
  41a314:	9807      	ldr	r0, [sp, #28]
  41a316:	06de      	lsls	r6, r3, #27
  41a318:	4601      	mov	r1, r0
  41a31a:	f100 8270 	bmi.w	41a7fe <_vfiprintf_r+0xa4e>
  41a31e:	065d      	lsls	r5, r3, #25
  41a320:	f140 826d 	bpl.w	41a7fe <_vfiprintf_r+0xa4e>
  41a324:	3104      	adds	r1, #4
  41a326:	8806      	ldrh	r6, [r0, #0]
  41a328:	9107      	str	r1, [sp, #28]
  41a32a:	2700      	movs	r7, #0
  41a32c:	07d8      	lsls	r0, r3, #31
  41a32e:	f140 8222 	bpl.w	41a776 <_vfiprintf_r+0x9c6>
  41a332:	ea56 0107 	orrs.w	r1, r6, r7
  41a336:	f000 821e 	beq.w	41a776 <_vfiprintf_r+0x9c6>
  41a33a:	2130      	movs	r1, #48	; 0x30
  41a33c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  41a340:	f043 0302 	orr.w	r3, r3, #2
  41a344:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  41a348:	2202      	movs	r2, #2
  41a34a:	e664      	b.n	41a016 <_vfiprintf_r+0x266>
  41a34c:	9608      	str	r6, [sp, #32]
  41a34e:	2800      	cmp	r0, #0
  41a350:	f040 836b 	bne.w	41aa2a <_vfiprintf_r+0xc7a>
  41a354:	4917      	ldr	r1, [pc, #92]	; (41a3b4 <_vfiprintf_r+0x604>)
  41a356:	910b      	str	r1, [sp, #44]	; 0x2c
  41a358:	e7d9      	b.n	41a30e <_vfiprintf_r+0x55e>
  41a35a:	9907      	ldr	r1, [sp, #28]
  41a35c:	9608      	str	r6, [sp, #32]
  41a35e:	680a      	ldr	r2, [r1, #0]
  41a360:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  41a364:	f04f 0000 	mov.w	r0, #0
  41a368:	460a      	mov	r2, r1
  41a36a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  41a36e:	3204      	adds	r2, #4
  41a370:	2001      	movs	r0, #1
  41a372:	9001      	str	r0, [sp, #4]
  41a374:	9207      	str	r2, [sp, #28]
  41a376:	9005      	str	r0, [sp, #20]
  41a378:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  41a37c:	9302      	str	r3, [sp, #8]
  41a37e:	2400      	movs	r4, #0
  41a380:	e670      	b.n	41a064 <_vfiprintf_r+0x2b4>
  41a382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41a386:	f898 2000 	ldrb.w	r2, [r8]
  41a38a:	e583      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a38c:	f898 2000 	ldrb.w	r2, [r8]
  41a390:	2a6c      	cmp	r2, #108	; 0x6c
  41a392:	bf03      	ittte	eq
  41a394:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  41a398:	f043 0320 	orreq.w	r3, r3, #32
  41a39c:	f108 0801 	addeq.w	r8, r8, #1
  41a3a0:	f043 0310 	orrne.w	r3, r3, #16
  41a3a4:	e576      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a3a6:	bf00      	nop
  41a3a8:	00422ed0 	.word	0x00422ed0
  41a3ac:	00422ee0 	.word	0x00422ee0
  41a3b0:	00422eb4 	.word	0x00422eb4
  41a3b4:	00422ea0 	.word	0x00422ea0
  41a3b8:	9907      	ldr	r1, [sp, #28]
  41a3ba:	680e      	ldr	r6, [r1, #0]
  41a3bc:	460a      	mov	r2, r1
  41a3be:	2e00      	cmp	r6, #0
  41a3c0:	f102 0204 	add.w	r2, r2, #4
  41a3c4:	f6ff ae0f 	blt.w	419fe6 <_vfiprintf_r+0x236>
  41a3c8:	9207      	str	r2, [sp, #28]
  41a3ca:	f898 2000 	ldrb.w	r2, [r8]
  41a3ce:	e561      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a3d0:	f898 2000 	ldrb.w	r2, [r8]
  41a3d4:	2001      	movs	r0, #1
  41a3d6:	252b      	movs	r5, #43	; 0x2b
  41a3d8:	e55c      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a3da:	9907      	ldr	r1, [sp, #28]
  41a3dc:	9608      	str	r6, [sp, #32]
  41a3de:	f8d1 b000 	ldr.w	fp, [r1]
  41a3e2:	f04f 0200 	mov.w	r2, #0
  41a3e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  41a3ea:	1d0e      	adds	r6, r1, #4
  41a3ec:	f1bb 0f00 	cmp.w	fp, #0
  41a3f0:	f000 82e5 	beq.w	41a9be <_vfiprintf_r+0xc0e>
  41a3f4:	1c67      	adds	r7, r4, #1
  41a3f6:	f000 82c4 	beq.w	41a982 <_vfiprintf_r+0xbd2>
  41a3fa:	4622      	mov	r2, r4
  41a3fc:	2100      	movs	r1, #0
  41a3fe:	4658      	mov	r0, fp
  41a400:	9301      	str	r3, [sp, #4]
  41a402:	f001 f925 	bl	41b650 <memchr>
  41a406:	9b01      	ldr	r3, [sp, #4]
  41a408:	2800      	cmp	r0, #0
  41a40a:	f000 82e5 	beq.w	41a9d8 <_vfiprintf_r+0xc28>
  41a40e:	eba0 020b 	sub.w	r2, r0, fp
  41a412:	9205      	str	r2, [sp, #20]
  41a414:	9607      	str	r6, [sp, #28]
  41a416:	9302      	str	r3, [sp, #8]
  41a418:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41a41c:	2400      	movs	r4, #0
  41a41e:	e619      	b.n	41a054 <_vfiprintf_r+0x2a4>
  41a420:	f898 2000 	ldrb.w	r2, [r8]
  41a424:	2a2a      	cmp	r2, #42	; 0x2a
  41a426:	f108 0701 	add.w	r7, r8, #1
  41a42a:	f000 82e9 	beq.w	41aa00 <_vfiprintf_r+0xc50>
  41a42e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41a432:	2909      	cmp	r1, #9
  41a434:	46b8      	mov	r8, r7
  41a436:	f04f 0400 	mov.w	r4, #0
  41a43a:	f63f ad2d 	bhi.w	419e98 <_vfiprintf_r+0xe8>
  41a43e:	f818 2b01 	ldrb.w	r2, [r8], #1
  41a442:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  41a446:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  41a44a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  41a44e:	2909      	cmp	r1, #9
  41a450:	d9f5      	bls.n	41a43e <_vfiprintf_r+0x68e>
  41a452:	e521      	b.n	419e98 <_vfiprintf_r+0xe8>
  41a454:	f043 0320 	orr.w	r3, r3, #32
  41a458:	f898 2000 	ldrb.w	r2, [r8]
  41a45c:	e51a      	b.n	419e94 <_vfiprintf_r+0xe4>
  41a45e:	9608      	str	r6, [sp, #32]
  41a460:	2800      	cmp	r0, #0
  41a462:	f040 82db 	bne.w	41aa1c <_vfiprintf_r+0xc6c>
  41a466:	2a00      	cmp	r2, #0
  41a468:	f000 80e7 	beq.w	41a63a <_vfiprintf_r+0x88a>
  41a46c:	2101      	movs	r1, #1
  41a46e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  41a472:	f04f 0200 	mov.w	r2, #0
  41a476:	9101      	str	r1, [sp, #4]
  41a478:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  41a47c:	9105      	str	r1, [sp, #20]
  41a47e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  41a482:	e77b      	b.n	41a37c <_vfiprintf_r+0x5cc>
  41a484:	9a07      	ldr	r2, [sp, #28]
  41a486:	6813      	ldr	r3, [r2, #0]
  41a488:	3204      	adds	r2, #4
  41a48a:	9207      	str	r2, [sp, #28]
  41a48c:	9a03      	ldr	r2, [sp, #12]
  41a48e:	601a      	str	r2, [r3, #0]
  41a490:	e4cb      	b.n	419e2a <_vfiprintf_r+0x7a>
  41a492:	aa0f      	add	r2, sp, #60	; 0x3c
  41a494:	9904      	ldr	r1, [sp, #16]
  41a496:	4620      	mov	r0, r4
  41a498:	f7ff fc4a 	bl	419d30 <__sprint_r.part.0>
  41a49c:	2800      	cmp	r0, #0
  41a49e:	f040 8139 	bne.w	41a714 <_vfiprintf_r+0x964>
  41a4a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a4a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a4a6:	f101 0c01 	add.w	ip, r1, #1
  41a4aa:	46ce      	mov	lr, r9
  41a4ac:	e5ff      	b.n	41a0ae <_vfiprintf_r+0x2fe>
  41a4ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a4b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a4b2:	1c48      	adds	r0, r1, #1
  41a4b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41a4b8:	2d00      	cmp	r5, #0
  41a4ba:	f43f ae22 	beq.w	41a102 <_vfiprintf_r+0x352>
  41a4be:	3201      	adds	r2, #1
  41a4c0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  41a4c4:	2101      	movs	r1, #1
  41a4c6:	2807      	cmp	r0, #7
  41a4c8:	9211      	str	r2, [sp, #68]	; 0x44
  41a4ca:	9010      	str	r0, [sp, #64]	; 0x40
  41a4cc:	f8ca 5000 	str.w	r5, [sl]
  41a4d0:	f8ca 1004 	str.w	r1, [sl, #4]
  41a4d4:	f340 8108 	ble.w	41a6e8 <_vfiprintf_r+0x938>
  41a4d8:	2a00      	cmp	r2, #0
  41a4da:	f040 81bc 	bne.w	41a856 <_vfiprintf_r+0xaa6>
  41a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41a4e0:	2b00      	cmp	r3, #0
  41a4e2:	f43f ae1f 	beq.w	41a124 <_vfiprintf_r+0x374>
  41a4e6:	ab0e      	add	r3, sp, #56	; 0x38
  41a4e8:	2202      	movs	r2, #2
  41a4ea:	4608      	mov	r0, r1
  41a4ec:	931c      	str	r3, [sp, #112]	; 0x70
  41a4ee:	921d      	str	r2, [sp, #116]	; 0x74
  41a4f0:	46ca      	mov	sl, r9
  41a4f2:	4601      	mov	r1, r0
  41a4f4:	f10a 0a08 	add.w	sl, sl, #8
  41a4f8:	3001      	adds	r0, #1
  41a4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41a4fc:	2b80      	cmp	r3, #128	; 0x80
  41a4fe:	f43f ae19 	beq.w	41a134 <_vfiprintf_r+0x384>
  41a502:	9b05      	ldr	r3, [sp, #20]
  41a504:	1ae4      	subs	r4, r4, r3
  41a506:	2c00      	cmp	r4, #0
  41a508:	dd2e      	ble.n	41a568 <_vfiprintf_r+0x7b8>
  41a50a:	2c10      	cmp	r4, #16
  41a50c:	4db3      	ldr	r5, [pc, #716]	; (41a7dc <_vfiprintf_r+0xa2c>)
  41a50e:	dd1e      	ble.n	41a54e <_vfiprintf_r+0x79e>
  41a510:	46d6      	mov	lr, sl
  41a512:	2610      	movs	r6, #16
  41a514:	9f06      	ldr	r7, [sp, #24]
  41a516:	f8dd a010 	ldr.w	sl, [sp, #16]
  41a51a:	e006      	b.n	41a52a <_vfiprintf_r+0x77a>
  41a51c:	1c88      	adds	r0, r1, #2
  41a51e:	f10e 0e08 	add.w	lr, lr, #8
  41a522:	4619      	mov	r1, r3
  41a524:	3c10      	subs	r4, #16
  41a526:	2c10      	cmp	r4, #16
  41a528:	dd10      	ble.n	41a54c <_vfiprintf_r+0x79c>
  41a52a:	1c4b      	adds	r3, r1, #1
  41a52c:	3210      	adds	r2, #16
  41a52e:	2b07      	cmp	r3, #7
  41a530:	9211      	str	r2, [sp, #68]	; 0x44
  41a532:	e88e 0060 	stmia.w	lr, {r5, r6}
  41a536:	9310      	str	r3, [sp, #64]	; 0x40
  41a538:	ddf0      	ble.n	41a51c <_vfiprintf_r+0x76c>
  41a53a:	2a00      	cmp	r2, #0
  41a53c:	d165      	bne.n	41a60a <_vfiprintf_r+0x85a>
  41a53e:	3c10      	subs	r4, #16
  41a540:	2c10      	cmp	r4, #16
  41a542:	f04f 0001 	mov.w	r0, #1
  41a546:	4611      	mov	r1, r2
  41a548:	46ce      	mov	lr, r9
  41a54a:	dcee      	bgt.n	41a52a <_vfiprintf_r+0x77a>
  41a54c:	46f2      	mov	sl, lr
  41a54e:	4422      	add	r2, r4
  41a550:	2807      	cmp	r0, #7
  41a552:	9211      	str	r2, [sp, #68]	; 0x44
  41a554:	f8ca 5000 	str.w	r5, [sl]
  41a558:	f8ca 4004 	str.w	r4, [sl, #4]
  41a55c:	9010      	str	r0, [sp, #64]	; 0x40
  41a55e:	f300 8085 	bgt.w	41a66c <_vfiprintf_r+0x8bc>
  41a562:	f10a 0a08 	add.w	sl, sl, #8
  41a566:	3001      	adds	r0, #1
  41a568:	9905      	ldr	r1, [sp, #20]
  41a56a:	f8ca b000 	str.w	fp, [sl]
  41a56e:	440a      	add	r2, r1
  41a570:	2807      	cmp	r0, #7
  41a572:	9211      	str	r2, [sp, #68]	; 0x44
  41a574:	f8ca 1004 	str.w	r1, [sl, #4]
  41a578:	9010      	str	r0, [sp, #64]	; 0x40
  41a57a:	f340 8082 	ble.w	41a682 <_vfiprintf_r+0x8d2>
  41a57e:	2a00      	cmp	r2, #0
  41a580:	f040 8118 	bne.w	41a7b4 <_vfiprintf_r+0xa04>
  41a584:	9b02      	ldr	r3, [sp, #8]
  41a586:	9210      	str	r2, [sp, #64]	; 0x40
  41a588:	0758      	lsls	r0, r3, #29
  41a58a:	d535      	bpl.n	41a5f8 <_vfiprintf_r+0x848>
  41a58c:	9b08      	ldr	r3, [sp, #32]
  41a58e:	9901      	ldr	r1, [sp, #4]
  41a590:	1a5c      	subs	r4, r3, r1
  41a592:	2c00      	cmp	r4, #0
  41a594:	f340 80e7 	ble.w	41a766 <_vfiprintf_r+0x9b6>
  41a598:	46ca      	mov	sl, r9
  41a59a:	2c10      	cmp	r4, #16
  41a59c:	f340 8218 	ble.w	41a9d0 <_vfiprintf_r+0xc20>
  41a5a0:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a5a2:	4e8f      	ldr	r6, [pc, #572]	; (41a7e0 <_vfiprintf_r+0xa30>)
  41a5a4:	9f06      	ldr	r7, [sp, #24]
  41a5a6:	f8dd b010 	ldr.w	fp, [sp, #16]
  41a5aa:	2510      	movs	r5, #16
  41a5ac:	e006      	b.n	41a5bc <_vfiprintf_r+0x80c>
  41a5ae:	1c88      	adds	r0, r1, #2
  41a5b0:	f10a 0a08 	add.w	sl, sl, #8
  41a5b4:	4619      	mov	r1, r3
  41a5b6:	3c10      	subs	r4, #16
  41a5b8:	2c10      	cmp	r4, #16
  41a5ba:	dd11      	ble.n	41a5e0 <_vfiprintf_r+0x830>
  41a5bc:	1c4b      	adds	r3, r1, #1
  41a5be:	3210      	adds	r2, #16
  41a5c0:	2b07      	cmp	r3, #7
  41a5c2:	9211      	str	r2, [sp, #68]	; 0x44
  41a5c4:	f8ca 6000 	str.w	r6, [sl]
  41a5c8:	f8ca 5004 	str.w	r5, [sl, #4]
  41a5cc:	9310      	str	r3, [sp, #64]	; 0x40
  41a5ce:	ddee      	ble.n	41a5ae <_vfiprintf_r+0x7fe>
  41a5d0:	bb42      	cbnz	r2, 41a624 <_vfiprintf_r+0x874>
  41a5d2:	3c10      	subs	r4, #16
  41a5d4:	2c10      	cmp	r4, #16
  41a5d6:	f04f 0001 	mov.w	r0, #1
  41a5da:	4611      	mov	r1, r2
  41a5dc:	46ca      	mov	sl, r9
  41a5de:	dced      	bgt.n	41a5bc <_vfiprintf_r+0x80c>
  41a5e0:	4422      	add	r2, r4
  41a5e2:	2807      	cmp	r0, #7
  41a5e4:	9211      	str	r2, [sp, #68]	; 0x44
  41a5e6:	f8ca 6000 	str.w	r6, [sl]
  41a5ea:	f8ca 4004 	str.w	r4, [sl, #4]
  41a5ee:	9010      	str	r0, [sp, #64]	; 0x40
  41a5f0:	dd51      	ble.n	41a696 <_vfiprintf_r+0x8e6>
  41a5f2:	2a00      	cmp	r2, #0
  41a5f4:	f040 819b 	bne.w	41a92e <_vfiprintf_r+0xb7e>
  41a5f8:	9b03      	ldr	r3, [sp, #12]
  41a5fa:	9a08      	ldr	r2, [sp, #32]
  41a5fc:	9901      	ldr	r1, [sp, #4]
  41a5fe:	428a      	cmp	r2, r1
  41a600:	bfac      	ite	ge
  41a602:	189b      	addge	r3, r3, r2
  41a604:	185b      	addlt	r3, r3, r1
  41a606:	9303      	str	r3, [sp, #12]
  41a608:	e04e      	b.n	41a6a8 <_vfiprintf_r+0x8f8>
  41a60a:	aa0f      	add	r2, sp, #60	; 0x3c
  41a60c:	4651      	mov	r1, sl
  41a60e:	4638      	mov	r0, r7
  41a610:	f7ff fb8e 	bl	419d30 <__sprint_r.part.0>
  41a614:	2800      	cmp	r0, #0
  41a616:	f040 813f 	bne.w	41a898 <_vfiprintf_r+0xae8>
  41a61a:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a61c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a61e:	1c48      	adds	r0, r1, #1
  41a620:	46ce      	mov	lr, r9
  41a622:	e77f      	b.n	41a524 <_vfiprintf_r+0x774>
  41a624:	aa0f      	add	r2, sp, #60	; 0x3c
  41a626:	4659      	mov	r1, fp
  41a628:	4638      	mov	r0, r7
  41a62a:	f7ff fb81 	bl	419d30 <__sprint_r.part.0>
  41a62e:	b960      	cbnz	r0, 41a64a <_vfiprintf_r+0x89a>
  41a630:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a632:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a634:	1c48      	adds	r0, r1, #1
  41a636:	46ca      	mov	sl, r9
  41a638:	e7bd      	b.n	41a5b6 <_vfiprintf_r+0x806>
  41a63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  41a63c:	f8dd b010 	ldr.w	fp, [sp, #16]
  41a640:	2b00      	cmp	r3, #0
  41a642:	f040 81d4 	bne.w	41a9ee <_vfiprintf_r+0xc3e>
  41a646:	2300      	movs	r3, #0
  41a648:	9310      	str	r3, [sp, #64]	; 0x40
  41a64a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  41a64e:	f013 0f01 	tst.w	r3, #1
  41a652:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  41a656:	d102      	bne.n	41a65e <_vfiprintf_r+0x8ae>
  41a658:	059a      	lsls	r2, r3, #22
  41a65a:	f140 80de 	bpl.w	41a81a <_vfiprintf_r+0xa6a>
  41a65e:	065b      	lsls	r3, r3, #25
  41a660:	f53f acb2 	bmi.w	419fc8 <_vfiprintf_r+0x218>
  41a664:	9803      	ldr	r0, [sp, #12]
  41a666:	b02d      	add	sp, #180	; 0xb4
  41a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41a66c:	2a00      	cmp	r2, #0
  41a66e:	f040 8106 	bne.w	41a87e <_vfiprintf_r+0xace>
  41a672:	9a05      	ldr	r2, [sp, #20]
  41a674:	921d      	str	r2, [sp, #116]	; 0x74
  41a676:	2301      	movs	r3, #1
  41a678:	9211      	str	r2, [sp, #68]	; 0x44
  41a67a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  41a67e:	9310      	str	r3, [sp, #64]	; 0x40
  41a680:	46ca      	mov	sl, r9
  41a682:	f10a 0a08 	add.w	sl, sl, #8
  41a686:	9b02      	ldr	r3, [sp, #8]
  41a688:	0759      	lsls	r1, r3, #29
  41a68a:	d504      	bpl.n	41a696 <_vfiprintf_r+0x8e6>
  41a68c:	9b08      	ldr	r3, [sp, #32]
  41a68e:	9901      	ldr	r1, [sp, #4]
  41a690:	1a5c      	subs	r4, r3, r1
  41a692:	2c00      	cmp	r4, #0
  41a694:	dc81      	bgt.n	41a59a <_vfiprintf_r+0x7ea>
  41a696:	9b03      	ldr	r3, [sp, #12]
  41a698:	9908      	ldr	r1, [sp, #32]
  41a69a:	9801      	ldr	r0, [sp, #4]
  41a69c:	4281      	cmp	r1, r0
  41a69e:	bfac      	ite	ge
  41a6a0:	185b      	addge	r3, r3, r1
  41a6a2:	181b      	addlt	r3, r3, r0
  41a6a4:	9303      	str	r3, [sp, #12]
  41a6a6:	bb72      	cbnz	r2, 41a706 <_vfiprintf_r+0x956>
  41a6a8:	2300      	movs	r3, #0
  41a6aa:	9310      	str	r3, [sp, #64]	; 0x40
  41a6ac:	46ca      	mov	sl, r9
  41a6ae:	f7ff bbbc 	b.w	419e2a <_vfiprintf_r+0x7a>
  41a6b2:	aa0f      	add	r2, sp, #60	; 0x3c
  41a6b4:	9904      	ldr	r1, [sp, #16]
  41a6b6:	4620      	mov	r0, r4
  41a6b8:	f7ff fb3a 	bl	419d30 <__sprint_r.part.0>
  41a6bc:	bb50      	cbnz	r0, 41a714 <_vfiprintf_r+0x964>
  41a6be:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a6c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a6c2:	f101 0e01 	add.w	lr, r1, #1
  41a6c6:	46cc      	mov	ip, r9
  41a6c8:	e548      	b.n	41a15c <_vfiprintf_r+0x3ac>
  41a6ca:	2a00      	cmp	r2, #0
  41a6cc:	f040 8140 	bne.w	41a950 <_vfiprintf_r+0xba0>
  41a6d0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  41a6d4:	2900      	cmp	r1, #0
  41a6d6:	f000 811b 	beq.w	41a910 <_vfiprintf_r+0xb60>
  41a6da:	2201      	movs	r2, #1
  41a6dc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  41a6e0:	4610      	mov	r0, r2
  41a6e2:	921d      	str	r2, [sp, #116]	; 0x74
  41a6e4:	911c      	str	r1, [sp, #112]	; 0x70
  41a6e6:	46ca      	mov	sl, r9
  41a6e8:	4601      	mov	r1, r0
  41a6ea:	f10a 0a08 	add.w	sl, sl, #8
  41a6ee:	3001      	adds	r0, #1
  41a6f0:	e507      	b.n	41a102 <_vfiprintf_r+0x352>
  41a6f2:	9b02      	ldr	r3, [sp, #8]
  41a6f4:	2a01      	cmp	r2, #1
  41a6f6:	f000 8098 	beq.w	41a82a <_vfiprintf_r+0xa7a>
  41a6fa:	2a02      	cmp	r2, #2
  41a6fc:	d10d      	bne.n	41a71a <_vfiprintf_r+0x96a>
  41a6fe:	9302      	str	r3, [sp, #8]
  41a700:	2600      	movs	r6, #0
  41a702:	2700      	movs	r7, #0
  41a704:	e5b0      	b.n	41a268 <_vfiprintf_r+0x4b8>
  41a706:	aa0f      	add	r2, sp, #60	; 0x3c
  41a708:	9904      	ldr	r1, [sp, #16]
  41a70a:	9806      	ldr	r0, [sp, #24]
  41a70c:	f7ff fb10 	bl	419d30 <__sprint_r.part.0>
  41a710:	2800      	cmp	r0, #0
  41a712:	d0c9      	beq.n	41a6a8 <_vfiprintf_r+0x8f8>
  41a714:	f8dd b010 	ldr.w	fp, [sp, #16]
  41a718:	e797      	b.n	41a64a <_vfiprintf_r+0x89a>
  41a71a:	9302      	str	r3, [sp, #8]
  41a71c:	2600      	movs	r6, #0
  41a71e:	2700      	movs	r7, #0
  41a720:	4649      	mov	r1, r9
  41a722:	e000      	b.n	41a726 <_vfiprintf_r+0x976>
  41a724:	4659      	mov	r1, fp
  41a726:	08f2      	lsrs	r2, r6, #3
  41a728:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  41a72c:	08f8      	lsrs	r0, r7, #3
  41a72e:	f006 0307 	and.w	r3, r6, #7
  41a732:	4607      	mov	r7, r0
  41a734:	4616      	mov	r6, r2
  41a736:	3330      	adds	r3, #48	; 0x30
  41a738:	ea56 0207 	orrs.w	r2, r6, r7
  41a73c:	f801 3c01 	strb.w	r3, [r1, #-1]
  41a740:	f101 3bff 	add.w	fp, r1, #4294967295
  41a744:	d1ee      	bne.n	41a724 <_vfiprintf_r+0x974>
  41a746:	9a02      	ldr	r2, [sp, #8]
  41a748:	07d6      	lsls	r6, r2, #31
  41a74a:	f57f ad9d 	bpl.w	41a288 <_vfiprintf_r+0x4d8>
  41a74e:	2b30      	cmp	r3, #48	; 0x30
  41a750:	f43f ad9a 	beq.w	41a288 <_vfiprintf_r+0x4d8>
  41a754:	3902      	subs	r1, #2
  41a756:	2330      	movs	r3, #48	; 0x30
  41a758:	f80b 3c01 	strb.w	r3, [fp, #-1]
  41a75c:	eba9 0301 	sub.w	r3, r9, r1
  41a760:	9305      	str	r3, [sp, #20]
  41a762:	468b      	mov	fp, r1
  41a764:	e476      	b.n	41a054 <_vfiprintf_r+0x2a4>
  41a766:	9b03      	ldr	r3, [sp, #12]
  41a768:	9a08      	ldr	r2, [sp, #32]
  41a76a:	428a      	cmp	r2, r1
  41a76c:	bfac      	ite	ge
  41a76e:	189b      	addge	r3, r3, r2
  41a770:	185b      	addlt	r3, r3, r1
  41a772:	9303      	str	r3, [sp, #12]
  41a774:	e798      	b.n	41a6a8 <_vfiprintf_r+0x8f8>
  41a776:	2202      	movs	r2, #2
  41a778:	e44d      	b.n	41a016 <_vfiprintf_r+0x266>
  41a77a:	2f00      	cmp	r7, #0
  41a77c:	bf08      	it	eq
  41a77e:	2e0a      	cmpeq	r6, #10
  41a780:	d352      	bcc.n	41a828 <_vfiprintf_r+0xa78>
  41a782:	46cb      	mov	fp, r9
  41a784:	4630      	mov	r0, r6
  41a786:	4639      	mov	r1, r7
  41a788:	220a      	movs	r2, #10
  41a78a:	2300      	movs	r3, #0
  41a78c:	f7fe f91e 	bl	4189cc <__aeabi_uldivmod>
  41a790:	3230      	adds	r2, #48	; 0x30
  41a792:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  41a796:	4630      	mov	r0, r6
  41a798:	4639      	mov	r1, r7
  41a79a:	2300      	movs	r3, #0
  41a79c:	220a      	movs	r2, #10
  41a79e:	f7fe f915 	bl	4189cc <__aeabi_uldivmod>
  41a7a2:	4606      	mov	r6, r0
  41a7a4:	460f      	mov	r7, r1
  41a7a6:	ea56 0307 	orrs.w	r3, r6, r7
  41a7aa:	d1eb      	bne.n	41a784 <_vfiprintf_r+0x9d4>
  41a7ac:	e56c      	b.n	41a288 <_vfiprintf_r+0x4d8>
  41a7ae:	9405      	str	r4, [sp, #20]
  41a7b0:	46cb      	mov	fp, r9
  41a7b2:	e44f      	b.n	41a054 <_vfiprintf_r+0x2a4>
  41a7b4:	aa0f      	add	r2, sp, #60	; 0x3c
  41a7b6:	9904      	ldr	r1, [sp, #16]
  41a7b8:	9806      	ldr	r0, [sp, #24]
  41a7ba:	f7ff fab9 	bl	419d30 <__sprint_r.part.0>
  41a7be:	2800      	cmp	r0, #0
  41a7c0:	d1a8      	bne.n	41a714 <_vfiprintf_r+0x964>
  41a7c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a7c4:	46ca      	mov	sl, r9
  41a7c6:	e75e      	b.n	41a686 <_vfiprintf_r+0x8d6>
  41a7c8:	aa0f      	add	r2, sp, #60	; 0x3c
  41a7ca:	9904      	ldr	r1, [sp, #16]
  41a7cc:	9806      	ldr	r0, [sp, #24]
  41a7ce:	f7ff faaf 	bl	419d30 <__sprint_r.part.0>
  41a7d2:	2800      	cmp	r0, #0
  41a7d4:	d19e      	bne.n	41a714 <_vfiprintf_r+0x964>
  41a7d6:	46ca      	mov	sl, r9
  41a7d8:	f7ff bbc0 	b.w	419f5c <_vfiprintf_r+0x1ac>
  41a7dc:	00422ee0 	.word	0x00422ee0
  41a7e0:	00422ed0 	.word	0x00422ed0
  41a7e4:	3104      	adds	r1, #4
  41a7e6:	6816      	ldr	r6, [r2, #0]
  41a7e8:	9107      	str	r1, [sp, #28]
  41a7ea:	2201      	movs	r2, #1
  41a7ec:	2700      	movs	r7, #0
  41a7ee:	e412      	b.n	41a016 <_vfiprintf_r+0x266>
  41a7f0:	9807      	ldr	r0, [sp, #28]
  41a7f2:	4601      	mov	r1, r0
  41a7f4:	3104      	adds	r1, #4
  41a7f6:	6806      	ldr	r6, [r0, #0]
  41a7f8:	9107      	str	r1, [sp, #28]
  41a7fa:	2700      	movs	r7, #0
  41a7fc:	e40b      	b.n	41a016 <_vfiprintf_r+0x266>
  41a7fe:	680e      	ldr	r6, [r1, #0]
  41a800:	3104      	adds	r1, #4
  41a802:	9107      	str	r1, [sp, #28]
  41a804:	2700      	movs	r7, #0
  41a806:	e591      	b.n	41a32c <_vfiprintf_r+0x57c>
  41a808:	9907      	ldr	r1, [sp, #28]
  41a80a:	680e      	ldr	r6, [r1, #0]
  41a80c:	460a      	mov	r2, r1
  41a80e:	17f7      	asrs	r7, r6, #31
  41a810:	3204      	adds	r2, #4
  41a812:	9207      	str	r2, [sp, #28]
  41a814:	4630      	mov	r0, r6
  41a816:	4639      	mov	r1, r7
  41a818:	e50f      	b.n	41a23a <_vfiprintf_r+0x48a>
  41a81a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  41a81e:	f000 fe83 	bl	41b528 <__retarget_lock_release_recursive>
  41a822:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  41a826:	e71a      	b.n	41a65e <_vfiprintf_r+0x8ae>
  41a828:	9b02      	ldr	r3, [sp, #8]
  41a82a:	9302      	str	r3, [sp, #8]
  41a82c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  41a830:	3630      	adds	r6, #48	; 0x30
  41a832:	2301      	movs	r3, #1
  41a834:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  41a838:	9305      	str	r3, [sp, #20]
  41a83a:	e40b      	b.n	41a054 <_vfiprintf_r+0x2a4>
  41a83c:	aa0f      	add	r2, sp, #60	; 0x3c
  41a83e:	9904      	ldr	r1, [sp, #16]
  41a840:	9806      	ldr	r0, [sp, #24]
  41a842:	f7ff fa75 	bl	419d30 <__sprint_r.part.0>
  41a846:	2800      	cmp	r0, #0
  41a848:	f47f af64 	bne.w	41a714 <_vfiprintf_r+0x964>
  41a84c:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a84e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a850:	1c48      	adds	r0, r1, #1
  41a852:	46ca      	mov	sl, r9
  41a854:	e651      	b.n	41a4fa <_vfiprintf_r+0x74a>
  41a856:	aa0f      	add	r2, sp, #60	; 0x3c
  41a858:	9904      	ldr	r1, [sp, #16]
  41a85a:	9806      	ldr	r0, [sp, #24]
  41a85c:	f7ff fa68 	bl	419d30 <__sprint_r.part.0>
  41a860:	2800      	cmp	r0, #0
  41a862:	f47f af57 	bne.w	41a714 <_vfiprintf_r+0x964>
  41a866:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a868:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a86a:	1c48      	adds	r0, r1, #1
  41a86c:	46ca      	mov	sl, r9
  41a86e:	e448      	b.n	41a102 <_vfiprintf_r+0x352>
  41a870:	2a00      	cmp	r2, #0
  41a872:	f040 8091 	bne.w	41a998 <_vfiprintf_r+0xbe8>
  41a876:	2001      	movs	r0, #1
  41a878:	4611      	mov	r1, r2
  41a87a:	46ca      	mov	sl, r9
  41a87c:	e641      	b.n	41a502 <_vfiprintf_r+0x752>
  41a87e:	aa0f      	add	r2, sp, #60	; 0x3c
  41a880:	9904      	ldr	r1, [sp, #16]
  41a882:	9806      	ldr	r0, [sp, #24]
  41a884:	f7ff fa54 	bl	419d30 <__sprint_r.part.0>
  41a888:	2800      	cmp	r0, #0
  41a88a:	f47f af43 	bne.w	41a714 <_vfiprintf_r+0x964>
  41a88e:	9810      	ldr	r0, [sp, #64]	; 0x40
  41a890:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a892:	3001      	adds	r0, #1
  41a894:	46ca      	mov	sl, r9
  41a896:	e667      	b.n	41a568 <_vfiprintf_r+0x7b8>
  41a898:	46d3      	mov	fp, sl
  41a89a:	e6d6      	b.n	41a64a <_vfiprintf_r+0x89a>
  41a89c:	9e07      	ldr	r6, [sp, #28]
  41a89e:	3607      	adds	r6, #7
  41a8a0:	f026 0207 	bic.w	r2, r6, #7
  41a8a4:	f102 0108 	add.w	r1, r2, #8
  41a8a8:	e9d2 6700 	ldrd	r6, r7, [r2]
  41a8ac:	9107      	str	r1, [sp, #28]
  41a8ae:	2201      	movs	r2, #1
  41a8b0:	f7ff bbb1 	b.w	41a016 <_vfiprintf_r+0x266>
  41a8b4:	9e07      	ldr	r6, [sp, #28]
  41a8b6:	3607      	adds	r6, #7
  41a8b8:	f026 0607 	bic.w	r6, r6, #7
  41a8bc:	e9d6 0100 	ldrd	r0, r1, [r6]
  41a8c0:	f106 0208 	add.w	r2, r6, #8
  41a8c4:	9207      	str	r2, [sp, #28]
  41a8c6:	4606      	mov	r6, r0
  41a8c8:	460f      	mov	r7, r1
  41a8ca:	e4b6      	b.n	41a23a <_vfiprintf_r+0x48a>
  41a8cc:	9e07      	ldr	r6, [sp, #28]
  41a8ce:	3607      	adds	r6, #7
  41a8d0:	f026 0207 	bic.w	r2, r6, #7
  41a8d4:	f102 0108 	add.w	r1, r2, #8
  41a8d8:	e9d2 6700 	ldrd	r6, r7, [r2]
  41a8dc:	9107      	str	r1, [sp, #28]
  41a8de:	2200      	movs	r2, #0
  41a8e0:	f7ff bb99 	b.w	41a016 <_vfiprintf_r+0x266>
  41a8e4:	9e07      	ldr	r6, [sp, #28]
  41a8e6:	3607      	adds	r6, #7
  41a8e8:	f026 0107 	bic.w	r1, r6, #7
  41a8ec:	f101 0008 	add.w	r0, r1, #8
  41a8f0:	9007      	str	r0, [sp, #28]
  41a8f2:	e9d1 6700 	ldrd	r6, r7, [r1]
  41a8f6:	e519      	b.n	41a32c <_vfiprintf_r+0x57c>
  41a8f8:	46cb      	mov	fp, r9
  41a8fa:	f7ff bbab 	b.w	41a054 <_vfiprintf_r+0x2a4>
  41a8fe:	252d      	movs	r5, #45	; 0x2d
  41a900:	4276      	negs	r6, r6
  41a902:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  41a906:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41a90a:	2201      	movs	r2, #1
  41a90c:	f7ff bb88 	b.w	41a020 <_vfiprintf_r+0x270>
  41a910:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41a912:	b9b3      	cbnz	r3, 41a942 <_vfiprintf_r+0xb92>
  41a914:	4611      	mov	r1, r2
  41a916:	2001      	movs	r0, #1
  41a918:	46ca      	mov	sl, r9
  41a91a:	e5f2      	b.n	41a502 <_vfiprintf_r+0x752>
  41a91c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  41a920:	f000 fe02 	bl	41b528 <__retarget_lock_release_recursive>
  41a924:	f04f 33ff 	mov.w	r3, #4294967295
  41a928:	9303      	str	r3, [sp, #12]
  41a92a:	f7ff bb50 	b.w	419fce <_vfiprintf_r+0x21e>
  41a92e:	aa0f      	add	r2, sp, #60	; 0x3c
  41a930:	9904      	ldr	r1, [sp, #16]
  41a932:	9806      	ldr	r0, [sp, #24]
  41a934:	f7ff f9fc 	bl	419d30 <__sprint_r.part.0>
  41a938:	2800      	cmp	r0, #0
  41a93a:	f47f aeeb 	bne.w	41a714 <_vfiprintf_r+0x964>
  41a93e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a940:	e6a9      	b.n	41a696 <_vfiprintf_r+0x8e6>
  41a942:	ab0e      	add	r3, sp, #56	; 0x38
  41a944:	2202      	movs	r2, #2
  41a946:	931c      	str	r3, [sp, #112]	; 0x70
  41a948:	921d      	str	r2, [sp, #116]	; 0x74
  41a94a:	2001      	movs	r0, #1
  41a94c:	46ca      	mov	sl, r9
  41a94e:	e5d0      	b.n	41a4f2 <_vfiprintf_r+0x742>
  41a950:	aa0f      	add	r2, sp, #60	; 0x3c
  41a952:	9904      	ldr	r1, [sp, #16]
  41a954:	9806      	ldr	r0, [sp, #24]
  41a956:	f7ff f9eb 	bl	419d30 <__sprint_r.part.0>
  41a95a:	2800      	cmp	r0, #0
  41a95c:	f47f aeda 	bne.w	41a714 <_vfiprintf_r+0x964>
  41a960:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a962:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a964:	1c48      	adds	r0, r1, #1
  41a966:	46ca      	mov	sl, r9
  41a968:	e5a4      	b.n	41a4b4 <_vfiprintf_r+0x704>
  41a96a:	9a07      	ldr	r2, [sp, #28]
  41a96c:	9903      	ldr	r1, [sp, #12]
  41a96e:	6813      	ldr	r3, [r2, #0]
  41a970:	17cd      	asrs	r5, r1, #31
  41a972:	4608      	mov	r0, r1
  41a974:	3204      	adds	r2, #4
  41a976:	4629      	mov	r1, r5
  41a978:	9207      	str	r2, [sp, #28]
  41a97a:	e9c3 0100 	strd	r0, r1, [r3]
  41a97e:	f7ff ba54 	b.w	419e2a <_vfiprintf_r+0x7a>
  41a982:	4658      	mov	r0, fp
  41a984:	9607      	str	r6, [sp, #28]
  41a986:	9302      	str	r3, [sp, #8]
  41a988:	f7ff f8ba 	bl	419b00 <strlen>
  41a98c:	2400      	movs	r4, #0
  41a98e:	9005      	str	r0, [sp, #20]
  41a990:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41a994:	f7ff bb5e 	b.w	41a054 <_vfiprintf_r+0x2a4>
  41a998:	aa0f      	add	r2, sp, #60	; 0x3c
  41a99a:	9904      	ldr	r1, [sp, #16]
  41a99c:	9806      	ldr	r0, [sp, #24]
  41a99e:	f7ff f9c7 	bl	419d30 <__sprint_r.part.0>
  41a9a2:	2800      	cmp	r0, #0
  41a9a4:	f47f aeb6 	bne.w	41a714 <_vfiprintf_r+0x964>
  41a9a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a9aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a9ac:	1c48      	adds	r0, r1, #1
  41a9ae:	46ca      	mov	sl, r9
  41a9b0:	e5a7      	b.n	41a502 <_vfiprintf_r+0x752>
  41a9b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  41a9b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41a9b6:	4e20      	ldr	r6, [pc, #128]	; (41aa38 <_vfiprintf_r+0xc88>)
  41a9b8:	3101      	adds	r1, #1
  41a9ba:	f7ff bb90 	b.w	41a0de <_vfiprintf_r+0x32e>
  41a9be:	2c06      	cmp	r4, #6
  41a9c0:	bf28      	it	cs
  41a9c2:	2406      	movcs	r4, #6
  41a9c4:	9405      	str	r4, [sp, #20]
  41a9c6:	9607      	str	r6, [sp, #28]
  41a9c8:	9401      	str	r4, [sp, #4]
  41a9ca:	f8df b070 	ldr.w	fp, [pc, #112]	; 41aa3c <_vfiprintf_r+0xc8c>
  41a9ce:	e4d5      	b.n	41a37c <_vfiprintf_r+0x5cc>
  41a9d0:	9810      	ldr	r0, [sp, #64]	; 0x40
  41a9d2:	4e19      	ldr	r6, [pc, #100]	; (41aa38 <_vfiprintf_r+0xc88>)
  41a9d4:	3001      	adds	r0, #1
  41a9d6:	e603      	b.n	41a5e0 <_vfiprintf_r+0x830>
  41a9d8:	9405      	str	r4, [sp, #20]
  41a9da:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  41a9de:	9607      	str	r6, [sp, #28]
  41a9e0:	9302      	str	r3, [sp, #8]
  41a9e2:	4604      	mov	r4, r0
  41a9e4:	f7ff bb36 	b.w	41a054 <_vfiprintf_r+0x2a4>
  41a9e8:	4686      	mov	lr, r0
  41a9ea:	f7ff bbce 	b.w	41a18a <_vfiprintf_r+0x3da>
  41a9ee:	9806      	ldr	r0, [sp, #24]
  41a9f0:	aa0f      	add	r2, sp, #60	; 0x3c
  41a9f2:	4659      	mov	r1, fp
  41a9f4:	f7ff f99c 	bl	419d30 <__sprint_r.part.0>
  41a9f8:	2800      	cmp	r0, #0
  41a9fa:	f43f ae24 	beq.w	41a646 <_vfiprintf_r+0x896>
  41a9fe:	e624      	b.n	41a64a <_vfiprintf_r+0x89a>
  41aa00:	9907      	ldr	r1, [sp, #28]
  41aa02:	f898 2001 	ldrb.w	r2, [r8, #1]
  41aa06:	680c      	ldr	r4, [r1, #0]
  41aa08:	3104      	adds	r1, #4
  41aa0a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  41aa0e:	46b8      	mov	r8, r7
  41aa10:	9107      	str	r1, [sp, #28]
  41aa12:	f7ff ba3f 	b.w	419e94 <_vfiprintf_r+0xe4>
  41aa16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41aa1a:	e43c      	b.n	41a296 <_vfiprintf_r+0x4e6>
  41aa1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41aa20:	e521      	b.n	41a466 <_vfiprintf_r+0x6b6>
  41aa22:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41aa26:	f7ff bbf4 	b.w	41a212 <_vfiprintf_r+0x462>
  41aa2a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41aa2e:	e491      	b.n	41a354 <_vfiprintf_r+0x5a4>
  41aa30:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  41aa34:	e469      	b.n	41a30a <_vfiprintf_r+0x55a>
  41aa36:	bf00      	nop
  41aa38:	00422ed0 	.word	0x00422ed0
  41aa3c:	00422ec8 	.word	0x00422ec8

0041aa40 <__sbprintf>:
  41aa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41aa44:	460c      	mov	r4, r1
  41aa46:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  41aa4a:	8989      	ldrh	r1, [r1, #12]
  41aa4c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  41aa4e:	89e5      	ldrh	r5, [r4, #14]
  41aa50:	9619      	str	r6, [sp, #100]	; 0x64
  41aa52:	f021 0102 	bic.w	r1, r1, #2
  41aa56:	4606      	mov	r6, r0
  41aa58:	69e0      	ldr	r0, [r4, #28]
  41aa5a:	f8ad 100c 	strh.w	r1, [sp, #12]
  41aa5e:	4617      	mov	r7, r2
  41aa60:	f44f 6180 	mov.w	r1, #1024	; 0x400
  41aa64:	6a62      	ldr	r2, [r4, #36]	; 0x24
  41aa66:	f8ad 500e 	strh.w	r5, [sp, #14]
  41aa6a:	4698      	mov	r8, r3
  41aa6c:	ad1a      	add	r5, sp, #104	; 0x68
  41aa6e:	2300      	movs	r3, #0
  41aa70:	9007      	str	r0, [sp, #28]
  41aa72:	a816      	add	r0, sp, #88	; 0x58
  41aa74:	9209      	str	r2, [sp, #36]	; 0x24
  41aa76:	9306      	str	r3, [sp, #24]
  41aa78:	9500      	str	r5, [sp, #0]
  41aa7a:	9504      	str	r5, [sp, #16]
  41aa7c:	9102      	str	r1, [sp, #8]
  41aa7e:	9105      	str	r1, [sp, #20]
  41aa80:	f000 fd4c 	bl	41b51c <__retarget_lock_init_recursive>
  41aa84:	4643      	mov	r3, r8
  41aa86:	463a      	mov	r2, r7
  41aa88:	4669      	mov	r1, sp
  41aa8a:	4630      	mov	r0, r6
  41aa8c:	f7ff f990 	bl	419db0 <_vfiprintf_r>
  41aa90:	1e05      	subs	r5, r0, #0
  41aa92:	db07      	blt.n	41aaa4 <__sbprintf+0x64>
  41aa94:	4630      	mov	r0, r6
  41aa96:	4669      	mov	r1, sp
  41aa98:	f000 f928 	bl	41acec <_fflush_r>
  41aa9c:	2800      	cmp	r0, #0
  41aa9e:	bf18      	it	ne
  41aaa0:	f04f 35ff 	movne.w	r5, #4294967295
  41aaa4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41aaa8:	065b      	lsls	r3, r3, #25
  41aaaa:	d503      	bpl.n	41aab4 <__sbprintf+0x74>
  41aaac:	89a3      	ldrh	r3, [r4, #12]
  41aaae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41aab2:	81a3      	strh	r3, [r4, #12]
  41aab4:	9816      	ldr	r0, [sp, #88]	; 0x58
  41aab6:	f000 fd33 	bl	41b520 <__retarget_lock_close_recursive>
  41aaba:	4628      	mov	r0, r5
  41aabc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  41aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041aac4 <__swsetup_r>:
  41aac4:	b538      	push	{r3, r4, r5, lr}
  41aac6:	4b30      	ldr	r3, [pc, #192]	; (41ab88 <__swsetup_r+0xc4>)
  41aac8:	681b      	ldr	r3, [r3, #0]
  41aaca:	4605      	mov	r5, r0
  41aacc:	460c      	mov	r4, r1
  41aace:	b113      	cbz	r3, 41aad6 <__swsetup_r+0x12>
  41aad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  41aad2:	2a00      	cmp	r2, #0
  41aad4:	d038      	beq.n	41ab48 <__swsetup_r+0x84>
  41aad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41aada:	b293      	uxth	r3, r2
  41aadc:	0718      	lsls	r0, r3, #28
  41aade:	d50c      	bpl.n	41aafa <__swsetup_r+0x36>
  41aae0:	6920      	ldr	r0, [r4, #16]
  41aae2:	b1a8      	cbz	r0, 41ab10 <__swsetup_r+0x4c>
  41aae4:	f013 0201 	ands.w	r2, r3, #1
  41aae8:	d01e      	beq.n	41ab28 <__swsetup_r+0x64>
  41aaea:	6963      	ldr	r3, [r4, #20]
  41aaec:	2200      	movs	r2, #0
  41aaee:	425b      	negs	r3, r3
  41aaf0:	61a3      	str	r3, [r4, #24]
  41aaf2:	60a2      	str	r2, [r4, #8]
  41aaf4:	b1f0      	cbz	r0, 41ab34 <__swsetup_r+0x70>
  41aaf6:	2000      	movs	r0, #0
  41aaf8:	bd38      	pop	{r3, r4, r5, pc}
  41aafa:	06d9      	lsls	r1, r3, #27
  41aafc:	d53c      	bpl.n	41ab78 <__swsetup_r+0xb4>
  41aafe:	0758      	lsls	r0, r3, #29
  41ab00:	d426      	bmi.n	41ab50 <__swsetup_r+0x8c>
  41ab02:	6920      	ldr	r0, [r4, #16]
  41ab04:	f042 0308 	orr.w	r3, r2, #8
  41ab08:	81a3      	strh	r3, [r4, #12]
  41ab0a:	b29b      	uxth	r3, r3
  41ab0c:	2800      	cmp	r0, #0
  41ab0e:	d1e9      	bne.n	41aae4 <__swsetup_r+0x20>
  41ab10:	f403 7220 	and.w	r2, r3, #640	; 0x280
  41ab14:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  41ab18:	d0e4      	beq.n	41aae4 <__swsetup_r+0x20>
  41ab1a:	4628      	mov	r0, r5
  41ab1c:	4621      	mov	r1, r4
  41ab1e:	f000 fd33 	bl	41b588 <__smakebuf_r>
  41ab22:	89a3      	ldrh	r3, [r4, #12]
  41ab24:	6920      	ldr	r0, [r4, #16]
  41ab26:	e7dd      	b.n	41aae4 <__swsetup_r+0x20>
  41ab28:	0799      	lsls	r1, r3, #30
  41ab2a:	bf58      	it	pl
  41ab2c:	6962      	ldrpl	r2, [r4, #20]
  41ab2e:	60a2      	str	r2, [r4, #8]
  41ab30:	2800      	cmp	r0, #0
  41ab32:	d1e0      	bne.n	41aaf6 <__swsetup_r+0x32>
  41ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41ab38:	061a      	lsls	r2, r3, #24
  41ab3a:	d5dd      	bpl.n	41aaf8 <__swsetup_r+0x34>
  41ab3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41ab40:	81a3      	strh	r3, [r4, #12]
  41ab42:	f04f 30ff 	mov.w	r0, #4294967295
  41ab46:	bd38      	pop	{r3, r4, r5, pc}
  41ab48:	4618      	mov	r0, r3
  41ab4a:	f000 f927 	bl	41ad9c <__sinit>
  41ab4e:	e7c2      	b.n	41aad6 <__swsetup_r+0x12>
  41ab50:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41ab52:	b151      	cbz	r1, 41ab6a <__swsetup_r+0xa6>
  41ab54:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41ab58:	4299      	cmp	r1, r3
  41ab5a:	d004      	beq.n	41ab66 <__swsetup_r+0xa2>
  41ab5c:	4628      	mov	r0, r5
  41ab5e:	f000 fa43 	bl	41afe8 <_free_r>
  41ab62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41ab66:	2300      	movs	r3, #0
  41ab68:	6323      	str	r3, [r4, #48]	; 0x30
  41ab6a:	2300      	movs	r3, #0
  41ab6c:	6920      	ldr	r0, [r4, #16]
  41ab6e:	6063      	str	r3, [r4, #4]
  41ab70:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  41ab74:	6020      	str	r0, [r4, #0]
  41ab76:	e7c5      	b.n	41ab04 <__swsetup_r+0x40>
  41ab78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  41ab7c:	2309      	movs	r3, #9
  41ab7e:	602b      	str	r3, [r5, #0]
  41ab80:	f04f 30ff 	mov.w	r0, #4294967295
  41ab84:	81a2      	strh	r2, [r4, #12]
  41ab86:	bd38      	pop	{r3, r4, r5, pc}
  41ab88:	20400038 	.word	0x20400038

0041ab8c <register_fini>:
  41ab8c:	4b02      	ldr	r3, [pc, #8]	; (41ab98 <register_fini+0xc>)
  41ab8e:	b113      	cbz	r3, 41ab96 <register_fini+0xa>
  41ab90:	4802      	ldr	r0, [pc, #8]	; (41ab9c <register_fini+0x10>)
  41ab92:	f000 b805 	b.w	41aba0 <atexit>
  41ab96:	4770      	bx	lr
  41ab98:	00000000 	.word	0x00000000
  41ab9c:	0041ae0d 	.word	0x0041ae0d

0041aba0 <atexit>:
  41aba0:	2300      	movs	r3, #0
  41aba2:	4601      	mov	r1, r0
  41aba4:	461a      	mov	r2, r3
  41aba6:	4618      	mov	r0, r3
  41aba8:	f001 b832 	b.w	41bc10 <__register_exitproc>

0041abac <__sflush_r>:
  41abac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  41abb0:	b29a      	uxth	r2, r3
  41abb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41abb6:	460d      	mov	r5, r1
  41abb8:	0711      	lsls	r1, r2, #28
  41abba:	4680      	mov	r8, r0
  41abbc:	d43a      	bmi.n	41ac34 <__sflush_r+0x88>
  41abbe:	686a      	ldr	r2, [r5, #4]
  41abc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41abc4:	2a00      	cmp	r2, #0
  41abc6:	81ab      	strh	r3, [r5, #12]
  41abc8:	dd6f      	ble.n	41acaa <__sflush_r+0xfe>
  41abca:	6aac      	ldr	r4, [r5, #40]	; 0x28
  41abcc:	2c00      	cmp	r4, #0
  41abce:	d049      	beq.n	41ac64 <__sflush_r+0xb8>
  41abd0:	2200      	movs	r2, #0
  41abd2:	b29b      	uxth	r3, r3
  41abd4:	f8d8 6000 	ldr.w	r6, [r8]
  41abd8:	f8c8 2000 	str.w	r2, [r8]
  41abdc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  41abe0:	d067      	beq.n	41acb2 <__sflush_r+0x106>
  41abe2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  41abe4:	075f      	lsls	r7, r3, #29
  41abe6:	d505      	bpl.n	41abf4 <__sflush_r+0x48>
  41abe8:	6869      	ldr	r1, [r5, #4]
  41abea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  41abec:	1a52      	subs	r2, r2, r1
  41abee:	b10b      	cbz	r3, 41abf4 <__sflush_r+0x48>
  41abf0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  41abf2:	1ad2      	subs	r2, r2, r3
  41abf4:	2300      	movs	r3, #0
  41abf6:	69e9      	ldr	r1, [r5, #28]
  41abf8:	4640      	mov	r0, r8
  41abfa:	47a0      	blx	r4
  41abfc:	1c44      	adds	r4, r0, #1
  41abfe:	d03c      	beq.n	41ac7a <__sflush_r+0xce>
  41ac00:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  41ac04:	692a      	ldr	r2, [r5, #16]
  41ac06:	602a      	str	r2, [r5, #0]
  41ac08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41ac0c:	2200      	movs	r2, #0
  41ac0e:	81ab      	strh	r3, [r5, #12]
  41ac10:	04db      	lsls	r3, r3, #19
  41ac12:	606a      	str	r2, [r5, #4]
  41ac14:	d447      	bmi.n	41aca6 <__sflush_r+0xfa>
  41ac16:	6b29      	ldr	r1, [r5, #48]	; 0x30
  41ac18:	f8c8 6000 	str.w	r6, [r8]
  41ac1c:	b311      	cbz	r1, 41ac64 <__sflush_r+0xb8>
  41ac1e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  41ac22:	4299      	cmp	r1, r3
  41ac24:	d002      	beq.n	41ac2c <__sflush_r+0x80>
  41ac26:	4640      	mov	r0, r8
  41ac28:	f000 f9de 	bl	41afe8 <_free_r>
  41ac2c:	2000      	movs	r0, #0
  41ac2e:	6328      	str	r0, [r5, #48]	; 0x30
  41ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ac34:	692e      	ldr	r6, [r5, #16]
  41ac36:	b1ae      	cbz	r6, 41ac64 <__sflush_r+0xb8>
  41ac38:	682c      	ldr	r4, [r5, #0]
  41ac3a:	602e      	str	r6, [r5, #0]
  41ac3c:	0791      	lsls	r1, r2, #30
  41ac3e:	bf0c      	ite	eq
  41ac40:	696b      	ldreq	r3, [r5, #20]
  41ac42:	2300      	movne	r3, #0
  41ac44:	1ba4      	subs	r4, r4, r6
  41ac46:	60ab      	str	r3, [r5, #8]
  41ac48:	e00a      	b.n	41ac60 <__sflush_r+0xb4>
  41ac4a:	4623      	mov	r3, r4
  41ac4c:	4632      	mov	r2, r6
  41ac4e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  41ac50:	69e9      	ldr	r1, [r5, #28]
  41ac52:	4640      	mov	r0, r8
  41ac54:	47b8      	blx	r7
  41ac56:	2800      	cmp	r0, #0
  41ac58:	eba4 0400 	sub.w	r4, r4, r0
  41ac5c:	4406      	add	r6, r0
  41ac5e:	dd04      	ble.n	41ac6a <__sflush_r+0xbe>
  41ac60:	2c00      	cmp	r4, #0
  41ac62:	dcf2      	bgt.n	41ac4a <__sflush_r+0x9e>
  41ac64:	2000      	movs	r0, #0
  41ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ac6a:	89ab      	ldrh	r3, [r5, #12]
  41ac6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41ac70:	81ab      	strh	r3, [r5, #12]
  41ac72:	f04f 30ff 	mov.w	r0, #4294967295
  41ac76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ac7a:	f8d8 4000 	ldr.w	r4, [r8]
  41ac7e:	2c1d      	cmp	r4, #29
  41ac80:	d8f3      	bhi.n	41ac6a <__sflush_r+0xbe>
  41ac82:	4b19      	ldr	r3, [pc, #100]	; (41ace8 <__sflush_r+0x13c>)
  41ac84:	40e3      	lsrs	r3, r4
  41ac86:	43db      	mvns	r3, r3
  41ac88:	f013 0301 	ands.w	r3, r3, #1
  41ac8c:	d1ed      	bne.n	41ac6a <__sflush_r+0xbe>
  41ac8e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  41ac92:	606b      	str	r3, [r5, #4]
  41ac94:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  41ac98:	6929      	ldr	r1, [r5, #16]
  41ac9a:	81ab      	strh	r3, [r5, #12]
  41ac9c:	04da      	lsls	r2, r3, #19
  41ac9e:	6029      	str	r1, [r5, #0]
  41aca0:	d5b9      	bpl.n	41ac16 <__sflush_r+0x6a>
  41aca2:	2c00      	cmp	r4, #0
  41aca4:	d1b7      	bne.n	41ac16 <__sflush_r+0x6a>
  41aca6:	6528      	str	r0, [r5, #80]	; 0x50
  41aca8:	e7b5      	b.n	41ac16 <__sflush_r+0x6a>
  41acaa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  41acac:	2a00      	cmp	r2, #0
  41acae:	dc8c      	bgt.n	41abca <__sflush_r+0x1e>
  41acb0:	e7d8      	b.n	41ac64 <__sflush_r+0xb8>
  41acb2:	2301      	movs	r3, #1
  41acb4:	69e9      	ldr	r1, [r5, #28]
  41acb6:	4640      	mov	r0, r8
  41acb8:	47a0      	blx	r4
  41acba:	1c43      	adds	r3, r0, #1
  41acbc:	4602      	mov	r2, r0
  41acbe:	d002      	beq.n	41acc6 <__sflush_r+0x11a>
  41acc0:	89ab      	ldrh	r3, [r5, #12]
  41acc2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  41acc4:	e78e      	b.n	41abe4 <__sflush_r+0x38>
  41acc6:	f8d8 3000 	ldr.w	r3, [r8]
  41acca:	2b00      	cmp	r3, #0
  41accc:	d0f8      	beq.n	41acc0 <__sflush_r+0x114>
  41acce:	2b1d      	cmp	r3, #29
  41acd0:	d001      	beq.n	41acd6 <__sflush_r+0x12a>
  41acd2:	2b16      	cmp	r3, #22
  41acd4:	d102      	bne.n	41acdc <__sflush_r+0x130>
  41acd6:	f8c8 6000 	str.w	r6, [r8]
  41acda:	e7c3      	b.n	41ac64 <__sflush_r+0xb8>
  41acdc:	89ab      	ldrh	r3, [r5, #12]
  41acde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41ace2:	81ab      	strh	r3, [r5, #12]
  41ace4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41ace8:	20400001 	.word	0x20400001

0041acec <_fflush_r>:
  41acec:	b538      	push	{r3, r4, r5, lr}
  41acee:	460d      	mov	r5, r1
  41acf0:	4604      	mov	r4, r0
  41acf2:	b108      	cbz	r0, 41acf8 <_fflush_r+0xc>
  41acf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41acf6:	b1bb      	cbz	r3, 41ad28 <_fflush_r+0x3c>
  41acf8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  41acfc:	b188      	cbz	r0, 41ad22 <_fflush_r+0x36>
  41acfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  41ad00:	07db      	lsls	r3, r3, #31
  41ad02:	d401      	bmi.n	41ad08 <_fflush_r+0x1c>
  41ad04:	0581      	lsls	r1, r0, #22
  41ad06:	d517      	bpl.n	41ad38 <_fflush_r+0x4c>
  41ad08:	4620      	mov	r0, r4
  41ad0a:	4629      	mov	r1, r5
  41ad0c:	f7ff ff4e 	bl	41abac <__sflush_r>
  41ad10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  41ad12:	07da      	lsls	r2, r3, #31
  41ad14:	4604      	mov	r4, r0
  41ad16:	d402      	bmi.n	41ad1e <_fflush_r+0x32>
  41ad18:	89ab      	ldrh	r3, [r5, #12]
  41ad1a:	059b      	lsls	r3, r3, #22
  41ad1c:	d507      	bpl.n	41ad2e <_fflush_r+0x42>
  41ad1e:	4620      	mov	r0, r4
  41ad20:	bd38      	pop	{r3, r4, r5, pc}
  41ad22:	4604      	mov	r4, r0
  41ad24:	4620      	mov	r0, r4
  41ad26:	bd38      	pop	{r3, r4, r5, pc}
  41ad28:	f000 f838 	bl	41ad9c <__sinit>
  41ad2c:	e7e4      	b.n	41acf8 <_fflush_r+0xc>
  41ad2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  41ad30:	f000 fbfa 	bl	41b528 <__retarget_lock_release_recursive>
  41ad34:	4620      	mov	r0, r4
  41ad36:	bd38      	pop	{r3, r4, r5, pc}
  41ad38:	6da8      	ldr	r0, [r5, #88]	; 0x58
  41ad3a:	f000 fbf3 	bl	41b524 <__retarget_lock_acquire_recursive>
  41ad3e:	e7e3      	b.n	41ad08 <_fflush_r+0x1c>

0041ad40 <_cleanup_r>:
  41ad40:	4901      	ldr	r1, [pc, #4]	; (41ad48 <_cleanup_r+0x8>)
  41ad42:	f000 bbaf 	b.w	41b4a4 <_fwalk_reent>
  41ad46:	bf00      	nop
  41ad48:	0041bcf9 	.word	0x0041bcf9

0041ad4c <std.isra.0>:
  41ad4c:	b510      	push	{r4, lr}
  41ad4e:	2300      	movs	r3, #0
  41ad50:	4604      	mov	r4, r0
  41ad52:	8181      	strh	r1, [r0, #12]
  41ad54:	81c2      	strh	r2, [r0, #14]
  41ad56:	6003      	str	r3, [r0, #0]
  41ad58:	6043      	str	r3, [r0, #4]
  41ad5a:	6083      	str	r3, [r0, #8]
  41ad5c:	6643      	str	r3, [r0, #100]	; 0x64
  41ad5e:	6103      	str	r3, [r0, #16]
  41ad60:	6143      	str	r3, [r0, #20]
  41ad62:	6183      	str	r3, [r0, #24]
  41ad64:	4619      	mov	r1, r3
  41ad66:	2208      	movs	r2, #8
  41ad68:	305c      	adds	r0, #92	; 0x5c
  41ad6a:	f7fe fbad 	bl	4194c8 <memset>
  41ad6e:	4807      	ldr	r0, [pc, #28]	; (41ad8c <std.isra.0+0x40>)
  41ad70:	4907      	ldr	r1, [pc, #28]	; (41ad90 <std.isra.0+0x44>)
  41ad72:	4a08      	ldr	r2, [pc, #32]	; (41ad94 <std.isra.0+0x48>)
  41ad74:	4b08      	ldr	r3, [pc, #32]	; (41ad98 <std.isra.0+0x4c>)
  41ad76:	6220      	str	r0, [r4, #32]
  41ad78:	61e4      	str	r4, [r4, #28]
  41ad7a:	6261      	str	r1, [r4, #36]	; 0x24
  41ad7c:	62a2      	str	r2, [r4, #40]	; 0x28
  41ad7e:	62e3      	str	r3, [r4, #44]	; 0x2c
  41ad80:	f104 0058 	add.w	r0, r4, #88	; 0x58
  41ad84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41ad88:	f000 bbc8 	b.w	41b51c <__retarget_lock_init_recursive>
  41ad8c:	0041ba3d 	.word	0x0041ba3d
  41ad90:	0041ba61 	.word	0x0041ba61
  41ad94:	0041ba9d 	.word	0x0041ba9d
  41ad98:	0041babd 	.word	0x0041babd

0041ad9c <__sinit>:
  41ad9c:	b510      	push	{r4, lr}
  41ad9e:	4604      	mov	r4, r0
  41ada0:	4812      	ldr	r0, [pc, #72]	; (41adec <__sinit+0x50>)
  41ada2:	f000 fbbf 	bl	41b524 <__retarget_lock_acquire_recursive>
  41ada6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  41ada8:	b9d2      	cbnz	r2, 41ade0 <__sinit+0x44>
  41adaa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  41adae:	4810      	ldr	r0, [pc, #64]	; (41adf0 <__sinit+0x54>)
  41adb0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  41adb4:	2103      	movs	r1, #3
  41adb6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  41adba:	63e0      	str	r0, [r4, #60]	; 0x3c
  41adbc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  41adc0:	6860      	ldr	r0, [r4, #4]
  41adc2:	2104      	movs	r1, #4
  41adc4:	f7ff ffc2 	bl	41ad4c <std.isra.0>
  41adc8:	2201      	movs	r2, #1
  41adca:	2109      	movs	r1, #9
  41adcc:	68a0      	ldr	r0, [r4, #8]
  41adce:	f7ff ffbd 	bl	41ad4c <std.isra.0>
  41add2:	2202      	movs	r2, #2
  41add4:	2112      	movs	r1, #18
  41add6:	68e0      	ldr	r0, [r4, #12]
  41add8:	f7ff ffb8 	bl	41ad4c <std.isra.0>
  41addc:	2301      	movs	r3, #1
  41adde:	63a3      	str	r3, [r4, #56]	; 0x38
  41ade0:	4802      	ldr	r0, [pc, #8]	; (41adec <__sinit+0x50>)
  41ade2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41ade6:	f000 bb9f 	b.w	41b528 <__retarget_lock_release_recursive>
  41adea:	bf00      	nop
  41adec:	2043a144 	.word	0x2043a144
  41adf0:	0041ad41 	.word	0x0041ad41

0041adf4 <__sfp_lock_acquire>:
  41adf4:	4801      	ldr	r0, [pc, #4]	; (41adfc <__sfp_lock_acquire+0x8>)
  41adf6:	f000 bb95 	b.w	41b524 <__retarget_lock_acquire_recursive>
  41adfa:	bf00      	nop
  41adfc:	2043a158 	.word	0x2043a158

0041ae00 <__sfp_lock_release>:
  41ae00:	4801      	ldr	r0, [pc, #4]	; (41ae08 <__sfp_lock_release+0x8>)
  41ae02:	f000 bb91 	b.w	41b528 <__retarget_lock_release_recursive>
  41ae06:	bf00      	nop
  41ae08:	2043a158 	.word	0x2043a158

0041ae0c <__libc_fini_array>:
  41ae0c:	b538      	push	{r3, r4, r5, lr}
  41ae0e:	4c0a      	ldr	r4, [pc, #40]	; (41ae38 <__libc_fini_array+0x2c>)
  41ae10:	4d0a      	ldr	r5, [pc, #40]	; (41ae3c <__libc_fini_array+0x30>)
  41ae12:	1b64      	subs	r4, r4, r5
  41ae14:	10a4      	asrs	r4, r4, #2
  41ae16:	d00a      	beq.n	41ae2e <__libc_fini_array+0x22>
  41ae18:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  41ae1c:	3b01      	subs	r3, #1
  41ae1e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  41ae22:	3c01      	subs	r4, #1
  41ae24:	f855 3904 	ldr.w	r3, [r5], #-4
  41ae28:	4798      	blx	r3
  41ae2a:	2c00      	cmp	r4, #0
  41ae2c:	d1f9      	bne.n	41ae22 <__libc_fini_array+0x16>
  41ae2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  41ae32:	f008 b8ef 	b.w	423014 <_fini>
  41ae36:	bf00      	nop
  41ae38:	00423024 	.word	0x00423024
  41ae3c:	00423020 	.word	0x00423020

0041ae40 <__fputwc>:
  41ae40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41ae44:	b082      	sub	sp, #8
  41ae46:	4680      	mov	r8, r0
  41ae48:	4689      	mov	r9, r1
  41ae4a:	4614      	mov	r4, r2
  41ae4c:	f000 fb54 	bl	41b4f8 <__locale_mb_cur_max>
  41ae50:	2801      	cmp	r0, #1
  41ae52:	d036      	beq.n	41aec2 <__fputwc+0x82>
  41ae54:	464a      	mov	r2, r9
  41ae56:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  41ae5a:	a901      	add	r1, sp, #4
  41ae5c:	4640      	mov	r0, r8
  41ae5e:	f000 fe89 	bl	41bb74 <_wcrtomb_r>
  41ae62:	1c42      	adds	r2, r0, #1
  41ae64:	4606      	mov	r6, r0
  41ae66:	d025      	beq.n	41aeb4 <__fputwc+0x74>
  41ae68:	b3a8      	cbz	r0, 41aed6 <__fputwc+0x96>
  41ae6a:	f89d e004 	ldrb.w	lr, [sp, #4]
  41ae6e:	2500      	movs	r5, #0
  41ae70:	f10d 0a04 	add.w	sl, sp, #4
  41ae74:	e009      	b.n	41ae8a <__fputwc+0x4a>
  41ae76:	6823      	ldr	r3, [r4, #0]
  41ae78:	1c5a      	adds	r2, r3, #1
  41ae7a:	6022      	str	r2, [r4, #0]
  41ae7c:	f883 e000 	strb.w	lr, [r3]
  41ae80:	3501      	adds	r5, #1
  41ae82:	42b5      	cmp	r5, r6
  41ae84:	d227      	bcs.n	41aed6 <__fputwc+0x96>
  41ae86:	f815 e00a 	ldrb.w	lr, [r5, sl]
  41ae8a:	68a3      	ldr	r3, [r4, #8]
  41ae8c:	3b01      	subs	r3, #1
  41ae8e:	2b00      	cmp	r3, #0
  41ae90:	60a3      	str	r3, [r4, #8]
  41ae92:	daf0      	bge.n	41ae76 <__fputwc+0x36>
  41ae94:	69a7      	ldr	r7, [r4, #24]
  41ae96:	42bb      	cmp	r3, r7
  41ae98:	4671      	mov	r1, lr
  41ae9a:	4622      	mov	r2, r4
  41ae9c:	4640      	mov	r0, r8
  41ae9e:	db02      	blt.n	41aea6 <__fputwc+0x66>
  41aea0:	f1be 0f0a 	cmp.w	lr, #10
  41aea4:	d1e7      	bne.n	41ae76 <__fputwc+0x36>
  41aea6:	f000 fe0d 	bl	41bac4 <__swbuf_r>
  41aeaa:	1c43      	adds	r3, r0, #1
  41aeac:	d1e8      	bne.n	41ae80 <__fputwc+0x40>
  41aeae:	b002      	add	sp, #8
  41aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41aeb4:	89a3      	ldrh	r3, [r4, #12]
  41aeb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41aeba:	81a3      	strh	r3, [r4, #12]
  41aebc:	b002      	add	sp, #8
  41aebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41aec2:	f109 33ff 	add.w	r3, r9, #4294967295
  41aec6:	2bfe      	cmp	r3, #254	; 0xfe
  41aec8:	d8c4      	bhi.n	41ae54 <__fputwc+0x14>
  41aeca:	fa5f fe89 	uxtb.w	lr, r9
  41aece:	4606      	mov	r6, r0
  41aed0:	f88d e004 	strb.w	lr, [sp, #4]
  41aed4:	e7cb      	b.n	41ae6e <__fputwc+0x2e>
  41aed6:	4648      	mov	r0, r9
  41aed8:	b002      	add	sp, #8
  41aeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41aede:	bf00      	nop

0041aee0 <_fputwc_r>:
  41aee0:	b530      	push	{r4, r5, lr}
  41aee2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  41aee4:	f013 0f01 	tst.w	r3, #1
  41aee8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  41aeec:	4614      	mov	r4, r2
  41aeee:	b083      	sub	sp, #12
  41aef0:	4605      	mov	r5, r0
  41aef2:	b29a      	uxth	r2, r3
  41aef4:	d101      	bne.n	41aefa <_fputwc_r+0x1a>
  41aef6:	0590      	lsls	r0, r2, #22
  41aef8:	d51c      	bpl.n	41af34 <_fputwc_r+0x54>
  41aefa:	0490      	lsls	r0, r2, #18
  41aefc:	d406      	bmi.n	41af0c <_fputwc_r+0x2c>
  41aefe:	6e62      	ldr	r2, [r4, #100]	; 0x64
  41af00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  41af04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  41af08:	81a3      	strh	r3, [r4, #12]
  41af0a:	6662      	str	r2, [r4, #100]	; 0x64
  41af0c:	4628      	mov	r0, r5
  41af0e:	4622      	mov	r2, r4
  41af10:	f7ff ff96 	bl	41ae40 <__fputwc>
  41af14:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41af16:	07da      	lsls	r2, r3, #31
  41af18:	4605      	mov	r5, r0
  41af1a:	d402      	bmi.n	41af22 <_fputwc_r+0x42>
  41af1c:	89a3      	ldrh	r3, [r4, #12]
  41af1e:	059b      	lsls	r3, r3, #22
  41af20:	d502      	bpl.n	41af28 <_fputwc_r+0x48>
  41af22:	4628      	mov	r0, r5
  41af24:	b003      	add	sp, #12
  41af26:	bd30      	pop	{r4, r5, pc}
  41af28:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41af2a:	f000 fafd 	bl	41b528 <__retarget_lock_release_recursive>
  41af2e:	4628      	mov	r0, r5
  41af30:	b003      	add	sp, #12
  41af32:	bd30      	pop	{r4, r5, pc}
  41af34:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41af36:	9101      	str	r1, [sp, #4]
  41af38:	f000 faf4 	bl	41b524 <__retarget_lock_acquire_recursive>
  41af3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41af40:	9901      	ldr	r1, [sp, #4]
  41af42:	b29a      	uxth	r2, r3
  41af44:	e7d9      	b.n	41aefa <_fputwc_r+0x1a>
  41af46:	bf00      	nop

0041af48 <_malloc_trim_r>:
  41af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41af4a:	4f24      	ldr	r7, [pc, #144]	; (41afdc <_malloc_trim_r+0x94>)
  41af4c:	460c      	mov	r4, r1
  41af4e:	4606      	mov	r6, r0
  41af50:	f7fe fb08 	bl	419564 <__malloc_lock>
  41af54:	68bb      	ldr	r3, [r7, #8]
  41af56:	685d      	ldr	r5, [r3, #4]
  41af58:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  41af5c:	310f      	adds	r1, #15
  41af5e:	f025 0503 	bic.w	r5, r5, #3
  41af62:	4429      	add	r1, r5
  41af64:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  41af68:	f021 010f 	bic.w	r1, r1, #15
  41af6c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  41af70:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  41af74:	db07      	blt.n	41af86 <_malloc_trim_r+0x3e>
  41af76:	2100      	movs	r1, #0
  41af78:	4630      	mov	r0, r6
  41af7a:	f7fe faff 	bl	41957c <_sbrk_r>
  41af7e:	68bb      	ldr	r3, [r7, #8]
  41af80:	442b      	add	r3, r5
  41af82:	4298      	cmp	r0, r3
  41af84:	d004      	beq.n	41af90 <_malloc_trim_r+0x48>
  41af86:	4630      	mov	r0, r6
  41af88:	f7fe faf2 	bl	419570 <__malloc_unlock>
  41af8c:	2000      	movs	r0, #0
  41af8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41af90:	4261      	negs	r1, r4
  41af92:	4630      	mov	r0, r6
  41af94:	f7fe faf2 	bl	41957c <_sbrk_r>
  41af98:	3001      	adds	r0, #1
  41af9a:	d00d      	beq.n	41afb8 <_malloc_trim_r+0x70>
  41af9c:	4b10      	ldr	r3, [pc, #64]	; (41afe0 <_malloc_trim_r+0x98>)
  41af9e:	68ba      	ldr	r2, [r7, #8]
  41afa0:	6819      	ldr	r1, [r3, #0]
  41afa2:	1b2d      	subs	r5, r5, r4
  41afa4:	f045 0501 	orr.w	r5, r5, #1
  41afa8:	4630      	mov	r0, r6
  41afaa:	1b09      	subs	r1, r1, r4
  41afac:	6055      	str	r5, [r2, #4]
  41afae:	6019      	str	r1, [r3, #0]
  41afb0:	f7fe fade 	bl	419570 <__malloc_unlock>
  41afb4:	2001      	movs	r0, #1
  41afb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41afb8:	2100      	movs	r1, #0
  41afba:	4630      	mov	r0, r6
  41afbc:	f7fe fade 	bl	41957c <_sbrk_r>
  41afc0:	68ba      	ldr	r2, [r7, #8]
  41afc2:	1a83      	subs	r3, r0, r2
  41afc4:	2b0f      	cmp	r3, #15
  41afc6:	ddde      	ble.n	41af86 <_malloc_trim_r+0x3e>
  41afc8:	4c06      	ldr	r4, [pc, #24]	; (41afe4 <_malloc_trim_r+0x9c>)
  41afca:	4905      	ldr	r1, [pc, #20]	; (41afe0 <_malloc_trim_r+0x98>)
  41afcc:	6824      	ldr	r4, [r4, #0]
  41afce:	f043 0301 	orr.w	r3, r3, #1
  41afd2:	1b00      	subs	r0, r0, r4
  41afd4:	6053      	str	r3, [r2, #4]
  41afd6:	6008      	str	r0, [r1, #0]
  41afd8:	e7d5      	b.n	41af86 <_malloc_trim_r+0x3e>
  41afda:	bf00      	nop
  41afdc:	20400468 	.word	0x20400468
  41afe0:	20439e00 	.word	0x20439e00
  41afe4:	20400870 	.word	0x20400870

0041afe8 <_free_r>:
  41afe8:	2900      	cmp	r1, #0
  41afea:	d044      	beq.n	41b076 <_free_r+0x8e>
  41afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41aff0:	460d      	mov	r5, r1
  41aff2:	4680      	mov	r8, r0
  41aff4:	f7fe fab6 	bl	419564 <__malloc_lock>
  41aff8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  41affc:	4969      	ldr	r1, [pc, #420]	; (41b1a4 <_free_r+0x1bc>)
  41affe:	f027 0301 	bic.w	r3, r7, #1
  41b002:	f1a5 0408 	sub.w	r4, r5, #8
  41b006:	18e2      	adds	r2, r4, r3
  41b008:	688e      	ldr	r6, [r1, #8]
  41b00a:	6850      	ldr	r0, [r2, #4]
  41b00c:	42b2      	cmp	r2, r6
  41b00e:	f020 0003 	bic.w	r0, r0, #3
  41b012:	d05e      	beq.n	41b0d2 <_free_r+0xea>
  41b014:	07fe      	lsls	r6, r7, #31
  41b016:	6050      	str	r0, [r2, #4]
  41b018:	d40b      	bmi.n	41b032 <_free_r+0x4a>
  41b01a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  41b01e:	1be4      	subs	r4, r4, r7
  41b020:	f101 0e08 	add.w	lr, r1, #8
  41b024:	68a5      	ldr	r5, [r4, #8]
  41b026:	4575      	cmp	r5, lr
  41b028:	443b      	add	r3, r7
  41b02a:	d06d      	beq.n	41b108 <_free_r+0x120>
  41b02c:	68e7      	ldr	r7, [r4, #12]
  41b02e:	60ef      	str	r7, [r5, #12]
  41b030:	60bd      	str	r5, [r7, #8]
  41b032:	1815      	adds	r5, r2, r0
  41b034:	686d      	ldr	r5, [r5, #4]
  41b036:	07ed      	lsls	r5, r5, #31
  41b038:	d53e      	bpl.n	41b0b8 <_free_r+0xd0>
  41b03a:	f043 0201 	orr.w	r2, r3, #1
  41b03e:	6062      	str	r2, [r4, #4]
  41b040:	50e3      	str	r3, [r4, r3]
  41b042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41b046:	d217      	bcs.n	41b078 <_free_r+0x90>
  41b048:	08db      	lsrs	r3, r3, #3
  41b04a:	1c58      	adds	r0, r3, #1
  41b04c:	109a      	asrs	r2, r3, #2
  41b04e:	684d      	ldr	r5, [r1, #4]
  41b050:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  41b054:	60a7      	str	r7, [r4, #8]
  41b056:	2301      	movs	r3, #1
  41b058:	4093      	lsls	r3, r2
  41b05a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  41b05e:	432b      	orrs	r3, r5
  41b060:	3a08      	subs	r2, #8
  41b062:	60e2      	str	r2, [r4, #12]
  41b064:	604b      	str	r3, [r1, #4]
  41b066:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  41b06a:	60fc      	str	r4, [r7, #12]
  41b06c:	4640      	mov	r0, r8
  41b06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41b072:	f7fe ba7d 	b.w	419570 <__malloc_unlock>
  41b076:	4770      	bx	lr
  41b078:	0a5a      	lsrs	r2, r3, #9
  41b07a:	2a04      	cmp	r2, #4
  41b07c:	d852      	bhi.n	41b124 <_free_r+0x13c>
  41b07e:	099a      	lsrs	r2, r3, #6
  41b080:	f102 0739 	add.w	r7, r2, #57	; 0x39
  41b084:	00ff      	lsls	r7, r7, #3
  41b086:	f102 0538 	add.w	r5, r2, #56	; 0x38
  41b08a:	19c8      	adds	r0, r1, r7
  41b08c:	59ca      	ldr	r2, [r1, r7]
  41b08e:	3808      	subs	r0, #8
  41b090:	4290      	cmp	r0, r2
  41b092:	d04f      	beq.n	41b134 <_free_r+0x14c>
  41b094:	6851      	ldr	r1, [r2, #4]
  41b096:	f021 0103 	bic.w	r1, r1, #3
  41b09a:	428b      	cmp	r3, r1
  41b09c:	d232      	bcs.n	41b104 <_free_r+0x11c>
  41b09e:	6892      	ldr	r2, [r2, #8]
  41b0a0:	4290      	cmp	r0, r2
  41b0a2:	d1f7      	bne.n	41b094 <_free_r+0xac>
  41b0a4:	68c3      	ldr	r3, [r0, #12]
  41b0a6:	60a0      	str	r0, [r4, #8]
  41b0a8:	60e3      	str	r3, [r4, #12]
  41b0aa:	609c      	str	r4, [r3, #8]
  41b0ac:	60c4      	str	r4, [r0, #12]
  41b0ae:	4640      	mov	r0, r8
  41b0b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41b0b4:	f7fe ba5c 	b.w	419570 <__malloc_unlock>
  41b0b8:	6895      	ldr	r5, [r2, #8]
  41b0ba:	4f3b      	ldr	r7, [pc, #236]	; (41b1a8 <_free_r+0x1c0>)
  41b0bc:	42bd      	cmp	r5, r7
  41b0be:	4403      	add	r3, r0
  41b0c0:	d040      	beq.n	41b144 <_free_r+0x15c>
  41b0c2:	68d0      	ldr	r0, [r2, #12]
  41b0c4:	60e8      	str	r0, [r5, #12]
  41b0c6:	f043 0201 	orr.w	r2, r3, #1
  41b0ca:	6085      	str	r5, [r0, #8]
  41b0cc:	6062      	str	r2, [r4, #4]
  41b0ce:	50e3      	str	r3, [r4, r3]
  41b0d0:	e7b7      	b.n	41b042 <_free_r+0x5a>
  41b0d2:	07ff      	lsls	r7, r7, #31
  41b0d4:	4403      	add	r3, r0
  41b0d6:	d407      	bmi.n	41b0e8 <_free_r+0x100>
  41b0d8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  41b0dc:	1aa4      	subs	r4, r4, r2
  41b0de:	4413      	add	r3, r2
  41b0e0:	68a0      	ldr	r0, [r4, #8]
  41b0e2:	68e2      	ldr	r2, [r4, #12]
  41b0e4:	60c2      	str	r2, [r0, #12]
  41b0e6:	6090      	str	r0, [r2, #8]
  41b0e8:	4a30      	ldr	r2, [pc, #192]	; (41b1ac <_free_r+0x1c4>)
  41b0ea:	6812      	ldr	r2, [r2, #0]
  41b0ec:	f043 0001 	orr.w	r0, r3, #1
  41b0f0:	4293      	cmp	r3, r2
  41b0f2:	6060      	str	r0, [r4, #4]
  41b0f4:	608c      	str	r4, [r1, #8]
  41b0f6:	d3b9      	bcc.n	41b06c <_free_r+0x84>
  41b0f8:	4b2d      	ldr	r3, [pc, #180]	; (41b1b0 <_free_r+0x1c8>)
  41b0fa:	4640      	mov	r0, r8
  41b0fc:	6819      	ldr	r1, [r3, #0]
  41b0fe:	f7ff ff23 	bl	41af48 <_malloc_trim_r>
  41b102:	e7b3      	b.n	41b06c <_free_r+0x84>
  41b104:	4610      	mov	r0, r2
  41b106:	e7cd      	b.n	41b0a4 <_free_r+0xbc>
  41b108:	1811      	adds	r1, r2, r0
  41b10a:	6849      	ldr	r1, [r1, #4]
  41b10c:	07c9      	lsls	r1, r1, #31
  41b10e:	d444      	bmi.n	41b19a <_free_r+0x1b2>
  41b110:	6891      	ldr	r1, [r2, #8]
  41b112:	68d2      	ldr	r2, [r2, #12]
  41b114:	60ca      	str	r2, [r1, #12]
  41b116:	4403      	add	r3, r0
  41b118:	f043 0001 	orr.w	r0, r3, #1
  41b11c:	6091      	str	r1, [r2, #8]
  41b11e:	6060      	str	r0, [r4, #4]
  41b120:	50e3      	str	r3, [r4, r3]
  41b122:	e7a3      	b.n	41b06c <_free_r+0x84>
  41b124:	2a14      	cmp	r2, #20
  41b126:	d816      	bhi.n	41b156 <_free_r+0x16e>
  41b128:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  41b12c:	00ff      	lsls	r7, r7, #3
  41b12e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  41b132:	e7aa      	b.n	41b08a <_free_r+0xa2>
  41b134:	10aa      	asrs	r2, r5, #2
  41b136:	2301      	movs	r3, #1
  41b138:	684d      	ldr	r5, [r1, #4]
  41b13a:	4093      	lsls	r3, r2
  41b13c:	432b      	orrs	r3, r5
  41b13e:	604b      	str	r3, [r1, #4]
  41b140:	4603      	mov	r3, r0
  41b142:	e7b0      	b.n	41b0a6 <_free_r+0xbe>
  41b144:	f043 0201 	orr.w	r2, r3, #1
  41b148:	614c      	str	r4, [r1, #20]
  41b14a:	610c      	str	r4, [r1, #16]
  41b14c:	60e5      	str	r5, [r4, #12]
  41b14e:	60a5      	str	r5, [r4, #8]
  41b150:	6062      	str	r2, [r4, #4]
  41b152:	50e3      	str	r3, [r4, r3]
  41b154:	e78a      	b.n	41b06c <_free_r+0x84>
  41b156:	2a54      	cmp	r2, #84	; 0x54
  41b158:	d806      	bhi.n	41b168 <_free_r+0x180>
  41b15a:	0b1a      	lsrs	r2, r3, #12
  41b15c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  41b160:	00ff      	lsls	r7, r7, #3
  41b162:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  41b166:	e790      	b.n	41b08a <_free_r+0xa2>
  41b168:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  41b16c:	d806      	bhi.n	41b17c <_free_r+0x194>
  41b16e:	0bda      	lsrs	r2, r3, #15
  41b170:	f102 0778 	add.w	r7, r2, #120	; 0x78
  41b174:	00ff      	lsls	r7, r7, #3
  41b176:	f102 0577 	add.w	r5, r2, #119	; 0x77
  41b17a:	e786      	b.n	41b08a <_free_r+0xa2>
  41b17c:	f240 5054 	movw	r0, #1364	; 0x554
  41b180:	4282      	cmp	r2, r0
  41b182:	d806      	bhi.n	41b192 <_free_r+0x1aa>
  41b184:	0c9a      	lsrs	r2, r3, #18
  41b186:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  41b18a:	00ff      	lsls	r7, r7, #3
  41b18c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  41b190:	e77b      	b.n	41b08a <_free_r+0xa2>
  41b192:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  41b196:	257e      	movs	r5, #126	; 0x7e
  41b198:	e777      	b.n	41b08a <_free_r+0xa2>
  41b19a:	f043 0101 	orr.w	r1, r3, #1
  41b19e:	6061      	str	r1, [r4, #4]
  41b1a0:	6013      	str	r3, [r2, #0]
  41b1a2:	e763      	b.n	41b06c <_free_r+0x84>
  41b1a4:	20400468 	.word	0x20400468
  41b1a8:	20400470 	.word	0x20400470
  41b1ac:	20400874 	.word	0x20400874
  41b1b0:	20439e30 	.word	0x20439e30

0041b1b4 <__sfvwrite_r>:
  41b1b4:	6893      	ldr	r3, [r2, #8]
  41b1b6:	2b00      	cmp	r3, #0
  41b1b8:	d073      	beq.n	41b2a2 <__sfvwrite_r+0xee>
  41b1ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41b1be:	898b      	ldrh	r3, [r1, #12]
  41b1c0:	b083      	sub	sp, #12
  41b1c2:	460c      	mov	r4, r1
  41b1c4:	0719      	lsls	r1, r3, #28
  41b1c6:	9000      	str	r0, [sp, #0]
  41b1c8:	4616      	mov	r6, r2
  41b1ca:	d526      	bpl.n	41b21a <__sfvwrite_r+0x66>
  41b1cc:	6922      	ldr	r2, [r4, #16]
  41b1ce:	b322      	cbz	r2, 41b21a <__sfvwrite_r+0x66>
  41b1d0:	f013 0002 	ands.w	r0, r3, #2
  41b1d4:	6835      	ldr	r5, [r6, #0]
  41b1d6:	d02c      	beq.n	41b232 <__sfvwrite_r+0x7e>
  41b1d8:	f04f 0900 	mov.w	r9, #0
  41b1dc:	4fb0      	ldr	r7, [pc, #704]	; (41b4a0 <__sfvwrite_r+0x2ec>)
  41b1de:	46c8      	mov	r8, r9
  41b1e0:	46b2      	mov	sl, r6
  41b1e2:	45b8      	cmp	r8, r7
  41b1e4:	4643      	mov	r3, r8
  41b1e6:	464a      	mov	r2, r9
  41b1e8:	bf28      	it	cs
  41b1ea:	463b      	movcs	r3, r7
  41b1ec:	9800      	ldr	r0, [sp, #0]
  41b1ee:	f1b8 0f00 	cmp.w	r8, #0
  41b1f2:	d050      	beq.n	41b296 <__sfvwrite_r+0xe2>
  41b1f4:	69e1      	ldr	r1, [r4, #28]
  41b1f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  41b1f8:	47b0      	blx	r6
  41b1fa:	2800      	cmp	r0, #0
  41b1fc:	dd58      	ble.n	41b2b0 <__sfvwrite_r+0xfc>
  41b1fe:	f8da 3008 	ldr.w	r3, [sl, #8]
  41b202:	1a1b      	subs	r3, r3, r0
  41b204:	4481      	add	r9, r0
  41b206:	eba8 0800 	sub.w	r8, r8, r0
  41b20a:	f8ca 3008 	str.w	r3, [sl, #8]
  41b20e:	2b00      	cmp	r3, #0
  41b210:	d1e7      	bne.n	41b1e2 <__sfvwrite_r+0x2e>
  41b212:	2000      	movs	r0, #0
  41b214:	b003      	add	sp, #12
  41b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41b21a:	4621      	mov	r1, r4
  41b21c:	9800      	ldr	r0, [sp, #0]
  41b21e:	f7ff fc51 	bl	41aac4 <__swsetup_r>
  41b222:	2800      	cmp	r0, #0
  41b224:	f040 8133 	bne.w	41b48e <__sfvwrite_r+0x2da>
  41b228:	89a3      	ldrh	r3, [r4, #12]
  41b22a:	6835      	ldr	r5, [r6, #0]
  41b22c:	f013 0002 	ands.w	r0, r3, #2
  41b230:	d1d2      	bne.n	41b1d8 <__sfvwrite_r+0x24>
  41b232:	f013 0901 	ands.w	r9, r3, #1
  41b236:	d145      	bne.n	41b2c4 <__sfvwrite_r+0x110>
  41b238:	464f      	mov	r7, r9
  41b23a:	9601      	str	r6, [sp, #4]
  41b23c:	b337      	cbz	r7, 41b28c <__sfvwrite_r+0xd8>
  41b23e:	059a      	lsls	r2, r3, #22
  41b240:	f8d4 8008 	ldr.w	r8, [r4, #8]
  41b244:	f140 8083 	bpl.w	41b34e <__sfvwrite_r+0x19a>
  41b248:	4547      	cmp	r7, r8
  41b24a:	46c3      	mov	fp, r8
  41b24c:	f0c0 80ab 	bcc.w	41b3a6 <__sfvwrite_r+0x1f2>
  41b250:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41b254:	f040 80ac 	bne.w	41b3b0 <__sfvwrite_r+0x1fc>
  41b258:	6820      	ldr	r0, [r4, #0]
  41b25a:	46ba      	mov	sl, r7
  41b25c:	465a      	mov	r2, fp
  41b25e:	4649      	mov	r1, r9
  41b260:	f7fe f8ce 	bl	419400 <memmove>
  41b264:	68a2      	ldr	r2, [r4, #8]
  41b266:	6823      	ldr	r3, [r4, #0]
  41b268:	eba2 0208 	sub.w	r2, r2, r8
  41b26c:	445b      	add	r3, fp
  41b26e:	60a2      	str	r2, [r4, #8]
  41b270:	6023      	str	r3, [r4, #0]
  41b272:	9a01      	ldr	r2, [sp, #4]
  41b274:	6893      	ldr	r3, [r2, #8]
  41b276:	eba3 030a 	sub.w	r3, r3, sl
  41b27a:	44d1      	add	r9, sl
  41b27c:	eba7 070a 	sub.w	r7, r7, sl
  41b280:	6093      	str	r3, [r2, #8]
  41b282:	2b00      	cmp	r3, #0
  41b284:	d0c5      	beq.n	41b212 <__sfvwrite_r+0x5e>
  41b286:	89a3      	ldrh	r3, [r4, #12]
  41b288:	2f00      	cmp	r7, #0
  41b28a:	d1d8      	bne.n	41b23e <__sfvwrite_r+0x8a>
  41b28c:	f8d5 9000 	ldr.w	r9, [r5]
  41b290:	686f      	ldr	r7, [r5, #4]
  41b292:	3508      	adds	r5, #8
  41b294:	e7d2      	b.n	41b23c <__sfvwrite_r+0x88>
  41b296:	f8d5 9000 	ldr.w	r9, [r5]
  41b29a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  41b29e:	3508      	adds	r5, #8
  41b2a0:	e79f      	b.n	41b1e2 <__sfvwrite_r+0x2e>
  41b2a2:	2000      	movs	r0, #0
  41b2a4:	4770      	bx	lr
  41b2a6:	4621      	mov	r1, r4
  41b2a8:	9800      	ldr	r0, [sp, #0]
  41b2aa:	f7ff fd1f 	bl	41acec <_fflush_r>
  41b2ae:	b370      	cbz	r0, 41b30e <__sfvwrite_r+0x15a>
  41b2b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41b2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41b2b8:	f04f 30ff 	mov.w	r0, #4294967295
  41b2bc:	81a3      	strh	r3, [r4, #12]
  41b2be:	b003      	add	sp, #12
  41b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41b2c4:	4681      	mov	r9, r0
  41b2c6:	4633      	mov	r3, r6
  41b2c8:	464e      	mov	r6, r9
  41b2ca:	46a8      	mov	r8, r5
  41b2cc:	469a      	mov	sl, r3
  41b2ce:	464d      	mov	r5, r9
  41b2d0:	b34e      	cbz	r6, 41b326 <__sfvwrite_r+0x172>
  41b2d2:	b380      	cbz	r0, 41b336 <__sfvwrite_r+0x182>
  41b2d4:	6820      	ldr	r0, [r4, #0]
  41b2d6:	6923      	ldr	r3, [r4, #16]
  41b2d8:	6962      	ldr	r2, [r4, #20]
  41b2da:	45b1      	cmp	r9, r6
  41b2dc:	46cb      	mov	fp, r9
  41b2de:	bf28      	it	cs
  41b2e0:	46b3      	movcs	fp, r6
  41b2e2:	4298      	cmp	r0, r3
  41b2e4:	465f      	mov	r7, fp
  41b2e6:	d904      	bls.n	41b2f2 <__sfvwrite_r+0x13e>
  41b2e8:	68a3      	ldr	r3, [r4, #8]
  41b2ea:	4413      	add	r3, r2
  41b2ec:	459b      	cmp	fp, r3
  41b2ee:	f300 80a6 	bgt.w	41b43e <__sfvwrite_r+0x28a>
  41b2f2:	4593      	cmp	fp, r2
  41b2f4:	db4b      	blt.n	41b38e <__sfvwrite_r+0x1da>
  41b2f6:	4613      	mov	r3, r2
  41b2f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41b2fa:	69e1      	ldr	r1, [r4, #28]
  41b2fc:	9800      	ldr	r0, [sp, #0]
  41b2fe:	462a      	mov	r2, r5
  41b300:	47b8      	blx	r7
  41b302:	1e07      	subs	r7, r0, #0
  41b304:	ddd4      	ble.n	41b2b0 <__sfvwrite_r+0xfc>
  41b306:	ebb9 0907 	subs.w	r9, r9, r7
  41b30a:	d0cc      	beq.n	41b2a6 <__sfvwrite_r+0xf2>
  41b30c:	2001      	movs	r0, #1
  41b30e:	f8da 3008 	ldr.w	r3, [sl, #8]
  41b312:	1bdb      	subs	r3, r3, r7
  41b314:	443d      	add	r5, r7
  41b316:	1bf6      	subs	r6, r6, r7
  41b318:	f8ca 3008 	str.w	r3, [sl, #8]
  41b31c:	2b00      	cmp	r3, #0
  41b31e:	f43f af78 	beq.w	41b212 <__sfvwrite_r+0x5e>
  41b322:	2e00      	cmp	r6, #0
  41b324:	d1d5      	bne.n	41b2d2 <__sfvwrite_r+0x11e>
  41b326:	f108 0308 	add.w	r3, r8, #8
  41b32a:	e913 0060 	ldmdb	r3, {r5, r6}
  41b32e:	4698      	mov	r8, r3
  41b330:	3308      	adds	r3, #8
  41b332:	2e00      	cmp	r6, #0
  41b334:	d0f9      	beq.n	41b32a <__sfvwrite_r+0x176>
  41b336:	4632      	mov	r2, r6
  41b338:	210a      	movs	r1, #10
  41b33a:	4628      	mov	r0, r5
  41b33c:	f000 f988 	bl	41b650 <memchr>
  41b340:	2800      	cmp	r0, #0
  41b342:	f000 80a1 	beq.w	41b488 <__sfvwrite_r+0x2d4>
  41b346:	3001      	adds	r0, #1
  41b348:	eba0 0905 	sub.w	r9, r0, r5
  41b34c:	e7c2      	b.n	41b2d4 <__sfvwrite_r+0x120>
  41b34e:	6820      	ldr	r0, [r4, #0]
  41b350:	6923      	ldr	r3, [r4, #16]
  41b352:	4298      	cmp	r0, r3
  41b354:	d802      	bhi.n	41b35c <__sfvwrite_r+0x1a8>
  41b356:	6963      	ldr	r3, [r4, #20]
  41b358:	429f      	cmp	r7, r3
  41b35a:	d25d      	bcs.n	41b418 <__sfvwrite_r+0x264>
  41b35c:	45b8      	cmp	r8, r7
  41b35e:	bf28      	it	cs
  41b360:	46b8      	movcs	r8, r7
  41b362:	4642      	mov	r2, r8
  41b364:	4649      	mov	r1, r9
  41b366:	f7fe f84b 	bl	419400 <memmove>
  41b36a:	68a3      	ldr	r3, [r4, #8]
  41b36c:	6822      	ldr	r2, [r4, #0]
  41b36e:	eba3 0308 	sub.w	r3, r3, r8
  41b372:	4442      	add	r2, r8
  41b374:	60a3      	str	r3, [r4, #8]
  41b376:	6022      	str	r2, [r4, #0]
  41b378:	b10b      	cbz	r3, 41b37e <__sfvwrite_r+0x1ca>
  41b37a:	46c2      	mov	sl, r8
  41b37c:	e779      	b.n	41b272 <__sfvwrite_r+0xbe>
  41b37e:	4621      	mov	r1, r4
  41b380:	9800      	ldr	r0, [sp, #0]
  41b382:	f7ff fcb3 	bl	41acec <_fflush_r>
  41b386:	2800      	cmp	r0, #0
  41b388:	d192      	bne.n	41b2b0 <__sfvwrite_r+0xfc>
  41b38a:	46c2      	mov	sl, r8
  41b38c:	e771      	b.n	41b272 <__sfvwrite_r+0xbe>
  41b38e:	465a      	mov	r2, fp
  41b390:	4629      	mov	r1, r5
  41b392:	f7fe f835 	bl	419400 <memmove>
  41b396:	68a2      	ldr	r2, [r4, #8]
  41b398:	6823      	ldr	r3, [r4, #0]
  41b39a:	eba2 020b 	sub.w	r2, r2, fp
  41b39e:	445b      	add	r3, fp
  41b3a0:	60a2      	str	r2, [r4, #8]
  41b3a2:	6023      	str	r3, [r4, #0]
  41b3a4:	e7af      	b.n	41b306 <__sfvwrite_r+0x152>
  41b3a6:	6820      	ldr	r0, [r4, #0]
  41b3a8:	46b8      	mov	r8, r7
  41b3aa:	46ba      	mov	sl, r7
  41b3ac:	46bb      	mov	fp, r7
  41b3ae:	e755      	b.n	41b25c <__sfvwrite_r+0xa8>
  41b3b0:	6962      	ldr	r2, [r4, #20]
  41b3b2:	6820      	ldr	r0, [r4, #0]
  41b3b4:	6921      	ldr	r1, [r4, #16]
  41b3b6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  41b3ba:	eba0 0a01 	sub.w	sl, r0, r1
  41b3be:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  41b3c2:	f10a 0001 	add.w	r0, sl, #1
  41b3c6:	ea4f 0868 	mov.w	r8, r8, asr #1
  41b3ca:	4438      	add	r0, r7
  41b3cc:	4540      	cmp	r0, r8
  41b3ce:	4642      	mov	r2, r8
  41b3d0:	bf84      	itt	hi
  41b3d2:	4680      	movhi	r8, r0
  41b3d4:	4642      	movhi	r2, r8
  41b3d6:	055b      	lsls	r3, r3, #21
  41b3d8:	d544      	bpl.n	41b464 <__sfvwrite_r+0x2b0>
  41b3da:	4611      	mov	r1, r2
  41b3dc:	9800      	ldr	r0, [sp, #0]
  41b3de:	f7fd fcc5 	bl	418d6c <_malloc_r>
  41b3e2:	4683      	mov	fp, r0
  41b3e4:	2800      	cmp	r0, #0
  41b3e6:	d055      	beq.n	41b494 <__sfvwrite_r+0x2e0>
  41b3e8:	4652      	mov	r2, sl
  41b3ea:	6921      	ldr	r1, [r4, #16]
  41b3ec:	f7fd ff6e 	bl	4192cc <memcpy>
  41b3f0:	89a3      	ldrh	r3, [r4, #12]
  41b3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  41b3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41b3fa:	81a3      	strh	r3, [r4, #12]
  41b3fc:	eb0b 000a 	add.w	r0, fp, sl
  41b400:	eba8 030a 	sub.w	r3, r8, sl
  41b404:	f8c4 b010 	str.w	fp, [r4, #16]
  41b408:	f8c4 8014 	str.w	r8, [r4, #20]
  41b40c:	6020      	str	r0, [r4, #0]
  41b40e:	60a3      	str	r3, [r4, #8]
  41b410:	46b8      	mov	r8, r7
  41b412:	46ba      	mov	sl, r7
  41b414:	46bb      	mov	fp, r7
  41b416:	e721      	b.n	41b25c <__sfvwrite_r+0xa8>
  41b418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  41b41c:	42b9      	cmp	r1, r7
  41b41e:	bf28      	it	cs
  41b420:	4639      	movcs	r1, r7
  41b422:	464a      	mov	r2, r9
  41b424:	fb91 f1f3 	sdiv	r1, r1, r3
  41b428:	9800      	ldr	r0, [sp, #0]
  41b42a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  41b42c:	fb03 f301 	mul.w	r3, r3, r1
  41b430:	69e1      	ldr	r1, [r4, #28]
  41b432:	47b0      	blx	r6
  41b434:	f1b0 0a00 	subs.w	sl, r0, #0
  41b438:	f73f af1b 	bgt.w	41b272 <__sfvwrite_r+0xbe>
  41b43c:	e738      	b.n	41b2b0 <__sfvwrite_r+0xfc>
  41b43e:	461a      	mov	r2, r3
  41b440:	4629      	mov	r1, r5
  41b442:	9301      	str	r3, [sp, #4]
  41b444:	f7fd ffdc 	bl	419400 <memmove>
  41b448:	6822      	ldr	r2, [r4, #0]
  41b44a:	9b01      	ldr	r3, [sp, #4]
  41b44c:	9800      	ldr	r0, [sp, #0]
  41b44e:	441a      	add	r2, r3
  41b450:	6022      	str	r2, [r4, #0]
  41b452:	4621      	mov	r1, r4
  41b454:	f7ff fc4a 	bl	41acec <_fflush_r>
  41b458:	9b01      	ldr	r3, [sp, #4]
  41b45a:	2800      	cmp	r0, #0
  41b45c:	f47f af28 	bne.w	41b2b0 <__sfvwrite_r+0xfc>
  41b460:	461f      	mov	r7, r3
  41b462:	e750      	b.n	41b306 <__sfvwrite_r+0x152>
  41b464:	9800      	ldr	r0, [sp, #0]
  41b466:	f000 f943 	bl	41b6f0 <_realloc_r>
  41b46a:	4683      	mov	fp, r0
  41b46c:	2800      	cmp	r0, #0
  41b46e:	d1c5      	bne.n	41b3fc <__sfvwrite_r+0x248>
  41b470:	9d00      	ldr	r5, [sp, #0]
  41b472:	6921      	ldr	r1, [r4, #16]
  41b474:	4628      	mov	r0, r5
  41b476:	f7ff fdb7 	bl	41afe8 <_free_r>
  41b47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41b47e:	220c      	movs	r2, #12
  41b480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  41b484:	602a      	str	r2, [r5, #0]
  41b486:	e715      	b.n	41b2b4 <__sfvwrite_r+0x100>
  41b488:	f106 0901 	add.w	r9, r6, #1
  41b48c:	e722      	b.n	41b2d4 <__sfvwrite_r+0x120>
  41b48e:	f04f 30ff 	mov.w	r0, #4294967295
  41b492:	e6bf      	b.n	41b214 <__sfvwrite_r+0x60>
  41b494:	9a00      	ldr	r2, [sp, #0]
  41b496:	230c      	movs	r3, #12
  41b498:	6013      	str	r3, [r2, #0]
  41b49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41b49e:	e709      	b.n	41b2b4 <__sfvwrite_r+0x100>
  41b4a0:	7ffffc00 	.word	0x7ffffc00

0041b4a4 <_fwalk_reent>:
  41b4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41b4a8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  41b4ac:	d01f      	beq.n	41b4ee <_fwalk_reent+0x4a>
  41b4ae:	4688      	mov	r8, r1
  41b4b0:	4606      	mov	r6, r0
  41b4b2:	f04f 0900 	mov.w	r9, #0
  41b4b6:	687d      	ldr	r5, [r7, #4]
  41b4b8:	68bc      	ldr	r4, [r7, #8]
  41b4ba:	3d01      	subs	r5, #1
  41b4bc:	d411      	bmi.n	41b4e2 <_fwalk_reent+0x3e>
  41b4be:	89a3      	ldrh	r3, [r4, #12]
  41b4c0:	2b01      	cmp	r3, #1
  41b4c2:	f105 35ff 	add.w	r5, r5, #4294967295
  41b4c6:	d908      	bls.n	41b4da <_fwalk_reent+0x36>
  41b4c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  41b4cc:	3301      	adds	r3, #1
  41b4ce:	4621      	mov	r1, r4
  41b4d0:	4630      	mov	r0, r6
  41b4d2:	d002      	beq.n	41b4da <_fwalk_reent+0x36>
  41b4d4:	47c0      	blx	r8
  41b4d6:	ea49 0900 	orr.w	r9, r9, r0
  41b4da:	1c6b      	adds	r3, r5, #1
  41b4dc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  41b4e0:	d1ed      	bne.n	41b4be <_fwalk_reent+0x1a>
  41b4e2:	683f      	ldr	r7, [r7, #0]
  41b4e4:	2f00      	cmp	r7, #0
  41b4e6:	d1e6      	bne.n	41b4b6 <_fwalk_reent+0x12>
  41b4e8:	4648      	mov	r0, r9
  41b4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41b4ee:	46b9      	mov	r9, r7
  41b4f0:	4648      	mov	r0, r9
  41b4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41b4f6:	bf00      	nop

0041b4f8 <__locale_mb_cur_max>:
  41b4f8:	4b04      	ldr	r3, [pc, #16]	; (41b50c <__locale_mb_cur_max+0x14>)
  41b4fa:	4a05      	ldr	r2, [pc, #20]	; (41b510 <__locale_mb_cur_max+0x18>)
  41b4fc:	681b      	ldr	r3, [r3, #0]
  41b4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  41b500:	2b00      	cmp	r3, #0
  41b502:	bf08      	it	eq
  41b504:	4613      	moveq	r3, r2
  41b506:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  41b50a:	4770      	bx	lr
  41b50c:	20400038 	.word	0x20400038
  41b510:	2040087c 	.word	0x2040087c

0041b514 <__locale_ctype_ptr_l>:
  41b514:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  41b518:	4770      	bx	lr
  41b51a:	bf00      	nop

0041b51c <__retarget_lock_init_recursive>:
  41b51c:	4770      	bx	lr
  41b51e:	bf00      	nop

0041b520 <__retarget_lock_close_recursive>:
  41b520:	4770      	bx	lr
  41b522:	bf00      	nop

0041b524 <__retarget_lock_acquire_recursive>:
  41b524:	4770      	bx	lr
  41b526:	bf00      	nop

0041b528 <__retarget_lock_release_recursive>:
  41b528:	4770      	bx	lr
  41b52a:	bf00      	nop

0041b52c <__swhatbuf_r>:
  41b52c:	b570      	push	{r4, r5, r6, lr}
  41b52e:	460c      	mov	r4, r1
  41b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  41b534:	2900      	cmp	r1, #0
  41b536:	b090      	sub	sp, #64	; 0x40
  41b538:	4615      	mov	r5, r2
  41b53a:	461e      	mov	r6, r3
  41b53c:	db14      	blt.n	41b568 <__swhatbuf_r+0x3c>
  41b53e:	aa01      	add	r2, sp, #4
  41b540:	f000 fc3c 	bl	41bdbc <_fstat_r>
  41b544:	2800      	cmp	r0, #0
  41b546:	db0f      	blt.n	41b568 <__swhatbuf_r+0x3c>
  41b548:	9a02      	ldr	r2, [sp, #8]
  41b54a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  41b54e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  41b552:	fab2 f282 	clz	r2, r2
  41b556:	0952      	lsrs	r2, r2, #5
  41b558:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41b55c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  41b560:	6032      	str	r2, [r6, #0]
  41b562:	602b      	str	r3, [r5, #0]
  41b564:	b010      	add	sp, #64	; 0x40
  41b566:	bd70      	pop	{r4, r5, r6, pc}
  41b568:	89a2      	ldrh	r2, [r4, #12]
  41b56a:	2300      	movs	r3, #0
  41b56c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  41b570:	6033      	str	r3, [r6, #0]
  41b572:	d004      	beq.n	41b57e <__swhatbuf_r+0x52>
  41b574:	2240      	movs	r2, #64	; 0x40
  41b576:	4618      	mov	r0, r3
  41b578:	602a      	str	r2, [r5, #0]
  41b57a:	b010      	add	sp, #64	; 0x40
  41b57c:	bd70      	pop	{r4, r5, r6, pc}
  41b57e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41b582:	602b      	str	r3, [r5, #0]
  41b584:	b010      	add	sp, #64	; 0x40
  41b586:	bd70      	pop	{r4, r5, r6, pc}

0041b588 <__smakebuf_r>:
  41b588:	898a      	ldrh	r2, [r1, #12]
  41b58a:	0792      	lsls	r2, r2, #30
  41b58c:	460b      	mov	r3, r1
  41b58e:	d506      	bpl.n	41b59e <__smakebuf_r+0x16>
  41b590:	f101 0243 	add.w	r2, r1, #67	; 0x43
  41b594:	2101      	movs	r1, #1
  41b596:	601a      	str	r2, [r3, #0]
  41b598:	611a      	str	r2, [r3, #16]
  41b59a:	6159      	str	r1, [r3, #20]
  41b59c:	4770      	bx	lr
  41b59e:	b5f0      	push	{r4, r5, r6, r7, lr}
  41b5a0:	b083      	sub	sp, #12
  41b5a2:	ab01      	add	r3, sp, #4
  41b5a4:	466a      	mov	r2, sp
  41b5a6:	460c      	mov	r4, r1
  41b5a8:	4606      	mov	r6, r0
  41b5aa:	f7ff ffbf 	bl	41b52c <__swhatbuf_r>
  41b5ae:	9900      	ldr	r1, [sp, #0]
  41b5b0:	4605      	mov	r5, r0
  41b5b2:	4630      	mov	r0, r6
  41b5b4:	f7fd fbda 	bl	418d6c <_malloc_r>
  41b5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41b5bc:	b1d8      	cbz	r0, 41b5f6 <__smakebuf_r+0x6e>
  41b5be:	9a01      	ldr	r2, [sp, #4]
  41b5c0:	4f15      	ldr	r7, [pc, #84]	; (41b618 <__smakebuf_r+0x90>)
  41b5c2:	9900      	ldr	r1, [sp, #0]
  41b5c4:	63f7      	str	r7, [r6, #60]	; 0x3c
  41b5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41b5ca:	81a3      	strh	r3, [r4, #12]
  41b5cc:	6020      	str	r0, [r4, #0]
  41b5ce:	6120      	str	r0, [r4, #16]
  41b5d0:	6161      	str	r1, [r4, #20]
  41b5d2:	b91a      	cbnz	r2, 41b5dc <__smakebuf_r+0x54>
  41b5d4:	432b      	orrs	r3, r5
  41b5d6:	81a3      	strh	r3, [r4, #12]
  41b5d8:	b003      	add	sp, #12
  41b5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41b5dc:	4630      	mov	r0, r6
  41b5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  41b5e2:	f000 fbff 	bl	41bde4 <_isatty_r>
  41b5e6:	b1a0      	cbz	r0, 41b612 <__smakebuf_r+0x8a>
  41b5e8:	89a3      	ldrh	r3, [r4, #12]
  41b5ea:	f023 0303 	bic.w	r3, r3, #3
  41b5ee:	f043 0301 	orr.w	r3, r3, #1
  41b5f2:	b21b      	sxth	r3, r3
  41b5f4:	e7ee      	b.n	41b5d4 <__smakebuf_r+0x4c>
  41b5f6:	059a      	lsls	r2, r3, #22
  41b5f8:	d4ee      	bmi.n	41b5d8 <__smakebuf_r+0x50>
  41b5fa:	f023 0303 	bic.w	r3, r3, #3
  41b5fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
  41b602:	f043 0302 	orr.w	r3, r3, #2
  41b606:	2101      	movs	r1, #1
  41b608:	81a3      	strh	r3, [r4, #12]
  41b60a:	6022      	str	r2, [r4, #0]
  41b60c:	6122      	str	r2, [r4, #16]
  41b60e:	6161      	str	r1, [r4, #20]
  41b610:	e7e2      	b.n	41b5d8 <__smakebuf_r+0x50>
  41b612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41b616:	e7dd      	b.n	41b5d4 <__smakebuf_r+0x4c>
  41b618:	0041ad41 	.word	0x0041ad41

0041b61c <__ascii_mbtowc>:
  41b61c:	b082      	sub	sp, #8
  41b61e:	b149      	cbz	r1, 41b634 <__ascii_mbtowc+0x18>
  41b620:	b15a      	cbz	r2, 41b63a <__ascii_mbtowc+0x1e>
  41b622:	b16b      	cbz	r3, 41b640 <__ascii_mbtowc+0x24>
  41b624:	7813      	ldrb	r3, [r2, #0]
  41b626:	600b      	str	r3, [r1, #0]
  41b628:	7812      	ldrb	r2, [r2, #0]
  41b62a:	1c10      	adds	r0, r2, #0
  41b62c:	bf18      	it	ne
  41b62e:	2001      	movne	r0, #1
  41b630:	b002      	add	sp, #8
  41b632:	4770      	bx	lr
  41b634:	a901      	add	r1, sp, #4
  41b636:	2a00      	cmp	r2, #0
  41b638:	d1f3      	bne.n	41b622 <__ascii_mbtowc+0x6>
  41b63a:	4610      	mov	r0, r2
  41b63c:	b002      	add	sp, #8
  41b63e:	4770      	bx	lr
  41b640:	f06f 0001 	mvn.w	r0, #1
  41b644:	e7f4      	b.n	41b630 <__ascii_mbtowc+0x14>
  41b646:	bf00      	nop
	...

0041b650 <memchr>:
  41b650:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41b654:	2a10      	cmp	r2, #16
  41b656:	db2b      	blt.n	41b6b0 <memchr+0x60>
  41b658:	f010 0f07 	tst.w	r0, #7
  41b65c:	d008      	beq.n	41b670 <memchr+0x20>
  41b65e:	f810 3b01 	ldrb.w	r3, [r0], #1
  41b662:	3a01      	subs	r2, #1
  41b664:	428b      	cmp	r3, r1
  41b666:	d02d      	beq.n	41b6c4 <memchr+0x74>
  41b668:	f010 0f07 	tst.w	r0, #7
  41b66c:	b342      	cbz	r2, 41b6c0 <memchr+0x70>
  41b66e:	d1f6      	bne.n	41b65e <memchr+0xe>
  41b670:	b4f0      	push	{r4, r5, r6, r7}
  41b672:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  41b676:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  41b67a:	f022 0407 	bic.w	r4, r2, #7
  41b67e:	f07f 0700 	mvns.w	r7, #0
  41b682:	2300      	movs	r3, #0
  41b684:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  41b688:	3c08      	subs	r4, #8
  41b68a:	ea85 0501 	eor.w	r5, r5, r1
  41b68e:	ea86 0601 	eor.w	r6, r6, r1
  41b692:	fa85 f547 	uadd8	r5, r5, r7
  41b696:	faa3 f587 	sel	r5, r3, r7
  41b69a:	fa86 f647 	uadd8	r6, r6, r7
  41b69e:	faa5 f687 	sel	r6, r5, r7
  41b6a2:	b98e      	cbnz	r6, 41b6c8 <memchr+0x78>
  41b6a4:	d1ee      	bne.n	41b684 <memchr+0x34>
  41b6a6:	bcf0      	pop	{r4, r5, r6, r7}
  41b6a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41b6ac:	f002 0207 	and.w	r2, r2, #7
  41b6b0:	b132      	cbz	r2, 41b6c0 <memchr+0x70>
  41b6b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  41b6b6:	3a01      	subs	r2, #1
  41b6b8:	ea83 0301 	eor.w	r3, r3, r1
  41b6bc:	b113      	cbz	r3, 41b6c4 <memchr+0x74>
  41b6be:	d1f8      	bne.n	41b6b2 <memchr+0x62>
  41b6c0:	2000      	movs	r0, #0
  41b6c2:	4770      	bx	lr
  41b6c4:	3801      	subs	r0, #1
  41b6c6:	4770      	bx	lr
  41b6c8:	2d00      	cmp	r5, #0
  41b6ca:	bf06      	itte	eq
  41b6cc:	4635      	moveq	r5, r6
  41b6ce:	3803      	subeq	r0, #3
  41b6d0:	3807      	subne	r0, #7
  41b6d2:	f015 0f01 	tst.w	r5, #1
  41b6d6:	d107      	bne.n	41b6e8 <memchr+0x98>
  41b6d8:	3001      	adds	r0, #1
  41b6da:	f415 7f80 	tst.w	r5, #256	; 0x100
  41b6de:	bf02      	ittt	eq
  41b6e0:	3001      	addeq	r0, #1
  41b6e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  41b6e6:	3001      	addeq	r0, #1
  41b6e8:	bcf0      	pop	{r4, r5, r6, r7}
  41b6ea:	3801      	subs	r0, #1
  41b6ec:	4770      	bx	lr
  41b6ee:	bf00      	nop

0041b6f0 <_realloc_r>:
  41b6f0:	2900      	cmp	r1, #0
  41b6f2:	f000 8095 	beq.w	41b820 <_realloc_r+0x130>
  41b6f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41b6fa:	460d      	mov	r5, r1
  41b6fc:	4616      	mov	r6, r2
  41b6fe:	b083      	sub	sp, #12
  41b700:	4680      	mov	r8, r0
  41b702:	f106 070b 	add.w	r7, r6, #11
  41b706:	f7fd ff2d 	bl	419564 <__malloc_lock>
  41b70a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  41b70e:	2f16      	cmp	r7, #22
  41b710:	f02e 0403 	bic.w	r4, lr, #3
  41b714:	f1a5 0908 	sub.w	r9, r5, #8
  41b718:	d83c      	bhi.n	41b794 <_realloc_r+0xa4>
  41b71a:	2210      	movs	r2, #16
  41b71c:	4617      	mov	r7, r2
  41b71e:	42be      	cmp	r6, r7
  41b720:	d83d      	bhi.n	41b79e <_realloc_r+0xae>
  41b722:	4294      	cmp	r4, r2
  41b724:	da43      	bge.n	41b7ae <_realloc_r+0xbe>
  41b726:	4bc4      	ldr	r3, [pc, #784]	; (41ba38 <_realloc_r+0x348>)
  41b728:	6899      	ldr	r1, [r3, #8]
  41b72a:	eb09 0004 	add.w	r0, r9, r4
  41b72e:	4288      	cmp	r0, r1
  41b730:	f000 80b4 	beq.w	41b89c <_realloc_r+0x1ac>
  41b734:	6843      	ldr	r3, [r0, #4]
  41b736:	f023 0101 	bic.w	r1, r3, #1
  41b73a:	4401      	add	r1, r0
  41b73c:	6849      	ldr	r1, [r1, #4]
  41b73e:	07c9      	lsls	r1, r1, #31
  41b740:	d54c      	bpl.n	41b7dc <_realloc_r+0xec>
  41b742:	f01e 0f01 	tst.w	lr, #1
  41b746:	f000 809b 	beq.w	41b880 <_realloc_r+0x190>
  41b74a:	4631      	mov	r1, r6
  41b74c:	4640      	mov	r0, r8
  41b74e:	f7fd fb0d 	bl	418d6c <_malloc_r>
  41b752:	4606      	mov	r6, r0
  41b754:	2800      	cmp	r0, #0
  41b756:	d03a      	beq.n	41b7ce <_realloc_r+0xde>
  41b758:	f855 3c04 	ldr.w	r3, [r5, #-4]
  41b75c:	f023 0301 	bic.w	r3, r3, #1
  41b760:	444b      	add	r3, r9
  41b762:	f1a0 0208 	sub.w	r2, r0, #8
  41b766:	429a      	cmp	r2, r3
  41b768:	f000 8121 	beq.w	41b9ae <_realloc_r+0x2be>
  41b76c:	1f22      	subs	r2, r4, #4
  41b76e:	2a24      	cmp	r2, #36	; 0x24
  41b770:	f200 8107 	bhi.w	41b982 <_realloc_r+0x292>
  41b774:	2a13      	cmp	r2, #19
  41b776:	f200 80db 	bhi.w	41b930 <_realloc_r+0x240>
  41b77a:	4603      	mov	r3, r0
  41b77c:	462a      	mov	r2, r5
  41b77e:	6811      	ldr	r1, [r2, #0]
  41b780:	6019      	str	r1, [r3, #0]
  41b782:	6851      	ldr	r1, [r2, #4]
  41b784:	6059      	str	r1, [r3, #4]
  41b786:	6892      	ldr	r2, [r2, #8]
  41b788:	609a      	str	r2, [r3, #8]
  41b78a:	4629      	mov	r1, r5
  41b78c:	4640      	mov	r0, r8
  41b78e:	f7ff fc2b 	bl	41afe8 <_free_r>
  41b792:	e01c      	b.n	41b7ce <_realloc_r+0xde>
  41b794:	f027 0707 	bic.w	r7, r7, #7
  41b798:	2f00      	cmp	r7, #0
  41b79a:	463a      	mov	r2, r7
  41b79c:	dabf      	bge.n	41b71e <_realloc_r+0x2e>
  41b79e:	2600      	movs	r6, #0
  41b7a0:	230c      	movs	r3, #12
  41b7a2:	4630      	mov	r0, r6
  41b7a4:	f8c8 3000 	str.w	r3, [r8]
  41b7a8:	b003      	add	sp, #12
  41b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41b7ae:	462e      	mov	r6, r5
  41b7b0:	1be3      	subs	r3, r4, r7
  41b7b2:	2b0f      	cmp	r3, #15
  41b7b4:	d81e      	bhi.n	41b7f4 <_realloc_r+0x104>
  41b7b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  41b7ba:	f003 0301 	and.w	r3, r3, #1
  41b7be:	4323      	orrs	r3, r4
  41b7c0:	444c      	add	r4, r9
  41b7c2:	f8c9 3004 	str.w	r3, [r9, #4]
  41b7c6:	6863      	ldr	r3, [r4, #4]
  41b7c8:	f043 0301 	orr.w	r3, r3, #1
  41b7cc:	6063      	str	r3, [r4, #4]
  41b7ce:	4640      	mov	r0, r8
  41b7d0:	f7fd fece 	bl	419570 <__malloc_unlock>
  41b7d4:	4630      	mov	r0, r6
  41b7d6:	b003      	add	sp, #12
  41b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41b7dc:	f023 0303 	bic.w	r3, r3, #3
  41b7e0:	18e1      	adds	r1, r4, r3
  41b7e2:	4291      	cmp	r1, r2
  41b7e4:	db1f      	blt.n	41b826 <_realloc_r+0x136>
  41b7e6:	68c3      	ldr	r3, [r0, #12]
  41b7e8:	6882      	ldr	r2, [r0, #8]
  41b7ea:	462e      	mov	r6, r5
  41b7ec:	60d3      	str	r3, [r2, #12]
  41b7ee:	460c      	mov	r4, r1
  41b7f0:	609a      	str	r2, [r3, #8]
  41b7f2:	e7dd      	b.n	41b7b0 <_realloc_r+0xc0>
  41b7f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  41b7f8:	eb09 0107 	add.w	r1, r9, r7
  41b7fc:	f002 0201 	and.w	r2, r2, #1
  41b800:	444c      	add	r4, r9
  41b802:	f043 0301 	orr.w	r3, r3, #1
  41b806:	4317      	orrs	r7, r2
  41b808:	f8c9 7004 	str.w	r7, [r9, #4]
  41b80c:	604b      	str	r3, [r1, #4]
  41b80e:	6863      	ldr	r3, [r4, #4]
  41b810:	f043 0301 	orr.w	r3, r3, #1
  41b814:	3108      	adds	r1, #8
  41b816:	6063      	str	r3, [r4, #4]
  41b818:	4640      	mov	r0, r8
  41b81a:	f7ff fbe5 	bl	41afe8 <_free_r>
  41b81e:	e7d6      	b.n	41b7ce <_realloc_r+0xde>
  41b820:	4611      	mov	r1, r2
  41b822:	f7fd baa3 	b.w	418d6c <_malloc_r>
  41b826:	f01e 0f01 	tst.w	lr, #1
  41b82a:	d18e      	bne.n	41b74a <_realloc_r+0x5a>
  41b82c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  41b830:	eba9 0a01 	sub.w	sl, r9, r1
  41b834:	f8da 1004 	ldr.w	r1, [sl, #4]
  41b838:	f021 0103 	bic.w	r1, r1, #3
  41b83c:	440b      	add	r3, r1
  41b83e:	4423      	add	r3, r4
  41b840:	4293      	cmp	r3, r2
  41b842:	db25      	blt.n	41b890 <_realloc_r+0x1a0>
  41b844:	68c2      	ldr	r2, [r0, #12]
  41b846:	6881      	ldr	r1, [r0, #8]
  41b848:	4656      	mov	r6, sl
  41b84a:	60ca      	str	r2, [r1, #12]
  41b84c:	6091      	str	r1, [r2, #8]
  41b84e:	f8da 100c 	ldr.w	r1, [sl, #12]
  41b852:	f856 0f08 	ldr.w	r0, [r6, #8]!
  41b856:	1f22      	subs	r2, r4, #4
  41b858:	2a24      	cmp	r2, #36	; 0x24
  41b85a:	60c1      	str	r1, [r0, #12]
  41b85c:	6088      	str	r0, [r1, #8]
  41b85e:	f200 8094 	bhi.w	41b98a <_realloc_r+0x29a>
  41b862:	2a13      	cmp	r2, #19
  41b864:	d96f      	bls.n	41b946 <_realloc_r+0x256>
  41b866:	6829      	ldr	r1, [r5, #0]
  41b868:	f8ca 1008 	str.w	r1, [sl, #8]
  41b86c:	6869      	ldr	r1, [r5, #4]
  41b86e:	f8ca 100c 	str.w	r1, [sl, #12]
  41b872:	2a1b      	cmp	r2, #27
  41b874:	f200 80a2 	bhi.w	41b9bc <_realloc_r+0x2cc>
  41b878:	3508      	adds	r5, #8
  41b87a:	f10a 0210 	add.w	r2, sl, #16
  41b87e:	e063      	b.n	41b948 <_realloc_r+0x258>
  41b880:	f855 3c08 	ldr.w	r3, [r5, #-8]
  41b884:	eba9 0a03 	sub.w	sl, r9, r3
  41b888:	f8da 1004 	ldr.w	r1, [sl, #4]
  41b88c:	f021 0103 	bic.w	r1, r1, #3
  41b890:	1863      	adds	r3, r4, r1
  41b892:	4293      	cmp	r3, r2
  41b894:	f6ff af59 	blt.w	41b74a <_realloc_r+0x5a>
  41b898:	4656      	mov	r6, sl
  41b89a:	e7d8      	b.n	41b84e <_realloc_r+0x15e>
  41b89c:	6841      	ldr	r1, [r0, #4]
  41b89e:	f021 0b03 	bic.w	fp, r1, #3
  41b8a2:	44a3      	add	fp, r4
  41b8a4:	f107 0010 	add.w	r0, r7, #16
  41b8a8:	4583      	cmp	fp, r0
  41b8aa:	da56      	bge.n	41b95a <_realloc_r+0x26a>
  41b8ac:	f01e 0f01 	tst.w	lr, #1
  41b8b0:	f47f af4b 	bne.w	41b74a <_realloc_r+0x5a>
  41b8b4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  41b8b8:	eba9 0a01 	sub.w	sl, r9, r1
  41b8bc:	f8da 1004 	ldr.w	r1, [sl, #4]
  41b8c0:	f021 0103 	bic.w	r1, r1, #3
  41b8c4:	448b      	add	fp, r1
  41b8c6:	4558      	cmp	r0, fp
  41b8c8:	dce2      	bgt.n	41b890 <_realloc_r+0x1a0>
  41b8ca:	4656      	mov	r6, sl
  41b8cc:	f8da 100c 	ldr.w	r1, [sl, #12]
  41b8d0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  41b8d4:	1f22      	subs	r2, r4, #4
  41b8d6:	2a24      	cmp	r2, #36	; 0x24
  41b8d8:	60c1      	str	r1, [r0, #12]
  41b8da:	6088      	str	r0, [r1, #8]
  41b8dc:	f200 808f 	bhi.w	41b9fe <_realloc_r+0x30e>
  41b8e0:	2a13      	cmp	r2, #19
  41b8e2:	f240 808a 	bls.w	41b9fa <_realloc_r+0x30a>
  41b8e6:	6829      	ldr	r1, [r5, #0]
  41b8e8:	f8ca 1008 	str.w	r1, [sl, #8]
  41b8ec:	6869      	ldr	r1, [r5, #4]
  41b8ee:	f8ca 100c 	str.w	r1, [sl, #12]
  41b8f2:	2a1b      	cmp	r2, #27
  41b8f4:	f200 808a 	bhi.w	41ba0c <_realloc_r+0x31c>
  41b8f8:	3508      	adds	r5, #8
  41b8fa:	f10a 0210 	add.w	r2, sl, #16
  41b8fe:	6829      	ldr	r1, [r5, #0]
  41b900:	6011      	str	r1, [r2, #0]
  41b902:	6869      	ldr	r1, [r5, #4]
  41b904:	6051      	str	r1, [r2, #4]
  41b906:	68a9      	ldr	r1, [r5, #8]
  41b908:	6091      	str	r1, [r2, #8]
  41b90a:	eb0a 0107 	add.w	r1, sl, r7
  41b90e:	ebab 0207 	sub.w	r2, fp, r7
  41b912:	f042 0201 	orr.w	r2, r2, #1
  41b916:	6099      	str	r1, [r3, #8]
  41b918:	604a      	str	r2, [r1, #4]
  41b91a:	f8da 3004 	ldr.w	r3, [sl, #4]
  41b91e:	f003 0301 	and.w	r3, r3, #1
  41b922:	431f      	orrs	r7, r3
  41b924:	4640      	mov	r0, r8
  41b926:	f8ca 7004 	str.w	r7, [sl, #4]
  41b92a:	f7fd fe21 	bl	419570 <__malloc_unlock>
  41b92e:	e751      	b.n	41b7d4 <_realloc_r+0xe4>
  41b930:	682b      	ldr	r3, [r5, #0]
  41b932:	6003      	str	r3, [r0, #0]
  41b934:	686b      	ldr	r3, [r5, #4]
  41b936:	6043      	str	r3, [r0, #4]
  41b938:	2a1b      	cmp	r2, #27
  41b93a:	d82d      	bhi.n	41b998 <_realloc_r+0x2a8>
  41b93c:	f100 0308 	add.w	r3, r0, #8
  41b940:	f105 0208 	add.w	r2, r5, #8
  41b944:	e71b      	b.n	41b77e <_realloc_r+0x8e>
  41b946:	4632      	mov	r2, r6
  41b948:	6829      	ldr	r1, [r5, #0]
  41b94a:	6011      	str	r1, [r2, #0]
  41b94c:	6869      	ldr	r1, [r5, #4]
  41b94e:	6051      	str	r1, [r2, #4]
  41b950:	68a9      	ldr	r1, [r5, #8]
  41b952:	6091      	str	r1, [r2, #8]
  41b954:	461c      	mov	r4, r3
  41b956:	46d1      	mov	r9, sl
  41b958:	e72a      	b.n	41b7b0 <_realloc_r+0xc0>
  41b95a:	eb09 0107 	add.w	r1, r9, r7
  41b95e:	ebab 0b07 	sub.w	fp, fp, r7
  41b962:	f04b 0201 	orr.w	r2, fp, #1
  41b966:	6099      	str	r1, [r3, #8]
  41b968:	604a      	str	r2, [r1, #4]
  41b96a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  41b96e:	f003 0301 	and.w	r3, r3, #1
  41b972:	431f      	orrs	r7, r3
  41b974:	4640      	mov	r0, r8
  41b976:	f845 7c04 	str.w	r7, [r5, #-4]
  41b97a:	f7fd fdf9 	bl	419570 <__malloc_unlock>
  41b97e:	462e      	mov	r6, r5
  41b980:	e728      	b.n	41b7d4 <_realloc_r+0xe4>
  41b982:	4629      	mov	r1, r5
  41b984:	f7fd fd3c 	bl	419400 <memmove>
  41b988:	e6ff      	b.n	41b78a <_realloc_r+0x9a>
  41b98a:	4629      	mov	r1, r5
  41b98c:	4630      	mov	r0, r6
  41b98e:	461c      	mov	r4, r3
  41b990:	46d1      	mov	r9, sl
  41b992:	f7fd fd35 	bl	419400 <memmove>
  41b996:	e70b      	b.n	41b7b0 <_realloc_r+0xc0>
  41b998:	68ab      	ldr	r3, [r5, #8]
  41b99a:	6083      	str	r3, [r0, #8]
  41b99c:	68eb      	ldr	r3, [r5, #12]
  41b99e:	60c3      	str	r3, [r0, #12]
  41b9a0:	2a24      	cmp	r2, #36	; 0x24
  41b9a2:	d017      	beq.n	41b9d4 <_realloc_r+0x2e4>
  41b9a4:	f100 0310 	add.w	r3, r0, #16
  41b9a8:	f105 0210 	add.w	r2, r5, #16
  41b9ac:	e6e7      	b.n	41b77e <_realloc_r+0x8e>
  41b9ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41b9b2:	f023 0303 	bic.w	r3, r3, #3
  41b9b6:	441c      	add	r4, r3
  41b9b8:	462e      	mov	r6, r5
  41b9ba:	e6f9      	b.n	41b7b0 <_realloc_r+0xc0>
  41b9bc:	68a9      	ldr	r1, [r5, #8]
  41b9be:	f8ca 1010 	str.w	r1, [sl, #16]
  41b9c2:	68e9      	ldr	r1, [r5, #12]
  41b9c4:	f8ca 1014 	str.w	r1, [sl, #20]
  41b9c8:	2a24      	cmp	r2, #36	; 0x24
  41b9ca:	d00c      	beq.n	41b9e6 <_realloc_r+0x2f6>
  41b9cc:	3510      	adds	r5, #16
  41b9ce:	f10a 0218 	add.w	r2, sl, #24
  41b9d2:	e7b9      	b.n	41b948 <_realloc_r+0x258>
  41b9d4:	692b      	ldr	r3, [r5, #16]
  41b9d6:	6103      	str	r3, [r0, #16]
  41b9d8:	696b      	ldr	r3, [r5, #20]
  41b9da:	6143      	str	r3, [r0, #20]
  41b9dc:	f105 0218 	add.w	r2, r5, #24
  41b9e0:	f100 0318 	add.w	r3, r0, #24
  41b9e4:	e6cb      	b.n	41b77e <_realloc_r+0x8e>
  41b9e6:	692a      	ldr	r2, [r5, #16]
  41b9e8:	f8ca 2018 	str.w	r2, [sl, #24]
  41b9ec:	696a      	ldr	r2, [r5, #20]
  41b9ee:	f8ca 201c 	str.w	r2, [sl, #28]
  41b9f2:	3518      	adds	r5, #24
  41b9f4:	f10a 0220 	add.w	r2, sl, #32
  41b9f8:	e7a6      	b.n	41b948 <_realloc_r+0x258>
  41b9fa:	4632      	mov	r2, r6
  41b9fc:	e77f      	b.n	41b8fe <_realloc_r+0x20e>
  41b9fe:	4629      	mov	r1, r5
  41ba00:	4630      	mov	r0, r6
  41ba02:	9301      	str	r3, [sp, #4]
  41ba04:	f7fd fcfc 	bl	419400 <memmove>
  41ba08:	9b01      	ldr	r3, [sp, #4]
  41ba0a:	e77e      	b.n	41b90a <_realloc_r+0x21a>
  41ba0c:	68a9      	ldr	r1, [r5, #8]
  41ba0e:	f8ca 1010 	str.w	r1, [sl, #16]
  41ba12:	68e9      	ldr	r1, [r5, #12]
  41ba14:	f8ca 1014 	str.w	r1, [sl, #20]
  41ba18:	2a24      	cmp	r2, #36	; 0x24
  41ba1a:	d003      	beq.n	41ba24 <_realloc_r+0x334>
  41ba1c:	3510      	adds	r5, #16
  41ba1e:	f10a 0218 	add.w	r2, sl, #24
  41ba22:	e76c      	b.n	41b8fe <_realloc_r+0x20e>
  41ba24:	692a      	ldr	r2, [r5, #16]
  41ba26:	f8ca 2018 	str.w	r2, [sl, #24]
  41ba2a:	696a      	ldr	r2, [r5, #20]
  41ba2c:	f8ca 201c 	str.w	r2, [sl, #28]
  41ba30:	3518      	adds	r5, #24
  41ba32:	f10a 0220 	add.w	r2, sl, #32
  41ba36:	e762      	b.n	41b8fe <_realloc_r+0x20e>
  41ba38:	20400468 	.word	0x20400468

0041ba3c <__sread>:
  41ba3c:	b510      	push	{r4, lr}
  41ba3e:	460c      	mov	r4, r1
  41ba40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  41ba44:	f000 f9f6 	bl	41be34 <_read_r>
  41ba48:	2800      	cmp	r0, #0
  41ba4a:	db03      	blt.n	41ba54 <__sread+0x18>
  41ba4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  41ba4e:	4403      	add	r3, r0
  41ba50:	6523      	str	r3, [r4, #80]	; 0x50
  41ba52:	bd10      	pop	{r4, pc}
  41ba54:	89a3      	ldrh	r3, [r4, #12]
  41ba56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  41ba5a:	81a3      	strh	r3, [r4, #12]
  41ba5c:	bd10      	pop	{r4, pc}
  41ba5e:	bf00      	nop

0041ba60 <__swrite>:
  41ba60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41ba64:	4616      	mov	r6, r2
  41ba66:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  41ba6a:	461f      	mov	r7, r3
  41ba6c:	05d3      	lsls	r3, r2, #23
  41ba6e:	460c      	mov	r4, r1
  41ba70:	4605      	mov	r5, r0
  41ba72:	d507      	bpl.n	41ba84 <__swrite+0x24>
  41ba74:	2200      	movs	r2, #0
  41ba76:	2302      	movs	r3, #2
  41ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  41ba7c:	f000 f9c4 	bl	41be08 <_lseek_r>
  41ba80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41ba84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  41ba88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  41ba8c:	81a2      	strh	r2, [r4, #12]
  41ba8e:	463b      	mov	r3, r7
  41ba90:	4632      	mov	r2, r6
  41ba92:	4628      	mov	r0, r5
  41ba94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41ba98:	f000 b8a4 	b.w	41bbe4 <_write_r>

0041ba9c <__sseek>:
  41ba9c:	b510      	push	{r4, lr}
  41ba9e:	460c      	mov	r4, r1
  41baa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  41baa4:	f000 f9b0 	bl	41be08 <_lseek_r>
  41baa8:	89a3      	ldrh	r3, [r4, #12]
  41baaa:	1c42      	adds	r2, r0, #1
  41baac:	bf0e      	itee	eq
  41baae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  41bab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  41bab6:	6520      	strne	r0, [r4, #80]	; 0x50
  41bab8:	81a3      	strh	r3, [r4, #12]
  41baba:	bd10      	pop	{r4, pc}

0041babc <__sclose>:
  41babc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  41bac0:	f000 b908 	b.w	41bcd4 <_close_r>

0041bac4 <__swbuf_r>:
  41bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41bac6:	460d      	mov	r5, r1
  41bac8:	4614      	mov	r4, r2
  41baca:	4606      	mov	r6, r0
  41bacc:	b110      	cbz	r0, 41bad4 <__swbuf_r+0x10>
  41bace:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41bad0:	2b00      	cmp	r3, #0
  41bad2:	d04b      	beq.n	41bb6c <__swbuf_r+0xa8>
  41bad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41bad8:	69a3      	ldr	r3, [r4, #24]
  41bada:	60a3      	str	r3, [r4, #8]
  41badc:	b291      	uxth	r1, r2
  41bade:	0708      	lsls	r0, r1, #28
  41bae0:	d539      	bpl.n	41bb56 <__swbuf_r+0x92>
  41bae2:	6923      	ldr	r3, [r4, #16]
  41bae4:	2b00      	cmp	r3, #0
  41bae6:	d036      	beq.n	41bb56 <__swbuf_r+0x92>
  41bae8:	b2ed      	uxtb	r5, r5
  41baea:	0489      	lsls	r1, r1, #18
  41baec:	462f      	mov	r7, r5
  41baee:	d515      	bpl.n	41bb1c <__swbuf_r+0x58>
  41baf0:	6822      	ldr	r2, [r4, #0]
  41baf2:	6961      	ldr	r1, [r4, #20]
  41baf4:	1ad3      	subs	r3, r2, r3
  41baf6:	428b      	cmp	r3, r1
  41baf8:	da1c      	bge.n	41bb34 <__swbuf_r+0x70>
  41bafa:	3301      	adds	r3, #1
  41bafc:	68a1      	ldr	r1, [r4, #8]
  41bafe:	1c50      	adds	r0, r2, #1
  41bb00:	3901      	subs	r1, #1
  41bb02:	60a1      	str	r1, [r4, #8]
  41bb04:	6020      	str	r0, [r4, #0]
  41bb06:	7015      	strb	r5, [r2, #0]
  41bb08:	6962      	ldr	r2, [r4, #20]
  41bb0a:	429a      	cmp	r2, r3
  41bb0c:	d01a      	beq.n	41bb44 <__swbuf_r+0x80>
  41bb0e:	89a3      	ldrh	r3, [r4, #12]
  41bb10:	07db      	lsls	r3, r3, #31
  41bb12:	d501      	bpl.n	41bb18 <__swbuf_r+0x54>
  41bb14:	2d0a      	cmp	r5, #10
  41bb16:	d015      	beq.n	41bb44 <__swbuf_r+0x80>
  41bb18:	4638      	mov	r0, r7
  41bb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41bb1c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  41bb1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  41bb22:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  41bb26:	81a2      	strh	r2, [r4, #12]
  41bb28:	6822      	ldr	r2, [r4, #0]
  41bb2a:	6661      	str	r1, [r4, #100]	; 0x64
  41bb2c:	6961      	ldr	r1, [r4, #20]
  41bb2e:	1ad3      	subs	r3, r2, r3
  41bb30:	428b      	cmp	r3, r1
  41bb32:	dbe2      	blt.n	41bafa <__swbuf_r+0x36>
  41bb34:	4621      	mov	r1, r4
  41bb36:	4630      	mov	r0, r6
  41bb38:	f7ff f8d8 	bl	41acec <_fflush_r>
  41bb3c:	b940      	cbnz	r0, 41bb50 <__swbuf_r+0x8c>
  41bb3e:	6822      	ldr	r2, [r4, #0]
  41bb40:	2301      	movs	r3, #1
  41bb42:	e7db      	b.n	41bafc <__swbuf_r+0x38>
  41bb44:	4621      	mov	r1, r4
  41bb46:	4630      	mov	r0, r6
  41bb48:	f7ff f8d0 	bl	41acec <_fflush_r>
  41bb4c:	2800      	cmp	r0, #0
  41bb4e:	d0e3      	beq.n	41bb18 <__swbuf_r+0x54>
  41bb50:	f04f 37ff 	mov.w	r7, #4294967295
  41bb54:	e7e0      	b.n	41bb18 <__swbuf_r+0x54>
  41bb56:	4621      	mov	r1, r4
  41bb58:	4630      	mov	r0, r6
  41bb5a:	f7fe ffb3 	bl	41aac4 <__swsetup_r>
  41bb5e:	2800      	cmp	r0, #0
  41bb60:	d1f6      	bne.n	41bb50 <__swbuf_r+0x8c>
  41bb62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41bb66:	6923      	ldr	r3, [r4, #16]
  41bb68:	b291      	uxth	r1, r2
  41bb6a:	e7bd      	b.n	41bae8 <__swbuf_r+0x24>
  41bb6c:	f7ff f916 	bl	41ad9c <__sinit>
  41bb70:	e7b0      	b.n	41bad4 <__swbuf_r+0x10>
  41bb72:	bf00      	nop

0041bb74 <_wcrtomb_r>:
  41bb74:	b5f0      	push	{r4, r5, r6, r7, lr}
  41bb76:	4606      	mov	r6, r0
  41bb78:	b085      	sub	sp, #20
  41bb7a:	461f      	mov	r7, r3
  41bb7c:	b189      	cbz	r1, 41bba2 <_wcrtomb_r+0x2e>
  41bb7e:	4c10      	ldr	r4, [pc, #64]	; (41bbc0 <_wcrtomb_r+0x4c>)
  41bb80:	4d10      	ldr	r5, [pc, #64]	; (41bbc4 <_wcrtomb_r+0x50>)
  41bb82:	6824      	ldr	r4, [r4, #0]
  41bb84:	6b64      	ldr	r4, [r4, #52]	; 0x34
  41bb86:	2c00      	cmp	r4, #0
  41bb88:	bf08      	it	eq
  41bb8a:	462c      	moveq	r4, r5
  41bb8c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  41bb90:	47a0      	blx	r4
  41bb92:	1c43      	adds	r3, r0, #1
  41bb94:	d103      	bne.n	41bb9e <_wcrtomb_r+0x2a>
  41bb96:	2200      	movs	r2, #0
  41bb98:	238a      	movs	r3, #138	; 0x8a
  41bb9a:	603a      	str	r2, [r7, #0]
  41bb9c:	6033      	str	r3, [r6, #0]
  41bb9e:	b005      	add	sp, #20
  41bba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41bba2:	460c      	mov	r4, r1
  41bba4:	4906      	ldr	r1, [pc, #24]	; (41bbc0 <_wcrtomb_r+0x4c>)
  41bba6:	4a07      	ldr	r2, [pc, #28]	; (41bbc4 <_wcrtomb_r+0x50>)
  41bba8:	6809      	ldr	r1, [r1, #0]
  41bbaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
  41bbac:	2900      	cmp	r1, #0
  41bbae:	bf08      	it	eq
  41bbb0:	4611      	moveq	r1, r2
  41bbb2:	4622      	mov	r2, r4
  41bbb4:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  41bbb8:	a901      	add	r1, sp, #4
  41bbba:	47a0      	blx	r4
  41bbbc:	e7e9      	b.n	41bb92 <_wcrtomb_r+0x1e>
  41bbbe:	bf00      	nop
  41bbc0:	20400038 	.word	0x20400038
  41bbc4:	2040087c 	.word	0x2040087c

0041bbc8 <__ascii_wctomb>:
  41bbc8:	b121      	cbz	r1, 41bbd4 <__ascii_wctomb+0xc>
  41bbca:	2aff      	cmp	r2, #255	; 0xff
  41bbcc:	d804      	bhi.n	41bbd8 <__ascii_wctomb+0x10>
  41bbce:	700a      	strb	r2, [r1, #0]
  41bbd0:	2001      	movs	r0, #1
  41bbd2:	4770      	bx	lr
  41bbd4:	4608      	mov	r0, r1
  41bbd6:	4770      	bx	lr
  41bbd8:	238a      	movs	r3, #138	; 0x8a
  41bbda:	6003      	str	r3, [r0, #0]
  41bbdc:	f04f 30ff 	mov.w	r0, #4294967295
  41bbe0:	4770      	bx	lr
  41bbe2:	bf00      	nop

0041bbe4 <_write_r>:
  41bbe4:	b570      	push	{r4, r5, r6, lr}
  41bbe6:	460d      	mov	r5, r1
  41bbe8:	4c08      	ldr	r4, [pc, #32]	; (41bc0c <_write_r+0x28>)
  41bbea:	4611      	mov	r1, r2
  41bbec:	4606      	mov	r6, r0
  41bbee:	461a      	mov	r2, r3
  41bbf0:	4628      	mov	r0, r5
  41bbf2:	2300      	movs	r3, #0
  41bbf4:	6023      	str	r3, [r4, #0]
  41bbf6:	f7fb fc0b 	bl	417410 <_write>
  41bbfa:	1c43      	adds	r3, r0, #1
  41bbfc:	d000      	beq.n	41bc00 <_write_r+0x1c>
  41bbfe:	bd70      	pop	{r4, r5, r6, pc}
  41bc00:	6823      	ldr	r3, [r4, #0]
  41bc02:	2b00      	cmp	r3, #0
  41bc04:	d0fb      	beq.n	41bbfe <_write_r+0x1a>
  41bc06:	6033      	str	r3, [r6, #0]
  41bc08:	bd70      	pop	{r4, r5, r6, pc}
  41bc0a:	bf00      	nop
  41bc0c:	2043a15c 	.word	0x2043a15c

0041bc10 <__register_exitproc>:
  41bc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41bc14:	4d2c      	ldr	r5, [pc, #176]	; (41bcc8 <__register_exitproc+0xb8>)
  41bc16:	4606      	mov	r6, r0
  41bc18:	6828      	ldr	r0, [r5, #0]
  41bc1a:	4698      	mov	r8, r3
  41bc1c:	460f      	mov	r7, r1
  41bc1e:	4691      	mov	r9, r2
  41bc20:	f7ff fc80 	bl	41b524 <__retarget_lock_acquire_recursive>
  41bc24:	4b29      	ldr	r3, [pc, #164]	; (41bccc <__register_exitproc+0xbc>)
  41bc26:	681c      	ldr	r4, [r3, #0]
  41bc28:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  41bc2c:	2b00      	cmp	r3, #0
  41bc2e:	d03e      	beq.n	41bcae <__register_exitproc+0x9e>
  41bc30:	685a      	ldr	r2, [r3, #4]
  41bc32:	2a1f      	cmp	r2, #31
  41bc34:	dc1c      	bgt.n	41bc70 <__register_exitproc+0x60>
  41bc36:	f102 0e01 	add.w	lr, r2, #1
  41bc3a:	b176      	cbz	r6, 41bc5a <__register_exitproc+0x4a>
  41bc3c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  41bc40:	2401      	movs	r4, #1
  41bc42:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  41bc46:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  41bc4a:	4094      	lsls	r4, r2
  41bc4c:	4320      	orrs	r0, r4
  41bc4e:	2e02      	cmp	r6, #2
  41bc50:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  41bc54:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  41bc58:	d023      	beq.n	41bca2 <__register_exitproc+0x92>
  41bc5a:	3202      	adds	r2, #2
  41bc5c:	f8c3 e004 	str.w	lr, [r3, #4]
  41bc60:	6828      	ldr	r0, [r5, #0]
  41bc62:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  41bc66:	f7ff fc5f 	bl	41b528 <__retarget_lock_release_recursive>
  41bc6a:	2000      	movs	r0, #0
  41bc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41bc70:	4b17      	ldr	r3, [pc, #92]	; (41bcd0 <__register_exitproc+0xc0>)
  41bc72:	b30b      	cbz	r3, 41bcb8 <__register_exitproc+0xa8>
  41bc74:	f44f 70c8 	mov.w	r0, #400	; 0x190
  41bc78:	f7fd f870 	bl	418d5c <malloc>
  41bc7c:	4603      	mov	r3, r0
  41bc7e:	b1d8      	cbz	r0, 41bcb8 <__register_exitproc+0xa8>
  41bc80:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  41bc84:	6002      	str	r2, [r0, #0]
  41bc86:	2100      	movs	r1, #0
  41bc88:	6041      	str	r1, [r0, #4]
  41bc8a:	460a      	mov	r2, r1
  41bc8c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  41bc90:	f04f 0e01 	mov.w	lr, #1
  41bc94:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  41bc98:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  41bc9c:	2e00      	cmp	r6, #0
  41bc9e:	d0dc      	beq.n	41bc5a <__register_exitproc+0x4a>
  41bca0:	e7cc      	b.n	41bc3c <__register_exitproc+0x2c>
  41bca2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  41bca6:	430c      	orrs	r4, r1
  41bca8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  41bcac:	e7d5      	b.n	41bc5a <__register_exitproc+0x4a>
  41bcae:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  41bcb2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  41bcb6:	e7bb      	b.n	41bc30 <__register_exitproc+0x20>
  41bcb8:	6828      	ldr	r0, [r5, #0]
  41bcba:	f7ff fc35 	bl	41b528 <__retarget_lock_release_recursive>
  41bcbe:	f04f 30ff 	mov.w	r0, #4294967295
  41bcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41bcc6:	bf00      	nop
  41bcc8:	20400878 	.word	0x20400878
  41bccc:	00422e9c 	.word	0x00422e9c
  41bcd0:	00418d5d 	.word	0x00418d5d

0041bcd4 <_close_r>:
  41bcd4:	b538      	push	{r3, r4, r5, lr}
  41bcd6:	4c07      	ldr	r4, [pc, #28]	; (41bcf4 <_close_r+0x20>)
  41bcd8:	2300      	movs	r3, #0
  41bcda:	4605      	mov	r5, r0
  41bcdc:	4608      	mov	r0, r1
  41bcde:	6023      	str	r3, [r4, #0]
  41bce0:	f7fc fa0e 	bl	418100 <_close>
  41bce4:	1c43      	adds	r3, r0, #1
  41bce6:	d000      	beq.n	41bcea <_close_r+0x16>
  41bce8:	bd38      	pop	{r3, r4, r5, pc}
  41bcea:	6823      	ldr	r3, [r4, #0]
  41bcec:	2b00      	cmp	r3, #0
  41bcee:	d0fb      	beq.n	41bce8 <_close_r+0x14>
  41bcf0:	602b      	str	r3, [r5, #0]
  41bcf2:	bd38      	pop	{r3, r4, r5, pc}
  41bcf4:	2043a15c 	.word	0x2043a15c

0041bcf8 <_fclose_r>:
  41bcf8:	b570      	push	{r4, r5, r6, lr}
  41bcfa:	b159      	cbz	r1, 41bd14 <_fclose_r+0x1c>
  41bcfc:	4605      	mov	r5, r0
  41bcfe:	460c      	mov	r4, r1
  41bd00:	b110      	cbz	r0, 41bd08 <_fclose_r+0x10>
  41bd02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41bd04:	2b00      	cmp	r3, #0
  41bd06:	d03c      	beq.n	41bd82 <_fclose_r+0x8a>
  41bd08:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41bd0a:	07d8      	lsls	r0, r3, #31
  41bd0c:	d505      	bpl.n	41bd1a <_fclose_r+0x22>
  41bd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41bd12:	b92b      	cbnz	r3, 41bd20 <_fclose_r+0x28>
  41bd14:	2600      	movs	r6, #0
  41bd16:	4630      	mov	r0, r6
  41bd18:	bd70      	pop	{r4, r5, r6, pc}
  41bd1a:	89a3      	ldrh	r3, [r4, #12]
  41bd1c:	0599      	lsls	r1, r3, #22
  41bd1e:	d53c      	bpl.n	41bd9a <_fclose_r+0xa2>
  41bd20:	4621      	mov	r1, r4
  41bd22:	4628      	mov	r0, r5
  41bd24:	f7fe ff42 	bl	41abac <__sflush_r>
  41bd28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41bd2a:	4606      	mov	r6, r0
  41bd2c:	b133      	cbz	r3, 41bd3c <_fclose_r+0x44>
  41bd2e:	69e1      	ldr	r1, [r4, #28]
  41bd30:	4628      	mov	r0, r5
  41bd32:	4798      	blx	r3
  41bd34:	2800      	cmp	r0, #0
  41bd36:	bfb8      	it	lt
  41bd38:	f04f 36ff 	movlt.w	r6, #4294967295
  41bd3c:	89a3      	ldrh	r3, [r4, #12]
  41bd3e:	061a      	lsls	r2, r3, #24
  41bd40:	d422      	bmi.n	41bd88 <_fclose_r+0x90>
  41bd42:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41bd44:	b141      	cbz	r1, 41bd58 <_fclose_r+0x60>
  41bd46:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41bd4a:	4299      	cmp	r1, r3
  41bd4c:	d002      	beq.n	41bd54 <_fclose_r+0x5c>
  41bd4e:	4628      	mov	r0, r5
  41bd50:	f7ff f94a 	bl	41afe8 <_free_r>
  41bd54:	2300      	movs	r3, #0
  41bd56:	6323      	str	r3, [r4, #48]	; 0x30
  41bd58:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41bd5a:	b121      	cbz	r1, 41bd66 <_fclose_r+0x6e>
  41bd5c:	4628      	mov	r0, r5
  41bd5e:	f7ff f943 	bl	41afe8 <_free_r>
  41bd62:	2300      	movs	r3, #0
  41bd64:	6463      	str	r3, [r4, #68]	; 0x44
  41bd66:	f7ff f845 	bl	41adf4 <__sfp_lock_acquire>
  41bd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41bd6c:	2200      	movs	r2, #0
  41bd6e:	07db      	lsls	r3, r3, #31
  41bd70:	81a2      	strh	r2, [r4, #12]
  41bd72:	d50e      	bpl.n	41bd92 <_fclose_r+0x9a>
  41bd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41bd76:	f7ff fbd3 	bl	41b520 <__retarget_lock_close_recursive>
  41bd7a:	f7ff f841 	bl	41ae00 <__sfp_lock_release>
  41bd7e:	4630      	mov	r0, r6
  41bd80:	bd70      	pop	{r4, r5, r6, pc}
  41bd82:	f7ff f80b 	bl	41ad9c <__sinit>
  41bd86:	e7bf      	b.n	41bd08 <_fclose_r+0x10>
  41bd88:	6921      	ldr	r1, [r4, #16]
  41bd8a:	4628      	mov	r0, r5
  41bd8c:	f7ff f92c 	bl	41afe8 <_free_r>
  41bd90:	e7d7      	b.n	41bd42 <_fclose_r+0x4a>
  41bd92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41bd94:	f7ff fbc8 	bl	41b528 <__retarget_lock_release_recursive>
  41bd98:	e7ec      	b.n	41bd74 <_fclose_r+0x7c>
  41bd9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41bd9c:	f7ff fbc2 	bl	41b524 <__retarget_lock_acquire_recursive>
  41bda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41bda4:	2b00      	cmp	r3, #0
  41bda6:	d1bb      	bne.n	41bd20 <_fclose_r+0x28>
  41bda8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  41bdaa:	f016 0601 	ands.w	r6, r6, #1
  41bdae:	d1b1      	bne.n	41bd14 <_fclose_r+0x1c>
  41bdb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41bdb2:	f7ff fbb9 	bl	41b528 <__retarget_lock_release_recursive>
  41bdb6:	4630      	mov	r0, r6
  41bdb8:	bd70      	pop	{r4, r5, r6, pc}
  41bdba:	bf00      	nop

0041bdbc <_fstat_r>:
  41bdbc:	b538      	push	{r3, r4, r5, lr}
  41bdbe:	460b      	mov	r3, r1
  41bdc0:	4c07      	ldr	r4, [pc, #28]	; (41bde0 <_fstat_r+0x24>)
  41bdc2:	4605      	mov	r5, r0
  41bdc4:	4611      	mov	r1, r2
  41bdc6:	4618      	mov	r0, r3
  41bdc8:	2300      	movs	r3, #0
  41bdca:	6023      	str	r3, [r4, #0]
  41bdcc:	f7fc f99b 	bl	418106 <_fstat>
  41bdd0:	1c43      	adds	r3, r0, #1
  41bdd2:	d000      	beq.n	41bdd6 <_fstat_r+0x1a>
  41bdd4:	bd38      	pop	{r3, r4, r5, pc}
  41bdd6:	6823      	ldr	r3, [r4, #0]
  41bdd8:	2b00      	cmp	r3, #0
  41bdda:	d0fb      	beq.n	41bdd4 <_fstat_r+0x18>
  41bddc:	602b      	str	r3, [r5, #0]
  41bdde:	bd38      	pop	{r3, r4, r5, pc}
  41bde0:	2043a15c 	.word	0x2043a15c

0041bde4 <_isatty_r>:
  41bde4:	b538      	push	{r3, r4, r5, lr}
  41bde6:	4c07      	ldr	r4, [pc, #28]	; (41be04 <_isatty_r+0x20>)
  41bde8:	2300      	movs	r3, #0
  41bdea:	4605      	mov	r5, r0
  41bdec:	4608      	mov	r0, r1
  41bdee:	6023      	str	r3, [r4, #0]
  41bdf0:	f7fc f98e 	bl	418110 <_isatty>
  41bdf4:	1c43      	adds	r3, r0, #1
  41bdf6:	d000      	beq.n	41bdfa <_isatty_r+0x16>
  41bdf8:	bd38      	pop	{r3, r4, r5, pc}
  41bdfa:	6823      	ldr	r3, [r4, #0]
  41bdfc:	2b00      	cmp	r3, #0
  41bdfe:	d0fb      	beq.n	41bdf8 <_isatty_r+0x14>
  41be00:	602b      	str	r3, [r5, #0]
  41be02:	bd38      	pop	{r3, r4, r5, pc}
  41be04:	2043a15c 	.word	0x2043a15c

0041be08 <_lseek_r>:
  41be08:	b570      	push	{r4, r5, r6, lr}
  41be0a:	460d      	mov	r5, r1
  41be0c:	4c08      	ldr	r4, [pc, #32]	; (41be30 <_lseek_r+0x28>)
  41be0e:	4611      	mov	r1, r2
  41be10:	4606      	mov	r6, r0
  41be12:	461a      	mov	r2, r3
  41be14:	4628      	mov	r0, r5
  41be16:	2300      	movs	r3, #0
  41be18:	6023      	str	r3, [r4, #0]
  41be1a:	f7fc f97b 	bl	418114 <_lseek>
  41be1e:	1c43      	adds	r3, r0, #1
  41be20:	d000      	beq.n	41be24 <_lseek_r+0x1c>
  41be22:	bd70      	pop	{r4, r5, r6, pc}
  41be24:	6823      	ldr	r3, [r4, #0]
  41be26:	2b00      	cmp	r3, #0
  41be28:	d0fb      	beq.n	41be22 <_lseek_r+0x1a>
  41be2a:	6033      	str	r3, [r6, #0]
  41be2c:	bd70      	pop	{r4, r5, r6, pc}
  41be2e:	bf00      	nop
  41be30:	2043a15c 	.word	0x2043a15c

0041be34 <_read_r>:
  41be34:	b570      	push	{r4, r5, r6, lr}
  41be36:	460d      	mov	r5, r1
  41be38:	4c08      	ldr	r4, [pc, #32]	; (41be5c <_read_r+0x28>)
  41be3a:	4611      	mov	r1, r2
  41be3c:	4606      	mov	r6, r0
  41be3e:	461a      	mov	r2, r3
  41be40:	4628      	mov	r0, r5
  41be42:	2300      	movs	r3, #0
  41be44:	6023      	str	r3, [r4, #0]
  41be46:	f7fb fac5 	bl	4173d4 <_read>
  41be4a:	1c43      	adds	r3, r0, #1
  41be4c:	d000      	beq.n	41be50 <_read_r+0x1c>
  41be4e:	bd70      	pop	{r4, r5, r6, pc}
  41be50:	6823      	ldr	r3, [r4, #0]
  41be52:	2b00      	cmp	r3, #0
  41be54:	d0fb      	beq.n	41be4e <_read_r+0x1a>
  41be56:	6033      	str	r3, [r6, #0]
  41be58:	bd70      	pop	{r4, r5, r6, pc}
  41be5a:	bf00      	nop
  41be5c:	2043a15c 	.word	0x2043a15c

0041be60 <__func__.9780>:
  41be60:	645f766c 5f707369 5f746567 5f726373     lv_disp_get_scr_
  41be70:	00746361                                act.

0041be74 <__func__.9784>:
  41be74:	645f766c 5f707369 5f746567 5f726373     lv_disp_get_scr_
  41be84:	76657270 00000000                       prev....

0041be8c <__func__.9792>:
  41be8c:	645f766c 5f707369 5f746567 6579616c     lv_disp_get_laye
  41be9c:	6f745f72 00000070                       r_top...

0041bea4 <__func__.9796>:
  41bea4:	645f766c 5f707369 5f746567 6579616c     lv_disp_get_laye
  41beb4:	79735f72 00000073 6c5f766c 72657961     r_sys...lv_layer
  41bec4:	7379735f 6f6e203a 73696420 79616c70     _sys: no display
  41bed4:	67657220 65747369 20646572 67206f74      registered to g
  41bee4:	69207465 73207374 202e7379 6579616c     et its sys. laye
  41bef4:	00000072 6c5f766c 72657961 706f745f     r...lv_layer_top
  41bf04:	6f6e203a 73696420 79616c70 67657220     : no display reg
  41bf14:	65747369 20646572 67206f74 69207465     istered to get i
  41bf24:	74207374 6c20706f 72657961 00000000     ts top layer....
  41bf34:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  41bf44:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  41bf54:	65726f63 5f766c2f 70736964 0000632e     core/lv_disp.c..
  41bf64:	64206f6e 6c707369 72207961 73696765     no display regis
  41bf74:	65726574 6f742064 74656720 73746920     tered to get its
  41bf84:	74636120 20657669 65726373 00006e65      active screen..
  41bf94:	64206f6e 6c707369 72207961 73696765     no display regis
  41bfa4:	65726574 6f742064 74656720 73746920     tered to get its
  41bfb4:	65727020 756f6976 63732073 6e656572      previous screen
  41bfc4:	00000000                                ....

0041bfc8 <__func__.9755>:
  41bfc8:	6f5f766c 615f6a62 655f6464 746e6576     lv_obj_add_event
  41bfd8:	0062635f                                _cb.

0041bfdc <__func__.9800>:
  41bfdc:	655f766c 746e6576 7465675f 646e695f     lv_event_get_ind
  41bfec:	00007665                                ev..

0041bff0 <__func__.9827>:
  41bff0:	655f766c 746e6576 7465735f 7478655f     lv_event_set_ext
  41c000:	6172645f 69735f77 0000657a 20746f4e     _draw_size..Not 
  41c010:	65746e69 65727072 20646574 68746977     interpreted with
  41c020:	69687420 76652073 20746e65 65646f63      this event code
  41c030:	00000000 732f2e2e 412f6372 742f4653     ....../src/ASF/t
  41c040:	64726968 74726170 766c2f79 2f386c67     hirdparty/lvgl8/
  41c050:	2f637273 65726f63 5f766c2f 6e657665     src/core/lv_even
  41c060:	00632e74 2074754f 6d20666f 726f6d65     t.c.Out of memor
  41c070:	00000079 2d6a626f 6570733e 74615f63     y...obj->spec_at
  41c080:	3e2d7274 6e657665 73645f74 3d212063     tr->event_dsc !=
  41c090:	4c554e20 0000004c 65737341 64657472      NULL...Asserted
  41c0a0:	20746120 72707865 69737365 203a6e6f      at expression: 
  41c0b0:	28207325 00297325                       %s (%s).

0041c0b8 <__func__.9755>:
  41c0b8:	675f766c 70756f72 6464615f 6a626f5f     lv_group_add_obj
  41c0c8:	00000000 7478656e 203d2120 4c4c554e     ....next != NULL
  41c0d8:	00000000 732f2e2e 412f6372 742f4653     ....../src/ASF/t
  41c0e8:	64726968 74726170 766c2f79 2f386c67     hirdparty/lvgl8/
  41c0f8:	2f637273 65726f63 5f766c2f 756f7267     src/core/lv_grou
  41c108:	00632e70 756f7267 3d212070 4c554e20     p.c.group != NUL
  41c118:	0000004c                                L...

0041c11c <__func__.9865>:
  41c11c:	695f766c 0074696e                       lv_init.

0041c124 <__func__.9926>:
  41c124:	6f5f766c 615f6a62 636f6c6c 5f657461     lv_obj_allocate_
  41c134:	63657073 7474615f 00000072 732f2e2e     spec_attr...../s
  41c144:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  41c154:	766c2f79 2f386c67 2f637273 65726f63     y/lvgl8/src/core
  41c164:	5f766c2f 2e6a626f 00000063 695f766c     /lv_obj.c...lv_i
  41c174:	3a74696e 726c6120 79646165 696e6920     nit: already ini
  41c184:	00646574 2d6a626f 6570733e 74615f63     ted.obj->spec_at
  41c194:	21207274 554e203d 00004c4c              tr != NULL..

0041c1a0 <lv_obj_class>:
  41c1a0:	00000000 00400f45 00401855 00000000     ....E.@.U.@.....
  41c1b0:	00401411 00820082 0000024a              ..@.....J...

0041c1bc <__func__.9693>:
  41c1bc:	6f5f766c 635f6a62 7373616c 6572635f     lv_obj_class_cre
  41c1cc:	5f657461 006a626f 732f2e2e 412f6372     ate_obj.../src/A
  41c1dc:	742f4653 64726968 74726170 766c2f79     SF/thirdparty/lv
  41c1ec:	2f386c67 2f637273 65726f63 5f766c2f     gl8/src/core/lv_
  41c1fc:	5f6a626f 73616c63 00632e73 64206f4e     obj_class.c.No d
  41c20c:	6c707369 63207961 74616572 74206465     isplay created t
  41c21c:	6f73206f 72616620 6f4e202e 616c7020     o so far. No pla
  41c22c:	74206563 7361206f 6e676973 65687420     ce to assign the
  41c23c:	77656e20 72637320 006e6565               new screen.

0041c248 <__func__.9886>:
  41c248:	6c5f766c 756f7961 65725f74 74736967     lv_layout_regist
  41c258:	00007265 732f2e2e 412f6372 742f4653     er..../src/ASF/t
  41c268:	64726968 74726170 766c2f79 2f386c67     hirdparty/lvgl8/
  41c278:	2f637273 65726f63 5f766c2f 5f6a626f     src/core/lv_obj_
  41c288:	2e736f70 00000063 5f766c5f 6f79616c     pos.c..._lv_layo
  41c298:	6c5f7475 20747369 4e203d21 004c4c55     ut_list != NULL.

0041c2a8 <__func__.9932>:
  41c2a8:	5f766c5f 5f6a626f 6c797473 72635f65     _lv_obj_style_cr
  41c2b8:	65746165 6172745f 7469736e 006e6f69     eate_transition.

0041c2c8 <__func__.9985>:
  41c2c8:	5f746567 61636f6c 74735f6c 00656c79     get_local_style.
  41c2d8:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  41c2e8:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  41c2f8:	65726f63 5f766c2f 5f6a626f 6c797473     core/lv_obj_styl
  41c308:	00632e65 2d6a626f 7974733e 2073656c     e.c.obj->styles 
  41c318:	4e203d21 004c4c55                       != NULL.

0041c320 <__func__.10208>:
  41c320:	6f5f766c 675f6a62 645f7465 00707369     lv_obj_get_disp.
  41c330:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  41c340:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  41c350:	65726f63 5f766c2f 5f6a626f 65657274     core/lv_obj_tree
  41c360:	0000632e 73206f4e 65657263 6f66206e     .c..No screen fo
  41c370:	00646e75                                und.

0041c374 <__func__.9865>:
  41c374:	6c6c6966 656c625f 6465646e 00000000     fill_blended....

0041c384 <__func__.9992>:
  41c384:	5f70616d 6e656c62 00646564 732f2e2e     map_blended.../s
  41c394:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  41c3a4:	766c2f79 2f386c67 2f637273 77617264     y/lvgl8/src/draw
  41c3b4:	5f766c2f 77617264 656c625f 632e646e     /lv_draw_blend.c
  41c3c4:	00000000 6c6c6966 656c625f 6465646e     ....fill_blended
  41c3d4:	6e75203a 70707573 6574726f 6c622064     : unsupported bl
  41c3e4:	20646e65 65646f6d 00000000              end mode....

0041c3f0 <__func__.9688>:
  41c3f0:	645f766c 5f776172 00676d69              lv_draw_img.

0041c3fc <__func__.9752>:
  41c3fc:	695f766c 645f676d 5f776172 65726f63     lv_img_draw_core
  41c40c:	00000000 732f2e2e 412f6372 742f4653     ....../src/ASF/t
  41c41c:	64726968 74726170 766c2f79 2f386c67     hirdparty/lvgl8/
  41c42c:	2f637273 77617264 5f766c2f 77617264     src/draw/lv_draw
  41c43c:	676d695f 0000632e 67616d49 72642065     _img.c..Image dr
  41c44c:	203a7761 20637273 4e207369 004c4c55     aw: src is NULL.
  41c45c:	640a6f4e 00617461 67616d49 72642065     No.data.Image dr
  41c46c:	65207761 726f7272 00000000 67616d49     aw error....Imag
  41c47c:	72642065 63207761 74276e61 61657220     e draw can't rea
  41c48c:	68742064 696c2065 0000656e              d the line..

0041c498 <__func__.9752>:
  41c498:	645f766c 5f776172 7474656c 00007265     lv_draw_letter..

0041c4a8 <__func__.9779>:
  41c4a8:	77617264 74656c5f 5f726574 6d726f6e     draw_letter_norm
  41c4b8:	00006c61                                al..

0041c4bc <_lv_bpp1_opa_table>:
  41c4bc:	0000ff00                                ....

0041c4c0 <_lv_bpp2_opa_table>:
  41c4c0:	ffaa5500                                .U..

0041c4c4 <_lv_bpp4_opa_table>:
  41c4c4:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

0041c4d4 <_lv_bpp8_opa_table>:
  41c4d4:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  41c4e4:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  41c4f4:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  41c504:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  41c514:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  41c524:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  41c534:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  41c544:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  41c554:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  41c564:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  41c574:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  41c584:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  41c594:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  41c5a4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  41c5b4:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  41c5c4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  41c5d4:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  41c5e4:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  41c5f4:	77617264 5f766c2f 77617264 62616c5f     draw/lv_draw_lab
  41c604:	632e6c65 00000000 645f766c 5f776172     el.c....lv_draw_
  41c614:	7474656c 203a7265 746e6f66 20736920     letter: font is 
  41c624:	4c4c554e 00000000 645f766c 5f776172     NULL....lv_draw_
  41c634:	7474656c 203a7265 70796c67 73642068     letter: glyph ds
  41c644:	6e202e63 6620746f 646e756f 726f6620     c. not found for
  41c654:	252b5520 00000058 645f766c 5f776172      U+%X...lv_draw_
  41c664:	7474656c 203a7265 72616863 65746361     letter: characte
  41c674:	20732772 6d746962 6e207061 6620746f     r's bitmap not f
  41c684:	646e756f 00000000 276e6143 72642074     ound....Can't dr
  41c694:	73207761 702d6275 6c657869 6e657220     aw sub-pixel ren
  41c6a4:	65726564 656c2064 72657474 63656220     dered letter bec
  41c6b4:	65737561 5f564c20 5f455355 544e4f46     ause LV_USE_FONT
  41c6c4:	4255535f 3d205850 2030203d 6c206e69     _SUBPX == 0 in l
  41c6d4:	6f635f76 682e666e 00000000 645f766c     v_conf.h....lv_d
  41c6e4:	5f776172 7474656c 203a7265 61766e69     raw_letter: inva
  41c6f4:	2064696c 00707062                       lid bpp.

0041c6fc <wcorr.9761>:
  41c6fc:	81808080 83828281 87868584 8d8c8a89     ................
  41c70c:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  41c71c:	000000b5                                ....

0041c720 <__func__.6921>:
  41c720:	645f766c 5f776172 6b73616d 6464615f     lv_draw_mask_add
  41c730:	00000000                                ....

0041c734 <__func__.7045>:
  41c734:	645f766c 5f776172 6b73616d 6461725f     lv_draw_mask_rad
  41c744:	5f737569 74696e69 00000000              ius_init....

0041c750 <__func__.7214>:
  41c750:	63726963 6c61635f 61615f63 00000034     circ_calc_aa4...
  41c760:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  41c770:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  41c780:	77617264 5f766c2f 77617264 73616d5f     draw/lv_draw_mas
  41c790:	00632e6b 6d5f766c 5f6b7361 3a646461     k.c.lv_mask_add:
  41c7a0:	206f6e20 63616c70 6f742065 64646120      no place to add
  41c7b0:	65687420 73616d20 0000006b 78656e55      the mask...Unex
  41c7c0:	74636570 73206465 74726174 676e6120     pected start ang
  41c7d0:	0000656c 72617473 6e615f74 20656c67     le..start_angle 
  41c7e0:	30203d3e 20262620 72617473 6e615f74     >= 0 && start_an
  41c7f0:	20656c67 33203d3c 00003036 78656e55     gle <= 360..Unex
  41c800:	74636570 65206465 6120646e 656c676e     pected end angle
  41c810:	00000000 5f646e65 6c676e61 3d3e2065     ....end_angle >=
  41c820:	26203020 74732026 5f747261 6c676e61      0 && start_angl
  41c830:	3d3c2065 30363320 00000000 72746e65     e <= 360....entr
  41c840:	3d212079 4c554e20 0000004c 623e2d63     y != NULL...c->b
  41c850:	21206675 554e203d 00004c4c              uf != NULL..

0041c85c <__func__.9772>:
  41c85c:	77617264 5f67625f 00676d69 732f2e2e     draw_bg_img.../s
  41c86c:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  41c87c:	766c2f79 2f386c67 2f637273 77617264     y/lvgl8/src/draw
  41c88c:	5f766c2f 77617264 6365725f 00632e74     /lv_draw_rect.c.
  41c89c:	6c756f43 74276e64 61657220 68742064     Couldn't read th
  41c8ac:	61622065 72676b63 646e756f 616d6920     e background ima
  41c8bc:	00006567 33221100 77665544 bbaa9988     ge...."3DUfw....
  41c8cc:	ffeeddcc                                ....

0041c8d0 <__func__.7788>:
  41c8d0:	5f766c5f 5f676d69 68636163 706f5f65     _lv_img_cache_op
  41c8e0:	00006e65 732f2e2e 412f6372 742f4653     en..../src/ASF/t
  41c8f0:	64726968 74726170 766c2f79 2f386c67     hirdparty/lvgl8/
  41c900:	2f637273 77617264 5f766c2f 5f676d69     src/draw/lv_img_
  41c910:	68636163 00632e65 67616d49 72642065     cache.c.Image dr
  41c920:	63207761 6f6e6e61 706f2074 74206e65     aw cannot open t
  41c930:	69206568 6567616d 73657220 6372756f     he image resourc
  41c940:	00000065 33221100 77665544 bbaa9988     e....."3DUfw....
  41c950:	ffeeddcc                                ....

0041c954 <__func__.7801>:
  41c954:	5f766c5f 5f676d69 6f636564 5f726564     _lv_img_decoder_
  41c964:	74696e69 00000000                       init....

0041c96c <__func__.7823>:
  41c96c:	695f766c 645f676d 646f6365 6f5f7265     lv_img_decoder_o
  41c97c:	006e6570                                pen.

0041c980 <__func__.7846>:
  41c980:	695f766c 645f676d 646f6365 635f7265     lv_img_decoder_c
  41c990:	74616572 00000065                       reate...

0041c998 <__func__.7877>:
  41c998:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
  41c9a8:	746c6975 5f6e695f 6f666e69 00000000     uilt_in_info....

0041c9b8 <__func__.7884>:
  41c9b8:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
  41c9c8:	746c6975 5f6e695f 6e65706f 00000000     uilt_in_open....

0041c9d8 <__func__.7913>:
  41c9d8:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
  41c9e8:	746c6975 5f6e695f 64616572 6e696c5f     uilt_in_read_lin
  41c9f8:	00000065                                e...

0041c9fc <__func__.7930>:
  41c9fc:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
  41ca0c:	746c6975 5f6e695f 656e696c 7572745f     uilt_in_line_tru
  41ca1c:	6f635f65 00726f6c 006e6962 732f2e2e     e_color.bin.../s
  41ca2c:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  41ca3c:	766c2f79 2f386c67 2f637273 77617264     y/lvgl8/src/draw
  41ca4c:	5f766c2f 5f676d69 6f636564 2e726564     /lv_img_decoder.
  41ca5c:	00000063 67616d49 65672065 6e692074     c...Image get in
  41ca6c:	67206f66 72207465 20646165 656c6966     fo get read file
  41ca7c:	61656820 00726564 67616d49 65672065      header.Image ge
  41ca8c:	6e692074 66206f66 646e756f 6b6e7520     t info found unk
  41ca9c:	6e776f6e 63727320 70797420 00000065     nown src type...
  41caac:	6c697542 6e692d74 616d6920 64206567     Built-in image d
  41cabc:	646f6365 63207265 74276e61 65706f20     ecoder can't ope
  41cacc:	6874206e 69662065 0000656c 2d637364     n the file..dsc-
  41cadc:	6573753e 61645f72 21206174 554e203d     >user_data != NU
  41caec:	00004c4c 72657375 7461645f 703e2d61     LL..user_data->p
  41cafc:	74656c61 21206574 554e203d 00004c4c     alette != NULL..
  41cb0c:	72657375 7461645f 6f3e2d61 21206170     user_data->opa !
  41cb1c:	554e203d 00004c4c 5f676d69 6f636564     = NULL..img_deco
  41cb2c:	5f726564 6c697562 6e695f74 65706f5f     der_built_in_ope
  41cb3c:	6f203a6e 6f207475 656d2066 79726f6d     n: out of memory
  41cb4c:	00000000 67616d49 65642065 65646f63     ....Image decode
  41cb5c:	706f2072 203a6e65 6e6b6e75 206e776f     r open: unknown 
  41cb6c:	6f6c6f63 6f662072 74616d72 00000000     color format....
  41cb7c:	6c697542 6e692d74 616d6920 64206567     Built-in image d
  41cb8c:	646f6365 73207265 206b6565 6c696166     ecoder seek fail
  41cb9c:	00006465 6c697542 6e692d74 616d6920     ed..Built-in ima
  41cbac:	64206567 646f6365 72207265 20646165     ge decoder read 
  41cbbc:	6c696166 00006465 6c697542 6e692d74     failed..Built-in
  41cbcc:	616d6920 64206567 646f6365 72207265      image decoder r
  41cbdc:	20646165 20746f6e 70707573 7374726f     ead not supports
  41cbec:	65687420 6c6f6320 6620726f 616d726f      the color forma
  41cbfc:	00000074 6f636564 20726564 4e203d21     t...decoder != N
  41cc0c:	004c4c55 2d637364 6372733e 203d2120     ULL.dsc->src != 
  41cc1c:	4c4c554e 00000000                       NULL....

0041cc24 <__func__.10093>:
  41cc24:	646e6966 6172745f 655f6b63 0000646e     find_track_end..
  41cc34:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  41cc44:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  41cc54:	72747865 616c2f61 74756f79 6c662f73     extra/layouts/fl
  41cc64:	6c2f7865 6c665f76 632e7865 00000000     ex/lv_flex.c....
  41cc74:	5f77656e 20637364 4e203d21 004c4c55     new_dsc != NULL.

0041cc84 <__func__.5919>:
  41cc84:	665f766c 5f746e6f 5f746567 70796c67     lv_font_get_glyp
  41cc94:	69625f68 70616d74 00000000              h_bitmap....

0041cca0 <__func__.5927>:
  41cca0:	665f766c 5f746e6f 5f746567 70796c67     lv_font_get_glyp
  41ccb0:	73645f68 00000063                       h_dsc...

0041ccb8 <__func__.5934>:
  41ccb8:	665f766c 5f746e6f 5f746567 70796c67     lv_font_get_glyp
  41ccc8:	69775f68 00687464 732f2e2e 412f6372     h_width.../src/A
  41ccd8:	742f4653 64726968 74726170 766c2f79     SF/thirdparty/lv
  41cce8:	2f386c67 2f637273 746e6f66 5f766c2f     gl8/src/font/lv_
  41ccf8:	746e6f66 0000632e 4c4c554e 696f7020     font.c..NULL poi
  41cd08:	7265746e 00000000 746e6f66 2120705f     nter....font_p !
  41cd18:	554e203d 00004c4c 746e6f66 203d2120     = NULL..font != 
  41cd28:	4c4c554e 00000000                       NULL....

0041cd30 <__func__.7068>:
  41cd30:	665f766c 5f746e6f 5f746567 6d746962     lv_font_get_bitm
  41cd40:	665f7061 745f746d 00007478 732f2e2e     ap_fmt_txt..../s
  41cd50:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  41cd60:	766c2f79 2f386c67 2f637273 746e6f66     y/lvgl8/src/font
  41cd70:	5f766c2f 746e6f66 746d665f 7478745f     /lv_font_fmt_txt
  41cd80:	0000632e 706d6f43 73736572 66206465     .c..Compressed f
  41cd90:	73746e6f 20736920 64657375 74756220     onts is used but
  41cda0:	5f564c20 5f455355 544e4f46 4d4f435f      LV_USE_FONT_COM
  41cdb0:	53455250 20444553 6e207369 6520746f     PRESSED is not e
  41cdc0:	6c62616e 69206465 766c206e 6e6f635f     nabled in lv_con
  41cdd0:	00682e66                                f.h.

0041cdd4 <cmaps>:
  41cdd4:	00000020 0001005f 00000000 00000000      ..._...........
  41cde4:	00020000 000000b0 0060f7f3 0042029c     ..........`...B.
  41cdf4:	00000000 0003003e                       ....>...

0041cdfc <font_dsc>:
  41cdfc:	0041ce14 0041f094 0041cdd4 00420134     ..A...A...A.4.B.
  41ce0c:	28020010 20400b2c                       ...(,.@ 

0041ce14 <glyph_bitmap>:
  41ce14:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  41ce24:	88f09109 f080081f 00000088 3c200d00     .............. <
  41ce34:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  41ce44:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  41ce54:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  41ce64:	00000070 0000000e 0000e000 30eaef19     p..............0
  41ce74:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  41ce84:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  41ce94:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  41cea4:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  41ceb4:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  41cec4:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  41ced4:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  41cee4:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  41cef4:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  41cf04:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  41cf14:	00000000 f0011f00 00f0001f 0bf10300     ................
  41cf24:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  41cf34:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  41cf44:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  41cf54:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  41cf64:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  41cf74:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  41cf84:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  41cf94:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  41cfa4:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  41cfb4:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  41cfc4:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  41cfd4:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  41cfe4:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  41cff4:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  41d004:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  41d014:	0001c07e 0000f106 0000f006 0000900d     ~...............
  41d024:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  41d034:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  41d044:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  41d054:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  41d064:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  41d074:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  41d084:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  41d094:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  41d0a4:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  41d0b4:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  41d0c4:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  41d0d4:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  41d0e4:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  41d0f4:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  41d104:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  41d114:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  41d124:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  41d134:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  41d144:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  41d154:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  41d164:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  41d174:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  41d184:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  41d194:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  41d1a4:	00303333 00000000 1f000000 03f3ffff     330.............
  41d1b4:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  41d1c4:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  41d1d4:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  41d1e4:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  41d1f4:	00000000 0000800b 0000900c daef6c00     .............l..
  41d204:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  41d214:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  41d224:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  41d234:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  41d244:	00e50190 00000000 10a43d00 00000028     .........=..(...
  41d254:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  41d264:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  41d274:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  41d284:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  41d294:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  41d2a4:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  41d2b4:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  41d2c4:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  41d2d4:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  41d2e4:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  41d2f4:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  41d304:	0000008e 00008eda 008e9d00 8e9d0000     ................
  41d314:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  41d324:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  41d334:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  41d344:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  41d354:	8e414444 8e000000 8e000000 8f000000     DDA.............
  41d364:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  41d374:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  41d384:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  41d394:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  41d3a4:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  41d3b4:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  41d3c4:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  41d3d4:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  41d3e4:	00bc4404 00c00900 00009c00 0000c009     .D..............
  41d3f4:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  41d404:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  41d414:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  41d424:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  41d434:	00008ea0 00008e00 00008e00 00008e00     ................
  41d444:	00008e00 00008e00 00008e00 00008e00     ................
  41d454:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  41d464:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  41d474:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  41d484:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  41d494:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  41d4a4:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  41d4b4:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  41d4c4:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  41d4d4:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  41d4e4:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  41d4f4:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  41d504:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  41d514:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  41d524:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  41d534:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  41d544:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  41d554:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  41d564:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  41d574:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  41d584:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  41d594:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  41d5a4:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  41d5b4:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  41d5c4:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  41d5d4:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  41d5e4:	00c00900 009c0000 c0090000 9c000000     ................
  41d5f4:	09000000 000000c0 9c00009c a90b0000     ................
  41d604:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  41d614:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  41d624:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  41d634:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  41d644:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  41d654:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  41d664:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  41d674:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  41d684:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  41d694:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  41d6a4:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  41d6b4:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  41d6c4:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  41d6d4:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  41d6e4:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  41d6f4:	e8000090 0000f105 00e6f305 fd0c0000     ................
  41d704:	00000000 0000403f 00f30200 2f000000     ....?@........./
  41d714:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  41d724:	030000f3 010000f6 000000ea 000000cc     ................
  41d734:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  41d744:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  41d754:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  41d764:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  41d774:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  41d784:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  41d794:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  41d7a4:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  41d7b4:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  41d7c4:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  41d7d4:	b05d740b f0040000 f2eece04 f214821f     .t].............
  41d7e4:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  41d7f4:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  41d804:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  41d814:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  41d824:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  41d834:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  41d844:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  41d854:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  41d864:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  41d874:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  41d884:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  41d894:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  41d8a4:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  41d8b4:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  41d8c4:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  41d8d4:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  41d8e4:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  41d8f4:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  41d904:	0000baf5 0000baf5 00a8baf5 babababa     ................
  41d914:	babababa 00b00a00 00000099 0a00ab00     ................
  41d924:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  41d934:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  41d944:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  41d954:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  41d964:	baf30700 babababa babababa 9eb9baba     ................
  41d974:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  41d984:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  41d994:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  41d9a4:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  41d9b4:	00baf400 00baf500 00baf500 00baf500     ................
  41d9c4:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  41d9d4:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  41d9e4:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  41d9f4:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  41da04:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  41da14:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  41da24:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  41da34:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  41da44:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  41da54:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  41da64:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  41da74:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  41da84:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  41da94:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  41daa4:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  41dab4:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  41dac4:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  41dad4:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  41dae4:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  41daf4:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  41db04:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  41db14:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  41db24:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  41db34:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  41db44:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  41db54:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  41db64:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  41db74:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  41db84:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  41db94:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  41dba4:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  41dbb4:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  41dbc4:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  41dbd4:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  41dbe4:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  41dbfc:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  41dc0c:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  41dc1c:	0000ed10 000094af 0a00d00e 000000f1     ................
  41dc2c:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  41dc3c:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  41dc4c:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  41dc5c:	000000a3 18500000 84888888 ddbffa05     ......P.........
  41dc6c:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  41dc7c:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  41dc8c:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  41dc9c:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  41dcac:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  41dcbc:	2fffffff ffffffff ff0effef 01feffff     .../............
  41dccc:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  41dcdc:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  41dcec:	87688688 88888807 1fffff86 ffffffff     ..h.............
  41dcfc:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  41dd0c:	01000000 00000050 f81d0000 00000000     ....P...........
  41dd1c:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  41dd2c:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  41dd3c:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  41dd4c:	000000e2 207d0000 00000000 00000000     ......} ........
  41dd5c:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  41dd6c:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  41dd7c:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  41dd8c:	00006003 00001100 00000000 000000ff     .`..............
  41dd9c:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  41ddac:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  41ddbc:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  41ddcc:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  41dddc:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  41ddec:	0050fdff 44020000 00000020 00000000     ..P....D .......
  41ddfc:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  41de0c:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  41de1c:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  41de2c:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  41de3c:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  41de4c:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  41de5c:	00004077 03000000 00410310 9f000000     w@........A.....
  41de6c:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  41de7c:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  41de8c:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  41de9c:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  41deac:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  41debc:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  41decc:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  41dedc:	0c000000 0000c0ff ff0c0000 000000c0     ................
  41deec:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  41defc:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  41df0c:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  41df1c:	ffffffff ffffffff faffffff ccaccfb3     ................
  41df2c:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  41df3c:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  41df4c:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  41df5c:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  41df6c:	ffff8b98 fffffffc ffffffff fffffffc     ................
  41df7c:	ffffffff ffff9ffb ffffffff 000000f6     ................
  41df8c:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  41df9c:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  41dfac:	0100c06f 8effffff de010050 0000edee     o.......P.......
  41dfbc:	00000000 22222200 21000000 10ffffff     ....."""...!....
  41dfcc:	fff80800 0010bcfb fcfff41e df010010     ................
  41dfdc:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  41dfec:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  41dffc:	fffffffd ffffffff ffffffff ffffffff     ................
  41e00c:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  41e01c:	70020000 02000000 000000ef 00f0ef02     ...p............
  41e02c:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  41e03c:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  41e04c:	05000000 000000ff 00c00500 00000000     ................
  41e05c:	00000000 07000000 00000070 05007002     ........p....p..
  41e06c:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  41e07c:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  41e08c:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  41e09c:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  41e0ac:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  41e0bc:	000010bf 09000000 000000e3 02000000     ................
  41e0cc:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  41e0dc:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  41e0ec:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  41e0fc:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  41e10c:	ccccffcf ffcccccc ffffffaf 00f9ffff     ................
  41e11c:	00002000 00fa0100 ff060000 0d000010     . ..............
  41e12c:	000070ff 00f1ff6f faffef01 ffff0b00     .p..o...........
  41e13c:	ff5f60ff cfe0ffff f6ffffff ffffbffe     .`_.............
  41e14c:	ff4ffdf9 49bff9ff 3ff5ffff d0ff2ee5     ..O....I...?....
  41e15c:	fdffff06 ba280020 30040060 1f310000     .... .(.`..0..1.
  41e16c:	f90600e0 7f00e01f 09e01ffa e01ffaff     ................
  41e17c:	1ffaffaf faffffeb ffffff1f ffff1ffa     ................
  41e18c:	e61ffaff 1ffaffff faff5fe0 ff04e01f     ........._......
  41e19c:	00e01ffa d00ffa3e 00d70200 00000000     ....>...........
  41e1ac:	00000002 fb0c0000 00000020 90ffff00     ........ .......
  41e1bc:	0f000000 00e6ffff ffff0000 0030fcff     ..............0.
  41e1cc:	ffffff0f ff0091ff ffffffff ffff0fe6     ................
  41e1dc:	f2ffffff ffffffff ff0ffdff f8ffffff     ................
  41e1ec:	ffffff00 0f00b2ff 40fdffff ffff0000     ...........@....
  41e1fc:	000000f7 00a1ff0f 6a000000 00000040     ...........j@...
  41e20c:	44140000 42440120 10ffff0d fff1ffdf     ...D .DB........
  41e21c:	ff0ff3ff ffff3fff f4ffff40 0ff4ffff     .....?..@.......
  41e22c:	ff4fffff ffff40ff f4fffff4 4fffff0f     ..O..@.........O
  41e23c:	ff40ffff fffff4ff ffff0ff4 40ffff4f     ..@.........O..@
  41e24c:	fff4ffff ff0ff4ff ffff4fff f3ffff30     .........O..0...
  41e25c:	09c0ff9f 1400fcff 44444444 ffff0d42     ........DDDDB...
  41e26c:	f1ffffff ffffffff ff3fffff ffffffff     ..........?.....
  41e27c:	fffffff4 4fffffff ffffffff fffff4ff     .......O........
  41e28c:	ffffffff ffffff4f fff4ffff ffffffff     ....O...........
  41e29c:	ffff4fff f4ffffff ffffffff ff4fffff     .O............O.
  41e2ac:	ffffffff ffff9ff3 00fcffff 00001002     ................
  41e2bc:	00e20f42 fe0ffb03 0ffb0430 fb04f4ff     B.......0.......
  41e2cc:	54ffff0f ffff0ffb ff0ffbfa 0ffbffff     ...T............
  41e2dc:	fbffffff d6ffff0f fdff0ffb ff0ffb14     ................
  41e2ec:	0ffb04c1 fb0400fb 0300a00c 000000fa     ................
  41e2fc:	00000000 00001200 03000000 000060ff     .............`..
  41e30c:	ff2e0000 000000f5 ffffef01 1d000040     ............@...
  41e31c:	f3ffffff ffcf0000 20feffff ffffff0a     ........... ....
  41e32c:	0ee0ffff ffffffff 9903f2ff 99999999     ................
  41e33c:	88880550 70888888 ffffff0f 0ff3ffff     P......p........
  41e34c:	ffffffff ff0bf4ff ffffffff 000000d1     ................
  41e35c:	00000000 0000903f 0000fc3f 0010fd3f     ....?...?...?...
  41e36c:	0010fd3f 0010fd3f 0010fd1f 00f4cf00     ?...?...........
  41e37c:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  41e38c:	00e0cf00 00a40000 00000000 0010cd00     ................
  41e39c:	10fd1f00 fd3f0000 3f000010 000010fd     ......?....?....
  41e3ac:	0010fd3f 00fd3f00 90ff0800 90ff0800     ?....?..........
  41e3bc:	90ff0800 90ff0800 90ff0200 80070000     ................
  41e3cc:	00000000 00500400 02000000 000060ff     ......P......`..
  41e3dc:	f73f0000 00000000 0070ff03 3f000000     ..?.......p....?
  41e3ec:	060000f7 c9ff9a99 ffff8099 ffffffff     ................
  41e3fc:	ffffff3d 01f2ffff 11f73f11 03000010     =........?......
  41e40c:	000070ff f73f0000 00000000 0070ff03     .p....?.......p.
  41e41c:	0c000000 000000d3 99999969 ff0f9899     ........i.......
  41e42c:	ffffffff ffffdff3 20ffffff 00000000     ........... ....
  41e43c:	00000000 00645601 03000000 f9effebf     .....Vd.........
  41e44c:	7f000010 df0310fa ff0800e4 1eb409a0     ................
  41e45c:	ff4f50ff 26ff0b20 ffefe1ff 63ffcf09     .PO. ..&.......c
  41e46c:	ffbffaff 54ffff09 ff1ef6ff 09fbdf51     .......T....Q...
  41e47c:	ef03b0ff 5f3004e2 2c0010fc ff6a95ff     ......0_...,..j.
  41e48c:	00000090 92fddf49 00000000 00000000     ....I...........
  41e49c:	cd000000 00000020 00000000 1400f58f     .... ...........
  41e4ac:	00004066 acef0400 91ffefff 1c000000     f@..............
  41e4bc:	4d00a1ff 000030fe abf59f00 00f4ef31     ...M.0......1...
  41e4cc:	ff05b107 fe7fe1ff 30fe0f10 4ff5ff2d     ...........0-..O
  41e4dc:	ff0c90ff f6af00e0 0260ff5f 0600f4ff     ........_.`.....
  41e4ec:	00fbefff 10fd4f00 c0ff3e00 df020000     .....O...>......
  41e4fc:	bf0154e8 000000e3 60ffae05 0060ff07     .T.........`..`.
  41e50c:	00000000 f64e0000 00000000 01000000     ......N.........
  41e51c:	000000a1 00000000 00000000 00d03e00     .............>..
  41e52c:	00000000 80ff0c00 00000000 ffff0600     ................
  41e53c:	00000020 ffef0000 000000fb fc8f0000      ...............
  41e54c:	0000f4cf fb2f0000 00d0ff00 ff0b0000     ....../.........
  41e55c:	70ff0fc0 ff040000 ffff01fd df000010     ...p............
  41e56c:	ff2fe0ff 7f0000fa ff9bffff 1f00f3ff     ../.............
  41e57c:	0eb0ffff 0ac0ffff 24feffff 60ffffff     ...........$...`
  41e58c:	ffffffff faffffff cccccc06 cbcccccc     ................
  41e59c:	00000030 00360000 00000000 dd807f00     0.....6.........
  41e5ac:	8d0000db fffff8ef ffff07b0 f46f55fd     .............Uo.
  41e5bc:	e2aff86f ff740500 00207e90 00fa3f00     o.....t..~ ..?..
  41e5cc:	02000000 4a50b2ef fd2e0100 b08ff41d     ......PJ........
  41e5dc:	0bd1ffff fffbffff cf0020fe 2112fbff     ......... .....!
  41e5ec:	9f020000 000000c0 005b0000 a0070000     ..........[.....
  41e5fc:	00000000 00b0ff08 ff080000 0000b0ff     ................
  41e60c:	ff95ff08 ff0800b0 b0ff0590 0090ff07     ................
  41e61c:	9fb0ff05 05000090 004000fd 10030000     ..........@.....
  41e62c:	0000204c fe0bb600 cf000020 20fe2ef0     L ...... ...... 
  41e63c:	00f4cf00 cf20fe2e 2e0000f4 00f4cffe     ...... .........
  41e64c:	ff2e0000 000000f4 00f42e00 00000000     ................
  41e65c:	00000013 00300800 00000000 f3bf0000     ......0.........
  41e66c:	bbbbbb08 ff0b0090 ffff39ff 8f00f1ff     .........9......
  41e67c:	00f0cfcf 00f10a00 80942f38 f10a0000     ........8/......
  41e68c:	902f0000 0a000000 2f0000f1 03000090     ../......../....
  41e69c:	0030f10a 0000902f f8f8cb1f bbeb2f00     ..0./......../..
  41e6ac:	ffff39bb ff1f00e2 9fb0ffff 000020fd     .9........... ..
  41e6bc:	00000000 3700d108 00008788 ffef0000     .......7........
  41e6cc:	0000a0ff ffffff00 b6ccccfd ffffffff     ................
  41e6dc:	ffffffff ffffffff ffffffff ffffffff     ................
  41e6ec:	ffffffff ffffffff ffffffff ffffffff     ................
  41e6fc:	ffffffff ffffffff ffffffff ffffafff     ................
  41e70c:	f9ffffff 00000000 00000000 10dd0100     ................
  41e71c:	00000000 00d1ff1d df010000 0010fdff     ................
  41e72c:	ffff1d00 0000d1ff ffffff9f 010000f9     ................
  41e73c:	10c1ff1c 0c000000 0000c0ff ff0c0000     ................
  41e74c:	000000c0 c0ff0c00 99790000 99b3ff3b     ..........y.;...
  41e75c:	b2ffff97 ffff2b44 ddfeffff ffffffef     ....D+..........
  41e76c:	faffffff ccaccfb3 cccccccc 000000ca     ................
  41e77c:	00020000 00000000 c7ff0400 00000000     ................
  41e78c:	f0ffaf00 00000000 00fdff1f 06000000     ................
  41e79c:	00c0ffff 08000000 0000f7ff 0c000000     ................
  41e7ac:	000030ff ff040000 000000c0 f3ef0100     .0..............
  41e7bc:	304a0000 00f8df02 15fedf05 0000fbef     ..J0............
  41e7cc:	ffffffef 0b0000fa f7ffffff 7f000000     ................
  41e7dc:	00a2ffff ba020000 00000085 86040000     ................
  41e7ec:	10000000 00faff06 efd1df02 df01f13c     ............<...
  41e7fc:	afe00efa 00fadf21 dff6ef9f 8d0000fa     ....!...........
  41e80c:	00fbffff ff060000 000000fd f6ffef48     ............H...
  41e81c:	ff6f0000 00f6fffb 23cff30e ee00f6ff     ..o........#....
  41e82c:	ff04f20a fcfe09f6 f1ff0400 0010da08     ................
  41e83c:	00006202 00000000 6f000000 0087f9ff     .b.........o....
  41e84c:	ffff0800 a608f798 59f9ff8f ffa8ff90     ...........Y....
  41e85c:	0fccfcff ffff8ffa a8fff1ff ffffffff     ................
  41e86c:	ff8ffa1f fff1ffff ffffffa8 8ffa1fff     ................
  41e87c:	f1ffffff ffffa8ff fa1fffff ffffff7f     ................
  41e88c:	12e3fff0 0f212222 f9ffffff ccac0000     ....""!.........
  41e89c:	0050cbcc 99994900 0e009599 ffffffff     ..P..I..........
  41e8ac:	22fd00f6 f64f2222 0000c00f fcf3ff01     ..."""O.........
  41e8bc:	1f000000 00c06fff f6ff0200 ffffffff     .....o..........
  41e8cc:	ff6fffff ffffdcff b0fffff6 6fffff05     ..o............o
  41e8dc:	0f00f6ff fffff6ff ffff06c0 edffff6f     ............o...
  41e8ec:	9ff6ffff ffffffff ddcd10fd dddddddd     ................
  41e8fc:	ffffff2f 12f3ffff 22222222 00000022     /......."""""...
	...
  41e914:	ff0f0000 ffffffff eeeedef3 20eeeeee     ............... 
	...
  41e930:	eeeeee0d ffe2eeee ffffffff 000030ff     .............0..
  41e940:	00000000 88888837 ef738888 ffffffff     ....7.....s.....
  41e950:	ffeffeff ffffffff ffff1cfe c1ffffff     ................
  41e960:	ffff8fd2 ff2df8ff feffef64 faffff45     ......-.d...E...
  41e970:	afb2ff2b d3ffffff ffff3d55 bbffffff     +.......U=......
  41e980:	ffffffff ffffffff ffafffff ffffffff     ................
  41e990:	000000f9 ff010000 0400f0ff 00d0ffff     ................
  41e9a0:	80ffff06 ffff0800 ff0a0030 0ca6aaff     ........0.......
  41e9b0:	f8ffffff ffffff0e dfdd0be1 000060ff     .............`..
  41e9c0:	0000fd4f 00f37f00 a0bf0000 ff000000     O...............
  41e9d0:	03000010 000000f8 0000c003 00200000     .............. .
  41e9e0:	55040000 0052b5ef 1ffdff00 0f00b0ff     ...U..R.........
  41e9f0:	fcffffff ffff0000 00203353 ff97ff0f     ........S3 .....
  41ea00:	ff0057fb c6ffaff8 8aff0ff8 a14afcff     .W............J.
  41ea10:	ffaff8ff ff0f22e3 ffffff8a aff8fff4     ....."..........
  41ea20:	4fffffff ffff8aff 5235f4ff ffffffaf     ...O......5R....
  41ea30:	ff0a0040 00f4ffff ffff7f00 000020fe     @............ ..
  41ea40:	00001001 af000000 00000000 30fa8f01     ...............0
  41ea50:	ef020000 0050ffff ffffbf00 1f0010ff     ......P.........
  41ea60:	f5ffffff ffff0300 0070ffff ffffff5f     ..........p._...
  41ea70:	ff0800f9 c0ffffff ffffdf00 9f20ffff     .............. .
  41ea80:	ffffffff ffff0efd f2ffffff 22222202     ............."""
  41ea90:	00002122 00c0ff08 09000000 000000a2     "!..............
  41eaa0:	bbbbbb5b a3bbbbbb ffffffff fbffffff     [...............
  41eab0:	e1300cfc fc110d1d e0300bfc fc100d1d     ..0.......0.....
  41eac0:	effffeff fceffefe 085af1ff fc5fa070     ..........Z.p._.
  41ead0:	297bf3ff fc7fc292 bbcbbfff fccbbfbb     ..{)............
  41eae0:	00200bfc fc000d00 cccccfff fbcccfcc     .. .............
  41eaf0:	ffffff9f f6ffffff 00000000 00020000     ................
  41eb00:	00000000 b0df0500 00000000 d0ffef07     ................
  41eb10:	18000000 70ffffff ff290000 00ffffff     .......p..).....
  41eb20:	ffff3b00 00f8ffff ffffff0a 00f1ffff     .;..............
  41eb30:	ffffff0f 00a0ffff afaa9a04 0020ffff     .............. .
  41eb40:	0e000000 0000fbff 0e000000 0000f4ff     ................
  41eb50:	0e000000 0000c0ff 0e000000 000050ff     .............P..
  41eb60:	0d000000 000000fd 04000000 000000b3     ................
  41eb70:	02555535 ffff0f00 ff00f4f2 f42fffff     5UU.........../.
  41eb80:	f2ffff0f fffff3ff 1f2232ff ffffffff     .........2".....
  41eb90:	fffffff7 ff8fffff f8ffffff ffffffff     ................
  41eba0:	ffff8fff fff8ffff ffffffff ffffff8f     ................
  41ebb0:	fffff8ff 8fffffff ffffffff aaaa8af8     ................
  41ebc0:	0030aaaa 55240000 00000031 ffaf0300     ..0...$U1.......
  41ebd0:	00c7ffff ffbf0200 ffffdefe ff5f00f6     .............._.
  41ebe0:	030010b5 dfb0ff8e 000000d3 f58f0000     ................
  41ebf0:	ae050018 0410c8fe df020060 f8ffffff     ........`.......
  41ec00:	0c000000 7d3495ff 000040ff 0000a202     ......4}.@......
  41ec10:	00007700 02000000 00000096 00000000     .w..............
  41ec20:	0050ff0d 00000000 60ff0e00 00000000     ..P........`....
  41ec30:	da050000 00000000 bbbbbb5b babbbbbb     ........[.......
  41ec40:	ffffff20 ffffffff 12fc90ff 22222222      ...........""""
  41ec50:	fcf70f22 ffffff5f fa2cffff ffff5ffc     "..._.....,.._..
  41ec60:	21ffffff ff5ffcfa ffffffff 26fcfa27     ...!.._.....'..&
  41ec70:	66666666 fefa1f66 bbbbbbbb b1bfbbbb     fffff...........
  41ec80:	ffffffaf ffffffff 00000050 00000000     ........P.......
  41ec90:	bb5b0000 bbbbbbbb ff20babb ffffffff     ..[....... .....
  41eca0:	90ffffff 222212fc 0f002122 ff5ffcf7     ......"""!...._.
  41ecb0:	00f8ffff 5ffcfa0c f8ffffff fcfa0100     ......._........
  41ecc0:	ffffff5f fa0700f8 666626fc 0f006366     _........&fffc..
  41ecd0:	bbbbfefa bbbbbbbb ffafb1bf ffffffff     ................
  41ece0:	0050ffff 00000000 00000000 bbbbbb5b     ..P.........[...
  41ecf0:	babbbbbb ffffff20 ffffffff 12fc90ff     .... ...........
  41ed00:	00102222 fcf70f00 d0ffff5f fa0c0000     ""......_.......
  41ed10:	ffff5ffc 010000d0 ff5ffcfa 0000d0ff     ._........_.....
  41ed20:	26fcfa07 00506666 fefa0f00 bbbbbbbb     ...&ffP.........
  41ed30:	b1bfbbbb ffffffaf ffffffff 00000050     ............P...
  41ed40:	00000000 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  41ed50:	ffffffff 90ffffff 002212fc 0f000000     ..........".....
  41ed60:	ff5ffcf7 00000030 5ffcfa0c 000030ff     .._.0......_.0..
  41ed70:	fcfa0100 0030ff5f fa070000 106626fc     ...._.0......&f.
  41ed80:	0f000000 bbbbfefa bbbbbbbb ffafb1bf     ................
  41ed90:	ffffffff 0050ffff 00000000 00000000     ......P.........
  41eda0:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  41edb0:	00fc90ff 00000000 fcf70f00 00000000     ................
  41edc0:	fa0c0000 000000fc 01000000 0000fcfa     ................
  41edd0:	00000000 00fcfa07 00000000 fefa0f00     ................
  41ede0:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  41edf0:	00000050 00000000 00000000 b2070000     P...............
  41ee00:	00000000 df0a0000 000000fa a9000000     ................
  41ee10:	0000f53d 02400400 001000e0 f8af0000     =.....@.........
  41ee20:	0000600b ff306c00 ffffffff f4ffffff     .`...l0.........
  41ee30:	0c00f9af 6d000050 00500540 0000c004     ....P..m@.P.....
  41ee40:	00000010 3ec40000 000000e8 2e000000     .......>........
  41ee50:	0000faef 00000000 00fa4f00 00000000     .........O......
	...
  41ee68:	00001001 ffef0700 af0000b3 20ff8ffd     ............... 
  41ee78:	09fdff04 fe0ab0ff f0af12fd 2c5df50e     ..............],
  41ee88:	ff0ff30e f59f1233 07f3ff0f ff0ff6ff     ....3...........
  41ee98:	f6ff06e2 1324fe0f f50df57f f30d2c7d     ......$.....},..
  41eea8:	11fdff0a ff03f0bf a0ff0bfe bffe7f00     ................
  41eeb8:	030010fe 0081dcac 43340000 66050000     ..........4C...f
  41eec8:	66f9ff7f ffffff50 35ffffff 66666666     ...fP......5ffff
  41eed8:	cc1c5066 c4cccccc ffffff02 2f60ffff     fP............`/
  41eee8:	6d7ffbf3 2fff02f6 60dff5b7 7ffbf22f     ...m.../...`/...
  41eef8:	ff02f65d dff5b72f fbf22f60 02f65d7f     ].../...`/...]..
  41ef08:	f5b72fff f32f60df f66d7ffb ffffff01     ./...`/...m.....
  41ef18:	0750ffff ccccccbc 00000090 01000000     ..P.............
  41ef28:	00000020 ff040000 00000050 ffff0200      .......P.......
  41ef38:	00000050 feff3904 04000000 a0ff39ff     P....9.......9..
  41ef48:	ff040000 00b039ff ffff0400 000020ff     .....9....... ..
  41ef58:	ffffff04 040000b0 b0ffffff ff040000     ................
  41ef68:	00b0ffff ffff0400 0000b0ff ffffbf00     ................
  41ef78:	000000b0 b0ffff0d 00000000 00b0ffff     ................
  41ef88:	09000000 000060a8 00000000 88881700     .....`..........
  41ef98:	40878888 ffef0200 ffffffff ff3e00f4     ...@..........>.
  41efa8:	cfffcfff ef03f7ff f808f9ff 3ef8ff09     ...............>
  41efb8:	20feffff f8ff2e40 ffffffdf ffef01e1     ... @...........
  41efc8:	ffff9ff8 8f0080ff ff09f8ff c202f9ff     ................
  41efd8:	00f8ff09 4efeff9f f8ff4efe ffff0900     .......N.N......
  41efe8:	ffffffff 8f0000f7 ffffffff 0000c1ff     ................
  41eff8:	00000000 ffffef03 fbfb03e2 ffa4bfce     ................
  41f008:	faa1031d 3ad0f1ff ffffaf1f fffaffff     .......:........
  41f018:	ffffffff ffffffaf fffffaff afffffff     ................
  41f028:	ffffffff fffffffa ffafffff faffffff     ................
  41f038:	ffffffff ffffadff 29f8ffff a8aaaaaa     ...........)....
  41f048:	00000000 03000000 00000000 f1040000     ................
  41f058:	00200800 10ff0100 0000f70b 0cf12f00     .. ........../..
  41f068:	444494ff ff1bff45 ffffffff ff8ff1ff     ..DDE...........
  41f078:	ffffffff f77f00fd 00000000 606f0000     ..............o`
  41f088:	00000000 00300000 00000000              ......0.....

0041f094 <glyph_dsc>:
	...
  41f09c:	03c00000 00000000 03c00000 00000a03     ................
  41f0ac:	0580000f 05000505 09d0001c 00000a0a     ................
  41f0bc:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  41f0cc:	09a000ce ff000b0a 02f00105 05000503     ................
  41f0dc:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  41f0ec:	05a00145 05000606 08200157 02000708     E.......W. .....
  41f0fc:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  41f10c:	03300183 00000303 04f00188 ffff0e07     ..0.............
  41f11c:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  41f12c:	081001fa 00000a08 08000222 00000a08     ........".......
  41f13c:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  41f14c:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  41f15c:	090002f9 00000a09 08a00326 00000a08     ........&.......
  41f16c:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  41f17c:	0820036b 01000808 0820038b 02000608     k. ....... .....
  41f18c:	082003a3 01000808 080003c3 00000a08     .. .............
  41f19c:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  41f1ac:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  41f1bc:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  41f1cc:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  41f1dc:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  41f1ec:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  41f1fc:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  41f20c:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  41f21c:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  41f22c:	0a300764 00010a09 08b00791 00000a09     d.0.............
  41f23c:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  41f24c:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  41f25c:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  41f26c:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  41f27c:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  41f28c:	0830099e 02010607 070009b3 ff000107     ..0.............
  41f29c:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  41f2ac:	099009dc 00010b08 08000a08 00000808     ................
  41f2bc:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  41f2cc:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  41f2dc:	09900acd 00010b08 03e00af9 00010b02     ................
  41f2ec:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  41f2fc:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  41f30c:	09900b92 00010808 08e00bb2 00000809     ................
  41f31c:	09900bd6 fd010b08 09900c02 fd000b09     ................
  41f32c:	05c00c34 00010805 07000c48 00000807     4.......H.......
  41f33c:	05d00c64 00000a06 09800c82 00010808     d...............
  41f34c:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  41f35c:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  41f36c:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  41f37c:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  41f38c:	08200dbc 03000308 05e00dc8 06000506     .. .............
  41f39c:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  41f3ac:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  41f3bc:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  41f3cc:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  41f3dc:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  41f3ec:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  41f3fc:	070011de ff000c07 0a801208 ff000c0b     ................
  41f40c:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  41f41c:	09a01307 fe000f0a 0c401352 fe010e0a     ........R.@.....
  41f42c:	0c401398 fe000f0d 0c4013fa ff000d0d     ..@.......@.....
  41f43c:	0c40144f ff000d0d 0c4014a4 fe010e0a     O.@.......@.....
  41f44c:	0c4014ea ffff0d0e 08c01545 ff000d09     ..@.....E.......
  41f45c:	08c01580 ff000d09 0c4015bb ff000d0d     ..........@.....
  41f46c:	0c401610 0300040d 0fc0162a 00000b10     ..@.....*.......
  41f47c:	11801682 fe000f12 0fc01709 feff0f11     ................
  41f48c:	0e001789 ff000d0e 0c4017e4 0100080d     ..........@.....
  41f49c:	0c401818 0100080d 1180184c 00000b12     ..@.....L.......
  41f4ac:	0e0018af 00000b0e 0e0018fc fe000f0e     ................
  41f4bc:	0e001965 feff0f0f 0c4019d6 ff000d0d     e.........@.....
  41f4cc:	0c401a2b fe000f0d 0c401a8d ff000d0d     +.@.......@.....
  41f4dc:	0c401ae2 ff000c0d 0e001b30 00000b0e     ..@.....0.......
  41f4ec:	08c01b7d feff0f0a 0c401bc8 fe000f0d     }.........@.....
  41f4fc:	0c401c2a fe000f0d 0fc01c8c 00000b10     *.@.............
  41f50c:	0e001ce4 feff0f10 0a801d5c fe000f0b     ........\.......
  41f51c:	11801daf ff000d12 11801e24 00000a12     ........$.......
  41f52c:	11801e7e 00000a12 11801ed8 00000a12     ~...............
  41f53c:	11801f32 00000a12 11801f8c 00000a12     2...............
  41f54c:	11801fe6 ff000c12 0c402052 fe000f0c     ........R @.....
  41f55c:	0c4020ac fe000f0d 0e00210e feff0f0f     . @......!......
  41f56c:	1180217f 00000b12 0a8021e2 fe000f0b     .!.......!......
  41f57c:	0e102235 00000a0f                       5"......

0041f584 <kern_class_values>:
  41f584:	00000100 00000000 00000100 00000002     ................
  41f594:	00000200 00000000 00000000 00000000     ................
  41f5a4:	00010000 00000000 00000000 00000000     ................
  41f5b4:	000a0100 0000fb06 f3f40000 04050b02     ................
  41f5c4:	010b02f7 00070209 00000000 00000000     ................
  41f5d4:	020d0000 000000fe 00000000 00000000     ................
  41f5e4:	f9000400 00000000 0404fc00 00fe0000     ................
  41f5f4:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  41f604:	fe0000fd 0000fc00 00000000 fe000000     ................
  41f614:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  41f624:	04070202 000004fc 000000f3 00000000     ................
  41f634:	00000000 000000f8 00000000 00000000     ................
  41f644:	fa000000 f700f5fd 000000fe 00090000     ................
  41f654:	01fffef9 0000fc00 0000effe 00000000     ................
  41f664:	00000000 09feee00 00000000 00000000     ................
  41f674:	00000000 000000f7 00000000 07000000     ................
  41f684:	00000200 000000fc 00000000 00000000     ................
  41f694:	00000000 02090000 00000001 00000000     ................
	...
  41f6c4:	000000f8 00000000 00000000 00000000     ................
  41f6d4:	00000000 02000000 fe070204 fe040000     ................
  41f6e4:	0602e1f9 00fd0004 00070008 00eb0007     ................
  41f6f4:	070007fd 000204fe 00fe0100 0012fc00     ................
  41f704:	00070012 07040309 f8000000 00000000     ................
  41f714:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  41f72c:	0000f100 00000000 00000000 00000000     ................
  41f73c:	00f40100 000000f2 1600fe00 0202fdfd     ................
  41f74c:	02fd00fe 00f40000 00000000 00000000     ................
  41f75c:	00ea0000 00000002 00000000 00000000     ................
  41f76c:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  41f77c:	0300f100 00fd00fb 00000000 00000000     ................
  41f78c:	06000000 0000e507 00000000 00000000     ................
  41f79c:	000b0000 00000002 02020000 ff00fcfd     ................
  41f7ac:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  41f7bc:	00fcf9f9 00fc00fc fe000000 00020000     ................
  41f7cc:	0100fe02 02000000 000000fe ff0202fe     ................
  41f7dc:	fc000000 0000ff00 01000000 00fe0300     ................
  41f7ec:	00fc00fd 0700fe00 00fe0000 00000000     ................
  41f7fc:	fefe01ff 00fe0000 000000fe 00000000     ................
  41f80c:	ffff0000 00fdfe00 00000000 fe000001     ................
  41f81c:	fefefe00 00000000 00000000 0000ff00     ................
  41f82c:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  41f83c:	fffa0006 f5ff00fd f402fe02 01000002     ................
  41f84c:	fef400f4 f500feed 00060400 00000003     ................
  41f85c:	fc000000 00f900fd 00fe0000 00fe0000     ................
  41f86c:	00000000 ff00ffff 000000fd 00000000     ................
  41f87c:	fe00fefe 0000fefd 000000fe 00000000     ................
  41f88c:	00000000 fd00fefe fc00fe00 fd000002     ................
  41f89c:	00020201 00000000 0000fe00 02000000     ................
  41f8ac:	00fe0000 00fdfefe 00000000 00020000     ................
  41f8bc:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  41f8cc:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  41f8dc:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  41f8ec:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  41f8fc:	02000200 00000000 00000000 fe000000     ................
  41f90c:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  41f91c:	00fe0000 01000000 000000ff 00000002     ................
  41f92c:	00000000 00000b00 00000000 00000002     ................
  41f93c:	000000fe 00000000 00000000 000200fc     ................
	...
  41f958:	000000fe 000000fc 00f9f500 f5fd0000     ................
  41f968:	02fe0000 0000fa00 00000000 00000000     ................
  41f978:	fc0000fc 00000000 00000000 00000000     ................
  41f988:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  41f998:	00000000 00f90000 fefd00fe f9fafb00     ................
  41f9a8:	00fc00fe 000000f9 00001200 fd000001     ................
  41f9b8:	f6000200 00000000 07fceb00 00f7fe07     ................
  41f9c8:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  41f9d8:	f30000f7 00000d00 000000ff fafeffff     ................
  41f9e8:	00eb00f9 00000000 00000000 00000001     ................
	...
  41fa04:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  41fa1c:	00ff0000 040000fc fb0003ff fafffe02     ................
  41fa2c:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  41fa3c:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  41fa4c:	00000002 00000000 0002fc00 fdfe00fd     ................
  41fa5c:	fefefef9 fffdfeff 00000000 fefefe00     ................
  41fa6c:	00000000 fe00fe03 fe000000 fdfefefd     ................
  41fa7c:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  41fa8c:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  41fa9c:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  41faac:	0007fcfc 00000000 00000000 00000002     ................
	...
  41fad0:	000000fc 00000000 00000000 00000000     ................
	...
  41fafc:	000000fe 00000000 00000000 00000000     ................
	...
  41fb18:	fefe0000 00000000 00000000 00000000     ................
  41fb28:	fd0000fd fefe0000 00000000 000000fe     ................
  41fb38:	0000ff00 fe000000 00000000 00fc00fd     ................
  41fb48:	00f90000 0004fb02 0000f5fe f700fefb     ................
  41fb58:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  41fb68:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  41fb78:	fef00000 f8fb0507 00f90100 04fefef5     ................
  41fb88:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  41fb98:	0000fe00 feff0000 f100fef7 00000000     ................
  41fba8:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  41fbb8:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  41fbc8:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  41fbd8:	03000000 09fc0200 fdfefe00 00000000     ................
  41fbe8:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  41fbf8:	00000009 00001200 fd000001 00000200     ................
	...
  41fc14:	0000fcfe ff000000 fe000000 fc0000fe     ................
  41fc24:	fc0000fe 00ff0400 00000000 00000100     ................
  41fc34:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  41fc44:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  41fc54:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  41fc64:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  41fc74:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  41fc84:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  41fc94:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  41fca4:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  41fcb4:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  41fcc4:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  41fcd4:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  41fce4:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  41fcf4:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  41fd04:	04fc0204 fff90000 0100ff00 0000fe01     ................
  41fd14:	00000000 000000fe 00070200 0000fd00     ................
  41fd24:	fefe0000 000000fd 00000201 00020000     ................
  41fd34:	000900fe fd010104 00000400 00000200     ................
	...
  41fd4c:	06000700 00000000 00000000 00000000     ................
  41fd5c:	00f30000 070004fe 03160000 0202fcfc     ................
  41fd6c:	00f501fe 00f30b00 00000000 00000000     ................
  41fd7c:	09f10000 0000001f 00000000 00000000     ................
  41fd8c:	0000f300 00000000 00000000 00000000     ................
	...
  41fda8:	fc0000fc 000000fe 00000000 00000000     ................
	...
  41fdc0:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  41fdd0:	02020000 000000fd 00000000 00000000     ................
  41fde0:	000006e3 00000000 00000000 00000000     ................
  41fdf0:	fa000000 fa000000 00000000 0000fffb     ................
  41fe00:	fd00fb00 0000f500 00000000 00000000     ................
  41fe10:	0000f100 00010000 00000000 0000fe00     ................
  41fe20:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  41fe30:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  41fe40:	00f10000 0000fffa 00000000 fcfd0000     ................
  41fe50:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  41fe60:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  41fe70:	f5fe00fb fe0000fe 000000fe fe000200     ................
  41fe80:	0004fefc 00000000 00000000 00000000     ................
	...
  41feac:	00030000 00000000 fe00fb00 fc000000     ................
  41febc:	00000002 00fcfefa fe00fa00 0000f500     ................
  41fecc:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  41fedc:	00000000 fffdfe00 000001fd 0700fd04     ................
  41feec:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  41ff04:	0b0e0000 fe00fefc 00120a12 00020000     ................
  41ff14:	00000800 000000fc 00000000 00fe0000     ................
  41ff24:	00000000 03000000 00000000 f7fefded     ................
  41ff34:	f10000f5 00000000 00000000 00000000     ................
  41ff44:	00000000 0000fc00 00000000 fe000000     ................
	...
  41ff5c:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  41ff7c:	000000fe fe0002fb f9020402 02fe0000     ................
  41ff8c:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  41ff9c:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  41ffb4:	0000fe00 00000000 00030000 ed000000     ................
  41ffc4:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  41ffdc:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  41ffec:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  41fffc:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  420014:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  42002c:	000000f3 00000000 00000000 fd00fefe     ................
  42003c:	00000000 fc0000fe fc0002fe fa00fefc     ................
  42004c:	fdfefbfe 0000fc00 00000000 00000000     ................
  42005c:	0700f100 00fc0000 fd000000 0000fe00     ................
  42006c:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  42007c:	020302fa fe070207 f70000fa faf90000     ................
  42008c:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  42009c:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  4200ac:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  4200bc:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  4200cc:	0002fe00 fe000000 fd020000 fd000001     ................
  4200dc:	00fd00fe 00000000 00000000 00000000     ................
  4200ec:	00000000 000500f2 0000fe00 00000000     ................
  4200fc:	0000fefe 05000400 00000000 01f3f200     ................
  42010c:	f704070a 08000902 00000400 00000000     ................
  42011c:	00000000 00000c00 00000000 00000000     ................
	...

00420134 <kern_classes>:
  420134:	0041f584 00420144 004201e4 0000313d     ..A.D.B...B.=1..

00420144 <kern_left_class_mapping>:
  420144:	02010000 05040300 08070602 0a090a09     ................
  420154:	0d000c0b 11100f0e 140c1312 00000014     ................
  420164:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  420174:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  420184:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  420194:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  4201a4:	0000093d 00000000 00000000 00000000     =...............
	...

004201e4 <kern_right_class_mapping>:
  4201e4:	02010000 05040300 08070602 0a090a09     ................
  4201f4:	0e0d0c0b 0c11100f 15141312 00000015     ................
  420204:	19181716 19191917 1a191917 19191919     ................
  420214:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  420224:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  420234:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  420244:	00000931 00000000 00000000 00000000     1...............
	...

00420284 <lv_font_montserrat_14>:
  420284:	0040ff6d 0040ff15 00030010 00000000     m.@...@.........
  420294:	0041cdfc 00000000                       ..A.....

0042029c <unicode_list_1>:
  42029c:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  4202ac:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  4202bc:	ef93ef8e ef9bef98 ef9def9c efa2efa1     ................
  4202cc:	efa4efa3 efb8efb7 efc0efbe efc4efc1     ................
  4202dc:	efc8efc7 efcbefc9 efe5efe3 f015f014     ................
  4202ec:	f019f017 f037f030 f043f03a f074f06c     ....0.7.:.C.l.t.
  4202fc:	f13bf0ab f191f190 f193f192 f1d7f194     ..;.............
  42030c:	f23df1e3 f4aaf254 f7f2f712              ..=.T.......

00420318 <__func__.7030>:
  420318:	615f766c 5f6d696e 72617473 00000074     lv_anim_start...
  420328:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  420338:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  420348:	6373696d 5f766c2f 6d696e61 0000632e     misc/lv_anim.c..
  420358:	5f77656e 6d696e61 203d2120 4c4c554e     new_anim != NULL
  420368:	00000000                                ....

0042036c <__func__.5601>:
  42036c:	705f766c 74656c61 6d5f6574 006e6961     lv_palette_main.

0042037c <colors.5600>:
  42037c:	ece806f2 d6613699 be24963a fa055e05     .....6a.:.$..^..
  42038c:	6a4db104 e7ce098e 00fe47ff a4fac0fc     ..Mj.....G......
  42039c:	f163a97a 0000f39c 732f2e2e 412f6372     z.c......./src/A
  4203ac:	742f4653 64726968 74726170 766c2f79     SF/thirdparty/lv
  4203bc:	2f386c67 2f637273 6373696d 5f766c2f     gl8/src/misc/lv_
  4203cc:	6f6c6f63 00632e72 61766e49 2064696c     color.c.Invalid 
  4203dc:	656c6170 3a657474 00642520              palette: %d.

004203e8 <__func__.6865>:
  4203e8:	665f766c 706f5f73 00006e65 732f2e2e     lv_fs_open..../s
  4203f8:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  420408:	766c2f79 2f386c67 2f637273 6373696d     y/lvgl8/src/misc
  420418:	5f766c2f 632e7366 00000000 5f77656e     /lv_fs.c....new_
  420428:	20767264 4e203d21 004c4c55 276e6143     drv != NULL.Can'
  420438:	706f2074 66206e65 3a656c69 74617020     t open file: pat
  420448:	73692068 4c554e20 0000004c 276e6143     h is NULL...Can'
  420458:	706f2074 66206e65 20656c69 29732528     t open file (%s)
  420468:	6e75203a 776f6e6b 7264206e 72657669     : unknown driver
  420478:	74656c20 00726574 276e6143 706f2074      letter.Can't op
  420488:	66206e65 20656c69 29732528 7264203a     en file (%s): dr
  420498:	72657669 746f6e20 61657220 00007964     iver not ready..
  4204a8:	276e6143 706f2074 66206e65 20656c69     Can't open file 
  4204b8:	29732528 706f203a 66206e65 74636e75     (%s): open funct
  4204c8:	206e6f69 20746f6e 73697865 00007374     ion not exists..
  4204d8:	5d73255b 6c252809 30252e64 2c646c33     [%s].(%ld.%03ld,
  4204e8:	6c252b20 20092964 203a7325 20567025      +%ld). %s: %pV 
  4204f8:	6e692809 20732520 656e696c 64252320     .(in %s line #%d
  420508:	00000a29                                )...

0042050c <lvl_prefix.5747>:
  42050c:	00420520 00420528 00420530 00420538      .B.(.B.0.B.8.B.
  42051c:	00420540 63617254 00000065 6f666e49     @.B.Trace...Info
  42052c:	00000000 6e726157 00000000 6f727245     ....Warn....Erro
  42053c:	00000072 72657355 00000000              r...User....

00420548 <sin0_90_table>:
  420548:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  420558:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  420568:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  420578:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  420588:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  420598:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  4205a8:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  4205b8:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  4205c8:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  4205d8:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  4205e8:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  4205f8:	7ffa7feb 00007fff                       ........

00420600 <__func__.6928>:
  420600:	6d5f766c 615f6d65 636f6c6c 00000000     lv_mem_alloc....

00420610 <__func__.6938>:
  420610:	6d5f766c 725f6d65 6c6c6165 0000636f     lv_mem_realloc..

00420620 <__func__.6956>:
  420620:	6d5f766c 625f6d65 675f6675 00007465     lv_mem_buf_get..

00420630 <__func__.6969>:
  420630:	6d5f766c 625f6d65 725f6675 61656c65     lv_mem_buf_relea
  420640:	00006573 6c756f63 74276e64 6c6c6120     se..couldn't all
  420650:	7461636f 656d2065 79726f6d 6c252820     ocate memory (%l
  420660:	79622075 29736574 00000000 64657375     u bytes)....used
  420670:	3625203a 25282064 25206433 202c2925     : %6d (%3d %%), 
  420680:	67617266 3325203a 25252064 6962202c     frag: %3d %%, bi
  420690:	73656767 72662074 203a6565 00643625     ggest free: %6d.
  4206a0:	2074754f 6d20666f 726f6d65 63202c79     Out of memory, c
  4206b0:	74276e61 6c6c6120 7461636f 20612065     an't allocate a 
  4206c0:	2077656e 66667562 28207265 72636e69     new buffer (incr
  4206d0:	65736165 756f7920 564c2072 4d454d5f     ease your LV_MEM
  4206e0:	5a49535f 65682f45 73207061 29657a69     _SIZE/heap size)
  4206f0:	00000000 20667562 4e203d21 004c4c55     ....buf != NULL.
  420700:	6d206f6e 2065726f 66667562 2e737265     no more buffers.
  420710:	6e692820 61657263 4c206573 454d5f56      (increase LV_ME
  420720:	55425f4d 414d5f46 554e5f58 0000294d     M_BUF_MAX_NUM)..
  420730:	6d206f4e 2065726f 66667562 2e737265     No more buffers.
  420740:	636e4920 73616572 564c2065 4d454d5f      Increase LV_MEM
  420750:	4655425f 58414d5f 4d554e5f 0000002e     _BUF_MAX_NUM....
  420760:	736c6166 00000065 73692070 746f6e20     false...p is not
  420770:	6b206120 6e776f6e 66756220 00726566      a known buffer.
  420780:	6c756f63 74276e64 6c6c6120 7461636f     couldn't allocat
  420790:	656d2065 79726f6d 00000000 732f2e2e     e memory....../s
  4207a0:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
  4207b0:	766c2f79 2f386c67 2f637273 6373696d     y/lvgl8/src/misc
  4207c0:	5f766c2f 2e6d656d 00000063 6f72657a     /lv_mem.c...zero
  4207d0:	6d656d5f 20736920 74697277 006e6574     _mem is written.
  4207e0:	6c6f6f70 69616620 0064656c              pool failed.

004207ec <__func__.6974>:
  4207ec:	735f766c 656c7974 7365725f 00007465     lv_style_reset..

004207fc <__func__.6983>:
  4207fc:	735f766c 656c7974 6d65725f 5f65766f     lv_style_remove_
  42080c:	706f7270 00000000                       prop....

00420814 <__func__.7004>:
  420814:	735f766c 656c7974 7465735f 6f72705f     lv_style_set_pro
  420824:	00000070 6e6e6143 7220746f 766f6d65     p...Cannot remov
  420834:	72702065 6620706f 206d6f72 736e6f63     e prop from cons
  420844:	74732074 00656c79 732f2e2e 412f6372     t style.../src/A
  420854:	742f4653 64726968 74726170 766c2f79     SF/thirdparty/lv
  420864:	2f386c67 2f637273 6373696d 5f766c2f     gl8/src/misc/lv_
  420874:	6c797473 00632e65 6e6e6143 7220746f     style.c.Cannot r
  420884:	74657365 6e6f6320 73207473 656c7974     eset const style
  420894:	00000000 6e6e6143 7320746f 70207465     ....Cannot set p
  4208a4:	65706f72 20797472 6320666f 74736e6f     roperty of const
  4208b4:	20746e61 6c797473 00000065              ant style...

004208c0 <__func__.6876>:
  4208c0:	745f766c 72656d69 6e61685f 72656c64     lv_timer_handler
  4208d0:	00000000                                ....

004208d4 <__func__.6898>:
  4208d4:	745f766c 72656d69 6572635f 00657461     lv_timer_create.
  4208e4:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  4208f4:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  420904:	6373696d 5f766c2f 656d6974 00632e72     misc/lv_timer.c.
  420914:	5f77656e 656d6974 3d212072 4c554e20     new_timer != NUL
  420924:	0000004c 73207449 736d6565 5f766c20     L...It seems lv_
  420934:	6b636974 636e695f 69202928 6f6e2073     tick_inc() is no
  420944:	61632074 64656c6c 0000002e              t called....

00420950 <__func__.5515>:
  420950:	636f6c62 656e5f6b 00007478              block_next..

0042095c <__func__.5533>:
  42095c:	67696c61 70755f6e 00000000              align_up....

00420968 <__func__.5546>:
  420968:	67696c61 74705f6e 00000072              align_ptr...

00420974 <__func__.5576>:
  420974:	72616573 735f6863 61746975 5f656c62     search_suitable_
  420984:	636f6c62 0000006b                       block...

0042098c <__func__.5586>:
  42098c:	6f6d6572 665f6576 5f656572 636f6c62     remove_free_bloc
  42099c:	0000006b                                k...

004209a0 <__func__.5596>:
  4209a0:	65736e69 665f7472 5f656572 636f6c62     insert_free_bloc
  4209b0:	0000006b                                k...

004209b4 <__func__.5622>:
  4209b4:	636f6c62 70735f6b 0074696c              block_split.

004209c0 <__func__.5630>:
  4209c0:	636f6c62 62615f6b 62726f73 00000000     block_absorb....

004209d0 <__func__.5637>:
  4209d0:	636f6c62 656d5f6b 5f656772 76657270     block_merge_prev
  4209e0:	00000000                                ....

004209e4 <__func__.5645>:
  4209e4:	636f6c62 656d5f6b 5f656772 7478656e     block_merge_next
  4209f4:	00000000                                ....

004209f8 <__func__.5653>:
  4209f8:	636f6c62 72745f6b 665f6d69 00656572     block_trim_free.

00420a08 <__func__.5677>:
  420a08:	636f6c62 6f6c5f6b 65746163 6572665f     block_locate_fre
  420a18:	00000065                                e...

00420a1c <__func__.5685>:
  420a1c:	636f6c62 72705f6b 72617065 73755f65     block_prepare_us
  420a2c:	00006465                                ed..

00420a30 <__func__.5757>:
  420a30:	61666564 5f746c75 6b6c6177 00007265     default_walker..

00420a40 <__func__.5804>:
  420a40:	745f766c 5f66736c 5f646461 6c6f6f70     lv_tlsf_add_pool
  420a50:	00000000                                ....

00420a54 <__func__.5820>:
  420a54:	745f766c 5f66736c 61657263 00006574     lv_tlsf_create..

00420a64 <__func__.5865>:
  420a64:	745f766c 5f66736c 65657266 00000000     lv_tlsf_free....

00420a74 <__func__.5879>:
  420a74:	745f766c 5f66736c 6c616572 00636f6c     lv_tlsf_realloc.
  420a84:	3d3d2030 6c612820 206e6769 61282026     0 == (align & (a
  420a94:	6e67696c 31202d20 26202929 6d222026     lign - 1)) && "m
  420aa4:	20747375 67696c61 6f74206e 70206120     ust align to a p
  420ab4:	7265776f 20666f20 226f7774 00000000     ower of two"....
  420ac4:	65737341 64657472 20746120 72707865     Asserted at expr
  420ad4:	69737365 203a6e6f 00007325 6f6c6221     ession: %s..!blo
  420ae4:	695f6b63 616c5f73 70287473 29766572     ck_is_last(prev)
  420af4:	20262620 65727022 756f6976 6c622073      && "previous bl
  420b04:	206b636f 276e6163 65622074 73616c20     ock can't be las
  420b14:	00002274 72727563 20746e65 22202626     t"..current && "
  420b24:	65657266 73696c20 61632074 746f6e6e     free list cannot
  420b34:	76616820 20612065 6c6c756e 746e6520      have a null ent
  420b44:	00227972 636f6c62 2626206b 61632220     ry".block && "ca
  420b54:	746f6e6e 736e6920 20747265 756e2061     nnot insert a nu
  420b64:	65206c6c 7972746e 746e6920 6874206f     ll entry into th
  420b74:	72662065 6c206565 22747369 00000000     e free list"....
  420b84:	636f6c62 6f745f6b 7274705f 6f6c6228     block_to_ptr(blo
  420b94:	20296b63 61203d3d 6e67696c 7274705f     ck) == align_ptr
  420ba4:	6f6c6228 745f6b63 74705f6f 6c622872     (block_to_ptr(bl
  420bb4:	296b636f 4c41202c 5f4e4749 455a4953     ock), ALIGN_SIZE
  420bc4:	26262029 6c622220 206b636f 20746f6e     ) && "block not 
  420bd4:	67696c61 2064656e 706f7270 796c7265     aligned properly
  420be4:	00000022 6d5f6c73 26207061 69222026     "...sl_map && "i
  420bf4:	7265746e 206c616e 6f727265 202d2072     nternal error - 
  420c04:	6f636573 6c20646e 6c657665 74696220     second level bit
  420c14:	2070616d 6e207369 226c6c75 00000000     map is null"....
  420c24:	636f6c62 69735f6b 6228657a 6b636f6c     block_size(block
  420c34:	3d3e2029 7a697320 00000065 7478656e     ) >= size...next
  420c44:	20262620 78656e22 68702074 63697379      && "next physic
  420c54:	62206c61 6b636f6c 6e616320 62207427     al block can't b
  420c64:	756e2065 00226c6c 6f6c6221 695f6b63     e null".!block_i
  420c74:	616c5f73 62287473 6b636f6c 26262029     s_last(block) &&
  420c84:	72702220 6f697665 62207375 6b636f6c      "previous block
  420c94:	6e616320 62207427 616c2065 00227473      can't be last".
  420ca4:	6f6c6221 695f6b63 616c5f73 62287473     !block_is_last(b
  420cb4:	6b636f6c 00000029 657a6973 20262620     lock)...size && 
  420cc4:	7a697322 756d2065 62207473 6f6e2065     "size must be no
  420cd4:	657a2d6e 00226f72 636f6c62 73695f6b     n-zero".block_is
  420ce4:	6572665f 6c622865 296b636f 20262620     _free(block) && 
  420cf4:	6f6c6222 6d206b63 20747375 66206562     "block must be f
  420d04:	22656572 00000000 636f6c62 6f745f6b     ree"....block_to
  420d14:	7274705f 6d657228 696e6961 2029676e     _ptr(remaining) 
  420d24:	61203d3d 6e67696c 7274705f 6f6c6228     == align_ptr(blo
  420d34:	745f6b63 74705f6f 65722872 6e69616d     ck_to_ptr(remain
  420d44:	29676e69 4c41202c 5f4e4749 455a4953     ing), ALIGN_SIZE
  420d54:	26262029 65722220 6e69616d 20676e69     ) && "remaining 
  420d64:	636f6c62 6f6e206b 6c612074 656e6769     block not aligne
  420d74:	72702064 7265706f 0022796c 636f6c62     d properly".bloc
  420d84:	69735f6b 6228657a 6b636f6c 3d3d2029     k_size(block) ==
  420d94:	6d657220 5f6e6961 657a6973 73202b20      remain_size + s
  420da4:	20657a69 6c62202b 5f6b636f 64616568     ize + block_head
  420db4:	6f5f7265 68726576 00646165 636f6c62     er_overhead.bloc
  420dc4:	69735f6b 7228657a 69616d65 676e696e     k_size(remaining
  420dd4:	3d3e2029 6f6c6220 735f6b63 5f657a69     ) >= block_size_
  420de4:	206e696d 22202626 636f6c62 7073206b     min && "block sp
  420df4:	2074696c 68746977 766e6920 64696c61     lit with invalid
  420e04:	7a697320 00002265 64657375 00000000      size"..used....
  420e14:	65657266 00000000 732f2e2e 412f6372     free....../src/A
  420e24:	742f4653 64726968 74726170 766c2f79     SF/thirdparty/lv
  420e34:	2f386c67 2f637273 6373696d 5f766c2f     gl8/src/misc/lv_
  420e44:	66736c74 0000632e 20702509 73207325     tlsf.c...%p %s s
  420e54:	3a657a69 20782520 29702528 0000000a     ize: %x (%p)....
  420e64:	745f766c 5f66736c 5f646461 6c6f6f70     lv_tlsf_add_pool
  420e74:	654d203a 79726f6d 73756d20 65622074     : Memory must be
  420e84:	696c6120 64656e67 20796220 62207525      aligned by %u b
  420e94:	73657479 00000a2e 745f766c 5f66736c     ytes....lv_tlsf_
  420ea4:	5f646461 6c6f6f70 654d203a 79726f6d     add_pool: Memory
  420eb4:	7a697320 756d2065 62207473 65622065      size must be be
  420ec4:	65657774 7525206e 646e6120 20752520     tween %u and %u 
  420ed4:	65747962 000a2e73 745f766c 5f66736c     bytes...lv_tlsf_
  420ee4:	61657263 203a6574 6f6d654d 6d207972     create: Memory m
  420ef4:	20747375 61206562 6e67696c 74206465     ust be aligned t
  420f04:	7525206f 74796220 0a2e7365 00000000     o %u bytes......
  420f14:	6f6c6221 695f6b63 72665f73 62286565     !block_is_free(b
  420f24:	6b636f6c 26262029 6c622220 206b636f     lock) && "block 
  420f34:	65726c61 20796461 6b72616d 61206465     already marked a
  420f44:	72662073 00226565 76657270 20262620     s free".prev && 
  420f54:	65727022 68702076 63697379 62206c61     "prev physical b
  420f64:	6b636f6c 6e616320 62207427 756e2065     lock can't be nu
  420f74:	00226c6c 636f6c62 73695f6b 6572665f     ll".block_is_fre
  420f84:	72702865 20297665 22202626 76657270     e(prev) && "prev
  420f94:	6f6c6220 69206b63 6f6e2073 72662074      block is not fr
  420fa4:	74206565 67756f68 616d2068 64656b72     ee though marked
  420fb4:	20736120 68637573 00000022 76657270      as such"...prev
  420fc4:	20262620 65727022 72665f76 66206565      && "prev_free f
  420fd4:	646c6569 6e616320 746f6e20 20656220     ield can not be 
  420fe4:	6c6c756e 00000022 7478656e 20262620     null"...next && 
  420ff4:	78656e22 72665f74 66206565 646c6569     "next_free field
  421004:	6e616320 746f6e20 20656220 6c6c756e      can not be null
  421014:	00000022                                "...

00421018 <__func__.7726>:
  421018:	745f766c 675f7478 735f7465 00657a69     lv_txt_get_size.

00421028 <__func__.7822>:
  421028:	5f766c5f 5f747874 5f746573 74786574     _lv_txt_set_text
  421038:	6d66765f 00000074 3b2e2c20 005f2d3a     _vfmt... ,.;:-_.
  421048:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
  421058:	74726170 766c2f79 2f386c67 2f637273     party/lvgl8/src/
  421068:	6373696d 5f766c2f 2e747874 00000063     misc/lv_txt.c...
  421078:	74786574 203d2120 4c4c554e 00000000     text != NULL....
  421088:	745f766c 675f7478 735f7465 3a657a69     lv_txt_get_size:
  421098:	746e6920 72656765 65766f20 6f6c6672      integer overflo
  4210a8:	68772077 20656c69 636c6163 74616c75     w while calculat
  4210b8:	20676e69 74786574 69656820 00746867     ing text height.

004210c8 <lv_btn_class>:
  4210c8:	0041c1a0 00413ab1 00000000 00000000     ..A..:A.........
  4210d8:	00000000 27d127d1 00000244              .....'.'D...

004210e4 <__func__.10053>:
  4210e4:	6c5f766c 6c656261 7465735f 746f645f     lv_label_set_dot
  4210f4:	706d745f 00000000                       _tmp....

004210fc <__func__.9765>:
  4210fc:	6c5f766c 6c656261 7465735f 7865745f     lv_label_set_tex
  42110c:	00000074                                t...

00421110 <__func__.9773>:
  421110:	6c5f766c 6c656261 7465735f 7865745f     lv_label_set_tex
  421120:	6d665f74 00000074                       t_fmt...

00421128 <__func__.9851>:
  421128:	6c5f766c 6c656261 7465675f 74656c5f     lv_label_get_let
  421138:	5f726574 00006e6f                       ter_on..

00421140 <lv_label_class>:
  421140:	0041c1a0 00414601 00413b91 00000000     ..A..FA..;A.....
  421150:	00414661 27d127d1 000004c0 74786554     aFA..'.'....Text
  421160:	00000000 5f736f70 21206e69 554e203d     ....pos_in != NU
  421170:	00004c4c 732f2e2e 412f6372 742f4653     LL..../src/ASF/t
  421180:	64726968 74726170 766c2f79 2f386c67     hirdparty/lvgl8/
  421190:	2f637273 67646977 2f737465 6c5f766c     src/widgets/lv_l
  4211a0:	6c656261 0000632e 20736f70 4e203d21     abel.c..pos != N
  4211b0:	004c4c55 6c696146 74206465 6c61206f     ULL.Failed to al
  4211c0:	61636f6c 6d206574 726f6d65 6f662079     locate memory fo
  4211d0:	6f642072 6d745f74 74705f70 00000072     r dot_tmp_ptr...
  4211e0:	6562616c 743e2d6c 20747865 4e203d21     label->text != N
  4211f0:	004c4c55 20746d66 4e203d21 004c4c55     ULL.fmt != NULL.

00421200 <cmaps>:
  421200:	00000020 0001000f 0042175c 00000000      .......\.B.....
  421210:	00030003 00000030 0004000b 00000000     ....0...........
  421220:	00000000 00020000                       ........

00421228 <dseg40>:
  421228:	0040ff6d 0040ff15 00000029 0002fb00     m.@...@.).......
  421238:	00421240 00000000                       @.B.....

00421240 <font_dsc>:
  421240:	00421258 004216e4 00421200 00000000     X.B...B...B.....
  421250:	02020000 20408b74                       ....t.@ 

00421258 <glyph_bitmap>:
  421258:	efff7f00 fefffbff f7ff7700 feffff00     .........w......
  421268:	fbfeffdf 00fefeff 00007f00 3f00807f     ...............?
  421278:	e01f00c0 00f00f00 0300f807 fe0100fc     ................
  421288:	00ff0000 00807f00 1f00c03f f00f00e0     ........?.......
  421298:	00f80700 0000fc01 6600003c 003c0000     ........<..f..<.
  4212a8:	00803f00 0f00e01f f80700f0 00fc0300     .?..............
  4212b8:	0000fe01 7f0000ff c03f0080 00e01f00     ..........?.....
  4212c8:	0700f00f fc0300f8 00fe0100 0000ff00     ................
  4212d8:	dfffbf7f bffbffbf 3713ffff ffffffff     ...........7....
  4212e8:	16f7ffff ffffff7f ffffffff fefffff3     ................
  4212f8:	c3feff9f 00e0feff 00007000 3c000078     .........p..x..<
  421308:	001e0000 00000f00 03008007 e00100c0     ................
  421318:	00f00000 00007800 1e00003c 000f0000     .....x..<.......
  421328:	00800700 ffffc101 09ffff21 0007ffff     ........!.......
  421338:	00c00300 0000e001 780000f0 003c0000     ...........x..<.
  421348:	00001e00 0700000f c0030080 00e00100     ................
  421358:	0000f000 3c000078 001e0000 00000f00     ....x..<........
  421368:	c3ffbf07 bff9ffbf ffffffff feff9ffe     ................
  421378:	e0feffc3 00700000 00007800 1e00003c     ......p..x..<...
  421388:	000f0000 00800700 0100c003 f00000e0     ................
  421398:	00780000 00003c00 0f00001e 80070000     ..x..<..........
  4213a8:	ffc30100 ffff21ff 78ffff71 003c0000     .....!..q..x..<.
  4213b8:	00001e00 0700000f c0030080 00e00100     ................
  4213c8:	0000f000 3c000078 001e0000 00000f00     ....x..<........
  4213d8:	03008007 e00100c0 00f00000 ff7f7800     .............x..
  4213e8:	faff3fdc 00ffff3f 00800000 0000f000     .?..?...........
  4213f8:	7f00007e 807f0000 00c03f00 0f00e01f     ~........?......
  421408:	f80700f0 00fc0300 0000fe01 7f0000ff     ................
  421418:	c03f0080 00e01f00 0700f00f fd0100f8     ..?.............
  421428:	ff3dffff ffff71ff 3c000078 001e0000     ..=..q..x..<....
  421438:	00000f00 03008007 e00100c0 00f00000     ................
  421448:	00007800 1e00003c 000f0000 00800700     .x..<...........
  421458:	0100c003 f00000e0 00180000 ffff0000     ................
  421468:	feff5ffe 1efeff3b 000f0000 00800700     ._..;...........
  421478:	0100c003 f00000e0 00780000 00003c00     ..........x..<..
  421488:	0f00001e 80070000 00c00300 0000e001     ................
  421498:	780000f0 ff3d0000 ffff1dff 78ffff71     ...x..=.....q..x
  4214a8:	003c0000 00001e00 0700000f c0030080     ..<.............
  4214b8:	00e00100 0000f000 3c000078 001e0000     ........x..<....
  4214c8:	00000f00 03008007 e00100c0 00f00000     ................
  4214d8:	ff3f7800 faff3fdc ffffff3f ff5ffeff     .x?..?..?....._.
  4214e8:	feff3bfe 0f00001e 80070000 00c00300     .;..............
  4214f8:	0000e001 780000f0 003c0000 00001e00     .......x..<.....
  421508:	0700000f c0030080 00e00100 0000f000     ................
  421518:	3d000078 ff1dffff ffff79ff 3f00007f     x..=.....y.....?
  421528:	e01f00c0 00f00f00 0300f807 fe0100fc     ................
  421538:	00ff0000 00807f00 1f00c03f f00f00e0     ........?.......
  421548:	00f80700 0100fc03 ff0000fe bf7f0000     ................
  421558:	ffbfdfff ffffbffb 7f000000 ff6fffff     ..............o.
  421568:	ffff7dff 3f00007f c03f0080 00e01f00     .}.....?..?.....
  421578:	0700f00f fc0300f8 00fe0100 0000ff00     ................
  421588:	3f00807f e01f00c0 00f00f00 0300f807     ...?............
  421598:	7c0000fc 00060000 00003800 1e00003c     ...|.....8..<...
  4215a8:	000f0000 00800700 0100c003 f00000e0     ................
  4215b8:	00780000 00003c00 0f00001e 80070000     ..x..<..........
  4215c8:	00c00300 0000e001 780000f0 001c0000     ...........x....
  4215d8:	ffff0200 feffdffe fefefffb 007f0000     ................
  4215e8:	00807f00 1f00c03f f00f00e0 00f80700     ....?...........
  4215f8:	0100fc03 ff0000fe 807f0000 00c03f00     .............?..
  421608:	0f00e01f f80700f0 fffd0100 ffff3dff     .............=..
  421618:	7fffff79 c03f0000 00e01f00 0700f00f     y.....?.........
  421628:	fc0300f8 00fe0100 0000ff00 3f00807f     ...............?
  421638:	e01f00c0 00f00f00 0300f807 fe0100fc     ................
  421648:	00ff0000 ffbf7f00 fbffbfdf ffffffbf     ................
  421658:	ffdffeff fefffbfe 7f0000fe 807f0000     ................
  421668:	00c03f00 0f00e01f f80700f0 00fc0300     .?..............
  421678:	0000fe01 7f0000ff c03f0080 00e01f00     ..........?.....
  421688:	0700f00f fd0100f8 ff3dffff ffff71ff     ..........=..q..
  421698:	3c000078 001e0000 00000f00 03008007     x..<............
  4216a8:	e00100c0 00f00000 00007800 1e00003c     .........x..<...
  4216b8:	000f0000 00800700 0100c003 f00000e0     ................
  4216c8:	3f780000 ff3fdcff ffff3ffa 00f7ff77     ..x?..?..?..w...
  4216d8:	00000000 bf030000 0000b8ff              ............

004216e4 <glyph_dsc>:
	...
  4216ec:	08000000 00000101 20a00001 12070313     ........... ....
  4216fc:	00000009 00fe0505 20a0000d 00042819     ........... .(..
  42170c:	20a0008a 02192604 20a0009d 00042819     ... .&..... .(..
  42171c:	20a0011a 00042819 20a00197 01042619     ... .(..... .&..
  42172c:	20a0020e 00042819 20a0028b 00042819     ... .(..... .(..
  42173c:	20a00308 02042719 20a00382 00042819     ... .'..... .(..
  42174c:	20a003ff 00042819 0800047c 09021605     ... .(..|.......

0042175c <unicode_list_0>:
  42175c:	000d0000 0000000e                       ........

00421764 <cmaps>:
  421764:	00000020 0001000f 00421f3c 00000000      .......<.B.....
  421774:	00030003 00000030 0004000b 00000000     ....0...........
  421784:	00000000 00020000                       ........

0042178c <dseg50>:
  42178c:	0040ff6d 0040ff15 00000032 0003fa00     m.@...@.2.......
  42179c:	004217a4 00000000                       ..B.....

004217a4 <font_dsc>:
  4217a4:	004217bc 00421ec4 00421764 00000000     ..B...B.d.B.....
  4217b4:	02020000 20408b7c                       ....|.@ 

004217bc <glyph_bitmap>:
  4217bc:	ffff3f00 7fffff3f ff7ffeff ffff7bfc     .?..?........{..
  4217cc:	ff7fe0fd ff7ffeff ff3fefff ff9fbfff     ..........?.....
  4217dc:	00807ffe 0000ff01 0000fe07 0000fc0f     ................
  4217ec:	0000f81f 0000f03f 0000e07f 0100c0ff     ....?...........
  4217fc:	030080ff 070000ff 0f0000fe 1f0000fc     ................
  42180c:	3f0000f8 7f0000f0 ff0000e0 ff0100c0     ...?............
  42181c:	ff030080 fe070000 f8030000 f0010000     ................
  42182c:	40080000 003e0000 007f0000 80ff0100     ...@..>.........
  42183c:	00ff0300 00fe0700 00fc0f00 00f81f00     ................
  42184c:	00f03f00 00e07f00 00c0ff00 0080ff01     .?..............
  42185c:	0000ff03 0000fe07 0000fc0f 0000f81f     ................
  42186c:	0000f03f 0000e07f 0100c0ff 030080ff     ?...............
  42187c:	070000ff e7fffffe f3fffffb f8ffffef     ................
  42188c:	f8ffff9f bf77ce08 ffffffff ffffffff     ......w.........
  42189c:	33e1fcff ffffffff ffffffff ffffffff     ...3............
  4218ac:	ff7fe1fc ff7ffeff ff3fecff ff1fb8ff     ..........?.....
  4218bc:	000070fe 0000e001 0000c007 0000800f     .p..............
  4218cc:	0000001f 0000003e 0000007c 010000f8     ....>...|.......
  4218dc:	030000f0 070000e0 0f0000c0 1f000080     ................
  4218ec:	3e000000 7c000000 f8000000 f0010000     ...>...|........
  4218fc:	e0030000 c0070000 81070000 07f3ffff     ................
  42190c:	1fe0ffff 3f83ffff 8007feff 800f0000     .......?........
  42191c:	001f0000 003e0000 007c0000 00f80000     ......>...|.....
  42192c:	00f00100 00e00300 00c00700 00800f00     ................
  42193c:	00001f00 00003e00 00007c00 0000f800     .....>...|......
  42194c:	0000f001 0000e003 0000c007 0000800f     ................
  42195c:	0000001f e0ffff3e f0ffff7b f8ffffef     ....>...{.......
  42196c:	f8ffff9f feffffff ecffffff b8ffff7f     ................
  42197c:	70feff3f e0010000 c0070000 800f0000     ?..p............
  42198c:	001f0000 003e0000 007c0000 00f80000     ......>...|.....
  42199c:	00f00100 00e00300 00c00700 00800f00     ................
  4219ac:	00001f00 00003e00 00007c00 0000f800     .....>...|......
  4219bc:	0000f001 0000e003 0000c007 ffff8307     ................
  4219cc:	ffff07f3 ffff1fec feff7fbc 010000f8     ................
  4219dc:	030000f0 070000e0 0f0000c0 1f000080     ................
  4219ec:	3e000000 7c000000 f8000000 f0010000     ...>...|........
  4219fc:	e0030000 c0070000 800f0000 001f0000     ................
  421a0c:	003e0000 007c0000 00f80000 00f00100     ..>...|.........
  421a1c:	00e00300 ffc10700 ff83e7ff ff0ff3ff     ................
  421a2c:	ff3ff8ff 0000f8ff 00000000 00000e00     ..?.............
  421a3c:	00001f00 00007f00 0000ff01 0000fe03     ................
  421a4c:	0000fc0f 0000f81f 0000f03f 0000e07f     ........?.......
  421a5c:	0100c0ff 030080ff 070000ff 0f0000fe     ................
  421a6c:	1f0000fc 3f0000f8 7f0000f0 ff0000e0     .......?........
  421a7c:	ff0100c0 ff030080 fe070000 fd070000     ................
  421a8c:	f7f3ffff dfecffff 3fbcffff 00f8feff     ...........?....
  421a9c:	00f00100 00e00300 00c00700 00800f00     ................
  421aac:	00001f00 00003e00 00007c00 0000f800     .....>...|......
  421abc:	0000f001 0000e003 0000c007 0000800f     ................
  421acc:	0000001f 0000003e 0000007c 010000f8     ....>...|.......
  421adc:	030000f0 030000e0 030000c0 01000080     ................
  421aec:	f8ffff7f e3ffff7f 87ffff3f 0ffeff9f     ........?.......
  421afc:	1f000080 3e000000 7c000000 f8000000     .......>...|....
  421b0c:	f0010000 e0030000 c0070000 800f0000     ................
  421b1c:	001f0000 003e0000 007c0000 00f80000     ......>...|.....
  421b2c:	00f00100 00e00300 00c00700 00800f00     ................
  421b3c:	00001f00 00003e00 ffff7d00 fffff7f0     .....>...}......
  421b4c:	ffffdfec feff3fbc 010000f8 030000f0     .....?..........
  421b5c:	070000e0 0f0000c0 1f000080 3e000000     ...............>
  421b6c:	7c000000 f8000000 f0010000 e0030000     ...|............
  421b7c:	c0070000 800f0000 001f0000 003e0000     ..............>.
  421b8c:	007c0000 00f80000 00f00100 00e00300     ..|.............
  421b9c:	ffc00700 ff83e7ff ff0ff3ff ff1ff8ff     ................
  421bac:	ff7ff8ff ff7ff8ff ff3fe3ff ff9f87ff     ..........?.....
  421bbc:	00800ffe 00001f00 00003e00 00007c00     .........>...|..
  421bcc:	0000f800 0000f001 0000e003 0000c007     ................
  421bdc:	0000800f 0000001f 0000003e 0000007c     ........>...|...
  421bec:	010000f8 030000f0 070000e0 0f0000c0     ................
  421bfc:	1f000080 3e000000 7d000000 f7f0ffff     .......>...}....
  421c0c:	dfecffff 3fbfffff 80fffeff 80ff0100     .......?........
  421c1c:	00ff0300 00fe0700 00fc0f00 00f81f00     ................
  421c2c:	00f03f00 00e07f00 00c0ff00 0080ff01     .?..............
  421c3c:	0000ff03 0000fe07 0000fc0f 0000f81f     ................
  421c4c:	0000f03f 0000e07f 0100c0ff 030080ff     ?...............
  421c5c:	070000ff e7fffffe f3fffffb f8ffffef     ................
  421c6c:	f8ffff9f feffff7f efffff7f bfffff3f     ............?...
  421c7c:	7ffeff9f ff010080 fe070000 fc0f0000     ................
  421c8c:	f81f0000 f03f0000 e07f0000 c0ff0000     ......?.........
  421c9c:	80ff0100 00ff0300 00fe0700 00fc0f00     ................
  421cac:	00f81f00 00f03f00 00e07f00 00c0ff00     .....?..........
  421cbc:	0080ff01 0000ff03 0000fe03 0000f801     ................
  421ccc:	00007004 0000001c 0000003c 010000f8     .p......<.......
  421cdc:	030000f0 070000e0 0f0000c0 1f000080     ................
  421cec:	3e000000 7c000000 f8000000 f0010000     ...>...|........
  421cfc:	e0030000 c0070000 800f0000 001f0000     ................
  421d0c:	003e0000 007c0000 00f80000 00f00100     ..>...|.........
  421d1c:	00e00300 00c00300 00800100 ff7f0000     ................
  421d2c:	ff7ffeff ff3fefff ff9fbfff 00807ffe     ......?.........
  421d3c:	0000ff01 0000fe07 0000fc0f 0000f81f     ................
  421d4c:	0000f03f 0000e07f 0100c0ff 030080ff     ?...............
  421d5c:	070000ff 0f0000fe 1f0000fc 3f0000f8     ...............?
  421d6c:	7f0000f0 ff0000e0 ff0100c0 ff030080     ................
  421d7c:	fe070000 fd070000 f7f3ffff dfecffff     ................
  421d8c:	3fbfffff 80fffeff 80ff0100 00ff0300     ...?............
  421d9c:	00fe0700 00fc0f00 00f81f00 00f03f00     .............?..
  421dac:	00e07f00 00c0ff00 0080ff01 0000ff03     ................
  421dbc:	0000fe07 0000fc0f 0000f81f 0000f03f     ............?...
  421dcc:	0000e07f 0100c0ff 030080ff 070000ff     ................
  421ddc:	e7fffffe f3fffffb f8ffffef f8ffff9f     ................
  421dec:	feffff7f efffff7f bfffff3f 7ffeff9f     ........?.......
  421dfc:	ff010080 fe070000 fc0f0000 f81f0000     ................
  421e0c:	f03f0000 e07f0000 c0ff0000 80ff0100     ..?.............
  421e1c:	00ff0300 00fe0700 00fc0f00 00f81f00     ................
  421e2c:	00f03f00 00e07f00 00c0ff00 0080ff01     .?..............
  421e3c:	0000ff03 0000fe07 fffffd07 fffff7f3     ................
  421e4c:	ffffdfec feff3fbc 010000f8 030000f0     .....?..........
  421e5c:	070000e0 0f0000c0 1f000080 3e000000     ...............>
  421e6c:	7c000000 f8000000 f0010000 e0030000     ...|............
  421e7c:	c0070000 800f0000 001f0000 003e0000     ..............>.
  421e8c:	007c0000 00f80000 00f00100 00e00300     ..|.............
  421e9c:	ffc00700 ff83e7ff ff0ff3ff ff1ff8ff     ................
  421eac:	ff7bf8ff 00e0fdff 00000000 00000000     ..{.............
  421ebc:	ffef0100 0080f7ff                       ........

00421ec4 <glyph_dsc>:
	...
  421ecc:	0a000000 00000101 28d00001 17080418     ...........(....
  421edc:	0000000d 00fd0606 28d00012 0005321f     ...........(.2..
  421eec:	28d000d4 021f3005 28d000f2 0005321f     ...(.0.....(.2..
  421efc:	28d001b4 0005321f 28d00276 0205301f     ...(.2..v..(.0..
  421f0c:	28d00330 0005321f 28d003f2 0005321f     0..(.2.....(.2..
  421f1c:	28d004b4 0205301f 28d0056e 0005321f     ...(.0..n..(.2..
  421f2c:	28d00630 0005321f 0a0006f2 0b021b06     0..(.2..........

00421f3c <unicode_list_0>:
  421f3c:	000d0000 0000000e                       ........

00421f44 <cmaps>:
  421f44:	00000020 0001000f 00422dc0 00000000      ........-B.....
  421f54:	00030003 00000030 0004000b 00000000     ....0...........
  421f64:	00000000 00020000                       ........

00421f6c <dseg70>:
  421f6c:	0040ff6d 0040ff15 00000046 0004f700     m.@...@.F.......
  421f7c:	00421f84 00000000                       ..B.....

00421f84 <font_dsc>:
  421f84:	00421f9c 00422d48 00421f44 00000000     ..B.H-B.D.B.....
  421f94:	02020000 20408b84                       ......@ 

00421f9c <glyph_bitmap>:
  421f9c:	ffff1f00 ffff9fff ffffdfff ffffcfff     ................
  421fac:	ffffefff ffffe7ff 3f3ee0ff ffffffbf     ..........>?....
  421fbc:	7f7cfcfd ffffffff ffffff4f ff7fccff     ..|.....O.......
  421fcc:	e3f3ffff feffffff ffff1fff fff89fff     ................
  421fdc:	ffe7ffff 01000080 0000f0ff 00fe3f00     .............?..
  421fec:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  421ffc:	ff070000 000000e0 0000fcff 80ff1f00     ................
  42200c:	ff030000 000000f0 0000fe7f c0ff0f00     ................
  42201c:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42202c:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42203c:	7f000000 000000fe 00c0ff0f f8ff0100     ................
  42204c:	3f000000 000000ff 00e0ff07 fcff0000     ...?............
  42205c:	1f000000 000080ff 00f0ff01 fe0f0000     ................
  42206c:	00000000 0000807f 00e00700 1c0e0000     ................
  42207c:	01000000 000000f8 00807f00 fc1f0000     ................
  42208c:	03000000 0000e0ff 00fe7f00 ff0f0000     ................
  42209c:	010000c0 0000f8ff 00ff3f00 ff070000     .........?......
  4220ac:	000000e0 0000fcff 80ff1f00 ff030000     ................
  4220bc:	000000f0 0000fe7f c0ff0f00 ff010000     ................
  4220cc:	000000f8 0000ff3f e0ff0700 ff000000     ....?...........
  4220dc:	000000fc 0080ff1f f0ff0300 7f000000     ................
  4220ec:	000000fe 00c0ff0f f8ff0100 3f000000     ...............?
  4220fc:	000000ff 00e0ff07 fcff0000 1f000000     ................
  42210c:	000080ff 00f0ff03 fe7f0000 c7ffffff     ................
  42211c:	ffff9fff ffe73ffe fdf1ffff ffffffff     .....?..........
  42212c:	ffff3f8f ffcffcff 80ffffff f1380c04     .?............8.
  42213c:	ffbfcfe7 ffffffff ffffffff ffffffff     ................
  42214c:	ffffffff 8fdfffff f7f12006 ffffffff     ......... ......
  42215c:	ffffffff ffffffff ffffffff ffffffff     ................
  42216c:	ffffffff 7f081c3e ffffffff ffffff4f     ....>.......O...
  42217c:	ff7fccff 83f3ffff feffffff ffff1ff0     ................
  42218c:	ff009eff c0e7ffff 01000000 000000f8     ................
  42219c:	00003f00 e00f0000 01000000 000000fc     .?..............
  4221ac:	00803f00 f0070000 00000000 000000fe     .?..............
  4221bc:	00c01f00 f8030000 00000000 0000007f     ................
  4221cc:	00e00f00 fc010000 00000000 0000803f     ............?...
  4221dc:	00f00700 fe000000 00000000 0000c01f     ................
  4221ec:	00f80300 7f000000 00000000 0000e00f     ................
  4221fc:	00fc0100 3f000000 00000080 0000f007     .......?........
  42220c:	00fe0000 1f000000 000000c0 0000f803     ................
  42221c:	001f0000 f8ffffff ffff1fe0 ff0704ff     ................
  42222c:	01e0ffff f8ffffff ffff3f08 ffc701fe     .........?......
  42223c:	3ec0ffff 00000000 0000f007 00fe0000     ...>............
  42224c:	1f000000 000000c0 0000f803 007f0000     ................
  42225c:	0f000000 000000e0 0000fc01 803f0000     ..............?.
  42226c:	07000000 000000f0 0000fe00 c01f0000     ................
  42227c:	03000000 000000f8 00007f00 e00f0000     ................
  42228c:	01000000 000000fc 00803f00 f0070000     .........?......
  42229c:	00000000 000000fe 00c01f00 f8030000     ................
  4222ac:	00000000 0000007f 00e00f00 fc010000     ................
  4222bc:	00000000 0000803f 00f00700 fe000000     ....?...........
  4222cc:	c0ffffff ffff9f1f ffe703fe 7df0ffff     ...............}
  4222dc:	ffffffff ffff3f8f ffcffcff 80ffffff     .....?..........
  4222ec:	ffffffff ffff5fff ffccffff f3ffffff     ....._..........
  4222fc:	ffffff87 ff3ff0fe 019effff e7ffffff     ......?.........
  42230c:	000000c0 0000f801 003f0000 0f000000     ..........?.....
  42231c:	000000e0 0000fc01 803f0000 07000000     ..........?.....
  42232c:	000000f0 0000fe00 c01f0000 03000000     ................
  42233c:	000000f8 00007f00 e00f0000 01000000     ................
  42234c:	000000fc 00803f00 f0070000 00000000     .....?..........
  42235c:	000000fe 00c01f00 f8030000 00000000     ................
  42236c:	0000007f 00e00f00 fc010000 00000000     ................
  42237c:	0000803f 00f00700 fe000000 00000000     ?...............
  42238c:	0000c01f 00f80300 1f000000 ffffff01     ................
  42239c:	ff7fe0f8 0f04ffff eeffffff ffffff03     ................
  4223ac:	ff7ff0f9 0f7efeff dfffffff 000000c0     ......~.........
  4223bc:	0000f803 007f0000 0f000000 000000e0     ................
  4223cc:	0000fc01 803f0000 07000000 000000f0     ......?.........
  4223dc:	0000fe00 c01f0000 03000000 000000f8     ................
  4223ec:	00007f00 e00f0000 01000000 000000fc     ................
  4223fc:	00803f00 f0070000 00000000 000000fe     .?..............
  42240c:	00c01f00 f8030000 00000000 0000007f     ................
  42241c:	00e00f00 fc010000 00000000 0000803f     ............?...
  42242c:	00f00700 fe000000 00000000 0000c01f     ................
  42243c:	00f80300 7f000000 ffffff01 ff7fe0c7     ................
  42244c:	0f3cfeff f1ffffff ffffff83 ff7f80ff     ..<.............
  42245c:	1ffcffff ffffffff 00000080 00000000     ................
  42246c:	0c000000 00000000 0000c003 007e0000     ..............~.
  42247c:	1f000000 000000f0 0080ff07 f0ff0000     ................
  42248c:	3f000000 000000fe 00c0ff07 f8ff0100     ...?............
  42249c:	3f000000 000000ff 00e0ff07 fcff0000     ...?............
  4224ac:	1f000000 000080ff 00f0ff03 fe7f0000     ................
  4224bc:	0f000000 0000c0ff 00f8ff01 ff3f0000     ..............?.
  4224cc:	07000000 0000e0ff 00fcff00 ff1f0000     ................
  4224dc:	03000080 0000f0ff 00fe7f00 ff0f0000     ................
  4224ec:	010000c0 0000f8ff 00ff3f00 ff070000     .........?......
  4224fc:	000000e0 0000fcff 80ff1f00 ff030000     ................
  42250c:	000000f0 fffffe1f 9ffff8ff 07ffffff     ................
  42251c:	ffffffe7 ffff1dee 3ff0f9ff 7efeffff     ...........?...~
  42252c:	ffffff07 0000c0df 00f80300 7f000000     ................
  42253c:	00000000 0000e00f 00fc0100 3f000000     ...............?
  42254c:	00000080 0000f007 00fe0000 1f000000     ................
  42255c:	000000c0 0000f803 007f0000 0f000000     ................
  42256c:	000000e0 0000fc01 803f0000 07000000     ..........?.....
  42257c:	000000f0 0000fe00 c01f0000 03000000     ................
  42258c:	000000f8 00007f00 e00f0000 01000000     ................
  42259c:	000000fc 00803f00 f0070000 00000000     .....?..........
  4225ac:	000000fe 00c01f00 f8030000 00000000     ................
  4225bc:	0000007f 00e00300 1c000000 00000000     ................
  4225cc:	ff7f8000 0fffffff ffffffff ffff7fc0     ................
  4225dc:	ff63f0ff 0ffeffff ffffff1f fffff881     ..c.............
  4225ec:	803fe0ff 07000000 000000f0 0000fe00     ..?.............
  4225fc:	c01f0000 03000000 000000f8 00007f00     ................
  42260c:	e00f0000 01000000 000000fc 00803f00     .............?..
  42261c:	f0070000 00000000 000000fe 00c01f00     ................
  42262c:	f8030000 00000000 0000007f 00e00f00     ................
  42263c:	fc010000 00000000 0000803f 00f00700     ........?.......
  42264c:	fe000000 00000000 0000c01f 00f80300     ................
  42265c:	7f000000 00000000 0000e00f 00fc0100     ................
  42266c:	3f000000 00000080 0000f007 fffe0000     ...?............
  42267c:	1ff8ffff ffffff9f ffffe703 ff1deeff     ................
  42268c:	f0f9ffff feffff3f ffff077e 00c0dfff     ....?...~.......
  42269c:	f8030000 00000000 0000007f 00e00f00     ................
  4226ac:	fc010000 00000000 0000803f 00f00700     ........?.......
  4226bc:	fe000000 00000000 0000c01f 00f80300     ................
  4226cc:	7f000000 00000000 0000e00f 00fc0100     ................
  4226dc:	3f000000 00000080 0000f007 00fe0000     ...?............
  4226ec:	1f000000 000000c0 0000f803 007f0000     ................
  4226fc:	0f000000 000000e0 0000fc01 803f0000     ..............?.
  42270c:	07000000 000000f0 0000fe00 c01f0000     ................
  42271c:	03000000 000000f8 ff007f00 e0c7ffff     ................
  42272c:	feffff1f ffff073c ff81f1ff 80ffffff     ....<...........
  42273c:	ffffff3f ffff0ffc 7f80ffff ffffffff     ?...............
  42274c:	ffffff0f ff7fc0ff 63f0ffff feffffff     ...........c....
  42275c:	ffff1f0f fff881ff 3fe0ffff 00000080     ...........?....
  42276c:	0000f007 00fe0000 1f000000 000000c0     ................
  42277c:	0000f803 007f0000 0f000000 000000e0     ................
  42278c:	0000fc01 803f0000 07000000 000000f0     ......?.........
  42279c:	0000fe00 c01f0000 03000000 000000f8     ................
  4227ac:	00007f00 e00f0000 01000000 000000fc     ................
  4227bc:	00803f00 f0070000 00000000 000000fe     .?..............
  4227cc:	00c01f00 f8030000 00000000 0000007f     ................
  4227dc:	00e00f00 fc010000 00000000 0000803f     ............?...
  4227ec:	00f00700 fe000000 f8ffffff ffff9f1f     ................
  4227fc:	ffe703ff 1deeffff f9ffffff ffff3ff8     .............?..
  42280c:	ffc77ffe fedfffff 03000000 0000f0ff     ................
  42281c:	00fe7f00 ff0f0000 010000c0 0000f8ff     ................
  42282c:	00ff3f00 ff070000 000000e0 0000fcff     .?..............
  42283c:	80ff1f00 ff030000 000000f0 0000fe7f     ................
  42284c:	c0ff0f00 ff010000 000000f8 0000ff3f     ............?...
  42285c:	e0ff0700 ff000000 000000fc 0080ff1f     ................
  42286c:	f0ff0300 7f000000 000000fe 00c0ff0f     ................
  42287c:	f8ff0100 3f000000 000000ff 00e0ff07     .......?........
  42288c:	fcff0000 1f000000 000080ff 00f0ff03     ................
  42289c:	fe7f0000 c7ffffff ffff9fff ffe73ffe     .............?..
  4228ac:	fdf1ffff ffffffff ffff3f8f ffcffcff     .........?......
  4228bc:	80ffffff ffffff7f ffff4fff 7fccffff     .........O......
  4228cc:	f3ffffff ffffffe3 ff1ffffe f89fffff     ................
  4228dc:	e7ffffff 000080ff 00f0ff01 fe3f0000     ..............?.
  4228ec:	0f000000 0000c0ff 00f8ff01 ff3f0000     ..............?.
  4228fc:	07000000 0000e0ff 00fcff00 ff1f0000     ................
  42290c:	03000080 0000f0ff 00fe7f00 ff0f0000     ................
  42291c:	010000c0 0000f8ff 00ff3f00 ff070000     .........?......
  42292c:	000000e0 0000fcff 80ff1f00 ff030000     ................
  42293c:	000000f0 0000fe7f c0ff0f00 ff010000     ................
  42294c:	000000f8 0000ff3f e0ff0700 ff000000     ....?...........
  42295c:	000000fc 0080ff1f f0ff0100 0f000000     ................
  42296c:	000000fc 00807f00 e0210000 0f000000     ..........!.....
  42297c:	00000008 0000f003 007e0000 1f000000     ..........~.....
  42298c:	000000c0 0000f803 007f0000 0f000000     ................
  42299c:	000000e0 0000fc01 803f0000 07000000     ..........?.....
  4229ac:	000000f0 0000fe00 c01f0000 03000000     ................
  4229bc:	000000f8 00007f00 e00f0000 01000000     ................
  4229cc:	000000fc 00803f00 f0070000 00000000     .....?..........
  4229dc:	000000fe 00c01f00 f8030000 00000000     ................
  4229ec:	0000007f 00e00f00 fc010000 00000000     ................
  4229fc:	0000803f 00f00700 fe000000 00000000     ?...............
  422a0c:	0000c01f 00f80300 7f000000 00000000     ................
  422a1c:	0000e003 001c0000 00000000 ffff7f80     ................
  422a2c:	ff4fffff ccffffff ffffff7f ffffe3f3     ..O.............
  422a3c:	1ffffeff 9fffffff fffffff8 0080ffe7     ................
  422a4c:	f0ff0100 3f000000 000000fe 00c0ff0f     .......?........
  422a5c:	f8ff0100 3f000000 000000ff 00e0ff07     .......?........
  422a6c:	fcff0000 1f000000 000080ff 00f0ff03     ................
  422a7c:	fe7f0000 0f000000 0000c0ff 00f8ff01     ................
  422a8c:	ff3f0000 07000000 0000e0ff 00fcff00     ..?.............
  422a9c:	ff1f0000 03000080 0000f0ff 00fe7f00     ................
  422aac:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  422abc:	ff070000 000000e0 0000fcff 80ff1f00     ................
  422acc:	ff030000 000000f0 fffffe1f 9ffff8ff     ................
  422adc:	07ffffff ffffffe7 ffff1dee 3ff8f9ff     ...............?
  422aec:	7ffeffff ffffffc7 0000fedf f0ff0300     ................
  422afc:	7f000000 000000fe 00c0ff0f f8ff0100     ................
  422b0c:	3f000000 000000ff 00e0ff07 fcff0000     ...?............
  422b1c:	1f000000 000080ff 00f0ff03 fe7f0000     ................
  422b2c:	0f000000 0000c0ff 00f8ff01 ff3f0000     ..............?.
  422b3c:	07000000 0000e0ff 00fcff00 ff1f0000     ................
  422b4c:	03000080 0000f0ff 00fe7f00 ff0f0000     ................
  422b5c:	010000c0 0000f8ff 00ff3f00 ff070000     .........?......
  422b6c:	000000e0 0000fcff 80ff1f00 ff030000     ................
  422b7c:	000000f0 fffffe7f 9fffc7ff 3ffeffff     ...............?
  422b8c:	ffffffe7 fffffdf1 3f8fffff fcffffff     ...........?....
  422b9c:	ffffffcf ff7f80ff 4fffffff ffffffff     ...........O....
  422bac:	ffff7fcc ffe3f3ff fffeffff ffffff1f     ................
  422bbc:	fffff89f 80ffe7ff ff010000 000000f0     ................
  422bcc:	0000fe3f c0ff0f00 ff010000 000000f8     ?...............
  422bdc:	0000ff3f e0ff0700 ff000000 000000fc     ?...............
  422bec:	0080ff1f f0ff0300 7f000000 000000fe     ................
  422bfc:	00c0ff0f f8ff0100 3f000000 000000ff     ...........?....
  422c0c:	00e0ff07 fcff0000 1f000000 000080ff     ................
  422c1c:	00f0ff03 fe7f0000 0f000000 0000c0ff     ................
  422c2c:	00f8ff01 ff3f0000 07000000 0000e0ff     ......?.........
  422c3c:	00fcff00 ff1f0000 03000080 0000f0ff     ................
  422c4c:	fffe1f00 fff8ffff ffffff9f ffffe707     ................
  422c5c:	ff1deeff f0f9ffff feffff3f ffff077e     ........?...~...
  422c6c:	00c0dfff f8030000 00000000 0000007f     ................
  422c7c:	00e00f00 fc010000 00000000 0000803f     ............?...
  422c8c:	00f00700 fe000000 00000000 0000c01f     ................
  422c9c:	00f80300 7f000000 00000000 0000e00f     ................
  422cac:	00fc0100 3f000000 00000080 0000f007     .......?........
  422cbc:	00fe0000 1f000000 000000c0 0000f803     ................
  422ccc:	007f0000 0f000000 000000e0 0000fc01     ................
  422cdc:	803f0000 07000000 000000f0 0000fe00     ..?.............
  422cec:	c01f0000 03000000 000000f8 ff007f00     ................
  422cfc:	e0c7ffff feffff1f ffff073c ff81f1ff     ........<.......
  422d0c:	80ffffff ffffff3f ffff0ffc 3e80ffff     ....?..........>
  422d1c:	ffffbf3f 7cfcfdff 00000000 00000000     ?......|........
	...
  422d38:	01000000 fffffdf1 e3efffff 000000e0     ................

00422d48 <glyph_dsc>:
	...
  422d50:	0e000000 00000101 39200001 200c0621     .......... 9!.. 
  422d60:	0000001a 00fc0809 39200023 0007462b     ........#. 9+F..
  422d70:	3920019c 032c4307 392001d7 0007462b     .. 9.C,... 9+F..
  422d80:	39200350 0008462b 392004c9 0307432b     P. 9+F.... 9+C..
  422d90:	39200632 0007462b 392007ab 0007462b     2. 9+F.... 9+F..
  422da0:	39200924 0307432b 39200a8d 0007462b     $. 9+C.... 9+F..
  422db0:	39200c06 0007462b 0e000d7f 0f032509     .. 9+F.......%..

00422dc0 <unicode_list_0>:
  422dc0:	000d0000 0000000e 454c4449 00000000     ........IDLE....
  422dd0:	51726d54 00000000 20726d54 00637653     TmrQ....Tmr Svc.

00422de0 <__func__.18001>:
  422de0:	6e657665 61685f74 656c646e 00000072     event_handler...

00422df0 <__func__.18006>:
  422df0:	756e656d 6e61685f 72656c64 00000000     menu_handler....

00422e00 <__func__.18011>:
  422e00:	5f6b6c63 646e6168 0072656c 64323025     clk_handler.%02d
  422e10:	00000000 732f2e2e 6d2f6372 2e6e6961     ....../src/main.
  422e20:	00000063 63696c43 0064656b 67676f54     c...Clicked.Togg
  422e30:	0064656c 80ef205b 00000091 80ef207c     led.[ ......| ..
  422e40:	0000008b 80ef207c 005d2093 81ef205b     ....| ... ].[ ..
  422e50:	000000b7 20b881ef 0000005d 343a3731     ....... ]...17:4
  422e60:	00000036 0044434c 6c696146 74206465     6...LCD.Failed t
  422e70:	7263206f 65746165 64636c20 73617420     o create lcd tas
  422e80:	000a0d6b 63617473 766f206b 6c667265     k...stack overfl
  422e90:	2520776f 73252078 00000a0d              ow %x %s....

00422e9c <_global_impure_ptr>:
  422e9c:	20400040 33323130 37363534 42413938     @.@ 0123456789AB
  422eac:	46454443 00000000 33323130 37363534     CDEF....01234567
  422ebc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  422ecc:	0000296c                                l)..

00422ed0 <blanks.7217>:
  422ed0:	20202020 20202020 20202020 20202020                     

00422ee0 <zeroes.7218>:
  422ee0:	30303030 30303030 30303030 30303030     0000000000000000
  422ef0:	00000043 49534f50 00000058              C...POSIX...

00422efc <_ctype_>:
  422efc:	20202000 20202020 28282020 20282828     .         ((((( 
  422f0c:	20202020 20202020 20202020 20202020                     
  422f1c:	10108820 10101010 10101010 10101010      ...............
  422f2c:	04040410 04040404 10040404 10101010     ................
  422f3c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  422f4c:	01010101 01010101 01010101 10101010     ................
  422f5c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  422f6c:	02020202 02020202 02020202 10101010     ................
  422f7c:	00000020 00000000 00000000 00000000      ...............
	...

00423000 <_init>:
  423000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423002:	bf00      	nop
  423004:	bcf8      	pop	{r3, r4, r5, r6, r7}
  423006:	bc08      	pop	{r3}
  423008:	469e      	mov	lr, r3
  42300a:	4770      	bx	lr

0042300c <__init_array_start>:
  42300c:	0041ab8d 	.word	0x0041ab8d

00423010 <__frame_dummy_init_array_entry>:
  423010:	0040018d                                ..@.

00423014 <_fini>:
  423014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423016:	bf00      	nop
  423018:	bcf8      	pop	{r3, r4, r5, r6, r7}
  42301a:	bc08      	pop	{r3}
  42301c:	469e      	mov	lr, r3
  42301e:	4770      	bx	lr

00423020 <__fini_array_start>:
  423020:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <style_refr>:
2040000a:	0001                                        ..

2040000c <zero_mem>:
2040000c:	c3d4 a1b2                                   ....

20400010 <act_id.6978>:
20400010:	006f 0000                                   o...

20400014 <_lv_txt_encoded_get_byte_id>:
20400014:	34f1 0041                                   .4A.

20400018 <_lv_txt_encoded_get_char_id>:
20400018:	3535 0041                                   55A.

2040001c <_lv_txt_encoded_next>:
2040001c:	339f 0041                                   .3A.

20400020 <_lv_txt_encoded_prev>:
20400020:	349d 0041                                   .4A.

20400024 <_lv_txt_encoded_size>:
20400024:	336d 0041                                   m3A.

20400028 <_lv_txt_get_encoded_length>:
20400028:	3565 0041                                   e5A.

2040002c <uxCriticalNesting>:
2040002c:	aaaa aaaa                                   ....

20400030 <g_interrupt_enabled>:
20400030:	0001 0000                                   ....

20400034 <SystemCoreClock>:
20400034:	0900 003d                                   ..=.

20400038 <_impure_ptr>:
20400038:	0040 2040 0000 0000                         @.@ ....

20400040 <impure_data>:
20400040:	0000 0000 032c 2040 0394 2040 03fc 2040     ....,.@ ..@ ..@ 
	...
204000e8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000f8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400468 <__malloc_av_>:
	...
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 

20400870 <__malloc_sbrk_base>:
20400870:	ffff ffff                                   ....

20400874 <__malloc_trim_threshold>:
20400874:	0000 0002                                   ....

20400878 <__atexit_recursive_mutex>:
20400878:	a138 2043                                   8.C 

2040087c <__global_locale>:
2040087c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040095c:	bbc9 0041 b61d 0041 0000 0000 2efc 0042     ..A...A.......B.
2040096c:	075c 0042 0f10 0042 0f10 0042 0f10 0042     \.B...B...B...B.
2040097c:	0f10 0042 0f10 0042 0f10 0042 0f10 0042     ..B...B...B...B.
2040098c:	0f10 0042 0f10 0042 ffff ffff ffff ffff     ..B...B.........
2040099c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
